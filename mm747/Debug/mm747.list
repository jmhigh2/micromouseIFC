
C:\Users\Jonathan\Desktop\mm747\Debug\mm747.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  080065c0  080065c0  000165c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800676c  0800676c  0001676c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006774  08006774  00016774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006778  08006778  00016778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000540  20000000  0800677c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000268  20000540  08006cbc  00020540  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200007a8  08006cbc  000207a8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020540  2**0
                  CONTENTS, READONLY
 10 .debug_line   00005cca  00000000  00000000  00020570  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0001050d  00000000  00000000  0002623a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000216b  00000000  00000000  00036747  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000ad8  00000000  00000000  000388b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000011a0  00000000  00000000  00039390  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00008afb  00000000  00000000  0003a530  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003f53  00000000  00000000  0004302b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  00046f7e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000276c  00000000  00000000  00046ffc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000540 	.word	0x20000540
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080065a4 	.word	0x080065a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000544 	.word	0x20000544
 800020c:	080065a4 	.word	0x080065a4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f092 0f00 	teq	r2, #0
 80005aa:	bf14      	ite	ne
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e720      	b.n	8000404 <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aedc 	beq.w	80003b2 <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6c1      	b.n	80003b2 <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpun>:
 8000b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x10>
 8000b6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b72:	d10a      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x20>
 8000b7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0001 	mov.w	r0, #1
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_d2iz>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b98:	d215      	bcs.n	8000bc6 <__aeabi_d2iz+0x36>
 8000b9a:	d511      	bpl.n	8000bc0 <__aeabi_d2iz+0x30>
 8000b9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba4:	d912      	bls.n	8000bcc <__aeabi_d2iz+0x3c>
 8000ba6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bba:	bf18      	it	ne
 8000bbc:	4240      	negne	r0, r0
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d105      	bne.n	8000bd8 <__aeabi_d2iz+0x48>
 8000bcc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	bf08      	it	eq
 8000bd2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf4:	f000 b97e 	b.w	8000ef4 <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	468c      	mov	ip, r1
 8000c16:	460e      	mov	r6, r1
 8000c18:	4604      	mov	r4, r0
 8000c1a:	9d08      	ldr	r5, [sp, #32]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d150      	bne.n	8000cc2 <__udivmoddi4+0xb2>
 8000c20:	428a      	cmp	r2, r1
 8000c22:	4617      	mov	r7, r2
 8000c24:	d96c      	bls.n	8000d00 <__udivmoddi4+0xf0>
 8000c26:	fab2 fe82 	clz	lr, r2
 8000c2a:	f1be 0f00 	cmp.w	lr, #0
 8000c2e:	d00b      	beq.n	8000c48 <__udivmoddi4+0x38>
 8000c30:	f1ce 0420 	rsb	r4, lr, #32
 8000c34:	fa20 f404 	lsr.w	r4, r0, r4
 8000c38:	fa01 f60e 	lsl.w	r6, r1, lr
 8000c3c:	ea44 0c06 	orr.w	ip, r4, r6
 8000c40:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c44:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c48:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c4c:	0c22      	lsrs	r2, r4, #16
 8000c4e:	fbbc f0f9 	udiv	r0, ip, r9
 8000c52:	fa1f f887 	uxth.w	r8, r7
 8000c56:	fb09 c610 	mls	r6, r9, r0, ip
 8000c5a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000c5e:	fb00 f308 	mul.w	r3, r0, r8
 8000c62:	42b3      	cmp	r3, r6
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x6a>
 8000c66:	19f6      	adds	r6, r6, r7
 8000c68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6c:	f080 8122 	bcs.w	8000eb4 <__udivmoddi4+0x2a4>
 8000c70:	42b3      	cmp	r3, r6
 8000c72:	f240 811f 	bls.w	8000eb4 <__udivmoddi4+0x2a4>
 8000c76:	3802      	subs	r0, #2
 8000c78:	443e      	add	r6, r7
 8000c7a:	1af6      	subs	r6, r6, r3
 8000c7c:	b2a2      	uxth	r2, r4
 8000c7e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000c82:	fb09 6613 	mls	r6, r9, r3, r6
 8000c86:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000c8a:	fb03 f808 	mul.w	r8, r3, r8
 8000c8e:	45a0      	cmp	r8, r4
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x96>
 8000c92:	19e4      	adds	r4, r4, r7
 8000c94:	f103 32ff 	add.w	r2, r3, #4294967295
 8000c98:	f080 810a 	bcs.w	8000eb0 <__udivmoddi4+0x2a0>
 8000c9c:	45a0      	cmp	r8, r4
 8000c9e:	f240 8107 	bls.w	8000eb0 <__udivmoddi4+0x2a0>
 8000ca2:	3b02      	subs	r3, #2
 8000ca4:	443c      	add	r4, r7
 8000ca6:	ebc8 0404 	rsb	r4, r8, r4
 8000caa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2d00      	cmp	r5, #0
 8000cb2:	d062      	beq.n	8000d7a <__udivmoddi4+0x16a>
 8000cb4:	fa24 f40e 	lsr.w	r4, r4, lr
 8000cb8:	2300      	movs	r3, #0
 8000cba:	602c      	str	r4, [r5, #0]
 8000cbc:	606b      	str	r3, [r5, #4]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0xc6>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d055      	beq.n	8000d76 <__udivmoddi4+0x166>
 8000cca:	2100      	movs	r1, #0
 8000ccc:	e885 0041 	stmia.w	r5, {r0, r6}
 8000cd0:	4608      	mov	r0, r1
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f183 	clz	r1, r3
 8000cda:	2900      	cmp	r1, #0
 8000cdc:	f040 8090 	bne.w	8000e00 <__udivmoddi4+0x1f0>
 8000ce0:	42b3      	cmp	r3, r6
 8000ce2:	d302      	bcc.n	8000cea <__udivmoddi4+0xda>
 8000ce4:	4282      	cmp	r2, r0
 8000ce6:	f200 80f8 	bhi.w	8000eda <__udivmoddi4+0x2ca>
 8000cea:	1a84      	subs	r4, r0, r2
 8000cec:	eb66 0603 	sbc.w	r6, r6, r3
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	46b4      	mov	ip, r6
 8000cf4:	2d00      	cmp	r5, #0
 8000cf6:	d040      	beq.n	8000d7a <__udivmoddi4+0x16a>
 8000cf8:	e885 1010 	stmia.w	r5, {r4, ip}
 8000cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d00:	b912      	cbnz	r2, 8000d08 <__udivmoddi4+0xf8>
 8000d02:	2701      	movs	r7, #1
 8000d04:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d08:	fab7 fe87 	clz	lr, r7
 8000d0c:	f1be 0f00 	cmp.w	lr, #0
 8000d10:	d135      	bne.n	8000d7e <__udivmoddi4+0x16e>
 8000d12:	1bf3      	subs	r3, r6, r7
 8000d14:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d18:	fa1f fc87 	uxth.w	ip, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d22:	0c22      	lsrs	r2, r4, #16
 8000d24:	fb08 3610 	mls	r6, r8, r0, r3
 8000d28:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000d2c:	fb0c f300 	mul.w	r3, ip, r0
 8000d30:	42b3      	cmp	r3, r6
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x134>
 8000d34:	19f6      	adds	r6, r6, r7
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x132>
 8000d3c:	42b3      	cmp	r3, r6
 8000d3e:	f200 80ce 	bhi.w	8000ede <__udivmoddi4+0x2ce>
 8000d42:	4610      	mov	r0, r2
 8000d44:	1af6      	subs	r6, r6, r3
 8000d46:	b2a2      	uxth	r2, r4
 8000d48:	fbb6 f3f8 	udiv	r3, r6, r8
 8000d4c:	fb08 6613 	mls	r6, r8, r3, r6
 8000d50:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000d54:	fb0c fc03 	mul.w	ip, ip, r3
 8000d58:	45a4      	cmp	ip, r4
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x15c>
 8000d5c:	19e4      	adds	r4, r4, r7
 8000d5e:	f103 32ff 	add.w	r2, r3, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x15a>
 8000d64:	45a4      	cmp	ip, r4
 8000d66:	f200 80b5 	bhi.w	8000ed4 <__udivmoddi4+0x2c4>
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	ebcc 0404 	rsb	r4, ip, r4
 8000d70:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d74:	e79c      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000d76:	4629      	mov	r1, r5
 8000d78:	4628      	mov	r0, r5
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	f1ce 0120 	rsb	r1, lr, #32
 8000d82:	fa06 f30e 	lsl.w	r3, r6, lr
 8000d86:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d8a:	fa20 f901 	lsr.w	r9, r0, r1
 8000d8e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d92:	40ce      	lsrs	r6, r1
 8000d94:	ea49 0903 	orr.w	r9, r9, r3
 8000d98:	fbb6 faf8 	udiv	sl, r6, r8
 8000d9c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000da0:	fb08 661a 	mls	r6, r8, sl, r6
 8000da4:	fa1f fc87 	uxth.w	ip, r7
 8000da8:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8000dac:	fb0a f20c 	mul.w	r2, sl, ip
 8000db0:	429a      	cmp	r2, r3
 8000db2:	fa00 f40e 	lsl.w	r4, r0, lr
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1be>
 8000db8:	19db      	adds	r3, r3, r7
 8000dba:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000dbe:	f080 8087 	bcs.w	8000ed0 <__udivmoddi4+0x2c0>
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	f240 8084 	bls.w	8000ed0 <__udivmoddi4+0x2c0>
 8000dc8:	f1aa 0a02 	sub.w	sl, sl, #2
 8000dcc:	443b      	add	r3, r7
 8000dce:	1a9b      	subs	r3, r3, r2
 8000dd0:	fa1f f989 	uxth.w	r9, r9
 8000dd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000ddc:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8000de0:	fb01 f60c 	mul.w	r6, r1, ip
 8000de4:	429e      	cmp	r6, r3
 8000de6:	d907      	bls.n	8000df8 <__udivmoddi4+0x1e8>
 8000de8:	19db      	adds	r3, r3, r7
 8000dea:	f101 32ff 	add.w	r2, r1, #4294967295
 8000dee:	d26b      	bcs.n	8000ec8 <__udivmoddi4+0x2b8>
 8000df0:	429e      	cmp	r6, r3
 8000df2:	d969      	bls.n	8000ec8 <__udivmoddi4+0x2b8>
 8000df4:	3902      	subs	r1, #2
 8000df6:	443b      	add	r3, r7
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8000dfe:	e78e      	b.n	8000d1e <__udivmoddi4+0x10e>
 8000e00:	f1c1 0e20 	rsb	lr, r1, #32
 8000e04:	fa22 f40e 	lsr.w	r4, r2, lr
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	4323      	orrs	r3, r4
 8000e0c:	fa20 f70e 	lsr.w	r7, r0, lr
 8000e10:	fa06 f401 	lsl.w	r4, r6, r1
 8000e14:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e18:	fa26 f60e 	lsr.w	r6, r6, lr
 8000e1c:	433c      	orrs	r4, r7
 8000e1e:	fbb6 f9fc 	udiv	r9, r6, ip
 8000e22:	0c27      	lsrs	r7, r4, #16
 8000e24:	fb0c 6619 	mls	r6, ip, r9, r6
 8000e28:	fa1f f883 	uxth.w	r8, r3
 8000e2c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000e30:	fb09 f708 	mul.w	r7, r9, r8
 8000e34:	42b7      	cmp	r7, r6
 8000e36:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3a:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x242>
 8000e40:	18f6      	adds	r6, r6, r3
 8000e42:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e46:	d241      	bcs.n	8000ecc <__udivmoddi4+0x2bc>
 8000e48:	42b7      	cmp	r7, r6
 8000e4a:	d93f      	bls.n	8000ecc <__udivmoddi4+0x2bc>
 8000e4c:	f1a9 0902 	sub.w	r9, r9, #2
 8000e50:	441e      	add	r6, r3
 8000e52:	1bf6      	subs	r6, r6, r7
 8000e54:	b2a0      	uxth	r0, r4
 8000e56:	fbb6 f4fc 	udiv	r4, r6, ip
 8000e5a:	fb0c 6614 	mls	r6, ip, r4, r6
 8000e5e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000e62:	fb04 f808 	mul.w	r8, r4, r8
 8000e66:	45b8      	cmp	r8, r7
 8000e68:	d907      	bls.n	8000e7a <__udivmoddi4+0x26a>
 8000e6a:	18ff      	adds	r7, r7, r3
 8000e6c:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e70:	d228      	bcs.n	8000ec4 <__udivmoddi4+0x2b4>
 8000e72:	45b8      	cmp	r8, r7
 8000e74:	d926      	bls.n	8000ec4 <__udivmoddi4+0x2b4>
 8000e76:	3c02      	subs	r4, #2
 8000e78:	441f      	add	r7, r3
 8000e7a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 8000e7e:	ebc8 0707 	rsb	r7, r8, r7
 8000e82:	fba0 8902 	umull	r8, r9, r0, r2
 8000e86:	454f      	cmp	r7, r9
 8000e88:	4644      	mov	r4, r8
 8000e8a:	464e      	mov	r6, r9
 8000e8c:	d314      	bcc.n	8000eb8 <__udivmoddi4+0x2a8>
 8000e8e:	d029      	beq.n	8000ee4 <__udivmoddi4+0x2d4>
 8000e90:	b365      	cbz	r5, 8000eec <__udivmoddi4+0x2dc>
 8000e92:	ebba 0304 	subs.w	r3, sl, r4
 8000e96:	eb67 0706 	sbc.w	r7, r7, r6
 8000e9a:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000e9e:	40cb      	lsrs	r3, r1
 8000ea0:	40cf      	lsrs	r7, r1
 8000ea2:	ea4e 0303 	orr.w	r3, lr, r3
 8000ea6:	e885 0088 	stmia.w	r5, {r3, r7}
 8000eaa:	2100      	movs	r1, #0
 8000eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	e6f8      	b.n	8000ca6 <__udivmoddi4+0x96>
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	e6e0      	b.n	8000c7a <__udivmoddi4+0x6a>
 8000eb8:	ebb8 0402 	subs.w	r4, r8, r2
 8000ebc:	eb69 0603 	sbc.w	r6, r9, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e5      	b.n	8000e90 <__udivmoddi4+0x280>
 8000ec4:	4604      	mov	r4, r0
 8000ec6:	e7d8      	b.n	8000e7a <__udivmoddi4+0x26a>
 8000ec8:	4611      	mov	r1, r2
 8000eca:	e795      	b.n	8000df8 <__udivmoddi4+0x1e8>
 8000ecc:	4681      	mov	r9, r0
 8000ece:	e7c0      	b.n	8000e52 <__udivmoddi4+0x242>
 8000ed0:	468a      	mov	sl, r1
 8000ed2:	e77c      	b.n	8000dce <__udivmoddi4+0x1be>
 8000ed4:	3b02      	subs	r3, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e748      	b.n	8000d6c <__udivmoddi4+0x15c>
 8000eda:	4608      	mov	r0, r1
 8000edc:	e70a      	b.n	8000cf4 <__udivmoddi4+0xe4>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	443e      	add	r6, r7
 8000ee2:	e72f      	b.n	8000d44 <__udivmoddi4+0x134>
 8000ee4:	45c2      	cmp	sl, r8
 8000ee6:	d3e7      	bcc.n	8000eb8 <__udivmoddi4+0x2a8>
 8000ee8:	463e      	mov	r6, r7
 8000eea:	e7d1      	b.n	8000e90 <__udivmoddi4+0x280>
 8000eec:	4629      	mov	r1, r5
 8000eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ef8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f30 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000efc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000efe:	e003      	b.n	8000f08 <LoopCopyDataInit>

08000f00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f06:	3104      	adds	r1, #4

08000f08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f08:	480b      	ldr	r0, [pc, #44]	; (8000f38 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f10:	d3f6      	bcc.n	8000f00 <CopyDataInit>
  ldr  r2, =_sbss
 8000f12:	4a0b      	ldr	r2, [pc, #44]	; (8000f40 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f14:	e002      	b.n	8000f1c <LoopFillZerobss>

08000f16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f18:	f842 3b04 	str.w	r3, [r2], #4

08000f1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f1c:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f20:	d3f9      	bcc.n	8000f16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f22:	f002 fc1f 	bl	8003764 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f26:	f002 fc43 	bl	80037b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f2a:	f002 f87f 	bl	800302c <main>
  bx  lr    
 8000f2e:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f30:	20050000 	.word	0x20050000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8000f34:	0800677c 	.word	0x0800677c
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f38:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f3c:	20000540 	.word	0x20000540
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000f40:	20000540 	.word	0x20000540
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f44:	200007a8 	.word	0x200007a8

08000f48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f48:	e7fe      	b.n	8000f48 <ADC_IRQHandler>
	...

08000f4c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f4e:	b510      	push	{r4, lr}
 8000f50:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000f52:	6818      	ldr	r0, [r3, #0]
 8000f54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f58:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f5c:	f000 fa8a 	bl	8001474 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	4621      	mov	r1, r4
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295
 8000f68:	f000 fa4c 	bl	8001404 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	bd10      	pop	{r4, pc}
 8000f70:	20000000 	.word	0x20000000

08000f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f74:	b508      	push	{r3, lr}
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f76:	2003      	movs	r0, #3
 8000f78:	f000 fa32 	bl	80013e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f7ff ffe5 	bl	8000f4c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000f82:	f002 fa95 	bl	80034b0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000f86:	2000      	movs	r0, #0
 8000f88:	bd08      	pop	{r3, pc}
	...

08000f8c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000f8c:	4a02      	ldr	r2, [pc, #8]	; (8000f98 <HAL_IncTick+0xc>)
 8000f8e:	6813      	ldr	r3, [r2, #0]
 8000f90:	3301      	adds	r3, #1
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000594 	.word	0x20000594

08000f9c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f9c:	4b01      	ldr	r3, [pc, #4]	; (8000fa4 <HAL_GetTick+0x8>)
 8000f9e:	6818      	ldr	r0, [r3, #0]
}
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000594 	.word	0x20000594

08000fa8 <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fa8:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000faa:	4604      	mov	r4, r0
 8000fac:	2800      	cmp	r0, #0
 8000fae:	f000 809e 	beq.w	80010ee <HAL_ADC_Init+0x146>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fb2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000fb4:	b923      	cbnz	r3, 8000fc0 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fb6:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fb8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fbc:	f002 faa8 	bl	8003510 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fc2:	06db      	lsls	r3, r3, #27
 8000fc4:	f100 808e 	bmi.w	80010e4 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fce:	f023 0302 	bic.w	r3, r3, #2
 8000fd2:	f043 0302 	orr.w	r3, r3, #2
 8000fd6:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000fd8:	4b46      	ldr	r3, [pc, #280]	; (80010f4 <HAL_ADC_Init+0x14c>)
 8000fda:	685a      	ldr	r2, [r3, #4]
 8000fdc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000fe0:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8000fe2:	6859      	ldr	r1, [r3, #4]
 8000fe4:	6862      	ldr	r2, [r4, #4]
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000fea:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000fec:	6921      	ldr	r1, [r4, #16]
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000fee:	685a      	ldr	r2, [r3, #4]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ff0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000ff2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ff6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000ff8:	685a      	ldr	r2, [r3, #4]
 8000ffa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000ffe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001000:	685a      	ldr	r2, [r3, #4]
 8001002:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001006:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001008:	68a2      	ldr	r2, [r4, #8]
 800100a:	6859      	ldr	r1, [r3, #4]
 800100c:	430a      	orrs	r2, r1
 800100e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001010:	689a      	ldr	r2, [r3, #8]
 8001012:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001016:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001018:	68e2      	ldr	r2, [r4, #12]
 800101a:	6899      	ldr	r1, [r3, #8]
 800101c:	430a      	orrs	r2, r1
 800101e:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001020:	4a35      	ldr	r2, [pc, #212]	; (80010f8 <HAL_ADC_Init+0x150>)
 8001022:	4290      	cmp	r0, r2
 8001024:	d00e      	beq.n	8001044 <HAL_ADC_Init+0x9c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001026:	6899      	ldr	r1, [r3, #8]
 8001028:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 800102c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	4302      	orrs	r2, r0
 8001032:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001034:	689a      	ldr	r2, [r3, #8]
 8001036:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800103a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800103c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800103e:	6899      	ldr	r1, [r3, #8]
 8001040:	430a      	orrs	r2, r1
 8001042:	e006      	b.n	8001052 <HAL_ADC_Init+0xaa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001044:	689a      	ldr	r2, [r3, #8]
 8001046:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800104a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800104c:	689a      	ldr	r2, [r3, #8]
 800104e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001052:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001054:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8001056:	69a1      	ldr	r1, [r4, #24]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001058:	f022 0202 	bic.w	r2, r2, #2
 800105c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800105e:	689a      	ldr	r2, [r3, #8]
 8001060:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8001064:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001066:	6a22      	ldr	r2, [r4, #32]
 8001068:	b19a      	cbz	r2, 8001092 <HAL_ADC_Init+0xea>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001070:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001072:	685a      	ldr	r2, [r3, #4]
 8001074:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001078:	605a      	str	r2, [r3, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800107a:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800107e:	fa92 f2a2 	rbit	r2, r2
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001082:	fab2 f182 	clz	r1, r2
 8001086:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001088:	6858      	ldr	r0, [r3, #4]
 800108a:	3a01      	subs	r2, #1
 800108c:	408a      	lsls	r2, r1
 800108e:	4302      	orrs	r2, r0
 8001090:	e002      	b.n	8001098 <HAL_ADC_Init+0xf0>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001092:	685a      	ldr	r2, [r3, #4]
 8001094:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001098:	605a      	str	r2, [r3, #4]
    
    /* Set ADC parameters */
    ADC_Init(hadc);
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800109a:	2000      	movs	r0, #0
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800109c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800109e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80010a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80010a4:	69e2      	ldr	r2, [r4, #28]
 80010a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010a8:	3a01      	subs	r2, #1
 80010aa:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80010ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80010b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010c0:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80010c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80010c4:	689a      	ldr	r2, [r3, #8]
 80010c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80010d2:	609a      	str	r2, [r3, #8]
    
    /* Set ADC parameters */
    ADC_Init(hadc);
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010d4:	6460      	str	r0, [r4, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010d8:	f023 0303 	bic.w	r3, r3, #3
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6423      	str	r3, [r4, #64]	; 0x40
 80010e2:	e000      	b.n	80010e6 <HAL_ADC_Init+0x13e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010e4:	2001      	movs	r0, #1
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010e6:	2300      	movs	r3, #0
 80010e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010ec:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 80010ee:	2001      	movs	r0, #1
  /* Release Lock */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80010f0:	bd10      	pop	{r4, pc}
 80010f2:	bf00      	nop
 80010f4:	40012300 	.word	0x40012300
 80010f8:	0f000001 	.word	0x0f000001

080010fc <HAL_ADC_Start>:
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
  __IO uint32_t counter = 0;
 80010fc:	2300      	movs	r3, #0
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010fe:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 8001100:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001102:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001106:	2b01      	cmp	r3, #1
 8001108:	d04d      	beq.n	80011a6 <HAL_ADC_Start+0xaa>
 800110a:	2301      	movs	r3, #1
 800110c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001110:	6803      	ldr	r3, [r0, #0]
 8001112:	689a      	ldr	r2, [r3, #8]
 8001114:	07d1      	lsls	r1, r2, #31
 8001116:	d503      	bpl.n	8001120 <HAL_ADC_Start+0x24>
      counter--;
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001118:	689a      	ldr	r2, [r3, #8]
 800111a:	07d2      	lsls	r2, r2, #31
 800111c:	d412      	bmi.n	8001144 <HAL_ADC_Start+0x48>
 800111e:	e037      	b.n	8001190 <HAL_ADC_Start+0x94>
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001120:	689a      	ldr	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001122:	4922      	ldr	r1, [pc, #136]	; (80011ac <HAL_ADC_Start+0xb0>)
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001124:	f042 0201 	orr.w	r2, r2, #1
 8001128:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800112a:	4a21      	ldr	r2, [pc, #132]	; (80011b0 <HAL_ADC_Start+0xb4>)
 800112c:	6812      	ldr	r2, [r2, #0]
 800112e:	fbb2 f2f1 	udiv	r2, r2, r1
 8001132:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    while(counter != 0)
    {
      counter--;
 8001136:	9201      	str	r2, [sp, #4]
    __HAL_ADC_ENABLE(hadc);
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
    while(counter != 0)
 8001138:	9a01      	ldr	r2, [sp, #4]
 800113a:	2a00      	cmp	r2, #0
 800113c:	d0ec      	beq.n	8001118 <HAL_ADC_Start+0x1c>
    {
      counter--;
 800113e:	9a01      	ldr	r2, [sp, #4]
 8001140:	3a01      	subs	r2, #1
 8001142:	e7f8      	b.n	8001136 <HAL_ADC_Start+0x3a>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001144:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001146:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800114a:	f022 0201 	bic.w	r2, r2, #1
 800114e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001152:	6402      	str	r2, [r0, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	0551      	lsls	r1, r2, #21
 8001158:	d505      	bpl.n	8001166 <HAL_ADC_Start+0x6a>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800115a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800115c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001160:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001164:	6402      	str	r2, [r0, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001166:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001168:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800116c:	d002      	beq.n	8001174 <HAL_ADC_Start+0x78>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800116e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001170:	f022 0206 	bic.w	r2, r2, #6
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001174:	6442      	str	r2, [r0, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001176:	2200      	movs	r2, #0
 8001178:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800117c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001180:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001182:	4a0c      	ldr	r2, [pc, #48]	; (80011b4 <HAL_ADC_Start+0xb8>)
 8001184:	6852      	ldr	r2, [r2, #4]
 8001186:	06d2      	lsls	r2, r2, #27
 8001188:	d004      	beq.n	8001194 <HAL_ADC_Start+0x98>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800118a:	4a0b      	ldr	r2, [pc, #44]	; (80011b8 <HAL_ADC_Start+0xbc>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d001      	beq.n	8001194 <HAL_ADC_Start+0x98>
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001190:	2000      	movs	r0, #0
 8001192:	e009      	b.n	80011a8 <HAL_ADC_Start+0xac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001194:	6898      	ldr	r0, [r3, #8]
 8001196:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800119a:	d1f9      	bne.n	8001190 <HAL_ADC_Start+0x94>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800119c:	689a      	ldr	r2, [r3, #8]
 800119e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	e000      	b.n	80011a8 <HAL_ADC_Start+0xac>
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011a6:	2002      	movs	r0, #2
    }
  }
  
  /* Return function status */
  return HAL_OK;
}
 80011a8:	b002      	add	sp, #8
 80011aa:	4770      	bx	lr
 80011ac:	000f4240 	.word	0x000f4240
 80011b0:	20000000 	.word	0x20000000
 80011b4:	40012300 	.word	0x40012300
 80011b8:	40012000 	.word	0x40012000

080011bc <HAL_ADC_Stop>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011bc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d017      	beq.n	80011f4 <HAL_ADC_Stop+0x38>
 80011c4:	2301      	movs	r3, #1
 80011c6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80011ca:	6803      	ldr	r3, [r0, #0]
 80011cc:	689a      	ldr	r2, [r3, #8]
 80011ce:	f022 0201 	bic.w	r2, r2, #1
 80011d2:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	07db      	lsls	r3, r3, #31
 80011d8:	d407      	bmi.n	80011ea <HAL_ADC_Stop+0x2e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011da:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80011dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011e0:	f023 0301 	bic.w	r3, r3, #1
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6403      	str	r3, [r0, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011ea:	2300      	movs	r3, #0
 80011ec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80011f0:	4618      	mov	r0, r3
 80011f2:	4770      	bx	lr
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011f4:	2002      	movs	r0, #2
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return HAL_OK;
}
 80011f6:	4770      	bx	lr

080011f8 <HAL_ADC_PollForConversion>:
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011f8:	6803      	ldr	r3, [r0, #0]
 80011fa:	689a      	ldr	r2, [r3, #8]
  *         the configuration information for the specified ADC.
  * @param  Timeout: Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80011fc:	b570      	push	{r4, r5, r6, lr}
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011fe:	0556      	lsls	r6, r2, #21
  *         the configuration information for the specified ADC.
  * @param  Timeout: Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001200:	4604      	mov	r4, r0
 8001202:	460d      	mov	r5, r1
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001204:	d50b      	bpl.n	800121e <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001206:	689b      	ldr	r3, [r3, #8]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001208:	05d8      	lsls	r0, r3, #23
 800120a:	d508      	bpl.n	800121e <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800120c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    
    return HAL_ERROR;
 800120e:	2001      	movs	r0, #1
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001210:	f043 0320 	orr.w	r3, r3, #32
 8001214:	6423      	str	r3, [r4, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001216:	2300      	movs	r3, #0
 8001218:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    
    return HAL_ERROR;
 800121c:	bd70      	pop	{r4, r5, r6, pc}
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800121e:	f7ff febd 	bl	8000f9c <HAL_GetTick>
 8001222:	4606      	mov	r6, r0

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001224:	6823      	ldr	r3, [r4, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	0792      	lsls	r2, r2, #30
 800122a:	d411      	bmi.n	8001250 <HAL_ADC_PollForConversion+0x58>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800122c:	1c69      	adds	r1, r5, #1
 800122e:	d0fa      	beq.n	8001226 <HAL_ADC_PollForConversion+0x2e>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001230:	b945      	cbnz	r5, 8001244 <HAL_ADC_PollForConversion+0x4c>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001232:	6c23      	ldr	r3, [r4, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
        
        return HAL_TIMEOUT;
 8001234:	2003      	movs	r0, #3
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001236:	f043 0304 	orr.w	r3, r3, #4
 800123a:	6423      	str	r3, [r4, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800123c:	2300      	movs	r3, #0
 800123e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001242:	bd70      	pop	{r4, r5, r6, pc}
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001244:	f7ff feaa 	bl	8000f9c <HAL_GetTick>
 8001248:	1b80      	subs	r0, r0, r6
 800124a:	4285      	cmp	r5, r0
 800124c:	d2ea      	bcs.n	8001224 <HAL_ADC_PollForConversion+0x2c>
 800124e:	e7f0      	b.n	8001232 <HAL_ADC_PollForConversion+0x3a>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001250:	f06f 0212 	mvn.w	r2, #18
 8001254:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001256:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800125c:	6422      	str	r2, [r4, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001264:	d001      	beq.n	800126a <HAL_ADC_PollForConversion+0x72>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001266:	2000      	movs	r0, #0
 8001268:	bd70      	pop	{r4, r5, r6, pc}
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800126a:	69a2      	ldr	r2, [r4, #24]
 800126c:	2a00      	cmp	r2, #0
 800126e:	d1fa      	bne.n	8001266 <HAL_ADC_PollForConversion+0x6e>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001272:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8001276:	d002      	beq.n	800127e <HAL_ADC_PollForConversion+0x86>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001278:	689b      	ldr	r3, [r3, #8]
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800127a:	055b      	lsls	r3, r3, #21
 800127c:	d4f3      	bmi.n	8001266 <HAL_ADC_PollForConversion+0x6e>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800127e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001284:	6423      	str	r3, [r4, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001286:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001288:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 800128c:	d1eb      	bne.n	8001266 <HAL_ADC_PollForConversion+0x6e>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800128e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6423      	str	r3, [r4, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 8001296:	bd70      	pop	{r4, r5, r6, pc}

08001298 <HAL_ADC_GetValue>:
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001298:	6803      	ldr	r3, [r0, #0]
 800129a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 800129c:	4770      	bx	lr
	...

080012a0 <HAL_ADC_ConfigChannel>:
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  __IO uint32_t counter = 0;
 80012a0:	2300      	movs	r3, #0
  *         the configuration information for the specified ADC.
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 80012a4:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012a6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d070      	beq.n	8001390 <HAL_ADC_ConfigChannel+0xf0>
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 80012ae:	680d      	ldr	r5, [r1, #0]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012b0:	2301      	movs	r3, #1
 80012b2:	6804      	ldr	r4, [r0, #0]
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 80012b4:	2d09      	cmp	r5, #9
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012b6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80012ba:	b2ae      	uxth	r6, r5
 80012bc:	688f      	ldr	r7, [r1, #8]
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 80012be:	d917      	bls.n	80012f0 <HAL_ADC_ConfigChannel+0x50>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012c0:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 80012c4:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 80012c8:	f1a2 031e 	sub.w	r3, r2, #30
 80012cc:	2207      	movs	r2, #7
 80012ce:	409a      	lsls	r2, r3
 80012d0:	ea2e 0202 	bic.w	r2, lr, r2
 80012d4:	60e2      	str	r2, [r4, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012d6:	4a3d      	ldr	r2, [pc, #244]	; (80013cc <HAL_ADC_ConfigChannel+0x12c>)
 80012d8:	4295      	cmp	r5, r2
 80012da:	d103      	bne.n	80012e4 <HAL_ADC_ConfigChannel+0x44>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80012dc:	68e3      	ldr	r3, [r4, #12]
 80012de:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 80012e2:	e003      	b.n	80012ec <HAL_ADC_ConfigChannel+0x4c>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012e4:	68e2      	ldr	r2, [r4, #12]
 80012e6:	fa07 f303 	lsl.w	r3, r7, r3
 80012ea:	4313      	orrs	r3, r2
 80012ec:	60e3      	str	r3, [r4, #12]
 80012ee:	e00e      	b.n	800130e <HAL_ADC_ConfigChannel+0x6e>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012f0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80012f4:	f04f 0e07 	mov.w	lr, #7
 80012f8:	6922      	ldr	r2, [r4, #16]
 80012fa:	fa0e fe03 	lsl.w	lr, lr, r3
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012fe:	fa07 f303 	lsl.w	r3, r7, r3
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001302:	ea22 020e 	bic.w	r2, r2, lr
 8001306:	6122      	str	r2, [r4, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001308:	6922      	ldr	r2, [r4, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	6123      	str	r3, [r4, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800130e:	684b      	ldr	r3, [r1, #4]
 8001310:	2b06      	cmp	r3, #6
 8001312:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8001316:	d80d      	bhi.n	8001334 <HAL_ADC_ConfigChannel+0x94>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001318:	4413      	add	r3, r2
 800131a:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800131c:	1f59      	subs	r1, r3, #5
 800131e:	231f      	movs	r3, #31
 8001320:	408b      	lsls	r3, r1
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001322:	fa06 f101 	lsl.w	r1, r6, r1
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001326:	ea27 0303 	bic.w	r3, r7, r3
 800132a:	6363      	str	r3, [r4, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800132c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800132e:	4311      	orrs	r1, r2
 8001330:	6361      	str	r1, [r4, #52]	; 0x34
 8001332:	e01d      	b.n	8001370 <HAL_ADC_ConfigChannel+0xd0>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001334:	2b0c      	cmp	r3, #12
 8001336:	d80e      	bhi.n	8001356 <HAL_ADC_ConfigChannel+0xb6>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001338:	4413      	add	r3, r2
 800133a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800133c:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8001340:	231f      	movs	r3, #31
 8001342:	4093      	lsls	r3, r2
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001344:	fa06 f202 	lsl.w	r2, r6, r2
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001348:	ea21 0303 	bic.w	r3, r1, r3
 800134c:	6323      	str	r3, [r4, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800134e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001350:	431a      	orrs	r2, r3
 8001352:	6322      	str	r2, [r4, #48]	; 0x30
 8001354:	e00c      	b.n	8001370 <HAL_ADC_ConfigChannel+0xd0>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001356:	4413      	add	r3, r2
 8001358:	221f      	movs	r2, #31
 800135a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800135c:	3b41      	subs	r3, #65	; 0x41
 800135e:	409a      	lsls	r2, r3
 8001360:	ea27 0202 	bic.w	r2, r7, r2
 8001364:	62e2      	str	r2, [r4, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001366:	fa06 f203 	lsl.w	r2, r6, r3
 800136a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800136c:	430a      	orrs	r2, r1
 800136e:	62e2      	str	r2, [r4, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001370:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <HAL_ADC_ConfigChannel+0x130>)
 8001372:	429c      	cmp	r4, r3
 8001374:	d004      	beq.n	8001380 <HAL_ADC_ConfigChannel+0xe0>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001376:	2300      	movs	r3, #0
 8001378:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800137c:	4618      	mov	r0, r3
 800137e:	e023      	b.n	80013c8 <HAL_ADC_ConfigChannel+0x128>
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001380:	2d12      	cmp	r5, #18
 8001382:	d107      	bne.n	8001394 <HAL_ADC_ConfigChannel+0xf4>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001384:	4a13      	ldr	r2, [pc, #76]	; (80013d4 <HAL_ADC_ConfigChannel+0x134>)
 8001386:	6853      	ldr	r3, [r2, #4]
 8001388:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800138c:	6053      	str	r3, [r2, #4]
 800138e:	e7f2      	b.n	8001376 <HAL_ADC_ConfigChannel+0xd6>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001390:	2002      	movs	r0, #2
 8001392:	e019      	b.n	80013c8 <HAL_ADC_ConfigChannel+0x128>
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001394:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <HAL_ADC_ConfigChannel+0x12c>)
 8001396:	429d      	cmp	r5, r3
 8001398:	d001      	beq.n	800139e <HAL_ADC_ConfigChannel+0xfe>
 800139a:	2d11      	cmp	r5, #17
 800139c:	d1eb      	bne.n	8001376 <HAL_ADC_ConfigChannel+0xd6>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800139e:	490d      	ldr	r1, [pc, #52]	; (80013d4 <HAL_ADC_ConfigChannel+0x134>)

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013a0:	429d      	cmp	r5, r3
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80013a2:	684a      	ldr	r2, [r1, #4]
 80013a4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80013a8:	604a      	str	r2, [r1, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013aa:	d1e4      	bne.n	8001376 <HAL_ADC_ConfigChannel+0xd6>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80013ac:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <HAL_ADC_ConfigChannel+0x138>)
 80013ae:	4a0b      	ldr	r2, [pc, #44]	; (80013dc <HAL_ADC_ConfigChannel+0x13c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80013b6:	230a      	movs	r3, #10
 80013b8:	4353      	muls	r3, r2
      while(counter != 0)
      {
        counter--;
 80013ba:	9301      	str	r3, [sp, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
      while(counter != 0)
 80013bc:	9b01      	ldr	r3, [sp, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0d9      	beq.n	8001376 <HAL_ADC_ConfigChannel+0xd6>
      {
        counter--;
 80013c2:	9b01      	ldr	r3, [sp, #4]
 80013c4:	3b01      	subs	r3, #1
 80013c6:	e7f8      	b.n	80013ba <HAL_ADC_ConfigChannel+0x11a>
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return HAL_OK;
}
 80013c8:	b003      	add	sp, #12
 80013ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013cc:	10000012 	.word	0x10000012
 80013d0:	40012000 	.word	0x40012000
 80013d4:	40012300 	.word	0x40012300
 80013d8:	20000000 	.word	0x20000000
 80013dc:	000f4240 	.word	0x000f4240

080013e0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e0:	4a07      	ldr	r2, [pc, #28]	; (8001400 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80013e2:	0200      	lsls	r0, r0, #8
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e4:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80013e6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80013ea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013ee:	041b      	lsls	r3, r3, #16
 80013f0:	0c1b      	lsrs	r3, r3, #16
 80013f2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013fa:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80013fc:	60d3      	str	r3, [r2, #12]
 80013fe:	4770      	bx	lr
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001404:	4b19      	ldr	r3, [pc, #100]	; (800146c <HAL_NVIC_SetPriority+0x68>)
 8001406:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001408:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800140c:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800140e:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001412:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001414:	2c04      	cmp	r4, #4
 8001416:	bf28      	it	cs
 8001418:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141a:	2d06      	cmp	r5, #6

  return (
 800141c:	f04f 0501 	mov.w	r5, #1
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001420:	bf8c      	ite	hi
 8001422:	3b03      	subhi	r3, #3
 8001424:	2300      	movls	r3, #0

  return (
 8001426:	fa05 f404 	lsl.w	r4, r5, r4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800142a:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800142c:	f104 34ff 	add.w	r4, r4, #4294967295
 8001430:	ea04 0401 	and.w	r4, r4, r1
 8001434:	fa04 f403 	lsl.w	r4, r4, r3
 8001438:	fa05 f303 	lsl.w	r3, r5, r3
 800143c:	f103 33ff 	add.w	r3, r3, #4294967295
 8001440:	ea02 0203 	and.w	r2, r2, r3
 8001444:	ea42 0204 	orr.w	r2, r2, r4
 8001448:	ea4f 1202 	mov.w	r2, r2, lsl #4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800144c:	da05      	bge.n	800145a <HAL_NVIC_SetPriority+0x56>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144e:	f000 000f 	and.w	r0, r0, #15
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_NVIC_SetPriority+0x6c>)
 8001456:	541a      	strb	r2, [r3, r0]
 8001458:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001464:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8001468:	bd30      	pop	{r4, r5, pc}
 800146a:	bf00      	nop
 800146c:	e000ed00 	.word	0xe000ed00
 8001470:	e000ed14 	.word	0xe000ed14

08001474 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001474:	3801      	subs	r0, #1
 8001476:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800147a:	d20a      	bcs.n	8001492 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147e:	21f0      	movs	r1, #240	; 0xf0
 8001480:	4a06      	ldr	r2, [pc, #24]	; (800149c <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001482:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001484:	2000      	movs	r0, #0
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001486:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148a:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800148c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8001492:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000e010 	.word	0xe000e010
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80014a0:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80014a2:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	bf0c      	ite	eq
 80014a8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80014ac:	f022 0204 	bicne.w	r2, r2, #4
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	4770      	bx	lr
 80014b4:	e000e010 	.word	0xe000e010

080014b8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80014b8:	4770      	bx	lr

080014ba <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80014ba:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80014bc:	f7ff fffc 	bl	80014b8 <HAL_SYSTICK_Callback>
 80014c0:	bd08      	pop	{r3, pc}
	...

080014c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014c8:	680b      	ldr	r3, [r1, #0]
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014ca:	b085      	sub	sp, #20
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014cc:	4e6f      	ldr	r6, [pc, #444]	; (800168c <HAL_GPIO_Init+0x1c8>)
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ce:	9301      	str	r3, [sp, #4]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80014d0:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d2:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 8001694 <HAL_GPIO_Init+0x1d0>
 80014d6:	46b6      	mov	lr, r6

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80014d8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8001698 <HAL_GPIO_Init+0x1d4>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80014dc:	2201      	movs	r2, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 80014de:	9c01      	ldr	r4, [sp, #4]

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80014e0:	409a      	lsls	r2, r3
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 80014e2:	ea32 0404 	bics.w	r4, r2, r4
 80014e6:	f040 80c9 	bne.w	800167c <HAL_GPIO_Init+0x1b8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014ea:	684c      	ldr	r4, [r1, #4]
 80014ec:	f024 0910 	bic.w	r9, r4, #16
 80014f0:	f1b9 0f02 	cmp.w	r9, #2
 80014f4:	d114      	bne.n	8001520 <HAL_GPIO_Init+0x5c>
 80014f6:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80014fa:	f003 0b07 	and.w	fp, r3, #7
 80014fe:	250f      	movs	r5, #15
 8001500:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8001504:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001508:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800150c:	fa05 f50b 	lsl.w	r5, r5, fp
 8001510:	ea27 0505 	bic.w	r5, r7, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001514:	690f      	ldr	r7, [r1, #16]
 8001516:	fa07 f70b 	lsl.w	r7, r7, fp
 800151a:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3] = temp;
 800151c:	f8ca 7020 	str.w	r7, [sl, #32]
 8001520:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001524:	2503      	movs	r5, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001526:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001528:	f004 0b03 	and.w	fp, r4, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800152c:	fa05 f50a 	lsl.w	r5, r5, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001530:	f109 39ff 	add.w	r9, r9, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001534:	fa0b fb0a 	lsl.w	fp, fp, sl
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001538:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800153a:	f1b9 0f01 	cmp.w	r9, #1
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800153e:	ea07 0705 	and.w	r7, r7, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001542:	ea4b 0707 	orr.w	r7, fp, r7
      GPIOx->MODER = temp;
 8001546:	6007      	str	r7, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001548:	d812      	bhi.n	8001570 <HAL_GPIO_Init+0xac>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800154a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800154c:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8001550:	68cf      	ldr	r7, [r1, #12]
 8001552:	fa07 f70a 	lsl.w	r7, r7, sl
 8001556:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800155a:	f3c4 1900 	ubfx	r9, r4, #4, #1
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
        GPIOx->OSPEEDR = temp;
 800155e:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001560:	fa09 f903 	lsl.w	r9, r9, r3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001564:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001566:	ea27 0702 	bic.w	r7, r7, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800156a:	ea49 0707 	orr.w	r7, r9, r7
        GPIOx->OTYPER = temp;
 800156e:	6047      	str	r7, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001570:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001572:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001574:	688f      	ldr	r7, [r1, #8]
 8001576:	fa07 f70a 	lsl.w	r7, r7, sl
 800157a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800157c:	60c5      	str	r5, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800157e:	00e5      	lsls	r5, r4, #3
 8001580:	d57c      	bpl.n	800167c <HAL_GPIO_Init+0x1b8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001582:	f8dc 5044 	ldr.w	r5, [ip, #68]	; 0x44
 8001586:	f023 0703 	bic.w	r7, r3, #3

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800158a:	f003 0a03 	and.w	sl, r3, #3
 800158e:	f04f 090f 	mov.w	r9, #15
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001592:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8001596:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800159a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159e:	f8cc 5044 	str.w	r5, [ip, #68]	; 0x44
 80015a2:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 80015a6:	f8dc 5044 	ldr.w	r5, [ip, #68]	; 0x44
 80015aa:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 80015ae:	9503      	str	r5, [sp, #12]
 80015b0:	9d03      	ldr	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80015b2:	fa09 f50a 	lsl.w	r5, r9, sl
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
 80015b6:	f8d7 b008 	ldr.w	fp, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80015ba:	ea2b 0905 	bic.w	r9, fp, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80015be:	4d34      	ldr	r5, [pc, #208]	; (8001690 <HAL_GPIO_Init+0x1cc>)
 80015c0:	42a8      	cmp	r0, r5
 80015c2:	d024      	beq.n	800160e <HAL_GPIO_Init+0x14a>
 80015c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015c8:	42a8      	cmp	r0, r5
 80015ca:	d022      	beq.n	8001612 <HAL_GPIO_Init+0x14e>
 80015cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015d0:	42a8      	cmp	r0, r5
 80015d2:	d020      	beq.n	8001616 <HAL_GPIO_Init+0x152>
 80015d4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015d8:	42a8      	cmp	r0, r5
 80015da:	d01e      	beq.n	800161a <HAL_GPIO_Init+0x156>
 80015dc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015e0:	42a8      	cmp	r0, r5
 80015e2:	d01c      	beq.n	800161e <HAL_GPIO_Init+0x15a>
 80015e4:	4540      	cmp	r0, r8
 80015e6:	d01c      	beq.n	8001622 <HAL_GPIO_Init+0x15e>
 80015e8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80015ec:	42a8      	cmp	r0, r5
 80015ee:	d01a      	beq.n	8001626 <HAL_GPIO_Init+0x162>
 80015f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015f4:	42a8      	cmp	r0, r5
 80015f6:	d018      	beq.n	800162a <HAL_GPIO_Init+0x166>
 80015f8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015fc:	42a8      	cmp	r0, r5
 80015fe:	d016      	beq.n	800162e <HAL_GPIO_Init+0x16a>
 8001600:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001604:	42a8      	cmp	r0, r5
 8001606:	bf14      	ite	ne
 8001608:	250a      	movne	r5, #10
 800160a:	2509      	moveq	r5, #9
 800160c:	e010      	b.n	8001630 <HAL_GPIO_Init+0x16c>
 800160e:	2500      	movs	r5, #0
 8001610:	e00e      	b.n	8001630 <HAL_GPIO_Init+0x16c>
 8001612:	2501      	movs	r5, #1
 8001614:	e00c      	b.n	8001630 <HAL_GPIO_Init+0x16c>
 8001616:	2502      	movs	r5, #2
 8001618:	e00a      	b.n	8001630 <HAL_GPIO_Init+0x16c>
 800161a:	2503      	movs	r5, #3
 800161c:	e008      	b.n	8001630 <HAL_GPIO_Init+0x16c>
 800161e:	2504      	movs	r5, #4
 8001620:	e006      	b.n	8001630 <HAL_GPIO_Init+0x16c>
 8001622:	2505      	movs	r5, #5
 8001624:	e004      	b.n	8001630 <HAL_GPIO_Init+0x16c>
 8001626:	2506      	movs	r5, #6
 8001628:	e002      	b.n	8001630 <HAL_GPIO_Init+0x16c>
 800162a:	2507      	movs	r5, #7
 800162c:	e000      	b.n	8001630 <HAL_GPIO_Init+0x16c>
 800162e:	2508      	movs	r5, #8
 8001630:	fa05 f50a 	lsl.w	r5, r5, sl
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001634:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001638:	ea45 0509 	orr.w	r5, r5, r9
        SYSCFG->EXTICR[position >> 2] = temp;
 800163c:	60bd      	str	r5, [r7, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 800163e:	ea6f 0702 	mvn.w	r7, r2
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001642:	6835      	ldr	r5, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 8001644:	bf0c      	ite	eq
 8001646:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8001648:	4315      	orrne	r5, r2
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800164a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 800164e:	f8ce 5000 	str.w	r5, [lr]

        temp = EXTI->EMR;
 8001652:	f8de 5004 	ldr.w	r5, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 8001656:	bf0c      	ite	eq
 8001658:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 800165a:	4315      	orrne	r5, r2
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800165c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8001660:	6075      	str	r5, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001662:	68b5      	ldr	r5, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8001664:	bf0c      	ite	eq
 8001666:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8001668:	4315      	orrne	r5, r2
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800166a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 800166c:	f8ce 5008 	str.w	r5, [lr, #8]

        temp = EXTI->FTSR;
 8001670:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 8001674:	bf54      	ite	pl
 8001676:	403d      	andpl	r5, r7
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8001678:	4315      	orrmi	r5, r2
        }
        EXTI->FTSR = temp;
 800167a:	60f5      	str	r5, [r6, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800167c:	3301      	adds	r3, #1
 800167e:	2b10      	cmp	r3, #16
 8001680:	f47f af2c 	bne.w	80014dc <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8001684:	b005      	add	sp, #20
 8001686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800168a:	bf00      	nop
 800168c:	40013c00 	.word	0x40013c00
 8001690:	40020000 	.word	0x40020000
 8001694:	40023800 	.word	0x40023800
 8001698:	40021400 	.word	0x40021400

0800169c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800169c:	b902      	cbnz	r2, 80016a0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800169e:	0409      	lsls	r1, r1, #16
 80016a0:	6181      	str	r1, [r0, #24]
 80016a2:	4770      	bx	lr

080016a4 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80016a4:	6943      	ldr	r3, [r0, #20]
 80016a6:	4059      	eors	r1, r3
 80016a8:	6141      	str	r1, [r0, #20]
 80016aa:	4770      	bx	lr

080016ac <HAL_RCC_OscConfig>:
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ac:	6803      	ldr	r3, [r0, #0]
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80016b0:	4604      	mov	r4, r0
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016b2:	07d8      	lsls	r0, r3, #31
 80016b4:	d403      	bmi.n	80016be <HAL_RCC_OscConfig+0x12>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016b6:	6823      	ldr	r3, [r4, #0]
 80016b8:	0799      	lsls	r1, r3, #30
 80016ba:	d452      	bmi.n	8001762 <HAL_RCC_OscConfig+0xb6>
 80016bc:	e0a5      	b.n	800180a <HAL_RCC_OscConfig+0x15e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016be:	4b96      	ldr	r3, [pc, #600]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 80016c0:	689a      	ldr	r2, [r3, #8]
 80016c2:	f002 020c 	and.w	r2, r2, #12
 80016c6:	2a04      	cmp	r2, #4
 80016c8:	d007      	beq.n	80016da <HAL_RCC_OscConfig+0x2e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	f002 020c 	and.w	r2, r2, #12
 80016d0:	2a08      	cmp	r2, #8
 80016d2:	d10b      	bne.n	80016ec <HAL_RCC_OscConfig+0x40>
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	025a      	lsls	r2, r3, #9
 80016d8:	d508      	bpl.n	80016ec <HAL_RCC_OscConfig+0x40>
    {
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016da:	4b8f      	ldr	r3, [pc, #572]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	039b      	lsls	r3, r3, #14
 80016e0:	d5e9      	bpl.n	80016b6 <HAL_RCC_OscConfig+0xa>
 80016e2:	6863      	ldr	r3, [r4, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1e6      	bne.n	80016b6 <HAL_RCC_OscConfig+0xa>
      {
        return HAL_ERROR;
 80016e8:	2001      	movs	r0, #1
 80016ea:	e176      	b.n	80019da <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ec:	6863      	ldr	r3, [r4, #4]
 80016ee:	4d8a      	ldr	r5, [pc, #552]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 80016f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016f4:	d013      	beq.n	800171e <HAL_RCC_OscConfig+0x72>
 80016f6:	b95b      	cbnz	r3, 8001710 <HAL_RCC_OscConfig+0x64>
 80016f8:	682b      	ldr	r3, [r5, #0]
 80016fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016fe:	602b      	str	r3, [r5, #0]
 8001700:	682b      	ldr	r3, [r5, #0]
 8001702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001706:	602b      	str	r3, [r5, #0]
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001708:	f7ff fc48 	bl	8000f9c <HAL_GetTick>
 800170c:	4606      	mov	r6, r0
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800170e:	e024      	b.n	800175a <HAL_RCC_OscConfig+0xae>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001714:	682b      	ldr	r3, [r5, #0]
 8001716:	d106      	bne.n	8001726 <HAL_RCC_OscConfig+0x7a>
 8001718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800171c:	602b      	str	r3, [r5, #0]
 800171e:	682b      	ldr	r3, [r5, #0]
 8001720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001724:	e005      	b.n	8001732 <HAL_RCC_OscConfig+0x86>
 8001726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800172a:	602b      	str	r3, [r5, #0]
 800172c:	682b      	ldr	r3, [r5, #0]
 800172e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001732:	602b      	str	r3, [r5, #0]
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001734:	f7ff fc32 	bl	8000f9c <HAL_GetTick>
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001738:	4d77      	ldr	r5, [pc, #476]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173a:	4606      	mov	r6, r0
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173c:	682b      	ldr	r3, [r5, #0]
 800173e:	039f      	lsls	r7, r3, #14
 8001740:	d4b9      	bmi.n	80016b6 <HAL_RCC_OscConfig+0xa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001742:	f7ff fc2b 	bl	8000f9c <HAL_GetTick>
 8001746:	1b80      	subs	r0, r0, r6
 8001748:	2864      	cmp	r0, #100	; 0x64
 800174a:	d9f7      	bls.n	800173c <HAL_RCC_OscConfig+0x90>
          {
            return HAL_TIMEOUT;
 800174c:	2003      	movs	r0, #3
 800174e:	e144      	b.n	80019da <HAL_RCC_OscConfig+0x32e>
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001750:	f7ff fc24 	bl	8000f9c <HAL_GetTick>
 8001754:	1b80      	subs	r0, r0, r6
 8001756:	2864      	cmp	r0, #100	; 0x64
 8001758:	d8f8      	bhi.n	800174c <HAL_RCC_OscConfig+0xa0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800175a:	682b      	ldr	r3, [r5, #0]
 800175c:	0398      	lsls	r0, r3, #14
 800175e:	d4f7      	bmi.n	8001750 <HAL_RCC_OscConfig+0xa4>
 8001760:	e7a9      	b.n	80016b6 <HAL_RCC_OscConfig+0xa>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001762:	4b6d      	ldr	r3, [pc, #436]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 8001764:	689a      	ldr	r2, [r3, #8]
 8001766:	f012 0f0c 	tst.w	r2, #12
 800176a:	d007      	beq.n	800177c <HAL_RCC_OscConfig+0xd0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	f002 020c 	and.w	r2, r2, #12
 8001772:	2a08      	cmp	r2, #8
 8001774:	d117      	bne.n	80017a6 <HAL_RCC_OscConfig+0xfa>
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	0259      	lsls	r1, r3, #9
 800177a:	d414      	bmi.n	80017a6 <HAL_RCC_OscConfig+0xfa>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800177c:	4b66      	ldr	r3, [pc, #408]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	0792      	lsls	r2, r2, #30
 8001782:	d502      	bpl.n	800178a <HAL_RCC_OscConfig+0xde>
 8001784:	68e2      	ldr	r2, [r4, #12]
 8001786:	2a01      	cmp	r2, #1
 8001788:	d1ae      	bne.n	80016e8 <HAL_RCC_OscConfig+0x3c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	21f8      	movs	r1, #248	; 0xf8
 800178e:	fa91 f1a1 	rbit	r1, r1
 8001792:	6920      	ldr	r0, [r4, #16]
 8001794:	fab1 f181 	clz	r1, r1
 8001798:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800179c:	fa00 f101 	lsl.w	r1, r0, r1
 80017a0:	430a      	orrs	r2, r1
 80017a2:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017a4:	e031      	b.n	800180a <HAL_RCC_OscConfig+0x15e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017a6:	68e3      	ldr	r3, [r4, #12]
 80017a8:	4d5b      	ldr	r5, [pc, #364]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 80017aa:	b1f3      	cbz	r3, 80017ea <HAL_RCC_OscConfig+0x13e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017ac:	682b      	ldr	r3, [r5, #0]
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b4:	f7ff fbf2 	bl	8000f9c <HAL_GetTick>
 80017b8:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ba:	682b      	ldr	r3, [r5, #0]
 80017bc:	4856      	ldr	r0, [pc, #344]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 80017be:	079b      	lsls	r3, r3, #30
 80017c0:	d405      	bmi.n	80017ce <HAL_RCC_OscConfig+0x122>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017c2:	f7ff fbeb 	bl	8000f9c <HAL_GetTick>
 80017c6:	1b80      	subs	r0, r0, r6
 80017c8:	2802      	cmp	r0, #2
 80017ca:	d9f6      	bls.n	80017ba <HAL_RCC_OscConfig+0x10e>
 80017cc:	e7be      	b.n	800174c <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ce:	6803      	ldr	r3, [r0, #0]
 80017d0:	22f8      	movs	r2, #248	; 0xf8
 80017d2:	fa92 f2a2 	rbit	r2, r2
 80017d6:	6921      	ldr	r1, [r4, #16]
 80017d8:	fab2 f282 	clz	r2, r2
 80017dc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80017e0:	fa01 f202 	lsl.w	r2, r1, r2
 80017e4:	4313      	orrs	r3, r2
 80017e6:	6003      	str	r3, [r0, #0]
 80017e8:	e00f      	b.n	800180a <HAL_RCC_OscConfig+0x15e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ea:	682b      	ldr	r3, [r5, #0]
 80017ec:	f023 0301 	bic.w	r3, r3, #1
 80017f0:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f2:	f7ff fbd3 	bl	8000f9c <HAL_GetTick>
 80017f6:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f8:	682b      	ldr	r3, [r5, #0]
 80017fa:	079f      	lsls	r7, r3, #30
 80017fc:	d505      	bpl.n	800180a <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017fe:	f7ff fbcd 	bl	8000f9c <HAL_GetTick>
 8001802:	1b80      	subs	r0, r0, r6
 8001804:	2802      	cmp	r0, #2
 8001806:	d9f7      	bls.n	80017f8 <HAL_RCC_OscConfig+0x14c>
 8001808:	e7a0      	b.n	800174c <HAL_RCC_OscConfig+0xa0>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800180a:	6823      	ldr	r3, [r4, #0]
 800180c:	071e      	lsls	r6, r3, #28
 800180e:	d403      	bmi.n	8001818 <HAL_RCC_OscConfig+0x16c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001810:	6823      	ldr	r3, [r4, #0]
 8001812:	075d      	lsls	r5, r3, #29
 8001814:	d549      	bpl.n	80018aa <HAL_RCC_OscConfig+0x1fe>
 8001816:	e022      	b.n	800185e <HAL_RCC_OscConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001818:	6963      	ldr	r3, [r4, #20]
 800181a:	4d3f      	ldr	r5, [pc, #252]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 800181c:	b17b      	cbz	r3, 800183e <HAL_RCC_OscConfig+0x192>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800181e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	676b      	str	r3, [r5, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001826:	f7ff fbb9 	bl	8000f9c <HAL_GetTick>
 800182a:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800182c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800182e:	0798      	lsls	r0, r3, #30
 8001830:	d4ee      	bmi.n	8001810 <HAL_RCC_OscConfig+0x164>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001832:	f7ff fbb3 	bl	8000f9c <HAL_GetTick>
 8001836:	1b80      	subs	r0, r0, r6
 8001838:	2802      	cmp	r0, #2
 800183a:	d9f7      	bls.n	800182c <HAL_RCC_OscConfig+0x180>
 800183c:	e786      	b.n	800174c <HAL_RCC_OscConfig+0xa0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800183e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001840:	f023 0301 	bic.w	r3, r3, #1
 8001844:	676b      	str	r3, [r5, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001846:	f7ff fba9 	bl	8000f9c <HAL_GetTick>
 800184a:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800184c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800184e:	0799      	lsls	r1, r3, #30
 8001850:	d5de      	bpl.n	8001810 <HAL_RCC_OscConfig+0x164>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001852:	f7ff fba3 	bl	8000f9c <HAL_GetTick>
 8001856:	1b80      	subs	r0, r0, r6
 8001858:	2802      	cmp	r0, #2
 800185a:	d9f7      	bls.n	800184c <HAL_RCC_OscConfig+0x1a0>
 800185c:	e776      	b.n	800174c <HAL_RCC_OscConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800185e:	4b2e      	ldr	r3, [pc, #184]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001860:	4d2e      	ldr	r5, [pc, #184]	; (800191c <HAL_RCC_OscConfig+0x270>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001862:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001864:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001868:	641a      	str	r2, [r3, #64]	; 0x40
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001870:	9301      	str	r3, [sp, #4]
 8001872:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001874:	682b      	ldr	r3, [r5, #0]
 8001876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187a:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800187c:	f7ff fb8e 	bl	8000f9c <HAL_GetTick>
 8001880:	4606      	mov	r6, r0
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001882:	682b      	ldr	r3, [r5, #0]
 8001884:	05da      	lsls	r2, r3, #23
 8001886:	d514      	bpl.n	80018b2 <HAL_RCC_OscConfig+0x206>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001888:	68a3      	ldr	r3, [r4, #8]
 800188a:	4d23      	ldr	r5, [pc, #140]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 800188c:	2b01      	cmp	r3, #1
 800188e:	d116      	bne.n	80018be <HAL_RCC_OscConfig+0x212>
 8001890:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001898:	f241 3588 	movw	r5, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189c:	f7ff fb7e 	bl	8000f9c <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a0:	4e1d      	ldr	r6, [pc, #116]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a2:	4607      	mov	r7, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a4:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80018a6:	079b      	lsls	r3, r3, #30
 80018a8:	d526      	bpl.n	80018f8 <HAL_RCC_OscConfig+0x24c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018aa:	69a2      	ldr	r2, [r4, #24]
 80018ac:	2a00      	cmp	r2, #0
 80018ae:	d137      	bne.n	8001920 <HAL_RCC_OscConfig+0x274>
 80018b0:	e079      	b.n	80019a6 <HAL_RCC_OscConfig+0x2fa>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80018b2:	f7ff fb73 	bl	8000f9c <HAL_GetTick>
 80018b6:	1b80      	subs	r0, r0, r6
 80018b8:	2864      	cmp	r0, #100	; 0x64
 80018ba:	d9e2      	bls.n	8001882 <HAL_RCC_OscConfig+0x1d6>
 80018bc:	e746      	b.n	800174c <HAL_RCC_OscConfig+0xa0>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018be:	b96b      	cbnz	r3, 80018dc <HAL_RCC_OscConfig+0x230>
 80018c0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c2:	f241 3788 	movw	r7, #5000	; 0x1388
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c6:	f023 0301 	bic.w	r3, r3, #1
 80018ca:	672b      	str	r3, [r5, #112]	; 0x70
 80018cc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018ce:	f023 0304 	bic.w	r3, r3, #4
 80018d2:	672b      	str	r3, [r5, #112]	; 0x70
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d4:	f7ff fb62 	bl	8000f9c <HAL_GetTick>
 80018d8:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018da:	e019      	b.n	8001910 <HAL_RCC_OscConfig+0x264>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018dc:	2b05      	cmp	r3, #5
 80018de:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018e0:	d103      	bne.n	80018ea <HAL_RCC_OscConfig+0x23e>
 80018e2:	f043 0304 	orr.w	r3, r3, #4
 80018e6:	672b      	str	r3, [r5, #112]	; 0x70
 80018e8:	e7d2      	b.n	8001890 <HAL_RCC_OscConfig+0x1e4>
 80018ea:	f023 0301 	bic.w	r3, r3, #1
 80018ee:	672b      	str	r3, [r5, #112]	; 0x70
 80018f0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018f2:	f023 0304 	bic.w	r3, r3, #4
 80018f6:	e7ce      	b.n	8001896 <HAL_RCC_OscConfig+0x1ea>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f8:	f7ff fb50 	bl	8000f9c <HAL_GetTick>
 80018fc:	1bc0      	subs	r0, r0, r7
 80018fe:	42a8      	cmp	r0, r5
 8001900:	d9d0      	bls.n	80018a4 <HAL_RCC_OscConfig+0x1f8>
 8001902:	e723      	b.n	800174c <HAL_RCC_OscConfig+0xa0>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001904:	f7ff fb4a 	bl	8000f9c <HAL_GetTick>
 8001908:	1b80      	subs	r0, r0, r6
 800190a:	42b8      	cmp	r0, r7
 800190c:	f63f af1e 	bhi.w	800174c <HAL_RCC_OscConfig+0xa0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001910:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001912:	0798      	lsls	r0, r3, #30
 8001914:	d4f6      	bmi.n	8001904 <HAL_RCC_OscConfig+0x258>
 8001916:	e7c8      	b.n	80018aa <HAL_RCC_OscConfig+0x1fe>
 8001918:	40023800 	.word	0x40023800
 800191c:	40007000 	.word	0x40007000
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001920:	4d2f      	ldr	r5, [pc, #188]	; (80019e0 <HAL_RCC_OscConfig+0x334>)
 8001922:	68ab      	ldr	r3, [r5, #8]
 8001924:	f003 030c 	and.w	r3, r3, #12
 8001928:	2b08      	cmp	r3, #8
 800192a:	f43f aedd 	beq.w	80016e8 <HAL_RCC_OscConfig+0x3c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800192e:	682b      	ldr	r3, [r5, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001930:	2a02      	cmp	r2, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001932:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001936:	602b      	str	r3, [r5, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001938:	d143      	bne.n	80019c2 <HAL_RCC_OscConfig+0x316>
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193a:	f7ff fb2f 	bl	8000f9c <HAL_GetTick>
 800193e:	4607      	mov	r7, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001940:	682b      	ldr	r3, [r5, #0]
 8001942:	4e27      	ldr	r6, [pc, #156]	; (80019e0 <HAL_RCC_OscConfig+0x334>)
 8001944:	0199      	lsls	r1, r3, #6
 8001946:	d430      	bmi.n	80019aa <HAL_RCC_OscConfig+0x2fe>
 8001948:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800194c:	fa92 f2a2 	rbit	r2, r2
 8001950:	f44f 3340 	mov.w	r3, #196608	; 0x30000
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001954:	fab2 f082 	clz	r0, r2
 8001958:	fa93 f3a3 	rbit	r3, r3
 800195c:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8001960:	fab3 f583 	clz	r5, r3
 8001964:	fa92 f2a2 	rbit	r2, r2
 8001968:	69e3      	ldr	r3, [r4, #28]
 800196a:	fab2 f182 	clz	r1, r2
 800196e:	6a27      	ldr	r7, [r4, #32]
 8001970:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001972:	431f      	orrs	r7, r3
 8001974:	4082      	lsls	r2, r0
 8001976:	f047 5300 	orr.w	r3, r7, #536870912	; 0x20000000
 800197a:	ea43 0002 	orr.w	r0, r3, r2
 800197e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001980:	085a      	lsrs	r2, r3, #1
 8001982:	3a01      	subs	r2, #1
 8001984:	fa02 f305 	lsl.w	r3, r2, r5
 8001988:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800198a:	4303      	orrs	r3, r0
 800198c:	408a      	lsls	r2, r1
 800198e:	4313      	orrs	r3, r2
 8001990:	6073      	str	r3, [r6, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001992:	6833      	ldr	r3, [r6, #0]
 8001994:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001998:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199a:	f7ff faff 	bl	8000f9c <HAL_GetTick>
 800199e:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a0:	6833      	ldr	r3, [r6, #0]
 80019a2:	019a      	lsls	r2, r3, #6
 80019a4:	d507      	bpl.n	80019b6 <HAL_RCC_OscConfig+0x30a>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80019a6:	2000      	movs	r0, #0
 80019a8:	e017      	b.n	80019da <HAL_RCC_OscConfig+0x32e>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019aa:	f7ff faf7 	bl	8000f9c <HAL_GetTick>
 80019ae:	1bc0      	subs	r0, r0, r7
 80019b0:	2802      	cmp	r0, #2
 80019b2:	d9c5      	bls.n	8001940 <HAL_RCC_OscConfig+0x294>
 80019b4:	e6ca      	b.n	800174c <HAL_RCC_OscConfig+0xa0>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b6:	f7ff faf1 	bl	8000f9c <HAL_GetTick>
 80019ba:	1b00      	subs	r0, r0, r4
 80019bc:	2802      	cmp	r0, #2
 80019be:	d9ef      	bls.n	80019a0 <HAL_RCC_OscConfig+0x2f4>
 80019c0:	e6c4      	b.n	800174c <HAL_RCC_OscConfig+0xa0>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c2:	f7ff faeb 	bl	8000f9c <HAL_GetTick>
 80019c6:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c8:	682b      	ldr	r3, [r5, #0]
 80019ca:	019b      	lsls	r3, r3, #6
 80019cc:	d5eb      	bpl.n	80019a6 <HAL_RCC_OscConfig+0x2fa>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ce:	f7ff fae5 	bl	8000f9c <HAL_GetTick>
 80019d2:	1b00      	subs	r0, r0, r4
 80019d4:	2802      	cmp	r0, #2
 80019d6:	d9f7      	bls.n	80019c8 <HAL_RCC_OscConfig+0x31c>
 80019d8:	e6b8      	b.n	800174c <HAL_RCC_OscConfig+0xa0>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80019da:	b003      	add	sp, #12
 80019dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800

080019e4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019e4:	491b      	ldr	r1, [pc, #108]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x70>)
 80019e6:	688b      	ldr	r3, [r1, #8]
 80019e8:	f003 030c 	and.w	r3, r3, #12
 80019ec:	2b04      	cmp	r3, #4
 80019ee:	d02c      	beq.n	8001a4a <HAL_RCC_GetSysClockFreq+0x66>
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	d12c      	bne.n	8001a4e <HAL_RCC_GetSysClockFreq+0x6a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019f4:	6848      	ldr	r0, [r1, #4]
 80019f6:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80019fa:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019fc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001a00:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001a04:	684b      	ldr	r3, [r1, #4]
 8001a06:	fa92 f2a2 	rbit	r2, r2
 8001a0a:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8001a0e:	fab2 f282 	clz	r2, r2
 8001a12:	ea01 0103 	and.w	r1, r1, r3
 8001a16:	fa21 f102 	lsr.w	r1, r1, r2
 8001a1a:	bf14      	ite	ne
 8001a1c:	4a0e      	ldrne	r2, [pc, #56]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x74>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8001a1e:	4a0f      	ldreq	r2, [pc, #60]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x78>)
 8001a20:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8001a24:	4a0b      	ldr	r2, [pc, #44]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8001a26:	fb00 f301 	mul.w	r3, r0, r1
 8001a2a:	f44f 3040 	mov.w	r0, #196608	; 0x30000
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8001a2e:	6852      	ldr	r2, [r2, #4]
 8001a30:	fa90 f0a0 	rbit	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8001a34:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8001a38:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8001a3c:	fa22 f000 	lsr.w	r0, r2, r0
 8001a40:	3001      	adds	r0, #1
 8001a42:	0040      	lsls	r0, r0, #1
 8001a44:	fbb3 f0f0 	udiv	r0, r3, r0
 8001a48:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a4a:	4803      	ldr	r0, [pc, #12]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x74>)
 8001a4c:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a4e:	4803      	ldr	r0, [pc, #12]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800
 8001a58:	017d7840 	.word	0x017d7840
 8001a5c:	00f42400 	.word	0x00f42400

08001a60 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a60:	4a50      	ldr	r2, [pc, #320]	; (8001ba4 <HAL_RCC_ClockConfig+0x144>)
 8001a62:	6813      	ldr	r3, [r2, #0]
 8001a64:	f003 030f 	and.w	r3, r3, #15
 8001a68:	428b      	cmp	r3, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a6e:	4604      	mov	r4, r0
 8001a70:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a72:	d30a      	bcc.n	8001a8a <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
  
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a74:	6821      	ldr	r1, [r4, #0]
 8001a76:	0788      	lsls	r0, r1, #30
 8001a78:	d514      	bpl.n	8001aa4 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a7a:	484b      	ldr	r0, [pc, #300]	; (8001ba8 <HAL_RCC_ClockConfig+0x148>)
 8001a7c:	6883      	ldr	r3, [r0, #8]
 8001a7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a82:	68a3      	ldr	r3, [r4, #8]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	6083      	str	r3, [r0, #8]
 8001a88:	e00c      	b.n	8001aa4 <HAL_RCC_ClockConfig+0x44>
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8a:	6813      	ldr	r3, [r2, #0]
 8001a8c:	f023 030f 	bic.w	r3, r3, #15
 8001a90:	430b      	orrs	r3, r1
 8001a92:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a94:	6813      	ldr	r3, [r2, #0]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	4299      	cmp	r1, r3
 8001a9c:	d0ea      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aa4:	07c9      	lsls	r1, r1, #31
 8001aa6:	d406      	bmi.n	8001ab6 <HAL_RCC_ClockConfig+0x56>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001aa8:	4a3e      	ldr	r2, [pc, #248]	; (8001ba4 <HAL_RCC_ClockConfig+0x144>)
 8001aaa:	6813      	ldr	r3, [r2, #0]
 8001aac:	f003 030f 	and.w	r3, r3, #15
 8001ab0:	429d      	cmp	r5, r3
 8001ab2:	d342      	bcc.n	8001b3a <HAL_RCC_ClockConfig+0xda>
 8001ab4:	e04b      	b.n	8001b4e <HAL_RCC_ClockConfig+0xee>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ab6:	6862      	ldr	r2, [r4, #4]
 8001ab8:	4b3b      	ldr	r3, [pc, #236]	; (8001ba8 <HAL_RCC_ClockConfig+0x148>)
 8001aba:	2a01      	cmp	r2, #1
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001abc:	6819      	ldr	r1, [r3, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001abe:	d102      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0x66>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac0:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 8001ac4:	e006      	b.n	8001ad4 <HAL_RCC_ClockConfig+0x74>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ac6:	2a02      	cmp	r2, #2
 8001ac8:	d102      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0x70>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aca:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 8001ace:	e001      	b.n	8001ad4 <HAL_RCC_ClockConfig+0x74>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad0:	f011 0f02 	tst.w	r1, #2
 8001ad4:	d0e3      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ad6:	6899      	ldr	r1, [r3, #8]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad8:	f241 3888 	movw	r8, #5000	; 0x1388
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001adc:	4f32      	ldr	r7, [pc, #200]	; (8001ba8 <HAL_RCC_ClockConfig+0x148>)
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ade:	f021 0103 	bic.w	r1, r1, #3
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	609a      	str	r2, [r3, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ae6:	f7ff fa59 	bl	8000f9c <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aea:	6863      	ldr	r3, [r4, #4]
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001aec:	4606      	mov	r6, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d10c      	bne.n	8001b0c <HAL_RCC_ClockConfig+0xac>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	f003 030c 	and.w	r3, r3, #12
 8001af8:	2b04      	cmp	r3, #4
 8001afa:	d0d5      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001afc:	f7ff fa4e 	bl	8000f9c <HAL_GetTick>
 8001b00:	1b80      	subs	r0, r0, r6
 8001b02:	4540      	cmp	r0, r8
 8001b04:	d9f5      	bls.n	8001af2 <HAL_RCC_ClockConfig+0x92>
        {
          return HAL_TIMEOUT;
 8001b06:	2003      	movs	r0, #3
 8001b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d10f      	bne.n	8001b30 <HAL_RCC_ClockConfig+0xd0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	f003 030c 	and.w	r3, r3, #12
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d0c6      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b1a:	f7ff fa3f 	bl	8000f9c <HAL_GetTick>
 8001b1e:	1b80      	subs	r0, r0, r6
 8001b20:	4540      	cmp	r0, r8
 8001b22:	d9f5      	bls.n	8001b10 <HAL_RCC_ClockConfig+0xb0>
 8001b24:	e7ef      	b.n	8001b06 <HAL_RCC_ClockConfig+0xa6>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b26:	f7ff fa39 	bl	8000f9c <HAL_GetTick>
 8001b2a:	1b80      	subs	r0, r0, r6
 8001b2c:	4540      	cmp	r0, r8
 8001b2e:	d8ea      	bhi.n	8001b06 <HAL_RCC_ClockConfig+0xa6>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	f013 0f0c 	tst.w	r3, #12
 8001b36:	d1f6      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xc6>
 8001b38:	e7b6      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x48>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3a:	6813      	ldr	r3, [r2, #0]
 8001b3c:	f023 030f 	bic.w	r3, r3, #15
 8001b40:	432b      	orrs	r3, r5
 8001b42:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b44:	6813      	ldr	r3, [r2, #0]
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	429d      	cmp	r5, r3
 8001b4c:	d1a7      	bne.n	8001a9e <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b4e:	6821      	ldr	r1, [r4, #0]
 8001b50:	074a      	lsls	r2, r1, #29
 8001b52:	d506      	bpl.n	8001b62 <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b54:	4814      	ldr	r0, [pc, #80]	; (8001ba8 <HAL_RCC_ClockConfig+0x148>)
 8001b56:	6883      	ldr	r3, [r0, #8]
 8001b58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b5c:	68e3      	ldr	r3, [r4, #12]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b62:	070b      	lsls	r3, r1, #28
 8001b64:	d507      	bpl.n	8001b76 <HAL_RCC_ClockConfig+0x116>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b66:	4a10      	ldr	r2, [pc, #64]	; (8001ba8 <HAL_RCC_ClockConfig+0x148>)
 8001b68:	6921      	ldr	r1, [r4, #16]
 8001b6a:	6893      	ldr	r3, [r2, #8]
 8001b6c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001b70:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001b74:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001b76:	f7ff ff35 	bl	80019e4 <HAL_RCC_GetSysClockFreq>
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <HAL_RCC_ClockConfig+0x148>)
 8001b7c:	22f0      	movs	r2, #240	; 0xf0
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	fa92 f2a2 	rbit	r2, r2
 8001b84:	fab2 f282 	clz	r2, r2
 8001b88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b8c:	40d3      	lsrs	r3, r2
 8001b8e:	4a07      	ldr	r2, [pc, #28]	; (8001bac <HAL_RCC_ClockConfig+0x14c>)
 8001b90:	5cd3      	ldrb	r3, [r2, r3]
 8001b92:	40d8      	lsrs	r0, r3
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <HAL_RCC_ClockConfig+0x150>)
 8001b96:	6018      	str	r0, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b98:	2000      	movs	r0, #0
 8001b9a:	f7ff f9d7 	bl	8000f4c <HAL_InitTick>
  
  return HAL_OK;
 8001b9e:	2000      	movs	r0, #0
}
 8001ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ba4:	40023c00 	.word	0x40023c00
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	080065e8 	.word	0x080065e8
 8001bb0:	20000000 	.word	0x20000000

08001bb4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001bb4:	4b01      	ldr	r3, [pc, #4]	; (8001bbc <HAL_RCC_GetHCLKFreq+0x8>)
 8001bb6:	6818      	ldr	r0, [r3, #0]
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20000000 	.word	0x20000000

08001bc0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bc2:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	fa92 f2a2 	rbit	r2, r2
 8001bcc:	fab2 f282 	clz	r2, r2
 8001bd0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001bd4:	40d3      	lsrs	r3, r2
 8001bd6:	4a04      	ldr	r2, [pc, #16]	; (8001be8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bd8:	5cd3      	ldrb	r3, [r2, r3]
 8001bda:	4a04      	ldr	r2, [pc, #16]	; (8001bec <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001bdc:	6810      	ldr	r0, [r2, #0]
}
 8001bde:	40d8      	lsrs	r0, r3
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	40023800 	.word	0x40023800
 8001be8:	080065f8 	.word	0x080065f8
 8001bec:	20000000 	.word	0x20000000

08001bf0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8001bf0:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bf2:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	fa92 f2a2 	rbit	r2, r2
 8001bfc:	fab2 f282 	clz	r2, r2
 8001c00:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001c04:	40d3      	lsrs	r3, r2
 8001c06:	4a04      	ldr	r2, [pc, #16]	; (8001c18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c08:	5cd3      	ldrb	r3, [r2, r3]
 8001c0a:	4a04      	ldr	r2, [pc, #16]	; (8001c1c <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001c0c:	6810      	ldr	r0, [r2, #0]
} 
 8001c0e:	40d8      	lsrs	r0, r3
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40023800 	.word	0x40023800
 8001c18:	080065f8 	.word	0x080065f8
 8001c1c:	20000000 	.word	0x20000000

08001c20 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001c20:	6803      	ldr	r3, [r0, #0]
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c22:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001c26:	f013 0601 	ands.w	r6, r3, #1
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c2a:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001c2c:	d00b      	beq.n	8001c46 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001c2e:	4ab6      	ldr	r2, [pc, #728]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001c30:	6891      	ldr	r1, [r2, #8]
 8001c32:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8001c36:	6091      	str	r1, [r2, #8]
 8001c38:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001c3a:	6891      	ldr	r1, [r2, #8]
 8001c3c:	4331      	orrs	r1, r6
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tickstart = 0;
  uint32_t tmpreg0 = 0;
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
 8001c3e:	fab6 f686 	clz	r6, r6
 8001c42:	0976      	lsrs	r6, r6, #5
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001c44:	6091      	str	r1, [r2, #8]
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001c46:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8001c4a:	d012      	beq.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c4c:	49ae      	ldr	r1, [pc, #696]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001c4e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001c50:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001c54:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c58:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
    {
      plli2sused = 1; 
 8001c5c:	bf08      	it	eq
 8001c5e:	2601      	moveq	r6, #1
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c60:	ea42 0205 	orr.w	r2, r2, r5
{
  uint32_t tickstart = 0;
  uint32_t tmpreg0 = 0;
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;
 8001c64:	bf16      	itet	ne
 8001c66:	fab5 f585 	clzne	r5, r5
 8001c6a:	2500      	moveq	r5, #0
 8001c6c:	096d      	lsrne	r5, r5, #5
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c6e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001c72:	02d8      	lsls	r0, r3, #11
 8001c74:	d511      	bpl.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001c76:	48a4      	ldr	r0, [pc, #656]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001c78:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001c7a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001c7e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001c82:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001c86:	ea42 0201 	orr.w	r2, r2, r1
 8001c8a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001c8e:	d003      	beq.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x78>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 8001c90:	2900      	cmp	r1, #0
 8001c92:	bf08      	it	eq
 8001c94:	2501      	moveq	r5, #1
 8001c96:	e000      	b.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1; 
 8001c98:	2601      	movs	r6, #1
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {    
      plli2sused = 1; 
 8001c9a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001c9e:	bf18      	it	ne
 8001ca0:	2601      	movne	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ca2:	0699      	lsls	r1, r3, #26
 8001ca4:	d55d      	bpl.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ca6:	4b98      	ldr	r3, [pc, #608]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ca8:	4f98      	ldr	r7, [pc, #608]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001caa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001cb0:	641a      	str	r2, [r3, #64]	; 0x40
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	9301      	str	r3, [sp, #4]
 8001cba:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc2:	603b      	str	r3, [r7, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cc4:	f7ff f96a 	bl	8000f9c <HAL_GetTick>
 8001cc8:	4680      	mov	r8, r0
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	05da      	lsls	r2, r3, #23
 8001cce:	d407      	bmi.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd0:	f7ff f964 	bl	8000f9c <HAL_GetTick>
 8001cd4:	ebc8 0000 	rsb	r0, r8, r0
 8001cd8:	2864      	cmp	r0, #100	; 0x64
 8001cda:	d9f6      	bls.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0xaa>
      {
        return HAL_TIMEOUT;
 8001cdc:	2003      	movs	r0, #3
 8001cde:	e340      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x742>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ce0:	4f89      	ldr	r7, [pc, #548]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001ce2:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ce4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001ce8:	d10f      	bne.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0xea>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cea:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001cec:	f402 7340 	and.w	r3, r2, #768	; 0x300
 8001cf0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001cf4:	4b84      	ldr	r3, [pc, #528]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001cf6:	d12b      	bne.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8001cf8:	6899      	ldr	r1, [r3, #8]
 8001cfa:	f421 10f8 	bic.w	r0, r1, #2031616	; 0x1f0000
 8001cfe:	f022 4170 	bic.w	r1, r2, #4026531840	; 0xf0000000
 8001d02:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8001d06:	4301      	orrs	r1, r0
 8001d08:	e025      	b.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x136>
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d0a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001d0c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d0ea      	beq.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0xca>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d14:	6f3b      	ldr	r3, [r7, #112]	; 0x70

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d16:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d18:	f423 7340 	bic.w	r3, r3, #768	; 0x300

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d1c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001d20:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d22:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001d24:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d28:	673a      	str	r2, [r7, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001d2a:	673b      	str	r3, [r7, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001d2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d2e:	07db      	lsls	r3, r3, #31
 8001d30:	d5db      	bpl.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d32:	f7ff f933 	bl	8000f9c <HAL_GetTick>
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d36:	f241 3988 	movw	r9, #5000	; 0x1388

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3a:	4680      	mov	r8, r0
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d3e:	0798      	lsls	r0, r3, #30
 8001d40:	d4d3      	bmi.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0xca>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d42:	f7ff f92b 	bl	8000f9c <HAL_GetTick>
 8001d46:	ebc8 0000 	rsb	r0, r8, r0
 8001d4a:	4548      	cmp	r0, r9
 8001d4c:	d9f6      	bls.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8001d4e:	e7c5      	b.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0xbc>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d50:	6899      	ldr	r1, [r3, #8]
 8001d52:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001d56:	6099      	str	r1, [r3, #8]
 8001d58:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001d5c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	671a      	str	r2, [r3, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001d62:	6823      	ldr	r3, [r4, #0]
 8001d64:	06d9      	lsls	r1, r3, #27
 8001d66:	d50c      	bpl.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001d68:	4a67      	ldr	r2, [pc, #412]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001d6a:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001d6e:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001d72:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001d76:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 8001d7a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001d7c:	4301      	orrs	r1, r0
 8001d7e:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d82:	045a      	lsls	r2, r3, #17
 8001d84:	d508      	bpl.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d86:	4860      	ldr	r0, [pc, #384]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001d88:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001d8c:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8001d90:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001d92:	430a      	orrs	r2, r1
 8001d94:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d98:	041f      	lsls	r7, r3, #16
 8001d9a:	d508      	bpl.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d9c:	485a      	ldr	r0, [pc, #360]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001d9e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001da2:	f422 2140 	bic.w	r1, r2, #786432	; 0xc0000
 8001da6:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8001da8:	430a      	orrs	r2, r1
 8001daa:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001dae:	03d8      	lsls	r0, r3, #15
 8001db0:	d508      	bpl.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001db2:	4855      	ldr	r0, [pc, #340]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001db4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001db8:	f422 1140 	bic.w	r1, r2, #3145728	; 0x300000
 8001dbc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001dc4:	0399      	lsls	r1, r3, #14
 8001dc6:	d508      	bpl.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001dc8:	484f      	ldr	r0, [pc, #316]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001dca:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001dce:	f422 0140 	bic.w	r1, r2, #12582912	; 0xc00000
 8001dd2:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dda:	065a      	lsls	r2, r3, #25
 8001ddc:	d508      	bpl.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001dde:	484a      	ldr	r0, [pc, #296]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001de0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001de4:	f022 0103 	bic.w	r1, r2, #3
 8001de8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001dea:	430a      	orrs	r2, r1
 8001dec:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001df0:	061f      	lsls	r7, r3, #24
 8001df2:	d508      	bpl.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001df4:	4844      	ldr	r0, [pc, #272]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001df6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001dfa:	f022 010c 	bic.w	r1, r2, #12
 8001dfe:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001e00:	430a      	orrs	r2, r1
 8001e02:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e06:	05d8      	lsls	r0, r3, #23
 8001e08:	d508      	bpl.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e0a:	483f      	ldr	r0, [pc, #252]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001e0c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001e10:	f022 0130 	bic.w	r1, r2, #48	; 0x30
 8001e14:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8001e16:	430a      	orrs	r2, r1
 8001e18:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e1c:	0599      	lsls	r1, r3, #22
 8001e1e:	d508      	bpl.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e20:	4839      	ldr	r0, [pc, #228]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001e22:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001e26:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 8001e2a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e32:	055a      	lsls	r2, r3, #21
 8001e34:	d508      	bpl.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e36:	4834      	ldr	r0, [pc, #208]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001e38:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001e3c:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8001e40:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001e42:	430a      	orrs	r2, r1
 8001e44:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001e48:	051f      	lsls	r7, r3, #20
 8001e4a:	d508      	bpl.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x23e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001e4c:	482e      	ldr	r0, [pc, #184]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001e4e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001e52:	f422 6140 	bic.w	r1, r2, #3072	; 0xc00
 8001e56:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001e5e:	04d8      	lsls	r0, r3, #19
 8001e60:	d508      	bpl.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001e62:	4829      	ldr	r0, [pc, #164]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001e64:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001e68:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8001e6c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001e74:	0499      	lsls	r1, r3, #18
 8001e76:	d508      	bpl.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001e78:	4823      	ldr	r0, [pc, #140]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001e7a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001e7e:	f422 4140 	bic.w	r1, r2, #49152	; 0xc000
 8001e82:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001e84:	430a      	orrs	r2, r1
 8001e86:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001e8a:	025a      	lsls	r2, r3, #9
 8001e8c:	d508      	bpl.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001e8e:	481e      	ldr	r0, [pc, #120]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001e90:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001e94:	f022 6180 	bic.w	r1, r2, #67108864	; 0x4000000
 8001e98:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001ea0:	029f      	lsls	r7, r3, #10
 8001ea2:	d50c      	bpl.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001ea4:	4818      	ldr	r0, [pc, #96]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001ea6:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001ea8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 8001eac:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001eb0:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 8001eb4:	bf08      	it	eq
 8001eb6:	2501      	moveq	r5, #1
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1; 
 8001ebe:	f013 0f08 	tst.w	r3, #8
 8001ec2:	bf18      	it	ne
 8001ec4:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001ec6:	0358      	lsls	r0, r3, #13
 8001ec8:	d508      	bpl.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001eca:	480f      	ldr	r0, [pc, #60]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001ecc:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001ed0:	f022 7140 	bic.w	r1, r2, #50331648	; 0x3000000
 8001ed4:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001edc:	0219      	lsls	r1, r3, #8
 8001ede:	d509      	bpl.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001ee0:	4809      	ldr	r0, [pc, #36]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001ee2:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001ee6:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8001eea:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001ef4:	2e01      	cmp	r6, #1
 8001ef6:	d00b      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8001ef8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001efc:	d008      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001efe:	2d01      	cmp	r5, #1
 8001f00:	f040 818c 	bne.w	800221c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8001f04:	e123      	b.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x52e>
 8001f06:	bf00      	nop
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40007000 	.word	0x40007000
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();  
 8001f10:	4ec8      	ldr	r6, [pc, #800]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8001f12:	6833      	ldr	r3, [r6, #0]
 8001f14:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001f18:	6033      	str	r3, [r6, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f1a:	f7ff f83f 	bl	8000f9c <HAL_GetTick>
 8001f1e:	4607      	mov	r7, r0
    
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f20:	6833      	ldr	r3, [r6, #0]
 8001f22:	f8df e310 	ldr.w	lr, [pc, #784]	; 8002234 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8001f26:	011a      	lsls	r2, r3, #4
 8001f28:	d505      	bpl.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x316>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001f2a:	f7ff f837 	bl	8000f9c <HAL_GetTick>
 8001f2e:	1bc0      	subs	r0, r0, r7
 8001f30:	2864      	cmp	r0, #100	; 0x64
 8001f32:	d9f5      	bls.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8001f34:	e6d2      	b.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0xbc>
    
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001f36:	6827      	ldr	r7, [r4, #0]
 8001f38:	07fb      	lsls	r3, r7, #31
 8001f3a:	d53c      	bpl.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x396>
 8001f3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f3e:	bbd3      	cbnz	r3, 8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x396>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8001f40:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 8001f44:	f44f 3840 	mov.w	r8, #196608	; 0x30000
 8001f48:	fa98 f9a8 	rbit	r9, r8
 8001f4c:	f04f 6670 	mov.w	r6, #251658240	; 0xf000000
 8001f50:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8001f54:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 8001f58:	fa96 fca6 	rbit	ip, r6
 8001f5c:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 8001f60:	fabc fc8c 	clz	ip, ip
 8001f64:	fa9a faaa 	rbit	sl, sl
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001f68:	faba fa8a 	clz	sl, sl
 8001f6c:	fa98 f8a8 	rbit	r8, r8
 8001f70:	fab8 f888 	clz	r8, r8
 8001f74:	fa96 f6a6 	rbit	r6, r6
 8001f78:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8001f7c:	fab6 f686 	clz	r6, r6
 8001f80:	fa93 f3a3 	rbit	r3, r3
 8001f84:	fab3 fb83 	clz	fp, r3
 8001f88:	6861      	ldr	r1, [r4, #4]
 8001f8a:	68a3      	ldr	r3, [r4, #8]
 8001f8c:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8001f90:	fa01 f10a 	lsl.w	r1, r1, sl
 8001f94:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001f98:	fa03 f30b 	lsl.w	r3, r3, fp
 8001f9c:	fa20 f009 	lsr.w	r0, r0, r9
 8001fa0:	fa22 f20c 	lsr.w	r2, r2, ip
 8001fa4:	430b      	orrs	r3, r1
 8001fa6:	fa00 f108 	lsl.w	r1, r0, r8
 8001faa:	4319      	orrs	r1, r3
 8001fac:	fa02 f306 	lsl.w	r3, r2, r6
 8001fb0:	430b      	orrs	r3, r1
 8001fb2:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
    }
        
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001fb6:	033e      	lsls	r6, r7, #12
 8001fb8:	d503      	bpl.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8001fba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001fbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fc0:	d005      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8001fc2:	02f8      	lsls	r0, r7, #11
 8001fc4:	d549      	bpl.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x43a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8001fc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fcc:	d145      	bne.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x43a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8001fce:	f8df e264 	ldr.w	lr, [pc, #612]	; 8002234 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8001fd2:	f44f 3840 	mov.w	r8, #196608	; 0x30000
 8001fd6:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 8001fda:	fa98 f9a8 	rbit	r9, r8
 8001fde:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8001fe2:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8001fe6:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 8001fea:	fa96 fca6 	rbit	ip, r6
 8001fee:	f647 7bc0 	movw	fp, #32704	; 0x7fc0
 8001ff2:	fabc fc8c 	clz	ip, ip
 8001ff6:	fa9b fbab 	rbit	fp, fp
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001ffa:	fabb fb8b 	clz	fp, fp
 8001ffe:	fa98 f8a8 	rbit	r8, r8
 8002002:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8002006:	fab8 f888 	clz	r8, r8
 800200a:	fa93 f3a3 	rbit	r3, r3
 800200e:	fab3 fa83 	clz	sl, r3
 8002012:	fa96 f6a6 	rbit	r6, r6
 8002016:	6863      	ldr	r3, [r4, #4]
 8002018:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 800201c:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8002020:	fab6 f686 	clz	r6, r6
 8002024:	fa03 f10b 	lsl.w	r1, r3, fp
 8002028:	68e3      	ldr	r3, [r4, #12]
 800202a:	fa20 f009 	lsr.w	r0, r0, r9
 800202e:	fa22 f20c 	lsr.w	r2, r2, ip
 8002032:	fa03 f30a 	lsl.w	r3, r3, sl
 8002036:	430b      	orrs	r3, r1
 8002038:	fa00 f108 	lsl.w	r1, r0, r8
 800203c:	4319      	orrs	r1, r3
 800203e:	fa02 f306 	lsl.w	r3, r2, r6
 8002042:	430b      	orrs	r3, r1
 8002044:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8002048:	f8de 308c 	ldr.w	r3, [lr, #140]	; 0x8c
 800204c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800204e:	f023 031f 	bic.w	r3, r3, #31
 8002052:	3a01      	subs	r2, #1
 8002054:	4313      	orrs	r3, r2
 8002056:	f8ce 308c 	str.w	r3, [lr, #140]	; 0x8c
    }          

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800205a:	01f9      	lsls	r1, r7, #7
 800205c:	d53c      	bpl.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 800205e:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8002234 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8002062:	f04f 6870 	mov.w	r8, #251658240	; 0xf000000
 8002066:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 800206a:	fa98 f9a8 	rbit	r9, r8
 800206e:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8002072:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8002076:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 800207a:	fa96 fca6 	rbit	ip, r6
 800207e:	f647 7bc0 	movw	fp, #32704	; 0x7fc0
 8002082:	fabc fc8c 	clz	ip, ip
 8002086:	fa9b fbab 	rbit	fp, fp
 800208a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800208e:	fabb fb8b 	clz	fp, fp
 8002092:	fa93 f3a3 	rbit	r3, r3
 8002096:	fab3 fa83 	clz	sl, r3
 800209a:	fa98 f8a8 	rbit	r8, r8
 800209e:	fab8 f888 	clz	r8, r8
 80020a2:	fa96 f6a6 	rbit	r6, r6
 80020a6:	6863      	ldr	r3, [r4, #4]
 80020a8:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 80020ac:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 80020b0:	fab6 f686 	clz	r6, r6
 80020b4:	fa03 f10b 	lsl.w	r1, r3, fp
 80020b8:	6923      	ldr	r3, [r4, #16]
 80020ba:	fa20 f009 	lsr.w	r0, r0, r9
 80020be:	fa22 f20c 	lsr.w	r2, r2, ip
 80020c2:	fa03 f30a 	lsl.w	r3, r3, sl
 80020c6:	430b      	orrs	r3, r1
 80020c8:	fa00 f108 	lsl.w	r1, r0, r8
 80020cc:	4319      	orrs	r1, r3
 80020ce:	fa02 f306 	lsl.w	r3, r2, r6
 80020d2:	430b      	orrs	r3, r1
 80020d4:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
    }  
         
    /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80020d8:	01ba      	lsls	r2, r7, #6
 80020da:	d526      	bpl.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80020dc:	f647 7ec0 	movw	lr, #32704	; 0x7fc0
 80020e0:	fa9e feae 	rbit	lr, lr
 80020e4:	f44f 3040 	mov.w	r0, #196608	; 0x30000
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80020e8:	fabe fe8e 	clz	lr, lr
 80020ec:	fa90 f0a0 	rbit	r0, r0
 80020f0:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 80020f4:	fab0 f780 	clz	r7, r0
 80020f8:	fa92 f2a2 	rbit	r2, r2
 80020fc:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8002100:	fab2 f682 	clz	r6, r2
 8002104:	fa93 f3a3 	rbit	r3, r3
 8002108:	fab3 f183 	clz	r1, r3
 800210c:	6920      	ldr	r0, [r4, #16]
 800210e:	6863      	ldr	r3, [r4, #4]
 8002110:	68e2      	ldr	r2, [r4, #12]
 8002112:	40b8      	lsls	r0, r7
 8002114:	fa03 f30e 	lsl.w	r3, r3, lr
 8002118:	40b2      	lsls	r2, r6
 800211a:	4303      	orrs	r3, r0
 800211c:	431a      	orrs	r2, r3
 800211e:	68a3      	ldr	r3, [r4, #8]
 8002120:	408b      	lsls	r3, r1
 8002122:	4313      	orrs	r3, r2
 8002124:	4a43      	ldr	r2, [pc, #268]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8002126:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    } 
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800212a:	4e42      	ldr	r6, [pc, #264]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 800212c:	6833      	ldr	r3, [r6, #0]
 800212e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002132:	6033      	str	r3, [r6, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002134:	f7fe ff32 	bl	8000f9c <HAL_GetTick>
 8002138:	4607      	mov	r7, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800213a:	6833      	ldr	r3, [r6, #0]
 800213c:	011b      	lsls	r3, r3, #4
 800213e:	f53f aede 	bmi.w	8001efe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002142:	f7fe ff2b 	bl	8000f9c <HAL_GetTick>
 8002146:	1bc0      	subs	r0, r0, r7
 8002148:	2864      	cmp	r0, #100	; 0x64
 800214a:	d9f6      	bls.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800214c:	e5c6      	b.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0xbc>
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 800214e:	4d39      	ldr	r5, [pc, #228]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8002150:	682b      	ldr	r3, [r5, #0]
 8002152:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002156:	602b      	str	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002158:	f7fe ff20 	bl	8000f9c <HAL_GetTick>
 800215c:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800215e:	682b      	ldr	r3, [r5, #0]
 8002160:	009f      	lsls	r7, r3, #2
 8002162:	d45d      	bmi.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x600>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002164:	6825      	ldr	r5, [r4, #0]
 8002166:	032e      	lsls	r6, r5, #12
 8002168:	d460      	bmi.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800216a:	02e8      	lsls	r0, r5, #11
 800216c:	d464      	bmi.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x618>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800216e:	02a9      	lsls	r1, r5, #10
 8002170:	f100 80ad 	bmi.w	80022ce <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002174:	072a      	lsls	r2, r5, #28
 8002176:	d545      	bpl.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8002178:	4f2e      	ldr	r7, [pc, #184]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 800217a:	f04f 6570 	mov.w	r5, #251658240	; 0xf000000
 800217e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002182:	fa95 fca5 	rbit	ip, r5
 8002186:	f44f 3640 	mov.w	r6, #196608	; 0x30000
 800218a:	fabc fc8c 	clz	ip, ip
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 800218e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002192:	fa96 f8a6 	rbit	r8, r6
 8002196:	f647 79c0 	movw	r9, #32704	; 0x7fc0
 800219a:	fab8 f888 	clz	r8, r8
 800219e:	fa99 f9a9 	rbit	r9, r9
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80021a2:	fab9 f989 	clz	r9, r9
 80021a6:	fa96 f6a6 	rbit	r6, r6
 80021aa:	fab6 f686 	clz	r6, r6
 80021ae:	fa95 f5a5 	rbit	r5, r5
 80021b2:	f04f 4ee0 	mov.w	lr, #1879048192	; 0x70000000
 80021b6:	fab5 f585 	clz	r5, r5
 80021ba:	fa9e feae 	rbit	lr, lr
 80021be:	6963      	ldr	r3, [r4, #20]
 80021c0:	fabe fe8e 	clz	lr, lr
 80021c4:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 80021c8:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80021cc:	fa03 f109 	lsl.w	r1, r3, r9
 80021d0:	69e3      	ldr	r3, [r4, #28]
 80021d2:	fa20 f008 	lsr.w	r0, r0, r8
 80021d6:	fa22 f20c 	lsr.w	r2, r2, ip
 80021da:	fa03 fe0e 	lsl.w	lr, r3, lr
 80021de:	fa02 f305 	lsl.w	r3, r2, r5
 80021e2:	ea41 0e0e 	orr.w	lr, r1, lr
 80021e6:	fa00 f106 	lsl.w	r1, r0, r6
 80021ea:	ea4e 0101 	orr.w	r1, lr, r1
 80021ee:	430b      	orrs	r3, r1
 80021f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80021f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80021fe:	4313      	orrs	r3, r2
 8002200:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002204:	4c0b      	ldr	r4, [pc, #44]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8002206:	6823      	ldr	r3, [r4, #0]
 8002208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220c:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800220e:	f7fe fec5 	bl	8000f9c <HAL_GetTick>
 8002212:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002214:	6823      	ldr	r3, [r4, #0]
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	f140 809c 	bpl.w	8002354 <HAL_RCCEx_PeriphCLKConfig+0x734>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800221c:	2000      	movs	r0, #0
 800221e:	e0a0      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x742>
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002220:	f7fe febc 	bl	8000f9c <HAL_GetTick>
 8002224:	1b80      	subs	r0, r0, r6
 8002226:	2864      	cmp	r0, #100	; 0x64
 8002228:	d999      	bls.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x53e>
 800222a:	e557      	b.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0xbc>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800222c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800222e:	b133      	cbz	r3, 800223e <HAL_RCCEx_PeriphCLKConfig+0x61e>
 8002230:	e79b      	b.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8002232:	bf00      	nop
 8002234:	40023800 	.word	0x40023800
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002238:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800223a:	2b00      	cmp	r3, #0
 800223c:	d197      	bne.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x54e>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 800223e:	4f4a      	ldr	r7, [pc, #296]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x748>)
 8002240:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
 8002244:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002248:	fa9c f9ac 	rbit	r9, ip
 800224c:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8002250:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8002254:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002258:	fa96 fea6 	rbit	lr, r6
 800225c:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 8002260:	fabe fe8e 	clz	lr, lr
 8002264:	fa9a faaa 	rbit	sl, sl
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002268:	faba fa8a 	clz	sl, sl
 800226c:	fa9c fcac 	rbit	ip, ip
 8002270:	f04f 6870 	mov.w	r8, #251658240	; 0xf000000
 8002274:	fabc fc8c 	clz	ip, ip
 8002278:	fa98 f8a8 	rbit	r8, r8
 800227c:	fab8 f888 	clz	r8, r8
 8002280:	fa96 f6a6 	rbit	r6, r6
 8002284:	69a1      	ldr	r1, [r4, #24]
 8002286:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 800228a:	6963      	ldr	r3, [r4, #20]
 800228c:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8002290:	fa01 f808 	lsl.w	r8, r1, r8
 8002294:	fa20 f009 	lsr.w	r0, r0, r9
 8002298:	fa03 f30a 	lsl.w	r3, r3, sl
 800229c:	fa22 f20e 	lsr.w	r2, r2, lr
 80022a0:	fab6 f686 	clz	r6, r6
 80022a4:	fa00 f10c 	lsl.w	r1, r0, ip
 80022a8:	ea43 0308 	orr.w	r3, r3, r8
 80022ac:	4319      	orrs	r1, r3
 80022ae:	fa02 f306 	lsl.w	r3, r2, r6
 80022b2:	430b      	orrs	r3, r1
 80022b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80022b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80022be:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80022c2:	3a01      	subs	r2, #1
 80022c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80022c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80022cc:	e74f      	b.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80022ce:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80022d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022d4:	f47f af4e 	bne.w	8002174 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 80022d8:	4f23      	ldr	r7, [pc, #140]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x748>)
 80022da:	f04f 6c70 	mov.w	ip, #251658240	; 0xf000000
 80022de:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80022e2:	fa9c f9ac 	rbit	r9, ip
 80022e6:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 80022ea:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 80022ee:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80022f2:	fa96 fea6 	rbit	lr, r6
 80022f6:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 80022fa:	fabe fe8e 	clz	lr, lr
 80022fe:	fa9a faaa 	rbit	sl, sl
 8002302:	f44f 3840 	mov.w	r8, #196608	; 0x30000
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002306:	faba fa8a 	clz	sl, sl
 800230a:	fa98 f8a8 	rbit	r8, r8
 800230e:	fab8 f888 	clz	r8, r8
 8002312:	fa9c fcac 	rbit	ip, ip
 8002316:	fabc fc8c 	clz	ip, ip
 800231a:	fa96 f6a6 	rbit	r6, r6
 800231e:	6a21      	ldr	r1, [r4, #32]
 8002320:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8002324:	6963      	ldr	r3, [r4, #20]
 8002326:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 800232a:	fa01 f808 	lsl.w	r8, r1, r8
 800232e:	fa20 f009 	lsr.w	r0, r0, r9
 8002332:	fa03 f30a 	lsl.w	r3, r3, sl
 8002336:	fab6 f686 	clz	r6, r6
 800233a:	fa00 f10c 	lsl.w	r1, r0, ip
 800233e:	fa22 f20e 	lsr.w	r2, r2, lr
 8002342:	ea43 0308 	orr.w	r3, r3, r8
 8002346:	4319      	orrs	r1, r3
 8002348:	fa02 f306 	lsl.w	r3, r2, r6
 800234c:	430b      	orrs	r3, r1
 800234e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002352:	e70f      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x554>
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002354:	f7fe fe22 	bl	8000f9c <HAL_GetTick>
 8002358:	1b40      	subs	r0, r0, r5
 800235a:	2864      	cmp	r0, #100	; 0x64
 800235c:	f67f af5a 	bls.w	8002214 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8002360:	e4bc      	b.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0xbc>
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 8002362:	b003      	add	sp, #12
 8002364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002368:	40023800 	.word	0x40023800

0800236c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800236c:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800236e:	4604      	mov	r4, r0
 8002370:	2800      	cmp	r0, #0
 8002372:	d04f      	beq.n	8002414 <HAL_SPI_Init+0xa8>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002374:	2300      	movs	r3, #0
 8002376:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002378:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800237c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002380:	b91b      	cbnz	r3, 800238a <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002382:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002386:	f001 f8ed 	bl	8003564 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800238a:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800238c:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800238e:	68e2      	ldr	r2, [r4, #12]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002390:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002394:	680b      	ldr	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002396:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800239a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800239e:	600b      	str	r3, [r1, #0]
 80023a0:	f04f 0300 	mov.w	r3, #0

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023a4:	d903      	bls.n	80023ae <HAL_SPI_Init+0x42>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80023a6:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80023a8:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 80023ac:	e001      	b.n	80023b2 <HAL_SPI_Init+0x46>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80023ae:	f44f 5080 	mov.w	r0, #4096	; 0x1000

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023b2:	bf18      	it	ne
 80023b4:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80023b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80023b8:	b92b      	cbnz	r3, 80023c6 <HAL_SPI_Init+0x5a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023ba:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80023be:	bf8c      	ite	hi
 80023c0:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80023c2:	2301      	movls	r3, #1
 80023c4:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80023c6:	68a5      	ldr	r5, [r4, #8]
 80023c8:	6866      	ldr	r6, [r4, #4]
 80023ca:	69a3      	ldr	r3, [r4, #24]
 80023cc:	432e      	orrs	r6, r5
 80023ce:	6925      	ldr	r5, [r4, #16]
 80023d0:	432e      	orrs	r6, r5
 80023d2:	6965      	ldr	r5, [r4, #20]
 80023d4:	432e      	orrs	r6, r5
 80023d6:	69e5      	ldr	r5, [r4, #28]
 80023d8:	432e      	orrs	r6, r5
 80023da:	6a25      	ldr	r5, [r4, #32]
 80023dc:	432e      	orrs	r6, r5
 80023de:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80023e0:	432e      	orrs	r6, r5
 80023e2:	f403 7500 	and.w	r5, r3, #512	; 0x200
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80023e6:	0c1b      	lsrs	r3, r3, #16
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80023e8:	4335      	orrs	r5, r6
 80023ea:	600d      	str	r5, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80023ec:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80023ee:	432a      	orrs	r2, r5
 80023f0:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80023f2:	4315      	orrs	r5, r2
 80023f4:	f003 0204 	and.w	r2, r3, #4
 80023f8:	ea45 0302 	orr.w	r3, r5, r2
 80023fc:	4303      	orrs	r3, r0
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023fe:	2000      	movs	r0, #0
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002400:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002402:	69cb      	ldr	r3, [r1, #28]
 8002404:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002408:	61cb      	str	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 800240a:	2301      	movs	r3, #1
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800240c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800240e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 8002412:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 8002414:	2001      	movs	r0, #1

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
}
 8002416:	bd70      	pop	{r4, r5, r6, pc}

08002418 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002418:	4a2e      	ldr	r2, [pc, #184]	; (80024d4 <TIM_Base_SetConfig+0xbc>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 800241a:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800241c:	4290      	cmp	r0, r2
 800241e:	d012      	beq.n	8002446 <TIM_Base_SetConfig+0x2e>
 8002420:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002424:	d00f      	beq.n	8002446 <TIM_Base_SetConfig+0x2e>
 8002426:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800242a:	4290      	cmp	r0, r2
 800242c:	d00b      	beq.n	8002446 <TIM_Base_SetConfig+0x2e>
 800242e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002432:	4290      	cmp	r0, r2
 8002434:	d007      	beq.n	8002446 <TIM_Base_SetConfig+0x2e>
 8002436:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800243a:	4290      	cmp	r0, r2
 800243c:	d003      	beq.n	8002446 <TIM_Base_SetConfig+0x2e>
 800243e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002442:	4290      	cmp	r0, r2
 8002444:	d118      	bne.n	8002478 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002446:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800244c:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800244e:	4a21      	ldr	r2, [pc, #132]	; (80024d4 <TIM_Base_SetConfig+0xbc>)
 8002450:	4290      	cmp	r0, r2
 8002452:	d037      	beq.n	80024c4 <TIM_Base_SetConfig+0xac>
 8002454:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002458:	d034      	beq.n	80024c4 <TIM_Base_SetConfig+0xac>
 800245a:	4a1f      	ldr	r2, [pc, #124]	; (80024d8 <TIM_Base_SetConfig+0xc0>)
 800245c:	4290      	cmp	r0, r2
 800245e:	d031      	beq.n	80024c4 <TIM_Base_SetConfig+0xac>
 8002460:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002464:	4290      	cmp	r0, r2
 8002466:	d02d      	beq.n	80024c4 <TIM_Base_SetConfig+0xac>
 8002468:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800246c:	4290      	cmp	r0, r2
 800246e:	d029      	beq.n	80024c4 <TIM_Base_SetConfig+0xac>
 8002470:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002474:	4290      	cmp	r0, r2
 8002476:	d025      	beq.n	80024c4 <TIM_Base_SetConfig+0xac>
 8002478:	4a18      	ldr	r2, [pc, #96]	; (80024dc <TIM_Base_SetConfig+0xc4>)
 800247a:	4290      	cmp	r0, r2
 800247c:	d022      	beq.n	80024c4 <TIM_Base_SetConfig+0xac>
 800247e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002482:	4290      	cmp	r0, r2
 8002484:	d01e      	beq.n	80024c4 <TIM_Base_SetConfig+0xac>
 8002486:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800248a:	4290      	cmp	r0, r2
 800248c:	d01a      	beq.n	80024c4 <TIM_Base_SetConfig+0xac>
 800248e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002492:	4290      	cmp	r0, r2
 8002494:	d016      	beq.n	80024c4 <TIM_Base_SetConfig+0xac>
 8002496:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800249a:	4290      	cmp	r0, r2
 800249c:	d012      	beq.n	80024c4 <TIM_Base_SetConfig+0xac>
 800249e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024a2:	4290      	cmp	r0, r2
 80024a4:	d00e      	beq.n	80024c4 <TIM_Base_SetConfig+0xac>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 80024a6:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024a8:	688b      	ldr	r3, [r1, #8]
 80024aa:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80024ac:	680b      	ldr	r3, [r1, #0]
 80024ae:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80024b0:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <TIM_Base_SetConfig+0xbc>)
 80024b2:	4298      	cmp	r0, r3
 80024b4:	d00b      	beq.n	80024ce <TIM_Base_SetConfig+0xb6>
 80024b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024ba:	4298      	cmp	r0, r3
 80024bc:	d007      	beq.n	80024ce <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024be:	2301      	movs	r3, #1
 80024c0:	6143      	str	r3, [r0, #20]
}
 80024c2:	4770      	bx	lr
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024c8:	68ca      	ldr	r2, [r1, #12]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	e7eb      	b.n	80024a6 <TIM_Base_SetConfig+0x8e>
  TIMx->PSC = (uint32_t)Structure->Prescaler;
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024ce:	690b      	ldr	r3, [r1, #16]
 80024d0:	6303      	str	r3, [r0, #48]	; 0x30
 80024d2:	e7f4      	b.n	80024be <TIM_Base_SetConfig+0xa6>
 80024d4:	40010000 	.word	0x40010000
 80024d8:	40000400 	.word	0x40000400
 80024dc:	40014000 	.word	0x40014000

080024e0 <HAL_TIM_PWM_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024e0:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80024e2:	4604      	mov	r4, r0
 80024e4:	b1a0      	cbz	r0, 8002510 <HAL_TIM_PWM_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 80024e6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80024ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80024ee:	b91b      	cbnz	r3, 80024f8 <HAL_TIM_PWM_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;  
 80024f0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024f4:	f001 f882 	bl	80035fc <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 80024f8:	2302      	movs	r3, #2
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80024fa:	6820      	ldr	r0, [r4, #0]
 80024fc:	1d21      	adds	r1, r4, #4
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 80024fe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002502:	f7ff ff89 	bl	8002418 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002506:	2301      	movs	r3, #1
  
  return HAL_OK;
 8002508:	2000      	movs	r0, #0
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800250a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 800250e:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002510:	2001      	movs	r0, #1
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}  
 8002512:	bd10      	pop	{r4, pc}

08002514 <HAL_TIM_IC_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002514:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002516:	4604      	mov	r4, r0
 8002518:	b1a0      	cbz	r0, 8002544 <HAL_TIM_IC_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision)); 

  if(htim->State == HAL_TIM_STATE_RESET)
 800251a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800251e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002522:	b91b      	cbnz	r3, 800252c <HAL_TIM_IC_Init+0x18>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;   
 8002524:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002528:	f001 f842 	bl	80035b0 <HAL_TIM_IC_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 800252c:	2302      	movs	r3, #2
  
  /* Init the base time for the input capture */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800252e:	6820      	ldr	r0, [r4, #0]
 8002530:	1d21      	adds	r1, r4, #4
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 8002532:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Init the base time for the input capture */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002536:	f7ff ff6f 	bl	8002418 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800253a:	2301      	movs	r3, #1
  
  return HAL_OK;
 800253c:	2000      	movs	r0, #0
  
  /* Init the base time for the input capture */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800253e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8002542:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002544:	2001      	movs	r0, #1
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8002546:	bd10      	pop	{r4, pc}

08002548 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002548:	6a03      	ldr	r3, [r0, #32]
 800254a:	f023 0301 	bic.w	r3, r3, #1
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800254e:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002550:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002552:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002554:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002556:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002558:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800255a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800255e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002562:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002564:	f023 0502 	bic.w	r5, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002568:	688b      	ldr	r3, [r1, #8]
 800256a:	432b      	orrs	r3, r5

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800256c:	4d0c      	ldr	r5, [pc, #48]	; (80025a0 <TIM_OC1_SetConfig+0x58>)
 800256e:	42a8      	cmp	r0, r5
 8002570:	d009      	beq.n	8002586 <TIM_OC1_SetConfig+0x3e>
 8002572:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002576:	42a8      	cmp	r0, r5
 8002578:	d005      	beq.n	8002586 <TIM_OC1_SetConfig+0x3e>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800257a:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800257c:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800257e:	6184      	str	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002580:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002582:	6203      	str	r3, [r0, #32]
} 
 8002584:	bd70      	pop	{r4, r5, r6, pc}
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002586:	68cd      	ldr	r5, [r1, #12]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002588:	f023 0308 	bic.w	r3, r3, #8
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800258c:	694e      	ldr	r6, [r1, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800258e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002592:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002594:	698d      	ldr	r5, [r1, #24]
 8002596:	4335      	orrs	r5, r6
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002598:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800259c:	432a      	orrs	r2, r5
 800259e:	e7ec      	b.n	800257a <TIM_OC1_SetConfig+0x32>
 80025a0:	40010000 	.word	0x40010000

080025a4 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025a4:	6a03      	ldr	r3, [r0, #32]
 80025a6:	f023 0310 	bic.w	r3, r3, #16
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025aa:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025ac:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80025ae:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80025b0:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025b2:	6984      	ldr	r4, [r0, #24]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80025b4:	f023 0320 	bic.w	r3, r3, #32
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80025b8:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025ba:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 80025be:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80025c2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 80025c6:	688d      	ldr	r5, [r1, #8]
 80025c8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80025cc:	4d0e      	ldr	r5, [pc, #56]	; (8002608 <TIM_OC2_SetConfig+0x64>)
 80025ce:	42a8      	cmp	r0, r5
 80025d0:	d009      	beq.n	80025e6 <TIM_OC2_SetConfig+0x42>
 80025d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80025d6:	42a8      	cmp	r0, r5
 80025d8:	d005      	beq.n	80025e6 <TIM_OC2_SetConfig+0x42>
    tmpcr2 |= (OC_Config->OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025da:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80025dc:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025de:	6184      	str	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80025e0:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025e2:	6203      	str	r3, [r0, #32]
}
 80025e4:	bd30      	pop	{r4, r5, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 80025e6:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80025e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80025ec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 80025f0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80025f4:	694d      	ldr	r5, [r1, #20]
 80025f6:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80025fa:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80025fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002600:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8002604:	e7e9      	b.n	80025da <TIM_OC2_SetConfig+0x36>
 8002606:	bf00      	nop
 8002608:	40010000 	.word	0x40010000

0800260c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800260c:	6a03      	ldr	r3, [r0, #32]
 800260e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002612:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002614:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002616:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002618:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800261a:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800261c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002620:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002622:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8002626:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800262a:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 800262c:	688d      	ldr	r5, [r1, #8]
 800262e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002632:	4d0e      	ldr	r5, [pc, #56]	; (800266c <TIM_OC3_SetConfig+0x60>)
 8002634:	42a8      	cmp	r0, r5
 8002636:	d009      	beq.n	800264c <TIM_OC3_SetConfig+0x40>
 8002638:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800263c:	42a8      	cmp	r0, r5
 800263e:	d005      	beq.n	800264c <TIM_OC3_SetConfig+0x40>
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002640:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002642:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002644:	61c4      	str	r4, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002646:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002648:	6203      	str	r3, [r0, #32]
}
 800264a:	bd30      	pop	{r4, r5, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 800264c:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800264e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002652:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8002656:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 800265a:	694d      	ldr	r5, [r1, #20]
 800265c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8002660:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002662:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8002666:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 800266a:	e7e9      	b.n	8002640 <TIM_OC3_SetConfig+0x34>
 800266c:	40010000 	.word	0x40010000

08002670 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002670:	6a03      	ldr	r3, [r0, #32]
 8002672:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002676:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002678:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800267a:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800267c:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800267e:	69c3      	ldr	r3, [r0, #28]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002680:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002684:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002686:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800268a:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800268e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8002692:	688d      	ldr	r5, [r1, #8]
 8002694:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002698:	4d09      	ldr	r5, [pc, #36]	; (80026c0 <TIM_OC4_SetConfig+0x50>)
 800269a:	42a8      	cmp	r0, r5
 800269c:	d009      	beq.n	80026b2 <TIM_OC4_SetConfig+0x42>
 800269e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80026a2:	42a8      	cmp	r0, r5
 80026a4:	d005      	beq.n	80026b2 <TIM_OC4_SetConfig+0x42>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026a6:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80026a8:	61c3      	str	r3, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80026aa:	684b      	ldr	r3, [r1, #4]
 80026ac:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026ae:	6204      	str	r4, [r0, #32]
}
 80026b0:	bd30      	pop	{r4, r5, pc}
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80026b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80026b6:	694d      	ldr	r5, [r1, #20]
 80026b8:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 80026bc:	e7f3      	b.n	80026a6 <TIM_OC4_SetConfig+0x36>
 80026be:	bf00      	nop
 80026c0:	40010000 	.word	0x40010000

080026c4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.  
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80026c4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026c6:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80026c8:	4e1a      	ldr	r6, [pc, #104]	; (8002734 <TIM_TI1_SetConfig+0x70>)
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026ca:	f024 0401 	bic.w	r4, r4, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80026ce:	42b0      	cmp	r0, r6
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026d0:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026d2:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80026d4:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80026d6:	d01a      	beq.n	800270e <TIM_TI1_SetConfig+0x4a>
 80026d8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80026dc:	d017      	beq.n	800270e <TIM_TI1_SetConfig+0x4a>
 80026de:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 80026e2:	42b0      	cmp	r0, r6
 80026e4:	d013      	beq.n	800270e <TIM_TI1_SetConfig+0x4a>
 80026e6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80026ea:	42b0      	cmp	r0, r6
 80026ec:	d00f      	beq.n	800270e <TIM_TI1_SetConfig+0x4a>
 80026ee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80026f2:	42b0      	cmp	r0, r6
 80026f4:	d00b      	beq.n	800270e <TIM_TI1_SetConfig+0x4a>
 80026f6:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 80026fa:	42b0      	cmp	r0, r6
 80026fc:	d007      	beq.n	800270e <TIM_TI1_SetConfig+0x4a>
 80026fe:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8002702:	42b0      	cmp	r0, r6
 8002704:	d003      	beq.n	800270e <TIM_TI1_SetConfig+0x4a>
 8002706:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800270a:	42b0      	cmp	r0, r6
 800270c:	d10f      	bne.n	800272e <TIM_TI1_SetConfig+0x6a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800270e:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8002712:	4322      	orrs	r2, r4
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4) & TIM_CCMR1_IC1F);
 8002714:	011b      	lsls	r3, r3, #4
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002716:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4) & TIM_CCMR1_IC1F);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800271a:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800271e:	f001 010a 	and.w	r1, r1, #10
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4) & TIM_CCMR1_IC1F);
 8002722:	b2db      	uxtb	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002724:	430d      	orrs	r5, r1
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4) & TIM_CCMR1_IC1F);
 8002726:	431a      	orrs	r2, r3
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002728:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800272a:	6205      	str	r5, [r0, #32]
}
 800272c:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
    tmpccmr1 |= TIM_ICSelection;
  } 
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800272e:	f044 0201 	orr.w	r2, r4, #1
 8002732:	e7ef      	b.n	8002714 <TIM_TI1_SetConfig+0x50>
 8002734:	40010000 	.word	0x40010000

08002738 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef* sConfig, uint32_t Channel)
{
 8002738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
  
  __HAL_LOCK(htim);
 800273a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef* sConfig, uint32_t Channel)
{
 800273e:	4605      	mov	r5, r0
 8002740:	460c      	mov	r4, r1
 8002742:	2002      	movs	r0, #2
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
  
  __HAL_LOCK(htim);
 8002744:	2b01      	cmp	r3, #1
 8002746:	d07f      	beq.n	8002848 <HAL_TIM_IC_ConfigChannel+0x110>
 8002748:	2301      	movs	r3, #1
  
  htim->State = HAL_TIM_STATE_BUSY;
 800274a:	f885 0039 	strb.w	r0, [r5, #57]	; 0x39
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
  
  __HAL_LOCK(htim);
 800274e:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
  
  if (Channel == TIM_CHANNEL_1)
 8002752:	b972      	cbnz	r2, 8002772 <HAL_TIM_IC_ConfigChannel+0x3a>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002754:	68cb      	ldr	r3, [r1, #12]
 8002756:	6828      	ldr	r0, [r5, #0]
 8002758:	c906      	ldmia	r1, {r1, r2}
 800275a:	f7ff ffb3 	bl	80026c4 <TIM_TI1_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800275e:	682b      	ldr	r3, [r5, #0]
 8002760:	699a      	ldr	r2, [r3, #24]
 8002762:	f022 020c 	bic.w	r2, r2, #12
 8002766:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002768:	68a2      	ldr	r2, [r4, #8]
 800276a:	6999      	ldr	r1, [r3, #24]
 800276c:	430a      	orrs	r2, r1
 800276e:	619a      	str	r2, [r3, #24]
 8002770:	e064      	b.n	800283c <HAL_TIM_IC_ConfigChannel+0x104>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002772:	2a04      	cmp	r2, #4
 8002774:	688e      	ldr	r6, [r1, #8]
 8002776:	682b      	ldr	r3, [r5, #0]
 8002778:	68e0      	ldr	r0, [r4, #12]
 800277a:	e891 4002 	ldmia.w	r1, {r1, lr}
 800277e:	d11f      	bne.n	80027c0 <HAL_TIM_IC_ConfigChannel+0x88>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002780:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
  tmpccmr1 |= (TIM_ICSelection << 8);

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12) & TIM_CCMR1_IC2F);
 8002782:	0300      	lsls	r0, r0, #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002784:	0109      	lsls	r1, r1, #4
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002786:	f022 0210 	bic.w	r2, r2, #16
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
  tmpccmr1 |= (TIM_ICSelection << 8);

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12) & TIM_CCMR1_IC2F);
 800278a:	b280      	uxth	r0, r0

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800278c:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002790:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002792:	699c      	ldr	r4, [r3, #24]
  tmpccer = TIMx->CCER;
 8002794:	6a1f      	ldr	r7, [r3, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002796:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8);
 800279a:	ea44 220e 	orr.w	r2, r4, lr, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800279e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12) & TIM_CCMR1_IC2F);
 80027a2:	4310      	orrs	r0, r2

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027a4:	f027 02a0 	bic.w	r2, r7, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80027a8:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027aa:	6198      	str	r0, [r3, #24]
  TIMx->CCER = tmpccer;
 80027ac:	6219      	str	r1, [r3, #32]
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);
               
    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80027ae:	699a      	ldr	r2, [r3, #24]
 80027b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80027b4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8);
 80027b6:	699a      	ldr	r2, [r3, #24]
 80027b8:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 80027bc:	619e      	str	r6, [r3, #24]
 80027be:	e03d      	b.n	800283c <HAL_TIM_IC_ConfigChannel+0x104>
  }
  else if (Channel == TIM_CHANNEL_3)
 80027c0:	2a08      	cmp	r2, #8
{
  uint32_t tmpccmr2 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027c2:	6a1a      	ldr	r2, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8);
  }
  else if (Channel == TIM_CHANNEL_3)
 80027c4:	d11c      	bne.n	8002800 <HAL_TIM_IC_ConfigChannel+0xc8>
{
  uint32_t tmpccmr2 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
  tmpccmr2 |= TIM_ICSelection;

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4) & TIM_CCMR2_IC3F);
 80027ca:	0100      	lsls	r0, r0, #4

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80027cc:	0209      	lsls	r1, r1, #8
{
  uint32_t tmpccmr2 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027ce:	621a      	str	r2, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
  tmpccmr2 |= TIM_ICSelection;

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4) & TIM_CCMR2_IC3F);
 80027d0:	b2c0      	uxtb	r0, r0
  uint32_t tmpccmr2 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
  tmpccmr2 = TIMx->CCMR2;
 80027d2:	69dc      	ldr	r4, [r3, #28]
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4) & TIM_CCMR2_IC3F);

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80027d4:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  uint32_t tmpccer = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
 80027d8:	6a1f      	ldr	r7, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80027da:	f024 0403 	bic.w	r4, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 80027de:	ea4e 0204 	orr.w	r2, lr, r4

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80027e2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4) & TIM_CCMR2_IC3F);
 80027e6:	4310      	orrs	r0, r2

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80027e8:	f427 6220 	bic.w	r2, r7, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80027ec:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80027ee:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer;
 80027f0:	6219      	str	r1, [r3, #32]
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80027f2:	69da      	ldr	r2, [r3, #28]
 80027f4:	f022 020c 	bic.w	r2, r2, #12
 80027f8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80027fa:	69da      	ldr	r2, [r3, #28]
 80027fc:	4316      	orrs	r6, r2
 80027fe:	e01c      	b.n	800283a <HAL_TIM_IC_ConfigChannel+0x102>
{
  uint32_t tmpccmr2 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002800:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
  tmpccmr2 |= (TIM_ICSelection << 8);

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12) & TIM_CCMR2_IC4F);
 8002804:	0300      	lsls	r0, r0, #12

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002806:	0309      	lsls	r1, r1, #12
{
  uint32_t tmpccmr2 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002808:	621a      	str	r2, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
  tmpccmr2 |= (TIM_ICSelection << 8);

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12) & TIM_CCMR2_IC4F);
 800280a:	b280      	uxth	r0, r0
  uint32_t tmpccmr2 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
  tmpccmr2 = TIMx->CCMR2;
 800280c:	69dc      	ldr	r4, [r3, #28]
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12) & TIM_CCMR2_IC4F);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800280e:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  uint32_t tmpccer = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
 8002812:	6a1f      	ldr	r7, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002814:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8);
 8002818:	ea44 220e 	orr.w	r2, r4, lr, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800281c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12) & TIM_CCMR2_IC4F);
 8002820:	4310      	orrs	r0, r2

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002822:	f427 4220 	bic.w	r2, r7, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002826:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002828:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 800282a:	6219      	str	r1, [r3, #32]
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800282c:	69da      	ldr	r2, [r3, #28]
 800282e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002832:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8);
 8002834:	69da      	ldr	r2, [r3, #28]
 8002836:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 800283a:	61de      	str	r6, [r3, #28]
  }
  
  htim->State = HAL_TIM_STATE_READY;
 800283c:	2301      	movs	r3, #1
    
  __HAL_UNLOCK(htim);
 800283e:	2000      	movs	r0, #0

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8);
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8002840:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 8002844:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  
  return HAL_OK; 
}
 8002848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800284a <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800284a:	2301      	movs	r3, #1

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800284c:	408a      	lsls	r2, r1
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800284e:	408b      	lsls	r3, r1
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002850:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002852:	6a04      	ldr	r4, [r0, #32]
 8002854:	ea24 0303 	bic.w	r3, r4, r3
 8002858:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800285a:	6a03      	ldr	r3, [r0, #32]
 800285c:	ea42 0103 	orr.w	r1, r2, r3
 8002860:	6201      	str	r1, [r0, #32]
 8002862:	bd10      	pop	{r4, pc}

08002864 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002864:	b510      	push	{r4, lr}
 8002866:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002868:	2201      	movs	r2, #1
 800286a:	6800      	ldr	r0, [r0, #0]
 800286c:	f7ff ffed 	bl	800284a <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8002870:	6823      	ldr	r3, [r4, #0]
 8002872:	4a08      	ldr	r2, [pc, #32]	; (8002894 <HAL_TIM_PWM_Start+0x30>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d003      	beq.n	8002880 <HAL_TIM_PWM_Start+0x1c>
 8002878:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800287c:	4293      	cmp	r3, r2
 800287e:	d103      	bne.n	8002888 <HAL_TIM_PWM_Start+0x24>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002880:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002882:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002886:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002888:	681a      	ldr	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
} 
 800288a:	2000      	movs	r0, #0
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800288c:	f042 0201 	orr.w	r2, r2, #1
 8002890:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
} 
 8002892:	bd10      	pop	{r4, pc}
 8002894:	40010000 	.word	0x40010000

08002898 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002898:	6a03      	ldr	r3, [r0, #32]
 800289a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800289e:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80028a0:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028a2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80028a4:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80028a6:	6d44      	ldr	r4, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80028a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028ac:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2; 
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80028ae:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80028b2:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028b6:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 80028b8:	688d      	ldr	r5, [r1, #8]
 80028ba:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80028be:	4d09      	ldr	r5, [pc, #36]	; (80028e4 <TIM_OC5_SetConfig+0x4c>)
 80028c0:	42a8      	cmp	r0, r5
 80028c2:	d003      	beq.n	80028cc <TIM_OC5_SetConfig+0x34>
 80028c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80028c8:	42a8      	cmp	r0, r5
 80028ca:	d104      	bne.n	80028d6 <TIM_OC5_SetConfig+0x3e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80028cc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 80028d0:	694d      	ldr	r5, [r1, #20]
 80028d2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028d6:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80028d8:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80028da:	6544      	str	r4, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80028dc:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80028de:	6203      	str	r3, [r0, #32]
 80028e0:	bd30      	pop	{r4, r5, pc}
 80028e2:	bf00      	nop
 80028e4:	40010000 	.word	0x40010000

080028e8 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80028e8:	6a03      	ldr	r3, [r0, #32]
 80028ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028ee:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80028f0:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028f2:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80028f4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80028f6:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80028f8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx = TIMx->CCMR3;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80028fc:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2; 
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80028fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002906:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 800290a:	688d      	ldr	r5, [r1, #8]
 800290c:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002910:	4d08      	ldr	r5, [pc, #32]	; (8002934 <TIM_OC6_SetConfig+0x4c>)
 8002912:	42a8      	cmp	r0, r5
 8002914:	d003      	beq.n	800291e <TIM_OC6_SetConfig+0x36>
 8002916:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800291a:	42a8      	cmp	r0, r5
 800291c:	d104      	bne.n	8002928 <TIM_OC6_SetConfig+0x40>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800291e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8002922:	694d      	ldr	r5, [r1, #20]
 8002924:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002928:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800292a:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800292c:	684b      	ldr	r3, [r1, #4]
 800292e:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002930:	6202      	str	r2, [r0, #32]
 8002932:	bd30      	pop	{r4, r5, pc}
 8002934:	40010000 	.word	0x40010000

08002938 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 8002938:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800293a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 800293e:	4604      	mov	r4, r0
 8002940:	460d      	mov	r5, r1
 8002942:	2002      	movs	r0, #2
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002944:	2b01      	cmp	r3, #1
 8002946:	d07b      	beq.n	8002a40 <HAL_TIM_PWM_ConfigChannel+0x108>
 8002948:	2301      	movs	r3, #1
  
  htim->State = HAL_TIM_STATE_BUSY;
    
  switch (Channel)
 800294a:	2a08      	cmp	r2, #8
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
  
  htim->State = HAL_TIM_STATE_BUSY;
 800294c:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002950:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
    
  switch (Channel)
 8002954:	d03c      	beq.n	80029d0 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002956:	d813      	bhi.n	8002980 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002958:	b34a      	cbz	r2, 80029ae <HAL_TIM_PWM_ConfigChannel+0x76>
 800295a:	2a04      	cmp	r2, #4
 800295c:	d16a      	bne.n	8002a34 <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800295e:	6820      	ldr	r0, [r4, #0]
 8002960:	f7ff fe20 	bl	80025a4 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002964:	6823      	ldr	r3, [r4, #0]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002966:	6929      	ldr	r1, [r5, #16]
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002968:	699a      	ldr	r2, [r3, #24]
 800296a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800296e:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002970:	699a      	ldr	r2, [r3, #24]
 8002972:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002976:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002978:	699a      	ldr	r2, [r3, #24]
 800297a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800297e:	e025      	b.n	80029cc <HAL_TIM_PWM_ConfigChannel+0x94>
  /* Check input state */
  __HAL_LOCK(htim);
  
  htim->State = HAL_TIM_STATE_BUSY;
    
  switch (Channel)
 8002980:	2a10      	cmp	r2, #16
 8002982:	d036      	beq.n	80029f2 <HAL_TIM_PWM_ConfigChannel+0xba>
 8002984:	2a14      	cmp	r2, #20
 8002986:	d044      	beq.n	8002a12 <HAL_TIM_PWM_ConfigChannel+0xda>
 8002988:	2a0c      	cmp	r2, #12
 800298a:	d153      	bne.n	8002a34 <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800298c:	6820      	ldr	r0, [r4, #0]
 800298e:	f7ff fe6f 	bl	8002670 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002992:	6823      	ldr	r3, [r4, #0]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8002994:	6929      	ldr	r1, [r5, #16]
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002996:	69da      	ldr	r2, [r3, #28]
 8002998:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800299c:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800299e:	69da      	ldr	r2, [r3, #28]
 80029a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 80029a6:	69da      	ldr	r2, [r3, #28]
 80029a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80029ac:	e01f      	b.n	80029ee <HAL_TIM_PWM_ConfigChannel+0xb6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029ae:	6820      	ldr	r0, [r4, #0]
 80029b0:	f7ff fdca 	bl	8002548 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029b4:	6823      	ldr	r3, [r4, #0]
 80029b6:	699a      	ldr	r2, [r3, #24]
 80029b8:	f042 0208 	orr.w	r2, r2, #8
 80029bc:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029be:	699a      	ldr	r2, [r3, #24]
 80029c0:	f022 0204 	bic.w	r2, r2, #4
 80029c4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029c6:	692a      	ldr	r2, [r5, #16]
 80029c8:	6999      	ldr	r1, [r3, #24]
 80029ca:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80029cc:	619a      	str	r2, [r3, #24]
    }
    break;
 80029ce:	e031      	b.n	8002a34 <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029d0:	6820      	ldr	r0, [r4, #0]
 80029d2:	f7ff fe1b 	bl	800260c <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029d6:	6823      	ldr	r3, [r4, #0]
 80029d8:	69da      	ldr	r2, [r3, #28]
 80029da:	f042 0208 	orr.w	r2, r2, #8
 80029de:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029e0:	69da      	ldr	r2, [r3, #28]
 80029e2:	f022 0204 	bic.w	r2, r2, #4
 80029e6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80029e8:	692a      	ldr	r2, [r5, #16]
 80029ea:	69d9      	ldr	r1, [r3, #28]
 80029ec:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 80029ee:	61da      	str	r2, [r3, #28]
    }
    break;
 80029f0:	e020      	b.n	8002a34 <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80029f2:	6820      	ldr	r0, [r4, #0]
 80029f4:	f7ff ff50 	bl	8002898 <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80029f8:	6823      	ldr	r3, [r4, #0]
 80029fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029fc:	f042 0208 	orr.w	r2, r2, #8
 8002a00:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002a02:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a04:	f022 0204 	bic.w	r2, r2, #4
 8002a08:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8002a0a:	692a      	ldr	r2, [r5, #16]
 8002a0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	e00f      	b.n	8002a32 <HAL_TIM_PWM_ConfigChannel+0xfa>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002a12:	6820      	ldr	r0, [r4, #0]
 8002a14:	f7ff ff68 	bl	80028e8 <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002a18:	6823      	ldr	r3, [r4, #0]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8002a1a:	6909      	ldr	r1, [r1, #16]
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002a1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a22:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002a24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8002a2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a2e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002a32:	655a      	str	r2, [r3, #84]	; 0x54
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8002a34:	2301      	movs	r3, #1
    
  __HAL_UNLOCK(htim);
 8002a36:	2000      	movs	r0, #0
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8002a38:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 8002a3c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 8002a40:	bd38      	pop	{r3, r4, r5, pc}
	...

08002a44 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002a44:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002a48:	2b01      	cmp	r3, #1
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002a4a:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002a4c:	d01c      	beq.n	8002a88 <HAL_TIMEx_MasterConfigSynchronization+0x44>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a4e:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a50:	4c0e      	ldr	r4, [pc, #56]	; (8002a8c <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  
  /* Check input state */
  __HAL_LOCK(htim);

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a52:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a54:	42a2      	cmp	r2, r4

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a56:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a58:	d003      	beq.n	8002a62 <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 8002a5a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002a5e:	42a2      	cmp	r2, r4
 8002a60:	d103      	bne.n	8002a6a <HAL_TIMEx_MasterConfigSynchronization+0x26>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002a62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002a66:	684c      	ldr	r4, [r1, #4]
 8002a68:	4323      	orrs	r3, r4
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a6a:	680c      	ldr	r4, [r1, #0]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a70:	6889      	ldr	r1, [r1, #8]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a72:	4323      	orrs	r3, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002a74:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a78:	6053      	str	r3, [r2, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a7a:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8002a7c:	2300      	movs	r3, #0
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002a7e:	6091      	str	r1, [r2, #8]

  __HAL_UNLOCK(htim);
 8002a80:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 8002a84:	4618      	mov	r0, r3
 8002a86:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002a88:	2002      	movs	r0, #2
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
  
  return HAL_OK;
} 
 8002a8a:	bd30      	pop	{r4, r5, pc}
 8002a8c:	40010000 	.word	0x40010000

08002a90 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a94:	9d06      	ldr	r5, [sp, #24]
 8002a96:	4604      	mov	r4, r0
 8002a98:	460f      	mov	r7, r1
 8002a9a:	4616      	mov	r6, r2
 8002a9c:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a9e:	6821      	ldr	r1, [r4, #0]
 8002aa0:	69ca      	ldr	r2, [r1, #28]
 8002aa2:	ea37 0302 	bics.w	r3, r7, r2
 8002aa6:	bf0c      	ite	eq
 8002aa8:	2201      	moveq	r2, #1
 8002aaa:	2200      	movne	r2, #0
 8002aac:	42b2      	cmp	r2, r6
 8002aae:	d11d      	bne.n	8002aec <UART_WaitOnFlagUntilTimeout+0x5c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002ab0:	1c6b      	adds	r3, r5, #1
 8002ab2:	d0f5      	beq.n	8002aa0 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8002ab4:	b99d      	cbnz	r5, 8002ade <UART_WaitOnFlagUntilTimeout+0x4e>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ab6:	6823      	ldr	r3, [r4, #0]

        huart->gState = HAL_UART_STATE_READY;
        huart->RxState = HAL_UART_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ab8:	2003      	movs	r0, #3
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ac0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	f022 0201 	bic.w	r2, r2, #1
 8002ac8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002aca:	2320      	movs	r3, #32
 8002acc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002ad0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8002ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8002ade:	f7fe fa5d 	bl	8000f9c <HAL_GetTick>
 8002ae2:	ebc8 0000 	rsb	r0, r8, r0
 8002ae6:	4285      	cmp	r5, r0
 8002ae8:	d8d9      	bhi.n	8002a9e <UART_WaitOnFlagUntilTimeout+0xe>
 8002aea:	e7e4      	b.n	8002ab6 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002aec:	2000      	movs	r0, #0
}
 8002aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002af2 <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002af2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002af6:	461f      	mov	r7, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002af8:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002afc:	4604      	mov	r4, r0
 8002afe:	460d      	mov	r5, r1
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002b00:	2b20      	cmp	r3, #32
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b02:	4690      	mov	r8, r2
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002b04:	d14b      	bne.n	8002b9e <HAL_UART_Transmit+0xac>
  {
    if((pData == NULL ) || (Size == 0U))
 8002b06:	2900      	cmp	r1, #0
 8002b08:	d047      	beq.n	8002b9a <HAL_UART_Transmit+0xa8>
 8002b0a:	2a00      	cmp	r2, #0
 8002b0c:	d045      	beq.n	8002b9a <HAL_UART_Transmit+0xa8>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b0e:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d043      	beq.n	8002b9e <HAL_UART_Transmit+0xac>
 8002b16:	2301      	movs	r3, #1
 8002b18:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b20:	2321      	movs	r3, #33	; 0x21
 8002b22:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002b26:	f7fe fa39 	bl	8000f9c <HAL_GetTick>
 8002b2a:	4606      	mov	r6, r0

    huart->TxXferSize = Size;
 8002b2c:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8002b30:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8002b34:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002b38:	b292      	uxth	r2, r2
 8002b3a:	b302      	cbz	r2, 8002b7e <HAL_UART_Transmit+0x8c>
    {
      huart->TxXferCount--;
 8002b3c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b40:	2200      	movs	r2, #0
 8002b42:	9700      	str	r7, [sp, #0]
 8002b44:	2180      	movs	r1, #128	; 0x80

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0U)
    {
      huart->TxXferCount--;
 8002b46:	3b01      	subs	r3, #1
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b48:	4620      	mov	r0, r4

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0U)
    {
      huart->TxXferCount--;
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b50:	4633      	mov	r3, r6
 8002b52:	f7ff ff9d 	bl	8002a90 <UART_WaitOnFlagUntilTimeout>
 8002b56:	b108      	cbz	r0, 8002b5c <HAL_UART_Transmit+0x6a>
      {
        return HAL_TIMEOUT;
 8002b58:	2003      	movs	r0, #3
 8002b5a:	e021      	b.n	8002ba0 <HAL_UART_Transmit+0xae>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b5c:	68a3      	ldr	r3, [r4, #8]
 8002b5e:	6822      	ldr	r2, [r4, #0]
 8002b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b64:	d107      	bne.n	8002b76 <HAL_UART_Transmit+0x84>
 8002b66:	6923      	ldr	r3, [r4, #16]
 8002b68:	b92b      	cbnz	r3, 8002b76 <HAL_UART_Transmit+0x84>
      {
        tmp = (uint16_t*) pData;
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002b6a:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b72:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2;
 8002b74:	e7de      	b.n	8002b34 <HAL_UART_Transmit+0x42>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002b76:	782b      	ldrb	r3, [r5, #0]
 8002b78:	3501      	adds	r5, #1
 8002b7a:	6293      	str	r3, [r2, #40]	; 0x28
 8002b7c:	e7da      	b.n	8002b34 <HAL_UART_Transmit+0x42>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b7e:	9700      	str	r7, [sp, #0]
 8002b80:	4633      	mov	r3, r6
 8002b82:	2140      	movs	r1, #64	; 0x40
 8002b84:	4620      	mov	r0, r4
 8002b86:	f7ff ff83 	bl	8002a90 <UART_WaitOnFlagUntilTimeout>
 8002b8a:	2800      	cmp	r0, #0
 8002b8c:	d1e4      	bne.n	8002b58 <HAL_UART_Transmit+0x66>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b8e:	2320      	movs	r3, #32

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b90:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b94:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    return HAL_OK;
 8002b98:	e002      	b.n	8002ba0 <HAL_UART_Transmit+0xae>
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0U))
    {
      return  HAL_ERROR;
 8002b9a:	2001      	movs	r0, #1
 8002b9c:	e000      	b.n	8002ba0 <HAL_UART_Transmit+0xae>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002b9e:	2002      	movs	r0, #2
  }
}
 8002ba0:	b002      	add	sp, #8
 8002ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002ba8 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart: uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ba8:	b538      	push	{r3, r4, r5, lr}
 8002baa:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002bac:	6805      	ldr	r5, [r0, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bae:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002bb0:	6922      	ldr	r2, [r4, #16]
 8002bb2:	68a1      	ldr	r1, [r4, #8]
 8002bb4:	6828      	ldr	r0, [r5, #0]
 8002bb6:	4311      	orrs	r1, r2
 8002bb8:	6962      	ldr	r2, [r4, #20]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	ea42 0103 	orr.w	r1, r2, r3
 8002bc0:	4a88      	ldr	r2, [pc, #544]	; (8002de4 <UART_SetConfig+0x23c>)
 8002bc2:	4002      	ands	r2, r0
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002bc4:	69a0      	ldr	r0, [r4, #24]
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	602a      	str	r2, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bca:	686a      	ldr	r2, [r5, #4]
 8002bcc:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8002bd0:	68e2      	ldr	r2, [r4, #12]
 8002bd2:	430a      	orrs	r2, r1
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002bd4:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bd6:	606a      	str	r2, [r5, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002bd8:	4301      	orrs	r1, r0
 8002bda:	68aa      	ldr	r2, [r5, #8]
 8002bdc:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002be0:	430a      	orrs	r2, r1
 8002be2:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002be4:	4a80      	ldr	r2, [pc, #512]	; (8002de8 <UART_SetConfig+0x240>)
 8002be6:	4295      	cmp	r5, r2
 8002be8:	d107      	bne.n	8002bfa <UART_SetConfig+0x52>
 8002bea:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8002bee:	497f      	ldr	r1, [pc, #508]	; (8002dec <UART_SetConfig+0x244>)
 8002bf0:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002bf4:	f002 0203 	and.w	r2, r2, #3
 8002bf8:	e009      	b.n	8002c0e <UART_SetConfig+0x66>
 8002bfa:	4a7d      	ldr	r2, [pc, #500]	; (8002df0 <UART_SetConfig+0x248>)
 8002bfc:	4295      	cmp	r5, r2
 8002bfe:	d10b      	bne.n	8002c18 <UART_SetConfig+0x70>
 8002c00:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8002c04:	497b      	ldr	r1, [pc, #492]	; (8002df4 <UART_SetConfig+0x24c>)
 8002c06:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002c0a:	f002 020c 	and.w	r2, r2, #12

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c12:	5c8a      	ldrb	r2, [r1, r2]
 8002c14:	d073      	beq.n	8002cfe <UART_SetConfig+0x156>
 8002c16:	e0b6      	b.n	8002d86 <UART_SetConfig+0x1de>
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c18:	4a77      	ldr	r2, [pc, #476]	; (8002df8 <UART_SetConfig+0x250>)
 8002c1a:	4295      	cmp	r5, r2
 8002c1c:	d10d      	bne.n	8002c3a <UART_SetConfig+0x92>
 8002c1e:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8002c22:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002c26:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8002c2a:	2a10      	cmp	r2, #16
 8002c2c:	f000 8086 	beq.w	8002d3c <UART_SetConfig+0x194>
 8002c30:	d95d      	bls.n	8002cee <UART_SetConfig+0x146>
 8002c32:	2a20      	cmp	r2, #32
 8002c34:	d078      	beq.n	8002d28 <UART_SetConfig+0x180>
 8002c36:	2a30      	cmp	r2, #48	; 0x30
 8002c38:	e00e      	b.n	8002c58 <UART_SetConfig+0xb0>
 8002c3a:	4a70      	ldr	r2, [pc, #448]	; (8002dfc <UART_SetConfig+0x254>)
 8002c3c:	4295      	cmp	r5, r2
 8002c3e:	d10d      	bne.n	8002c5c <UART_SetConfig+0xb4>
 8002c40:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 8002c44:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002c48:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8002c4c:	2a40      	cmp	r2, #64	; 0x40
 8002c4e:	d075      	beq.n	8002d3c <UART_SetConfig+0x194>
 8002c50:	d94d      	bls.n	8002cee <UART_SetConfig+0x146>
 8002c52:	2a80      	cmp	r2, #128	; 0x80
 8002c54:	d068      	beq.n	8002d28 <UART_SetConfig+0x180>
 8002c56:	2ac0      	cmp	r2, #192	; 0xc0
 8002c58:	d07c      	beq.n	8002d54 <UART_SetConfig+0x1ac>
 8002c5a:	e087      	b.n	8002d6c <UART_SetConfig+0x1c4>
 8002c5c:	4a68      	ldr	r2, [pc, #416]	; (8002e00 <UART_SetConfig+0x258>)
 8002c5e:	4295      	cmp	r5, r2
 8002c60:	d10f      	bne.n	8002c82 <UART_SetConfig+0xda>
 8002c62:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 8002c66:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002c6a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002c6e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002c72:	d063      	beq.n	8002d3c <UART_SetConfig+0x194>
 8002c74:	d93b      	bls.n	8002cee <UART_SetConfig+0x146>
 8002c76:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002c7a:	d055      	beq.n	8002d28 <UART_SetConfig+0x180>
 8002c7c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002c80:	e7ea      	b.n	8002c58 <UART_SetConfig+0xb0>
 8002c82:	4a60      	ldr	r2, [pc, #384]	; (8002e04 <UART_SetConfig+0x25c>)
 8002c84:	4295      	cmp	r5, r2
 8002c86:	d112      	bne.n	8002cae <UART_SetConfig+0x106>
 8002c88:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 8002c8c:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002c90:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8002c94:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002c98:	d050      	beq.n	8002d3c <UART_SetConfig+0x194>
 8002c9a:	d802      	bhi.n	8002ca2 <UART_SetConfig+0xfa>
 8002c9c:	2a00      	cmp	r2, #0
 8002c9e:	d03d      	beq.n	8002d1c <UART_SetConfig+0x174>
 8002ca0:	e064      	b.n	8002d6c <UART_SetConfig+0x1c4>
 8002ca2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002ca6:	d03f      	beq.n	8002d28 <UART_SetConfig+0x180>
 8002ca8:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8002cac:	e7d4      	b.n	8002c58 <UART_SetConfig+0xb0>
 8002cae:	4a56      	ldr	r2, [pc, #344]	; (8002e08 <UART_SetConfig+0x260>)
 8002cb0:	4295      	cmp	r5, r2
 8002cb2:	d10f      	bne.n	8002cd4 <UART_SetConfig+0x12c>
 8002cb4:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8002cb8:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002cbc:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8002cc0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002cc4:	d03a      	beq.n	8002d3c <UART_SetConfig+0x194>
 8002cc6:	d912      	bls.n	8002cee <UART_SetConfig+0x146>
 8002cc8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002ccc:	d02c      	beq.n	8002d28 <UART_SetConfig+0x180>
 8002cce:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8002cd2:	e7c1      	b.n	8002c58 <UART_SetConfig+0xb0>
 8002cd4:	4a4d      	ldr	r2, [pc, #308]	; (8002e0c <UART_SetConfig+0x264>)
 8002cd6:	4295      	cmp	r5, r2
 8002cd8:	d148      	bne.n	8002d6c <UART_SetConfig+0x1c4>
 8002cda:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 8002cde:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002ce2:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8002ce6:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002cea:	d027      	beq.n	8002d3c <UART_SetConfig+0x194>
 8002cec:	d801      	bhi.n	8002cf2 <UART_SetConfig+0x14a>
 8002cee:	b17a      	cbz	r2, 8002d10 <UART_SetConfig+0x168>
 8002cf0:	e03c      	b.n	8002d6c <UART_SetConfig+0x1c4>
 8002cf2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002cf6:	d017      	beq.n	8002d28 <UART_SetConfig+0x180>
 8002cf8:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8002cfc:	e7ac      	b.n	8002c58 <UART_SetConfig+0xb0>

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  {
    switch (clocksource)
 8002cfe:	2a08      	cmp	r2, #8
 8002d00:	d837      	bhi.n	8002d72 <UART_SetConfig+0x1ca>
 8002d02:	e8df f002 	tbb	[pc, r2]
 8002d06:	0e08      	.short	0x0e08
 8002d08:	361e3614 	.word	0x361e3614
 8002d0c:	3636      	.short	0x3636
 8002d0e:	2a          	.byte	0x2a
 8002d0f:	00          	.byte	0x00

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d14:	d140      	bne.n	8002d98 <UART_SetConfig+0x1f0>
  {
    switch (clocksource)
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002d16:	f7fe ff53 	bl	8001bc0 <HAL_RCC_GetPCLK1Freq>
 8002d1a:	e014      	b.n	8002d46 <UART_SetConfig+0x19e>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d20:	d13d      	bne.n	8002d9e <UART_SetConfig+0x1f6>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002d22:	f7fe ff65 	bl	8001bf0 <HAL_RCC_GetPCLK2Freq>
 8002d26:	e00e      	b.n	8002d46 <UART_SetConfig+0x19e>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d2c:	d13a      	bne.n	8002da4 <UART_SetConfig+0x1fc>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002d2e:	6860      	ldr	r0, [r4, #4]
 8002d30:	0842      	lsrs	r2, r0, #1
 8002d32:	f102 73f4 	add.w	r3, r2, #31981568	; 0x1e80000
 8002d36:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002d3a:	e012      	b.n	8002d62 <UART_SetConfig+0x1ba>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d40:	d139      	bne.n	8002db6 <UART_SetConfig+0x20e>
      break;
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002d42:	f7fe fe4f 	bl	80019e4 <HAL_RCC_GetSysClockFreq>
 8002d46:	6863      	ldr	r3, [r4, #4]
 8002d48:	085a      	lsrs	r2, r3, #1
 8002d4a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8002d4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d52:	e008      	b.n	8002d66 <UART_SetConfig+0x1be>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d58:	d137      	bne.n	8002dca <UART_SetConfig+0x222>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002d5a:	6860      	ldr	r0, [r4, #4]
 8002d5c:	0843      	lsrs	r3, r0, #1
 8002d5e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002d62:	fbb3 f3f0 	udiv	r3, r3, r0
 8002d66:	b29b      	uxth	r3, r3
{
  uint32_t tmpreg                     = 0x00000000U;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000U;
  uint16_t usartdiv                   = 0x0000U;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d68:	2000      	movs	r0, #0
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
 8002d6a:	e004      	b.n	8002d76 <UART_SetConfig+0x1ce>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d70:	d135      	bne.n	8002dde <UART_SetConfig+0x236>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002d72:	2001      	movs	r0, #1
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg                     = 0x00000000U;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000U;
  uint16_t usartdiv                   = 0x0000U;
 8002d74:	2300      	movs	r3, #0
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d76:	f3c3 0142 	ubfx	r1, r3, #1, #3
 8002d7a:	f023 030f 	bic.w	r3, r3, #15
    huart->Instance->BRR = brrtemp;
 8002d7e:	6822      	ldr	r2, [r4, #0]
 8002d80:	430b      	orrs	r3, r1
 8002d82:	60d3      	str	r3, [r2, #12]
 8002d84:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    switch (clocksource)
 8002d86:	2a08      	cmp	r2, #8
 8002d88:	d829      	bhi.n	8002dde <UART_SetConfig+0x236>
 8002d8a:	e8df f002 	tbb	[pc, r2]
 8002d8e:	0805      	.short	0x0805
 8002d90:	2814280b 	.word	0x2814280b
 8002d94:	2828      	.short	0x2828
 8002d96:	1e          	.byte	0x1e
 8002d97:	00          	.byte	0x00
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002d98:	f7fe ff12 	bl	8001bc0 <HAL_RCC_GetPCLK1Freq>
 8002d9c:	e00d      	b.n	8002dba <UART_SetConfig+0x212>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002d9e:	f7fe ff27 	bl	8001bf0 <HAL_RCC_GetPCLK2Freq>
 8002da2:	e00a      	b.n	8002dba <UART_SetConfig+0x212>
      break;
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002da4:	6861      	ldr	r1, [r4, #4]
 8002da6:	084a      	lsrs	r2, r1, #1
 8002da8:	f502 0374 	add.w	r3, r2, #15990784	; 0xf40000
 8002dac:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002db0:	fbb3 f3f1 	udiv	r3, r3, r1
 8002db4:	e00f      	b.n	8002dd6 <UART_SetConfig+0x22e>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002db6:	f7fe fe15 	bl	80019e4 <HAL_RCC_GetSysClockFreq>
 8002dba:	6863      	ldr	r3, [r4, #4]
 8002dbc:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002dc0:	fbb0 f0f3 	udiv	r0, r0, r3
 8002dc4:	b280      	uxth	r0, r0
 8002dc6:	60e8      	str	r0, [r5, #12]
 8002dc8:	e007      	b.n	8002dda <UART_SetConfig+0x232>
      break;
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002dca:	6862      	ldr	r2, [r4, #4]
 8002dcc:	0853      	lsrs	r3, r2, #1
 8002dce:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002dd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	60eb      	str	r3, [r5, #12]
{
  uint32_t tmpreg                     = 0x00000000U;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000U;
  uint16_t usartdiv                   = 0x0000U;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dda:	2000      	movs	r0, #0
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
 8002ddc:	bd38      	pop	{r3, r4, r5, pc}
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002dde:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 8002de0:	bd38      	pop	{r3, r4, r5, pc}
 8002de2:	bf00      	nop
 8002de4:	efff69f3 	.word	0xefff69f3
 8002de8:	40011000 	.word	0x40011000
 8002dec:	080065c0 	.word	0x080065c0
 8002df0:	40004400 	.word	0x40004400
 8002df4:	080065c4 	.word	0x080065c4
 8002df8:	40004800 	.word	0x40004800
 8002dfc:	40004c00 	.word	0x40004c00
 8002e00:	40005000 	.word	0x40005000
 8002e04:	40011400 	.word	0x40011400
 8002e08:	40007800 	.word	0x40007800
 8002e0c:	40007c00 	.word	0x40007c00

08002e10 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e10:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002e12:	07da      	lsls	r2, r3, #31
  * @brief Configure the UART peripheral advanced features
  * @param huart: uart handle
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e14:	b510      	push	{r4, lr}
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e16:	d506      	bpl.n	8002e26 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e18:	6804      	ldr	r4, [r0, #0]
 8002e1a:	6862      	ldr	r2, [r4, #4]
 8002e1c:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8002e20:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002e22:	430a      	orrs	r2, r1
 8002e24:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e26:	079c      	lsls	r4, r3, #30
 8002e28:	d506      	bpl.n	8002e38 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e2a:	6804      	ldr	r4, [r0, #0]
 8002e2c:	6862      	ldr	r2, [r4, #4]
 8002e2e:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8002e32:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002e34:	430a      	orrs	r2, r1
 8002e36:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e38:	0759      	lsls	r1, r3, #29
 8002e3a:	d506      	bpl.n	8002e4a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e3c:	6804      	ldr	r4, [r0, #0]
 8002e3e:	6862      	ldr	r2, [r4, #4]
 8002e40:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8002e44:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002e46:	430a      	orrs	r2, r1
 8002e48:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e4a:	071a      	lsls	r2, r3, #28
 8002e4c:	d506      	bpl.n	8002e5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e4e:	6804      	ldr	r4, [r0, #0]
 8002e50:	6862      	ldr	r2, [r4, #4]
 8002e52:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8002e56:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e5c:	06dc      	lsls	r4, r3, #27
 8002e5e:	d506      	bpl.n	8002e6e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e60:	6804      	ldr	r4, [r0, #0]
 8002e62:	68a2      	ldr	r2, [r4, #8]
 8002e64:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8002e68:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e6e:	0699      	lsls	r1, r3, #26
 8002e70:	d506      	bpl.n	8002e80 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e72:	6804      	ldr	r4, [r0, #0]
 8002e74:	68a2      	ldr	r2, [r4, #8]
 8002e76:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8002e7a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e80:	065a      	lsls	r2, r3, #25
 8002e82:	d510      	bpl.n	8002ea6 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e84:	6801      	ldr	r1, [r0, #0]
 8002e86:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002e88:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e8a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e8e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002e92:	ea42 0204 	orr.w	r2, r2, r4
 8002e96:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e98:	d105      	bne.n	8002ea6 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e9a:	684a      	ldr	r2, [r1, #4]
 8002e9c:	f422 04c0 	bic.w	r4, r2, #6291456	; 0x600000
 8002ea0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002ea2:	4322      	orrs	r2, r4
 8002ea4:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ea6:	061b      	lsls	r3, r3, #24
 8002ea8:	d506      	bpl.n	8002eb8 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002eaa:	6801      	ldr	r1, [r0, #0]
 8002eac:	684b      	ldr	r3, [r1, #4]
 8002eae:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002eb2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	604b      	str	r3, [r1, #4]
 8002eb8:	bd10      	pop	{r4, pc}

08002eba <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002eba:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ebc:	2600      	movs	r6, #0
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ebe:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec0:	66c6      	str	r6, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002ec2:	f7fe f86b 	bl	8000f9c <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ec6:	6823      	ldr	r3, [r4, #0]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002ec8:	4605      	mov	r5, r0

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	071a      	lsls	r2, r3, #28
 8002ece:	d404      	bmi.n	8002eda <UART_CheckIdleState+0x20>
      /* Timeout Occurred */
      return HAL_TIMEOUT;
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ed0:	6823      	ldr	r3, [r4, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	075b      	lsls	r3, r3, #29
 8002ed6:	d51a      	bpl.n	8002f0e <UART_CheckIdleState+0x54>
 8002ed8:	e00d      	b.n	8002ef6 <UART_CheckIdleState+0x3c>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002eda:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ede:	4632      	mov	r2, r6
 8002ee0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	4620      	mov	r0, r4
 8002eea:	f7ff fdd1 	bl	8002a90 <UART_WaitOnFlagUntilTimeout>
 8002eee:	2800      	cmp	r0, #0
 8002ef0:	d0ee      	beq.n	8002ed0 <UART_CheckIdleState+0x16>
    {
      /* Timeout Occurred */
      return HAL_TIMEOUT;
 8002ef2:	2003      	movs	r0, #3
 8002ef4:	e013      	b.n	8002f1e <UART_CheckIdleState+0x64>
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ef6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002efa:	2200      	movs	r2, #0
 8002efc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f00:	4620      	mov	r0, r4
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	462b      	mov	r3, r5
 8002f06:	f7ff fdc3 	bl	8002a90 <UART_WaitOnFlagUntilTimeout>
 8002f0a:	2800      	cmp	r0, #0
 8002f0c:	d1f1      	bne.n	8002ef2 <UART_CheckIdleState+0x38>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8002f0e:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f10:	2000      	movs	r0, #0
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8002f12:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f16:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
 8002f1a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
}
 8002f1e:	b002      	add	sp, #8
 8002f20:	bd70      	pop	{r4, r5, r6, pc}

08002f22 <HAL_UART_Init>:
  *         parameters in the UART_InitTypeDef and creates the associated handle .
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f22:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002f24:	4604      	mov	r4, r0
 8002f26:	b360      	cbz	r0, 8002f82 <HAL_UART_Init+0x60>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002f28:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002f2c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002f30:	b91b      	cbnz	r3, 8002f3a <HAL_UART_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f32:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f36:	f000 fbdf 	bl	80036f8 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002f3a:	6822      	ldr	r2, [r4, #0]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f3c:	2324      	movs	r3, #36	; 0x24

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f3e:	4620      	mov	r0, r4

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f40:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002f44:	6813      	ldr	r3, [r2, #0]
 8002f46:	f023 0301 	bic.w	r3, r3, #1
 8002f4a:	6013      	str	r3, [r2, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f4c:	f7ff fe2c 	bl	8002ba8 <UART_SetConfig>
 8002f50:	2801      	cmp	r0, #1
 8002f52:	d016      	beq.n	8002f82 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f56:	b113      	cbz	r3, 8002f5e <HAL_UART_Init+0x3c>
  {
    UART_AdvFeatureConfig(huart);
 8002f58:	4620      	mov	r0, r4
 8002f5a:	f7ff ff59 	bl	8002e10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f5e:	6823      	ldr	r3, [r4, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f60:	4620      	mov	r0, r4
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f68:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f70:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	f042 0201 	orr.w	r2, r2, #1

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 8002f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002f7c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f7e:	f7ff bf9c 	b.w	8002eba <UART_CheckIdleState>
}
 8002f82:	2001      	movs	r0, #1
 8002f84:	bd10      	pop	{r4, pc}
	...

08002f88 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f88:	4b26      	ldr	r3, [pc, #152]	; (8003024 <SystemClock_Config+0x9c>)
 8002f8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f8c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002f90:	b510      	push	{r4, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f92:	641a      	str	r2, [r3, #64]	; 0x40
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002f94:	b0b4      	sub	sp, #208	; 0xd0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002f98:	4a23      	ldr	r2, [pc, #140]	; (8003028 <SystemClock_Config+0xa0>)
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f9a:	a807      	add	r0, sp, #28
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	9b00      	ldr	r3, [sp, #0]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002fa4:	6813      	ldr	r3, [r2, #0]
 8002fa6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002faa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fae:	6013      	str	r3, [r2, #0]
 8002fb0:	6813      	ldr	r3, [r2, #0]
 8002fb2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002fb6:	9301      	str	r3, [sp, #4]
 8002fb8:	9b01      	ldr	r3, [sp, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002fba:	2302      	movs	r3, #2
 8002fbc:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002fc2:	2310      	movs	r3, #16
 8002fc4:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fca:	f7fe fb6f 	bl	80016ac <HAL_RCC_OscConfig>
 8002fce:	4601      	mov	r1, r0
 8002fd0:	b100      	cbz	r0, 8002fd4 <SystemClock_Config+0x4c>
 8002fd2:	e7fe      	b.n	8002fd2 <SystemClock_Config+0x4a>
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fd4:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002fd6:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fd8:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002fda:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002fdc:	9006      	str	r0, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002fde:	a802      	add	r0, sp, #8
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fe0:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002fe2:	f7fe fd3d 	bl	8001a60 <HAL_RCC_ClockConfig>
 8002fe6:	b100      	cbz	r0, 8002fea <SystemClock_Config+0x62>
 8002fe8:	e7fe      	b.n	8002fe8 <SystemClock_Config+0x60>
  {
    Error_Handler();
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002fea:	2340      	movs	r3, #64	; 0x40
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002fec:	9024      	str	r0, [sp, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fee:	a813      	add	r0, sp, #76	; 0x4c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ff0:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ff2:	f7fe fe15 	bl	8001c20 <HAL_RCCEx_PeriphCLKConfig>
 8002ff6:	4604      	mov	r4, r0
 8002ff8:	b100      	cbz	r0, 8002ffc <SystemClock_Config+0x74>
 8002ffa:	e7fe      	b.n	8002ffa <SystemClock_Config+0x72>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002ffc:	f7fe fdda 	bl	8001bb4 <HAL_RCC_GetHCLKFreq>
 8003000:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003004:	fbb0 f0f3 	udiv	r0, r0, r3
 8003008:	f7fe fa34 	bl	8001474 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800300c:	2004      	movs	r0, #4
 800300e:	f7fe fa47 	bl	80014a0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003012:	4622      	mov	r2, r4
 8003014:	4621      	mov	r1, r4
 8003016:	f04f 30ff 	mov.w	r0, #4294967295
 800301a:	f7fe f9f3 	bl	8001404 <HAL_NVIC_SetPriority>
}
 800301e:	b034      	add	sp, #208	; 0xd0
 8003020:	bd10      	pop	{r4, pc}
 8003022:	bf00      	nop
 8003024:	40023800 	.word	0x40023800
 8003028:	40007000 	.word	0x40007000

0800302c <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 800302c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800302e:	b097      	sub	sp, #92	; 0x5c
  HAL_GPIO_WritePin(GPIOD, LED9_Pin|LED8_Pin|LED7_Pin|LED6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED5_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED5_Pin|LED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003030:	2400      	movs	r4, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003032:	f7fd ff9f 	bl	8000f74 <HAL_Init>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED9_Pin|LED8_Pin|LED7_Pin|LED6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED5_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED5_Pin|LED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003036:	2601      	movs	r6, #1

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* Configure the system clock */
  SystemClock_Config();
 8003038:	f7ff ffa6 	bl	8002f88 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800303c:	4b93      	ldr	r3, [pc, #588]	; (800328c <main+0x260>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED5_Pin|LED4_Pin, GPIO_PIN_RESET);
 800303e:	2106      	movs	r1, #6
 8003040:	4893      	ldr	r0, [pc, #588]	; (8003290 <main+0x264>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003042:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 8003044:	4d93      	ldr	r5, [pc, #588]	; (8003294 <main+0x268>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003046:	f042 0204 	orr.w	r2, r2, #4
 800304a:	631a      	str	r2, [r3, #48]	; 0x30
 800304c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800304e:	f002 0204 	and.w	r2, r2, #4
 8003052:	9200      	str	r2, [sp, #0]
 8003054:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003058:	f042 0201 	orr.w	r2, r2, #1
 800305c:	631a      	str	r2, [r3, #48]	; 0x30
 800305e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003060:	f002 0201 	and.w	r2, r2, #1
 8003064:	9201      	str	r2, [sp, #4]
 8003066:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800306a:	f042 0202 	orr.w	r2, r2, #2
 800306e:	631a      	str	r2, [r3, #48]	; 0x30
 8003070:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003072:	f002 0202 	and.w	r2, r2, #2
 8003076:	9202      	str	r2, [sp, #8]
 8003078:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800307a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800307c:	f042 0210 	orr.w	r2, r2, #16
 8003080:	631a      	str	r2, [r3, #48]	; 0x30
 8003082:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003084:	f002 0210 	and.w	r2, r2, #16
 8003088:	9203      	str	r2, [sp, #12]
 800308a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800308c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800308e:	f042 0208 	orr.w	r2, r2, #8
 8003092:	631a      	str	r2, [r3, #48]	; 0x30

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED5_Pin|LED4_Pin, GPIO_PIN_RESET);
 8003094:	2200      	movs	r2, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003098:	f003 0308 	and.w	r3, r3, #8
 800309c:	9304      	str	r3, [sp, #16]
 800309e:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED5_Pin|LED4_Pin, GPIO_PIN_RESET);
 80030a0:	f7fe fafc 	bl	800169c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 80030a4:	2200      	movs	r2, #0
 80030a6:	2110      	movs	r1, #16
 80030a8:	487b      	ldr	r0, [pc, #492]	; (8003298 <main+0x26c>)
 80030aa:	f7fe faf7 	bl	800169c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80030ae:	2200      	movs	r2, #0
 80030b0:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80030b4:	4879      	ldr	r0, [pc, #484]	; (800329c <main+0x270>)
 80030b6:	f7fe faf1 	bl	800169c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED9_Pin|LED8_Pin|LED7_Pin|LED6_Pin, GPIO_PIN_RESET);
 80030ba:	2200      	movs	r2, #0
 80030bc:	213c      	movs	r1, #60	; 0x3c
 80030be:	4878      	ldr	r0, [pc, #480]	; (80032a0 <main+0x274>)
 80030c0:	f7fe faec 	bl	800169c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED5_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED5_Pin|LED4_Pin;
 80030c4:	2306      	movs	r3, #6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030c6:	a909      	add	r1, sp, #36	; 0x24
 80030c8:	4871      	ldr	r0, [pc, #452]	; (8003290 <main+0x264>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED9_Pin|LED8_Pin|LED7_Pin|LED6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED5_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED5_Pin|LED4_Pin;
 80030ca:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030cc:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ce:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d0:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030d2:	f7fe f9f7 	bl	80014c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_CS_Pin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 80030d6:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 80030d8:	a909      	add	r1, sp, #36	; 0x24
 80030da:	486f      	ldr	r0, [pc, #444]	; (8003298 <main+0x26c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : GYRO_CS_Pin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 80030dc:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030de:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e0:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e2:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 80030e4:	f7fe f9ee 	bl	80014c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80030e8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ec:	a909      	add	r1, sp, #36	; 0x24
 80030ee:	486b      	ldr	r0, [pc, #428]	; (800329c <main+0x270>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80030f0:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030f2:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f4:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f6:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030f8:	f7fe f9e4 	bl	80014c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW2_Pin */
  GPIO_InitStruct.Pin = SW2_Pin;
 80030fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SW2_GPIO_Port, &GPIO_InitStruct);
 8003100:	a909      	add	r1, sp, #36	; 0x24
 8003102:	4867      	ldr	r0, [pc, #412]	; (80032a0 <main+0x274>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : SW2_Pin */
  GPIO_InitStruct.Pin = SW2_Pin;
 8003104:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003106:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003108:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(SW2_GPIO_Port, &GPIO_InitStruct);
 800310a:	f7fe f9db 	bl	80014c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 800310e:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8003110:	a909      	add	r1, sp, #36	; 0x24
 8003112:	485f      	ldr	r0, [pc, #380]	; (8003290 <main+0x264>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SW2_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8003114:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003116:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003118:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 800311a:	f7fe f9d3 	bl	80014c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED9_Pin LED8_Pin LED7_Pin LED6_Pin */
  GPIO_InitStruct.Pin = LED9_Pin|LED8_Pin|LED7_Pin|LED6_Pin;
 800311e:	233c      	movs	r3, #60	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003120:	485f      	ldr	r0, [pc, #380]	; (80032a0 <main+0x274>)
 8003122:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LED9_Pin LED8_Pin LED7_Pin LED6_Pin */
  GPIO_InitStruct.Pin = LED9_Pin|LED8_Pin|LED7_Pin|LED6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003124:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LED9_Pin LED8_Pin LED7_Pin LED6_Pin */
  GPIO_InitStruct.Pin = LED9_Pin|LED8_Pin|LED7_Pin|LED6_Pin;
 8003126:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003128:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800312a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800312c:	f7fe f9ca 	bl	80014c4 <HAL_GPIO_Init>

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 8003130:	4b5c      	ldr	r3, [pc, #368]	; (80032a4 <main+0x278>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 2;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003132:	4628      	mov	r0, r5

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003134:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003136:	612e      	str	r6, [r5, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003138:	61ae      	str	r6, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800313a:	622c      	str	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800313c:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800313e:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 2;
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003140:	632c      	str	r4, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003142:	616c      	str	r4, [r5, #20]
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003144:	e885 0018 	stmia.w	r5, {r3, r4}
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ENABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003148:	4b57      	ldr	r3, [pc, #348]	; (80032a8 <main+0x27c>)
 800314a:	62ab      	str	r3, [r5, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 2;
 800314c:	2302      	movs	r3, #2
 800314e:	61eb      	str	r3, [r5, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003150:	f7fd ff2a 	bl	8000fa8 <HAL_ADC_Init>
 8003154:	b100      	cbz	r0, 8003158 <main+0x12c>
 8003156:	e7fe      	b.n	8003156 <main+0x12a>
    Error_Handler();
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_8;
 8003158:	2708      	movs	r7, #8
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800315a:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800315c:	a909      	add	r1, sp, #36	; 0x24
 800315e:	4628      	mov	r0, r5
    Error_Handler();
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_8;
 8003160:	9709      	str	r7, [sp, #36]	; 0x24
  sConfig.Rank = 1;
 8003162:	960a      	str	r6, [sp, #40]	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003164:	f7fe f89c 	bl	80012a0 <HAL_ADC_ConfigChannel>
 8003168:	b100      	cbz	r0, 800316c <main+0x140>
 800316a:	e7fe      	b.n	800316a <main+0x13e>

/* SPI1 init function */
static void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 800316c:	4b4f      	ldr	r3, [pc, #316]	; (80032ac <main+0x280>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800316e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003172:	494f      	ldr	r1, [pc, #316]	; (80032b0 <main+0x284>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003174:	6098      	str	r0, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003176:	6118      	str	r0, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003178:	6158      	str	r0, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800317a:	61d8      	str	r0, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800317c:	6218      	str	r0, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800317e:	6258      	str	r0, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003180:	6298      	str	r0, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003182:	6318      	str	r0, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003184:	4618      	mov	r0, r3
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003186:	635f      	str	r7, [r3, #52]	; 0x34
/* SPI1 init function */
static void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003188:	e883 0006 	stmia.w	r3, {r1, r2}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800318c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003190:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003192:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003196:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8003198:	2207      	movs	r2, #7
 800319a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800319c:	f7ff f8e6 	bl	800236c <HAL_SPI_Init>
 80031a0:	b100      	cbz	r0, 80031a4 <main+0x178>
 80031a2:	e7fe      	b.n	80031a2 <main+0x176>
{

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_IC_InitTypeDef sConfigIC;

  htim1.Instance = TIM1;
 80031a4:	4c43      	ldr	r4, [pc, #268]	; (80032b4 <main+0x288>)
 80031a6:	4b44      	ldr	r3, [pc, #272]	; (80032b8 <main+0x28c>)
  htim1.Init.Prescaler = 0;
 80031a8:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031aa:	60a0      	str	r0, [r4, #8]
  htim1.Init.Period = 0;
 80031ac:	60e0      	str	r0, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031ae:	6120      	str	r0, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 80031b0:	6160      	str	r0, [r4, #20]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80031b2:	4620      	mov	r0, r4
{

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_IC_InitTypeDef sConfigIC;

  htim1.Instance = TIM1;
 80031b4:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 0;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80031b6:	f7ff f9ad 	bl	8002514 <HAL_TIM_IC_Init>
 80031ba:	b100      	cbz	r0, 80031be <main+0x192>
 80031bc:	e7fe      	b.n	80031bc <main+0x190>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031be:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80031c0:	a905      	add	r1, sp, #20
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80031c2:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031c4:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80031c6:	4620      	mov	r0, r4
 80031c8:	f7ff fc3c 	bl	8002a44 <HAL_TIMEx_MasterConfigSynchronization>
 80031cc:	4602      	mov	r2, r0
 80031ce:	b100      	cbz	r0, 80031d2 <main+0x1a6>
 80031d0:	e7fe      	b.n	80031d0 <main+0x1a4>
  {
    Error_Handler();
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80031d2:	9009      	str	r0, [sp, #36]	; 0x24
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80031d4:	a909      	add	r1, sp, #36	; 0x24
    Error_Handler();
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80031d6:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigIC.ICFilter = 0;
 80031d8:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80031da:	4620      	mov	r0, r4
  {
    Error_Handler();
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80031dc:	960a      	str	r6, [sp, #40]	; 0x28
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80031de:	f7ff faab 	bl	8002738 <HAL_TIM_IC_ConfigChannel>
 80031e2:	b100      	cbz	r0, 80031e6 <main+0x1ba>
 80031e4:	e7fe      	b.n	80031e4 <main+0x1b8>
  {
    Error_Handler();
  }

  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80031e6:	2204      	movs	r2, #4
 80031e8:	a909      	add	r1, sp, #36	; 0x24
 80031ea:	4620      	mov	r0, r4
 80031ec:	f7ff faa4 	bl	8002738 <HAL_TIM_IC_ConfigChannel>
 80031f0:	b100      	cbz	r0, 80031f4 <main+0x1c8>
 80031f2:	e7fe      	b.n	80031f2 <main+0x1c6>
  {
    Error_Handler();
  }

  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80031f4:	463a      	mov	r2, r7
 80031f6:	a909      	add	r1, sp, #36	; 0x24
 80031f8:	4620      	mov	r0, r4
 80031fa:	f7ff fa9d 	bl	8002738 <HAL_TIM_IC_ConfigChannel>
 80031fe:	b100      	cbz	r0, 8003202 <main+0x1d6>
 8003200:	e7fe      	b.n	8003200 <main+0x1d4>
  {
    Error_Handler();
  }

  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8003202:	220c      	movs	r2, #12
 8003204:	a909      	add	r1, sp, #36	; 0x24
 8003206:	4620      	mov	r0, r4
 8003208:	f7ff fa96 	bl	8002738 <HAL_TIM_IC_ConfigChannel>
 800320c:	b100      	cbz	r0, 8003210 <main+0x1e4>
 800320e:	e7fe      	b.n	800320e <main+0x1e2>
{

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
 8003210:	4b2a      	ldr	r3, [pc, #168]	; (80032bc <main+0x290>)
 8003212:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003216:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 3374; //clock division  period = (systemclock)/(desired freq) - 1
 8003218:	f640 522e 	movw	r2, #3374	; 0xd2e

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
 800321c:	6058      	str	r0, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800321e:	6098      	str	r0, [r3, #8]
  htim2.Init.Period = 3374; //clock division  period = (systemclock)/(desired freq) - 1
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003220:	6118      	str	r0, [r3, #16]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003222:	4618      	mov	r0, r3
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 3374; //clock division  period = (systemclock)/(desired freq) - 1
 8003224:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003226:	f7ff f95b 	bl	80024e0 <HAL_TIM_PWM_Init>
 800322a:	b100      	cbz	r0, 800322e <main+0x202>
 800322c:	e7fe      	b.n	800322c <main+0x200>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800322e:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003230:	a905      	add	r1, sp, #20
 8003232:	4822      	ldr	r0, [pc, #136]	; (80032bc <main+0x290>)
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003234:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003236:	9307      	str	r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003238:	f7ff fc04 	bl	8002a44 <HAL_TIMEx_MasterConfigSynchronization>
 800323c:	4602      	mov	r2, r0
 800323e:	b100      	cbz	r0, 8003242 <main+0x216>
 8003240:	e7fe      	b.n	8003240 <main+0x214>
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003242:	2660      	movs	r6, #96	; 0x60
  sConfigOC.Pulse = 0;
 8003244:	900a      	str	r0, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003246:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003248:	a909      	add	r1, sp, #36	; 0x24
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800324a:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800324c:	481b      	ldr	r0, [pc, #108]	; (80032bc <main+0x290>)
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800324e:	9609      	str	r6, [sp, #36]	; 0x24
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003250:	f7ff fb72 	bl	8002938 <HAL_TIM_PWM_ConfigChannel>
 8003254:	b100      	cbz	r0, 8003258 <main+0x22c>
 8003256:	e7fe      	b.n	8003256 <main+0x22a>
  {
    Error_Handler();
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003258:	2204      	movs	r2, #4
 800325a:	a909      	add	r1, sp, #36	; 0x24
 800325c:	4817      	ldr	r0, [pc, #92]	; (80032bc <main+0x290>)
 800325e:	f7ff fb6b 	bl	8002938 <HAL_TIM_PWM_ConfigChannel>
 8003262:	b100      	cbz	r0, 8003266 <main+0x23a>
 8003264:	e7fe      	b.n	8003264 <main+0x238>
  {
    Error_Handler();
  }


  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003266:	220c      	movs	r2, #12
 8003268:	a909      	add	r1, sp, #36	; 0x24
 800326a:	4814      	ldr	r0, [pc, #80]	; (80032bc <main+0x290>)
 800326c:	f7ff fb64 	bl	8002938 <HAL_TIM_PWM_ConfigChannel>
 8003270:	b100      	cbz	r0, 8003274 <main+0x248>
 8003272:	e7fe      	b.n	8003272 <main+0x246>
  {
    Error_Handler();
  }

  sConfigOC.Pulse = 1874;
 8003274:	f240 7352 	movw	r3, #1874	; 0x752

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003278:	2208      	movs	r2, #8
 800327a:	a909      	add	r1, sp, #36	; 0x24
 800327c:	480f      	ldr	r0, [pc, #60]	; (80032bc <main+0x290>)
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    Error_Handler();
  }

  sConfigOC.Pulse = 1874;
 800327e:	930a      	str	r3, [sp, #40]	; 0x28

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003280:	f7ff fb5a 	bl	8002938 <HAL_TIM_PWM_ConfigChannel>
 8003284:	4605      	mov	r5, r0
 8003286:	b1d8      	cbz	r0, 80032c0 <main+0x294>
 8003288:	e7fe      	b.n	8003288 <main+0x25c>
 800328a:	bf00      	nop
 800328c:	40023800 	.word	0x40023800
 8003290:	40020800 	.word	0x40020800
 8003294:	20000610 	.word	0x20000610
 8003298:	40020000 	.word	0x40020000
 800329c:	40020400 	.word	0x40020400
 80032a0:	40020c00 	.word	0x40020c00
 80032a4:	40012000 	.word	0x40012000
 80032a8:	0f000001 	.word	0x0f000001
 80032ac:	20000704 	.word	0x20000704
 80032b0:	40013000 	.word	0x40013000
 80032b4:	200006c8 	.word	0x200006c8
 80032b8:	40010000 	.word	0x40010000
 80032bc:	20000768 	.word	0x20000768
{

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim3.Instance = TIM3;
 80032c0:	4c70      	ldr	r4, [pc, #448]	; (8003484 <main+0x458>)
    {
      Error_Handler();
    }


  HAL_TIM_MspPostInit(&htim2);
 80032c2:	4871      	ldr	r0, [pc, #452]	; (8003488 <main+0x45c>)
 80032c4:	f000 f9ce 	bl	8003664 <HAL_TIM_MspPostInit>
{

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim3.Instance = TIM3;
 80032c8:	4b70      	ldr	r3, [pc, #448]	; (800348c <main+0x460>)
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 0;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80032ca:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032cc:	60a5      	str	r5, [r4, #8]
  htim3.Init.Period = 0;
 80032ce:	60e5      	str	r5, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032d0:	6125      	str	r5, [r4, #16]

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 0;
 80032d2:	e884 0028 	stmia.w	r4, {r3, r5}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 0;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80032d6:	f7ff f903 	bl	80024e0 <HAL_TIM_PWM_Init>
 80032da:	b100      	cbz	r0, 80032de <main+0x2b2>
 80032dc:	e7fe      	b.n	80032dc <main+0x2b0>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032de:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80032e0:	a905      	add	r1, sp, #20
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032e2:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80032e4:	4620      	mov	r0, r4
 80032e6:	f7ff fbad 	bl	8002a44 <HAL_TIMEx_MasterConfigSynchronization>
 80032ea:	4602      	mov	r2, r0
 80032ec:	b100      	cbz	r0, 80032f0 <main+0x2c4>
 80032ee:	e7fe      	b.n	80032ee <main+0x2c2>
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
 80032f0:	900a      	str	r0, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032f2:	a909      	add	r1, sp, #36	; 0x24
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032f4:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032f6:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032f8:	4620      	mov	r0, r4
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032fa:	9609      	str	r6, [sp, #36]	; 0x24
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032fc:	f7ff fb1c 	bl	8002938 <HAL_TIM_PWM_ConfigChannel>
 8003300:	b100      	cbz	r0, 8003304 <main+0x2d8>
 8003302:	e7fe      	b.n	8003302 <main+0x2d6>
  {
    Error_Handler();
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003304:	2204      	movs	r2, #4
 8003306:	a909      	add	r1, sp, #36	; 0x24
 8003308:	4620      	mov	r0, r4
 800330a:	f7ff fb15 	bl	8002938 <HAL_TIM_PWM_ConfigChannel>
 800330e:	b100      	cbz	r0, 8003312 <main+0x2e6>
 8003310:	e7fe      	b.n	8003310 <main+0x2e4>
  {
    Error_Handler();
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003312:	2208      	movs	r2, #8
 8003314:	a909      	add	r1, sp, #36	; 0x24
 8003316:	4620      	mov	r0, r4
 8003318:	f7ff fb0e 	bl	8002938 <HAL_TIM_PWM_ConfigChannel>
 800331c:	b100      	cbz	r0, 8003320 <main+0x2f4>
 800331e:	e7fe      	b.n	800331e <main+0x2f2>
  {
    Error_Handler();
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003320:	220c      	movs	r2, #12
 8003322:	a909      	add	r1, sp, #36	; 0x24
 8003324:	4857      	ldr	r0, [pc, #348]	; (8003484 <main+0x458>)
 8003326:	f7ff fb07 	bl	8002938 <HAL_TIM_PWM_ConfigChannel>
 800332a:	4605      	mov	r5, r0
 800332c:	b100      	cbz	r0, 8003330 <main+0x304>
 800332e:	e7fe      	b.n	800332e <main+0x302>
{

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim4.Instance = TIM4;
 8003330:	4c57      	ldr	r4, [pc, #348]	; (8003490 <main+0x464>)
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    Error_Handler();
  }

  HAL_TIM_MspPostInit(&htim3);
 8003332:	4854      	ldr	r0, [pc, #336]	; (8003484 <main+0x458>)
 8003334:	f000 f996 	bl	8003664 <HAL_TIM_MspPostInit>
{

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim4.Instance = TIM4;
 8003338:	4b56      	ldr	r3, [pc, #344]	; (8003494 <main+0x468>)
  htim4.Init.Prescaler = 0;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 0;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800333a:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 0;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800333c:	60a5      	str	r5, [r4, #8]
  htim4.Init.Period = 0;
 800333e:	60e5      	str	r5, [r4, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003340:	6125      	str	r5, [r4, #16]

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 0;
 8003342:	e884 0028 	stmia.w	r4, {r3, r5}
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 0;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003346:	f7ff f8cb 	bl	80024e0 <HAL_TIM_PWM_Init>
 800334a:	b100      	cbz	r0, 800334e <main+0x322>
 800334c:	e7fe      	b.n	800334c <main+0x320>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800334e:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003350:	a905      	add	r1, sp, #20
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003352:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003354:	4620      	mov	r0, r4
 8003356:	f7ff fb75 	bl	8002a44 <HAL_TIMEx_MasterConfigSynchronization>
 800335a:	4602      	mov	r2, r0
 800335c:	b100      	cbz	r0, 8003360 <main+0x334>
 800335e:	e7fe      	b.n	800335e <main+0x332>
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003360:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8003362:	900a      	str	r0, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003364:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003366:	a909      	add	r1, sp, #36	; 0x24
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003368:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800336a:	4620      	mov	r0, r4
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800336c:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800336e:	f7ff fae3 	bl	8002938 <HAL_TIM_PWM_ConfigChannel>
 8003372:	4605      	mov	r5, r0
 8003374:	b100      	cbz	r0, 8003378 <main+0x34c>
 8003376:	e7fe      	b.n	8003376 <main+0x34a>
  {
    Error_Handler();
  }

  HAL_TIM_MspPostInit(&htim4);
 8003378:	4620      	mov	r0, r4
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800337a:	260c      	movs	r6, #12
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }

  HAL_TIM_MspPostInit(&htim4);
 800337c:	f000 f972 	bl	8003664 <HAL_TIM_MspPostInit>

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 8003380:	4845      	ldr	r0, [pc, #276]	; (8003498 <main+0x46c>)
  huart1.Init.BaudRate = 9600;
 8003382:	4a46      	ldr	r2, [pc, #280]	; (800349c <main+0x470>)
 8003384:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003388:	6085      	str	r5, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800338a:	60c5      	str	r5, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800338c:	6105      	str	r5, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800338e:	6146      	str	r6, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003390:	6185      	str	r5, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003392:	61c5      	str	r5, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003394:	6205      	str	r5, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003396:	6245      	str	r5, [r0, #36]	; 0x24
/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
 8003398:	e880 000c 	stmia.w	r0, {r2, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800339c:	f7ff fdc1 	bl	8002f22 <HAL_UART_Init>
 80033a0:	4604      	mov	r4, r0
 80033a2:	b100      	cbz	r0, 80033a6 <main+0x37a>
 80033a4:	e7fe      	b.n	80033a4 <main+0x378>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80033a6:	4601      	mov	r1, r0
 80033a8:	4837      	ldr	r0, [pc, #220]	; (8003488 <main+0x45c>)
 80033aa:	f7ff fa5b 	bl	8002864 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80033ae:	2104      	movs	r1, #4
 80033b0:	4835      	ldr	r0, [pc, #212]	; (8003488 <main+0x45c>)
  ADC_ChannelConfTypeDef sConfig;

  char buffer[50];
  int len;

  int val1 = 0;
 80033b2:	4625      	mov	r5, r4
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80033b4:	f7ff fa56 	bl	8002864 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80033b8:	2108      	movs	r1, #8
 80033ba:	4833      	ldr	r0, [pc, #204]	; (8003488 <main+0x45c>)
 80033bc:	f7ff fa52 	bl	8002864 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80033c0:	4631      	mov	r1, r6
 80033c2:	4831      	ldr	r0, [pc, #196]	; (8003488 <main+0x45c>)
 80033c4:	f7ff fa4e 	bl	8002864 <HAL_TIM_PWM_Start>
  //HAL_ADC_Start(&hadc1);

  while (1)
  {
  /* USER CODE END WHILE */
	  	 HAL_GPIO_TogglePin(GPIOB, LED1_Pin);
 80033c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033cc:	4834      	ldr	r0, [pc, #208]	; (80034a0 <main+0x474>)
 80033ce:	f7fe f969 	bl	80016a4 <HAL_GPIO_TogglePin>
	  	 HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 80033d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033d6:	4832      	ldr	r0, [pc, #200]	; (80034a0 <main+0x474>)
 80033d8:	f7fe f964 	bl	80016a4 <HAL_GPIO_TogglePin>
	  	 HAL_GPIO_TogglePin(GPIOB, LED3_Pin);
 80033dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80033e0:	482f      	ldr	r0, [pc, #188]	; (80034a0 <main+0x474>)
 80033e2:	f7fe f95f 	bl	80016a4 <HAL_GPIO_TogglePin>

	  	 HAL_GPIO_TogglePin(GPIOC, LED4_Pin);
 80033e6:	2104      	movs	r1, #4
 80033e8:	482e      	ldr	r0, [pc, #184]	; (80034a4 <main+0x478>)
 80033ea:	f7fe f95b 	bl	80016a4 <HAL_GPIO_TogglePin>
	  	 HAL_GPIO_TogglePin(GPIOC, LED5_Pin);
 80033ee:	2102      	movs	r1, #2
 80033f0:	482c      	ldr	r0, [pc, #176]	; (80034a4 <main+0x478>)
 80033f2:	f7fe f957 	bl	80016a4 <HAL_GPIO_TogglePin>

	  	 sConfig.Channel = ADC_CHANNEL_8;
 80033f6:	2308      	movs	r3, #8
	  	 sConfig.Rank = 1;
	  	 sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
	  	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80033f8:	a905      	add	r1, sp, #20
 80033fa:	482b      	ldr	r0, [pc, #172]	; (80034a8 <main+0x47c>)
	  	 HAL_GPIO_TogglePin(GPIOB, LED3_Pin);

	  	 HAL_GPIO_TogglePin(GPIOC, LED4_Pin);
	  	 HAL_GPIO_TogglePin(GPIOC, LED5_Pin);

	  	 sConfig.Channel = ADC_CHANNEL_8;
 80033fc:	9305      	str	r3, [sp, #20]
	  	 sConfig.Rank = 1;
 80033fe:	2301      	movs	r3, #1
 8003400:	9306      	str	r3, [sp, #24]
	  	 sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003402:	2300      	movs	r3, #0
 8003404:	9307      	str	r3, [sp, #28]
	  	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003406:	f7fd ff4b 	bl	80012a0 <HAL_ADC_ConfigChannel>
 800340a:	b100      	cbz	r0, 800340e <main+0x3e2>
 800340c:	e7fe      	b.n	800340c <main+0x3e0>
	  	  	 {
	  	  	   Error_Handler();
	  	  	 }

	  	HAL_ADC_Start(&hadc1);
 800340e:	4826      	ldr	r0, [pc, #152]	; (80034a8 <main+0x47c>)
 8003410:	f7fd fe74 	bl	80010fc <HAL_ADC_Start>
	  	if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8003414:	2164      	movs	r1, #100	; 0x64
 8003416:	4824      	ldr	r0, [pc, #144]	; (80034a8 <main+0x47c>)
 8003418:	f7fd feee 	bl	80011f8 <HAL_ADC_PollForConversion>
 800341c:	b918      	cbnz	r0, 8003426 <main+0x3fa>
	  	{
	  	val1 = HAL_ADC_GetValue(&hadc1);
 800341e:	4822      	ldr	r0, [pc, #136]	; (80034a8 <main+0x47c>)
 8003420:	f7fd ff3a 	bl	8001298 <HAL_ADC_GetValue>
 8003424:	4605      	mov	r5, r0
	  	}
	  	HAL_ADC_Stop(&hadc1);
 8003426:	4820      	ldr	r0, [pc, #128]	; (80034a8 <main+0x47c>)
 8003428:	f7fd fec8 	bl	80011bc <HAL_ADC_Stop>

	  	sConfig.Channel = ADC_CHANNEL_15;
 800342c:	230f      	movs	r3, #15
	    sConfig.Rank = 2;
	  	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
	  	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800342e:	a905      	add	r1, sp, #20
 8003430:	481d      	ldr	r0, [pc, #116]	; (80034a8 <main+0x47c>)
	  	{
	  	val1 = HAL_ADC_GetValue(&hadc1);
	  	}
	  	HAL_ADC_Stop(&hadc1);

	  	sConfig.Channel = ADC_CHANNEL_15;
 8003432:	9305      	str	r3, [sp, #20]
	    sConfig.Rank = 2;
 8003434:	2302      	movs	r3, #2
 8003436:	9306      	str	r3, [sp, #24]
	  	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003438:	2300      	movs	r3, #0
 800343a:	9307      	str	r3, [sp, #28]
	  	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800343c:	f7fd ff30 	bl	80012a0 <HAL_ADC_ConfigChannel>
 8003440:	b100      	cbz	r0, 8003444 <main+0x418>
 8003442:	e7fe      	b.n	8003442 <main+0x416>
	  		 {
	  	  	   Error_Handler();
	  	 	 }

    	HAL_ADC_Start(&hadc1);
 8003444:	4818      	ldr	r0, [pc, #96]	; (80034a8 <main+0x47c>)
 8003446:	f7fd fe59 	bl	80010fc <HAL_ADC_Start>
    	if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) //wait for ADC to be converted
 800344a:	2164      	movs	r1, #100	; 0x64
 800344c:	4816      	ldr	r0, [pc, #88]	; (80034a8 <main+0x47c>)
 800344e:	f7fd fed3 	bl	80011f8 <HAL_ADC_PollForConversion>
 8003452:	b918      	cbnz	r0, 800345c <main+0x430>
    	{
    	val2 = HAL_ADC_GetValue(&hadc1);
 8003454:	4814      	ldr	r0, [pc, #80]	; (80034a8 <main+0x47c>)
 8003456:	f7fd ff1f 	bl	8001298 <HAL_ADC_GetValue>
 800345a:	4604      	mov	r4, r0
    	}
	  	HAL_ADC_Stop(&hadc1);
 800345c:	4812      	ldr	r0, [pc, #72]	; (80034a8 <main+0x47c>)
 800345e:	f7fd fead 	bl	80011bc <HAL_ADC_Stop>

	  	//PWMAdjust(val1);

	    sprintf(buffer,"ADC1:  %i, ADC2: %i \r\n", val1, val2);
 8003462:	4623      	mov	r3, r4
 8003464:	462a      	mov	r2, r5
 8003466:	4911      	ldr	r1, [pc, #68]	; (80034ac <main+0x480>)
 8003468:	a809      	add	r0, sp, #36	; 0x24
 800346a:	f000 f9c7 	bl	80037fc <sprintf>
	  	len=strlen(buffer);
 800346e:	a809      	add	r0, sp, #36	; 0x24
 8003470:	f7fc fece 	bl	8000210 <strlen>
	  	HAL_UART_Transmit(&huart1, buffer, len, 1000);
 8003474:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003478:	b282      	uxth	r2, r0
 800347a:	a909      	add	r1, sp, #36	; 0x24
 800347c:	4806      	ldr	r0, [pc, #24]	; (8003498 <main+0x46c>)
 800347e:	f7ff fb38 	bl	8002af2 <HAL_UART_Transmit>
  /* USER CODE BEGIN 3 */

  }
 8003482:	e7a1      	b.n	80033c8 <main+0x39c>
 8003484:	200005d4 	.word	0x200005d4
 8003488:	20000768 	.word	0x20000768
 800348c:	40000400 	.word	0x40000400
 8003490:	20000598 	.word	0x20000598
 8003494:	40000800 	.word	0x40000800
 8003498:	20000658 	.word	0x20000658
 800349c:	40011000 	.word	0x40011000
 80034a0:	40020400 	.word	0x40020400
 80034a4:	40020800 	.word	0x40020800
 80034a8:	20000610 	.word	0x20000610
 80034ac:	080065d1 	.word	0x080065d1

080034b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034b2:	2003      	movs	r0, #3
 80034b4:	f7fd ff94 	bl	80013e0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80034b8:	2200      	movs	r2, #0
 80034ba:	f06f 000b 	mvn.w	r0, #11
 80034be:	4611      	mov	r1, r2
 80034c0:	f7fd ffa0 	bl	8001404 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80034c4:	2200      	movs	r2, #0
 80034c6:	f06f 000a 	mvn.w	r0, #10
 80034ca:	4611      	mov	r1, r2
 80034cc:	f7fd ff9a 	bl	8001404 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80034d0:	2200      	movs	r2, #0
 80034d2:	f06f 0009 	mvn.w	r0, #9
 80034d6:	4611      	mov	r1, r2
 80034d8:	f7fd ff94 	bl	8001404 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80034dc:	2200      	movs	r2, #0
 80034de:	f06f 0004 	mvn.w	r0, #4
 80034e2:	4611      	mov	r1, r2
 80034e4:	f7fd ff8e 	bl	8001404 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80034e8:	2200      	movs	r2, #0
 80034ea:	f06f 0003 	mvn.w	r0, #3
 80034ee:	4611      	mov	r1, r2
 80034f0:	f7fd ff88 	bl	8001404 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80034f4:	2200      	movs	r2, #0
 80034f6:	f06f 0001 	mvn.w	r0, #1
 80034fa:	4611      	mov	r1, r2
 80034fc:	f7fd ff82 	bl	8001404 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003500:	2200      	movs	r2, #0
 8003502:	f04f 30ff 	mov.w	r0, #4294967295
 8003506:	4611      	mov	r1, r2

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003508:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800350c:	f7fd bf7a 	b.w	8001404 <HAL_NVIC_SetPriority>

08003510 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8003510:	6802      	ldr	r2, [r0, #0]
 8003512:	4b11      	ldr	r3, [pc, #68]	; (8003558 <HAL_ADC_MspInit+0x48>)
 8003514:	429a      	cmp	r2, r3

  /* USER CODE END MspInit 1 */
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003516:	b530      	push	{r4, r5, lr}
 8003518:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 800351a:	d11b      	bne.n	8003554 <HAL_ADC_MspInit+0x44>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800351c:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = VOLTMETER_Pin|L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003520:	2403      	movs	r4, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003522:	2500      	movs	r5, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003524:	a901      	add	r1, sp, #4
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003526:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = VOLTMETER_Pin|L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003528:	480c      	ldr	r0, [pc, #48]	; (800355c <HAL_ADC_MspInit+0x4c>)
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800352a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800352e:	645a      	str	r2, [r3, #68]	; 0x44
 8003530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = VOLTMETER_Pin|L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003532:	9402      	str	r4, [sp, #8]
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003534:	f403 7380 	and.w	r3, r3, #256	; 0x100
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = VOLTMETER_Pin|L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003538:	9503      	str	r5, [sp, #12]
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	9b00      	ldr	r3, [sp, #0]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = VOLTMETER_Pin|L_REC_Pin|LF_REC_Pin;
 800353e:	2331      	movs	r3, #49	; 0x31
 8003540:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003542:	f7fd ffbf 	bl	80014c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RF_REC_Pin|R_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003546:	a901      	add	r1, sp, #4
 8003548:	4805      	ldr	r0, [pc, #20]	; (8003560 <HAL_ADC_MspInit+0x50>)
    GPIO_InitStruct.Pin = VOLTMETER_Pin|L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = RF_REC_Pin|R_REC_Pin;
 800354a:	9401      	str	r4, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800354c:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354e:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003550:	f7fd ffb8 	bl	80014c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003554:	b007      	add	sp, #28
 8003556:	bd30      	pop	{r4, r5, pc}
 8003558:	40012000 	.word	0x40012000
 800355c:	40020800 	.word	0x40020800
 8003560:	40020400 	.word	0x40020400

08003564 <HAL_SPI_MspInit>:
  /* USER CODE END ADC1_MspDeInit 1 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003564:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8003566:	6802      	ldr	r2, [r0, #0]
 8003568:	4b0f      	ldr	r3, [pc, #60]	; (80035a8 <HAL_SPI_MspInit+0x44>)
 800356a:	429a      	cmp	r2, r3
 800356c:	d118      	bne.n	80035a0 <HAL_SPI_MspInit+0x3c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800356e:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
    GPIO_InitStruct.Pin = GYRO_SCLK_Pin|GYRO_MISO_Pin|GYRO_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003572:	a901      	add	r1, sp, #4
 8003574:	480d      	ldr	r0, [pc, #52]	; (80035ac <HAL_SPI_MspInit+0x48>)
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003576:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003578:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800357c:	645a      	str	r2, [r3, #68]	; 0x44
 800357e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003580:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	9b00      	ldr	r3, [sp, #0]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GYRO_SCLK_Pin|GYRO_MISO_Pin|GYRO_MOSI_Pin;
 8003588:	23e0      	movs	r3, #224	; 0xe0
 800358a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800358c:	2302      	movs	r3, #2
 800358e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003590:	2300      	movs	r3, #0
 8003592:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003594:	2303      	movs	r3, #3
 8003596:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003598:	2305      	movs	r3, #5
 800359a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800359c:	f7fd ff92 	bl	80014c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80035a0:	b007      	add	sp, #28
 80035a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80035a6:	bf00      	nop
 80035a8:	40013000 	.word	0x40013000
 80035ac:	40020000 	.word	0x40020000

080035b0 <HAL_TIM_IC_MspInit>:
  /* USER CODE END SPI1_MspDeInit 1 */

}

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80035b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_ic->Instance==TIM1)
 80035b2:	6802      	ldr	r2, [r0, #0]
 80035b4:	4b0f      	ldr	r3, [pc, #60]	; (80035f4 <HAL_TIM_IC_MspInit+0x44>)
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d118      	bne.n	80035ec <HAL_TIM_IC_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80035ba:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
    GPIO_InitStruct.Pin = LENC_CHB_Pin|LENC_CHA_Pin|RENC_CHB_Pin|RENC_CHA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035be:	a901      	add	r1, sp, #4
 80035c0:	480d      	ldr	r0, [pc, #52]	; (80035f8 <HAL_TIM_IC_MspInit+0x48>)
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80035c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035c4:	f042 0201 	orr.w	r2, r2, #1
 80035c8:	645a      	str	r2, [r3, #68]	; 0x44
 80035ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	9b00      	ldr	r3, [sp, #0]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = LENC_CHB_Pin|LENC_CHA_Pin|RENC_CHB_Pin|RENC_CHA_Pin;
 80035d4:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80035d8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035da:	2302      	movs	r3, #2
 80035dc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035de:	2300      	movs	r3, #0
 80035e0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80035e4:	2301      	movs	r3, #1
 80035e6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035e8:	f7fd ff6c 	bl	80014c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80035ec:	b007      	add	sp, #28
 80035ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80035f2:	bf00      	nop
 80035f4:	40010000 	.word	0x40010000
 80035f8:	40021000 	.word	0x40021000

080035fc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM2)
 80035fc:	6803      	ldr	r3, [r0, #0]
  }

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80035fe:	b084      	sub	sp, #16

  if(htim_pwm->Instance==TIM2)
 8003600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003604:	d10b      	bne.n	800361e <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003606:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800360a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800360c:	f042 0201 	orr.w	r2, r2, #1
 8003610:	641a      	str	r2, [r3, #64]	; 0x40
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	9301      	str	r3, [sp, #4]
 800361a:	9b01      	ldr	r3, [sp, #4]
 800361c:	e01a      	b.n	8003654 <HAL_TIM_PWM_MspInit+0x58>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM3)
 800361e:	4a0e      	ldr	r2, [pc, #56]	; (8003658 <HAL_TIM_PWM_MspInit+0x5c>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d10a      	bne.n	800363a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003624:	4b0d      	ldr	r3, [pc, #52]	; (800365c <HAL_TIM_PWM_MspInit+0x60>)
 8003626:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003628:	f042 0202 	orr.w	r2, r2, #2
 800362c:	641a      	str	r2, [r3, #64]	; 0x40
 800362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	9302      	str	r3, [sp, #8]
 8003636:	9b02      	ldr	r3, [sp, #8]
 8003638:	e00c      	b.n	8003654 <HAL_TIM_PWM_MspInit+0x58>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM4)
 800363a:	4a09      	ldr	r2, [pc, #36]	; (8003660 <HAL_TIM_PWM_MspInit+0x64>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d109      	bne.n	8003654 <HAL_TIM_PWM_MspInit+0x58>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003640:	4b06      	ldr	r3, [pc, #24]	; (800365c <HAL_TIM_PWM_MspInit+0x60>)
 8003642:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003644:	f042 0204 	orr.w	r2, r2, #4
 8003648:	641a      	str	r2, [r3, #64]	; 0x40
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	9303      	str	r3, [sp, #12]
 8003652:	9b03      	ldr	r3, [sp, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003654:	b004      	add	sp, #16
 8003656:	4770      	bx	lr
 8003658:	40000400 	.word	0x40000400
 800365c:	40023800 	.word	0x40023800
 8003660:	40000800 	.word	0x40000800

08003664 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM2)
 8003664:	6803      	ldr	r3, [r0, #0]
 8003666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  }

}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800366a:	b530      	push	{r4, r5, lr}
 800366c:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM2)
 800366e:	d10b      	bne.n	8003688 <HAL_TIM_MspPostInit+0x24>
    PA0/WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = RPWMA_Pin|RPWMB_Pin|LPWMA_Pin|LPWMB_Pin;
 8003670:	230f      	movs	r3, #15
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003672:	a901      	add	r1, sp, #4
 8003674:	481a      	ldr	r0, [pc, #104]	; (80036e0 <HAL_TIM_MspPostInit+0x7c>)
    PA0/WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = RPWMA_Pin|RPWMB_Pin|LPWMA_Pin|LPWMB_Pin;
 8003676:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003678:	2302      	movs	r3, #2
 800367a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367c:	2300      	movs	r3, #0
 800367e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003680:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003682:	2301      	movs	r3, #1
 8003684:	9305      	str	r3, [sp, #20]
 8003686:	e026      	b.n	80036d6 <HAL_TIM_MspPostInit+0x72>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 8003688:	4a16      	ldr	r2, [pc, #88]	; (80036e4 <HAL_TIM_MspPostInit+0x80>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d115      	bne.n	80036ba <HAL_TIM_MspPostInit+0x56>
    PC9     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = R_EMIT_Pin|RF_EMIT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368e:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003690:	2500      	movs	r5, #0
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = R_EMIT_Pin|RF_EMIT_Pin;
 8003692:	f44f 7340 	mov.w	r3, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003696:	a901      	add	r1, sp, #4
 8003698:	4813      	ldr	r0, [pc, #76]	; (80036e8 <HAL_TIM_MspPostInit+0x84>)
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = R_EMIT_Pin|RF_EMIT_Pin;
 800369a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369c:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369e:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a0:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80036a2:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036a4:	f7fd ff0e 	bl	80014c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LF_EMIT_Pin|L_EMIT_Pin;
 80036a8:	2330      	movs	r3, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036aa:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ac:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ae:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = LF_EMIT_Pin|L_EMIT_Pin;
 80036b0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b2:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80036b4:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036b6:	480d      	ldr	r0, [pc, #52]	; (80036ec <HAL_TIM_MspPostInit+0x88>)
 80036b8:	e00d      	b.n	80036d6 <HAL_TIM_MspPostInit+0x72>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(htim->Instance==TIM4)
 80036ba:	4a0d      	ldr	r2, [pc, #52]	; (80036f0 <HAL_TIM_MspPostInit+0x8c>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d10c      	bne.n	80036da <HAL_TIM_MspPostInit+0x76>
  /* USER CODE END TIM4_MspPostInit 0 */
  
    /**TIM4 GPIO Configuration    
    PD12     ------> TIM4_CH1 
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 80036c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c4:	2200      	movs	r2, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80036c6:	a901      	add	r1, sp, #4
 80036c8:	480a      	ldr	r0, [pc, #40]	; (80036f4 <HAL_TIM_MspPostInit+0x90>)
  /* USER CODE END TIM4_MspPostInit 0 */
  
    /**TIM4 GPIO Configuration    
    PD12     ------> TIM4_CH1 
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 80036ca:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036cc:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ce:	9203      	str	r2, [sp, #12]
  
    /**TIM4 GPIO Configuration    
    PD12     ------> TIM4_CH1 
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036d2:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80036d4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80036d6:	f7fd fef5 	bl	80014c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80036da:	b007      	add	sp, #28
 80036dc:	bd30      	pop	{r4, r5, pc}
 80036de:	bf00      	nop
 80036e0:	40020000 	.word	0x40020000
 80036e4:	40000400 	.word	0x40000400
 80036e8:	40020800 	.word	0x40020800
 80036ec:	40020400 	.word	0x40020400
 80036f0:	40000800 	.word	0x40000800
 80036f4:	40020c00 	.word	0x40020c00

080036f8 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80036fa:	6802      	ldr	r2, [r0, #0]
 80036fc:	4b0f      	ldr	r3, [pc, #60]	; (800373c <HAL_UART_MspInit+0x44>)
 80036fe:	429a      	cmp	r2, r3
 8003700:	d119      	bne.n	8003736 <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003702:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003706:	a901      	add	r1, sp, #4
 8003708:	480d      	ldr	r0, [pc, #52]	; (8003740 <HAL_UART_MspInit+0x48>)
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800370a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800370c:	f042 0210 	orr.w	r2, r2, #16
 8003710:	645a      	str	r2, [r3, #68]	; 0x44
 8003712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003714:	f003 0310 	and.w	r3, r3, #16
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	9b00      	ldr	r3, [sp, #0]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800371c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003720:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003722:	2302      	movs	r3, #2
 8003724:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003726:	2301      	movs	r3, #1
 8003728:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800372a:	2303      	movs	r3, #3
 800372c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800372e:	2307      	movs	r3, #7
 8003730:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003732:	f7fd fec7 	bl	80014c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003736:	b007      	add	sp, #28
 8003738:	f85d fb04 	ldr.w	pc, [sp], #4
 800373c:	40011000 	.word	0x40011000
 8003740:	40020000 	.word	0x40020000

08003744 <NMI_Handler>:
 8003744:	4770      	bx	lr

08003746 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003746:	e7fe      	b.n	8003746 <HardFault_Handler>

08003748 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003748:	e7fe      	b.n	8003748 <MemManage_Handler>

0800374a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800374a:	e7fe      	b.n	800374a <BusFault_Handler>

0800374c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800374c:	e7fe      	b.n	800374c <UsageFault_Handler>

0800374e <SVC_Handler>:
 800374e:	4770      	bx	lr

08003750 <DebugMon_Handler>:
 8003750:	4770      	bx	lr

08003752 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003752:	4770      	bx	lr

08003754 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003754:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003756:	f7fd fc19 	bl	8000f8c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800375a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 800375e:	f7fd beac 	b.w	80014ba <HAL_SYSTICK_IRQHandler>
	...

08003764 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003764:	490f      	ldr	r1, [pc, #60]	; (80037a4 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003766:	2000      	movs	r0, #0
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003768:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800376c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003774:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <SystemInit+0x44>)
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	f042 0201 	orr.w	r2, r2, #1
 800377c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800377e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003786:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800378a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800378c:	4a07      	ldr	r2, [pc, #28]	; (80037ac <SystemInit+0x48>)
 800378e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003796:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003798:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800379a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800379e:	608b      	str	r3, [r1, #8]
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	e000ed00 	.word	0xe000ed00
 80037a8:	40023800 	.word	0x40023800
 80037ac:	24003010 	.word	0x24003010

080037b0 <__libc_init_array>:
 80037b0:	b570      	push	{r4, r5, r6, lr}
 80037b2:	4b0e      	ldr	r3, [pc, #56]	; (80037ec <__libc_init_array+0x3c>)
 80037b4:	4c0e      	ldr	r4, [pc, #56]	; (80037f0 <__libc_init_array+0x40>)
 80037b6:	1ae4      	subs	r4, r4, r3
 80037b8:	10a4      	asrs	r4, r4, #2
 80037ba:	2500      	movs	r5, #0
 80037bc:	461e      	mov	r6, r3
 80037be:	42a5      	cmp	r5, r4
 80037c0:	d004      	beq.n	80037cc <__libc_init_array+0x1c>
 80037c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037c6:	4798      	blx	r3
 80037c8:	3501      	adds	r5, #1
 80037ca:	e7f8      	b.n	80037be <__libc_init_array+0xe>
 80037cc:	f002 feea 	bl	80065a4 <_init>
 80037d0:	4c08      	ldr	r4, [pc, #32]	; (80037f4 <__libc_init_array+0x44>)
 80037d2:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <__libc_init_array+0x48>)
 80037d4:	1ae4      	subs	r4, r4, r3
 80037d6:	10a4      	asrs	r4, r4, #2
 80037d8:	2500      	movs	r5, #0
 80037da:	461e      	mov	r6, r3
 80037dc:	42a5      	cmp	r5, r4
 80037de:	d004      	beq.n	80037ea <__libc_init_array+0x3a>
 80037e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037e4:	4798      	blx	r3
 80037e6:	3501      	adds	r5, #1
 80037e8:	e7f8      	b.n	80037dc <__libc_init_array+0x2c>
 80037ea:	bd70      	pop	{r4, r5, r6, pc}
 80037ec:	08006774 	.word	0x08006774
 80037f0:	08006774 	.word	0x08006774
 80037f4:	08006778 	.word	0x08006778
 80037f8:	08006774 	.word	0x08006774

080037fc <sprintf>:
 80037fc:	b40e      	push	{r1, r2, r3}
 80037fe:	b500      	push	{lr}
 8003800:	b09c      	sub	sp, #112	; 0x70
 8003802:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003806:	ab1d      	add	r3, sp, #116	; 0x74
 8003808:	f8ad 1014 	strh.w	r1, [sp, #20]
 800380c:	9002      	str	r0, [sp, #8]
 800380e:	9006      	str	r0, [sp, #24]
 8003810:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003814:	480a      	ldr	r0, [pc, #40]	; (8003840 <sprintf+0x44>)
 8003816:	9104      	str	r1, [sp, #16]
 8003818:	9107      	str	r1, [sp, #28]
 800381a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800381e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003822:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003826:	6800      	ldr	r0, [r0, #0]
 8003828:	9301      	str	r3, [sp, #4]
 800382a:	a902      	add	r1, sp, #8
 800382c:	f000 f80c 	bl	8003848 <_svfprintf_r>
 8003830:	9b02      	ldr	r3, [sp, #8]
 8003832:	2200      	movs	r2, #0
 8003834:	701a      	strb	r2, [r3, #0]
 8003836:	b01c      	add	sp, #112	; 0x70
 8003838:	f85d eb04 	ldr.w	lr, [sp], #4
 800383c:	b003      	add	sp, #12
 800383e:	4770      	bx	lr
 8003840:	200000f4 	.word	0x200000f4
 8003844:	00000000 	.word	0x00000000

08003848 <_svfprintf_r>:
 8003848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800384c:	b0bd      	sub	sp, #244	; 0xf4
 800384e:	468b      	mov	fp, r1
 8003850:	9205      	str	r2, [sp, #20]
 8003852:	461f      	mov	r7, r3
 8003854:	4682      	mov	sl, r0
 8003856:	f001 fdeb 	bl	8005430 <_localeconv_r>
 800385a:	6803      	ldr	r3, [r0, #0]
 800385c:	930d      	str	r3, [sp, #52]	; 0x34
 800385e:	4618      	mov	r0, r3
 8003860:	f7fc fcd6 	bl	8000210 <strlen>
 8003864:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8003868:	9008      	str	r0, [sp, #32]
 800386a:	0619      	lsls	r1, r3, #24
 800386c:	d515      	bpl.n	800389a <_svfprintf_r+0x52>
 800386e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8003872:	b993      	cbnz	r3, 800389a <_svfprintf_r+0x52>
 8003874:	2140      	movs	r1, #64	; 0x40
 8003876:	4650      	mov	r0, sl
 8003878:	f001 fde6 	bl	8005448 <_malloc_r>
 800387c:	f8cb 0000 	str.w	r0, [fp]
 8003880:	f8cb 0010 	str.w	r0, [fp, #16]
 8003884:	b930      	cbnz	r0, 8003894 <_svfprintf_r+0x4c>
 8003886:	230c      	movs	r3, #12
 8003888:	f8ca 3000 	str.w	r3, [sl]
 800388c:	f04f 30ff 	mov.w	r0, #4294967295
 8003890:	f000 bf95 	b.w	80047be <_svfprintf_r+0xf76>
 8003894:	2340      	movs	r3, #64	; 0x40
 8003896:	f8cb 3014 	str.w	r3, [fp, #20]
 800389a:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8003b00 <_svfprintf_r+0x2b8>
 800389e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80038a2:	2300      	movs	r3, #0
 80038a4:	ac2c      	add	r4, sp, #176	; 0xb0
 80038a6:	941f      	str	r4, [sp, #124]	; 0x7c
 80038a8:	9321      	str	r3, [sp, #132]	; 0x84
 80038aa:	9320      	str	r3, [sp, #128]	; 0x80
 80038ac:	9304      	str	r3, [sp, #16]
 80038ae:	9311      	str	r3, [sp, #68]	; 0x44
 80038b0:	9310      	str	r3, [sp, #64]	; 0x40
 80038b2:	930a      	str	r3, [sp, #40]	; 0x28
 80038b4:	9d05      	ldr	r5, [sp, #20]
 80038b6:	462b      	mov	r3, r5
 80038b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038bc:	b11a      	cbz	r2, 80038c6 <_svfprintf_r+0x7e>
 80038be:	2a25      	cmp	r2, #37	; 0x25
 80038c0:	d001      	beq.n	80038c6 <_svfprintf_r+0x7e>
 80038c2:	461d      	mov	r5, r3
 80038c4:	e7f7      	b.n	80038b6 <_svfprintf_r+0x6e>
 80038c6:	9b05      	ldr	r3, [sp, #20]
 80038c8:	1aee      	subs	r6, r5, r3
 80038ca:	d017      	beq.n	80038fc <_svfprintf_r+0xb4>
 80038cc:	e884 0048 	stmia.w	r4, {r3, r6}
 80038d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80038d2:	4433      	add	r3, r6
 80038d4:	9321      	str	r3, [sp, #132]	; 0x84
 80038d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80038d8:	3301      	adds	r3, #1
 80038da:	2b07      	cmp	r3, #7
 80038dc:	9320      	str	r3, [sp, #128]	; 0x80
 80038de:	dc01      	bgt.n	80038e4 <_svfprintf_r+0x9c>
 80038e0:	3408      	adds	r4, #8
 80038e2:	e008      	b.n	80038f6 <_svfprintf_r+0xae>
 80038e4:	aa1f      	add	r2, sp, #124	; 0x7c
 80038e6:	4659      	mov	r1, fp
 80038e8:	4650      	mov	r0, sl
 80038ea:	f002 fac1 	bl	8005e70 <__ssprint_r>
 80038ee:	2800      	cmp	r0, #0
 80038f0:	f040 862c 	bne.w	800454c <_svfprintf_r+0xd04>
 80038f4:	ac2c      	add	r4, sp, #176	; 0xb0
 80038f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038f8:	4433      	add	r3, r6
 80038fa:	930a      	str	r3, [sp, #40]	; 0x28
 80038fc:	782b      	ldrb	r3, [r5, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 861d 	beq.w	800453e <_svfprintf_r+0xcf6>
 8003904:	2200      	movs	r2, #0
 8003906:	1c6b      	adds	r3, r5, #1
 8003908:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800390c:	4611      	mov	r1, r2
 800390e:	f04f 39ff 	mov.w	r9, #4294967295
 8003912:	9209      	str	r2, [sp, #36]	; 0x24
 8003914:	4615      	mov	r5, r2
 8003916:	200a      	movs	r0, #10
 8003918:	1c5e      	adds	r6, r3, #1
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	9605      	str	r6, [sp, #20]
 800391e:	9302      	str	r3, [sp, #8]
 8003920:	9b02      	ldr	r3, [sp, #8]
 8003922:	3b20      	subs	r3, #32
 8003924:	2b58      	cmp	r3, #88	; 0x58
 8003926:	f200 8263 	bhi.w	8003df0 <_svfprintf_r+0x5a8>
 800392a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800392e:	005c      	.short	0x005c
 8003930:	02610261 	.word	0x02610261
 8003934:	0261006b 	.word	0x0261006b
 8003938:	02610261 	.word	0x02610261
 800393c:	02610261 	.word	0x02610261
 8003940:	006e0261 	.word	0x006e0261
 8003944:	02610059 	.word	0x02610059
 8003948:	007c0079 	.word	0x007c0079
 800394c:	00a30261 	.word	0x00a30261
 8003950:	00a600a6 	.word	0x00a600a6
 8003954:	00a600a6 	.word	0x00a600a6
 8003958:	00a600a6 	.word	0x00a600a6
 800395c:	00a600a6 	.word	0x00a600a6
 8003960:	026100a6 	.word	0x026100a6
 8003964:	02610261 	.word	0x02610261
 8003968:	02610261 	.word	0x02610261
 800396c:	02610261 	.word	0x02610261
 8003970:	02610261 	.word	0x02610261
 8003974:	00d60261 	.word	0x00d60261
 8003978:	0261010b 	.word	0x0261010b
 800397c:	0261010b 	.word	0x0261010b
 8003980:	02610261 	.word	0x02610261
 8003984:	00b90261 	.word	0x00b90261
 8003988:	02610261 	.word	0x02610261
 800398c:	02610152 	.word	0x02610152
 8003990:	02610261 	.word	0x02610261
 8003994:	02610261 	.word	0x02610261
 8003998:	02610199 	.word	0x02610199
 800399c:	00660261 	.word	0x00660261
 80039a0:	02610261 	.word	0x02610261
 80039a4:	02610261 	.word	0x02610261
 80039a8:	02610261 	.word	0x02610261
 80039ac:	02610261 	.word	0x02610261
 80039b0:	02610261 	.word	0x02610261
 80039b4:	006100cd 	.word	0x006100cd
 80039b8:	010b010b 	.word	0x010b010b
 80039bc:	00bc010b 	.word	0x00bc010b
 80039c0:	02610061 	.word	0x02610061
 80039c4:	00bf0261 	.word	0x00bf0261
 80039c8:	01340261 	.word	0x01340261
 80039cc:	016f0154 	.word	0x016f0154
 80039d0:	026100ca 	.word	0x026100ca
 80039d4:	02610180 	.word	0x02610180
 80039d8:	0261019b 	.word	0x0261019b
 80039dc:	01b30261 	.word	0x01b30261
 80039e0:	2201      	movs	r2, #1
 80039e2:	212b      	movs	r1, #43	; 0x2b
 80039e4:	e002      	b.n	80039ec <_svfprintf_r+0x1a4>
 80039e6:	b909      	cbnz	r1, 80039ec <_svfprintf_r+0x1a4>
 80039e8:	2201      	movs	r2, #1
 80039ea:	2120      	movs	r1, #32
 80039ec:	9b05      	ldr	r3, [sp, #20]
 80039ee:	e793      	b.n	8003918 <_svfprintf_r+0xd0>
 80039f0:	2a00      	cmp	r2, #0
 80039f2:	d077      	beq.n	8003ae4 <_svfprintf_r+0x29c>
 80039f4:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80039f8:	e074      	b.n	8003ae4 <_svfprintf_r+0x29c>
 80039fa:	b10a      	cbz	r2, 8003a00 <_svfprintf_r+0x1b8>
 80039fc:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8003a00:	4b41      	ldr	r3, [pc, #260]	; (8003b08 <_svfprintf_r+0x2c0>)
 8003a02:	e14b      	b.n	8003c9c <_svfprintf_r+0x454>
 8003a04:	f045 0501 	orr.w	r5, r5, #1
 8003a08:	e7f0      	b.n	80039ec <_svfprintf_r+0x1a4>
 8003a0a:	683e      	ldr	r6, [r7, #0]
 8003a0c:	9609      	str	r6, [sp, #36]	; 0x24
 8003a0e:	2e00      	cmp	r6, #0
 8003a10:	f107 0304 	add.w	r3, r7, #4
 8003a14:	db01      	blt.n	8003a1a <_svfprintf_r+0x1d2>
 8003a16:	461f      	mov	r7, r3
 8003a18:	e7e8      	b.n	80039ec <_svfprintf_r+0x1a4>
 8003a1a:	4276      	negs	r6, r6
 8003a1c:	9609      	str	r6, [sp, #36]	; 0x24
 8003a1e:	461f      	mov	r7, r3
 8003a20:	f045 0504 	orr.w	r5, r5, #4
 8003a24:	e7e2      	b.n	80039ec <_svfprintf_r+0x1a4>
 8003a26:	9e05      	ldr	r6, [sp, #20]
 8003a28:	9b05      	ldr	r3, [sp, #20]
 8003a2a:	7836      	ldrb	r6, [r6, #0]
 8003a2c:	9602      	str	r6, [sp, #8]
 8003a2e:	2e2a      	cmp	r6, #42	; 0x2a
 8003a30:	f103 0301 	add.w	r3, r3, #1
 8003a34:	d002      	beq.n	8003a3c <_svfprintf_r+0x1f4>
 8003a36:	f04f 0900 	mov.w	r9, #0
 8003a3a:	e00a      	b.n	8003a52 <_svfprintf_r+0x20a>
 8003a3c:	f8d7 9000 	ldr.w	r9, [r7]
 8003a40:	9305      	str	r3, [sp, #20]
 8003a42:	1d3e      	adds	r6, r7, #4
 8003a44:	f1b9 0f00 	cmp.w	r9, #0
 8003a48:	4637      	mov	r7, r6
 8003a4a:	dacf      	bge.n	80039ec <_svfprintf_r+0x1a4>
 8003a4c:	f04f 39ff 	mov.w	r9, #4294967295
 8003a50:	e7cc      	b.n	80039ec <_svfprintf_r+0x1a4>
 8003a52:	9305      	str	r3, [sp, #20]
 8003a54:	9b02      	ldr	r3, [sp, #8]
 8003a56:	3b30      	subs	r3, #48	; 0x30
 8003a58:	2b09      	cmp	r3, #9
 8003a5a:	d808      	bhi.n	8003a6e <_svfprintf_r+0x226>
 8003a5c:	fb00 3909 	mla	r9, r0, r9, r3
 8003a60:	9b05      	ldr	r3, [sp, #20]
 8003a62:	461e      	mov	r6, r3
 8003a64:	f816 3b01 	ldrb.w	r3, [r6], #1
 8003a68:	9302      	str	r3, [sp, #8]
 8003a6a:	4633      	mov	r3, r6
 8003a6c:	e7f1      	b.n	8003a52 <_svfprintf_r+0x20a>
 8003a6e:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
 8003a72:	e755      	b.n	8003920 <_svfprintf_r+0xd8>
 8003a74:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8003a78:	e7b8      	b.n	80039ec <_svfprintf_r+0x1a4>
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a7e:	9b02      	ldr	r3, [sp, #8]
 8003a80:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003a82:	3b30      	subs	r3, #48	; 0x30
 8003a84:	fb00 3306 	mla	r3, r0, r6, r3
 8003a88:	9309      	str	r3, [sp, #36]	; 0x24
 8003a8a:	9b05      	ldr	r3, [sp, #20]
 8003a8c:	461e      	mov	r6, r3
 8003a8e:	f816 3b01 	ldrb.w	r3, [r6], #1
 8003a92:	9302      	str	r3, [sp, #8]
 8003a94:	9b02      	ldr	r3, [sp, #8]
 8003a96:	9605      	str	r6, [sp, #20]
 8003a98:	3b30      	subs	r3, #48	; 0x30
 8003a9a:	2b09      	cmp	r3, #9
 8003a9c:	d9ef      	bls.n	8003a7e <_svfprintf_r+0x236>
 8003a9e:	e73f      	b.n	8003920 <_svfprintf_r+0xd8>
 8003aa0:	f045 0508 	orr.w	r5, r5, #8
 8003aa4:	e7a2      	b.n	80039ec <_svfprintf_r+0x1a4>
 8003aa6:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8003aaa:	e79f      	b.n	80039ec <_svfprintf_r+0x1a4>
 8003aac:	9b05      	ldr	r3, [sp, #20]
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	2b6c      	cmp	r3, #108	; 0x6c
 8003ab2:	d103      	bne.n	8003abc <_svfprintf_r+0x274>
 8003ab4:	9b05      	ldr	r3, [sp, #20]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	9305      	str	r3, [sp, #20]
 8003aba:	e002      	b.n	8003ac2 <_svfprintf_r+0x27a>
 8003abc:	f045 0510 	orr.w	r5, r5, #16
 8003ac0:	e794      	b.n	80039ec <_svfprintf_r+0x1a4>
 8003ac2:	f045 0520 	orr.w	r5, r5, #32
 8003ac6:	e791      	b.n	80039ec <_svfprintf_r+0x1a4>
 8003ac8:	1d3b      	adds	r3, r7, #4
 8003aca:	9303      	str	r3, [sp, #12]
 8003acc:	2600      	movs	r6, #0
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8003ad4:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8003ad8:	e199      	b.n	8003e0e <_svfprintf_r+0x5c6>
 8003ada:	b10a      	cbz	r2, 8003ae0 <_svfprintf_r+0x298>
 8003adc:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8003ae0:	f045 0510 	orr.w	r5, r5, #16
 8003ae4:	06aa      	lsls	r2, r5, #26
 8003ae6:	d511      	bpl.n	8003b0c <_svfprintf_r+0x2c4>
 8003ae8:	3707      	adds	r7, #7
 8003aea:	f027 0707 	bic.w	r7, r7, #7
 8003aee:	f107 0308 	add.w	r3, r7, #8
 8003af2:	9303      	str	r3, [sp, #12]
 8003af4:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003af8:	e017      	b.n	8003b2a <_svfprintf_r+0x2e2>
 8003afa:	bf00      	nop
 8003afc:	f3af 8000 	nop.w
	...
 8003b08:	08006620 	.word	0x08006620
 8003b0c:	f015 0f10 	tst.w	r5, #16
 8003b10:	f107 0304 	add.w	r3, r7, #4
 8003b14:	d002      	beq.n	8003b1c <_svfprintf_r+0x2d4>
 8003b16:	9303      	str	r3, [sp, #12]
 8003b18:	683e      	ldr	r6, [r7, #0]
 8003b1a:	e005      	b.n	8003b28 <_svfprintf_r+0x2e0>
 8003b1c:	683e      	ldr	r6, [r7, #0]
 8003b1e:	9303      	str	r3, [sp, #12]
 8003b20:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003b24:	bf18      	it	ne
 8003b26:	b236      	sxthne	r6, r6
 8003b28:	17f7      	asrs	r7, r6, #31
 8003b2a:	2e00      	cmp	r6, #0
 8003b2c:	f177 0300 	sbcs.w	r3, r7, #0
 8003b30:	f280 80de 	bge.w	8003cf0 <_svfprintf_r+0x4a8>
 8003b34:	4276      	negs	r6, r6
 8003b36:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8003b3a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8003b3e:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8003b42:	e0d5      	b.n	8003cf0 <_svfprintf_r+0x4a8>
 8003b44:	b10a      	cbz	r2, 8003b4a <_svfprintf_r+0x302>
 8003b46:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8003b4a:	3707      	adds	r7, #7
 8003b4c:	f027 0707 	bic.w	r7, r7, #7
 8003b50:	f107 0308 	add.w	r3, r7, #8
 8003b54:	9303      	str	r3, [sp, #12]
 8003b56:	ed97 7b00 	vldr	d7, [r7]
 8003b5a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003b5e:	9b06      	ldr	r3, [sp, #24]
 8003b60:	9312      	str	r3, [sp, #72]	; 0x48
 8003b62:	9b07      	ldr	r3, [sp, #28]
 8003b64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b68:	9313      	str	r3, [sp, #76]	; 0x4c
 8003b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b6e:	4bab      	ldr	r3, [pc, #684]	; (8003e1c <_svfprintf_r+0x5d4>)
 8003b70:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8003b74:	f7fc fff6 	bl	8000b64 <__aeabi_dcmpun>
 8003b78:	2800      	cmp	r0, #0
 8003b7a:	f040 84f1 	bne.w	8004560 <_svfprintf_r+0xd18>
 8003b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8003b82:	4ba6      	ldr	r3, [pc, #664]	; (8003e1c <_svfprintf_r+0x5d4>)
 8003b84:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8003b88:	f7fc ffce 	bl	8000b28 <__aeabi_dcmple>
 8003b8c:	2800      	cmp	r0, #0
 8003b8e:	f040 84e7 	bne.w	8004560 <_svfprintf_r+0xd18>
 8003b92:	f000 bdfd 	b.w	8004790 <_svfprintf_r+0xf48>
 8003b96:	b10a      	cbz	r2, 8003b9c <_svfprintf_r+0x354>
 8003b98:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8003b9c:	f015 0f20 	tst.w	r5, #32
 8003ba0:	f107 0304 	add.w	r3, r7, #4
 8003ba4:	d007      	beq.n	8003bb6 <_svfprintf_r+0x36e>
 8003ba6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	17ce      	asrs	r6, r1, #31
 8003bac:	4608      	mov	r0, r1
 8003bae:	4631      	mov	r1, r6
 8003bb0:	e9c2 0100 	strd	r0, r1, [r2]
 8003bb4:	e00b      	b.n	8003bce <_svfprintf_r+0x386>
 8003bb6:	06e9      	lsls	r1, r5, #27
 8003bb8:	d406      	bmi.n	8003bc8 <_svfprintf_r+0x380>
 8003bba:	066a      	lsls	r2, r5, #25
 8003bbc:	d504      	bpl.n	8003bc8 <_svfprintf_r+0x380>
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8003bc4:	8011      	strh	r1, [r2, #0]
 8003bc6:	e002      	b.n	8003bce <_svfprintf_r+0x386>
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003bcc:	6011      	str	r1, [r2, #0]
 8003bce:	461f      	mov	r7, r3
 8003bd0:	e670      	b.n	80038b4 <_svfprintf_r+0x6c>
 8003bd2:	f045 0510 	orr.w	r5, r5, #16
 8003bd6:	f015 0320 	ands.w	r3, r5, #32
 8003bda:	d009      	beq.n	8003bf0 <_svfprintf_r+0x3a8>
 8003bdc:	3707      	adds	r7, #7
 8003bde:	f027 0707 	bic.w	r7, r7, #7
 8003be2:	f107 0308 	add.w	r3, r7, #8
 8003be6:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003bea:	9303      	str	r3, [sp, #12]
 8003bec:	2300      	movs	r3, #0
 8003bee:	e07b      	b.n	8003ce8 <_svfprintf_r+0x4a0>
 8003bf0:	1d3a      	adds	r2, r7, #4
 8003bf2:	f015 0110 	ands.w	r1, r5, #16
 8003bf6:	9203      	str	r2, [sp, #12]
 8003bf8:	d105      	bne.n	8003c06 <_svfprintf_r+0x3be>
 8003bfa:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8003bfe:	d002      	beq.n	8003c06 <_svfprintf_r+0x3be>
 8003c00:	883e      	ldrh	r6, [r7, #0]
 8003c02:	2700      	movs	r7, #0
 8003c04:	e7f2      	b.n	8003bec <_svfprintf_r+0x3a4>
 8003c06:	683e      	ldr	r6, [r7, #0]
 8003c08:	2700      	movs	r7, #0
 8003c0a:	e06d      	b.n	8003ce8 <_svfprintf_r+0x4a0>
 8003c0c:	1d3b      	adds	r3, r7, #4
 8003c0e:	9303      	str	r3, [sp, #12]
 8003c10:	2330      	movs	r3, #48	; 0x30
 8003c12:	2278      	movs	r2, #120	; 0x78
 8003c14:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8003c18:	4b81      	ldr	r3, [pc, #516]	; (8003e20 <_svfprintf_r+0x5d8>)
 8003c1a:	683e      	ldr	r6, [r7, #0]
 8003c1c:	9311      	str	r3, [sp, #68]	; 0x44
 8003c1e:	2700      	movs	r7, #0
 8003c20:	f045 0502 	orr.w	r5, r5, #2
 8003c24:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8003c28:	2302      	movs	r3, #2
 8003c2a:	9202      	str	r2, [sp, #8]
 8003c2c:	e05c      	b.n	8003ce8 <_svfprintf_r+0x4a0>
 8003c2e:	2600      	movs	r6, #0
 8003c30:	1d3b      	adds	r3, r7, #4
 8003c32:	45b1      	cmp	r9, r6
 8003c34:	9303      	str	r3, [sp, #12]
 8003c36:	f8d7 8000 	ldr.w	r8, [r7]
 8003c3a:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8003c3e:	db0a      	blt.n	8003c56 <_svfprintf_r+0x40e>
 8003c40:	464a      	mov	r2, r9
 8003c42:	4631      	mov	r1, r6
 8003c44:	4640      	mov	r0, r8
 8003c46:	f7fc faeb 	bl	8000220 <memchr>
 8003c4a:	2800      	cmp	r0, #0
 8003c4c:	f000 80ea 	beq.w	8003e24 <_svfprintf_r+0x5dc>
 8003c50:	ebc8 0900 	rsb	r9, r8, r0
 8003c54:	e0e7      	b.n	8003e26 <_svfprintf_r+0x5de>
 8003c56:	4640      	mov	r0, r8
 8003c58:	f7fc fada 	bl	8000210 <strlen>
 8003c5c:	4681      	mov	r9, r0
 8003c5e:	e0e2      	b.n	8003e26 <_svfprintf_r+0x5de>
 8003c60:	f045 0510 	orr.w	r5, r5, #16
 8003c64:	06ae      	lsls	r6, r5, #26
 8003c66:	d508      	bpl.n	8003c7a <_svfprintf_r+0x432>
 8003c68:	3707      	adds	r7, #7
 8003c6a:	f027 0707 	bic.w	r7, r7, #7
 8003c6e:	f107 0308 	add.w	r3, r7, #8
 8003c72:	9303      	str	r3, [sp, #12]
 8003c74:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003c78:	e00a      	b.n	8003c90 <_svfprintf_r+0x448>
 8003c7a:	1d3b      	adds	r3, r7, #4
 8003c7c:	f015 0f10 	tst.w	r5, #16
 8003c80:	9303      	str	r3, [sp, #12]
 8003c82:	d103      	bne.n	8003c8c <_svfprintf_r+0x444>
 8003c84:	0668      	lsls	r0, r5, #25
 8003c86:	d501      	bpl.n	8003c8c <_svfprintf_r+0x444>
 8003c88:	883e      	ldrh	r6, [r7, #0]
 8003c8a:	e000      	b.n	8003c8e <_svfprintf_r+0x446>
 8003c8c:	683e      	ldr	r6, [r7, #0]
 8003c8e:	2700      	movs	r7, #0
 8003c90:	2301      	movs	r3, #1
 8003c92:	e029      	b.n	8003ce8 <_svfprintf_r+0x4a0>
 8003c94:	b10a      	cbz	r2, 8003c9a <_svfprintf_r+0x452>
 8003c96:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8003c9a:	4b61      	ldr	r3, [pc, #388]	; (8003e20 <_svfprintf_r+0x5d8>)
 8003c9c:	9311      	str	r3, [sp, #68]	; 0x44
 8003c9e:	06a9      	lsls	r1, r5, #26
 8003ca0:	d508      	bpl.n	8003cb4 <_svfprintf_r+0x46c>
 8003ca2:	3707      	adds	r7, #7
 8003ca4:	f027 0707 	bic.w	r7, r7, #7
 8003ca8:	f107 0308 	add.w	r3, r7, #8
 8003cac:	9303      	str	r3, [sp, #12]
 8003cae:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003cb2:	e00a      	b.n	8003cca <_svfprintf_r+0x482>
 8003cb4:	1d3b      	adds	r3, r7, #4
 8003cb6:	f015 0f10 	tst.w	r5, #16
 8003cba:	9303      	str	r3, [sp, #12]
 8003cbc:	d103      	bne.n	8003cc6 <_svfprintf_r+0x47e>
 8003cbe:	066a      	lsls	r2, r5, #25
 8003cc0:	d501      	bpl.n	8003cc6 <_svfprintf_r+0x47e>
 8003cc2:	883e      	ldrh	r6, [r7, #0]
 8003cc4:	e000      	b.n	8003cc8 <_svfprintf_r+0x480>
 8003cc6:	683e      	ldr	r6, [r7, #0]
 8003cc8:	2700      	movs	r7, #0
 8003cca:	07eb      	lsls	r3, r5, #31
 8003ccc:	d50b      	bpl.n	8003ce6 <_svfprintf_r+0x49e>
 8003cce:	ea56 0307 	orrs.w	r3, r6, r7
 8003cd2:	d008      	beq.n	8003ce6 <_svfprintf_r+0x49e>
 8003cd4:	2330      	movs	r3, #48	; 0x30
 8003cd6:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8003cda:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003cde:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8003ce2:	f045 0502 	orr.w	r5, r5, #2
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003cee:	e000      	b.n	8003cf2 <_svfprintf_r+0x4aa>
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	f1b9 0f00 	cmp.w	r9, #0
 8003cf6:	f2c0 855c 	blt.w	80047b2 <_svfprintf_r+0xf6a>
 8003cfa:	ea56 0207 	orrs.w	r2, r6, r7
 8003cfe:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 8003d02:	d103      	bne.n	8003d0c <_svfprintf_r+0x4c4>
 8003d04:	f1b9 0f00 	cmp.w	r9, #0
 8003d08:	d05f      	beq.n	8003dca <_svfprintf_r+0x582>
 8003d0a:	e006      	b.n	8003d1a <_svfprintf_r+0x4d2>
 8003d0c:	460d      	mov	r5, r1
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d025      	beq.n	8003d5e <_svfprintf_r+0x516>
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d046      	beq.n	8003da4 <_svfprintf_r+0x55c>
 8003d16:	4629      	mov	r1, r5
 8003d18:	e007      	b.n	8003d2a <_svfprintf_r+0x4e2>
 8003d1a:	460d      	mov	r5, r1
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d022      	beq.n	8003d66 <_svfprintf_r+0x51e>
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d03d      	beq.n	8003da0 <_svfprintf_r+0x558>
 8003d24:	4629      	mov	r1, r5
 8003d26:	2600      	movs	r6, #0
 8003d28:	2700      	movs	r7, #0
 8003d2a:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8003d2e:	08f2      	lsrs	r2, r6, #3
 8003d30:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8003d34:	08f8      	lsrs	r0, r7, #3
 8003d36:	f006 0307 	and.w	r3, r6, #7
 8003d3a:	4607      	mov	r7, r0
 8003d3c:	4616      	mov	r6, r2
 8003d3e:	3330      	adds	r3, #48	; 0x30
 8003d40:	ea56 0207 	orrs.w	r2, r6, r7
 8003d44:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8003d48:	d1f1      	bne.n	8003d2e <_svfprintf_r+0x4e6>
 8003d4a:	07e8      	lsls	r0, r5, #31
 8003d4c:	d548      	bpl.n	8003de0 <_svfprintf_r+0x598>
 8003d4e:	2b30      	cmp	r3, #48	; 0x30
 8003d50:	d046      	beq.n	8003de0 <_svfprintf_r+0x598>
 8003d52:	2330      	movs	r3, #48	; 0x30
 8003d54:	f808 3c01 	strb.w	r3, [r8, #-1]
 8003d58:	f108 38ff 	add.w	r8, r8, #4294967295
 8003d5c:	e040      	b.n	8003de0 <_svfprintf_r+0x598>
 8003d5e:	2f00      	cmp	r7, #0
 8003d60:	bf08      	it	eq
 8003d62:	2e0a      	cmpeq	r6, #10
 8003d64:	d205      	bcs.n	8003d72 <_svfprintf_r+0x52a>
 8003d66:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8003d6a:	3630      	adds	r6, #48	; 0x30
 8003d6c:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8003d70:	e029      	b.n	8003dc6 <_svfprintf_r+0x57e>
 8003d72:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8003d76:	4630      	mov	r0, r6
 8003d78:	4639      	mov	r1, r7
 8003d7a:	220a      	movs	r2, #10
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f7fc ff2f 	bl	8000be0 <__aeabi_uldivmod>
 8003d82:	3230      	adds	r2, #48	; 0x30
 8003d84:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8003d88:	2300      	movs	r3, #0
 8003d8a:	4630      	mov	r0, r6
 8003d8c:	4639      	mov	r1, r7
 8003d8e:	220a      	movs	r2, #10
 8003d90:	f7fc ff26 	bl	8000be0 <__aeabi_uldivmod>
 8003d94:	4606      	mov	r6, r0
 8003d96:	460f      	mov	r7, r1
 8003d98:	ea56 0307 	orrs.w	r3, r6, r7
 8003d9c:	d1eb      	bne.n	8003d76 <_svfprintf_r+0x52e>
 8003d9e:	e012      	b.n	8003dc6 <_svfprintf_r+0x57e>
 8003da0:	2600      	movs	r6, #0
 8003da2:	2700      	movs	r7, #0
 8003da4:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8003da8:	f006 030f 	and.w	r3, r6, #15
 8003dac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003dae:	5cd3      	ldrb	r3, [r2, r3]
 8003db0:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8003db4:	0933      	lsrs	r3, r6, #4
 8003db6:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8003dba:	093a      	lsrs	r2, r7, #4
 8003dbc:	461e      	mov	r6, r3
 8003dbe:	4617      	mov	r7, r2
 8003dc0:	ea56 0307 	orrs.w	r3, r6, r7
 8003dc4:	d1f0      	bne.n	8003da8 <_svfprintf_r+0x560>
 8003dc6:	4629      	mov	r1, r5
 8003dc8:	e00a      	b.n	8003de0 <_svfprintf_r+0x598>
 8003dca:	b93b      	cbnz	r3, 8003ddc <_svfprintf_r+0x594>
 8003dcc:	07ea      	lsls	r2, r5, #31
 8003dce:	d505      	bpl.n	8003ddc <_svfprintf_r+0x594>
 8003dd0:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8003dd4:	2330      	movs	r3, #48	; 0x30
 8003dd6:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8003dda:	e001      	b.n	8003de0 <_svfprintf_r+0x598>
 8003ddc:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8003de0:	464e      	mov	r6, r9
 8003de2:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8003de6:	ebc8 0909 	rsb	r9, r8, r9
 8003dea:	460d      	mov	r5, r1
 8003dec:	2700      	movs	r7, #0
 8003dee:	e01b      	b.n	8003e28 <_svfprintf_r+0x5e0>
 8003df0:	b10a      	cbz	r2, 8003df6 <_svfprintf_r+0x5ae>
 8003df2:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8003df6:	9b02      	ldr	r3, [sp, #8]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 83a0 	beq.w	800453e <_svfprintf_r+0xcf6>
 8003dfe:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003e02:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8003e06:	2600      	movs	r6, #0
 8003e08:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8003e0c:	9703      	str	r7, [sp, #12]
 8003e0e:	f04f 0901 	mov.w	r9, #1
 8003e12:	4637      	mov	r7, r6
 8003e14:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8003e18:	e006      	b.n	8003e28 <_svfprintf_r+0x5e0>
 8003e1a:	bf00      	nop
 8003e1c:	7fefffff 	.word	0x7fefffff
 8003e20:	08006631 	.word	0x08006631
 8003e24:	4606      	mov	r6, r0
 8003e26:	4637      	mov	r7, r6
 8003e28:	454e      	cmp	r6, r9
 8003e2a:	4633      	mov	r3, r6
 8003e2c:	bfb8      	it	lt
 8003e2e:	464b      	movlt	r3, r9
 8003e30:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e32:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8003e36:	b113      	cbz	r3, 8003e3e <_svfprintf_r+0x5f6>
 8003e38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e3e:	f015 0302 	ands.w	r3, r5, #2
 8003e42:	9314      	str	r3, [sp, #80]	; 0x50
 8003e44:	bf1e      	ittt	ne
 8003e46:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8003e48:	3302      	addne	r3, #2
 8003e4a:	930b      	strne	r3, [sp, #44]	; 0x2c
 8003e4c:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8003e50:	9315      	str	r3, [sp, #84]	; 0x54
 8003e52:	d139      	bne.n	8003ec8 <_svfprintf_r+0x680>
 8003e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003e58:	1a9b      	subs	r3, r3, r2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	930c      	str	r3, [sp, #48]	; 0x30
 8003e5e:	dd33      	ble.n	8003ec8 <_svfprintf_r+0x680>
 8003e60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003e62:	2b10      	cmp	r3, #16
 8003e64:	4ba6      	ldr	r3, [pc, #664]	; (8004100 <_svfprintf_r+0x8b8>)
 8003e66:	6023      	str	r3, [r4, #0]
 8003e68:	dd18      	ble.n	8003e9c <_svfprintf_r+0x654>
 8003e6a:	2310      	movs	r3, #16
 8003e6c:	6063      	str	r3, [r4, #4]
 8003e6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003e70:	3310      	adds	r3, #16
 8003e72:	9321      	str	r3, [sp, #132]	; 0x84
 8003e74:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003e76:	3301      	adds	r3, #1
 8003e78:	2b07      	cmp	r3, #7
 8003e7a:	9320      	str	r3, [sp, #128]	; 0x80
 8003e7c:	dc01      	bgt.n	8003e82 <_svfprintf_r+0x63a>
 8003e7e:	3408      	adds	r4, #8
 8003e80:	e008      	b.n	8003e94 <_svfprintf_r+0x64c>
 8003e82:	aa1f      	add	r2, sp, #124	; 0x7c
 8003e84:	4659      	mov	r1, fp
 8003e86:	4650      	mov	r0, sl
 8003e88:	f001 fff2 	bl	8005e70 <__ssprint_r>
 8003e8c:	2800      	cmp	r0, #0
 8003e8e:	f040 835d 	bne.w	800454c <_svfprintf_r+0xd04>
 8003e92:	ac2c      	add	r4, sp, #176	; 0xb0
 8003e94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003e96:	3b10      	subs	r3, #16
 8003e98:	930c      	str	r3, [sp, #48]	; 0x30
 8003e9a:	e7e1      	b.n	8003e60 <_svfprintf_r+0x618>
 8003e9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003e9e:	6063      	str	r3, [r4, #4]
 8003ea0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003ea2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ea4:	4413      	add	r3, r2
 8003ea6:	9321      	str	r3, [sp, #132]	; 0x84
 8003ea8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003eaa:	3301      	adds	r3, #1
 8003eac:	2b07      	cmp	r3, #7
 8003eae:	9320      	str	r3, [sp, #128]	; 0x80
 8003eb0:	dc01      	bgt.n	8003eb6 <_svfprintf_r+0x66e>
 8003eb2:	3408      	adds	r4, #8
 8003eb4:	e008      	b.n	8003ec8 <_svfprintf_r+0x680>
 8003eb6:	aa1f      	add	r2, sp, #124	; 0x7c
 8003eb8:	4659      	mov	r1, fp
 8003eba:	4650      	mov	r0, sl
 8003ebc:	f001 ffd8 	bl	8005e70 <__ssprint_r>
 8003ec0:	2800      	cmp	r0, #0
 8003ec2:	f040 8343 	bne.w	800454c <_svfprintf_r+0xd04>
 8003ec6:	ac2c      	add	r4, sp, #176	; 0xb0
 8003ec8:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8003ecc:	b1bb      	cbz	r3, 8003efe <_svfprintf_r+0x6b6>
 8003ece:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8003ed2:	6023      	str	r3, [r4, #0]
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	6063      	str	r3, [r4, #4]
 8003ed8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003eda:	3301      	adds	r3, #1
 8003edc:	9321      	str	r3, [sp, #132]	; 0x84
 8003ede:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	2b07      	cmp	r3, #7
 8003ee4:	9320      	str	r3, [sp, #128]	; 0x80
 8003ee6:	dc01      	bgt.n	8003eec <_svfprintf_r+0x6a4>
 8003ee8:	3408      	adds	r4, #8
 8003eea:	e008      	b.n	8003efe <_svfprintf_r+0x6b6>
 8003eec:	aa1f      	add	r2, sp, #124	; 0x7c
 8003eee:	4659      	mov	r1, fp
 8003ef0:	4650      	mov	r0, sl
 8003ef2:	f001 ffbd 	bl	8005e70 <__ssprint_r>
 8003ef6:	2800      	cmp	r0, #0
 8003ef8:	f040 8328 	bne.w	800454c <_svfprintf_r+0xd04>
 8003efc:	ac2c      	add	r4, sp, #176	; 0xb0
 8003efe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003f00:	b1b3      	cbz	r3, 8003f30 <_svfprintf_r+0x6e8>
 8003f02:	ab18      	add	r3, sp, #96	; 0x60
 8003f04:	6023      	str	r3, [r4, #0]
 8003f06:	2302      	movs	r3, #2
 8003f08:	6063      	str	r3, [r4, #4]
 8003f0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f0c:	3302      	adds	r3, #2
 8003f0e:	9321      	str	r3, [sp, #132]	; 0x84
 8003f10:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003f12:	3301      	adds	r3, #1
 8003f14:	2b07      	cmp	r3, #7
 8003f16:	9320      	str	r3, [sp, #128]	; 0x80
 8003f18:	dc01      	bgt.n	8003f1e <_svfprintf_r+0x6d6>
 8003f1a:	3408      	adds	r4, #8
 8003f1c:	e008      	b.n	8003f30 <_svfprintf_r+0x6e8>
 8003f1e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003f20:	4659      	mov	r1, fp
 8003f22:	4650      	mov	r0, sl
 8003f24:	f001 ffa4 	bl	8005e70 <__ssprint_r>
 8003f28:	2800      	cmp	r0, #0
 8003f2a:	f040 830f 	bne.w	800454c <_svfprintf_r+0xd04>
 8003f2e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003f30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003f32:	2b80      	cmp	r3, #128	; 0x80
 8003f34:	d135      	bne.n	8003fa2 <_svfprintf_r+0x75a>
 8003f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003f3a:	1a9b      	subs	r3, r3, r2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	dd30      	ble.n	8003fa2 <_svfprintf_r+0x75a>
 8003f40:	4a70      	ldr	r2, [pc, #448]	; (8004104 <_svfprintf_r+0x8bc>)
 8003f42:	6022      	str	r2, [r4, #0]
 8003f44:	2b10      	cmp	r3, #16
 8003f46:	dd18      	ble.n	8003f7a <_svfprintf_r+0x732>
 8003f48:	2210      	movs	r2, #16
 8003f4a:	6062      	str	r2, [r4, #4]
 8003f4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003f4e:	3210      	adds	r2, #16
 8003f50:	9221      	str	r2, [sp, #132]	; 0x84
 8003f52:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003f54:	3201      	adds	r2, #1
 8003f56:	2a07      	cmp	r2, #7
 8003f58:	9220      	str	r2, [sp, #128]	; 0x80
 8003f5a:	dc01      	bgt.n	8003f60 <_svfprintf_r+0x718>
 8003f5c:	3408      	adds	r4, #8
 8003f5e:	e00a      	b.n	8003f76 <_svfprintf_r+0x72e>
 8003f60:	aa1f      	add	r2, sp, #124	; 0x7c
 8003f62:	4659      	mov	r1, fp
 8003f64:	4650      	mov	r0, sl
 8003f66:	930c      	str	r3, [sp, #48]	; 0x30
 8003f68:	f001 ff82 	bl	8005e70 <__ssprint_r>
 8003f6c:	2800      	cmp	r0, #0
 8003f6e:	f040 82ed 	bne.w	800454c <_svfprintf_r+0xd04>
 8003f72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f74:	ac2c      	add	r4, sp, #176	; 0xb0
 8003f76:	3b10      	subs	r3, #16
 8003f78:	e7e2      	b.n	8003f40 <_svfprintf_r+0x6f8>
 8003f7a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003f7c:	6063      	str	r3, [r4, #4]
 8003f7e:	4413      	add	r3, r2
 8003f80:	9321      	str	r3, [sp, #132]	; 0x84
 8003f82:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003f84:	3301      	adds	r3, #1
 8003f86:	2b07      	cmp	r3, #7
 8003f88:	9320      	str	r3, [sp, #128]	; 0x80
 8003f8a:	dc01      	bgt.n	8003f90 <_svfprintf_r+0x748>
 8003f8c:	3408      	adds	r4, #8
 8003f8e:	e008      	b.n	8003fa2 <_svfprintf_r+0x75a>
 8003f90:	aa1f      	add	r2, sp, #124	; 0x7c
 8003f92:	4659      	mov	r1, fp
 8003f94:	4650      	mov	r0, sl
 8003f96:	f001 ff6b 	bl	8005e70 <__ssprint_r>
 8003f9a:	2800      	cmp	r0, #0
 8003f9c:	f040 82d6 	bne.w	800454c <_svfprintf_r+0xd04>
 8003fa0:	ac2c      	add	r4, sp, #176	; 0xb0
 8003fa2:	ebc9 0606 	rsb	r6, r9, r6
 8003fa6:	2e00      	cmp	r6, #0
 8003fa8:	dd2e      	ble.n	8004008 <_svfprintf_r+0x7c0>
 8003faa:	4b56      	ldr	r3, [pc, #344]	; (8004104 <_svfprintf_r+0x8bc>)
 8003fac:	6023      	str	r3, [r4, #0]
 8003fae:	2e10      	cmp	r6, #16
 8003fb0:	dd16      	ble.n	8003fe0 <_svfprintf_r+0x798>
 8003fb2:	2310      	movs	r3, #16
 8003fb4:	6063      	str	r3, [r4, #4]
 8003fb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003fb8:	3310      	adds	r3, #16
 8003fba:	9321      	str	r3, [sp, #132]	; 0x84
 8003fbc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	2b07      	cmp	r3, #7
 8003fc2:	9320      	str	r3, [sp, #128]	; 0x80
 8003fc4:	dc01      	bgt.n	8003fca <_svfprintf_r+0x782>
 8003fc6:	3408      	adds	r4, #8
 8003fc8:	e008      	b.n	8003fdc <_svfprintf_r+0x794>
 8003fca:	aa1f      	add	r2, sp, #124	; 0x7c
 8003fcc:	4659      	mov	r1, fp
 8003fce:	4650      	mov	r0, sl
 8003fd0:	f001 ff4e 	bl	8005e70 <__ssprint_r>
 8003fd4:	2800      	cmp	r0, #0
 8003fd6:	f040 82b9 	bne.w	800454c <_svfprintf_r+0xd04>
 8003fda:	ac2c      	add	r4, sp, #176	; 0xb0
 8003fdc:	3e10      	subs	r6, #16
 8003fde:	e7e4      	b.n	8003faa <_svfprintf_r+0x762>
 8003fe0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003fe2:	9821      	ldr	r0, [sp, #132]	; 0x84
 8003fe4:	6066      	str	r6, [r4, #4]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	4406      	add	r6, r0
 8003fea:	2b07      	cmp	r3, #7
 8003fec:	9621      	str	r6, [sp, #132]	; 0x84
 8003fee:	9320      	str	r3, [sp, #128]	; 0x80
 8003ff0:	dc01      	bgt.n	8003ff6 <_svfprintf_r+0x7ae>
 8003ff2:	3408      	adds	r4, #8
 8003ff4:	e008      	b.n	8004008 <_svfprintf_r+0x7c0>
 8003ff6:	aa1f      	add	r2, sp, #124	; 0x7c
 8003ff8:	4659      	mov	r1, fp
 8003ffa:	4650      	mov	r0, sl
 8003ffc:	f001 ff38 	bl	8005e70 <__ssprint_r>
 8004000:	2800      	cmp	r0, #0
 8004002:	f040 82a3 	bne.w	800454c <_svfprintf_r+0xd04>
 8004006:	ac2c      	add	r4, sp, #176	; 0xb0
 8004008:	05eb      	lsls	r3, r5, #23
 800400a:	d414      	bmi.n	8004036 <_svfprintf_r+0x7ee>
 800400c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800400e:	e884 0300 	stmia.w	r4, {r8, r9}
 8004012:	444b      	add	r3, r9
 8004014:	9321      	str	r3, [sp, #132]	; 0x84
 8004016:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004018:	3301      	adds	r3, #1
 800401a:	2b07      	cmp	r3, #7
 800401c:	9320      	str	r3, [sp, #128]	; 0x80
 800401e:	f340 8244 	ble.w	80044aa <_svfprintf_r+0xc62>
 8004022:	aa1f      	add	r2, sp, #124	; 0x7c
 8004024:	4659      	mov	r1, fp
 8004026:	4650      	mov	r0, sl
 8004028:	f001 ff22 	bl	8005e70 <__ssprint_r>
 800402c:	2800      	cmp	r0, #0
 800402e:	f040 828d 	bne.w	800454c <_svfprintf_r+0xd04>
 8004032:	ac2c      	add	r4, sp, #176	; 0xb0
 8004034:	e23a      	b.n	80044ac <_svfprintf_r+0xc64>
 8004036:	9b02      	ldr	r3, [sp, #8]
 8004038:	2b65      	cmp	r3, #101	; 0x65
 800403a:	f340 81ad 	ble.w	8004398 <_svfprintf_r+0xb50>
 800403e:	2200      	movs	r2, #0
 8004040:	2300      	movs	r3, #0
 8004042:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004046:	f7fc fd5b 	bl	8000b00 <__aeabi_dcmpeq>
 800404a:	2800      	cmp	r0, #0
 800404c:	d05e      	beq.n	800410c <_svfprintf_r+0x8c4>
 800404e:	4b2e      	ldr	r3, [pc, #184]	; (8004108 <_svfprintf_r+0x8c0>)
 8004050:	6023      	str	r3, [r4, #0]
 8004052:	2301      	movs	r3, #1
 8004054:	6063      	str	r3, [r4, #4]
 8004056:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004058:	3301      	adds	r3, #1
 800405a:	9321      	str	r3, [sp, #132]	; 0x84
 800405c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800405e:	3301      	adds	r3, #1
 8004060:	2b07      	cmp	r3, #7
 8004062:	9320      	str	r3, [sp, #128]	; 0x80
 8004064:	dc01      	bgt.n	800406a <_svfprintf_r+0x822>
 8004066:	3408      	adds	r4, #8
 8004068:	e008      	b.n	800407c <_svfprintf_r+0x834>
 800406a:	aa1f      	add	r2, sp, #124	; 0x7c
 800406c:	4659      	mov	r1, fp
 800406e:	4650      	mov	r0, sl
 8004070:	f001 fefe 	bl	8005e70 <__ssprint_r>
 8004074:	2800      	cmp	r0, #0
 8004076:	f040 8269 	bne.w	800454c <_svfprintf_r+0xd04>
 800407a:	ac2c      	add	r4, sp, #176	; 0xb0
 800407c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800407e:	9a04      	ldr	r2, [sp, #16]
 8004080:	4293      	cmp	r3, r2
 8004082:	db02      	blt.n	800408a <_svfprintf_r+0x842>
 8004084:	07ee      	lsls	r6, r5, #31
 8004086:	f140 8211 	bpl.w	80044ac <_svfprintf_r+0xc64>
 800408a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800408c:	6023      	str	r3, [r4, #0]
 800408e:	9b08      	ldr	r3, [sp, #32]
 8004090:	6063      	str	r3, [r4, #4]
 8004092:	9a08      	ldr	r2, [sp, #32]
 8004094:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004096:	4413      	add	r3, r2
 8004098:	9321      	str	r3, [sp, #132]	; 0x84
 800409a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800409c:	3301      	adds	r3, #1
 800409e:	2b07      	cmp	r3, #7
 80040a0:	9320      	str	r3, [sp, #128]	; 0x80
 80040a2:	dc01      	bgt.n	80040a8 <_svfprintf_r+0x860>
 80040a4:	3408      	adds	r4, #8
 80040a6:	e008      	b.n	80040ba <_svfprintf_r+0x872>
 80040a8:	aa1f      	add	r2, sp, #124	; 0x7c
 80040aa:	4659      	mov	r1, fp
 80040ac:	4650      	mov	r0, sl
 80040ae:	f001 fedf 	bl	8005e70 <__ssprint_r>
 80040b2:	2800      	cmp	r0, #0
 80040b4:	f040 824a 	bne.w	800454c <_svfprintf_r+0xd04>
 80040b8:	ac2c      	add	r4, sp, #176	; 0xb0
 80040ba:	9b04      	ldr	r3, [sp, #16]
 80040bc:	1e5e      	subs	r6, r3, #1
 80040be:	2e00      	cmp	r6, #0
 80040c0:	f340 81f4 	ble.w	80044ac <_svfprintf_r+0xc64>
 80040c4:	4f0f      	ldr	r7, [pc, #60]	; (8004104 <_svfprintf_r+0x8bc>)
 80040c6:	f04f 0810 	mov.w	r8, #16
 80040ca:	2e10      	cmp	r6, #16
 80040cc:	f340 8159 	ble.w	8004382 <_svfprintf_r+0xb3a>
 80040d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80040d2:	3310      	adds	r3, #16
 80040d4:	9321      	str	r3, [sp, #132]	; 0x84
 80040d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80040d8:	3301      	adds	r3, #1
 80040da:	2b07      	cmp	r3, #7
 80040dc:	e884 0180 	stmia.w	r4, {r7, r8}
 80040e0:	9320      	str	r3, [sp, #128]	; 0x80
 80040e2:	dc01      	bgt.n	80040e8 <_svfprintf_r+0x8a0>
 80040e4:	3408      	adds	r4, #8
 80040e6:	e008      	b.n	80040fa <_svfprintf_r+0x8b2>
 80040e8:	aa1f      	add	r2, sp, #124	; 0x7c
 80040ea:	4659      	mov	r1, fp
 80040ec:	4650      	mov	r0, sl
 80040ee:	f001 febf 	bl	8005e70 <__ssprint_r>
 80040f2:	2800      	cmp	r0, #0
 80040f4:	f040 822a 	bne.w	800454c <_svfprintf_r+0xd04>
 80040f8:	ac2c      	add	r4, sp, #176	; 0xb0
 80040fa:	3e10      	subs	r6, #16
 80040fc:	e7e5      	b.n	80040ca <_svfprintf_r+0x882>
 80040fe:	bf00      	nop
 8004100:	08006644 	.word	0x08006644
 8004104:	08006600 	.word	0x08006600
 8004108:	08006642 	.word	0x08006642
 800410c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800410e:	2b00      	cmp	r3, #0
 8004110:	dc7c      	bgt.n	800420c <_svfprintf_r+0x9c4>
 8004112:	4b9f      	ldr	r3, [pc, #636]	; (8004390 <_svfprintf_r+0xb48>)
 8004114:	6023      	str	r3, [r4, #0]
 8004116:	2301      	movs	r3, #1
 8004118:	6063      	str	r3, [r4, #4]
 800411a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800411c:	3301      	adds	r3, #1
 800411e:	9321      	str	r3, [sp, #132]	; 0x84
 8004120:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004122:	3301      	adds	r3, #1
 8004124:	2b07      	cmp	r3, #7
 8004126:	9320      	str	r3, [sp, #128]	; 0x80
 8004128:	dc01      	bgt.n	800412e <_svfprintf_r+0x8e6>
 800412a:	3408      	adds	r4, #8
 800412c:	e008      	b.n	8004140 <_svfprintf_r+0x8f8>
 800412e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004130:	4659      	mov	r1, fp
 8004132:	4650      	mov	r0, sl
 8004134:	f001 fe9c 	bl	8005e70 <__ssprint_r>
 8004138:	2800      	cmp	r0, #0
 800413a:	f040 8207 	bne.w	800454c <_svfprintf_r+0xd04>
 800413e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004140:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004142:	b923      	cbnz	r3, 800414e <_svfprintf_r+0x906>
 8004144:	9b04      	ldr	r3, [sp, #16]
 8004146:	b913      	cbnz	r3, 800414e <_svfprintf_r+0x906>
 8004148:	07e8      	lsls	r0, r5, #31
 800414a:	f140 81af 	bpl.w	80044ac <_svfprintf_r+0xc64>
 800414e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004150:	6023      	str	r3, [r4, #0]
 8004152:	9b08      	ldr	r3, [sp, #32]
 8004154:	6063      	str	r3, [r4, #4]
 8004156:	9a08      	ldr	r2, [sp, #32]
 8004158:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800415a:	4413      	add	r3, r2
 800415c:	9321      	str	r3, [sp, #132]	; 0x84
 800415e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004160:	3301      	adds	r3, #1
 8004162:	2b07      	cmp	r3, #7
 8004164:	9320      	str	r3, [sp, #128]	; 0x80
 8004166:	dc02      	bgt.n	800416e <_svfprintf_r+0x926>
 8004168:	f104 0308 	add.w	r3, r4, #8
 800416c:	e008      	b.n	8004180 <_svfprintf_r+0x938>
 800416e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004170:	4659      	mov	r1, fp
 8004172:	4650      	mov	r0, sl
 8004174:	f001 fe7c 	bl	8005e70 <__ssprint_r>
 8004178:	2800      	cmp	r0, #0
 800417a:	f040 81e7 	bne.w	800454c <_svfprintf_r+0xd04>
 800417e:	ab2c      	add	r3, sp, #176	; 0xb0
 8004180:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8004182:	4276      	negs	r6, r6
 8004184:	2e00      	cmp	r6, #0
 8004186:	dd30      	ble.n	80041ea <_svfprintf_r+0x9a2>
 8004188:	4f82      	ldr	r7, [pc, #520]	; (8004394 <_svfprintf_r+0xb4c>)
 800418a:	2410      	movs	r4, #16
 800418c:	2e10      	cmp	r6, #16
 800418e:	dd16      	ble.n	80041be <_svfprintf_r+0x976>
 8004190:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004192:	601f      	str	r7, [r3, #0]
 8004194:	3210      	adds	r2, #16
 8004196:	9221      	str	r2, [sp, #132]	; 0x84
 8004198:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800419a:	605c      	str	r4, [r3, #4]
 800419c:	3201      	adds	r2, #1
 800419e:	2a07      	cmp	r2, #7
 80041a0:	9220      	str	r2, [sp, #128]	; 0x80
 80041a2:	dc01      	bgt.n	80041a8 <_svfprintf_r+0x960>
 80041a4:	3308      	adds	r3, #8
 80041a6:	e008      	b.n	80041ba <_svfprintf_r+0x972>
 80041a8:	aa1f      	add	r2, sp, #124	; 0x7c
 80041aa:	4659      	mov	r1, fp
 80041ac:	4650      	mov	r0, sl
 80041ae:	f001 fe5f 	bl	8005e70 <__ssprint_r>
 80041b2:	2800      	cmp	r0, #0
 80041b4:	f040 81ca 	bne.w	800454c <_svfprintf_r+0xd04>
 80041b8:	ab2c      	add	r3, sp, #176	; 0xb0
 80041ba:	3e10      	subs	r6, #16
 80041bc:	e7e6      	b.n	800418c <_svfprintf_r+0x944>
 80041be:	4a75      	ldr	r2, [pc, #468]	; (8004394 <_svfprintf_r+0xb4c>)
 80041c0:	e883 0044 	stmia.w	r3, {r2, r6}
 80041c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80041c6:	4416      	add	r6, r2
 80041c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80041ca:	9621      	str	r6, [sp, #132]	; 0x84
 80041cc:	3201      	adds	r2, #1
 80041ce:	2a07      	cmp	r2, #7
 80041d0:	9220      	str	r2, [sp, #128]	; 0x80
 80041d2:	dc01      	bgt.n	80041d8 <_svfprintf_r+0x990>
 80041d4:	3308      	adds	r3, #8
 80041d6:	e008      	b.n	80041ea <_svfprintf_r+0x9a2>
 80041d8:	aa1f      	add	r2, sp, #124	; 0x7c
 80041da:	4659      	mov	r1, fp
 80041dc:	4650      	mov	r0, sl
 80041de:	f001 fe47 	bl	8005e70 <__ssprint_r>
 80041e2:	2800      	cmp	r0, #0
 80041e4:	f040 81b2 	bne.w	800454c <_svfprintf_r+0xd04>
 80041e8:	ab2c      	add	r3, sp, #176	; 0xb0
 80041ea:	9a04      	ldr	r2, [sp, #16]
 80041ec:	605a      	str	r2, [r3, #4]
 80041ee:	9904      	ldr	r1, [sp, #16]
 80041f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80041f2:	f8c3 8000 	str.w	r8, [r3]
 80041f6:	440a      	add	r2, r1
 80041f8:	9221      	str	r2, [sp, #132]	; 0x84
 80041fa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80041fc:	3201      	adds	r2, #1
 80041fe:	2a07      	cmp	r2, #7
 8004200:	9220      	str	r2, [sp, #128]	; 0x80
 8004202:	f73f af0e 	bgt.w	8004022 <_svfprintf_r+0x7da>
 8004206:	f103 0408 	add.w	r4, r3, #8
 800420a:	e14f      	b.n	80044ac <_svfprintf_r+0xc64>
 800420c:	9b04      	ldr	r3, [sp, #16]
 800420e:	42bb      	cmp	r3, r7
 8004210:	bfa8      	it	ge
 8004212:	463b      	movge	r3, r7
 8004214:	2b00      	cmp	r3, #0
 8004216:	461e      	mov	r6, r3
 8004218:	dd15      	ble.n	8004246 <_svfprintf_r+0x9fe>
 800421a:	6063      	str	r3, [r4, #4]
 800421c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800421e:	f8c4 8000 	str.w	r8, [r4]
 8004222:	4433      	add	r3, r6
 8004224:	9321      	str	r3, [sp, #132]	; 0x84
 8004226:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004228:	3301      	adds	r3, #1
 800422a:	2b07      	cmp	r3, #7
 800422c:	9320      	str	r3, [sp, #128]	; 0x80
 800422e:	dc01      	bgt.n	8004234 <_svfprintf_r+0x9ec>
 8004230:	3408      	adds	r4, #8
 8004232:	e008      	b.n	8004246 <_svfprintf_r+0x9fe>
 8004234:	aa1f      	add	r2, sp, #124	; 0x7c
 8004236:	4659      	mov	r1, fp
 8004238:	4650      	mov	r0, sl
 800423a:	f001 fe19 	bl	8005e70 <__ssprint_r>
 800423e:	2800      	cmp	r0, #0
 8004240:	f040 8184 	bne.w	800454c <_svfprintf_r+0xd04>
 8004244:	ac2c      	add	r4, sp, #176	; 0xb0
 8004246:	2e00      	cmp	r6, #0
 8004248:	bfac      	ite	ge
 800424a:	1bbe      	subge	r6, r7, r6
 800424c:	463e      	movlt	r6, r7
 800424e:	2e00      	cmp	r6, #0
 8004250:	dd30      	ble.n	80042b4 <_svfprintf_r+0xa6c>
 8004252:	f04f 0910 	mov.w	r9, #16
 8004256:	4b4f      	ldr	r3, [pc, #316]	; (8004394 <_svfprintf_r+0xb4c>)
 8004258:	6023      	str	r3, [r4, #0]
 800425a:	2e10      	cmp	r6, #16
 800425c:	dd16      	ble.n	800428c <_svfprintf_r+0xa44>
 800425e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004260:	f8c4 9004 	str.w	r9, [r4, #4]
 8004264:	3310      	adds	r3, #16
 8004266:	9321      	str	r3, [sp, #132]	; 0x84
 8004268:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800426a:	3301      	adds	r3, #1
 800426c:	2b07      	cmp	r3, #7
 800426e:	9320      	str	r3, [sp, #128]	; 0x80
 8004270:	dc01      	bgt.n	8004276 <_svfprintf_r+0xa2e>
 8004272:	3408      	adds	r4, #8
 8004274:	e008      	b.n	8004288 <_svfprintf_r+0xa40>
 8004276:	aa1f      	add	r2, sp, #124	; 0x7c
 8004278:	4659      	mov	r1, fp
 800427a:	4650      	mov	r0, sl
 800427c:	f001 fdf8 	bl	8005e70 <__ssprint_r>
 8004280:	2800      	cmp	r0, #0
 8004282:	f040 8163 	bne.w	800454c <_svfprintf_r+0xd04>
 8004286:	ac2c      	add	r4, sp, #176	; 0xb0
 8004288:	3e10      	subs	r6, #16
 800428a:	e7e4      	b.n	8004256 <_svfprintf_r+0xa0e>
 800428c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800428e:	6066      	str	r6, [r4, #4]
 8004290:	441e      	add	r6, r3
 8004292:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004294:	9621      	str	r6, [sp, #132]	; 0x84
 8004296:	3301      	adds	r3, #1
 8004298:	2b07      	cmp	r3, #7
 800429a:	9320      	str	r3, [sp, #128]	; 0x80
 800429c:	dc01      	bgt.n	80042a2 <_svfprintf_r+0xa5a>
 800429e:	3408      	adds	r4, #8
 80042a0:	e008      	b.n	80042b4 <_svfprintf_r+0xa6c>
 80042a2:	aa1f      	add	r2, sp, #124	; 0x7c
 80042a4:	4659      	mov	r1, fp
 80042a6:	4650      	mov	r0, sl
 80042a8:	f001 fde2 	bl	8005e70 <__ssprint_r>
 80042ac:	2800      	cmp	r0, #0
 80042ae:	f040 814d 	bne.w	800454c <_svfprintf_r+0xd04>
 80042b2:	ac2c      	add	r4, sp, #176	; 0xb0
 80042b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80042b6:	9a04      	ldr	r2, [sp, #16]
 80042b8:	4293      	cmp	r3, r2
 80042ba:	4447      	add	r7, r8
 80042bc:	db01      	blt.n	80042c2 <_svfprintf_r+0xa7a>
 80042be:	07e9      	lsls	r1, r5, #31
 80042c0:	d517      	bpl.n	80042f2 <_svfprintf_r+0xaaa>
 80042c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042c4:	6023      	str	r3, [r4, #0]
 80042c6:	9b08      	ldr	r3, [sp, #32]
 80042c8:	6063      	str	r3, [r4, #4]
 80042ca:	9a08      	ldr	r2, [sp, #32]
 80042cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80042ce:	4413      	add	r3, r2
 80042d0:	9321      	str	r3, [sp, #132]	; 0x84
 80042d2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80042d4:	3301      	adds	r3, #1
 80042d6:	2b07      	cmp	r3, #7
 80042d8:	9320      	str	r3, [sp, #128]	; 0x80
 80042da:	dc01      	bgt.n	80042e0 <_svfprintf_r+0xa98>
 80042dc:	3408      	adds	r4, #8
 80042de:	e008      	b.n	80042f2 <_svfprintf_r+0xaaa>
 80042e0:	aa1f      	add	r2, sp, #124	; 0x7c
 80042e2:	4659      	mov	r1, fp
 80042e4:	4650      	mov	r0, sl
 80042e6:	f001 fdc3 	bl	8005e70 <__ssprint_r>
 80042ea:	2800      	cmp	r0, #0
 80042ec:	f040 812e 	bne.w	800454c <_svfprintf_r+0xd04>
 80042f0:	ac2c      	add	r4, sp, #176	; 0xb0
 80042f2:	9b04      	ldr	r3, [sp, #16]
 80042f4:	9a04      	ldr	r2, [sp, #16]
 80042f6:	eb08 0603 	add.w	r6, r8, r3
 80042fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80042fc:	1bf6      	subs	r6, r6, r7
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	429e      	cmp	r6, r3
 8004302:	bfa8      	it	ge
 8004304:	461e      	movge	r6, r3
 8004306:	2e00      	cmp	r6, #0
 8004308:	dd14      	ble.n	8004334 <_svfprintf_r+0xaec>
 800430a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800430c:	6027      	str	r7, [r4, #0]
 800430e:	4433      	add	r3, r6
 8004310:	9321      	str	r3, [sp, #132]	; 0x84
 8004312:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004314:	6066      	str	r6, [r4, #4]
 8004316:	3301      	adds	r3, #1
 8004318:	2b07      	cmp	r3, #7
 800431a:	9320      	str	r3, [sp, #128]	; 0x80
 800431c:	dc01      	bgt.n	8004322 <_svfprintf_r+0xada>
 800431e:	3408      	adds	r4, #8
 8004320:	e008      	b.n	8004334 <_svfprintf_r+0xaec>
 8004322:	aa1f      	add	r2, sp, #124	; 0x7c
 8004324:	4659      	mov	r1, fp
 8004326:	4650      	mov	r0, sl
 8004328:	f001 fda2 	bl	8005e70 <__ssprint_r>
 800432c:	2800      	cmp	r0, #0
 800432e:	f040 810d 	bne.w	800454c <_svfprintf_r+0xd04>
 8004332:	ac2c      	add	r4, sp, #176	; 0xb0
 8004334:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004336:	9a04      	ldr	r2, [sp, #16]
 8004338:	2e00      	cmp	r6, #0
 800433a:	eba2 0303 	sub.w	r3, r2, r3
 800433e:	bfac      	ite	ge
 8004340:	1b9e      	subge	r6, r3, r6
 8004342:	461e      	movlt	r6, r3
 8004344:	2e00      	cmp	r6, #0
 8004346:	f340 80b1 	ble.w	80044ac <_svfprintf_r+0xc64>
 800434a:	4f12      	ldr	r7, [pc, #72]	; (8004394 <_svfprintf_r+0xb4c>)
 800434c:	f04f 0810 	mov.w	r8, #16
 8004350:	2e10      	cmp	r6, #16
 8004352:	dd16      	ble.n	8004382 <_svfprintf_r+0xb3a>
 8004354:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004356:	3310      	adds	r3, #16
 8004358:	9321      	str	r3, [sp, #132]	; 0x84
 800435a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800435c:	3301      	adds	r3, #1
 800435e:	2b07      	cmp	r3, #7
 8004360:	e884 0180 	stmia.w	r4, {r7, r8}
 8004364:	9320      	str	r3, [sp, #128]	; 0x80
 8004366:	dc01      	bgt.n	800436c <_svfprintf_r+0xb24>
 8004368:	3408      	adds	r4, #8
 800436a:	e008      	b.n	800437e <_svfprintf_r+0xb36>
 800436c:	aa1f      	add	r2, sp, #124	; 0x7c
 800436e:	4659      	mov	r1, fp
 8004370:	4650      	mov	r0, sl
 8004372:	f001 fd7d 	bl	8005e70 <__ssprint_r>
 8004376:	2800      	cmp	r0, #0
 8004378:	f040 80e8 	bne.w	800454c <_svfprintf_r+0xd04>
 800437c:	ac2c      	add	r4, sp, #176	; 0xb0
 800437e:	3e10      	subs	r6, #16
 8004380:	e7e6      	b.n	8004350 <_svfprintf_r+0xb08>
 8004382:	4b04      	ldr	r3, [pc, #16]	; (8004394 <_svfprintf_r+0xb4c>)
 8004384:	e884 0048 	stmia.w	r4, {r3, r6}
 8004388:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800438a:	441e      	add	r6, r3
 800438c:	9621      	str	r6, [sp, #132]	; 0x84
 800438e:	e642      	b.n	8004016 <_svfprintf_r+0x7ce>
 8004390:	08006642 	.word	0x08006642
 8004394:	08006600 	.word	0x08006600
 8004398:	9b04      	ldr	r3, [sp, #16]
 800439a:	2b01      	cmp	r3, #1
 800439c:	dc01      	bgt.n	80043a2 <_svfprintf_r+0xb5a>
 800439e:	07ea      	lsls	r2, r5, #31
 80043a0:	d573      	bpl.n	800448a <_svfprintf_r+0xc42>
 80043a2:	2301      	movs	r3, #1
 80043a4:	6063      	str	r3, [r4, #4]
 80043a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80043a8:	f8c4 8000 	str.w	r8, [r4]
 80043ac:	3301      	adds	r3, #1
 80043ae:	9321      	str	r3, [sp, #132]	; 0x84
 80043b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80043b2:	3301      	adds	r3, #1
 80043b4:	2b07      	cmp	r3, #7
 80043b6:	9320      	str	r3, [sp, #128]	; 0x80
 80043b8:	dc01      	bgt.n	80043be <_svfprintf_r+0xb76>
 80043ba:	3408      	adds	r4, #8
 80043bc:	e008      	b.n	80043d0 <_svfprintf_r+0xb88>
 80043be:	aa1f      	add	r2, sp, #124	; 0x7c
 80043c0:	4659      	mov	r1, fp
 80043c2:	4650      	mov	r0, sl
 80043c4:	f001 fd54 	bl	8005e70 <__ssprint_r>
 80043c8:	2800      	cmp	r0, #0
 80043ca:	f040 80bf 	bne.w	800454c <_svfprintf_r+0xd04>
 80043ce:	ac2c      	add	r4, sp, #176	; 0xb0
 80043d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043d2:	6023      	str	r3, [r4, #0]
 80043d4:	9b08      	ldr	r3, [sp, #32]
 80043d6:	6063      	str	r3, [r4, #4]
 80043d8:	9a08      	ldr	r2, [sp, #32]
 80043da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80043dc:	4413      	add	r3, r2
 80043de:	9321      	str	r3, [sp, #132]	; 0x84
 80043e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80043e2:	3301      	adds	r3, #1
 80043e4:	2b07      	cmp	r3, #7
 80043e6:	9320      	str	r3, [sp, #128]	; 0x80
 80043e8:	dc01      	bgt.n	80043ee <_svfprintf_r+0xba6>
 80043ea:	3408      	adds	r4, #8
 80043ec:	e008      	b.n	8004400 <_svfprintf_r+0xbb8>
 80043ee:	aa1f      	add	r2, sp, #124	; 0x7c
 80043f0:	4659      	mov	r1, fp
 80043f2:	4650      	mov	r0, sl
 80043f4:	f001 fd3c 	bl	8005e70 <__ssprint_r>
 80043f8:	2800      	cmp	r0, #0
 80043fa:	f040 80a7 	bne.w	800454c <_svfprintf_r+0xd04>
 80043fe:	ac2c      	add	r4, sp, #176	; 0xb0
 8004400:	2300      	movs	r3, #0
 8004402:	2200      	movs	r2, #0
 8004404:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004408:	f7fc fb7a 	bl	8000b00 <__aeabi_dcmpeq>
 800440c:	9b04      	ldr	r3, [sp, #16]
 800440e:	1e5e      	subs	r6, r3, #1
 8004410:	b9b8      	cbnz	r0, 8004442 <_svfprintf_r+0xbfa>
 8004412:	f108 0301 	add.w	r3, r8, #1
 8004416:	e884 0048 	stmia.w	r4, {r3, r6}
 800441a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800441c:	9a04      	ldr	r2, [sp, #16]
 800441e:	3b01      	subs	r3, #1
 8004420:	4413      	add	r3, r2
 8004422:	9321      	str	r3, [sp, #132]	; 0x84
 8004424:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004426:	3301      	adds	r3, #1
 8004428:	2b07      	cmp	r3, #7
 800442a:	9320      	str	r3, [sp, #128]	; 0x80
 800442c:	dd34      	ble.n	8004498 <_svfprintf_r+0xc50>
 800442e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004430:	4659      	mov	r1, fp
 8004432:	4650      	mov	r0, sl
 8004434:	f001 fd1c 	bl	8005e70 <__ssprint_r>
 8004438:	2800      	cmp	r0, #0
 800443a:	f040 8087 	bne.w	800454c <_svfprintf_r+0xd04>
 800443e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004440:	e02b      	b.n	800449a <_svfprintf_r+0xc52>
 8004442:	2e00      	cmp	r6, #0
 8004444:	dd29      	ble.n	800449a <_svfprintf_r+0xc52>
 8004446:	4fa7      	ldr	r7, [pc, #668]	; (80046e4 <_svfprintf_r+0xe9c>)
 8004448:	f04f 0810 	mov.w	r8, #16
 800444c:	2e10      	cmp	r6, #16
 800444e:	dd15      	ble.n	800447c <_svfprintf_r+0xc34>
 8004450:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004452:	3310      	adds	r3, #16
 8004454:	9321      	str	r3, [sp, #132]	; 0x84
 8004456:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004458:	3301      	adds	r3, #1
 800445a:	2b07      	cmp	r3, #7
 800445c:	e884 0180 	stmia.w	r4, {r7, r8}
 8004460:	9320      	str	r3, [sp, #128]	; 0x80
 8004462:	dc01      	bgt.n	8004468 <_svfprintf_r+0xc20>
 8004464:	3408      	adds	r4, #8
 8004466:	e007      	b.n	8004478 <_svfprintf_r+0xc30>
 8004468:	aa1f      	add	r2, sp, #124	; 0x7c
 800446a:	4659      	mov	r1, fp
 800446c:	4650      	mov	r0, sl
 800446e:	f001 fcff 	bl	8005e70 <__ssprint_r>
 8004472:	2800      	cmp	r0, #0
 8004474:	d16a      	bne.n	800454c <_svfprintf_r+0xd04>
 8004476:	ac2c      	add	r4, sp, #176	; 0xb0
 8004478:	3e10      	subs	r6, #16
 800447a:	e7e7      	b.n	800444c <_svfprintf_r+0xc04>
 800447c:	4b99      	ldr	r3, [pc, #612]	; (80046e4 <_svfprintf_r+0xe9c>)
 800447e:	e884 0048 	stmia.w	r4, {r3, r6}
 8004482:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004484:	441e      	add	r6, r3
 8004486:	9621      	str	r6, [sp, #132]	; 0x84
 8004488:	e7cc      	b.n	8004424 <_svfprintf_r+0xbdc>
 800448a:	2301      	movs	r3, #1
 800448c:	6063      	str	r3, [r4, #4]
 800448e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004490:	f8c4 8000 	str.w	r8, [r4]
 8004494:	3301      	adds	r3, #1
 8004496:	e7c4      	b.n	8004422 <_svfprintf_r+0xbda>
 8004498:	3408      	adds	r4, #8
 800449a:	ab1b      	add	r3, sp, #108	; 0x6c
 800449c:	6023      	str	r3, [r4, #0]
 800449e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80044a0:	6063      	str	r3, [r4, #4]
 80044a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80044a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80044a6:	4413      	add	r3, r2
 80044a8:	e5b4      	b.n	8004014 <_svfprintf_r+0x7cc>
 80044aa:	3408      	adds	r4, #8
 80044ac:	076b      	lsls	r3, r5, #29
 80044ae:	d40b      	bmi.n	80044c8 <_svfprintf_r+0xc80>
 80044b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044b6:	428a      	cmp	r2, r1
 80044b8:	bfac      	ite	ge
 80044ba:	189b      	addge	r3, r3, r2
 80044bc:	185b      	addlt	r3, r3, r1
 80044be:	930a      	str	r3, [sp, #40]	; 0x28
 80044c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d035      	beq.n	8004532 <_svfprintf_r+0xcea>
 80044c6:	e02e      	b.n	8004526 <_svfprintf_r+0xcde>
 80044c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80044cc:	1a9d      	subs	r5, r3, r2
 80044ce:	2d00      	cmp	r5, #0
 80044d0:	ddee      	ble.n	80044b0 <_svfprintf_r+0xc68>
 80044d2:	2610      	movs	r6, #16
 80044d4:	4b84      	ldr	r3, [pc, #528]	; (80046e8 <_svfprintf_r+0xea0>)
 80044d6:	6023      	str	r3, [r4, #0]
 80044d8:	2d10      	cmp	r5, #16
 80044da:	dd13      	ble.n	8004504 <_svfprintf_r+0xcbc>
 80044dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80044de:	6066      	str	r6, [r4, #4]
 80044e0:	3310      	adds	r3, #16
 80044e2:	9321      	str	r3, [sp, #132]	; 0x84
 80044e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80044e6:	3301      	adds	r3, #1
 80044e8:	2b07      	cmp	r3, #7
 80044ea:	9320      	str	r3, [sp, #128]	; 0x80
 80044ec:	dc01      	bgt.n	80044f2 <_svfprintf_r+0xcaa>
 80044ee:	3408      	adds	r4, #8
 80044f0:	e006      	b.n	8004500 <_svfprintf_r+0xcb8>
 80044f2:	aa1f      	add	r2, sp, #124	; 0x7c
 80044f4:	4659      	mov	r1, fp
 80044f6:	4650      	mov	r0, sl
 80044f8:	f001 fcba 	bl	8005e70 <__ssprint_r>
 80044fc:	bb30      	cbnz	r0, 800454c <_svfprintf_r+0xd04>
 80044fe:	ac2c      	add	r4, sp, #176	; 0xb0
 8004500:	3d10      	subs	r5, #16
 8004502:	e7e7      	b.n	80044d4 <_svfprintf_r+0xc8c>
 8004504:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004506:	6065      	str	r5, [r4, #4]
 8004508:	441d      	add	r5, r3
 800450a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800450c:	9521      	str	r5, [sp, #132]	; 0x84
 800450e:	3301      	adds	r3, #1
 8004510:	2b07      	cmp	r3, #7
 8004512:	9320      	str	r3, [sp, #128]	; 0x80
 8004514:	ddcc      	ble.n	80044b0 <_svfprintf_r+0xc68>
 8004516:	aa1f      	add	r2, sp, #124	; 0x7c
 8004518:	4659      	mov	r1, fp
 800451a:	4650      	mov	r0, sl
 800451c:	f001 fca8 	bl	8005e70 <__ssprint_r>
 8004520:	2800      	cmp	r0, #0
 8004522:	d0c5      	beq.n	80044b0 <_svfprintf_r+0xc68>
 8004524:	e012      	b.n	800454c <_svfprintf_r+0xd04>
 8004526:	aa1f      	add	r2, sp, #124	; 0x7c
 8004528:	4659      	mov	r1, fp
 800452a:	4650      	mov	r0, sl
 800452c:	f001 fca0 	bl	8005e70 <__ssprint_r>
 8004530:	b960      	cbnz	r0, 800454c <_svfprintf_r+0xd04>
 8004532:	2300      	movs	r3, #0
 8004534:	9320      	str	r3, [sp, #128]	; 0x80
 8004536:	9f03      	ldr	r7, [sp, #12]
 8004538:	ac2c      	add	r4, sp, #176	; 0xb0
 800453a:	f7ff b9bb 	b.w	80038b4 <_svfprintf_r+0x6c>
 800453e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004540:	b123      	cbz	r3, 800454c <_svfprintf_r+0xd04>
 8004542:	aa1f      	add	r2, sp, #124	; 0x7c
 8004544:	4659      	mov	r1, fp
 8004546:	4650      	mov	r0, sl
 8004548:	f001 fc92 	bl	8005e70 <__ssprint_r>
 800454c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8004550:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004556:	bf18      	it	ne
 8004558:	f04f 33ff 	movne.w	r3, #4294967295
 800455c:	4618      	mov	r0, r3
 800455e:	e12e      	b.n	80047be <_svfprintf_r+0xf76>
 8004560:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004564:	4610      	mov	r0, r2
 8004566:	4619      	mov	r1, r3
 8004568:	f7fc fafc 	bl	8000b64 <__aeabi_dcmpun>
 800456c:	b160      	cbz	r0, 8004588 <_svfprintf_r+0xd40>
 800456e:	4b5f      	ldr	r3, [pc, #380]	; (80046ec <_svfprintf_r+0xea4>)
 8004570:	4a5f      	ldr	r2, [pc, #380]	; (80046f0 <_svfprintf_r+0xea8>)
 8004572:	9902      	ldr	r1, [sp, #8]
 8004574:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8004578:	2947      	cmp	r1, #71	; 0x47
 800457a:	bfcc      	ite	gt
 800457c:	4690      	movgt	r8, r2
 800457e:	4698      	movle	r8, r3
 8004580:	f04f 0903 	mov.w	r9, #3
 8004584:	2600      	movs	r6, #0
 8004586:	e44e      	b.n	8003e26 <_svfprintf_r+0x5de>
 8004588:	f1b9 3fff 	cmp.w	r9, #4294967295
 800458c:	d00a      	beq.n	80045a4 <_svfprintf_r+0xd5c>
 800458e:	9b02      	ldr	r3, [sp, #8]
 8004590:	f023 0320 	bic.w	r3, r3, #32
 8004594:	2b47      	cmp	r3, #71	; 0x47
 8004596:	d107      	bne.n	80045a8 <_svfprintf_r+0xd60>
 8004598:	f1b9 0f00 	cmp.w	r9, #0
 800459c:	bf08      	it	eq
 800459e:	f04f 0901 	moveq.w	r9, #1
 80045a2:	e001      	b.n	80045a8 <_svfprintf_r+0xd60>
 80045a4:	f04f 0906 	mov.w	r9, #6
 80045a8:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 80045ac:	930c      	str	r3, [sp, #48]	; 0x30
 80045ae:	9b07      	ldr	r3, [sp, #28]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	da07      	bge.n	80045c4 <_svfprintf_r+0xd7c>
 80045b4:	9b06      	ldr	r3, [sp, #24]
 80045b6:	930e      	str	r3, [sp, #56]	; 0x38
 80045b8:	9b07      	ldr	r3, [sp, #28]
 80045ba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80045be:	930f      	str	r3, [sp, #60]	; 0x3c
 80045c0:	232d      	movs	r3, #45	; 0x2d
 80045c2:	e004      	b.n	80045ce <_svfprintf_r+0xd86>
 80045c4:	ed9d 7b06 	vldr	d7, [sp, #24]
 80045c8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80045cc:	2300      	movs	r3, #0
 80045ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80045d0:	9b02      	ldr	r3, [sp, #8]
 80045d2:	f023 0720 	bic.w	r7, r3, #32
 80045d6:	2f46      	cmp	r7, #70	; 0x46
 80045d8:	d004      	beq.n	80045e4 <_svfprintf_r+0xd9c>
 80045da:	2f45      	cmp	r7, #69	; 0x45
 80045dc:	d105      	bne.n	80045ea <_svfprintf_r+0xda2>
 80045de:	f109 0601 	add.w	r6, r9, #1
 80045e2:	e003      	b.n	80045ec <_svfprintf_r+0xda4>
 80045e4:	464e      	mov	r6, r9
 80045e6:	2103      	movs	r1, #3
 80045e8:	e001      	b.n	80045ee <_svfprintf_r+0xda6>
 80045ea:	464e      	mov	r6, r9
 80045ec:	2102      	movs	r1, #2
 80045ee:	ab1d      	add	r3, sp, #116	; 0x74
 80045f0:	9301      	str	r3, [sp, #4]
 80045f2:	ab1a      	add	r3, sp, #104	; 0x68
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	4632      	mov	r2, r6
 80045f8:	ab19      	add	r3, sp, #100	; 0x64
 80045fa:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 80045fe:	4650      	mov	r0, sl
 8004600:	f000 f976 	bl	80048f0 <_dtoa_r>
 8004604:	2f47      	cmp	r7, #71	; 0x47
 8004606:	4680      	mov	r8, r0
 8004608:	d102      	bne.n	8004610 <_svfprintf_r+0xdc8>
 800460a:	07eb      	lsls	r3, r5, #31
 800460c:	f140 80cd 	bpl.w	80047aa <_svfprintf_r+0xf62>
 8004610:	eb08 0306 	add.w	r3, r8, r6
 8004614:	2f46      	cmp	r7, #70	; 0x46
 8004616:	9304      	str	r3, [sp, #16]
 8004618:	d111      	bne.n	800463e <_svfprintf_r+0xdf6>
 800461a:	f898 3000 	ldrb.w	r3, [r8]
 800461e:	2b30      	cmp	r3, #48	; 0x30
 8004620:	d109      	bne.n	8004636 <_svfprintf_r+0xdee>
 8004622:	2200      	movs	r2, #0
 8004624:	2300      	movs	r3, #0
 8004626:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800462a:	f7fc fa69 	bl	8000b00 <__aeabi_dcmpeq>
 800462e:	b910      	cbnz	r0, 8004636 <_svfprintf_r+0xdee>
 8004630:	f1c6 0601 	rsb	r6, r6, #1
 8004634:	9619      	str	r6, [sp, #100]	; 0x64
 8004636:	9a04      	ldr	r2, [sp, #16]
 8004638:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800463a:	441a      	add	r2, r3
 800463c:	9204      	str	r2, [sp, #16]
 800463e:	2200      	movs	r2, #0
 8004640:	2300      	movs	r3, #0
 8004642:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004646:	f7fc fa5b 	bl	8000b00 <__aeabi_dcmpeq>
 800464a:	b908      	cbnz	r0, 8004650 <_svfprintf_r+0xe08>
 800464c:	2230      	movs	r2, #48	; 0x30
 800464e:	e002      	b.n	8004656 <_svfprintf_r+0xe0e>
 8004650:	9b04      	ldr	r3, [sp, #16]
 8004652:	931d      	str	r3, [sp, #116]	; 0x74
 8004654:	e007      	b.n	8004666 <_svfprintf_r+0xe1e>
 8004656:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004658:	9904      	ldr	r1, [sp, #16]
 800465a:	4299      	cmp	r1, r3
 800465c:	d903      	bls.n	8004666 <_svfprintf_r+0xe1e>
 800465e:	1c59      	adds	r1, r3, #1
 8004660:	911d      	str	r1, [sp, #116]	; 0x74
 8004662:	701a      	strb	r2, [r3, #0]
 8004664:	e7f7      	b.n	8004656 <_svfprintf_r+0xe0e>
 8004666:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004668:	2f47      	cmp	r7, #71	; 0x47
 800466a:	ebc8 0303 	rsb	r3, r8, r3
 800466e:	9304      	str	r3, [sp, #16]
 8004670:	d108      	bne.n	8004684 <_svfprintf_r+0xe3c>
 8004672:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004674:	1cdf      	adds	r7, r3, #3
 8004676:	db01      	blt.n	800467c <_svfprintf_r+0xe34>
 8004678:	4599      	cmp	r9, r3
 800467a:	da68      	bge.n	800474e <_svfprintf_r+0xf06>
 800467c:	9b02      	ldr	r3, [sp, #8]
 800467e:	3b02      	subs	r3, #2
 8004680:	9302      	str	r3, [sp, #8]
 8004682:	e002      	b.n	800468a <_svfprintf_r+0xe42>
 8004684:	9b02      	ldr	r3, [sp, #8]
 8004686:	2b65      	cmp	r3, #101	; 0x65
 8004688:	dc4a      	bgt.n	8004720 <_svfprintf_r+0xed8>
 800468a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800468c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8004690:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 8004694:	3b01      	subs	r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	9319      	str	r3, [sp, #100]	; 0x64
 800469a:	bfba      	itte	lt
 800469c:	425b      	neglt	r3, r3
 800469e:	222d      	movlt	r2, #45	; 0x2d
 80046a0:	222b      	movge	r2, #43	; 0x2b
 80046a2:	2b09      	cmp	r3, #9
 80046a4:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 80046a8:	dd24      	ble.n	80046f4 <_svfprintf_r+0xeac>
 80046aa:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 80046ae:	200a      	movs	r0, #10
 80046b0:	fb93 f1f0 	sdiv	r1, r3, r0
 80046b4:	fb00 3311 	mls	r3, r0, r1, r3
 80046b8:	3330      	adds	r3, #48	; 0x30
 80046ba:	2909      	cmp	r1, #9
 80046bc:	f802 3d01 	strb.w	r3, [r2, #-1]!
 80046c0:	460b      	mov	r3, r1
 80046c2:	dcf5      	bgt.n	80046b0 <_svfprintf_r+0xe68>
 80046c4:	3330      	adds	r3, #48	; 0x30
 80046c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80046ca:	1e51      	subs	r1, r2, #1
 80046cc:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 80046d0:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 80046d4:	4281      	cmp	r1, r0
 80046d6:	461a      	mov	r2, r3
 80046d8:	d213      	bcs.n	8004702 <_svfprintf_r+0xeba>
 80046da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046de:	f803 2b01 	strb.w	r2, [r3], #1
 80046e2:	e7f7      	b.n	80046d4 <_svfprintf_r+0xe8c>
 80046e4:	08006600 	.word	0x08006600
 80046e8:	08006644 	.word	0x08006644
 80046ec:	08006618 	.word	0x08006618
 80046f0:	0800661c 	.word	0x0800661c
 80046f4:	2230      	movs	r2, #48	; 0x30
 80046f6:	4413      	add	r3, r2
 80046f8:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 80046fc:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8004700:	aa1c      	add	r2, sp, #112	; 0x70
 8004702:	ab1b      	add	r3, sp, #108	; 0x6c
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	9a04      	ldr	r2, [sp, #16]
 8004708:	9310      	str	r3, [sp, #64]	; 0x40
 800470a:	2a01      	cmp	r2, #1
 800470c:	eb03 0902 	add.w	r9, r3, r2
 8004710:	dc02      	bgt.n	8004718 <_svfprintf_r+0xed0>
 8004712:	f015 0701 	ands.w	r7, r5, #1
 8004716:	d032      	beq.n	800477e <_svfprintf_r+0xf36>
 8004718:	9b08      	ldr	r3, [sp, #32]
 800471a:	2700      	movs	r7, #0
 800471c:	4499      	add	r9, r3
 800471e:	e02e      	b.n	800477e <_svfprintf_r+0xf36>
 8004720:	9b02      	ldr	r3, [sp, #8]
 8004722:	2b66      	cmp	r3, #102	; 0x66
 8004724:	d113      	bne.n	800474e <_svfprintf_r+0xf06>
 8004726:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004728:	2b00      	cmp	r3, #0
 800472a:	dd07      	ble.n	800473c <_svfprintf_r+0xef4>
 800472c:	f1b9 0f00 	cmp.w	r9, #0
 8004730:	d101      	bne.n	8004736 <_svfprintf_r+0xeee>
 8004732:	07ee      	lsls	r6, r5, #31
 8004734:	d521      	bpl.n	800477a <_svfprintf_r+0xf32>
 8004736:	9a08      	ldr	r2, [sp, #32]
 8004738:	4413      	add	r3, r2
 800473a:	e006      	b.n	800474a <_svfprintf_r+0xf02>
 800473c:	f1b9 0f00 	cmp.w	r9, #0
 8004740:	d101      	bne.n	8004746 <_svfprintf_r+0xefe>
 8004742:	07ed      	lsls	r5, r5, #31
 8004744:	d514      	bpl.n	8004770 <_svfprintf_r+0xf28>
 8004746:	9b08      	ldr	r3, [sp, #32]
 8004748:	3301      	adds	r3, #1
 800474a:	444b      	add	r3, r9
 800474c:	e015      	b.n	800477a <_svfprintf_r+0xf32>
 800474e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004750:	9a04      	ldr	r2, [sp, #16]
 8004752:	4293      	cmp	r3, r2
 8004754:	db03      	blt.n	800475e <_svfprintf_r+0xf16>
 8004756:	07e8      	lsls	r0, r5, #31
 8004758:	d50d      	bpl.n	8004776 <_svfprintf_r+0xf2e>
 800475a:	9a08      	ldr	r2, [sp, #32]
 800475c:	e006      	b.n	800476c <_svfprintf_r+0xf24>
 800475e:	9a04      	ldr	r2, [sp, #16]
 8004760:	9908      	ldr	r1, [sp, #32]
 8004762:	2b00      	cmp	r3, #0
 8004764:	440a      	add	r2, r1
 8004766:	dc05      	bgt.n	8004774 <_svfprintf_r+0xf2c>
 8004768:	f1c3 0301 	rsb	r3, r3, #1
 800476c:	4413      	add	r3, r2
 800476e:	e002      	b.n	8004776 <_svfprintf_r+0xf2e>
 8004770:	2301      	movs	r3, #1
 8004772:	e002      	b.n	800477a <_svfprintf_r+0xf32>
 8004774:	4613      	mov	r3, r2
 8004776:	2267      	movs	r2, #103	; 0x67
 8004778:	9202      	str	r2, [sp, #8]
 800477a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800477c:	4699      	mov	r9, r3
 800477e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004780:	b113      	cbz	r3, 8004788 <_svfprintf_r+0xf40>
 8004782:	232d      	movs	r3, #45	; 0x2d
 8004784:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8004788:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800478a:	2600      	movs	r6, #0
 800478c:	f7ff bb4c 	b.w	8003e28 <_svfprintf_r+0x5e0>
 8004790:	2200      	movs	r2, #0
 8004792:	2300      	movs	r3, #0
 8004794:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004798:	f7fc f9bc 	bl	8000b14 <__aeabi_dcmplt>
 800479c:	b110      	cbz	r0, 80047a4 <_svfprintf_r+0xf5c>
 800479e:	232d      	movs	r3, #45	; 0x2d
 80047a0:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80047a4:	4b07      	ldr	r3, [pc, #28]	; (80047c4 <_svfprintf_r+0xf7c>)
 80047a6:	4a08      	ldr	r2, [pc, #32]	; (80047c8 <_svfprintf_r+0xf80>)
 80047a8:	e6e3      	b.n	8004572 <_svfprintf_r+0xd2a>
 80047aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80047ac:	1a1b      	subs	r3, r3, r0
 80047ae:	9304      	str	r3, [sp, #16]
 80047b0:	e75f      	b.n	8004672 <_svfprintf_r+0xe2a>
 80047b2:	ea56 0207 	orrs.w	r2, r6, r7
 80047b6:	f47f aaaa 	bne.w	8003d0e <_svfprintf_r+0x4c6>
 80047ba:	f7ff baaf 	b.w	8003d1c <_svfprintf_r+0x4d4>
 80047be:	b03d      	add	sp, #244	; 0xf4
 80047c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047c4:	08006610 	.word	0x08006610
 80047c8:	08006614 	.word	0x08006614

080047cc <quorem>:
 80047cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047d0:	6903      	ldr	r3, [r0, #16]
 80047d2:	690c      	ldr	r4, [r1, #16]
 80047d4:	429c      	cmp	r4, r3
 80047d6:	4680      	mov	r8, r0
 80047d8:	f300 8083 	bgt.w	80048e2 <quorem+0x116>
 80047dc:	3c01      	subs	r4, #1
 80047de:	f101 0714 	add.w	r7, r1, #20
 80047e2:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80047e6:	f100 0614 	add.w	r6, r0, #20
 80047ea:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80047ee:	eb06 030e 	add.w	r3, r6, lr
 80047f2:	9301      	str	r3, [sp, #4]
 80047f4:	3501      	adds	r5, #1
 80047f6:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 80047fa:	fbb3 f5f5 	udiv	r5, r3, r5
 80047fe:	eb07 090e 	add.w	r9, r7, lr
 8004802:	2d00      	cmp	r5, #0
 8004804:	d039      	beq.n	800487a <quorem+0xae>
 8004806:	f04f 0a00 	mov.w	sl, #0
 800480a:	4638      	mov	r0, r7
 800480c:	46b4      	mov	ip, r6
 800480e:	46d3      	mov	fp, sl
 8004810:	f850 2b04 	ldr.w	r2, [r0], #4
 8004814:	b293      	uxth	r3, r2
 8004816:	fb05 a303 	mla	r3, r5, r3, sl
 800481a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800481e:	b29b      	uxth	r3, r3
 8004820:	ebc3 030b 	rsb	r3, r3, fp
 8004824:	0c12      	lsrs	r2, r2, #16
 8004826:	f8bc b000 	ldrh.w	fp, [ip]
 800482a:	fb05 a202 	mla	r2, r5, r2, sl
 800482e:	fa13 f38b 	uxtah	r3, r3, fp
 8004832:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004836:	fa1f fb82 	uxth.w	fp, r2
 800483a:	f8dc 2000 	ldr.w	r2, [ip]
 800483e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004842:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004846:	b29b      	uxth	r3, r3
 8004848:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800484c:	4581      	cmp	r9, r0
 800484e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004852:	f84c 3b04 	str.w	r3, [ip], #4
 8004856:	d2db      	bcs.n	8004810 <quorem+0x44>
 8004858:	f856 300e 	ldr.w	r3, [r6, lr]
 800485c:	b96b      	cbnz	r3, 800487a <quorem+0xae>
 800485e:	9b01      	ldr	r3, [sp, #4]
 8004860:	3b04      	subs	r3, #4
 8004862:	429e      	cmp	r6, r3
 8004864:	461a      	mov	r2, r3
 8004866:	d302      	bcc.n	800486e <quorem+0xa2>
 8004868:	f8c8 4010 	str.w	r4, [r8, #16]
 800486c:	e005      	b.n	800487a <quorem+0xae>
 800486e:	6812      	ldr	r2, [r2, #0]
 8004870:	3b04      	subs	r3, #4
 8004872:	2a00      	cmp	r2, #0
 8004874:	d1f8      	bne.n	8004868 <quorem+0x9c>
 8004876:	3c01      	subs	r4, #1
 8004878:	e7f3      	b.n	8004862 <quorem+0x96>
 800487a:	4640      	mov	r0, r8
 800487c:	f001 fa1f 	bl	8005cbe <__mcmp>
 8004880:	2800      	cmp	r0, #0
 8004882:	db2c      	blt.n	80048de <quorem+0x112>
 8004884:	3501      	adds	r5, #1
 8004886:	4630      	mov	r0, r6
 8004888:	f04f 0e00 	mov.w	lr, #0
 800488c:	f857 1b04 	ldr.w	r1, [r7], #4
 8004890:	f8d0 c000 	ldr.w	ip, [r0]
 8004894:	b28a      	uxth	r2, r1
 8004896:	ebc2 030e 	rsb	r3, r2, lr
 800489a:	0c09      	lsrs	r1, r1, #16
 800489c:	fa13 f38c 	uxtah	r3, r3, ip
 80048a0:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 80048a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048ae:	45b9      	cmp	r9, r7
 80048b0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80048b4:	f840 3b04 	str.w	r3, [r0], #4
 80048b8:	d2e8      	bcs.n	800488c <quorem+0xc0>
 80048ba:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80048be:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80048c2:	b962      	cbnz	r2, 80048de <quorem+0x112>
 80048c4:	3b04      	subs	r3, #4
 80048c6:	429e      	cmp	r6, r3
 80048c8:	461a      	mov	r2, r3
 80048ca:	d302      	bcc.n	80048d2 <quorem+0x106>
 80048cc:	f8c8 4010 	str.w	r4, [r8, #16]
 80048d0:	e005      	b.n	80048de <quorem+0x112>
 80048d2:	6812      	ldr	r2, [r2, #0]
 80048d4:	3b04      	subs	r3, #4
 80048d6:	2a00      	cmp	r2, #0
 80048d8:	d1f8      	bne.n	80048cc <quorem+0x100>
 80048da:	3c01      	subs	r4, #1
 80048dc:	e7f3      	b.n	80048c6 <quorem+0xfa>
 80048de:	4628      	mov	r0, r5
 80048e0:	e000      	b.n	80048e4 <quorem+0x118>
 80048e2:	2000      	movs	r0, #0
 80048e4:	b003      	add	sp, #12
 80048e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048ea:	0000      	movs	r0, r0
 80048ec:	0000      	movs	r0, r0
	...

080048f0 <_dtoa_r>:
 80048f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048f4:	ec59 8b10 	vmov	r8, r9, d0
 80048f8:	b097      	sub	sp, #92	; 0x5c
 80048fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80048fc:	9106      	str	r1, [sp, #24]
 80048fe:	4682      	mov	sl, r0
 8004900:	9209      	str	r2, [sp, #36]	; 0x24
 8004902:	9310      	str	r3, [sp, #64]	; 0x40
 8004904:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8004906:	e9cd 8900 	strd	r8, r9, [sp]
 800490a:	b945      	cbnz	r5, 800491e <_dtoa_r+0x2e>
 800490c:	2010      	movs	r0, #16
 800490e:	f000 fd93 	bl	8005438 <malloc>
 8004912:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 8004916:	6045      	str	r5, [r0, #4]
 8004918:	6085      	str	r5, [r0, #8]
 800491a:	6005      	str	r5, [r0, #0]
 800491c:	60c5      	str	r5, [r0, #12]
 800491e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8004922:	6819      	ldr	r1, [r3, #0]
 8004924:	b159      	cbz	r1, 800493e <_dtoa_r+0x4e>
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	604a      	str	r2, [r1, #4]
 800492a:	2301      	movs	r3, #1
 800492c:	4093      	lsls	r3, r2
 800492e:	608b      	str	r3, [r1, #8]
 8004930:	4650      	mov	r0, sl
 8004932:	f000 ffeb 	bl	800590c <_Bfree>
 8004936:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800493a:	2200      	movs	r2, #0
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	9b01      	ldr	r3, [sp, #4]
 8004940:	4a9f      	ldr	r2, [pc, #636]	; (8004bc0 <_dtoa_r+0x2d0>)
 8004942:	2b00      	cmp	r3, #0
 8004944:	bfbf      	itttt	lt
 8004946:	2301      	movlt	r3, #1
 8004948:	6023      	strlt	r3, [r4, #0]
 800494a:	9b01      	ldrlt	r3, [sp, #4]
 800494c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004950:	bfb8      	it	lt
 8004952:	9301      	strlt	r3, [sp, #4]
 8004954:	9f01      	ldr	r7, [sp, #4]
 8004956:	bfa4      	itt	ge
 8004958:	2300      	movge	r3, #0
 800495a:	6023      	strge	r3, [r4, #0]
 800495c:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 8004960:	0d1b      	lsrs	r3, r3, #20
 8004962:	051b      	lsls	r3, r3, #20
 8004964:	4293      	cmp	r3, r2
 8004966:	d11d      	bne.n	80049a4 <_dtoa_r+0xb4>
 8004968:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800496a:	f242 730f 	movw	r3, #9999	; 0x270f
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	9b00      	ldr	r3, [sp, #0]
 8004972:	b943      	cbnz	r3, 8004986 <_dtoa_r+0x96>
 8004974:	4a93      	ldr	r2, [pc, #588]	; (8004bc4 <_dtoa_r+0x2d4>)
 8004976:	4b94      	ldr	r3, [pc, #592]	; (8004bc8 <_dtoa_r+0x2d8>)
 8004978:	f3c7 0013 	ubfx	r0, r7, #0, #20
 800497c:	2800      	cmp	r0, #0
 800497e:	bf14      	ite	ne
 8004980:	4618      	movne	r0, r3
 8004982:	4610      	moveq	r0, r2
 8004984:	e000      	b.n	8004988 <_dtoa_r+0x98>
 8004986:	4890      	ldr	r0, [pc, #576]	; (8004bc8 <_dtoa_r+0x2d8>)
 8004988:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800498a:	2b00      	cmp	r3, #0
 800498c:	f000 854a 	beq.w	8005424 <_dtoa_r+0xb34>
 8004990:	78c3      	ldrb	r3, [r0, #3]
 8004992:	b113      	cbz	r3, 800499a <_dtoa_r+0xaa>
 8004994:	f100 0308 	add.w	r3, r0, #8
 8004998:	e000      	b.n	800499c <_dtoa_r+0xac>
 800499a:	1cc3      	adds	r3, r0, #3
 800499c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800499e:	6013      	str	r3, [r2, #0]
 80049a0:	f000 bd40 	b.w	8005424 <_dtoa_r+0xb34>
 80049a4:	e9dd 4500 	ldrd	r4, r5, [sp]
 80049a8:	2200      	movs	r2, #0
 80049aa:	2300      	movs	r3, #0
 80049ac:	4620      	mov	r0, r4
 80049ae:	4629      	mov	r1, r5
 80049b0:	f7fc f8a6 	bl	8000b00 <__aeabi_dcmpeq>
 80049b4:	4680      	mov	r8, r0
 80049b6:	b158      	cbz	r0, 80049d0 <_dtoa_r+0xe0>
 80049b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80049ba:	2301      	movs	r3, #1
 80049bc:	6013      	str	r3, [r2, #0]
 80049be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 8522 	beq.w	800540a <_dtoa_r+0xb1a>
 80049c6:	4881      	ldr	r0, [pc, #516]	; (8004bcc <_dtoa_r+0x2dc>)
 80049c8:	6018      	str	r0, [r3, #0]
 80049ca:	3801      	subs	r0, #1
 80049cc:	f000 bd2a 	b.w	8005424 <_dtoa_r+0xb34>
 80049d0:	aa14      	add	r2, sp, #80	; 0x50
 80049d2:	a915      	add	r1, sp, #84	; 0x54
 80049d4:	ec45 4b10 	vmov	d0, r4, r5
 80049d8:	4650      	mov	r0, sl
 80049da:	f001 f9eb 	bl	8005db4 <__d2b>
 80049de:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80049e2:	9002      	str	r0, [sp, #8]
 80049e4:	b15e      	cbz	r6, 80049fe <_dtoa_r+0x10e>
 80049e6:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80049ea:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80049ee:	4620      	mov	r0, r4
 80049f0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80049f4:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 80049f8:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 80049fc:	e01d      	b.n	8004a3a <_dtoa_r+0x14a>
 80049fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004a00:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8004a02:	441e      	add	r6, r3
 8004a04:	f206 4332 	addw	r3, r6, #1074	; 0x432
 8004a08:	2b20      	cmp	r3, #32
 8004a0a:	dd0a      	ble.n	8004a22 <_dtoa_r+0x132>
 8004a0c:	9a00      	ldr	r2, [sp, #0]
 8004a0e:	f206 4012 	addw	r0, r6, #1042	; 0x412
 8004a12:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8004a16:	fa22 f000 	lsr.w	r0, r2, r0
 8004a1a:	fa07 f303 	lsl.w	r3, r7, r3
 8004a1e:	4318      	orrs	r0, r3
 8004a20:	e004      	b.n	8004a2c <_dtoa_r+0x13c>
 8004a22:	f1c3 0020 	rsb	r0, r3, #32
 8004a26:	9b00      	ldr	r3, [sp, #0]
 8004a28:	fa03 f000 	lsl.w	r0, r3, r0
 8004a2c:	f7fb fd8a 	bl	8000544 <__aeabi_ui2d>
 8004a30:	2301      	movs	r3, #1
 8004a32:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004a36:	3e01      	subs	r6, #1
 8004a38:	9311      	str	r3, [sp, #68]	; 0x44
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	4b64      	ldr	r3, [pc, #400]	; (8004bd0 <_dtoa_r+0x2e0>)
 8004a3e:	f7fb fc43 	bl	80002c8 <__aeabi_dsub>
 8004a42:	a359      	add	r3, pc, #356	; (adr r3, 8004ba8 <_dtoa_r+0x2b8>)
 8004a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a48:	f7fb fdf2 	bl	8000630 <__aeabi_dmul>
 8004a4c:	a358      	add	r3, pc, #352	; (adr r3, 8004bb0 <_dtoa_r+0x2c0>)
 8004a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a52:	f7fb fc3b 	bl	80002cc <__adddf3>
 8004a56:	4604      	mov	r4, r0
 8004a58:	4630      	mov	r0, r6
 8004a5a:	460d      	mov	r5, r1
 8004a5c:	f7fb fd82 	bl	8000564 <__aeabi_i2d>
 8004a60:	a355      	add	r3, pc, #340	; (adr r3, 8004bb8 <_dtoa_r+0x2c8>)
 8004a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a66:	f7fb fde3 	bl	8000630 <__aeabi_dmul>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	4620      	mov	r0, r4
 8004a70:	4629      	mov	r1, r5
 8004a72:	f7fb fc2b 	bl	80002cc <__adddf3>
 8004a76:	4604      	mov	r4, r0
 8004a78:	460d      	mov	r5, r1
 8004a7a:	f7fc f889 	bl	8000b90 <__aeabi_d2iz>
 8004a7e:	2200      	movs	r2, #0
 8004a80:	4683      	mov	fp, r0
 8004a82:	2300      	movs	r3, #0
 8004a84:	4620      	mov	r0, r4
 8004a86:	4629      	mov	r1, r5
 8004a88:	f7fc f844 	bl	8000b14 <__aeabi_dcmplt>
 8004a8c:	b158      	cbz	r0, 8004aa6 <_dtoa_r+0x1b6>
 8004a8e:	4658      	mov	r0, fp
 8004a90:	f7fb fd68 	bl	8000564 <__aeabi_i2d>
 8004a94:	4602      	mov	r2, r0
 8004a96:	460b      	mov	r3, r1
 8004a98:	4620      	mov	r0, r4
 8004a9a:	4629      	mov	r1, r5
 8004a9c:	f7fc f830 	bl	8000b00 <__aeabi_dcmpeq>
 8004aa0:	b908      	cbnz	r0, 8004aa6 <_dtoa_r+0x1b6>
 8004aa2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004aa6:	f1bb 0f16 	cmp.w	fp, #22
 8004aaa:	d80d      	bhi.n	8004ac8 <_dtoa_r+0x1d8>
 8004aac:	4949      	ldr	r1, [pc, #292]	; (8004bd4 <_dtoa_r+0x2e4>)
 8004aae:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8004ab2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ab6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004aba:	f7fc f849 	bl	8000b50 <__aeabi_dcmpgt>
 8004abe:	b130      	cbz	r0, 8004ace <_dtoa_r+0x1de>
 8004ac0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	e000      	b.n	8004aca <_dtoa_r+0x1da>
 8004ac8:	2301      	movs	r3, #1
 8004aca:	930d      	str	r3, [sp, #52]	; 0x34
 8004acc:	e000      	b.n	8004ad0 <_dtoa_r+0x1e0>
 8004ace:	900d      	str	r0, [sp, #52]	; 0x34
 8004ad0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004ad2:	1b9e      	subs	r6, r3, r6
 8004ad4:	1e73      	subs	r3, r6, #1
 8004ad6:	9305      	str	r3, [sp, #20]
 8004ad8:	bf43      	ittte	mi
 8004ada:	f1c3 0900 	rsbmi	r9, r3, #0
 8004ade:	2300      	movmi	r3, #0
 8004ae0:	9305      	strmi	r3, [sp, #20]
 8004ae2:	f04f 0900 	movpl.w	r9, #0
 8004ae6:	f1bb 0f00 	cmp.w	fp, #0
 8004aea:	db07      	blt.n	8004afc <_dtoa_r+0x20c>
 8004aec:	9b05      	ldr	r3, [sp, #20]
 8004aee:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8004af2:	445b      	add	r3, fp
 8004af4:	9305      	str	r3, [sp, #20]
 8004af6:	2300      	movs	r3, #0
 8004af8:	9307      	str	r3, [sp, #28]
 8004afa:	e006      	b.n	8004b0a <_dtoa_r+0x21a>
 8004afc:	f1cb 0300 	rsb	r3, fp, #0
 8004b00:	9307      	str	r3, [sp, #28]
 8004b02:	2300      	movs	r3, #0
 8004b04:	ebcb 0909 	rsb	r9, fp, r9
 8004b08:	930c      	str	r3, [sp, #48]	; 0x30
 8004b0a:	9b06      	ldr	r3, [sp, #24]
 8004b0c:	2b09      	cmp	r3, #9
 8004b0e:	d827      	bhi.n	8004b60 <_dtoa_r+0x270>
 8004b10:	2b05      	cmp	r3, #5
 8004b12:	bfc4      	itt	gt
 8004b14:	3b04      	subgt	r3, #4
 8004b16:	9306      	strgt	r3, [sp, #24]
 8004b18:	9b06      	ldr	r3, [sp, #24]
 8004b1a:	f1a3 0302 	sub.w	r3, r3, #2
 8004b1e:	bfcc      	ite	gt
 8004b20:	2500      	movgt	r5, #0
 8004b22:	2501      	movle	r5, #1
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	d820      	bhi.n	8004b6a <_dtoa_r+0x27a>
 8004b28:	e8df f003 	tbb	[pc, r3]
 8004b2c:	04020e06 	.word	0x04020e06
 8004b30:	2301      	movs	r3, #1
 8004b32:	e002      	b.n	8004b3a <_dtoa_r+0x24a>
 8004b34:	2301      	movs	r3, #1
 8004b36:	e008      	b.n	8004b4a <_dtoa_r+0x25a>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	9308      	str	r3, [sp, #32]
 8004b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	dd1c      	ble.n	8004b7c <_dtoa_r+0x28c>
 8004b42:	9303      	str	r3, [sp, #12]
 8004b44:	4698      	mov	r8, r3
 8004b46:	e01e      	b.n	8004b86 <_dtoa_r+0x296>
 8004b48:	2300      	movs	r3, #0
 8004b4a:	9308      	str	r3, [sp, #32]
 8004b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b4e:	445b      	add	r3, fp
 8004b50:	f103 0801 	add.w	r8, r3, #1
 8004b54:	9303      	str	r3, [sp, #12]
 8004b56:	4643      	mov	r3, r8
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	bfb8      	it	lt
 8004b5c:	2301      	movlt	r3, #1
 8004b5e:	e012      	b.n	8004b86 <_dtoa_r+0x296>
 8004b60:	2501      	movs	r5, #1
 8004b62:	2300      	movs	r3, #0
 8004b64:	9306      	str	r3, [sp, #24]
 8004b66:	9508      	str	r5, [sp, #32]
 8004b68:	e001      	b.n	8004b6e <_dtoa_r+0x27e>
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	9308      	str	r3, [sp, #32]
 8004b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b72:	9303      	str	r3, [sp, #12]
 8004b74:	4698      	mov	r8, r3
 8004b76:	2200      	movs	r2, #0
 8004b78:	2312      	movs	r3, #18
 8004b7a:	e003      	b.n	8004b84 <_dtoa_r+0x294>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	9303      	str	r3, [sp, #12]
 8004b80:	4698      	mov	r8, r3
 8004b82:	461a      	mov	r2, r3
 8004b84:	9209      	str	r2, [sp, #36]	; 0x24
 8004b86:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	6062      	str	r2, [r4, #4]
 8004b8e:	2104      	movs	r1, #4
 8004b90:	f101 0214 	add.w	r2, r1, #20
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d81f      	bhi.n	8004bd8 <_dtoa_r+0x2e8>
 8004b98:	6862      	ldr	r2, [r4, #4]
 8004b9a:	3201      	adds	r2, #1
 8004b9c:	6062      	str	r2, [r4, #4]
 8004b9e:	0049      	lsls	r1, r1, #1
 8004ba0:	e7f6      	b.n	8004b90 <_dtoa_r+0x2a0>
 8004ba2:	bf00      	nop
 8004ba4:	f3af 8000 	nop.w
 8004ba8:	636f4361 	.word	0x636f4361
 8004bac:	3fd287a7 	.word	0x3fd287a7
 8004bb0:	8b60c8b3 	.word	0x8b60c8b3
 8004bb4:	3fc68a28 	.word	0x3fc68a28
 8004bb8:	509f79fb 	.word	0x509f79fb
 8004bbc:	3fd34413 	.word	0x3fd34413
 8004bc0:	7ff00000 	.word	0x7ff00000
 8004bc4:	08006654 	.word	0x08006654
 8004bc8:	0800665d 	.word	0x0800665d
 8004bcc:	08006643 	.word	0x08006643
 8004bd0:	3ff80000 	.word	0x3ff80000
 8004bd4:	08006670 	.word	0x08006670
 8004bd8:	6861      	ldr	r1, [r4, #4]
 8004bda:	4650      	mov	r0, sl
 8004bdc:	f000 fe61 	bl	80058a2 <_Balloc>
 8004be0:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8004be4:	6020      	str	r0, [r4, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	9304      	str	r3, [sp, #16]
 8004bea:	f1b8 0f0e 	cmp.w	r8, #14
 8004bee:	f200 815d 	bhi.w	8004eac <_dtoa_r+0x5bc>
 8004bf2:	2d00      	cmp	r5, #0
 8004bf4:	f000 815a 	beq.w	8004eac <_dtoa_r+0x5bc>
 8004bf8:	ed9d 7b00 	vldr	d7, [sp]
 8004bfc:	f1bb 0f00 	cmp.w	fp, #0
 8004c00:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8004c04:	dd31      	ble.n	8004c6a <_dtoa_r+0x37a>
 8004c06:	4aa0      	ldr	r2, [pc, #640]	; (8004e88 <_dtoa_r+0x598>)
 8004c08:	f00b 030f 	and.w	r3, fp, #15
 8004c0c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004c10:	ed93 7b00 	vldr	d7, [r3]
 8004c14:	ea4f 142b 	mov.w	r4, fp, asr #4
 8004c18:	06e2      	lsls	r2, r4, #27
 8004c1a:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004c1e:	d50c      	bpl.n	8004c3a <_dtoa_r+0x34a>
 8004c20:	4b9a      	ldr	r3, [pc, #616]	; (8004e8c <_dtoa_r+0x59c>)
 8004c22:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004c26:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004c2a:	f7fb fe2b 	bl	8000884 <__aeabi_ddiv>
 8004c2e:	f004 040f 	and.w	r4, r4, #15
 8004c32:	e9cd 0100 	strd	r0, r1, [sp]
 8004c36:	2603      	movs	r6, #3
 8004c38:	e000      	b.n	8004c3c <_dtoa_r+0x34c>
 8004c3a:	2602      	movs	r6, #2
 8004c3c:	4d93      	ldr	r5, [pc, #588]	; (8004e8c <_dtoa_r+0x59c>)
 8004c3e:	b16c      	cbz	r4, 8004c5c <_dtoa_r+0x36c>
 8004c40:	07e3      	lsls	r3, r4, #31
 8004c42:	d508      	bpl.n	8004c56 <_dtoa_r+0x366>
 8004c44:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004c48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004c4c:	f7fb fcf0 	bl	8000630 <__aeabi_dmul>
 8004c50:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004c54:	3601      	adds	r6, #1
 8004c56:	1064      	asrs	r4, r4, #1
 8004c58:	3508      	adds	r5, #8
 8004c5a:	e7f0      	b.n	8004c3e <_dtoa_r+0x34e>
 8004c5c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004c60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c64:	f7fb fe0e 	bl	8000884 <__aeabi_ddiv>
 8004c68:	e020      	b.n	8004cac <_dtoa_r+0x3bc>
 8004c6a:	f1cb 0400 	rsb	r4, fp, #0
 8004c6e:	b304      	cbz	r4, 8004cb2 <_dtoa_r+0x3c2>
 8004c70:	4b85      	ldr	r3, [pc, #532]	; (8004e88 <_dtoa_r+0x598>)
 8004c72:	4d86      	ldr	r5, [pc, #536]	; (8004e8c <_dtoa_r+0x59c>)
 8004c74:	f004 020f 	and.w	r2, r4, #15
 8004c78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c80:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004c84:	f7fb fcd4 	bl	8000630 <__aeabi_dmul>
 8004c88:	e9cd 0100 	strd	r0, r1, [sp]
 8004c8c:	1124      	asrs	r4, r4, #4
 8004c8e:	2300      	movs	r3, #0
 8004c90:	2602      	movs	r6, #2
 8004c92:	b154      	cbz	r4, 8004caa <_dtoa_r+0x3ba>
 8004c94:	07e7      	lsls	r7, r4, #31
 8004c96:	d505      	bpl.n	8004ca4 <_dtoa_r+0x3b4>
 8004c98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004c9c:	f7fb fcc8 	bl	8000630 <__aeabi_dmul>
 8004ca0:	3601      	adds	r6, #1
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	1064      	asrs	r4, r4, #1
 8004ca6:	3508      	adds	r5, #8
 8004ca8:	e7f3      	b.n	8004c92 <_dtoa_r+0x3a2>
 8004caa:	b11b      	cbz	r3, 8004cb4 <_dtoa_r+0x3c4>
 8004cac:	e9cd 0100 	strd	r0, r1, [sp]
 8004cb0:	e000      	b.n	8004cb4 <_dtoa_r+0x3c4>
 8004cb2:	2602      	movs	r6, #2
 8004cb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cb6:	b1eb      	cbz	r3, 8004cf4 <_dtoa_r+0x404>
 8004cb8:	e9dd 4500 	ldrd	r4, r5, [sp]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	4b74      	ldr	r3, [pc, #464]	; (8004e90 <_dtoa_r+0x5a0>)
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	4629      	mov	r1, r5
 8004cc4:	f7fb ff26 	bl	8000b14 <__aeabi_dcmplt>
 8004cc8:	b1a0      	cbz	r0, 8004cf4 <_dtoa_r+0x404>
 8004cca:	f1b8 0f00 	cmp.w	r8, #0
 8004cce:	d011      	beq.n	8004cf4 <_dtoa_r+0x404>
 8004cd0:	9b03      	ldr	r3, [sp, #12]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f340 80e6 	ble.w	8004ea4 <_dtoa_r+0x5b4>
 8004cd8:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004cdc:	930a      	str	r3, [sp, #40]	; 0x28
 8004cde:	2200      	movs	r2, #0
 8004ce0:	4b6c      	ldr	r3, [pc, #432]	; (8004e94 <_dtoa_r+0x5a4>)
 8004ce2:	4620      	mov	r0, r4
 8004ce4:	4629      	mov	r1, r5
 8004ce6:	f7fb fca3 	bl	8000630 <__aeabi_dmul>
 8004cea:	3601      	adds	r6, #1
 8004cec:	e9cd 0100 	strd	r0, r1, [sp]
 8004cf0:	9f03      	ldr	r7, [sp, #12]
 8004cf2:	e002      	b.n	8004cfa <_dtoa_r+0x40a>
 8004cf4:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8004cf8:	4647      	mov	r7, r8
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	f7fb fc32 	bl	8000564 <__aeabi_i2d>
 8004d00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d04:	f7fb fc94 	bl	8000630 <__aeabi_dmul>
 8004d08:	2200      	movs	r2, #0
 8004d0a:	4b63      	ldr	r3, [pc, #396]	; (8004e98 <_dtoa_r+0x5a8>)
 8004d0c:	f7fb fade 	bl	80002cc <__adddf3>
 8004d10:	4604      	mov	r4, r0
 8004d12:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8004d16:	b9cf      	cbnz	r7, 8004d4c <_dtoa_r+0x45c>
 8004d18:	2200      	movs	r2, #0
 8004d1a:	4b60      	ldr	r3, [pc, #384]	; (8004e9c <_dtoa_r+0x5ac>)
 8004d1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d20:	f7fb fad2 	bl	80002c8 <__aeabi_dsub>
 8004d24:	4622      	mov	r2, r4
 8004d26:	462b      	mov	r3, r5
 8004d28:	e9cd 0100 	strd	r0, r1, [sp]
 8004d2c:	f7fb ff10 	bl	8000b50 <__aeabi_dcmpgt>
 8004d30:	2800      	cmp	r0, #0
 8004d32:	f040 8241 	bne.w	80051b8 <_dtoa_r+0x8c8>
 8004d36:	4622      	mov	r2, r4
 8004d38:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004d3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d40:	f7fb fee8 	bl	8000b14 <__aeabi_dcmplt>
 8004d44:	2800      	cmp	r0, #0
 8004d46:	f040 822e 	bne.w	80051a6 <_dtoa_r+0x8b6>
 8004d4a:	e0ab      	b.n	8004ea4 <_dtoa_r+0x5b4>
 8004d4c:	9a08      	ldr	r2, [sp, #32]
 8004d4e:	4b4e      	ldr	r3, [pc, #312]	; (8004e88 <_dtoa_r+0x598>)
 8004d50:	1e79      	subs	r1, r7, #1
 8004d52:	2a00      	cmp	r2, #0
 8004d54:	d04a      	beq.n	8004dec <_dtoa_r+0x4fc>
 8004d56:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8004d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5e:	2000      	movs	r0, #0
 8004d60:	494f      	ldr	r1, [pc, #316]	; (8004ea0 <_dtoa_r+0x5b0>)
 8004d62:	f7fb fd8f 	bl	8000884 <__aeabi_ddiv>
 8004d66:	4622      	mov	r2, r4
 8004d68:	462b      	mov	r3, r5
 8004d6a:	f7fb faad 	bl	80002c8 <__aeabi_dsub>
 8004d6e:	9c04      	ldr	r4, [sp, #16]
 8004d70:	4605      	mov	r5, r0
 8004d72:	460e      	mov	r6, r1
 8004d74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d78:	f7fb ff0a 	bl	8000b90 <__aeabi_d2iz>
 8004d7c:	9012      	str	r0, [sp, #72]	; 0x48
 8004d7e:	f7fb fbf1 	bl	8000564 <__aeabi_i2d>
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d8a:	f7fb fa9d 	bl	80002c8 <__aeabi_dsub>
 8004d8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d90:	3330      	adds	r3, #48	; 0x30
 8004d92:	f804 3b01 	strb.w	r3, [r4], #1
 8004d96:	462a      	mov	r2, r5
 8004d98:	4633      	mov	r3, r6
 8004d9a:	e9cd 0100 	strd	r0, r1, [sp]
 8004d9e:	f7fb feb9 	bl	8000b14 <__aeabi_dcmplt>
 8004da2:	2800      	cmp	r0, #0
 8004da4:	f040 8321 	bne.w	80053ea <_dtoa_r+0xafa>
 8004da8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004dac:	2000      	movs	r0, #0
 8004dae:	4938      	ldr	r1, [pc, #224]	; (8004e90 <_dtoa_r+0x5a0>)
 8004db0:	f7fb fa8a 	bl	80002c8 <__aeabi_dsub>
 8004db4:	462a      	mov	r2, r5
 8004db6:	4633      	mov	r3, r6
 8004db8:	f7fb feac 	bl	8000b14 <__aeabi_dcmplt>
 8004dbc:	2800      	cmp	r0, #0
 8004dbe:	f040 80d2 	bne.w	8004f66 <_dtoa_r+0x676>
 8004dc2:	9b04      	ldr	r3, [sp, #16]
 8004dc4:	1ae3      	subs	r3, r4, r3
 8004dc6:	42bb      	cmp	r3, r7
 8004dc8:	da6c      	bge.n	8004ea4 <_dtoa_r+0x5b4>
 8004dca:	2200      	movs	r2, #0
 8004dcc:	4b31      	ldr	r3, [pc, #196]	; (8004e94 <_dtoa_r+0x5a4>)
 8004dce:	4628      	mov	r0, r5
 8004dd0:	4631      	mov	r1, r6
 8004dd2:	f7fb fc2d 	bl	8000630 <__aeabi_dmul>
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	4605      	mov	r5, r0
 8004dda:	460e      	mov	r6, r1
 8004ddc:	4b2d      	ldr	r3, [pc, #180]	; (8004e94 <_dtoa_r+0x5a4>)
 8004dde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004de2:	f7fb fc25 	bl	8000630 <__aeabi_dmul>
 8004de6:	e9cd 0100 	strd	r0, r1, [sp]
 8004dea:	e7c3      	b.n	8004d74 <_dtoa_r+0x484>
 8004dec:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8004df0:	4622      	mov	r2, r4
 8004df2:	462b      	mov	r3, r5
 8004df4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004df8:	f7fb fc1a 	bl	8000630 <__aeabi_dmul>
 8004dfc:	9b04      	ldr	r3, [sp, #16]
 8004dfe:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8004e02:	19dc      	adds	r4, r3, r7
 8004e04:	461d      	mov	r5, r3
 8004e06:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e0a:	f7fb fec1 	bl	8000b90 <__aeabi_d2iz>
 8004e0e:	4606      	mov	r6, r0
 8004e10:	f7fb fba8 	bl	8000564 <__aeabi_i2d>
 8004e14:	3630      	adds	r6, #48	; 0x30
 8004e16:	4602      	mov	r2, r0
 8004e18:	460b      	mov	r3, r1
 8004e1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e1e:	f7fb fa53 	bl	80002c8 <__aeabi_dsub>
 8004e22:	f805 6b01 	strb.w	r6, [r5], #1
 8004e26:	42ac      	cmp	r4, r5
 8004e28:	e9cd 0100 	strd	r0, r1, [sp]
 8004e2c:	f04f 0200 	mov.w	r2, #0
 8004e30:	d123      	bne.n	8004e7a <_dtoa_r+0x58a>
 8004e32:	4b1b      	ldr	r3, [pc, #108]	; (8004ea0 <_dtoa_r+0x5b0>)
 8004e34:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8004e38:	f7fb fa48 	bl	80002cc <__adddf3>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e44:	f7fb fe84 	bl	8000b50 <__aeabi_dcmpgt>
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	f040 808c 	bne.w	8004f66 <_dtoa_r+0x676>
 8004e4e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8004e52:	2000      	movs	r0, #0
 8004e54:	4912      	ldr	r1, [pc, #72]	; (8004ea0 <_dtoa_r+0x5b0>)
 8004e56:	f7fb fa37 	bl	80002c8 <__aeabi_dsub>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e62:	f7fb fe57 	bl	8000b14 <__aeabi_dcmplt>
 8004e66:	b1e8      	cbz	r0, 8004ea4 <_dtoa_r+0x5b4>
 8004e68:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8004e6c:	2b30      	cmp	r3, #48	; 0x30
 8004e6e:	f104 32ff 	add.w	r2, r4, #4294967295
 8004e72:	f040 82ba 	bne.w	80053ea <_dtoa_r+0xafa>
 8004e76:	4614      	mov	r4, r2
 8004e78:	e7f6      	b.n	8004e68 <_dtoa_r+0x578>
 8004e7a:	4b06      	ldr	r3, [pc, #24]	; (8004e94 <_dtoa_r+0x5a4>)
 8004e7c:	f7fb fbd8 	bl	8000630 <__aeabi_dmul>
 8004e80:	e9cd 0100 	strd	r0, r1, [sp]
 8004e84:	e7bf      	b.n	8004e06 <_dtoa_r+0x516>
 8004e86:	bf00      	nop
 8004e88:	08006670 	.word	0x08006670
 8004e8c:	08006738 	.word	0x08006738
 8004e90:	3ff00000 	.word	0x3ff00000
 8004e94:	40240000 	.word	0x40240000
 8004e98:	401c0000 	.word	0x401c0000
 8004e9c:	40140000 	.word	0x40140000
 8004ea0:	3fe00000 	.word	0x3fe00000
 8004ea4:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 8004ea8:	e88d 0018 	stmia.w	sp, {r3, r4}
 8004eac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	db7c      	blt.n	8004fac <_dtoa_r+0x6bc>
 8004eb2:	f1bb 0f0e 	cmp.w	fp, #14
 8004eb6:	dc79      	bgt.n	8004fac <_dtoa_r+0x6bc>
 8004eb8:	4b8f      	ldr	r3, [pc, #572]	; (80050f8 <_dtoa_r+0x808>)
 8004eba:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004ebe:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	da14      	bge.n	8004ef2 <_dtoa_r+0x602>
 8004ec8:	f1b8 0f00 	cmp.w	r8, #0
 8004ecc:	dc11      	bgt.n	8004ef2 <_dtoa_r+0x602>
 8004ece:	f040 816c 	bne.w	80051aa <_dtoa_r+0x8ba>
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	4b89      	ldr	r3, [pc, #548]	; (80050fc <_dtoa_r+0x80c>)
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	4639      	mov	r1, r7
 8004eda:	f7fb fba9 	bl	8000630 <__aeabi_dmul>
 8004ede:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ee2:	f7fb fe2b 	bl	8000b3c <__aeabi_dcmpge>
 8004ee6:	4645      	mov	r5, r8
 8004ee8:	4646      	mov	r6, r8
 8004eea:	2800      	cmp	r0, #0
 8004eec:	f040 815f 	bne.w	80051ae <_dtoa_r+0x8be>
 8004ef0:	e166      	b.n	80051c0 <_dtoa_r+0x8d0>
 8004ef2:	9c04      	ldr	r4, [sp, #16]
 8004ef4:	4632      	mov	r2, r6
 8004ef6:	463b      	mov	r3, r7
 8004ef8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004efc:	f7fb fcc2 	bl	8000884 <__aeabi_ddiv>
 8004f00:	f7fb fe46 	bl	8000b90 <__aeabi_d2iz>
 8004f04:	4605      	mov	r5, r0
 8004f06:	f7fb fb2d 	bl	8000564 <__aeabi_i2d>
 8004f0a:	4632      	mov	r2, r6
 8004f0c:	463b      	mov	r3, r7
 8004f0e:	f7fb fb8f 	bl	8000630 <__aeabi_dmul>
 8004f12:	460b      	mov	r3, r1
 8004f14:	4602      	mov	r2, r0
 8004f16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f1a:	f7fb f9d5 	bl	80002c8 <__aeabi_dsub>
 8004f1e:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8004f22:	f804 eb01 	strb.w	lr, [r4], #1
 8004f26:	9b04      	ldr	r3, [sp, #16]
 8004f28:	ebc3 0e04 	rsb	lr, r3, r4
 8004f2c:	45f0      	cmp	r8, lr
 8004f2e:	e9cd 0100 	strd	r0, r1, [sp]
 8004f32:	d12e      	bne.n	8004f92 <_dtoa_r+0x6a2>
 8004f34:	4602      	mov	r2, r0
 8004f36:	460b      	mov	r3, r1
 8004f38:	f7fb f9c8 	bl	80002cc <__adddf3>
 8004f3c:	4680      	mov	r8, r0
 8004f3e:	4689      	mov	r9, r1
 8004f40:	4602      	mov	r2, r0
 8004f42:	460b      	mov	r3, r1
 8004f44:	4630      	mov	r0, r6
 8004f46:	4639      	mov	r1, r7
 8004f48:	f7fb fde4 	bl	8000b14 <__aeabi_dcmplt>
 8004f4c:	b978      	cbnz	r0, 8004f6e <_dtoa_r+0x67e>
 8004f4e:	4642      	mov	r2, r8
 8004f50:	464b      	mov	r3, r9
 8004f52:	4630      	mov	r0, r6
 8004f54:	4639      	mov	r1, r7
 8004f56:	f7fb fdd3 	bl	8000b00 <__aeabi_dcmpeq>
 8004f5a:	2800      	cmp	r0, #0
 8004f5c:	f000 8247 	beq.w	80053ee <_dtoa_r+0xafe>
 8004f60:	07e9      	lsls	r1, r5, #31
 8004f62:	d404      	bmi.n	8004f6e <_dtoa_r+0x67e>
 8004f64:	e243      	b.n	80053ee <_dtoa_r+0xafe>
 8004f66:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8004f6a:	e000      	b.n	8004f6e <_dtoa_r+0x67e>
 8004f6c:	461c      	mov	r4, r3
 8004f6e:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8004f72:	2a39      	cmp	r2, #57	; 0x39
 8004f74:	f104 33ff 	add.w	r3, r4, #4294967295
 8004f78:	d107      	bne.n	8004f8a <_dtoa_r+0x69a>
 8004f7a:	9a04      	ldr	r2, [sp, #16]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d1f5      	bne.n	8004f6c <_dtoa_r+0x67c>
 8004f80:	9904      	ldr	r1, [sp, #16]
 8004f82:	2230      	movs	r2, #48	; 0x30
 8004f84:	f10b 0b01 	add.w	fp, fp, #1
 8004f88:	700a      	strb	r2, [r1, #0]
 8004f8a:	781a      	ldrb	r2, [r3, #0]
 8004f8c:	3201      	adds	r2, #1
 8004f8e:	701a      	strb	r2, [r3, #0]
 8004f90:	e22d      	b.n	80053ee <_dtoa_r+0xafe>
 8004f92:	2200      	movs	r2, #0
 8004f94:	4b5a      	ldr	r3, [pc, #360]	; (8005100 <_dtoa_r+0x810>)
 8004f96:	f7fb fb4b 	bl	8000630 <__aeabi_dmul>
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	e9cd 0100 	strd	r0, r1, [sp]
 8004fa2:	f7fb fdad 	bl	8000b00 <__aeabi_dcmpeq>
 8004fa6:	2800      	cmp	r0, #0
 8004fa8:	d0a4      	beq.n	8004ef4 <_dtoa_r+0x604>
 8004faa:	e220      	b.n	80053ee <_dtoa_r+0xafe>
 8004fac:	9a08      	ldr	r2, [sp, #32]
 8004fae:	2a00      	cmp	r2, #0
 8004fb0:	d02d      	beq.n	800500e <_dtoa_r+0x71e>
 8004fb2:	9a06      	ldr	r2, [sp, #24]
 8004fb4:	2a01      	cmp	r2, #1
 8004fb6:	dc0a      	bgt.n	8004fce <_dtoa_r+0x6de>
 8004fb8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004fba:	b112      	cbz	r2, 8004fc2 <_dtoa_r+0x6d2>
 8004fbc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004fc0:	e002      	b.n	8004fc8 <_dtoa_r+0x6d8>
 8004fc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004fc4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004fc8:	9d07      	ldr	r5, [sp, #28]
 8004fca:	464c      	mov	r4, r9
 8004fcc:	e015      	b.n	8004ffa <_dtoa_r+0x70a>
 8004fce:	9b07      	ldr	r3, [sp, #28]
 8004fd0:	f108 35ff 	add.w	r5, r8, #4294967295
 8004fd4:	42ab      	cmp	r3, r5
 8004fd6:	bfbf      	itttt	lt
 8004fd8:	9b07      	ldrlt	r3, [sp, #28]
 8004fda:	9507      	strlt	r5, [sp, #28]
 8004fdc:	1aea      	sublt	r2, r5, r3
 8004fde:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8004fe0:	bfb7      	itett	lt
 8004fe2:	189b      	addlt	r3, r3, r2
 8004fe4:	1b5d      	subge	r5, r3, r5
 8004fe6:	930c      	strlt	r3, [sp, #48]	; 0x30
 8004fe8:	2500      	movlt	r5, #0
 8004fea:	f1b8 0f00 	cmp.w	r8, #0
 8004fee:	bfb9      	ittee	lt
 8004ff0:	ebc8 0409 	rsblt	r4, r8, r9
 8004ff4:	2300      	movlt	r3, #0
 8004ff6:	464c      	movge	r4, r9
 8004ff8:	4643      	movge	r3, r8
 8004ffa:	9a05      	ldr	r2, [sp, #20]
 8004ffc:	2101      	movs	r1, #1
 8004ffe:	441a      	add	r2, r3
 8005000:	4650      	mov	r0, sl
 8005002:	4499      	add	r9, r3
 8005004:	9205      	str	r2, [sp, #20]
 8005006:	f000 fd20 	bl	8005a4a <__i2b>
 800500a:	4606      	mov	r6, r0
 800500c:	e002      	b.n	8005014 <_dtoa_r+0x724>
 800500e:	9d07      	ldr	r5, [sp, #28]
 8005010:	9e08      	ldr	r6, [sp, #32]
 8005012:	464c      	mov	r4, r9
 8005014:	b15c      	cbz	r4, 800502e <_dtoa_r+0x73e>
 8005016:	9b05      	ldr	r3, [sp, #20]
 8005018:	2b00      	cmp	r3, #0
 800501a:	dd08      	ble.n	800502e <_dtoa_r+0x73e>
 800501c:	42a3      	cmp	r3, r4
 800501e:	9a05      	ldr	r2, [sp, #20]
 8005020:	bfa8      	it	ge
 8005022:	4623      	movge	r3, r4
 8005024:	ebc3 0909 	rsb	r9, r3, r9
 8005028:	1ae4      	subs	r4, r4, r3
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	9305      	str	r3, [sp, #20]
 800502e:	9b07      	ldr	r3, [sp, #28]
 8005030:	2b00      	cmp	r3, #0
 8005032:	dd1d      	ble.n	8005070 <_dtoa_r+0x780>
 8005034:	9b08      	ldr	r3, [sp, #32]
 8005036:	b1ab      	cbz	r3, 8005064 <_dtoa_r+0x774>
 8005038:	b185      	cbz	r5, 800505c <_dtoa_r+0x76c>
 800503a:	4631      	mov	r1, r6
 800503c:	462a      	mov	r2, r5
 800503e:	4650      	mov	r0, sl
 8005040:	f000 fd9e 	bl	8005b80 <__pow5mult>
 8005044:	9a02      	ldr	r2, [sp, #8]
 8005046:	4601      	mov	r1, r0
 8005048:	4606      	mov	r6, r0
 800504a:	4650      	mov	r0, sl
 800504c:	f000 fd06 	bl	8005a5c <__multiply>
 8005050:	9902      	ldr	r1, [sp, #8]
 8005052:	4607      	mov	r7, r0
 8005054:	4650      	mov	r0, sl
 8005056:	f000 fc59 	bl	800590c <_Bfree>
 800505a:	9702      	str	r7, [sp, #8]
 800505c:	9b07      	ldr	r3, [sp, #28]
 800505e:	1b5a      	subs	r2, r3, r5
 8005060:	d006      	beq.n	8005070 <_dtoa_r+0x780>
 8005062:	e000      	b.n	8005066 <_dtoa_r+0x776>
 8005064:	9a07      	ldr	r2, [sp, #28]
 8005066:	9902      	ldr	r1, [sp, #8]
 8005068:	4650      	mov	r0, sl
 800506a:	f000 fd89 	bl	8005b80 <__pow5mult>
 800506e:	9002      	str	r0, [sp, #8]
 8005070:	2101      	movs	r1, #1
 8005072:	4650      	mov	r0, sl
 8005074:	f000 fce9 	bl	8005a4a <__i2b>
 8005078:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800507a:	4605      	mov	r5, r0
 800507c:	b35b      	cbz	r3, 80050d6 <_dtoa_r+0x7e6>
 800507e:	461a      	mov	r2, r3
 8005080:	4601      	mov	r1, r0
 8005082:	4650      	mov	r0, sl
 8005084:	f000 fd7c 	bl	8005b80 <__pow5mult>
 8005088:	9b06      	ldr	r3, [sp, #24]
 800508a:	2b01      	cmp	r3, #1
 800508c:	4605      	mov	r5, r0
 800508e:	dc18      	bgt.n	80050c2 <_dtoa_r+0x7d2>
 8005090:	9b00      	ldr	r3, [sp, #0]
 8005092:	b983      	cbnz	r3, 80050b6 <_dtoa_r+0x7c6>
 8005094:	9b01      	ldr	r3, [sp, #4]
 8005096:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800509a:	b973      	cbnz	r3, 80050ba <_dtoa_r+0x7ca>
 800509c:	9b01      	ldr	r3, [sp, #4]
 800509e:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 80050a2:	0d3f      	lsrs	r7, r7, #20
 80050a4:	053f      	lsls	r7, r7, #20
 80050a6:	b14f      	cbz	r7, 80050bc <_dtoa_r+0x7cc>
 80050a8:	9b05      	ldr	r3, [sp, #20]
 80050aa:	3301      	adds	r3, #1
 80050ac:	f109 0901 	add.w	r9, r9, #1
 80050b0:	9305      	str	r3, [sp, #20]
 80050b2:	2701      	movs	r7, #1
 80050b4:	e002      	b.n	80050bc <_dtoa_r+0x7cc>
 80050b6:	2700      	movs	r7, #0
 80050b8:	e000      	b.n	80050bc <_dtoa_r+0x7cc>
 80050ba:	9f00      	ldr	r7, [sp, #0]
 80050bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80050be:	b173      	cbz	r3, 80050de <_dtoa_r+0x7ee>
 80050c0:	e000      	b.n	80050c4 <_dtoa_r+0x7d4>
 80050c2:	2700      	movs	r7, #0
 80050c4:	692b      	ldr	r3, [r5, #16]
 80050c6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80050ca:	6918      	ldr	r0, [r3, #16]
 80050cc:	f000 fc70 	bl	80059b0 <__hi0bits>
 80050d0:	f1c0 0020 	rsb	r0, r0, #32
 80050d4:	e004      	b.n	80050e0 <_dtoa_r+0x7f0>
 80050d6:	9b06      	ldr	r3, [sp, #24]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	ddd9      	ble.n	8005090 <_dtoa_r+0x7a0>
 80050dc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80050de:	2001      	movs	r0, #1
 80050e0:	9b05      	ldr	r3, [sp, #20]
 80050e2:	4418      	add	r0, r3
 80050e4:	f010 001f 	ands.w	r0, r0, #31
 80050e8:	d00e      	beq.n	8005108 <_dtoa_r+0x818>
 80050ea:	f1c0 0320 	rsb	r3, r0, #32
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	dd08      	ble.n	8005104 <_dtoa_r+0x814>
 80050f2:	f1c0 001c 	rsb	r0, r0, #28
 80050f6:	e008      	b.n	800510a <_dtoa_r+0x81a>
 80050f8:	08006670 	.word	0x08006670
 80050fc:	40140000 	.word	0x40140000
 8005100:	40240000 	.word	0x40240000
 8005104:	d006      	beq.n	8005114 <_dtoa_r+0x824>
 8005106:	4618      	mov	r0, r3
 8005108:	301c      	adds	r0, #28
 800510a:	9b05      	ldr	r3, [sp, #20]
 800510c:	4403      	add	r3, r0
 800510e:	4481      	add	r9, r0
 8005110:	4404      	add	r4, r0
 8005112:	9305      	str	r3, [sp, #20]
 8005114:	f1b9 0f00 	cmp.w	r9, #0
 8005118:	dd05      	ble.n	8005126 <_dtoa_r+0x836>
 800511a:	464a      	mov	r2, r9
 800511c:	9902      	ldr	r1, [sp, #8]
 800511e:	4650      	mov	r0, sl
 8005120:	f000 fd7c 	bl	8005c1c <__lshift>
 8005124:	9002      	str	r0, [sp, #8]
 8005126:	9b05      	ldr	r3, [sp, #20]
 8005128:	2b00      	cmp	r3, #0
 800512a:	dd05      	ble.n	8005138 <_dtoa_r+0x848>
 800512c:	4629      	mov	r1, r5
 800512e:	461a      	mov	r2, r3
 8005130:	4650      	mov	r0, sl
 8005132:	f000 fd73 	bl	8005c1c <__lshift>
 8005136:	4605      	mov	r5, r0
 8005138:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800513a:	b1eb      	cbz	r3, 8005178 <_dtoa_r+0x888>
 800513c:	4629      	mov	r1, r5
 800513e:	9802      	ldr	r0, [sp, #8]
 8005140:	f000 fdbd 	bl	8005cbe <__mcmp>
 8005144:	2800      	cmp	r0, #0
 8005146:	da17      	bge.n	8005178 <_dtoa_r+0x888>
 8005148:	2300      	movs	r3, #0
 800514a:	220a      	movs	r2, #10
 800514c:	9902      	ldr	r1, [sp, #8]
 800514e:	4650      	mov	r0, sl
 8005150:	f000 fbf3 	bl	800593a <__multadd>
 8005154:	9b08      	ldr	r3, [sp, #32]
 8005156:	9002      	str	r0, [sp, #8]
 8005158:	f10b 3bff 	add.w	fp, fp, #4294967295
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 8158 	beq.w	8005412 <_dtoa_r+0xb22>
 8005162:	2300      	movs	r3, #0
 8005164:	4631      	mov	r1, r6
 8005166:	220a      	movs	r2, #10
 8005168:	4650      	mov	r0, sl
 800516a:	f000 fbe6 	bl	800593a <__multadd>
 800516e:	9b03      	ldr	r3, [sp, #12]
 8005170:	2b00      	cmp	r3, #0
 8005172:	4606      	mov	r6, r0
 8005174:	dc37      	bgt.n	80051e6 <_dtoa_r+0x8f6>
 8005176:	e033      	b.n	80051e0 <_dtoa_r+0x8f0>
 8005178:	f1b8 0f00 	cmp.w	r8, #0
 800517c:	dc2a      	bgt.n	80051d4 <_dtoa_r+0x8e4>
 800517e:	9b06      	ldr	r3, [sp, #24]
 8005180:	2b02      	cmp	r3, #2
 8005182:	dd27      	ble.n	80051d4 <_dtoa_r+0x8e4>
 8005184:	f8cd 800c 	str.w	r8, [sp, #12]
 8005188:	9b03      	ldr	r3, [sp, #12]
 800518a:	b983      	cbnz	r3, 80051ae <_dtoa_r+0x8be>
 800518c:	4629      	mov	r1, r5
 800518e:	2205      	movs	r2, #5
 8005190:	4650      	mov	r0, sl
 8005192:	f000 fbd2 	bl	800593a <__multadd>
 8005196:	4601      	mov	r1, r0
 8005198:	4605      	mov	r5, r0
 800519a:	9802      	ldr	r0, [sp, #8]
 800519c:	f000 fd8f 	bl	8005cbe <__mcmp>
 80051a0:	2800      	cmp	r0, #0
 80051a2:	dc0d      	bgt.n	80051c0 <_dtoa_r+0x8d0>
 80051a4:	e003      	b.n	80051ae <_dtoa_r+0x8be>
 80051a6:	463d      	mov	r5, r7
 80051a8:	e000      	b.n	80051ac <_dtoa_r+0x8bc>
 80051aa:	2500      	movs	r5, #0
 80051ac:	462e      	mov	r6, r5
 80051ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051b0:	9c04      	ldr	r4, [sp, #16]
 80051b2:	ea6f 0b03 	mvn.w	fp, r3
 80051b6:	e00a      	b.n	80051ce <_dtoa_r+0x8de>
 80051b8:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80051bc:	463d      	mov	r5, r7
 80051be:	463e      	mov	r6, r7
 80051c0:	9b04      	ldr	r3, [sp, #16]
 80051c2:	9a04      	ldr	r2, [sp, #16]
 80051c4:	1c5c      	adds	r4, r3, #1
 80051c6:	2331      	movs	r3, #49	; 0x31
 80051c8:	7013      	strb	r3, [r2, #0]
 80051ca:	f10b 0b01 	add.w	fp, fp, #1
 80051ce:	46b0      	mov	r8, r6
 80051d0:	2600      	movs	r6, #0
 80051d2:	e0f7      	b.n	80053c4 <_dtoa_r+0xad4>
 80051d4:	9b08      	ldr	r3, [sp, #32]
 80051d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80051da:	b923      	cbnz	r3, 80051e6 <_dtoa_r+0x8f6>
 80051dc:	9c04      	ldr	r4, [sp, #16]
 80051de:	e0b1      	b.n	8005344 <_dtoa_r+0xa54>
 80051e0:	9b06      	ldr	r3, [sp, #24]
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	dcd0      	bgt.n	8005188 <_dtoa_r+0x898>
 80051e6:	2c00      	cmp	r4, #0
 80051e8:	dd05      	ble.n	80051f6 <_dtoa_r+0x906>
 80051ea:	4631      	mov	r1, r6
 80051ec:	4622      	mov	r2, r4
 80051ee:	4650      	mov	r0, sl
 80051f0:	f000 fd14 	bl	8005c1c <__lshift>
 80051f4:	4606      	mov	r6, r0
 80051f6:	b19f      	cbz	r7, 8005220 <_dtoa_r+0x930>
 80051f8:	6871      	ldr	r1, [r6, #4]
 80051fa:	4650      	mov	r0, sl
 80051fc:	f000 fb51 	bl	80058a2 <_Balloc>
 8005200:	6932      	ldr	r2, [r6, #16]
 8005202:	3202      	adds	r2, #2
 8005204:	4604      	mov	r4, r0
 8005206:	0092      	lsls	r2, r2, #2
 8005208:	f106 010c 	add.w	r1, r6, #12
 800520c:	300c      	adds	r0, #12
 800520e:	f000 fb3b 	bl	8005888 <memcpy>
 8005212:	2201      	movs	r2, #1
 8005214:	4621      	mov	r1, r4
 8005216:	4650      	mov	r0, sl
 8005218:	f000 fd00 	bl	8005c1c <__lshift>
 800521c:	4680      	mov	r8, r0
 800521e:	e000      	b.n	8005222 <_dtoa_r+0x932>
 8005220:	46b0      	mov	r8, r6
 8005222:	9b00      	ldr	r3, [sp, #0]
 8005224:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8005228:	f003 0301 	and.w	r3, r3, #1
 800522c:	9305      	str	r3, [sp, #20]
 800522e:	4629      	mov	r1, r5
 8005230:	9802      	ldr	r0, [sp, #8]
 8005232:	f7ff facb 	bl	80047cc <quorem>
 8005236:	4631      	mov	r1, r6
 8005238:	4604      	mov	r4, r0
 800523a:	f100 0730 	add.w	r7, r0, #48	; 0x30
 800523e:	9802      	ldr	r0, [sp, #8]
 8005240:	f000 fd3d 	bl	8005cbe <__mcmp>
 8005244:	4642      	mov	r2, r8
 8005246:	9000      	str	r0, [sp, #0]
 8005248:	4629      	mov	r1, r5
 800524a:	4650      	mov	r0, sl
 800524c:	f000 fd53 	bl	8005cf6 <__mdiff>
 8005250:	68c3      	ldr	r3, [r0, #12]
 8005252:	4602      	mov	r2, r0
 8005254:	b93b      	cbnz	r3, 8005266 <_dtoa_r+0x976>
 8005256:	4601      	mov	r1, r0
 8005258:	9007      	str	r0, [sp, #28]
 800525a:	9802      	ldr	r0, [sp, #8]
 800525c:	f000 fd2f 	bl	8005cbe <__mcmp>
 8005260:	9a07      	ldr	r2, [sp, #28]
 8005262:	4603      	mov	r3, r0
 8005264:	e000      	b.n	8005268 <_dtoa_r+0x978>
 8005266:	2301      	movs	r3, #1
 8005268:	4611      	mov	r1, r2
 800526a:	4650      	mov	r0, sl
 800526c:	9307      	str	r3, [sp, #28]
 800526e:	f000 fb4d 	bl	800590c <_Bfree>
 8005272:	9b07      	ldr	r3, [sp, #28]
 8005274:	b94b      	cbnz	r3, 800528a <_dtoa_r+0x99a>
 8005276:	9a06      	ldr	r2, [sp, #24]
 8005278:	b93a      	cbnz	r2, 800528a <_dtoa_r+0x99a>
 800527a:	9a05      	ldr	r2, [sp, #20]
 800527c:	b92a      	cbnz	r2, 800528a <_dtoa_r+0x99a>
 800527e:	2f39      	cmp	r7, #57	; 0x39
 8005280:	d028      	beq.n	80052d4 <_dtoa_r+0x9e4>
 8005282:	9b00      	ldr	r3, [sp, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	dc1a      	bgt.n	80052be <_dtoa_r+0x9ce>
 8005288:	e01b      	b.n	80052c2 <_dtoa_r+0x9d2>
 800528a:	9a00      	ldr	r2, [sp, #0]
 800528c:	2a00      	cmp	r2, #0
 800528e:	db04      	blt.n	800529a <_dtoa_r+0x9aa>
 8005290:	d11a      	bne.n	80052c8 <_dtoa_r+0x9d8>
 8005292:	9a06      	ldr	r2, [sp, #24]
 8005294:	b9c2      	cbnz	r2, 80052c8 <_dtoa_r+0x9d8>
 8005296:	9a05      	ldr	r2, [sp, #20]
 8005298:	b9b2      	cbnz	r2, 80052c8 <_dtoa_r+0x9d8>
 800529a:	2b00      	cmp	r3, #0
 800529c:	dd11      	ble.n	80052c2 <_dtoa_r+0x9d2>
 800529e:	2201      	movs	r2, #1
 80052a0:	9902      	ldr	r1, [sp, #8]
 80052a2:	4650      	mov	r0, sl
 80052a4:	f000 fcba 	bl	8005c1c <__lshift>
 80052a8:	4629      	mov	r1, r5
 80052aa:	9002      	str	r0, [sp, #8]
 80052ac:	f000 fd07 	bl	8005cbe <__mcmp>
 80052b0:	2800      	cmp	r0, #0
 80052b2:	dc02      	bgt.n	80052ba <_dtoa_r+0x9ca>
 80052b4:	d105      	bne.n	80052c2 <_dtoa_r+0x9d2>
 80052b6:	07fa      	lsls	r2, r7, #31
 80052b8:	d503      	bpl.n	80052c2 <_dtoa_r+0x9d2>
 80052ba:	2f39      	cmp	r7, #57	; 0x39
 80052bc:	d00a      	beq.n	80052d4 <_dtoa_r+0x9e4>
 80052be:	f104 0731 	add.w	r7, r4, #49	; 0x31
 80052c2:	f109 0401 	add.w	r4, r9, #1
 80052c6:	e00c      	b.n	80052e2 <_dtoa_r+0x9f2>
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f109 0401 	add.w	r4, r9, #1
 80052ce:	dd0b      	ble.n	80052e8 <_dtoa_r+0x9f8>
 80052d0:	2f39      	cmp	r7, #57	; 0x39
 80052d2:	d105      	bne.n	80052e0 <_dtoa_r+0x9f0>
 80052d4:	2339      	movs	r3, #57	; 0x39
 80052d6:	f889 3000 	strb.w	r3, [r9]
 80052da:	f109 0901 	add.w	r9, r9, #1
 80052de:	e054      	b.n	800538a <_dtoa_r+0xa9a>
 80052e0:	3701      	adds	r7, #1
 80052e2:	f889 7000 	strb.w	r7, [r9]
 80052e6:	e06d      	b.n	80053c4 <_dtoa_r+0xad4>
 80052e8:	9b04      	ldr	r3, [sp, #16]
 80052ea:	9a03      	ldr	r2, [sp, #12]
 80052ec:	f804 7c01 	strb.w	r7, [r4, #-1]
 80052f0:	1ae3      	subs	r3, r4, r3
 80052f2:	4293      	cmp	r3, r2
 80052f4:	46a1      	mov	r9, r4
 80052f6:	d03a      	beq.n	800536e <_dtoa_r+0xa7e>
 80052f8:	2300      	movs	r3, #0
 80052fa:	220a      	movs	r2, #10
 80052fc:	9902      	ldr	r1, [sp, #8]
 80052fe:	4650      	mov	r0, sl
 8005300:	f000 fb1b 	bl	800593a <__multadd>
 8005304:	4546      	cmp	r6, r8
 8005306:	9002      	str	r0, [sp, #8]
 8005308:	f04f 0300 	mov.w	r3, #0
 800530c:	f04f 020a 	mov.w	r2, #10
 8005310:	4631      	mov	r1, r6
 8005312:	4650      	mov	r0, sl
 8005314:	d104      	bne.n	8005320 <_dtoa_r+0xa30>
 8005316:	f000 fb10 	bl	800593a <__multadd>
 800531a:	4606      	mov	r6, r0
 800531c:	4680      	mov	r8, r0
 800531e:	e786      	b.n	800522e <_dtoa_r+0x93e>
 8005320:	f000 fb0b 	bl	800593a <__multadd>
 8005324:	4641      	mov	r1, r8
 8005326:	4606      	mov	r6, r0
 8005328:	2300      	movs	r3, #0
 800532a:	220a      	movs	r2, #10
 800532c:	4650      	mov	r0, sl
 800532e:	f000 fb04 	bl	800593a <__multadd>
 8005332:	4680      	mov	r8, r0
 8005334:	e77b      	b.n	800522e <_dtoa_r+0x93e>
 8005336:	2300      	movs	r3, #0
 8005338:	220a      	movs	r2, #10
 800533a:	9902      	ldr	r1, [sp, #8]
 800533c:	4650      	mov	r0, sl
 800533e:	f000 fafc 	bl	800593a <__multadd>
 8005342:	9002      	str	r0, [sp, #8]
 8005344:	4629      	mov	r1, r5
 8005346:	9802      	ldr	r0, [sp, #8]
 8005348:	f7ff fa40 	bl	80047cc <quorem>
 800534c:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8005350:	f804 7b01 	strb.w	r7, [r4], #1
 8005354:	9b04      	ldr	r3, [sp, #16]
 8005356:	9a03      	ldr	r2, [sp, #12]
 8005358:	1ae3      	subs	r3, r4, r3
 800535a:	4293      	cmp	r3, r2
 800535c:	dbeb      	blt.n	8005336 <_dtoa_r+0xa46>
 800535e:	9b04      	ldr	r3, [sp, #16]
 8005360:	2a01      	cmp	r2, #1
 8005362:	bfac      	ite	ge
 8005364:	189b      	addge	r3, r3, r2
 8005366:	3301      	addlt	r3, #1
 8005368:	46b0      	mov	r8, r6
 800536a:	4699      	mov	r9, r3
 800536c:	2600      	movs	r6, #0
 800536e:	2201      	movs	r2, #1
 8005370:	9902      	ldr	r1, [sp, #8]
 8005372:	4650      	mov	r0, sl
 8005374:	f000 fc52 	bl	8005c1c <__lshift>
 8005378:	4629      	mov	r1, r5
 800537a:	9002      	str	r0, [sp, #8]
 800537c:	f000 fc9f 	bl	8005cbe <__mcmp>
 8005380:	2800      	cmp	r0, #0
 8005382:	dc02      	bgt.n	800538a <_dtoa_r+0xa9a>
 8005384:	d115      	bne.n	80053b2 <_dtoa_r+0xac2>
 8005386:	07fb      	lsls	r3, r7, #31
 8005388:	d513      	bpl.n	80053b2 <_dtoa_r+0xac2>
 800538a:	464c      	mov	r4, r9
 800538c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8005390:	2b39      	cmp	r3, #57	; 0x39
 8005392:	f104 32ff 	add.w	r2, r4, #4294967295
 8005396:	d109      	bne.n	80053ac <_dtoa_r+0xabc>
 8005398:	9b04      	ldr	r3, [sp, #16]
 800539a:	4293      	cmp	r3, r2
 800539c:	d104      	bne.n	80053a8 <_dtoa_r+0xab8>
 800539e:	f10b 0b01 	add.w	fp, fp, #1
 80053a2:	2331      	movs	r3, #49	; 0x31
 80053a4:	9a04      	ldr	r2, [sp, #16]
 80053a6:	e002      	b.n	80053ae <_dtoa_r+0xabe>
 80053a8:	4614      	mov	r4, r2
 80053aa:	e7ef      	b.n	800538c <_dtoa_r+0xa9c>
 80053ac:	3301      	adds	r3, #1
 80053ae:	7013      	strb	r3, [r2, #0]
 80053b0:	e008      	b.n	80053c4 <_dtoa_r+0xad4>
 80053b2:	464c      	mov	r4, r9
 80053b4:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 80053b8:	2b30      	cmp	r3, #48	; 0x30
 80053ba:	f104 32ff 	add.w	r2, r4, #4294967295
 80053be:	d101      	bne.n	80053c4 <_dtoa_r+0xad4>
 80053c0:	4614      	mov	r4, r2
 80053c2:	e7f7      	b.n	80053b4 <_dtoa_r+0xac4>
 80053c4:	4629      	mov	r1, r5
 80053c6:	4650      	mov	r0, sl
 80053c8:	f000 faa0 	bl	800590c <_Bfree>
 80053cc:	f1b8 0f00 	cmp.w	r8, #0
 80053d0:	d00d      	beq.n	80053ee <_dtoa_r+0xafe>
 80053d2:	b12e      	cbz	r6, 80053e0 <_dtoa_r+0xaf0>
 80053d4:	4546      	cmp	r6, r8
 80053d6:	d003      	beq.n	80053e0 <_dtoa_r+0xaf0>
 80053d8:	4631      	mov	r1, r6
 80053da:	4650      	mov	r0, sl
 80053dc:	f000 fa96 	bl	800590c <_Bfree>
 80053e0:	4641      	mov	r1, r8
 80053e2:	4650      	mov	r0, sl
 80053e4:	f000 fa92 	bl	800590c <_Bfree>
 80053e8:	e001      	b.n	80053ee <_dtoa_r+0xafe>
 80053ea:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80053ee:	9902      	ldr	r1, [sp, #8]
 80053f0:	4650      	mov	r0, sl
 80053f2:	f000 fa8b 	bl	800590c <_Bfree>
 80053f6:	2300      	movs	r3, #0
 80053f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80053fa:	7023      	strb	r3, [r4, #0]
 80053fc:	f10b 0301 	add.w	r3, fp, #1
 8005400:	6013      	str	r3, [r2, #0]
 8005402:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005404:	b11b      	cbz	r3, 800540e <_dtoa_r+0xb1e>
 8005406:	601c      	str	r4, [r3, #0]
 8005408:	e001      	b.n	800540e <_dtoa_r+0xb1e>
 800540a:	4808      	ldr	r0, [pc, #32]	; (800542c <_dtoa_r+0xb3c>)
 800540c:	e00a      	b.n	8005424 <_dtoa_r+0xb34>
 800540e:	9804      	ldr	r0, [sp, #16]
 8005410:	e008      	b.n	8005424 <_dtoa_r+0xb34>
 8005412:	9b03      	ldr	r3, [sp, #12]
 8005414:	2b00      	cmp	r3, #0
 8005416:	f73f aee1 	bgt.w	80051dc <_dtoa_r+0x8ec>
 800541a:	9b06      	ldr	r3, [sp, #24]
 800541c:	2b02      	cmp	r3, #2
 800541e:	f77f aedd 	ble.w	80051dc <_dtoa_r+0x8ec>
 8005422:	e6b1      	b.n	8005188 <_dtoa_r+0x898>
 8005424:	b017      	add	sp, #92	; 0x5c
 8005426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800542a:	bf00      	nop
 800542c:	08006642 	.word	0x08006642

08005430 <_localeconv_r>:
 8005430:	4800      	ldr	r0, [pc, #0]	; (8005434 <_localeconv_r+0x4>)
 8005432:	4770      	bx	lr
 8005434:	200000f8 	.word	0x200000f8

08005438 <malloc>:
 8005438:	4b02      	ldr	r3, [pc, #8]	; (8005444 <malloc+0xc>)
 800543a:	4601      	mov	r1, r0
 800543c:	6818      	ldr	r0, [r3, #0]
 800543e:	f000 b803 	b.w	8005448 <_malloc_r>
 8005442:	bf00      	nop
 8005444:	200000f4 	.word	0x200000f4

08005448 <_malloc_r>:
 8005448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800544c:	f101 040b 	add.w	r4, r1, #11
 8005450:	2c16      	cmp	r4, #22
 8005452:	b085      	sub	sp, #20
 8005454:	4681      	mov	r9, r0
 8005456:	d903      	bls.n	8005460 <_malloc_r+0x18>
 8005458:	f034 0407 	bics.w	r4, r4, #7
 800545c:	d501      	bpl.n	8005462 <_malloc_r+0x1a>
 800545e:	e002      	b.n	8005466 <_malloc_r+0x1e>
 8005460:	2410      	movs	r4, #16
 8005462:	428c      	cmp	r4, r1
 8005464:	d203      	bcs.n	800546e <_malloc_r+0x26>
 8005466:	230c      	movs	r3, #12
 8005468:	f8c9 3000 	str.w	r3, [r9]
 800546c:	e1ea      	b.n	8005844 <_malloc_r+0x3fc>
 800546e:	4648      	mov	r0, r9
 8005470:	f000 fa15 	bl	800589e <__malloc_lock>
 8005474:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8005478:	4d9e      	ldr	r5, [pc, #632]	; (80056f4 <_malloc_r+0x2ac>)
 800547a:	d217      	bcs.n	80054ac <_malloc_r+0x64>
 800547c:	f104 0208 	add.w	r2, r4, #8
 8005480:	442a      	add	r2, r5
 8005482:	f1a2 0108 	sub.w	r1, r2, #8
 8005486:	6856      	ldr	r6, [r2, #4]
 8005488:	428e      	cmp	r6, r1
 800548a:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 800548e:	d102      	bne.n	8005496 <_malloc_r+0x4e>
 8005490:	68d6      	ldr	r6, [r2, #12]
 8005492:	42b2      	cmp	r2, r6
 8005494:	d008      	beq.n	80054a8 <_malloc_r+0x60>
 8005496:	6873      	ldr	r3, [r6, #4]
 8005498:	68f2      	ldr	r2, [r6, #12]
 800549a:	68b1      	ldr	r1, [r6, #8]
 800549c:	f023 0303 	bic.w	r3, r3, #3
 80054a0:	60ca      	str	r2, [r1, #12]
 80054a2:	4433      	add	r3, r6
 80054a4:	6091      	str	r1, [r2, #8]
 80054a6:	e02f      	b.n	8005508 <_malloc_r+0xc0>
 80054a8:	3302      	adds	r3, #2
 80054aa:	e03d      	b.n	8005528 <_malloc_r+0xe0>
 80054ac:	0a63      	lsrs	r3, r4, #9
 80054ae:	d01a      	beq.n	80054e6 <_malloc_r+0x9e>
 80054b0:	2b04      	cmp	r3, #4
 80054b2:	d802      	bhi.n	80054ba <_malloc_r+0x72>
 80054b4:	09a3      	lsrs	r3, r4, #6
 80054b6:	3338      	adds	r3, #56	; 0x38
 80054b8:	e018      	b.n	80054ec <_malloc_r+0xa4>
 80054ba:	2b14      	cmp	r3, #20
 80054bc:	d801      	bhi.n	80054c2 <_malloc_r+0x7a>
 80054be:	335b      	adds	r3, #91	; 0x5b
 80054c0:	e014      	b.n	80054ec <_malloc_r+0xa4>
 80054c2:	2b54      	cmp	r3, #84	; 0x54
 80054c4:	d802      	bhi.n	80054cc <_malloc_r+0x84>
 80054c6:	0b23      	lsrs	r3, r4, #12
 80054c8:	336e      	adds	r3, #110	; 0x6e
 80054ca:	e00f      	b.n	80054ec <_malloc_r+0xa4>
 80054cc:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80054d0:	d802      	bhi.n	80054d8 <_malloc_r+0x90>
 80054d2:	0be3      	lsrs	r3, r4, #15
 80054d4:	3377      	adds	r3, #119	; 0x77
 80054d6:	e009      	b.n	80054ec <_malloc_r+0xa4>
 80054d8:	f240 5254 	movw	r2, #1364	; 0x554
 80054dc:	4293      	cmp	r3, r2
 80054de:	d804      	bhi.n	80054ea <_malloc_r+0xa2>
 80054e0:	0ca3      	lsrs	r3, r4, #18
 80054e2:	337c      	adds	r3, #124	; 0x7c
 80054e4:	e002      	b.n	80054ec <_malloc_r+0xa4>
 80054e6:	233f      	movs	r3, #63	; 0x3f
 80054e8:	e000      	b.n	80054ec <_malloc_r+0xa4>
 80054ea:	237e      	movs	r3, #126	; 0x7e
 80054ec:	1c5a      	adds	r2, r3, #1
 80054ee:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80054f2:	f1a2 0008 	sub.w	r0, r2, #8
 80054f6:	6856      	ldr	r6, [r2, #4]
 80054f8:	e00c      	b.n	8005514 <_malloc_r+0xcc>
 80054fa:	2900      	cmp	r1, #0
 80054fc:	68f1      	ldr	r1, [r6, #12]
 80054fe:	db08      	blt.n	8005512 <_malloc_r+0xca>
 8005500:	68b3      	ldr	r3, [r6, #8]
 8005502:	60d9      	str	r1, [r3, #12]
 8005504:	608b      	str	r3, [r1, #8]
 8005506:	18b3      	adds	r3, r6, r2
 8005508:	685a      	ldr	r2, [r3, #4]
 800550a:	f042 0201 	orr.w	r2, r2, #1
 800550e:	605a      	str	r2, [r3, #4]
 8005510:	e1a3      	b.n	800585a <_malloc_r+0x412>
 8005512:	460e      	mov	r6, r1
 8005514:	4286      	cmp	r6, r0
 8005516:	d006      	beq.n	8005526 <_malloc_r+0xde>
 8005518:	6872      	ldr	r2, [r6, #4]
 800551a:	f022 0203 	bic.w	r2, r2, #3
 800551e:	1b11      	subs	r1, r2, r4
 8005520:	290f      	cmp	r1, #15
 8005522:	ddea      	ble.n	80054fa <_malloc_r+0xb2>
 8005524:	3b01      	subs	r3, #1
 8005526:	3301      	adds	r3, #1
 8005528:	4a72      	ldr	r2, [pc, #456]	; (80056f4 <_malloc_r+0x2ac>)
 800552a:	692e      	ldr	r6, [r5, #16]
 800552c:	f102 0708 	add.w	r7, r2, #8
 8005530:	42be      	cmp	r6, r7
 8005532:	4639      	mov	r1, r7
 8005534:	d079      	beq.n	800562a <_malloc_r+0x1e2>
 8005536:	6870      	ldr	r0, [r6, #4]
 8005538:	f020 0003 	bic.w	r0, r0, #3
 800553c:	ebc4 0e00 	rsb	lr, r4, r0
 8005540:	f1be 0f0f 	cmp.w	lr, #15
 8005544:	dd0d      	ble.n	8005562 <_malloc_r+0x11a>
 8005546:	1933      	adds	r3, r6, r4
 8005548:	f044 0401 	orr.w	r4, r4, #1
 800554c:	6074      	str	r4, [r6, #4]
 800554e:	6153      	str	r3, [r2, #20]
 8005550:	6113      	str	r3, [r2, #16]
 8005552:	f04e 0201 	orr.w	r2, lr, #1
 8005556:	60df      	str	r7, [r3, #12]
 8005558:	609f      	str	r7, [r3, #8]
 800555a:	605a      	str	r2, [r3, #4]
 800555c:	f843 e00e 	str.w	lr, [r3, lr]
 8005560:	e17b      	b.n	800585a <_malloc_r+0x412>
 8005562:	f1be 0f00 	cmp.w	lr, #0
 8005566:	6157      	str	r7, [r2, #20]
 8005568:	6117      	str	r7, [r2, #16]
 800556a:	db05      	blt.n	8005578 <_malloc_r+0x130>
 800556c:	4430      	add	r0, r6
 800556e:	6843      	ldr	r3, [r0, #4]
 8005570:	f043 0301 	orr.w	r3, r3, #1
 8005574:	6043      	str	r3, [r0, #4]
 8005576:	e170      	b.n	800585a <_malloc_r+0x412>
 8005578:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800557c:	d215      	bcs.n	80055aa <_malloc_r+0x162>
 800557e:	08c0      	lsrs	r0, r0, #3
 8005580:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 8005584:	2701      	movs	r7, #1
 8005586:	fa07 fe0e 	lsl.w	lr, r7, lr
 800558a:	6857      	ldr	r7, [r2, #4]
 800558c:	3001      	adds	r0, #1
 800558e:	ea4e 0707 	orr.w	r7, lr, r7
 8005592:	6057      	str	r7, [r2, #4]
 8005594:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 8005598:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 800559c:	f8c6 e008 	str.w	lr, [r6, #8]
 80055a0:	3f08      	subs	r7, #8
 80055a2:	60f7      	str	r7, [r6, #12]
 80055a4:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 80055a8:	e03d      	b.n	8005626 <_malloc_r+0x1de>
 80055aa:	0a42      	lsrs	r2, r0, #9
 80055ac:	2a04      	cmp	r2, #4
 80055ae:	d802      	bhi.n	80055b6 <_malloc_r+0x16e>
 80055b0:	0982      	lsrs	r2, r0, #6
 80055b2:	3238      	adds	r2, #56	; 0x38
 80055b4:	e015      	b.n	80055e2 <_malloc_r+0x19a>
 80055b6:	2a14      	cmp	r2, #20
 80055b8:	d801      	bhi.n	80055be <_malloc_r+0x176>
 80055ba:	325b      	adds	r2, #91	; 0x5b
 80055bc:	e011      	b.n	80055e2 <_malloc_r+0x19a>
 80055be:	2a54      	cmp	r2, #84	; 0x54
 80055c0:	d802      	bhi.n	80055c8 <_malloc_r+0x180>
 80055c2:	0b02      	lsrs	r2, r0, #12
 80055c4:	326e      	adds	r2, #110	; 0x6e
 80055c6:	e00c      	b.n	80055e2 <_malloc_r+0x19a>
 80055c8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80055cc:	d802      	bhi.n	80055d4 <_malloc_r+0x18c>
 80055ce:	0bc2      	lsrs	r2, r0, #15
 80055d0:	3277      	adds	r2, #119	; 0x77
 80055d2:	e006      	b.n	80055e2 <_malloc_r+0x19a>
 80055d4:	f240 5754 	movw	r7, #1364	; 0x554
 80055d8:	42ba      	cmp	r2, r7
 80055da:	bf9a      	itte	ls
 80055dc:	0c82      	lsrls	r2, r0, #18
 80055de:	327c      	addls	r2, #124	; 0x7c
 80055e0:	227e      	movhi	r2, #126	; 0x7e
 80055e2:	1c57      	adds	r7, r2, #1
 80055e4:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 80055e8:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 80055ec:	f8df c104 	ldr.w	ip, [pc, #260]	; 80056f4 <_malloc_r+0x2ac>
 80055f0:	45be      	cmp	lr, r7
 80055f2:	d10d      	bne.n	8005610 <_malloc_r+0x1c8>
 80055f4:	2001      	movs	r0, #1
 80055f6:	1092      	asrs	r2, r2, #2
 80055f8:	fa00 f202 	lsl.w	r2, r0, r2
 80055fc:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8005600:	4310      	orrs	r0, r2
 8005602:	f8cc 0004 	str.w	r0, [ip, #4]
 8005606:	4672      	mov	r2, lr
 8005608:	e009      	b.n	800561e <_malloc_r+0x1d6>
 800560a:	68bf      	ldr	r7, [r7, #8]
 800560c:	45be      	cmp	lr, r7
 800560e:	d004      	beq.n	800561a <_malloc_r+0x1d2>
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	f022 0203 	bic.w	r2, r2, #3
 8005616:	4290      	cmp	r0, r2
 8005618:	d3f7      	bcc.n	800560a <_malloc_r+0x1c2>
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	46be      	mov	lr, r7
 800561e:	60f2      	str	r2, [r6, #12]
 8005620:	f8c6 e008 	str.w	lr, [r6, #8]
 8005624:	6096      	str	r6, [r2, #8]
 8005626:	f8ce 600c 	str.w	r6, [lr, #12]
 800562a:	2001      	movs	r0, #1
 800562c:	109a      	asrs	r2, r3, #2
 800562e:	fa00 f202 	lsl.w	r2, r0, r2
 8005632:	6868      	ldr	r0, [r5, #4]
 8005634:	4282      	cmp	r2, r0
 8005636:	d85f      	bhi.n	80056f8 <_malloc_r+0x2b0>
 8005638:	4202      	tst	r2, r0
 800563a:	d106      	bne.n	800564a <_malloc_r+0x202>
 800563c:	f023 0303 	bic.w	r3, r3, #3
 8005640:	0052      	lsls	r2, r2, #1
 8005642:	4202      	tst	r2, r0
 8005644:	f103 0304 	add.w	r3, r3, #4
 8005648:	d0fa      	beq.n	8005640 <_malloc_r+0x1f8>
 800564a:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 800564e:	46c2      	mov	sl, r8
 8005650:	469c      	mov	ip, r3
 8005652:	f8da 600c 	ldr.w	r6, [sl, #12]
 8005656:	4556      	cmp	r6, sl
 8005658:	d02c      	beq.n	80056b4 <_malloc_r+0x26c>
 800565a:	6870      	ldr	r0, [r6, #4]
 800565c:	68f7      	ldr	r7, [r6, #12]
 800565e:	f020 0003 	bic.w	r0, r0, #3
 8005662:	ebc4 0e00 	rsb	lr, r4, r0
 8005666:	f1be 0f0f 	cmp.w	lr, #15
 800566a:	dd11      	ble.n	8005690 <_malloc_r+0x248>
 800566c:	1933      	adds	r3, r6, r4
 800566e:	f044 0401 	orr.w	r4, r4, #1
 8005672:	6074      	str	r4, [r6, #4]
 8005674:	f856 2f08 	ldr.w	r2, [r6, #8]!
 8005678:	60d7      	str	r7, [r2, #12]
 800567a:	60ba      	str	r2, [r7, #8]
 800567c:	f04e 0201 	orr.w	r2, lr, #1
 8005680:	616b      	str	r3, [r5, #20]
 8005682:	612b      	str	r3, [r5, #16]
 8005684:	60d9      	str	r1, [r3, #12]
 8005686:	6099      	str	r1, [r3, #8]
 8005688:	605a      	str	r2, [r3, #4]
 800568a:	f843 e00e 	str.w	lr, [r3, lr]
 800568e:	e00b      	b.n	80056a8 <_malloc_r+0x260>
 8005690:	f1be 0f00 	cmp.w	lr, #0
 8005694:	db0c      	blt.n	80056b0 <_malloc_r+0x268>
 8005696:	1833      	adds	r3, r6, r0
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	f042 0201 	orr.w	r2, r2, #1
 800569e:	605a      	str	r2, [r3, #4]
 80056a0:	f856 3f08 	ldr.w	r3, [r6, #8]!
 80056a4:	60df      	str	r7, [r3, #12]
 80056a6:	60bb      	str	r3, [r7, #8]
 80056a8:	4648      	mov	r0, r9
 80056aa:	f000 f8f9 	bl	80058a0 <__malloc_unlock>
 80056ae:	e0d8      	b.n	8005862 <_malloc_r+0x41a>
 80056b0:	463e      	mov	r6, r7
 80056b2:	e7d0      	b.n	8005656 <_malloc_r+0x20e>
 80056b4:	f10c 0c01 	add.w	ip, ip, #1
 80056b8:	f01c 0f03 	tst.w	ip, #3
 80056bc:	f10a 0a08 	add.w	sl, sl, #8
 80056c0:	d1c7      	bne.n	8005652 <_malloc_r+0x20a>
 80056c2:	0798      	lsls	r0, r3, #30
 80056c4:	d104      	bne.n	80056d0 <_malloc_r+0x288>
 80056c6:	686b      	ldr	r3, [r5, #4]
 80056c8:	ea23 0302 	bic.w	r3, r3, r2
 80056cc:	606b      	str	r3, [r5, #4]
 80056ce:	e005      	b.n	80056dc <_malloc_r+0x294>
 80056d0:	f858 0908 	ldr.w	r0, [r8], #-8
 80056d4:	4580      	cmp	r8, r0
 80056d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80056da:	d0f2      	beq.n	80056c2 <_malloc_r+0x27a>
 80056dc:	6868      	ldr	r0, [r5, #4]
 80056de:	0052      	lsls	r2, r2, #1
 80056e0:	4282      	cmp	r2, r0
 80056e2:	d809      	bhi.n	80056f8 <_malloc_r+0x2b0>
 80056e4:	b142      	cbz	r2, 80056f8 <_malloc_r+0x2b0>
 80056e6:	4663      	mov	r3, ip
 80056e8:	4202      	tst	r2, r0
 80056ea:	d1ae      	bne.n	800564a <_malloc_r+0x202>
 80056ec:	3304      	adds	r3, #4
 80056ee:	0052      	lsls	r2, r2, #1
 80056f0:	e7fa      	b.n	80056e8 <_malloc_r+0x2a0>
 80056f2:	bf00      	nop
 80056f4:	20000130 	.word	0x20000130
 80056f8:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80056fc:	f8db 6004 	ldr.w	r6, [fp, #4]
 8005700:	f026 0603 	bic.w	r6, r6, #3
 8005704:	42b4      	cmp	r4, r6
 8005706:	d803      	bhi.n	8005710 <_malloc_r+0x2c8>
 8005708:	1b33      	subs	r3, r6, r4
 800570a:	2b0f      	cmp	r3, #15
 800570c:	f300 809c 	bgt.w	8005848 <_malloc_r+0x400>
 8005710:	4a56      	ldr	r2, [pc, #344]	; (800586c <_malloc_r+0x424>)
 8005712:	4957      	ldr	r1, [pc, #348]	; (8005870 <_malloc_r+0x428>)
 8005714:	6812      	ldr	r2, [r2, #0]
 8005716:	6808      	ldr	r0, [r1, #0]
 8005718:	9101      	str	r1, [sp, #4]
 800571a:	f102 0810 	add.w	r8, r2, #16
 800571e:	4a55      	ldr	r2, [pc, #340]	; (8005874 <_malloc_r+0x42c>)
 8005720:	9203      	str	r2, [sp, #12]
 8005722:	3001      	adds	r0, #1
 8005724:	bf18      	it	ne
 8005726:	f102 31ff 	addne.w	r1, r2, #4294967295
 800572a:	44a0      	add	r8, r4
 800572c:	bf1e      	ittt	ne
 800572e:	4488      	addne	r8, r1
 8005730:	4251      	negne	r1, r2
 8005732:	ea01 0808 	andne.w	r8, r1, r8
 8005736:	eb0b 0306 	add.w	r3, fp, r6
 800573a:	4641      	mov	r1, r8
 800573c:	4648      	mov	r0, r9
 800573e:	9302      	str	r3, [sp, #8]
 8005740:	f000 fb86 	bl	8005e50 <_sbrk_r>
 8005744:	1c42      	adds	r2, r0, #1
 8005746:	4607      	mov	r7, r0
 8005748:	d06f      	beq.n	800582a <_malloc_r+0x3e2>
 800574a:	9b02      	ldr	r3, [sp, #8]
 800574c:	9a03      	ldr	r2, [sp, #12]
 800574e:	4283      	cmp	r3, r0
 8005750:	d901      	bls.n	8005756 <_malloc_r+0x30e>
 8005752:	45ab      	cmp	fp, r5
 8005754:	d169      	bne.n	800582a <_malloc_r+0x3e2>
 8005756:	f8df a128 	ldr.w	sl, [pc, #296]	; 8005880 <_malloc_r+0x438>
 800575a:	f8df c128 	ldr.w	ip, [pc, #296]	; 8005884 <_malloc_r+0x43c>
 800575e:	f8da 0000 	ldr.w	r0, [sl]
 8005762:	42bb      	cmp	r3, r7
 8005764:	4440      	add	r0, r8
 8005766:	f8ca 0000 	str.w	r0, [sl]
 800576a:	d108      	bne.n	800577e <_malloc_r+0x336>
 800576c:	ea13 0f0c 	tst.w	r3, ip
 8005770:	d105      	bne.n	800577e <_malloc_r+0x336>
 8005772:	68ab      	ldr	r3, [r5, #8]
 8005774:	4446      	add	r6, r8
 8005776:	f046 0601 	orr.w	r6, r6, #1
 800577a:	605e      	str	r6, [r3, #4]
 800577c:	e049      	b.n	8005812 <_malloc_r+0x3ca>
 800577e:	9901      	ldr	r1, [sp, #4]
 8005780:	f8d1 e000 	ldr.w	lr, [r1]
 8005784:	f1be 3fff 	cmp.w	lr, #4294967295
 8005788:	bf15      	itete	ne
 800578a:	1afb      	subne	r3, r7, r3
 800578c:	4b38      	ldreq	r3, [pc, #224]	; (8005870 <_malloc_r+0x428>)
 800578e:	181b      	addne	r3, r3, r0
 8005790:	601f      	streq	r7, [r3, #0]
 8005792:	bf18      	it	ne
 8005794:	f8ca 3000 	strne.w	r3, [sl]
 8005798:	f017 0307 	ands.w	r3, r7, #7
 800579c:	bf1c      	itt	ne
 800579e:	f1c3 0308 	rsbne	r3, r3, #8
 80057a2:	18ff      	addne	r7, r7, r3
 80057a4:	44b8      	add	r8, r7
 80057a6:	441a      	add	r2, r3
 80057a8:	ea08 080c 	and.w	r8, r8, ip
 80057ac:	ebc8 0802 	rsb	r8, r8, r2
 80057b0:	4641      	mov	r1, r8
 80057b2:	4648      	mov	r0, r9
 80057b4:	f000 fb4c 	bl	8005e50 <_sbrk_r>
 80057b8:	1c43      	adds	r3, r0, #1
 80057ba:	bf04      	itt	eq
 80057bc:	4638      	moveq	r0, r7
 80057be:	f04f 0800 	moveq.w	r8, #0
 80057c2:	f8da 3000 	ldr.w	r3, [sl]
 80057c6:	60af      	str	r7, [r5, #8]
 80057c8:	1bc2      	subs	r2, r0, r7
 80057ca:	4442      	add	r2, r8
 80057cc:	4443      	add	r3, r8
 80057ce:	f042 0201 	orr.w	r2, r2, #1
 80057d2:	45ab      	cmp	fp, r5
 80057d4:	f8ca 3000 	str.w	r3, [sl]
 80057d8:	607a      	str	r2, [r7, #4]
 80057da:	d01a      	beq.n	8005812 <_malloc_r+0x3ca>
 80057dc:	2e0f      	cmp	r6, #15
 80057de:	d802      	bhi.n	80057e6 <_malloc_r+0x39e>
 80057e0:	2301      	movs	r3, #1
 80057e2:	607b      	str	r3, [r7, #4]
 80057e4:	e021      	b.n	800582a <_malloc_r+0x3e2>
 80057e6:	f8db 3004 	ldr.w	r3, [fp, #4]
 80057ea:	3e0c      	subs	r6, #12
 80057ec:	f026 0607 	bic.w	r6, r6, #7
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	4333      	orrs	r3, r6
 80057f6:	f8cb 3004 	str.w	r3, [fp, #4]
 80057fa:	eb0b 0306 	add.w	r3, fp, r6
 80057fe:	2205      	movs	r2, #5
 8005800:	2e0f      	cmp	r6, #15
 8005802:	605a      	str	r2, [r3, #4]
 8005804:	609a      	str	r2, [r3, #8]
 8005806:	d904      	bls.n	8005812 <_malloc_r+0x3ca>
 8005808:	f10b 0108 	add.w	r1, fp, #8
 800580c:	4648      	mov	r0, r9
 800580e:	f000 fc31 	bl	8006074 <_free_r>
 8005812:	4a19      	ldr	r2, [pc, #100]	; (8005878 <_malloc_r+0x430>)
 8005814:	f8da 3000 	ldr.w	r3, [sl]
 8005818:	6811      	ldr	r1, [r2, #0]
 800581a:	428b      	cmp	r3, r1
 800581c:	bf88      	it	hi
 800581e:	6013      	strhi	r3, [r2, #0]
 8005820:	4a16      	ldr	r2, [pc, #88]	; (800587c <_malloc_r+0x434>)
 8005822:	6811      	ldr	r1, [r2, #0]
 8005824:	428b      	cmp	r3, r1
 8005826:	bf88      	it	hi
 8005828:	6013      	strhi	r3, [r2, #0]
 800582a:	68ab      	ldr	r3, [r5, #8]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	f022 0203 	bic.w	r2, r2, #3
 8005832:	4294      	cmp	r4, r2
 8005834:	eba2 0304 	sub.w	r3, r2, r4
 8005838:	d801      	bhi.n	800583e <_malloc_r+0x3f6>
 800583a:	2b0f      	cmp	r3, #15
 800583c:	dc04      	bgt.n	8005848 <_malloc_r+0x400>
 800583e:	4648      	mov	r0, r9
 8005840:	f000 f82e 	bl	80058a0 <__malloc_unlock>
 8005844:	2600      	movs	r6, #0
 8005846:	e00c      	b.n	8005862 <_malloc_r+0x41a>
 8005848:	68ae      	ldr	r6, [r5, #8]
 800584a:	f044 0201 	orr.w	r2, r4, #1
 800584e:	4434      	add	r4, r6
 8005850:	f043 0301 	orr.w	r3, r3, #1
 8005854:	6072      	str	r2, [r6, #4]
 8005856:	60ac      	str	r4, [r5, #8]
 8005858:	6063      	str	r3, [r4, #4]
 800585a:	4648      	mov	r0, r9
 800585c:	f000 f820 	bl	80058a0 <__malloc_unlock>
 8005860:	3608      	adds	r6, #8
 8005862:	4630      	mov	r0, r6
 8005864:	b005      	add	sp, #20
 8005866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800586a:	bf00      	nop
 800586c:	20000564 	.word	0x20000564
 8005870:	2000053c 	.word	0x2000053c
 8005874:	00000080 	.word	0x00000080
 8005878:	20000560 	.word	0x20000560
 800587c:	2000055c 	.word	0x2000055c
 8005880:	20000568 	.word	0x20000568
 8005884:	0000007f 	.word	0x0000007f

08005888 <memcpy>:
 8005888:	b510      	push	{r4, lr}
 800588a:	1e43      	subs	r3, r0, #1
 800588c:	440a      	add	r2, r1
 800588e:	4291      	cmp	r1, r2
 8005890:	d004      	beq.n	800589c <memcpy+0x14>
 8005892:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005896:	f803 4f01 	strb.w	r4, [r3, #1]!
 800589a:	e7f8      	b.n	800588e <memcpy+0x6>
 800589c:	bd10      	pop	{r4, pc}

0800589e <__malloc_lock>:
 800589e:	4770      	bx	lr

080058a0 <__malloc_unlock>:
 80058a0:	4770      	bx	lr

080058a2 <_Balloc>:
 80058a2:	b570      	push	{r4, r5, r6, lr}
 80058a4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80058a6:	4604      	mov	r4, r0
 80058a8:	460e      	mov	r6, r1
 80058aa:	b93d      	cbnz	r5, 80058bc <_Balloc+0x1a>
 80058ac:	2010      	movs	r0, #16
 80058ae:	f7ff fdc3 	bl	8005438 <malloc>
 80058b2:	6260      	str	r0, [r4, #36]	; 0x24
 80058b4:	6045      	str	r5, [r0, #4]
 80058b6:	6085      	str	r5, [r0, #8]
 80058b8:	6005      	str	r5, [r0, #0]
 80058ba:	60c5      	str	r5, [r0, #12]
 80058bc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80058be:	68eb      	ldr	r3, [r5, #12]
 80058c0:	b143      	cbz	r3, 80058d4 <_Balloc+0x32>
 80058c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80058ca:	b178      	cbz	r0, 80058ec <_Balloc+0x4a>
 80058cc:	6802      	ldr	r2, [r0, #0]
 80058ce:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80058d2:	e017      	b.n	8005904 <_Balloc+0x62>
 80058d4:	2221      	movs	r2, #33	; 0x21
 80058d6:	2104      	movs	r1, #4
 80058d8:	4620      	mov	r0, r4
 80058da:	f000 fb48 	bl	8005f6e <_calloc_r>
 80058de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058e0:	60e8      	str	r0, [r5, #12]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1ec      	bne.n	80058c2 <_Balloc+0x20>
 80058e8:	2000      	movs	r0, #0
 80058ea:	bd70      	pop	{r4, r5, r6, pc}
 80058ec:	2101      	movs	r1, #1
 80058ee:	fa01 f506 	lsl.w	r5, r1, r6
 80058f2:	1d6a      	adds	r2, r5, #5
 80058f4:	0092      	lsls	r2, r2, #2
 80058f6:	4620      	mov	r0, r4
 80058f8:	f000 fb39 	bl	8005f6e <_calloc_r>
 80058fc:	2800      	cmp	r0, #0
 80058fe:	d0f3      	beq.n	80058e8 <_Balloc+0x46>
 8005900:	6046      	str	r6, [r0, #4]
 8005902:	6085      	str	r5, [r0, #8]
 8005904:	2300      	movs	r3, #0
 8005906:	6103      	str	r3, [r0, #16]
 8005908:	60c3      	str	r3, [r0, #12]
 800590a:	bd70      	pop	{r4, r5, r6, pc}

0800590c <_Bfree>:
 800590c:	b570      	push	{r4, r5, r6, lr}
 800590e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005910:	4606      	mov	r6, r0
 8005912:	460d      	mov	r5, r1
 8005914:	b93c      	cbnz	r4, 8005926 <_Bfree+0x1a>
 8005916:	2010      	movs	r0, #16
 8005918:	f7ff fd8e 	bl	8005438 <malloc>
 800591c:	6270      	str	r0, [r6, #36]	; 0x24
 800591e:	6044      	str	r4, [r0, #4]
 8005920:	6084      	str	r4, [r0, #8]
 8005922:	6004      	str	r4, [r0, #0]
 8005924:	60c4      	str	r4, [r0, #12]
 8005926:	b13d      	cbz	r5, 8005938 <_Bfree+0x2c>
 8005928:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800592a:	686a      	ldr	r2, [r5, #4]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005932:	6029      	str	r1, [r5, #0]
 8005934:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005938:	bd70      	pop	{r4, r5, r6, pc}

0800593a <__multadd>:
 800593a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800593e:	690d      	ldr	r5, [r1, #16]
 8005940:	461f      	mov	r7, r3
 8005942:	4606      	mov	r6, r0
 8005944:	460c      	mov	r4, r1
 8005946:	f101 0e14 	add.w	lr, r1, #20
 800594a:	2300      	movs	r3, #0
 800594c:	f8de 0000 	ldr.w	r0, [lr]
 8005950:	b281      	uxth	r1, r0
 8005952:	fb02 7101 	mla	r1, r2, r1, r7
 8005956:	0c0f      	lsrs	r7, r1, #16
 8005958:	0c00      	lsrs	r0, r0, #16
 800595a:	fb02 7000 	mla	r0, r2, r0, r7
 800595e:	b289      	uxth	r1, r1
 8005960:	3301      	adds	r3, #1
 8005962:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005966:	429d      	cmp	r5, r3
 8005968:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800596c:	f84e 1b04 	str.w	r1, [lr], #4
 8005970:	dcec      	bgt.n	800594c <__multadd+0x12>
 8005972:	b1d7      	cbz	r7, 80059aa <__multadd+0x70>
 8005974:	68a3      	ldr	r3, [r4, #8]
 8005976:	429d      	cmp	r5, r3
 8005978:	db12      	blt.n	80059a0 <__multadd+0x66>
 800597a:	6861      	ldr	r1, [r4, #4]
 800597c:	4630      	mov	r0, r6
 800597e:	3101      	adds	r1, #1
 8005980:	f7ff ff8f 	bl	80058a2 <_Balloc>
 8005984:	6922      	ldr	r2, [r4, #16]
 8005986:	3202      	adds	r2, #2
 8005988:	f104 010c 	add.w	r1, r4, #12
 800598c:	4680      	mov	r8, r0
 800598e:	0092      	lsls	r2, r2, #2
 8005990:	300c      	adds	r0, #12
 8005992:	f7ff ff79 	bl	8005888 <memcpy>
 8005996:	4621      	mov	r1, r4
 8005998:	4630      	mov	r0, r6
 800599a:	f7ff ffb7 	bl	800590c <_Bfree>
 800599e:	4644      	mov	r4, r8
 80059a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80059a4:	3501      	adds	r5, #1
 80059a6:	615f      	str	r7, [r3, #20]
 80059a8:	6125      	str	r5, [r4, #16]
 80059aa:	4620      	mov	r0, r4
 80059ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080059b0 <__hi0bits>:
 80059b0:	0c03      	lsrs	r3, r0, #16
 80059b2:	041b      	lsls	r3, r3, #16
 80059b4:	b913      	cbnz	r3, 80059bc <__hi0bits+0xc>
 80059b6:	0400      	lsls	r0, r0, #16
 80059b8:	2310      	movs	r3, #16
 80059ba:	e000      	b.n	80059be <__hi0bits+0xe>
 80059bc:	2300      	movs	r3, #0
 80059be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80059c2:	bf04      	itt	eq
 80059c4:	0200      	lsleq	r0, r0, #8
 80059c6:	3308      	addeq	r3, #8
 80059c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80059cc:	bf04      	itt	eq
 80059ce:	0100      	lsleq	r0, r0, #4
 80059d0:	3304      	addeq	r3, #4
 80059d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80059d6:	bf04      	itt	eq
 80059d8:	0080      	lsleq	r0, r0, #2
 80059da:	3302      	addeq	r3, #2
 80059dc:	2800      	cmp	r0, #0
 80059de:	db03      	blt.n	80059e8 <__hi0bits+0x38>
 80059e0:	0042      	lsls	r2, r0, #1
 80059e2:	d503      	bpl.n	80059ec <__hi0bits+0x3c>
 80059e4:	1c58      	adds	r0, r3, #1
 80059e6:	4770      	bx	lr
 80059e8:	4618      	mov	r0, r3
 80059ea:	4770      	bx	lr
 80059ec:	2020      	movs	r0, #32
 80059ee:	4770      	bx	lr

080059f0 <__lo0bits>:
 80059f0:	6803      	ldr	r3, [r0, #0]
 80059f2:	f013 0207 	ands.w	r2, r3, #7
 80059f6:	d00b      	beq.n	8005a10 <__lo0bits+0x20>
 80059f8:	07d9      	lsls	r1, r3, #31
 80059fa:	d422      	bmi.n	8005a42 <__lo0bits+0x52>
 80059fc:	079a      	lsls	r2, r3, #30
 80059fe:	bf4b      	itete	mi
 8005a00:	085b      	lsrmi	r3, r3, #1
 8005a02:	089b      	lsrpl	r3, r3, #2
 8005a04:	6003      	strmi	r3, [r0, #0]
 8005a06:	6003      	strpl	r3, [r0, #0]
 8005a08:	bf4c      	ite	mi
 8005a0a:	2001      	movmi	r0, #1
 8005a0c:	2002      	movpl	r0, #2
 8005a0e:	4770      	bx	lr
 8005a10:	b299      	uxth	r1, r3
 8005a12:	b909      	cbnz	r1, 8005a18 <__lo0bits+0x28>
 8005a14:	0c1b      	lsrs	r3, r3, #16
 8005a16:	2210      	movs	r2, #16
 8005a18:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005a1c:	bf04      	itt	eq
 8005a1e:	0a1b      	lsreq	r3, r3, #8
 8005a20:	3208      	addeq	r2, #8
 8005a22:	0719      	lsls	r1, r3, #28
 8005a24:	bf04      	itt	eq
 8005a26:	091b      	lsreq	r3, r3, #4
 8005a28:	3204      	addeq	r2, #4
 8005a2a:	0799      	lsls	r1, r3, #30
 8005a2c:	bf04      	itt	eq
 8005a2e:	089b      	lsreq	r3, r3, #2
 8005a30:	3202      	addeq	r2, #2
 8005a32:	07d9      	lsls	r1, r3, #31
 8005a34:	d402      	bmi.n	8005a3c <__lo0bits+0x4c>
 8005a36:	085b      	lsrs	r3, r3, #1
 8005a38:	d005      	beq.n	8005a46 <__lo0bits+0x56>
 8005a3a:	3201      	adds	r2, #1
 8005a3c:	6003      	str	r3, [r0, #0]
 8005a3e:	4610      	mov	r0, r2
 8005a40:	4770      	bx	lr
 8005a42:	2000      	movs	r0, #0
 8005a44:	4770      	bx	lr
 8005a46:	2020      	movs	r0, #32
 8005a48:	4770      	bx	lr

08005a4a <__i2b>:
 8005a4a:	b510      	push	{r4, lr}
 8005a4c:	460c      	mov	r4, r1
 8005a4e:	2101      	movs	r1, #1
 8005a50:	f7ff ff27 	bl	80058a2 <_Balloc>
 8005a54:	2201      	movs	r2, #1
 8005a56:	6144      	str	r4, [r0, #20]
 8005a58:	6102      	str	r2, [r0, #16]
 8005a5a:	bd10      	pop	{r4, pc}

08005a5c <__multiply>:
 8005a5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a60:	4614      	mov	r4, r2
 8005a62:	690a      	ldr	r2, [r1, #16]
 8005a64:	6923      	ldr	r3, [r4, #16]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	bfb8      	it	lt
 8005a6a:	460b      	movlt	r3, r1
 8005a6c:	4688      	mov	r8, r1
 8005a6e:	bfbc      	itt	lt
 8005a70:	46a0      	movlt	r8, r4
 8005a72:	461c      	movlt	r4, r3
 8005a74:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005a78:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005a7c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005a80:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005a84:	eb07 0609 	add.w	r6, r7, r9
 8005a88:	429e      	cmp	r6, r3
 8005a8a:	bfc8      	it	gt
 8005a8c:	3101      	addgt	r1, #1
 8005a8e:	f7ff ff08 	bl	80058a2 <_Balloc>
 8005a92:	f100 0514 	add.w	r5, r0, #20
 8005a96:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 8005a9a:	462b      	mov	r3, r5
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	4563      	cmp	r3, ip
 8005aa0:	d202      	bcs.n	8005aa8 <__multiply+0x4c>
 8005aa2:	f843 2b04 	str.w	r2, [r3], #4
 8005aa6:	e7fa      	b.n	8005a9e <__multiply+0x42>
 8005aa8:	f104 0214 	add.w	r2, r4, #20
 8005aac:	f108 0114 	add.w	r1, r8, #20
 8005ab0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005ab4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	9b00      	ldr	r3, [sp, #0]
 8005abc:	9201      	str	r2, [sp, #4]
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d957      	bls.n	8005b72 <__multiply+0x116>
 8005ac2:	f8b2 b000 	ldrh.w	fp, [r2]
 8005ac6:	f1bb 0f00 	cmp.w	fp, #0
 8005aca:	d023      	beq.n	8005b14 <__multiply+0xb8>
 8005acc:	4689      	mov	r9, r1
 8005ace:	46ae      	mov	lr, r5
 8005ad0:	f04f 0800 	mov.w	r8, #0
 8005ad4:	f859 4b04 	ldr.w	r4, [r9], #4
 8005ad8:	f8be a000 	ldrh.w	sl, [lr]
 8005adc:	b2a3      	uxth	r3, r4
 8005ade:	fb0b a303 	mla	r3, fp, r3, sl
 8005ae2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005ae6:	f8de 4000 	ldr.w	r4, [lr]
 8005aea:	4443      	add	r3, r8
 8005aec:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005af0:	fb0b 840a 	mla	r4, fp, sl, r8
 8005af4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005af8:	46f2      	mov	sl, lr
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005b00:	454f      	cmp	r7, r9
 8005b02:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005b06:	f84a 3b04 	str.w	r3, [sl], #4
 8005b0a:	d901      	bls.n	8005b10 <__multiply+0xb4>
 8005b0c:	46d6      	mov	lr, sl
 8005b0e:	e7e1      	b.n	8005ad4 <__multiply+0x78>
 8005b10:	f8ce 8004 	str.w	r8, [lr, #4]
 8005b14:	9b01      	ldr	r3, [sp, #4]
 8005b16:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005b1a:	3204      	adds	r2, #4
 8005b1c:	f1ba 0f00 	cmp.w	sl, #0
 8005b20:	d021      	beq.n	8005b66 <__multiply+0x10a>
 8005b22:	682b      	ldr	r3, [r5, #0]
 8005b24:	462c      	mov	r4, r5
 8005b26:	4689      	mov	r9, r1
 8005b28:	f04f 0800 	mov.w	r8, #0
 8005b2c:	f8b9 e000 	ldrh.w	lr, [r9]
 8005b30:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 8005b34:	fb0a be0e 	mla	lr, sl, lr, fp
 8005b38:	44f0      	add	r8, lr
 8005b3a:	46a3      	mov	fp, r4
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8005b42:	f84b 3b04 	str.w	r3, [fp], #4
 8005b46:	f859 3b04 	ldr.w	r3, [r9], #4
 8005b4a:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 8005b4e:	0c1b      	lsrs	r3, r3, #16
 8005b50:	fb0a e303 	mla	r3, sl, r3, lr
 8005b54:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 8005b58:	454f      	cmp	r7, r9
 8005b5a:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8005b5e:	d901      	bls.n	8005b64 <__multiply+0x108>
 8005b60:	465c      	mov	r4, fp
 8005b62:	e7e3      	b.n	8005b2c <__multiply+0xd0>
 8005b64:	6063      	str	r3, [r4, #4]
 8005b66:	3504      	adds	r5, #4
 8005b68:	e7a7      	b.n	8005aba <__multiply+0x5e>
 8005b6a:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8005b6e:	b913      	cbnz	r3, 8005b76 <__multiply+0x11a>
 8005b70:	3e01      	subs	r6, #1
 8005b72:	2e00      	cmp	r6, #0
 8005b74:	dcf9      	bgt.n	8005b6a <__multiply+0x10e>
 8005b76:	6106      	str	r6, [r0, #16]
 8005b78:	b003      	add	sp, #12
 8005b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005b80 <__pow5mult>:
 8005b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b84:	4615      	mov	r5, r2
 8005b86:	f012 0203 	ands.w	r2, r2, #3
 8005b8a:	4606      	mov	r6, r0
 8005b8c:	460f      	mov	r7, r1
 8005b8e:	d007      	beq.n	8005ba0 <__pow5mult+0x20>
 8005b90:	3a01      	subs	r2, #1
 8005b92:	4c21      	ldr	r4, [pc, #132]	; (8005c18 <__pow5mult+0x98>)
 8005b94:	2300      	movs	r3, #0
 8005b96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005b9a:	f7ff fece 	bl	800593a <__multadd>
 8005b9e:	4607      	mov	r7, r0
 8005ba0:	10ad      	asrs	r5, r5, #2
 8005ba2:	d036      	beq.n	8005c12 <__pow5mult+0x92>
 8005ba4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005ba6:	b93c      	cbnz	r4, 8005bb8 <__pow5mult+0x38>
 8005ba8:	2010      	movs	r0, #16
 8005baa:	f7ff fc45 	bl	8005438 <malloc>
 8005bae:	6270      	str	r0, [r6, #36]	; 0x24
 8005bb0:	6044      	str	r4, [r0, #4]
 8005bb2:	6084      	str	r4, [r0, #8]
 8005bb4:	6004      	str	r4, [r0, #0]
 8005bb6:	60c4      	str	r4, [r0, #12]
 8005bb8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005bbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005bc0:	b94c      	cbnz	r4, 8005bd6 <__pow5mult+0x56>
 8005bc2:	f240 2171 	movw	r1, #625	; 0x271
 8005bc6:	4630      	mov	r0, r6
 8005bc8:	f7ff ff3f 	bl	8005a4a <__i2b>
 8005bcc:	2300      	movs	r3, #0
 8005bce:	f8c8 0008 	str.w	r0, [r8, #8]
 8005bd2:	4604      	mov	r4, r0
 8005bd4:	6003      	str	r3, [r0, #0]
 8005bd6:	f04f 0800 	mov.w	r8, #0
 8005bda:	07eb      	lsls	r3, r5, #31
 8005bdc:	d50a      	bpl.n	8005bf4 <__pow5mult+0x74>
 8005bde:	4639      	mov	r1, r7
 8005be0:	4622      	mov	r2, r4
 8005be2:	4630      	mov	r0, r6
 8005be4:	f7ff ff3a 	bl	8005a5c <__multiply>
 8005be8:	4639      	mov	r1, r7
 8005bea:	4681      	mov	r9, r0
 8005bec:	4630      	mov	r0, r6
 8005bee:	f7ff fe8d 	bl	800590c <_Bfree>
 8005bf2:	464f      	mov	r7, r9
 8005bf4:	106d      	asrs	r5, r5, #1
 8005bf6:	d00c      	beq.n	8005c12 <__pow5mult+0x92>
 8005bf8:	6820      	ldr	r0, [r4, #0]
 8005bfa:	b108      	cbz	r0, 8005c00 <__pow5mult+0x80>
 8005bfc:	4604      	mov	r4, r0
 8005bfe:	e7ec      	b.n	8005bda <__pow5mult+0x5a>
 8005c00:	4622      	mov	r2, r4
 8005c02:	4621      	mov	r1, r4
 8005c04:	4630      	mov	r0, r6
 8005c06:	f7ff ff29 	bl	8005a5c <__multiply>
 8005c0a:	6020      	str	r0, [r4, #0]
 8005c0c:	f8c0 8000 	str.w	r8, [r0]
 8005c10:	e7f4      	b.n	8005bfc <__pow5mult+0x7c>
 8005c12:	4638      	mov	r0, r7
 8005c14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c18:	08006760 	.word	0x08006760

08005c1c <__lshift>:
 8005c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c20:	460c      	mov	r4, r1
 8005c22:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005c26:	6926      	ldr	r6, [r4, #16]
 8005c28:	6849      	ldr	r1, [r1, #4]
 8005c2a:	68a3      	ldr	r3, [r4, #8]
 8005c2c:	4456      	add	r6, sl
 8005c2e:	4607      	mov	r7, r0
 8005c30:	4691      	mov	r9, r2
 8005c32:	1c75      	adds	r5, r6, #1
 8005c34:	42ab      	cmp	r3, r5
 8005c36:	da02      	bge.n	8005c3e <__lshift+0x22>
 8005c38:	3101      	adds	r1, #1
 8005c3a:	005b      	lsls	r3, r3, #1
 8005c3c:	e7fa      	b.n	8005c34 <__lshift+0x18>
 8005c3e:	4638      	mov	r0, r7
 8005c40:	f7ff fe2f 	bl	80058a2 <_Balloc>
 8005c44:	2300      	movs	r3, #0
 8005c46:	4680      	mov	r8, r0
 8005c48:	f100 0114 	add.w	r1, r0, #20
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	4553      	cmp	r3, sl
 8005c50:	da03      	bge.n	8005c5a <__lshift+0x3e>
 8005c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005c56:	3301      	adds	r3, #1
 8005c58:	e7f9      	b.n	8005c4e <__lshift+0x32>
 8005c5a:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8005c5e:	6920      	ldr	r0, [r4, #16]
 8005c60:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8005c64:	f019 091f 	ands.w	r9, r9, #31
 8005c68:	f104 0114 	add.w	r1, r4, #20
 8005c6c:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8005c70:	d014      	beq.n	8005c9c <__lshift+0x80>
 8005c72:	f1c9 0c20 	rsb	ip, r9, #32
 8005c76:	2200      	movs	r2, #0
 8005c78:	6808      	ldr	r0, [r1, #0]
 8005c7a:	fa00 f009 	lsl.w	r0, r0, r9
 8005c7e:	4302      	orrs	r2, r0
 8005c80:	469a      	mov	sl, r3
 8005c82:	f843 2b04 	str.w	r2, [r3], #4
 8005c86:	f851 2b04 	ldr.w	r2, [r1], #4
 8005c8a:	458e      	cmp	lr, r1
 8005c8c:	fa22 f20c 	lsr.w	r2, r2, ip
 8005c90:	d8f2      	bhi.n	8005c78 <__lshift+0x5c>
 8005c92:	f8ca 2004 	str.w	r2, [sl, #4]
 8005c96:	b142      	cbz	r2, 8005caa <__lshift+0x8e>
 8005c98:	1cb5      	adds	r5, r6, #2
 8005c9a:	e006      	b.n	8005caa <__lshift+0x8e>
 8005c9c:	3b04      	subs	r3, #4
 8005c9e:	f851 2b04 	ldr.w	r2, [r1], #4
 8005ca2:	f843 2f04 	str.w	r2, [r3, #4]!
 8005ca6:	458e      	cmp	lr, r1
 8005ca8:	d8f9      	bhi.n	8005c9e <__lshift+0x82>
 8005caa:	3d01      	subs	r5, #1
 8005cac:	4638      	mov	r0, r7
 8005cae:	f8c8 5010 	str.w	r5, [r8, #16]
 8005cb2:	4621      	mov	r1, r4
 8005cb4:	f7ff fe2a 	bl	800590c <_Bfree>
 8005cb8:	4640      	mov	r0, r8
 8005cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005cbe <__mcmp>:
 8005cbe:	6903      	ldr	r3, [r0, #16]
 8005cc0:	690a      	ldr	r2, [r1, #16]
 8005cc2:	1a9b      	subs	r3, r3, r2
 8005cc4:	b510      	push	{r4, lr}
 8005cc6:	d111      	bne.n	8005cec <__mcmp+0x2e>
 8005cc8:	0092      	lsls	r2, r2, #2
 8005cca:	3014      	adds	r0, #20
 8005ccc:	3114      	adds	r1, #20
 8005cce:	1883      	adds	r3, r0, r2
 8005cd0:	440a      	add	r2, r1
 8005cd2:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8005cd6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005cda:	428c      	cmp	r4, r1
 8005cdc:	d002      	beq.n	8005ce4 <__mcmp+0x26>
 8005cde:	d307      	bcc.n	8005cf0 <__mcmp+0x32>
 8005ce0:	2001      	movs	r0, #1
 8005ce2:	bd10      	pop	{r4, pc}
 8005ce4:	4298      	cmp	r0, r3
 8005ce6:	d3f4      	bcc.n	8005cd2 <__mcmp+0x14>
 8005ce8:	2000      	movs	r0, #0
 8005cea:	bd10      	pop	{r4, pc}
 8005cec:	4618      	mov	r0, r3
 8005cee:	bd10      	pop	{r4, pc}
 8005cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf4:	bd10      	pop	{r4, pc}

08005cf6 <__mdiff>:
 8005cf6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cfa:	460c      	mov	r4, r1
 8005cfc:	4607      	mov	r7, r0
 8005cfe:	4611      	mov	r1, r2
 8005d00:	4620      	mov	r0, r4
 8005d02:	4615      	mov	r5, r2
 8005d04:	f7ff ffdb 	bl	8005cbe <__mcmp>
 8005d08:	1e06      	subs	r6, r0, #0
 8005d0a:	d108      	bne.n	8005d1e <__mdiff+0x28>
 8005d0c:	4631      	mov	r1, r6
 8005d0e:	4638      	mov	r0, r7
 8005d10:	f7ff fdc7 	bl	80058a2 <_Balloc>
 8005d14:	2301      	movs	r3, #1
 8005d16:	6103      	str	r3, [r0, #16]
 8005d18:	6146      	str	r6, [r0, #20]
 8005d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d1e:	bfbc      	itt	lt
 8005d20:	4623      	movlt	r3, r4
 8005d22:	462c      	movlt	r4, r5
 8005d24:	4638      	mov	r0, r7
 8005d26:	6861      	ldr	r1, [r4, #4]
 8005d28:	bfba      	itte	lt
 8005d2a:	461d      	movlt	r5, r3
 8005d2c:	2601      	movlt	r6, #1
 8005d2e:	2600      	movge	r6, #0
 8005d30:	f7ff fdb7 	bl	80058a2 <_Balloc>
 8005d34:	692b      	ldr	r3, [r5, #16]
 8005d36:	60c6      	str	r6, [r0, #12]
 8005d38:	6926      	ldr	r6, [r4, #16]
 8005d3a:	f105 0914 	add.w	r9, r5, #20
 8005d3e:	3414      	adds	r4, #20
 8005d40:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 8005d44:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005d48:	f100 0514 	add.w	r5, r0, #20
 8005d4c:	f04f 0c00 	mov.w	ip, #0
 8005d50:	f854 3b04 	ldr.w	r3, [r4], #4
 8005d54:	f859 2b04 	ldr.w	r2, [r9], #4
 8005d58:	fa1c f183 	uxtah	r1, ip, r3
 8005d5c:	fa1f fe82 	uxth.w	lr, r2
 8005d60:	0c12      	lsrs	r2, r2, #16
 8005d62:	ebce 0101 	rsb	r1, lr, r1
 8005d66:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 8005d6a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005d6e:	b289      	uxth	r1, r1
 8005d70:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005d74:	45c8      	cmp	r8, r9
 8005d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005d7a:	46a6      	mov	lr, r4
 8005d7c:	f845 3b04 	str.w	r3, [r5], #4
 8005d80:	d8e6      	bhi.n	8005d50 <__mdiff+0x5a>
 8005d82:	45be      	cmp	lr, r7
 8005d84:	d20e      	bcs.n	8005da4 <__mdiff+0xae>
 8005d86:	f85e 1b04 	ldr.w	r1, [lr], #4
 8005d8a:	fa1c f281 	uxtah	r2, ip, r1
 8005d8e:	1413      	asrs	r3, r2, #16
 8005d90:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 8005d94:	b292      	uxth	r2, r2
 8005d96:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005d9a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005d9e:	f845 2b04 	str.w	r2, [r5], #4
 8005da2:	e7ee      	b.n	8005d82 <__mdiff+0x8c>
 8005da4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005da8:	b90b      	cbnz	r3, 8005dae <__mdiff+0xb8>
 8005daa:	3e01      	subs	r6, #1
 8005dac:	e7fa      	b.n	8005da4 <__mdiff+0xae>
 8005dae:	6106      	str	r6, [r0, #16]
 8005db0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005db4 <__d2b>:
 8005db4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005db8:	460e      	mov	r6, r1
 8005dba:	2101      	movs	r1, #1
 8005dbc:	ec59 8b10 	vmov	r8, r9, d0
 8005dc0:	4615      	mov	r5, r2
 8005dc2:	f7ff fd6e 	bl	80058a2 <_Balloc>
 8005dc6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005dca:	4607      	mov	r7, r0
 8005dcc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005dd0:	b10c      	cbz	r4, 8005dd6 <__d2b+0x22>
 8005dd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dd6:	9301      	str	r3, [sp, #4]
 8005dd8:	f1b8 0f00 	cmp.w	r8, #0
 8005ddc:	d019      	beq.n	8005e12 <__d2b+0x5e>
 8005dde:	a802      	add	r0, sp, #8
 8005de0:	f840 8d08 	str.w	r8, [r0, #-8]!
 8005de4:	f7ff fe04 	bl	80059f0 <__lo0bits>
 8005de8:	9b00      	ldr	r3, [sp, #0]
 8005dea:	b148      	cbz	r0, 8005e00 <__d2b+0x4c>
 8005dec:	9a01      	ldr	r2, [sp, #4]
 8005dee:	f1c0 0120 	rsb	r1, r0, #32
 8005df2:	fa02 f101 	lsl.w	r1, r2, r1
 8005df6:	430b      	orrs	r3, r1
 8005df8:	40c2      	lsrs	r2, r0
 8005dfa:	617b      	str	r3, [r7, #20]
 8005dfc:	9201      	str	r2, [sp, #4]
 8005dfe:	e000      	b.n	8005e02 <__d2b+0x4e>
 8005e00:	617b      	str	r3, [r7, #20]
 8005e02:	9b01      	ldr	r3, [sp, #4]
 8005e04:	61bb      	str	r3, [r7, #24]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	bf14      	ite	ne
 8005e0a:	2102      	movne	r1, #2
 8005e0c:	2101      	moveq	r1, #1
 8005e0e:	6139      	str	r1, [r7, #16]
 8005e10:	e007      	b.n	8005e22 <__d2b+0x6e>
 8005e12:	a801      	add	r0, sp, #4
 8005e14:	f7ff fdec 	bl	80059f0 <__lo0bits>
 8005e18:	9b01      	ldr	r3, [sp, #4]
 8005e1a:	617b      	str	r3, [r7, #20]
 8005e1c:	2101      	movs	r1, #1
 8005e1e:	6139      	str	r1, [r7, #16]
 8005e20:	3020      	adds	r0, #32
 8005e22:	b134      	cbz	r4, 8005e32 <__d2b+0x7e>
 8005e24:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005e28:	4404      	add	r4, r0
 8005e2a:	6034      	str	r4, [r6, #0]
 8005e2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005e30:	e009      	b.n	8005e46 <__d2b+0x92>
 8005e32:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005e36:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005e3a:	6030      	str	r0, [r6, #0]
 8005e3c:	6918      	ldr	r0, [r3, #16]
 8005e3e:	f7ff fdb7 	bl	80059b0 <__hi0bits>
 8005e42:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005e46:	6028      	str	r0, [r5, #0]
 8005e48:	4638      	mov	r0, r7
 8005e4a:	b003      	add	sp, #12
 8005e4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005e50 <_sbrk_r>:
 8005e50:	b538      	push	{r3, r4, r5, lr}
 8005e52:	4c06      	ldr	r4, [pc, #24]	; (8005e6c <_sbrk_r+0x1c>)
 8005e54:	2300      	movs	r3, #0
 8005e56:	4605      	mov	r5, r0
 8005e58:	4608      	mov	r0, r1
 8005e5a:	6023      	str	r3, [r4, #0]
 8005e5c:	f000 fb94 	bl	8006588 <_sbrk>
 8005e60:	1c43      	adds	r3, r0, #1
 8005e62:	d102      	bne.n	8005e6a <_sbrk_r+0x1a>
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	b103      	cbz	r3, 8005e6a <_sbrk_r+0x1a>
 8005e68:	602b      	str	r3, [r5, #0]
 8005e6a:	bd38      	pop	{r3, r4, r5, pc}
 8005e6c:	200007a4 	.word	0x200007a4

08005e70 <__ssprint_r>:
 8005e70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e74:	4693      	mov	fp, r2
 8005e76:	6892      	ldr	r2, [r2, #8]
 8005e78:	4681      	mov	r9, r0
 8005e7a:	460c      	mov	r4, r1
 8005e7c:	b34a      	cbz	r2, 8005ed2 <__ssprint_r+0x62>
 8005e7e:	2300      	movs	r3, #0
 8005e80:	f8db a000 	ldr.w	sl, [fp]
 8005e84:	9301      	str	r3, [sp, #4]
 8005e86:	461f      	mov	r7, r3
 8005e88:	e006      	b.n	8005e98 <__ssprint_r+0x28>
 8005e8a:	f8da 3000 	ldr.w	r3, [sl]
 8005e8e:	f8da 7004 	ldr.w	r7, [sl, #4]
 8005e92:	9301      	str	r3, [sp, #4]
 8005e94:	f10a 0a08 	add.w	sl, sl, #8
 8005e98:	2f00      	cmp	r7, #0
 8005e9a:	d0f6      	beq.n	8005e8a <__ssprint_r+0x1a>
 8005e9c:	68a6      	ldr	r6, [r4, #8]
 8005e9e:	42b7      	cmp	r7, r6
 8005ea0:	d360      	bcc.n	8005f64 <__ssprint_r+0xf4>
 8005ea2:	89a0      	ldrh	r0, [r4, #12]
 8005ea4:	f410 6f90 	tst.w	r0, #1152	; 0x480
 8005ea8:	d117      	bne.n	8005eda <__ssprint_r+0x6a>
 8005eaa:	42b7      	cmp	r7, r6
 8005eac:	d35a      	bcc.n	8005f64 <__ssprint_r+0xf4>
 8005eae:	4632      	mov	r2, r6
 8005eb0:	9901      	ldr	r1, [sp, #4]
 8005eb2:	6820      	ldr	r0, [r4, #0]
 8005eb4:	f000 f99c 	bl	80061f0 <memmove>
 8005eb8:	68a2      	ldr	r2, [r4, #8]
 8005eba:	1b92      	subs	r2, r2, r6
 8005ebc:	60a2      	str	r2, [r4, #8]
 8005ebe:	6822      	ldr	r2, [r4, #0]
 8005ec0:	4416      	add	r6, r2
 8005ec2:	f8db 2008 	ldr.w	r2, [fp, #8]
 8005ec6:	6026      	str	r6, [r4, #0]
 8005ec8:	1bd7      	subs	r7, r2, r7
 8005eca:	f8cb 7008 	str.w	r7, [fp, #8]
 8005ece:	2f00      	cmp	r7, #0
 8005ed0:	d1db      	bne.n	8005e8a <__ssprint_r+0x1a>
 8005ed2:	2000      	movs	r0, #0
 8005ed4:	f8cb 0004 	str.w	r0, [fp, #4]
 8005ed8:	e046      	b.n	8005f68 <__ssprint_r+0xf8>
 8005eda:	6825      	ldr	r5, [r4, #0]
 8005edc:	6921      	ldr	r1, [r4, #16]
 8005ede:	ebc1 0805 	rsb	r8, r1, r5
 8005ee2:	f108 0201 	add.w	r2, r8, #1
 8005ee6:	6965      	ldr	r5, [r4, #20]
 8005ee8:	443a      	add	r2, r7
 8005eea:	2302      	movs	r3, #2
 8005eec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ef0:	fb95 f5f3 	sdiv	r5, r5, r3
 8005ef4:	4295      	cmp	r5, r2
 8005ef6:	bf38      	it	cc
 8005ef8:	4615      	movcc	r5, r2
 8005efa:	0543      	lsls	r3, r0, #21
 8005efc:	d510      	bpl.n	8005f20 <__ssprint_r+0xb0>
 8005efe:	4629      	mov	r1, r5
 8005f00:	4648      	mov	r0, r9
 8005f02:	f7ff faa1 	bl	8005448 <_malloc_r>
 8005f06:	4606      	mov	r6, r0
 8005f08:	b1a0      	cbz	r0, 8005f34 <__ssprint_r+0xc4>
 8005f0a:	4642      	mov	r2, r8
 8005f0c:	6921      	ldr	r1, [r4, #16]
 8005f0e:	f7ff fcbb 	bl	8005888 <memcpy>
 8005f12:	89a2      	ldrh	r2, [r4, #12]
 8005f14:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8005f18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f1c:	81a2      	strh	r2, [r4, #12]
 8005f1e:	e018      	b.n	8005f52 <__ssprint_r+0xe2>
 8005f20:	462a      	mov	r2, r5
 8005f22:	4648      	mov	r0, r9
 8005f24:	f000 f988 	bl	8006238 <_realloc_r>
 8005f28:	4606      	mov	r6, r0
 8005f2a:	b990      	cbnz	r0, 8005f52 <__ssprint_r+0xe2>
 8005f2c:	6921      	ldr	r1, [r4, #16]
 8005f2e:	4648      	mov	r0, r9
 8005f30:	f000 f8a0 	bl	8006074 <_free_r>
 8005f34:	220c      	movs	r2, #12
 8005f36:	f8c9 2000 	str.w	r2, [r9]
 8005f3a:	89a2      	ldrh	r2, [r4, #12]
 8005f3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f40:	81a2      	strh	r2, [r4, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f8cb 2008 	str.w	r2, [fp, #8]
 8005f48:	f8cb 2004 	str.w	r2, [fp, #4]
 8005f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f50:	e00a      	b.n	8005f68 <__ssprint_r+0xf8>
 8005f52:	6126      	str	r6, [r4, #16]
 8005f54:	6165      	str	r5, [r4, #20]
 8005f56:	4446      	add	r6, r8
 8005f58:	ebc8 0505 	rsb	r5, r8, r5
 8005f5c:	6026      	str	r6, [r4, #0]
 8005f5e:	60a5      	str	r5, [r4, #8]
 8005f60:	463e      	mov	r6, r7
 8005f62:	e7a2      	b.n	8005eaa <__ssprint_r+0x3a>
 8005f64:	463e      	mov	r6, r7
 8005f66:	e7a2      	b.n	8005eae <__ssprint_r+0x3e>
 8005f68:	b003      	add	sp, #12
 8005f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005f6e <_calloc_r>:
 8005f6e:	b510      	push	{r4, lr}
 8005f70:	4351      	muls	r1, r2
 8005f72:	f7ff fa69 	bl	8005448 <_malloc_r>
 8005f76:	4604      	mov	r4, r0
 8005f78:	b320      	cbz	r0, 8005fc4 <_calloc_r+0x56>
 8005f7a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8005f7e:	f022 0203 	bic.w	r2, r2, #3
 8005f82:	3a04      	subs	r2, #4
 8005f84:	2a24      	cmp	r2, #36	; 0x24
 8005f86:	d81a      	bhi.n	8005fbe <_calloc_r+0x50>
 8005f88:	2a13      	cmp	r2, #19
 8005f8a:	d912      	bls.n	8005fb2 <_calloc_r+0x44>
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	2a1b      	cmp	r2, #27
 8005f90:	6001      	str	r1, [r0, #0]
 8005f92:	6041      	str	r1, [r0, #4]
 8005f94:	d802      	bhi.n	8005f9c <_calloc_r+0x2e>
 8005f96:	f100 0308 	add.w	r3, r0, #8
 8005f9a:	e00b      	b.n	8005fb4 <_calloc_r+0x46>
 8005f9c:	2a24      	cmp	r2, #36	; 0x24
 8005f9e:	6081      	str	r1, [r0, #8]
 8005fa0:	60c1      	str	r1, [r0, #12]
 8005fa2:	bf11      	iteee	ne
 8005fa4:	f100 0310 	addne.w	r3, r0, #16
 8005fa8:	6101      	streq	r1, [r0, #16]
 8005faa:	f100 0318 	addeq.w	r3, r0, #24
 8005fae:	6141      	streq	r1, [r0, #20]
 8005fb0:	e000      	b.n	8005fb4 <_calloc_r+0x46>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	601a      	str	r2, [r3, #0]
 8005fb8:	605a      	str	r2, [r3, #4]
 8005fba:	609a      	str	r2, [r3, #8]
 8005fbc:	e002      	b.n	8005fc4 <_calloc_r+0x56>
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	f000 f931 	bl	8006226 <memset>
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	bd10      	pop	{r4, pc}

08005fc8 <_malloc_trim_r>:
 8005fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fcc:	4f25      	ldr	r7, [pc, #148]	; (8006064 <_malloc_trim_r+0x9c>)
 8005fce:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8006070 <_malloc_trim_r+0xa8>
 8005fd2:	4689      	mov	r9, r1
 8005fd4:	4606      	mov	r6, r0
 8005fd6:	f7ff fc62 	bl	800589e <__malloc_lock>
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	685d      	ldr	r5, [r3, #4]
 8005fde:	f1a8 0411 	sub.w	r4, r8, #17
 8005fe2:	f025 0503 	bic.w	r5, r5, #3
 8005fe6:	442c      	add	r4, r5
 8005fe8:	ebc9 0404 	rsb	r4, r9, r4
 8005fec:	fbb4 f4f8 	udiv	r4, r4, r8
 8005ff0:	3c01      	subs	r4, #1
 8005ff2:	fb08 f404 	mul.w	r4, r8, r4
 8005ff6:	4544      	cmp	r4, r8
 8005ff8:	da05      	bge.n	8006006 <_malloc_trim_r+0x3e>
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	f7ff fc50 	bl	80058a0 <__malloc_unlock>
 8006000:	2000      	movs	r0, #0
 8006002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006006:	2100      	movs	r1, #0
 8006008:	4630      	mov	r0, r6
 800600a:	f7ff ff21 	bl	8005e50 <_sbrk_r>
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	442b      	add	r3, r5
 8006012:	4298      	cmp	r0, r3
 8006014:	d1f1      	bne.n	8005ffa <_malloc_trim_r+0x32>
 8006016:	4261      	negs	r1, r4
 8006018:	4630      	mov	r0, r6
 800601a:	f7ff ff19 	bl	8005e50 <_sbrk_r>
 800601e:	3001      	adds	r0, #1
 8006020:	d110      	bne.n	8006044 <_malloc_trim_r+0x7c>
 8006022:	2100      	movs	r1, #0
 8006024:	4630      	mov	r0, r6
 8006026:	f7ff ff13 	bl	8005e50 <_sbrk_r>
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	1a83      	subs	r3, r0, r2
 800602e:	2b0f      	cmp	r3, #15
 8006030:	dde3      	ble.n	8005ffa <_malloc_trim_r+0x32>
 8006032:	490d      	ldr	r1, [pc, #52]	; (8006068 <_malloc_trim_r+0xa0>)
 8006034:	6809      	ldr	r1, [r1, #0]
 8006036:	1a40      	subs	r0, r0, r1
 8006038:	490c      	ldr	r1, [pc, #48]	; (800606c <_malloc_trim_r+0xa4>)
 800603a:	f043 0301 	orr.w	r3, r3, #1
 800603e:	6008      	str	r0, [r1, #0]
 8006040:	6053      	str	r3, [r2, #4]
 8006042:	e7da      	b.n	8005ffa <_malloc_trim_r+0x32>
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	4a09      	ldr	r2, [pc, #36]	; (800606c <_malloc_trim_r+0xa4>)
 8006048:	1b2d      	subs	r5, r5, r4
 800604a:	f045 0501 	orr.w	r5, r5, #1
 800604e:	605d      	str	r5, [r3, #4]
 8006050:	6813      	ldr	r3, [r2, #0]
 8006052:	4630      	mov	r0, r6
 8006054:	1b1c      	subs	r4, r3, r4
 8006056:	6014      	str	r4, [r2, #0]
 8006058:	f7ff fc22 	bl	80058a0 <__malloc_unlock>
 800605c:	2001      	movs	r0, #1
 800605e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006062:	bf00      	nop
 8006064:	20000130 	.word	0x20000130
 8006068:	2000053c 	.word	0x2000053c
 800606c:	20000568 	.word	0x20000568
 8006070:	00000080 	.word	0x00000080

08006074 <_free_r>:
 8006074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006078:	4604      	mov	r4, r0
 800607a:	4688      	mov	r8, r1
 800607c:	2900      	cmp	r1, #0
 800607e:	f000 80ad 	beq.w	80061dc <_free_r+0x168>
 8006082:	f7ff fc0c 	bl	800589e <__malloc_lock>
 8006086:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800608a:	4d55      	ldr	r5, [pc, #340]	; (80061e0 <_free_r+0x16c>)
 800608c:	f022 0001 	bic.w	r0, r2, #1
 8006090:	f1a8 0308 	sub.w	r3, r8, #8
 8006094:	181f      	adds	r7, r3, r0
 8006096:	68a9      	ldr	r1, [r5, #8]
 8006098:	687e      	ldr	r6, [r7, #4]
 800609a:	428f      	cmp	r7, r1
 800609c:	f026 0603 	bic.w	r6, r6, #3
 80060a0:	f002 0201 	and.w	r2, r2, #1
 80060a4:	d11b      	bne.n	80060de <_free_r+0x6a>
 80060a6:	4430      	add	r0, r6
 80060a8:	b93a      	cbnz	r2, 80060ba <_free_r+0x46>
 80060aa:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80060ae:	1a9b      	subs	r3, r3, r2
 80060b0:	4410      	add	r0, r2
 80060b2:	6899      	ldr	r1, [r3, #8]
 80060b4:	68da      	ldr	r2, [r3, #12]
 80060b6:	60ca      	str	r2, [r1, #12]
 80060b8:	6091      	str	r1, [r2, #8]
 80060ba:	f040 0201 	orr.w	r2, r0, #1
 80060be:	605a      	str	r2, [r3, #4]
 80060c0:	60ab      	str	r3, [r5, #8]
 80060c2:	4b48      	ldr	r3, [pc, #288]	; (80061e4 <_free_r+0x170>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4298      	cmp	r0, r3
 80060c8:	d304      	bcc.n	80060d4 <_free_r+0x60>
 80060ca:	4b47      	ldr	r3, [pc, #284]	; (80061e8 <_free_r+0x174>)
 80060cc:	4620      	mov	r0, r4
 80060ce:	6819      	ldr	r1, [r3, #0]
 80060d0:	f7ff ff7a 	bl	8005fc8 <_malloc_trim_r>
 80060d4:	4620      	mov	r0, r4
 80060d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060da:	f7ff bbe1 	b.w	80058a0 <__malloc_unlock>
 80060de:	607e      	str	r6, [r7, #4]
 80060e0:	b97a      	cbnz	r2, 8006102 <_free_r+0x8e>
 80060e2:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80060e6:	1a5b      	subs	r3, r3, r1
 80060e8:	4408      	add	r0, r1
 80060ea:	6899      	ldr	r1, [r3, #8]
 80060ec:	f105 0e08 	add.w	lr, r5, #8
 80060f0:	4571      	cmp	r1, lr
 80060f2:	d008      	beq.n	8006106 <_free_r+0x92>
 80060f4:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80060f8:	f8c1 e00c 	str.w	lr, [r1, #12]
 80060fc:	f8ce 1008 	str.w	r1, [lr, #8]
 8006100:	e002      	b.n	8006108 <_free_r+0x94>
 8006102:	2200      	movs	r2, #0
 8006104:	e000      	b.n	8006108 <_free_r+0x94>
 8006106:	2201      	movs	r2, #1
 8006108:	19b9      	adds	r1, r7, r6
 800610a:	6849      	ldr	r1, [r1, #4]
 800610c:	07c9      	lsls	r1, r1, #31
 800610e:	d40e      	bmi.n	800612e <_free_r+0xba>
 8006110:	4430      	add	r0, r6
 8006112:	68b9      	ldr	r1, [r7, #8]
 8006114:	b942      	cbnz	r2, 8006128 <_free_r+0xb4>
 8006116:	4e35      	ldr	r6, [pc, #212]	; (80061ec <_free_r+0x178>)
 8006118:	42b1      	cmp	r1, r6
 800611a:	d105      	bne.n	8006128 <_free_r+0xb4>
 800611c:	616b      	str	r3, [r5, #20]
 800611e:	612b      	str	r3, [r5, #16]
 8006120:	2201      	movs	r2, #1
 8006122:	60d9      	str	r1, [r3, #12]
 8006124:	6099      	str	r1, [r3, #8]
 8006126:	e002      	b.n	800612e <_free_r+0xba>
 8006128:	68fe      	ldr	r6, [r7, #12]
 800612a:	60ce      	str	r6, [r1, #12]
 800612c:	60b1      	str	r1, [r6, #8]
 800612e:	f040 0101 	orr.w	r1, r0, #1
 8006132:	6059      	str	r1, [r3, #4]
 8006134:	5018      	str	r0, [r3, r0]
 8006136:	2a00      	cmp	r2, #0
 8006138:	d1cc      	bne.n	80060d4 <_free_r+0x60>
 800613a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800613e:	d212      	bcs.n	8006166 <_free_r+0xf2>
 8006140:	08c0      	lsrs	r0, r0, #3
 8006142:	1081      	asrs	r1, r0, #2
 8006144:	2201      	movs	r2, #1
 8006146:	fa02 f101 	lsl.w	r1, r2, r1
 800614a:	686a      	ldr	r2, [r5, #4]
 800614c:	3001      	adds	r0, #1
 800614e:	430a      	orrs	r2, r1
 8006150:	606a      	str	r2, [r5, #4]
 8006152:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8006156:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800615a:	6099      	str	r1, [r3, #8]
 800615c:	3a08      	subs	r2, #8
 800615e:	60da      	str	r2, [r3, #12]
 8006160:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8006164:	e038      	b.n	80061d8 <_free_r+0x164>
 8006166:	0a42      	lsrs	r2, r0, #9
 8006168:	2a04      	cmp	r2, #4
 800616a:	d802      	bhi.n	8006172 <_free_r+0xfe>
 800616c:	0982      	lsrs	r2, r0, #6
 800616e:	3238      	adds	r2, #56	; 0x38
 8006170:	e015      	b.n	800619e <_free_r+0x12a>
 8006172:	2a14      	cmp	r2, #20
 8006174:	d801      	bhi.n	800617a <_free_r+0x106>
 8006176:	325b      	adds	r2, #91	; 0x5b
 8006178:	e011      	b.n	800619e <_free_r+0x12a>
 800617a:	2a54      	cmp	r2, #84	; 0x54
 800617c:	d802      	bhi.n	8006184 <_free_r+0x110>
 800617e:	0b02      	lsrs	r2, r0, #12
 8006180:	326e      	adds	r2, #110	; 0x6e
 8006182:	e00c      	b.n	800619e <_free_r+0x12a>
 8006184:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006188:	d802      	bhi.n	8006190 <_free_r+0x11c>
 800618a:	0bc2      	lsrs	r2, r0, #15
 800618c:	3277      	adds	r2, #119	; 0x77
 800618e:	e006      	b.n	800619e <_free_r+0x12a>
 8006190:	f240 5154 	movw	r1, #1364	; 0x554
 8006194:	428a      	cmp	r2, r1
 8006196:	bf9a      	itte	ls
 8006198:	0c82      	lsrls	r2, r0, #18
 800619a:	327c      	addls	r2, #124	; 0x7c
 800619c:	227e      	movhi	r2, #126	; 0x7e
 800619e:	1c51      	adds	r1, r2, #1
 80061a0:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80061a4:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80061a8:	4f0d      	ldr	r7, [pc, #52]	; (80061e0 <_free_r+0x16c>)
 80061aa:	428e      	cmp	r6, r1
 80061ac:	d10b      	bne.n	80061c6 <_free_r+0x152>
 80061ae:	2101      	movs	r1, #1
 80061b0:	1092      	asrs	r2, r2, #2
 80061b2:	fa01 f202 	lsl.w	r2, r1, r2
 80061b6:	6879      	ldr	r1, [r7, #4]
 80061b8:	4311      	orrs	r1, r2
 80061ba:	6079      	str	r1, [r7, #4]
 80061bc:	4631      	mov	r1, r6
 80061be:	e008      	b.n	80061d2 <_free_r+0x15e>
 80061c0:	6889      	ldr	r1, [r1, #8]
 80061c2:	428e      	cmp	r6, r1
 80061c4:	d004      	beq.n	80061d0 <_free_r+0x15c>
 80061c6:	684a      	ldr	r2, [r1, #4]
 80061c8:	f022 0203 	bic.w	r2, r2, #3
 80061cc:	4290      	cmp	r0, r2
 80061ce:	d3f7      	bcc.n	80061c0 <_free_r+0x14c>
 80061d0:	68ce      	ldr	r6, [r1, #12]
 80061d2:	60de      	str	r6, [r3, #12]
 80061d4:	6099      	str	r1, [r3, #8]
 80061d6:	60b3      	str	r3, [r6, #8]
 80061d8:	60cb      	str	r3, [r1, #12]
 80061da:	e77b      	b.n	80060d4 <_free_r+0x60>
 80061dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061e0:	20000130 	.word	0x20000130
 80061e4:	20000538 	.word	0x20000538
 80061e8:	20000564 	.word	0x20000564
 80061ec:	20000138 	.word	0x20000138

080061f0 <memmove>:
 80061f0:	4288      	cmp	r0, r1
 80061f2:	b510      	push	{r4, lr}
 80061f4:	eb01 0302 	add.w	r3, r1, r2
 80061f8:	d801      	bhi.n	80061fe <memmove+0xe>
 80061fa:	1e42      	subs	r2, r0, #1
 80061fc:	e00b      	b.n	8006216 <memmove+0x26>
 80061fe:	4298      	cmp	r0, r3
 8006200:	d2fb      	bcs.n	80061fa <memmove+0xa>
 8006202:	1881      	adds	r1, r0, r2
 8006204:	1ad2      	subs	r2, r2, r3
 8006206:	42d3      	cmn	r3, r2
 8006208:	d004      	beq.n	8006214 <memmove+0x24>
 800620a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800620e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006212:	e7f8      	b.n	8006206 <memmove+0x16>
 8006214:	bd10      	pop	{r4, pc}
 8006216:	4299      	cmp	r1, r3
 8006218:	d004      	beq.n	8006224 <memmove+0x34>
 800621a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800621e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006222:	e7f8      	b.n	8006216 <memmove+0x26>
 8006224:	bd10      	pop	{r4, pc}

08006226 <memset>:
 8006226:	4402      	add	r2, r0
 8006228:	4603      	mov	r3, r0
 800622a:	4293      	cmp	r3, r2
 800622c:	d002      	beq.n	8006234 <memset+0xe>
 800622e:	f803 1b01 	strb.w	r1, [r3], #1
 8006232:	e7fa      	b.n	800622a <memset+0x4>
 8006234:	4770      	bx	lr
	...

08006238 <_realloc_r>:
 8006238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800623c:	4681      	mov	r9, r0
 800623e:	460c      	mov	r4, r1
 8006240:	b929      	cbnz	r1, 800624e <_realloc_r+0x16>
 8006242:	4611      	mov	r1, r2
 8006244:	b003      	add	sp, #12
 8006246:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800624a:	f7ff b8fd 	b.w	8005448 <_malloc_r>
 800624e:	9201      	str	r2, [sp, #4]
 8006250:	f7ff fb25 	bl	800589e <__malloc_lock>
 8006254:	9a01      	ldr	r2, [sp, #4]
 8006256:	f854 ec04 	ldr.w	lr, [r4, #-4]
 800625a:	f102 080b 	add.w	r8, r2, #11
 800625e:	f1b8 0f16 	cmp.w	r8, #22
 8006262:	f1a4 0b08 	sub.w	fp, r4, #8
 8006266:	f02e 0503 	bic.w	r5, lr, #3
 800626a:	d903      	bls.n	8006274 <_realloc_r+0x3c>
 800626c:	f038 0807 	bics.w	r8, r8, #7
 8006270:	d502      	bpl.n	8006278 <_realloc_r+0x40>
 8006272:	e003      	b.n	800627c <_realloc_r+0x44>
 8006274:	f04f 0810 	mov.w	r8, #16
 8006278:	4590      	cmp	r8, r2
 800627a:	d204      	bcs.n	8006286 <_realloc_r+0x4e>
 800627c:	230c      	movs	r3, #12
 800627e:	f8c9 3000 	str.w	r3, [r9]
 8006282:	2000      	movs	r0, #0
 8006284:	e17d      	b.n	8006582 <_realloc_r+0x34a>
 8006286:	45a8      	cmp	r8, r5
 8006288:	f340 8150 	ble.w	800652c <_realloc_r+0x2f4>
 800628c:	4ba6      	ldr	r3, [pc, #664]	; (8006528 <_realloc_r+0x2f0>)
 800628e:	6898      	ldr	r0, [r3, #8]
 8006290:	eb0b 0105 	add.w	r1, fp, r5
 8006294:	4281      	cmp	r1, r0
 8006296:	684f      	ldr	r7, [r1, #4]
 8006298:	d005      	beq.n	80062a6 <_realloc_r+0x6e>
 800629a:	f027 0601 	bic.w	r6, r7, #1
 800629e:	440e      	add	r6, r1
 80062a0:	6876      	ldr	r6, [r6, #4]
 80062a2:	07f6      	lsls	r6, r6, #31
 80062a4:	d426      	bmi.n	80062f4 <_realloc_r+0xbc>
 80062a6:	f027 0a03 	bic.w	sl, r7, #3
 80062aa:	4281      	cmp	r1, r0
 80062ac:	eb05 070a 	add.w	r7, r5, sl
 80062b0:	d118      	bne.n	80062e4 <_realloc_r+0xac>
 80062b2:	f108 0610 	add.w	r6, r8, #16
 80062b6:	42b7      	cmp	r7, r6
 80062b8:	db1f      	blt.n	80062fa <_realloc_r+0xc2>
 80062ba:	eb0b 0008 	add.w	r0, fp, r8
 80062be:	ebc8 0707 	rsb	r7, r8, r7
 80062c2:	f047 0701 	orr.w	r7, r7, #1
 80062c6:	6098      	str	r0, [r3, #8]
 80062c8:	6047      	str	r7, [r0, #4]
 80062ca:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80062ce:	f003 0301 	and.w	r3, r3, #1
 80062d2:	ea43 0308 	orr.w	r3, r3, r8
 80062d6:	4648      	mov	r0, r9
 80062d8:	f844 3c04 	str.w	r3, [r4, #-4]
 80062dc:	f7ff fae0 	bl	80058a0 <__malloc_unlock>
 80062e0:	4620      	mov	r0, r4
 80062e2:	e14e      	b.n	8006582 <_realloc_r+0x34a>
 80062e4:	45b8      	cmp	r8, r7
 80062e6:	dc08      	bgt.n	80062fa <_realloc_r+0xc2>
 80062e8:	68cb      	ldr	r3, [r1, #12]
 80062ea:	688a      	ldr	r2, [r1, #8]
 80062ec:	463d      	mov	r5, r7
 80062ee:	60d3      	str	r3, [r2, #12]
 80062f0:	609a      	str	r2, [r3, #8]
 80062f2:	e11b      	b.n	800652c <_realloc_r+0x2f4>
 80062f4:	f04f 0a00 	mov.w	sl, #0
 80062f8:	4651      	mov	r1, sl
 80062fa:	f01e 0f01 	tst.w	lr, #1
 80062fe:	f040 80c3 	bne.w	8006488 <_realloc_r+0x250>
 8006302:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8006306:	ebc7 070b 	rsb	r7, r7, fp
 800630a:	687e      	ldr	r6, [r7, #4]
 800630c:	f026 0603 	bic.w	r6, r6, #3
 8006310:	442e      	add	r6, r5
 8006312:	2900      	cmp	r1, #0
 8006314:	f000 8083 	beq.w	800641e <_realloc_r+0x1e6>
 8006318:	4281      	cmp	r1, r0
 800631a:	44b2      	add	sl, r6
 800631c:	d147      	bne.n	80063ae <_realloc_r+0x176>
 800631e:	f108 0110 	add.w	r1, r8, #16
 8006322:	458a      	cmp	sl, r1
 8006324:	db7b      	blt.n	800641e <_realloc_r+0x1e6>
 8006326:	463e      	mov	r6, r7
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	f856 1f08 	ldr.w	r1, [r6, #8]!
 800632e:	60ca      	str	r2, [r1, #12]
 8006330:	6091      	str	r1, [r2, #8]
 8006332:	1f2a      	subs	r2, r5, #4
 8006334:	2a24      	cmp	r2, #36	; 0x24
 8006336:	d825      	bhi.n	8006384 <_realloc_r+0x14c>
 8006338:	2a13      	cmp	r2, #19
 800633a:	d91b      	bls.n	8006374 <_realloc_r+0x13c>
 800633c:	6821      	ldr	r1, [r4, #0]
 800633e:	60b9      	str	r1, [r7, #8]
 8006340:	6861      	ldr	r1, [r4, #4]
 8006342:	60f9      	str	r1, [r7, #12]
 8006344:	2a1b      	cmp	r2, #27
 8006346:	d803      	bhi.n	8006350 <_realloc_r+0x118>
 8006348:	f107 0210 	add.w	r2, r7, #16
 800634c:	3408      	adds	r4, #8
 800634e:	e012      	b.n	8006376 <_realloc_r+0x13e>
 8006350:	68a1      	ldr	r1, [r4, #8]
 8006352:	6139      	str	r1, [r7, #16]
 8006354:	68e1      	ldr	r1, [r4, #12]
 8006356:	6179      	str	r1, [r7, #20]
 8006358:	2a24      	cmp	r2, #36	; 0x24
 800635a:	bf01      	itttt	eq
 800635c:	6922      	ldreq	r2, [r4, #16]
 800635e:	61ba      	streq	r2, [r7, #24]
 8006360:	6961      	ldreq	r1, [r4, #20]
 8006362:	61f9      	streq	r1, [r7, #28]
 8006364:	bf19      	ittee	ne
 8006366:	f107 0218 	addne.w	r2, r7, #24
 800636a:	3410      	addne	r4, #16
 800636c:	f107 0220 	addeq.w	r2, r7, #32
 8006370:	3418      	addeq	r4, #24
 8006372:	e000      	b.n	8006376 <_realloc_r+0x13e>
 8006374:	4632      	mov	r2, r6
 8006376:	6821      	ldr	r1, [r4, #0]
 8006378:	6011      	str	r1, [r2, #0]
 800637a:	6861      	ldr	r1, [r4, #4]
 800637c:	6051      	str	r1, [r2, #4]
 800637e:	68a1      	ldr	r1, [r4, #8]
 8006380:	6091      	str	r1, [r2, #8]
 8006382:	e005      	b.n	8006390 <_realloc_r+0x158>
 8006384:	4621      	mov	r1, r4
 8006386:	4630      	mov	r0, r6
 8006388:	9301      	str	r3, [sp, #4]
 800638a:	f7ff ff31 	bl	80061f0 <memmove>
 800638e:	9b01      	ldr	r3, [sp, #4]
 8006390:	eb07 0208 	add.w	r2, r7, r8
 8006394:	ebc8 0a0a 	rsb	sl, r8, sl
 8006398:	609a      	str	r2, [r3, #8]
 800639a:	f04a 0301 	orr.w	r3, sl, #1
 800639e:	6053      	str	r3, [r2, #4]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	ea43 0308 	orr.w	r3, r3, r8
 80063aa:	607b      	str	r3, [r7, #4]
 80063ac:	e0b6      	b.n	800651c <_realloc_r+0x2e4>
 80063ae:	45d0      	cmp	r8, sl
 80063b0:	dc35      	bgt.n	800641e <_realloc_r+0x1e6>
 80063b2:	68cb      	ldr	r3, [r1, #12]
 80063b4:	688a      	ldr	r2, [r1, #8]
 80063b6:	4638      	mov	r0, r7
 80063b8:	60d3      	str	r3, [r2, #12]
 80063ba:	609a      	str	r2, [r3, #8]
 80063bc:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	60d3      	str	r3, [r2, #12]
 80063c4:	609a      	str	r2, [r3, #8]
 80063c6:	1f2a      	subs	r2, r5, #4
 80063c8:	2a24      	cmp	r2, #36	; 0x24
 80063ca:	d823      	bhi.n	8006414 <_realloc_r+0x1dc>
 80063cc:	2a13      	cmp	r2, #19
 80063ce:	d91a      	bls.n	8006406 <_realloc_r+0x1ce>
 80063d0:	6823      	ldr	r3, [r4, #0]
 80063d2:	60bb      	str	r3, [r7, #8]
 80063d4:	6863      	ldr	r3, [r4, #4]
 80063d6:	60fb      	str	r3, [r7, #12]
 80063d8:	2a1b      	cmp	r2, #27
 80063da:	d803      	bhi.n	80063e4 <_realloc_r+0x1ac>
 80063dc:	f107 0010 	add.w	r0, r7, #16
 80063e0:	3408      	adds	r4, #8
 80063e2:	e010      	b.n	8006406 <_realloc_r+0x1ce>
 80063e4:	68a3      	ldr	r3, [r4, #8]
 80063e6:	613b      	str	r3, [r7, #16]
 80063e8:	68e3      	ldr	r3, [r4, #12]
 80063ea:	617b      	str	r3, [r7, #20]
 80063ec:	2a24      	cmp	r2, #36	; 0x24
 80063ee:	bf01      	itttt	eq
 80063f0:	6923      	ldreq	r3, [r4, #16]
 80063f2:	61bb      	streq	r3, [r7, #24]
 80063f4:	6963      	ldreq	r3, [r4, #20]
 80063f6:	61fb      	streq	r3, [r7, #28]
 80063f8:	bf19      	ittee	ne
 80063fa:	f107 0018 	addne.w	r0, r7, #24
 80063fe:	3410      	addne	r4, #16
 8006400:	f107 0020 	addeq.w	r0, r7, #32
 8006404:	3418      	addeq	r4, #24
 8006406:	6823      	ldr	r3, [r4, #0]
 8006408:	6003      	str	r3, [r0, #0]
 800640a:	6863      	ldr	r3, [r4, #4]
 800640c:	6043      	str	r3, [r0, #4]
 800640e:	68a3      	ldr	r3, [r4, #8]
 8006410:	6083      	str	r3, [r0, #8]
 8006412:	e002      	b.n	800641a <_realloc_r+0x1e2>
 8006414:	4621      	mov	r1, r4
 8006416:	f7ff feeb 	bl	80061f0 <memmove>
 800641a:	4655      	mov	r5, sl
 800641c:	e02e      	b.n	800647c <_realloc_r+0x244>
 800641e:	45b0      	cmp	r8, r6
 8006420:	dc32      	bgt.n	8006488 <_realloc_r+0x250>
 8006422:	4638      	mov	r0, r7
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800642a:	60d3      	str	r3, [r2, #12]
 800642c:	609a      	str	r2, [r3, #8]
 800642e:	1f2a      	subs	r2, r5, #4
 8006430:	2a24      	cmp	r2, #36	; 0x24
 8006432:	d825      	bhi.n	8006480 <_realloc_r+0x248>
 8006434:	2a13      	cmp	r2, #19
 8006436:	d91a      	bls.n	800646e <_realloc_r+0x236>
 8006438:	6823      	ldr	r3, [r4, #0]
 800643a:	60bb      	str	r3, [r7, #8]
 800643c:	6863      	ldr	r3, [r4, #4]
 800643e:	60fb      	str	r3, [r7, #12]
 8006440:	2a1b      	cmp	r2, #27
 8006442:	d803      	bhi.n	800644c <_realloc_r+0x214>
 8006444:	f107 0010 	add.w	r0, r7, #16
 8006448:	3408      	adds	r4, #8
 800644a:	e010      	b.n	800646e <_realloc_r+0x236>
 800644c:	68a3      	ldr	r3, [r4, #8]
 800644e:	613b      	str	r3, [r7, #16]
 8006450:	68e3      	ldr	r3, [r4, #12]
 8006452:	617b      	str	r3, [r7, #20]
 8006454:	2a24      	cmp	r2, #36	; 0x24
 8006456:	bf01      	itttt	eq
 8006458:	6923      	ldreq	r3, [r4, #16]
 800645a:	61bb      	streq	r3, [r7, #24]
 800645c:	6963      	ldreq	r3, [r4, #20]
 800645e:	61fb      	streq	r3, [r7, #28]
 8006460:	bf19      	ittee	ne
 8006462:	f107 0018 	addne.w	r0, r7, #24
 8006466:	3410      	addne	r4, #16
 8006468:	f107 0020 	addeq.w	r0, r7, #32
 800646c:	3418      	addeq	r4, #24
 800646e:	6823      	ldr	r3, [r4, #0]
 8006470:	6003      	str	r3, [r0, #0]
 8006472:	6863      	ldr	r3, [r4, #4]
 8006474:	6043      	str	r3, [r0, #4]
 8006476:	68a3      	ldr	r3, [r4, #8]
 8006478:	6083      	str	r3, [r0, #8]
 800647a:	4635      	mov	r5, r6
 800647c:	46bb      	mov	fp, r7
 800647e:	e055      	b.n	800652c <_realloc_r+0x2f4>
 8006480:	4621      	mov	r1, r4
 8006482:	f7ff feb5 	bl	80061f0 <memmove>
 8006486:	e7f8      	b.n	800647a <_realloc_r+0x242>
 8006488:	4611      	mov	r1, r2
 800648a:	4648      	mov	r0, r9
 800648c:	f7fe ffdc 	bl	8005448 <_malloc_r>
 8006490:	4606      	mov	r6, r0
 8006492:	2800      	cmp	r0, #0
 8006494:	d042      	beq.n	800651c <_realloc_r+0x2e4>
 8006496:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800649a:	f023 0301 	bic.w	r3, r3, #1
 800649e:	f1a0 0208 	sub.w	r2, r0, #8
 80064a2:	445b      	add	r3, fp
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d105      	bne.n	80064b4 <_realloc_r+0x27c>
 80064a8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80064ac:	f023 0303 	bic.w	r3, r3, #3
 80064b0:	441d      	add	r5, r3
 80064b2:	e03b      	b.n	800652c <_realloc_r+0x2f4>
 80064b4:	1f2a      	subs	r2, r5, #4
 80064b6:	2a24      	cmp	r2, #36	; 0x24
 80064b8:	d829      	bhi.n	800650e <_realloc_r+0x2d6>
 80064ba:	2a13      	cmp	r2, #19
 80064bc:	d91e      	bls.n	80064fc <_realloc_r+0x2c4>
 80064be:	6823      	ldr	r3, [r4, #0]
 80064c0:	6003      	str	r3, [r0, #0]
 80064c2:	6863      	ldr	r3, [r4, #4]
 80064c4:	6043      	str	r3, [r0, #4]
 80064c6:	2a1b      	cmp	r2, #27
 80064c8:	d804      	bhi.n	80064d4 <_realloc_r+0x29c>
 80064ca:	f100 0308 	add.w	r3, r0, #8
 80064ce:	f104 0208 	add.w	r2, r4, #8
 80064d2:	e015      	b.n	8006500 <_realloc_r+0x2c8>
 80064d4:	68a3      	ldr	r3, [r4, #8]
 80064d6:	6083      	str	r3, [r0, #8]
 80064d8:	68e3      	ldr	r3, [r4, #12]
 80064da:	60c3      	str	r3, [r0, #12]
 80064dc:	2a24      	cmp	r2, #36	; 0x24
 80064de:	bf01      	itttt	eq
 80064e0:	6923      	ldreq	r3, [r4, #16]
 80064e2:	6103      	streq	r3, [r0, #16]
 80064e4:	6961      	ldreq	r1, [r4, #20]
 80064e6:	6141      	streq	r1, [r0, #20]
 80064e8:	bf19      	ittee	ne
 80064ea:	f100 0310 	addne.w	r3, r0, #16
 80064ee:	f104 0210 	addne.w	r2, r4, #16
 80064f2:	f100 0318 	addeq.w	r3, r0, #24
 80064f6:	f104 0218 	addeq.w	r2, r4, #24
 80064fa:	e001      	b.n	8006500 <_realloc_r+0x2c8>
 80064fc:	4603      	mov	r3, r0
 80064fe:	4622      	mov	r2, r4
 8006500:	6811      	ldr	r1, [r2, #0]
 8006502:	6019      	str	r1, [r3, #0]
 8006504:	6851      	ldr	r1, [r2, #4]
 8006506:	6059      	str	r1, [r3, #4]
 8006508:	6892      	ldr	r2, [r2, #8]
 800650a:	609a      	str	r2, [r3, #8]
 800650c:	e002      	b.n	8006514 <_realloc_r+0x2dc>
 800650e:	4621      	mov	r1, r4
 8006510:	f7ff fe6e 	bl	80061f0 <memmove>
 8006514:	4621      	mov	r1, r4
 8006516:	4648      	mov	r0, r9
 8006518:	f7ff fdac 	bl	8006074 <_free_r>
 800651c:	4648      	mov	r0, r9
 800651e:	f7ff f9bf 	bl	80058a0 <__malloc_unlock>
 8006522:	4630      	mov	r0, r6
 8006524:	e02d      	b.n	8006582 <_realloc_r+0x34a>
 8006526:	bf00      	nop
 8006528:	20000130 	.word	0x20000130
 800652c:	ebc8 0205 	rsb	r2, r8, r5
 8006530:	2a0f      	cmp	r2, #15
 8006532:	f8db 3004 	ldr.w	r3, [fp, #4]
 8006536:	d914      	bls.n	8006562 <_realloc_r+0x32a>
 8006538:	f003 0301 	and.w	r3, r3, #1
 800653c:	eb0b 0108 	add.w	r1, fp, r8
 8006540:	ea43 0308 	orr.w	r3, r3, r8
 8006544:	f8cb 3004 	str.w	r3, [fp, #4]
 8006548:	f042 0301 	orr.w	r3, r2, #1
 800654c:	440a      	add	r2, r1
 800654e:	604b      	str	r3, [r1, #4]
 8006550:	6853      	ldr	r3, [r2, #4]
 8006552:	f043 0301 	orr.w	r3, r3, #1
 8006556:	6053      	str	r3, [r2, #4]
 8006558:	3108      	adds	r1, #8
 800655a:	4648      	mov	r0, r9
 800655c:	f7ff fd8a 	bl	8006074 <_free_r>
 8006560:	e00a      	b.n	8006578 <_realloc_r+0x340>
 8006562:	f003 0301 	and.w	r3, r3, #1
 8006566:	432b      	orrs	r3, r5
 8006568:	eb0b 0205 	add.w	r2, fp, r5
 800656c:	f8cb 3004 	str.w	r3, [fp, #4]
 8006570:	6853      	ldr	r3, [r2, #4]
 8006572:	f043 0301 	orr.w	r3, r3, #1
 8006576:	6053      	str	r3, [r2, #4]
 8006578:	4648      	mov	r0, r9
 800657a:	f7ff f991 	bl	80058a0 <__malloc_unlock>
 800657e:	f10b 0008 	add.w	r0, fp, #8
 8006582:	b003      	add	sp, #12
 8006584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006588 <_sbrk>:
 8006588:	4b04      	ldr	r3, [pc, #16]	; (800659c <_sbrk+0x14>)
 800658a:	6819      	ldr	r1, [r3, #0]
 800658c:	4602      	mov	r2, r0
 800658e:	b909      	cbnz	r1, 8006594 <_sbrk+0xc>
 8006590:	4903      	ldr	r1, [pc, #12]	; (80065a0 <_sbrk+0x18>)
 8006592:	6019      	str	r1, [r3, #0]
 8006594:	6818      	ldr	r0, [r3, #0]
 8006596:	4402      	add	r2, r0
 8006598:	601a      	str	r2, [r3, #0]
 800659a:	4770      	bx	lr
 800659c:	20000590 	.word	0x20000590
 80065a0:	200007a8 	.word	0x200007a8

080065a4 <_init>:
 80065a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a6:	bf00      	nop
 80065a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065aa:	bc08      	pop	{r3}
 80065ac:	469e      	mov	lr, r3
 80065ae:	4770      	bx	lr

080065b0 <_fini>:
 80065b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b2:	bf00      	nop
 80065b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065b6:	bc08      	pop	{r3}
 80065b8:	469e      	mov	lr, r3
 80065ba:	4770      	bx	lr

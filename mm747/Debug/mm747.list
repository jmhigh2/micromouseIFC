
C:\Users\Jonathan\Desktop\micromouse\mm747\Debug\mm747.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003808  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080039d8  080039d8  000139d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003a98  08003a98  00013a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003a9c  08003a9c  00013a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  08003aa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000083f8  20000068  08003b08  00020068  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20008460  08003b08  00028460  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  9 .debug_line   000063b8  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001195c  00000000  00000000  00026450  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002550  00000000  00000000  00037dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ba8  00000000  00000000  0003a300  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001278  00000000  00000000  0003aea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00009476  00000000  00000000  0003c120  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004332  00000000  00000000  00045596  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  000498c8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000025b4  00000000  00000000  00049948  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080039c0 	.word	0x080039c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	080039c0 	.word	0x080039c0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80002c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80002c6:	e003      	b.n	80002d0 <LoopCopyDataInit>

080002c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80002c8:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80002ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80002cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80002ce:	3104      	adds	r1, #4

080002d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80002d0:	480b      	ldr	r0, [pc, #44]	; (8000300 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80002d2:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80002d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80002d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80002d8:	d3f6      	bcc.n	80002c8 <CopyDataInit>
  ldr  r2, =_sbss
 80002da:	4a0b      	ldr	r2, [pc, #44]	; (8000308 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80002dc:	e002      	b.n	80002e4 <LoopFillZerobss>

080002de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80002de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80002e0:	f842 3b04 	str.w	r3, [r2], #4

080002e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80002e4:	4b09      	ldr	r3, [pc, #36]	; (800030c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80002e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80002e8:	d3f9      	bcc.n	80002de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80002ea:	f002 feed 	bl	80030c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002ee:	f002 ff11 	bl	8003114 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002f2:	f002 fb87 	bl	8002a04 <main>
  bx  lr    
 80002f6:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002f8:	20050000 	.word	0x20050000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80002fc:	08003aa0 	.word	0x08003aa0
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000300:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000304:	20000068 	.word	0x20000068
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000308:	20000068 	.word	0x20000068
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800030c:	20008460 	.word	0x20008460

08000310 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000310:	e7fe      	b.n	8000310 <ADC_IRQHandler>
	...

08000314 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000314:	4b08      	ldr	r3, [pc, #32]	; (8000338 <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000316:	b510      	push	{r4, lr}
 8000318:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 800031a:	6818      	ldr	r0, [r3, #0]
 800031c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000320:	fbb0 f0f3 	udiv	r0, r0, r3
 8000324:	f000 fa94 	bl	8000850 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000328:	2200      	movs	r2, #0
 800032a:	4621      	mov	r1, r4
 800032c:	f04f 30ff 	mov.w	r0, #4294967295
 8000330:	f000 fa4a 	bl	80007c8 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000334:	2000      	movs	r0, #0
 8000336:	bd10      	pop	{r4, pc}
 8000338:	20000000 	.word	0x20000000

0800033c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800033c:	b508      	push	{r3, lr}
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800033e:	2003      	movs	r0, #3
 8000340:	f000 fa30 	bl	80007a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000344:	2000      	movs	r0, #0
 8000346:	f7ff ffe5 	bl	8000314 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800034a:	f002 fd43 	bl	8002dd4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 800034e:	2000      	movs	r0, #0
 8000350:	bd08      	pop	{r3, pc}
	...

08000354 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000354:	4a02      	ldr	r2, [pc, #8]	; (8000360 <HAL_IncTick+0xc>)
 8000356:	6813      	ldr	r3, [r2, #0]
 8000358:	3301      	adds	r3, #1
 800035a:	6013      	str	r3, [r2, #0]
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	200000f8 	.word	0x200000f8

08000364 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000364:	4b01      	ldr	r3, [pc, #4]	; (800036c <HAL_GetTick+0x8>)
 8000366:	6818      	ldr	r0, [r3, #0]
}
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	200000f8 	.word	0x200000f8

08000370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000370:	b513      	push	{r0, r1, r4, lr}
 8000372:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8000374:	f7ff fff6 	bl	8000364 <HAL_GetTick>
 8000378:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800037a:	f7ff fff3 	bl	8000364 <HAL_GetTick>
 800037e:	9b01      	ldr	r3, [sp, #4]
 8000380:	1b00      	subs	r0, r0, r4
 8000382:	4298      	cmp	r0, r3
 8000384:	d3f9      	bcc.n	800037a <HAL_Delay+0xa>
  {
  }
}
 8000386:	b002      	add	sp, #8
 8000388:	bd10      	pop	{r4, pc}
	...

0800038c <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800038c:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800038e:	4604      	mov	r4, r0
 8000390:	2800      	cmp	r0, #0
 8000392:	f000 809e 	beq.w	80004d2 <HAL_ADC_Init+0x146>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000396:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000398:	b923      	cbnz	r3, 80003a4 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800039a:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800039c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80003a0:	f002 fd48 	bl	8002e34 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80003a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80003a6:	06db      	lsls	r3, r3, #27
 80003a8:	f100 808e 	bmi.w	80004c8 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80003ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80003ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80003b2:	f023 0302 	bic.w	r3, r3, #2
 80003b6:	f043 0302 	orr.w	r3, r3, #2
 80003ba:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80003bc:	4b46      	ldr	r3, [pc, #280]	; (80004d8 <HAL_ADC_Init+0x14c>)
 80003be:	685a      	ldr	r2, [r3, #4]
 80003c0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80003c4:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80003c6:	6859      	ldr	r1, [r3, #4]
 80003c8:	6862      	ldr	r2, [r4, #4]
 80003ca:	430a      	orrs	r2, r1
 80003cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80003ce:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80003d0:	6921      	ldr	r1, [r4, #16]
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80003d2:	685a      	ldr	r2, [r3, #4]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80003d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80003d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80003da:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80003dc:	685a      	ldr	r2, [r3, #4]
 80003de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80003e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80003e4:	685a      	ldr	r2, [r3, #4]
 80003e6:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80003ea:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80003ec:	68a2      	ldr	r2, [r4, #8]
 80003ee:	6859      	ldr	r1, [r3, #4]
 80003f0:	430a      	orrs	r2, r1
 80003f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80003f4:	689a      	ldr	r2, [r3, #8]
 80003f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80003fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80003fc:	68e2      	ldr	r2, [r4, #12]
 80003fe:	6899      	ldr	r1, [r3, #8]
 8000400:	430a      	orrs	r2, r1
 8000402:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000404:	4a35      	ldr	r2, [pc, #212]	; (80004dc <HAL_ADC_Init+0x150>)
 8000406:	4290      	cmp	r0, r2
 8000408:	d00e      	beq.n	8000428 <HAL_ADC_Init+0x9c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800040a:	6899      	ldr	r1, [r3, #8]
 800040c:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000410:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000412:	689a      	ldr	r2, [r3, #8]
 8000414:	4302      	orrs	r2, r0
 8000416:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000418:	689a      	ldr	r2, [r3, #8]
 800041a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800041e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000420:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000422:	6899      	ldr	r1, [r3, #8]
 8000424:	430a      	orrs	r2, r1
 8000426:	e006      	b.n	8000436 <HAL_ADC_Init+0xaa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000428:	689a      	ldr	r2, [r3, #8]
 800042a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800042e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000430:	689a      	ldr	r2, [r3, #8]
 8000432:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000436:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000438:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800043a:	69a1      	ldr	r1, [r4, #24]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800043c:	f022 0202 	bic.w	r2, r2, #2
 8000440:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000442:	689a      	ldr	r2, [r3, #8]
 8000444:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000448:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800044a:	6a22      	ldr	r2, [r4, #32]
 800044c:	b19a      	cbz	r2, 8000476 <HAL_ADC_Init+0xea>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800044e:	685a      	ldr	r2, [r3, #4]
 8000450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000454:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000456:	685a      	ldr	r2, [r3, #4]
 8000458:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800045c:	605a      	str	r2, [r3, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800045e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000462:	fa92 f2a2 	rbit	r2, r2
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000466:	fab2 f182 	clz	r1, r2
 800046a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800046c:	6858      	ldr	r0, [r3, #4]
 800046e:	3a01      	subs	r2, #1
 8000470:	408a      	lsls	r2, r1
 8000472:	4302      	orrs	r2, r0
 8000474:	e002      	b.n	800047c <HAL_ADC_Init+0xf0>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000476:	685a      	ldr	r2, [r3, #4]
 8000478:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800047c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC parameters */
    ADC_Init(hadc);
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800047e:	2000      	movs	r0, #0
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000482:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000486:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000488:	69e2      	ldr	r2, [r4, #28]
 800048a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800048c:	3a01      	subs	r2, #1
 800048e:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000492:	6b21      	ldr	r1, [r4, #48]	; 0x30
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000494:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000496:	689a      	ldr	r2, [r3, #8]
 8000498:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800049c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800049e:	689a      	ldr	r2, [r3, #8]
 80004a0:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80004a4:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80004a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80004a8:	689a      	ldr	r2, [r3, #8]
 80004aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80004ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80004b0:	689a      	ldr	r2, [r3, #8]
 80004b2:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80004b6:	609a      	str	r2, [r3, #8]
    
    /* Set ADC parameters */
    ADC_Init(hadc);
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80004b8:	6460      	str	r0, [r4, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80004ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80004bc:	f023 0303 	bic.w	r3, r3, #3
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	6423      	str	r3, [r4, #64]	; 0x40
 80004c6:	e000      	b.n	80004ca <HAL_ADC_Init+0x13e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80004c8:	2001      	movs	r0, #1
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80004ca:	2300      	movs	r3, #0
 80004cc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80004d0:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 80004d2:	2001      	movs	r0, #1
  /* Release Lock */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	bf00      	nop
 80004d8:	40012300 	.word	0x40012300
 80004dc:	0f000001 	.word	0x0f000001

080004e0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80004e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80004e2:	4613      	mov	r3, r2
  __IO uint32_t counter = 0;
 80004e4:	2200      	movs	r2, #0
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80004e6:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 80004e8:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80004ea:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80004ee:	2a01      	cmp	r2, #1
 80004f0:	d064      	beq.n	80005bc <HAL_ADC_Start_DMA+0xdc>
 80004f2:	2201      	movs	r2, #1
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80004f4:	6805      	ldr	r5, [r0, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80004f6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80004fa:	68aa      	ldr	r2, [r5, #8]
 80004fc:	07d2      	lsls	r2, r2, #31
 80004fe:	d503      	bpl.n	8000508 <HAL_ADC_Start_DMA+0x28>
      counter--;
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000500:	68aa      	ldr	r2, [r5, #8]
 8000502:	07d0      	lsls	r0, r2, #31
 8000504:	d413      	bmi.n	800052e <HAL_ADC_Start_DMA+0x4e>
 8000506:	e04e      	b.n	80005a6 <HAL_ADC_Start_DMA+0xc6>
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000508:	68aa      	ldr	r2, [r5, #8]
 800050a:	f042 0201 	orr.w	r2, r2, #1
 800050e:	60aa      	str	r2, [r5, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000510:	4a2c      	ldr	r2, [pc, #176]	; (80005c4 <HAL_ADC_Start_DMA+0xe4>)
 8000512:	6810      	ldr	r0, [r2, #0]
 8000514:	4a2c      	ldr	r2, [pc, #176]	; (80005c8 <HAL_ADC_Start_DMA+0xe8>)
 8000516:	fbb0 f0f2 	udiv	r0, r0, r2
 800051a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800051e:	9001      	str	r0, [sp, #4]
    while(counter != 0)
 8000520:	9a01      	ldr	r2, [sp, #4]
 8000522:	2a00      	cmp	r2, #0
 8000524:	d0ec      	beq.n	8000500 <HAL_ADC_Start_DMA+0x20>
    {
      counter--;
 8000526:	9a01      	ldr	r2, [sp, #4]
 8000528:	3a01      	subs	r2, #1
 800052a:	9201      	str	r2, [sp, #4]
 800052c:	e7f8      	b.n	8000520 <HAL_ADC_Start_DMA+0x40>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800052e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000530:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8000534:	f020 0001 	bic.w	r0, r0, #1
 8000538:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800053c:	6420      	str	r0, [r4, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800053e:	686a      	ldr	r2, [r5, #4]
 8000540:	0552      	lsls	r2, r2, #21
 8000542:	d505      	bpl.n	8000550 <HAL_ADC_Start_DMA+0x70>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000544:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000546:	f420 5040 	bic.w	r0, r0, #12288	; 0x3000
 800054a:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800054e:	6420      	str	r0, [r4, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000550:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000552:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000556:	d002      	beq.n	800055e <HAL_ADC_Start_DMA+0x7e>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000558:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800055a:	f022 0206 	bic.w	r2, r2, #6
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800055e:	6462      	str	r2, [r4, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000560:	2200      	movs	r2, #0

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000562:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000564:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000568:	4a18      	ldr	r2, [pc, #96]	; (80005cc <HAL_ADC_Start_DMA+0xec>)
 800056a:	63c2      	str	r2, [r0, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800056c:	4a18      	ldr	r2, [pc, #96]	; (80005d0 <HAL_ADC_Start_DMA+0xf0>)
 800056e:	6402      	str	r2, [r0, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000570:	4a18      	ldr	r2, [pc, #96]	; (80005d4 <HAL_ADC_Start_DMA+0xf4>)
 8000572:	64c2      	str	r2, [r0, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000574:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000578:	602a      	str	r2, [r5, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800057a:	686a      	ldr	r2, [r5, #4]
 800057c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000580:	606a      	str	r2, [r5, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000582:	68aa      	ldr	r2, [r5, #8]
 8000584:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000588:	60aa      	str	r2, [r5, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800058a:	460a      	mov	r2, r1
 800058c:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 8000590:	f000 fa12 	bl	80009b8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8000594:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <HAL_ADC_Start_DMA+0xf8>)
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	f013 0f1f 	tst.w	r3, #31
 800059c:	6823      	ldr	r3, [r4, #0]
 800059e:	d004      	beq.n	80005aa <HAL_ADC_Start_DMA+0xca>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80005a0:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <HAL_ADC_Start_DMA+0xfc>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d001      	beq.n	80005aa <HAL_ADC_Start_DMA+0xca>
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80005a6:	2000      	movs	r0, #0
 80005a8:	e009      	b.n	80005be <HAL_ADC_Start_DMA+0xde>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80005aa:	6898      	ldr	r0, [r3, #8]
 80005ac:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80005b0:	d1f9      	bne.n	80005a6 <HAL_ADC_Start_DMA+0xc6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80005b2:	689a      	ldr	r2, [r3, #8]
 80005b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	e000      	b.n	80005be <HAL_ADC_Start_DMA+0xde>
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80005bc:	2002      	movs	r0, #2
    }
  }
  
  /* Return function status */
  return HAL_OK;
}
 80005be:	b003      	add	sp, #12
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop
 80005c4:	20000000 	.word	0x20000000
 80005c8:	000f4240 	.word	0x000f4240
 80005cc:	080005e1 	.word	0x080005e1
 80005d0:	08000643 	.word	0x08000643
 80005d4:	0800064f 	.word	0x0800064f
 80005d8:	40012300 	.word	0x40012300
 80005dc:	40012000 	.word	0x40012000

080005e0 <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80005e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80005e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005e4:	f012 0f50 	tst.w	r2, #80	; 0x50
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80005e8:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80005ea:	d124      	bne.n	8000636 <ADC_DMAConvCplt+0x56>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80005ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005f2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	6891      	ldr	r1, [r2, #8]
 80005f8:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 80005fc:	d117      	bne.n	800062e <ADC_DMAConvCplt+0x4e>
 80005fe:	6999      	ldr	r1, [r3, #24]
 8000600:	b9a9      	cbnz	r1, 800062e <ADC_DMAConvCplt+0x4e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000602:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000604:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 8000608:	d002      	beq.n	8000610 <ADC_DMAConvCplt+0x30>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800060a:	6891      	ldr	r1, [r2, #8]
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800060c:	0549      	lsls	r1, r1, #21
 800060e:	d40e      	bmi.n	800062e <ADC_DMAConvCplt+0x4e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000610:	6851      	ldr	r1, [r2, #4]
 8000612:	f021 0120 	bic.w	r1, r1, #32
 8000616:	6051      	str	r1, [r2, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000618:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800061a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800061e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000620:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000622:	04d2      	lsls	r2, r2, #19
 8000624:	d403      	bmi.n	800062e <ADC_DMAConvCplt+0x4e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000626:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000628:	f042 0201 	orr.w	r2, r2, #1
 800062c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 800062e:	4618      	mov	r0, r3
 8000630:	f002 f900 	bl	8002834 <HAL_ADC_ConvCpltCallback>
 8000634:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  }
}
 8000638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_ADC_ConvCpltCallback(hadc);
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800063c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063e:	4718      	bx	r3

08000640 <HAL_ADC_ConvHalfCpltCallback>:
 8000640:	4770      	bx	lr

08000642 <ADC_DMAHalfConvCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000642:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* Conversion complete callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000644:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8000646:	f7ff fffb 	bl	8000640 <HAL_ADC_ConvHalfCpltCallback>
 800064a:	bd08      	pop	{r3, pc}

0800064c <HAL_ADC_ErrorCallback>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800064c:	4770      	bx	lr

0800064e <ADC_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800064e:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000650:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8000652:	2340      	movs	r3, #64	; 0x40
 8000654:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8000656:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000658:	f043 0304 	orr.w	r3, r3, #4
 800065c:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_ADC_ErrorCallback(hadc); 
 800065e:	f7ff fff5 	bl	800064c <HAL_ADC_ErrorCallback>
 8000662:	bd08      	pop	{r3, pc}

08000664 <HAL_ADC_ConfigChannel>:
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  __IO uint32_t counter = 0;
 8000664:	2300      	movs	r3, #0
  *         the configuration information for the specified ADC.
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000666:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 8000668:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800066a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800066e:	2b01      	cmp	r3, #1
 8000670:	d070      	beq.n	8000754 <HAL_ADC_ConfigChannel+0xf0>
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000672:	680d      	ldr	r5, [r1, #0]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000674:	2301      	movs	r3, #1
 8000676:	6804      	ldr	r4, [r0, #0]
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000678:	2d09      	cmp	r5, #9
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800067a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 800067e:	b2ae      	uxth	r6, r5
 8000680:	688f      	ldr	r7, [r1, #8]
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000682:	d917      	bls.n	80006b4 <HAL_ADC_ConfigChannel+0x50>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000684:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8000688:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800068c:	f1a2 031e 	sub.w	r3, r2, #30
 8000690:	2207      	movs	r2, #7
 8000692:	409a      	lsls	r2, r3
 8000694:	ea2e 0202 	bic.w	r2, lr, r2
 8000698:	60e2      	str	r2, [r4, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800069a:	4a3d      	ldr	r2, [pc, #244]	; (8000790 <HAL_ADC_ConfigChannel+0x12c>)
 800069c:	4295      	cmp	r5, r2
 800069e:	d103      	bne.n	80006a8 <HAL_ADC_ConfigChannel+0x44>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80006a0:	68e3      	ldr	r3, [r4, #12]
 80006a2:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 80006a6:	e003      	b.n	80006b0 <HAL_ADC_ConfigChannel+0x4c>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80006a8:	68e2      	ldr	r2, [r4, #12]
 80006aa:	fa07 f303 	lsl.w	r3, r7, r3
 80006ae:	4313      	orrs	r3, r2
 80006b0:	60e3      	str	r3, [r4, #12]
 80006b2:	e00e      	b.n	80006d2 <HAL_ADC_ConfigChannel+0x6e>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80006b4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80006b8:	f04f 0e07 	mov.w	lr, #7
 80006bc:	6922      	ldr	r2, [r4, #16]
 80006be:	fa0e fe03 	lsl.w	lr, lr, r3
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80006c2:	fa07 f303 	lsl.w	r3, r7, r3
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80006c6:	ea22 020e 	bic.w	r2, r2, lr
 80006ca:	6122      	str	r2, [r4, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80006cc:	6922      	ldr	r2, [r4, #16]
 80006ce:	4313      	orrs	r3, r2
 80006d0:	6123      	str	r3, [r4, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80006d2:	684b      	ldr	r3, [r1, #4]
 80006d4:	2b06      	cmp	r3, #6
 80006d6:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80006da:	d80d      	bhi.n	80006f8 <HAL_ADC_ConfigChannel+0x94>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80006dc:	4413      	add	r3, r2
 80006de:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80006e0:	1f59      	subs	r1, r3, #5
 80006e2:	231f      	movs	r3, #31
 80006e4:	408b      	lsls	r3, r1
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80006e6:	fa06 f101 	lsl.w	r1, r6, r1
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80006ea:	ea27 0303 	bic.w	r3, r7, r3
 80006ee:	6363      	str	r3, [r4, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80006f0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80006f2:	4311      	orrs	r1, r2
 80006f4:	6361      	str	r1, [r4, #52]	; 0x34
 80006f6:	e01d      	b.n	8000734 <HAL_ADC_ConfigChannel+0xd0>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80006f8:	2b0c      	cmp	r3, #12
 80006fa:	d80e      	bhi.n	800071a <HAL_ADC_ConfigChannel+0xb6>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80006fc:	4413      	add	r3, r2
 80006fe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000700:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000704:	231f      	movs	r3, #31
 8000706:	4093      	lsls	r3, r2
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000708:	fa06 f202 	lsl.w	r2, r6, r2
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800070c:	ea21 0303 	bic.w	r3, r1, r3
 8000710:	6323      	str	r3, [r4, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000712:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000714:	431a      	orrs	r2, r3
 8000716:	6322      	str	r2, [r4, #48]	; 0x30
 8000718:	e00c      	b.n	8000734 <HAL_ADC_ConfigChannel+0xd0>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800071a:	4413      	add	r3, r2
 800071c:	221f      	movs	r2, #31
 800071e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8000720:	3b41      	subs	r3, #65	; 0x41
 8000722:	409a      	lsls	r2, r3
 8000724:	ea27 0202 	bic.w	r2, r7, r2
 8000728:	62e2      	str	r2, [r4, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800072a:	fa06 f203 	lsl.w	r2, r6, r3
 800072e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000730:	430a      	orrs	r2, r1
 8000732:	62e2      	str	r2, [r4, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <HAL_ADC_ConfigChannel+0x130>)
 8000736:	429c      	cmp	r4, r3
 8000738:	d004      	beq.n	8000744 <HAL_ADC_ConfigChannel+0xe0>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800073a:	2300      	movs	r3, #0
 800073c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000740:	4618      	mov	r0, r3
 8000742:	e023      	b.n	800078c <HAL_ADC_ConfigChannel+0x128>
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000744:	2d12      	cmp	r5, #18
 8000746:	d107      	bne.n	8000758 <HAL_ADC_ConfigChannel+0xf4>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8000748:	4a13      	ldr	r2, [pc, #76]	; (8000798 <HAL_ADC_ConfigChannel+0x134>)
 800074a:	6853      	ldr	r3, [r2, #4]
 800074c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000750:	6053      	str	r3, [r2, #4]
 8000752:	e7f2      	b.n	800073a <HAL_ADC_ConfigChannel+0xd6>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000754:	2002      	movs	r0, #2
 8000756:	e019      	b.n	800078c <HAL_ADC_ConfigChannel+0x128>
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000758:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <HAL_ADC_ConfigChannel+0x12c>)
 800075a:	429d      	cmp	r5, r3
 800075c:	d001      	beq.n	8000762 <HAL_ADC_ConfigChannel+0xfe>
 800075e:	2d11      	cmp	r5, #17
 8000760:	d1eb      	bne.n	800073a <HAL_ADC_ConfigChannel+0xd6>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000762:	490d      	ldr	r1, [pc, #52]	; (8000798 <HAL_ADC_ConfigChannel+0x134>)

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000764:	429d      	cmp	r5, r3
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000766:	684a      	ldr	r2, [r1, #4]
 8000768:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800076c:	604a      	str	r2, [r1, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800076e:	d1e4      	bne.n	800073a <HAL_ADC_ConfigChannel+0xd6>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <HAL_ADC_ConfigChannel+0x138>)
 8000772:	4a0b      	ldr	r2, [pc, #44]	; (80007a0 <HAL_ADC_ConfigChannel+0x13c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	fbb3 f2f2 	udiv	r2, r3, r2
 800077a:	230a      	movs	r3, #10
 800077c:	4353      	muls	r3, r2
      while(counter != 0)
      {
        counter--;
 800077e:	9301      	str	r3, [sp, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
      while(counter != 0)
 8000780:	9b01      	ldr	r3, [sp, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d0d9      	beq.n	800073a <HAL_ADC_ConfigChannel+0xd6>
      {
        counter--;
 8000786:	9b01      	ldr	r3, [sp, #4]
 8000788:	3b01      	subs	r3, #1
 800078a:	e7f8      	b.n	800077e <HAL_ADC_ConfigChannel+0x11a>
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return HAL_OK;
}
 800078c:	b003      	add	sp, #12
 800078e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000790:	10000012 	.word	0x10000012
 8000794:	40012000 	.word	0x40012000
 8000798:	40012300 	.word	0x40012300
 800079c:	20000000 	.word	0x20000000
 80007a0:	000f4240 	.word	0x000f4240

080007a4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007a4:	4a07      	ldr	r2, [pc, #28]	; (80007c4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80007a6:	0200      	lsls	r0, r0, #8
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007a8:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80007aa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80007ae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007b2:	041b      	lsls	r3, r3, #16
 80007b4:	0c1b      	lsrs	r3, r3, #16
 80007b6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007be:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80007c0:	60d3      	str	r3, [r2, #12]
 80007c2:	4770      	bx	lr
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007c8:	4b19      	ldr	r3, [pc, #100]	; (8000830 <HAL_NVIC_SetPriority+0x68>)
 80007ca:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007cc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007d0:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007d2:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007d6:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007d8:	2c04      	cmp	r4, #4
 80007da:	bf28      	it	cs
 80007dc:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007de:	2d06      	cmp	r5, #6

  return (
 80007e0:	f04f 0501 	mov.w	r5, #1
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007e4:	bf8c      	ite	hi
 80007e6:	3b03      	subhi	r3, #3
 80007e8:	2300      	movls	r3, #0

  return (
 80007ea:	fa05 f404 	lsl.w	r4, r5, r4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80007ee:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80007f0:	f104 34ff 	add.w	r4, r4, #4294967295
 80007f4:	ea04 0401 	and.w	r4, r4, r1
 80007f8:	fa04 f403 	lsl.w	r4, r4, r3
 80007fc:	fa05 f303 	lsl.w	r3, r5, r3
 8000800:	f103 33ff 	add.w	r3, r3, #4294967295
 8000804:	ea02 0203 	and.w	r2, r2, r3
 8000808:	ea42 0204 	orr.w	r2, r2, r4
 800080c:	ea4f 1202 	mov.w	r2, r2, lsl #4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000810:	da05      	bge.n	800081e <HAL_NVIC_SetPriority+0x56>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000812:	f000 000f 	and.w	r0, r0, #15
 8000816:	b2d2      	uxtb	r2, r2
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <HAL_NVIC_SetPriority+0x6c>)
 800081a:	541a      	strb	r2, [r3, r0]
 800081c:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000822:	b2d2      	uxtb	r2, r2
 8000824:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000828:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 800082c:	bd30      	pop	{r4, r5, pc}
 800082e:	bf00      	nop
 8000830:	e000ed00 	.word	0xe000ed00
 8000834:	e000ed14 	.word	0xe000ed14

08000838 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000838:	0942      	lsrs	r2, r0, #5
 800083a:	2301      	movs	r3, #1
 800083c:	f000 001f 	and.w	r0, r0, #31
 8000840:	fa03 f000 	lsl.w	r0, r3, r0
 8000844:	4b01      	ldr	r3, [pc, #4]	; (800084c <HAL_NVIC_EnableIRQ+0x14>)
 8000846:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800084a:	4770      	bx	lr
 800084c:	e000e100 	.word	0xe000e100

08000850 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000850:	3801      	subs	r0, #1
 8000852:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000856:	d20a      	bcs.n	800086e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085a:	21f0      	movs	r1, #240	; 0xf0
 800085c:	4a06      	ldr	r2, [pc, #24]	; (8000878 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800085e:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000860:	2000      	movs	r0, #0
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000862:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000866:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000868:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 800086e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	e000e010 	.word	0xe000e010
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800087c:	4b04      	ldr	r3, [pc, #16]	; (8000890 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800087e:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	bf0c      	ite	eq
 8000884:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000888:	f022 0204 	bicne.w	r2, r2, #4
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	4770      	bx	lr
 8000890:	e000e010 	.word	0xe000e010

08000894 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000894:	4770      	bx	lr

08000896 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000896:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000898:	f7ff fffc 	bl	8000894 <HAL_SYSTICK_Callback>
 800089c:	bd08      	pop	{r3, pc}
	...

080008a0 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80008a0:	6803      	ldr	r3, [r0, #0]
 80008a2:	2118      	movs	r1, #24
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80008aa:	3a10      	subs	r2, #16
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80008ac:	f023 0303 	bic.w	r3, r3, #3
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80008b0:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80008b4:	4904      	ldr	r1, [pc, #16]	; (80008c8 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80008b6:	2a03      	cmp	r2, #3
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80008b8:	5c89      	ldrb	r1, [r1, r2]
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80008ba:	bf88      	it	hi
 80008bc:	3304      	addhi	r3, #4
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80008be:	65c1      	str	r1, [r0, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80008c0:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80008c2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	080039d8 	.word	0x080039d8

080008cc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80008cc:	b570      	push	{r4, r5, r6, lr}
 80008ce:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 80008d0:	f7ff fd48 	bl	8000364 <HAL_GetTick>
 80008d4:	4605      	mov	r5, r0
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80008d6:	2c00      	cmp	r4, #0
 80008d8:	d064      	beq.n	80009a4 <HAL_DMA_Init+0xd8>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80008da:	2300      	movs	r3, #0

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80008dc:	6822      	ldr	r2, [r4, #0]
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80008de:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80008e2:	2302      	movs	r3, #2
 80008e4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80008e8:	6813      	ldr	r3, [r2, #0]
 80008ea:	f023 0301 	bic.w	r3, r3, #1
 80008ee:	6013      	str	r3, [r2, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008f0:	6821      	ldr	r1, [r4, #0]
 80008f2:	680b      	ldr	r3, [r1, #0]
 80008f4:	07d8      	lsls	r0, r3, #31
 80008f6:	d508      	bpl.n	800090a <HAL_DMA_Init+0x3e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80008f8:	f7ff fd34 	bl	8000364 <HAL_GetTick>
 80008fc:	1b40      	subs	r0, r0, r5
 80008fe:	2805      	cmp	r0, #5
 8000900:	d9f6      	bls.n	80008f0 <HAL_DMA_Init+0x24>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000902:	2320      	movs	r3, #32
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000904:	2003      	movs	r0, #3
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000906:	6563      	str	r3, [r4, #84]	; 0x54
 8000908:	e051      	b.n	80009ae <HAL_DMA_Init+0xe2>
      return HAL_TIMEOUT;
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800090a:	680b      	ldr	r3, [r1, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800090c:	4a29      	ldr	r2, [pc, #164]	; (80009b4 <HAL_DMA_Init+0xe8>)
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800090e:	6865      	ldr	r5, [r4, #4]
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000910:	401a      	ands	r2, r3
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000912:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000914:	69a0      	ldr	r0, [r4, #24]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000916:	431d      	orrs	r5, r3
 8000918:	68e3      	ldr	r3, [r4, #12]
 800091a:	431d      	orrs	r5, r3
 800091c:	6923      	ldr	r3, [r4, #16]
 800091e:	431d      	orrs	r5, r3
 8000920:	6963      	ldr	r3, [r4, #20]
 8000922:	432b      	orrs	r3, r5
 8000924:	69e5      	ldr	r5, [r4, #28]
 8000926:	4303      	orrs	r3, r0
 8000928:	432b      	orrs	r3, r5
 800092a:	6a25      	ldr	r5, [r4, #32]
 800092c:	432b      	orrs	r3, r5
 800092e:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000930:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000932:	2a04      	cmp	r2, #4
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000934:	bf01      	itttt	eq
 8000936:	6b25      	ldreq	r5, [r4, #48]	; 0x30
 8000938:	6ae6      	ldreq	r6, [r4, #44]	; 0x2c
 800093a:	4335      	orreq	r5, r6
 800093c:	432b      	orreq	r3, r5

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800093e:	2a04      	cmp	r2, #4
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000940:	600b      	str	r3, [r1, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000942:	694b      	ldr	r3, [r1, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000944:	f023 0307 	bic.w	r3, r3, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000948:	ea43 0302 	orr.w	r3, r3, r2

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800094c:	d11c      	bne.n	8000988 <HAL_DMA_Init+0xbc>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800094e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000950:	4313      	orrs	r3, r2
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000952:	b920      	cbnz	r0, 800095e <HAL_DMA_Init+0x92>
  {
    switch (tmp)
 8000954:	2a01      	cmp	r2, #1
 8000956:	d00b      	beq.n	8000970 <HAL_DMA_Init+0xa4>
 8000958:	d313      	bcc.n	8000982 <HAL_DMA_Init+0xb6>
 800095a:	2a02      	cmp	r2, #2
 800095c:	e010      	b.n	8000980 <HAL_DMA_Init+0xb4>
        break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800095e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000962:	d10a      	bne.n	800097a <HAL_DMA_Init+0xae>
  {
    switch (tmp)
 8000964:	2a03      	cmp	r2, #3
 8000966:	d80f      	bhi.n	8000988 <HAL_DMA_Init+0xbc>
 8000968:	e8df f002 	tbb	[pc, r2]
 800096c:	021e0b1e 	.word	0x021e0b1e
        break;
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000970:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000972:	f1b2 7fc0 	cmp.w	r2, #25165824	; 0x1800000
 8000976:	d107      	bne.n	8000988 <HAL_DMA_Init+0xbc>
 8000978:	e016      	b.n	80009a8 <HAL_DMA_Init+0xdc>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800097a:	2a02      	cmp	r2, #2
 800097c:	d914      	bls.n	80009a8 <HAL_DMA_Init+0xdc>
 800097e:	2a03      	cmp	r2, #3
 8000980:	d102      	bne.n	8000988 <HAL_DMA_Init+0xbc>
      case DMA_FIFO_THRESHOLD_HALFFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000982:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000984:	01d2      	lsls	r2, r2, #7
 8000986:	d40f      	bmi.n	80009a8 <HAL_DMA_Init+0xdc>
      return HAL_ERROR; 
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000988:	614b      	str	r3, [r1, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800098a:	4620      	mov	r0, r4
 800098c:	f7ff ff88 	bl	80008a0 <DMA_CalcBaseAndBitshift>
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000990:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000992:	233f      	movs	r3, #63	; 0x3f
 8000994:	4093      	lsls	r3, r2
 8000996:	6083      	str	r3, [r0, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000998:	2000      	movs	r0, #0
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800099a:	2301      	movs	r3, #1
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800099c:	6560      	str	r0, [r4, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800099e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 80009a4:	2001      	movs	r0, #1
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
    tmp |= hdma->Init.FIFOThreshold;
    
    if (DMA_CheckFifoParam(hdma) != HAL_OK)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80009a8:	2340      	movs	r3, #64	; 0x40
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80009aa:	2001      	movs	r0, #1
    tmp |= hdma->Init.FIFOThreshold;
    
    if (DMA_CheckFifoParam(hdma) != HAL_OK)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80009ac:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80009ae:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 80009b2:	bd70      	pop	{r4, r5, r6, pc}
 80009b4:	f010803f 	.word	0xf010803f

080009b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80009b8:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80009ba:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80009be:	2c01      	cmp	r4, #1
 80009c0:	d037      	beq.n	8000a32 <HAL_DMA_Start_IT+0x7a>
 80009c2:	2401      	movs	r4, #1
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80009c4:	6d86      	ldr	r6, [r0, #88]	; 0x58
 80009c6:	2500      	movs	r5, #0
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80009c8:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80009cc:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80009d0:	2c01      	cmp	r4, #1
 80009d2:	f04f 0402 	mov.w	r4, #2
 80009d6:	d128      	bne.n	8000a2a <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80009d8:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80009dc:	6804      	ldr	r4, [r0, #0]
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009de:	6545      	str	r5, [r0, #84]	; 0x54
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80009e0:	6825      	ldr	r5, [r4, #0]
 80009e2:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80009e6:	6025      	str	r5, [r4, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80009e8:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80009ea:	6883      	ldr	r3, [r0, #8]
 80009ec:	2b40      	cmp	r3, #64	; 0x40
 80009ee:	d102      	bne.n	80009f6 <HAL_DMA_Start_IT+0x3e>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80009f0:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80009f2:	60e1      	str	r1, [r4, #12]
 80009f4:	e001      	b.n	80009fa <HAL_DMA_Start_IT+0x42>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80009f6:	60a1      	str	r1, [r4, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80009f8:	60e2      	str	r2, [r4, #12]
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009fa:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80009fc:	233f      	movs	r3, #63	; 0x3f
 80009fe:	4093      	lsls	r3, r2
 8000a00:	60b3      	str	r3, [r6, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000a02:	6823      	ldr	r3, [r4, #0]
 8000a04:	f043 0316 	orr.w	r3, r3, #22
 8000a08:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000a0a:	6963      	ldr	r3, [r4, #20]
 8000a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a10:	6163      	str	r3, [r4, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000a12:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000a14:	b11b      	cbz	r3, 8000a1e <HAL_DMA_Start_IT+0x66>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000a16:	6823      	ldr	r3, [r4, #0]
 8000a18:	f043 0308 	orr.w	r3, r3, #8
 8000a1c:	6023      	str	r3, [r4, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000a1e:	6823      	ldr	r3, [r4, #0]
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;
 8000a20:	2000      	movs	r0, #0
    {
      hdma->Instance->CR  |= DMA_IT_HT;
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000a22:	f043 0301 	orr.w	r3, r3, #1
 8000a26:	6023      	str	r3, [r4, #0]
 8000a28:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000a2a:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000a2e:	4620      	mov	r0, r4
 8000a30:	bd70      	pop	{r4, r5, r6, pc}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a32:	2002      	movs	r0, #2
    /* Return error status */
    status = HAL_BUSY;
  }
  
  return status;
}
 8000a34:	bd70      	pop	{r4, r5, r6, pc}

08000a36 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a36:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000a3a:	2b02      	cmp	r3, #2
 8000a3c:	d003      	beq.n	8000a46 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a3e:	2380      	movs	r3, #128	; 0x80
 8000a40:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000a42:	2001      	movs	r0, #1
 8000a44:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000a46:	6802      	ldr	r2, [r0, #0]
    return HAL_ERROR;
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000a48:	2305      	movs	r3, #5
 8000a4a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
  }

  return HAL_OK;
 8000a4e:	2000      	movs	r0, #0
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000a50:	6813      	ldr	r3, [r2, #0]
 8000a52:	f023 0301 	bic.w	r3, r3, #1
 8000a56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
}
 8000a58:	4770      	bx	lr
	...

08000a5c <HAL_DMA_IRQHandler>:
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8000a5c:	2300      	movs	r3, #0
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8000a60:	9301      	str	r3, [sp, #4]
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a62:	4604      	mov	r4, r0
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8000a64:	4b59      	ldr	r3, [pc, #356]	; (8000bcc <HAL_DMA_IRQHandler+0x170>)

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a66:	6d85      	ldr	r5, [r0, #88]	; 0x58
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8000a68:	681f      	ldr	r7, [r3, #0]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a6a:	2308      	movs	r3, #8
 8000a6c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  uint32_t timeout = SystemCoreClock / 9600;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;
 8000a6e:	682e      	ldr	r6, [r5, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a70:	4093      	lsls	r3, r2
 8000a72:	421e      	tst	r6, r3
 8000a74:	d00c      	beq.n	8000a90 <HAL_DMA_IRQHandler+0x34>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000a76:	6801      	ldr	r1, [r0, #0]
 8000a78:	6808      	ldr	r0, [r1, #0]
 8000a7a:	0740      	lsls	r0, r0, #29
 8000a7c:	d508      	bpl.n	8000a90 <HAL_DMA_IRQHandler+0x34>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000a7e:	6808      	ldr	r0, [r1, #0]
 8000a80:	f020 0004 	bic.w	r0, r0, #4
 8000a84:	6008      	str	r0, [r1, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000a86:	60ab      	str	r3, [r5, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000a88:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a8a:	f043 0301 	orr.w	r3, r3, #1
 8000a8e:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a90:	4b4f      	ldr	r3, [pc, #316]	; (8000bd0 <HAL_DMA_IRQHandler+0x174>)
 8000a92:	4093      	lsls	r3, r2
 8000a94:	421e      	tst	r6, r3
 8000a96:	d008      	beq.n	8000aaa <HAL_DMA_IRQHandler+0x4e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000a98:	6821      	ldr	r1, [r4, #0]
 8000a9a:	6949      	ldr	r1, [r1, #20]
 8000a9c:	0609      	lsls	r1, r1, #24
 8000a9e:	d504      	bpl.n	8000aaa <HAL_DMA_IRQHandler+0x4e>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000aa0:	60ab      	str	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000aa2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000aaa:	4b4a      	ldr	r3, [pc, #296]	; (8000bd4 <HAL_DMA_IRQHandler+0x178>)
 8000aac:	4093      	lsls	r3, r2
 8000aae:	421e      	tst	r6, r3
 8000ab0:	d008      	beq.n	8000ac4 <HAL_DMA_IRQHandler+0x68>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000ab2:	6821      	ldr	r1, [r4, #0]
 8000ab4:	6809      	ldr	r1, [r1, #0]
 8000ab6:	0788      	lsls	r0, r1, #30
 8000ab8:	d504      	bpl.n	8000ac4 <HAL_DMA_IRQHandler+0x68>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000aba:	60ab      	str	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000abc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000abe:	f043 0304 	orr.w	r3, r3, #4
 8000ac2:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000ac4:	2310      	movs	r3, #16
 8000ac6:	fa03 f202 	lsl.w	r2, r3, r2
 8000aca:	4216      	tst	r6, r2
 8000acc:	d017      	beq.n	8000afe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000ace:	6823      	ldr	r3, [r4, #0]
 8000ad0:	6819      	ldr	r1, [r3, #0]
 8000ad2:	0709      	lsls	r1, r1, #28
 8000ad4:	d513      	bpl.n	8000afe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000ad6:	60aa      	str	r2, [r5, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	0350      	lsls	r0, r2, #13
 8000adc:	d504      	bpl.n	8000ae8 <HAL_DMA_IRQHandler+0x8c>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	0319      	lsls	r1, r3, #12
 8000ae2:	d508      	bpl.n	8000af6 <HAL_DMA_IRQHandler+0x9a>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000ae4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000ae6:	e007      	b.n	8000af8 <HAL_DMA_IRQHandler+0x9c>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	05d2      	lsls	r2, r2, #23
 8000aec:	d403      	bmi.n	8000af6 <HAL_DMA_IRQHandler+0x9a>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	f022 0208 	bic.w	r2, r2, #8
 8000af4:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000af6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000af8:	b10b      	cbz	r3, 8000afe <HAL_DMA_IRQHandler+0xa2>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000afa:	4620      	mov	r0, r4
 8000afc:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000afe:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000b00:	2220      	movs	r2, #32
 8000b02:	408a      	lsls	r2, r1
 8000b04:	4216      	tst	r6, r2
 8000b06:	d03b      	beq.n	8000b80 <HAL_DMA_IRQHandler+0x124>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000b08:	6823      	ldr	r3, [r4, #0]
 8000b0a:	6818      	ldr	r0, [r3, #0]
 8000b0c:	06c6      	lsls	r6, r0, #27
 8000b0e:	d537      	bpl.n	8000b80 <HAL_DMA_IRQHandler+0x124>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000b10:	60aa      	str	r2, [r5, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b12:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000b16:	2a05      	cmp	r2, #5
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b18:	681a      	ldr	r2, [r3, #0]
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b1a:	d119      	bne.n	8000b50 <HAL_DMA_IRQHandler+0xf4>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b1c:	f022 0216 	bic.w	r2, r2, #22
 8000b20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000b22:	695a      	ldr	r2, [r3, #20]
 8000b24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b28:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000b2a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000b2c:	b90a      	cbnz	r2, 8000b32 <HAL_DMA_IRQHandler+0xd6>
 8000b2e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000b30:	b11a      	cbz	r2, 8000b3a <HAL_DMA_IRQHandler+0xde>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	f022 0208 	bic.w	r2, r2, #8
 8000b38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b3a:	233f      	movs	r3, #63	; 0x3f
 8000b3c:	408b      	lsls	r3, r1
 8000b3e:	60ab      	str	r3, [r5, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000b40:	2300      	movs	r3, #0
 8000b42:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
         
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000b46:	2301      	movs	r3, #1
 8000b48:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	
        if(hdma->XferAbortCallback != NULL)
 8000b4c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000b4e:	e037      	b.n	8000bc0 <HAL_DMA_IRQHandler+0x164>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }
      
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b50:	0350      	lsls	r0, r2, #13
 8000b52:	d504      	bpl.n	8000b5e <HAL_DMA_IRQHandler+0x102>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	0319      	lsls	r1, r3, #12
 8000b58:	d40e      	bmi.n	8000b78 <HAL_DMA_IRQHandler+0x11c>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000b5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000b5c:	e00d      	b.n	8000b7a <HAL_DMA_IRQHandler+0x11e>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000b64:	d108      	bne.n	8000b78 <HAL_DMA_IRQHandler+0x11c>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000b66:	6819      	ldr	r1, [r3, #0]
 8000b68:	f021 0110 	bic.w	r1, r1, #16
 8000b6c:	6019      	str	r1, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
          
          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000b6e:	2301      	movs	r3, #1
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000b70:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          
          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000b74:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        }
        
        if(hdma->XferCpltCallback != NULL)
 8000b78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000b7a:	b10b      	cbz	r3, 8000b80 <HAL_DMA_IRQHandler+0x124>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000b7c:	4620      	mov	r0, r4
 8000b7e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000b80:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b82:	b303      	cbz	r3, 8000bc6 <HAL_DMA_IRQHandler+0x16a>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000b84:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b86:	07da      	lsls	r2, r3, #31
 8000b88:	d519      	bpl.n	8000bbe <HAL_DMA_IRQHandler+0x162>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000b8a:	2305      	movs	r3, #5
      
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000b8c:	6822      	ldr	r2, [r4, #0]
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000b8e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000b92:	6813      	ldr	r3, [r2, #0]
 8000b94:	f023 0301 	bic.w	r3, r3, #1
 8000b98:	6013      	str	r3, [r2, #0]
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8000b9a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000b9e:	fbb7 f7f3 	udiv	r7, r7, r3
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
      
      do
      {
        if (++count > timeout)
 8000ba2:	9b01      	ldr	r3, [sp, #4]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	429f      	cmp	r7, r3
 8000ba8:	9301      	str	r3, [sp, #4]
 8000baa:	d302      	bcc.n	8000bb2 <HAL_DMA_IRQHandler+0x156>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000bac:	6813      	ldr	r3, [r2, #0]
 8000bae:	07db      	lsls	r3, r3, #31
 8000bb0:	d4f7      	bmi.n	8000ba2 <HAL_DMA_IRQHandler+0x146>

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    }
    
    if(hdma->XferErrorCallback != NULL)
 8000bbe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000bc0:	b10b      	cbz	r3, 8000bc6 <HAL_DMA_IRQHandler+0x16a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	4798      	blx	r3
    }
  }
}
 8000bc6:	b003      	add	sp, #12
 8000bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000000 	.word	0x20000000
 8000bd0:	00800001 	.word	0x00800001
 8000bd4:	00800004 	.word	0x00800004

08000bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bdc:	680b      	ldr	r3, [r1, #0]
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bde:	b085      	sub	sp, #20
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000be0:	4e6f      	ldr	r6, [pc, #444]	; (8000da0 <HAL_GPIO_Init+0x1c8>)
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000be2:	9301      	str	r3, [sp, #4]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000be4:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be6:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 8000da8 <HAL_GPIO_Init+0x1d0>
 8000bea:	46b6      	mov	lr, r6

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000bec:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8000dac <HAL_GPIO_Init+0x1d4>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000bf0:	2201      	movs	r2, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8000bf2:	9c01      	ldr	r4, [sp, #4]

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000bf4:	409a      	lsls	r2, r3
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8000bf6:	ea32 0404 	bics.w	r4, r2, r4
 8000bfa:	f040 80c9 	bne.w	8000d90 <HAL_GPIO_Init+0x1b8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bfe:	684c      	ldr	r4, [r1, #4]
 8000c00:	f024 0910 	bic.w	r9, r4, #16
 8000c04:	f1b9 0f02 	cmp.w	r9, #2
 8000c08:	d114      	bne.n	8000c34 <HAL_GPIO_Init+0x5c>
 8000c0a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c0e:	f003 0b07 	and.w	fp, r3, #7
 8000c12:	250f      	movs	r5, #15
 8000c14:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000c18:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000c1c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c20:	fa05 f50b 	lsl.w	r5, r5, fp
 8000c24:	ea27 0505 	bic.w	r5, r7, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000c28:	690f      	ldr	r7, [r1, #16]
 8000c2a:	fa07 f70b 	lsl.w	r7, r7, fp
 8000c2e:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3] = temp;
 8000c30:	f8ca 7020 	str.w	r7, [sl, #32]
 8000c34:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c38:	2503      	movs	r5, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c3a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c3c:	f004 0b03 	and.w	fp, r4, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c40:	fa05 f50a 	lsl.w	r5, r5, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c44:	f109 39ff 	add.w	r9, r9, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c48:	fa0b fb0a 	lsl.w	fp, fp, sl
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c4c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c4e:	f1b9 0f01 	cmp.w	r9, #1
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c52:	ea07 0705 	and.w	r7, r7, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c56:	ea4b 0707 	orr.w	r7, fp, r7
      GPIOx->MODER = temp;
 8000c5a:	6007      	str	r7, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c5c:	d812      	bhi.n	8000c84 <HAL_GPIO_Init+0xac>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c5e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c60:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8000c64:	68cf      	ldr	r7, [r1, #12]
 8000c66:	fa07 f70a 	lsl.w	r7, r7, sl
 8000c6a:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000c6e:	f3c4 1900 	ubfx	r9, r4, #4, #1
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
        GPIOx->OSPEEDR = temp;
 8000c72:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000c74:	fa09 f903 	lsl.w	r9, r9, r3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c78:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c7a:	ea27 0702 	bic.w	r7, r7, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000c7e:	ea49 0707 	orr.w	r7, r9, r7
        GPIOx->OTYPER = temp;
 8000c82:	6047      	str	r7, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c84:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000c86:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000c88:	688f      	ldr	r7, [r1, #8]
 8000c8a:	fa07 f70a 	lsl.w	r7, r7, sl
 8000c8e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000c90:	60c5      	str	r5, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c92:	00e5      	lsls	r5, r4, #3
 8000c94:	d57c      	bpl.n	8000d90 <HAL_GPIO_Init+0x1b8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c96:	f8dc 5044 	ldr.w	r5, [ip, #68]	; 0x44
 8000c9a:	f023 0703 	bic.w	r7, r3, #3

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c9e:	f003 0a03 	and.w	sl, r3, #3
 8000ca2:	f04f 090f 	mov.w	r9, #15
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca6:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8000caa:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000cae:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb2:	f8cc 5044 	str.w	r5, [ip, #68]	; 0x44
 8000cb6:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000cba:	f8dc 5044 	ldr.w	r5, [ip, #68]	; 0x44
 8000cbe:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8000cc2:	9503      	str	r5, [sp, #12]
 8000cc4:	9d03      	ldr	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000cc6:	fa09 f50a 	lsl.w	r5, r9, sl
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
 8000cca:	f8d7 b008 	ldr.w	fp, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000cce:	ea2b 0905 	bic.w	r9, fp, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000cd2:	4d34      	ldr	r5, [pc, #208]	; (8000da4 <HAL_GPIO_Init+0x1cc>)
 8000cd4:	42a8      	cmp	r0, r5
 8000cd6:	d024      	beq.n	8000d22 <HAL_GPIO_Init+0x14a>
 8000cd8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000cdc:	42a8      	cmp	r0, r5
 8000cde:	d022      	beq.n	8000d26 <HAL_GPIO_Init+0x14e>
 8000ce0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ce4:	42a8      	cmp	r0, r5
 8000ce6:	d020      	beq.n	8000d2a <HAL_GPIO_Init+0x152>
 8000ce8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000cec:	42a8      	cmp	r0, r5
 8000cee:	d01e      	beq.n	8000d2e <HAL_GPIO_Init+0x156>
 8000cf0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000cf4:	42a8      	cmp	r0, r5
 8000cf6:	d01c      	beq.n	8000d32 <HAL_GPIO_Init+0x15a>
 8000cf8:	4540      	cmp	r0, r8
 8000cfa:	d01c      	beq.n	8000d36 <HAL_GPIO_Init+0x15e>
 8000cfc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000d00:	42a8      	cmp	r0, r5
 8000d02:	d01a      	beq.n	8000d3a <HAL_GPIO_Init+0x162>
 8000d04:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d08:	42a8      	cmp	r0, r5
 8000d0a:	d018      	beq.n	8000d3e <HAL_GPIO_Init+0x166>
 8000d0c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d10:	42a8      	cmp	r0, r5
 8000d12:	d016      	beq.n	8000d42 <HAL_GPIO_Init+0x16a>
 8000d14:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d18:	42a8      	cmp	r0, r5
 8000d1a:	bf14      	ite	ne
 8000d1c:	250a      	movne	r5, #10
 8000d1e:	2509      	moveq	r5, #9
 8000d20:	e010      	b.n	8000d44 <HAL_GPIO_Init+0x16c>
 8000d22:	2500      	movs	r5, #0
 8000d24:	e00e      	b.n	8000d44 <HAL_GPIO_Init+0x16c>
 8000d26:	2501      	movs	r5, #1
 8000d28:	e00c      	b.n	8000d44 <HAL_GPIO_Init+0x16c>
 8000d2a:	2502      	movs	r5, #2
 8000d2c:	e00a      	b.n	8000d44 <HAL_GPIO_Init+0x16c>
 8000d2e:	2503      	movs	r5, #3
 8000d30:	e008      	b.n	8000d44 <HAL_GPIO_Init+0x16c>
 8000d32:	2504      	movs	r5, #4
 8000d34:	e006      	b.n	8000d44 <HAL_GPIO_Init+0x16c>
 8000d36:	2505      	movs	r5, #5
 8000d38:	e004      	b.n	8000d44 <HAL_GPIO_Init+0x16c>
 8000d3a:	2506      	movs	r5, #6
 8000d3c:	e002      	b.n	8000d44 <HAL_GPIO_Init+0x16c>
 8000d3e:	2507      	movs	r5, #7
 8000d40:	e000      	b.n	8000d44 <HAL_GPIO_Init+0x16c>
 8000d42:	2508      	movs	r5, #8
 8000d44:	fa05 f50a 	lsl.w	r5, r5, sl
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d48:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d4c:	ea45 0509 	orr.w	r5, r5, r9
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d50:	60bd      	str	r5, [r7, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8000d52:	ea6f 0702 	mvn.w	r7, r2
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d56:	6835      	ldr	r5, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 8000d58:	bf0c      	ite	eq
 8000d5a:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8000d5c:	4315      	orrne	r5, r2
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d5e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8000d62:	f8ce 5000 	str.w	r5, [lr]

        temp = EXTI->EMR;
 8000d66:	f8de 5004 	ldr.w	r5, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 8000d6a:	bf0c      	ite	eq
 8000d6c:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8000d6e:	4315      	orrne	r5, r2
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d70:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8000d74:	6075      	str	r5, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d76:	68b5      	ldr	r5, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8000d78:	bf0c      	ite	eq
 8000d7a:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8000d7c:	4315      	orrne	r5, r2
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d7e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8000d80:	f8ce 5008 	str.w	r5, [lr, #8]

        temp = EXTI->FTSR;
 8000d84:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 8000d88:	bf54      	ite	pl
 8000d8a:	403d      	andpl	r5, r7
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8000d8c:	4315      	orrmi	r5, r2
        }
        EXTI->FTSR = temp;
 8000d8e:	60f5      	str	r5, [r6, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d90:	3301      	adds	r3, #1
 8000d92:	2b10      	cmp	r3, #16
 8000d94:	f47f af2c 	bne.w	8000bf0 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8000d98:	b005      	add	sp, #20
 8000d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d9e:	bf00      	nop
 8000da0:	40013c00 	.word	0x40013c00
 8000da4:	40020000 	.word	0x40020000
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40021400 	.word	0x40021400

08000db0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000db0:	b902      	cbnz	r2, 8000db4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000db2:	0409      	lsls	r1, r1, #16
 8000db4:	6181      	str	r1, [r0, #24]
 8000db6:	4770      	bx	lr

08000db8 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000db8:	6943      	ldr	r3, [r0, #20]
 8000dba:	4059      	eors	r1, r3
 8000dbc:	6141      	str	r1, [r0, #20]
 8000dbe:	4770      	bx	lr

08000dc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000dc0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000dc2:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000dc4:	6959      	ldr	r1, [r3, #20]
 8000dc6:	4201      	tst	r1, r0
 8000dc8:	d002      	beq.n	8000dd0 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000dca:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000dcc:	f001 fda2 	bl	8002914 <HAL_GPIO_EXTI_Callback>
 8000dd0:	bd08      	pop	{r3, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40013c00 	.word	0x40013c00

08000dd8 <HAL_RCC_OscConfig>:
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dd8:	6803      	ldr	r3, [r0, #0]
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000ddc:	4604      	mov	r4, r0
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dde:	07d8      	lsls	r0, r3, #31
 8000de0:	d403      	bmi.n	8000dea <HAL_RCC_OscConfig+0x12>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000de2:	6823      	ldr	r3, [r4, #0]
 8000de4:	0799      	lsls	r1, r3, #30
 8000de6:	d452      	bmi.n	8000e8e <HAL_RCC_OscConfig+0xb6>
 8000de8:	e0a5      	b.n	8000f36 <HAL_RCC_OscConfig+0x15e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dea:	4b96      	ldr	r3, [pc, #600]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000dec:	689a      	ldr	r2, [r3, #8]
 8000dee:	f002 020c 	and.w	r2, r2, #12
 8000df2:	2a04      	cmp	r2, #4
 8000df4:	d007      	beq.n	8000e06 <HAL_RCC_OscConfig+0x2e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000df6:	689a      	ldr	r2, [r3, #8]
 8000df8:	f002 020c 	and.w	r2, r2, #12
 8000dfc:	2a08      	cmp	r2, #8
 8000dfe:	d10b      	bne.n	8000e18 <HAL_RCC_OscConfig+0x40>
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	025a      	lsls	r2, r3, #9
 8000e04:	d508      	bpl.n	8000e18 <HAL_RCC_OscConfig+0x40>
    {
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e06:	4b8f      	ldr	r3, [pc, #572]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	039b      	lsls	r3, r3, #14
 8000e0c:	d5e9      	bpl.n	8000de2 <HAL_RCC_OscConfig+0xa>
 8000e0e:	6863      	ldr	r3, [r4, #4]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d1e6      	bne.n	8000de2 <HAL_RCC_OscConfig+0xa>
      {
        return HAL_ERROR;
 8000e14:	2001      	movs	r0, #1
 8000e16:	e176      	b.n	8001106 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e18:	6863      	ldr	r3, [r4, #4]
 8000e1a:	4d8a      	ldr	r5, [pc, #552]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e20:	d013      	beq.n	8000e4a <HAL_RCC_OscConfig+0x72>
 8000e22:	b95b      	cbnz	r3, 8000e3c <HAL_RCC_OscConfig+0x64>
 8000e24:	682b      	ldr	r3, [r5, #0]
 8000e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e2a:	602b      	str	r3, [r5, #0]
 8000e2c:	682b      	ldr	r3, [r5, #0]
 8000e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e32:	602b      	str	r3, [r5, #0]
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e34:	f7ff fa96 	bl	8000364 <HAL_GetTick>
 8000e38:	4606      	mov	r6, r0
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e3a:	e024      	b.n	8000e86 <HAL_RCC_OscConfig+0xae>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e40:	682b      	ldr	r3, [r5, #0]
 8000e42:	d106      	bne.n	8000e52 <HAL_RCC_OscConfig+0x7a>
 8000e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e48:	602b      	str	r3, [r5, #0]
 8000e4a:	682b      	ldr	r3, [r5, #0]
 8000e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e50:	e005      	b.n	8000e5e <HAL_RCC_OscConfig+0x86>
 8000e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e56:	602b      	str	r3, [r5, #0]
 8000e58:	682b      	ldr	r3, [r5, #0]
 8000e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e5e:	602b      	str	r3, [r5, #0]
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e60:	f7ff fa80 	bl	8000364 <HAL_GetTick>
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e64:	4d77      	ldr	r5, [pc, #476]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e66:	4606      	mov	r6, r0
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e68:	682b      	ldr	r3, [r5, #0]
 8000e6a:	039f      	lsls	r7, r3, #14
 8000e6c:	d4b9      	bmi.n	8000de2 <HAL_RCC_OscConfig+0xa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e6e:	f7ff fa79 	bl	8000364 <HAL_GetTick>
 8000e72:	1b80      	subs	r0, r0, r6
 8000e74:	2864      	cmp	r0, #100	; 0x64
 8000e76:	d9f7      	bls.n	8000e68 <HAL_RCC_OscConfig+0x90>
          {
            return HAL_TIMEOUT;
 8000e78:	2003      	movs	r0, #3
 8000e7a:	e144      	b.n	8001106 <HAL_RCC_OscConfig+0x32e>
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e7c:	f7ff fa72 	bl	8000364 <HAL_GetTick>
 8000e80:	1b80      	subs	r0, r0, r6
 8000e82:	2864      	cmp	r0, #100	; 0x64
 8000e84:	d8f8      	bhi.n	8000e78 <HAL_RCC_OscConfig+0xa0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e86:	682b      	ldr	r3, [r5, #0]
 8000e88:	0398      	lsls	r0, r3, #14
 8000e8a:	d4f7      	bmi.n	8000e7c <HAL_RCC_OscConfig+0xa4>
 8000e8c:	e7a9      	b.n	8000de2 <HAL_RCC_OscConfig+0xa>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e8e:	4b6d      	ldr	r3, [pc, #436]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000e90:	689a      	ldr	r2, [r3, #8]
 8000e92:	f012 0f0c 	tst.w	r2, #12
 8000e96:	d007      	beq.n	8000ea8 <HAL_RCC_OscConfig+0xd0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e98:	689a      	ldr	r2, [r3, #8]
 8000e9a:	f002 020c 	and.w	r2, r2, #12
 8000e9e:	2a08      	cmp	r2, #8
 8000ea0:	d117      	bne.n	8000ed2 <HAL_RCC_OscConfig+0xfa>
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	0259      	lsls	r1, r3, #9
 8000ea6:	d414      	bmi.n	8000ed2 <HAL_RCC_OscConfig+0xfa>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ea8:	4b66      	ldr	r3, [pc, #408]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	0792      	lsls	r2, r2, #30
 8000eae:	d502      	bpl.n	8000eb6 <HAL_RCC_OscConfig+0xde>
 8000eb0:	68e2      	ldr	r2, [r4, #12]
 8000eb2:	2a01      	cmp	r2, #1
 8000eb4:	d1ae      	bne.n	8000e14 <HAL_RCC_OscConfig+0x3c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	21f8      	movs	r1, #248	; 0xf8
 8000eba:	fa91 f1a1 	rbit	r1, r1
 8000ebe:	6920      	ldr	r0, [r4, #16]
 8000ec0:	fab1 f181 	clz	r1, r1
 8000ec4:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000ec8:	fa00 f101 	lsl.w	r1, r0, r1
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ed0:	e031      	b.n	8000f36 <HAL_RCC_OscConfig+0x15e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ed2:	68e3      	ldr	r3, [r4, #12]
 8000ed4:	4d5b      	ldr	r5, [pc, #364]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000ed6:	b1f3      	cbz	r3, 8000f16 <HAL_RCC_OscConfig+0x13e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ed8:	682b      	ldr	r3, [r5, #0]
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ee0:	f7ff fa40 	bl	8000364 <HAL_GetTick>
 8000ee4:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ee6:	682b      	ldr	r3, [r5, #0]
 8000ee8:	4856      	ldr	r0, [pc, #344]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000eea:	079b      	lsls	r3, r3, #30
 8000eec:	d405      	bmi.n	8000efa <HAL_RCC_OscConfig+0x122>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eee:	f7ff fa39 	bl	8000364 <HAL_GetTick>
 8000ef2:	1b80      	subs	r0, r0, r6
 8000ef4:	2802      	cmp	r0, #2
 8000ef6:	d9f6      	bls.n	8000ee6 <HAL_RCC_OscConfig+0x10e>
 8000ef8:	e7be      	b.n	8000e78 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000efa:	6803      	ldr	r3, [r0, #0]
 8000efc:	22f8      	movs	r2, #248	; 0xf8
 8000efe:	fa92 f2a2 	rbit	r2, r2
 8000f02:	6921      	ldr	r1, [r4, #16]
 8000f04:	fab2 f282 	clz	r2, r2
 8000f08:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f10:	4313      	orrs	r3, r2
 8000f12:	6003      	str	r3, [r0, #0]
 8000f14:	e00f      	b.n	8000f36 <HAL_RCC_OscConfig+0x15e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f16:	682b      	ldr	r3, [r5, #0]
 8000f18:	f023 0301 	bic.w	r3, r3, #1
 8000f1c:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f1e:	f7ff fa21 	bl	8000364 <HAL_GetTick>
 8000f22:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f24:	682b      	ldr	r3, [r5, #0]
 8000f26:	079f      	lsls	r7, r3, #30
 8000f28:	d505      	bpl.n	8000f36 <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f2a:	f7ff fa1b 	bl	8000364 <HAL_GetTick>
 8000f2e:	1b80      	subs	r0, r0, r6
 8000f30:	2802      	cmp	r0, #2
 8000f32:	d9f7      	bls.n	8000f24 <HAL_RCC_OscConfig+0x14c>
 8000f34:	e7a0      	b.n	8000e78 <HAL_RCC_OscConfig+0xa0>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f36:	6823      	ldr	r3, [r4, #0]
 8000f38:	071e      	lsls	r6, r3, #28
 8000f3a:	d403      	bmi.n	8000f44 <HAL_RCC_OscConfig+0x16c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f3c:	6823      	ldr	r3, [r4, #0]
 8000f3e:	075d      	lsls	r5, r3, #29
 8000f40:	d549      	bpl.n	8000fd6 <HAL_RCC_OscConfig+0x1fe>
 8000f42:	e022      	b.n	8000f8a <HAL_RCC_OscConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000f44:	6963      	ldr	r3, [r4, #20]
 8000f46:	4d3f      	ldr	r5, [pc, #252]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000f48:	b17b      	cbz	r3, 8000f6a <HAL_RCC_OscConfig+0x192>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f4a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	676b      	str	r3, [r5, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f52:	f7ff fa07 	bl	8000364 <HAL_GetTick>
 8000f56:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f58:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000f5a:	0798      	lsls	r0, r3, #30
 8000f5c:	d4ee      	bmi.n	8000f3c <HAL_RCC_OscConfig+0x164>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f5e:	f7ff fa01 	bl	8000364 <HAL_GetTick>
 8000f62:	1b80      	subs	r0, r0, r6
 8000f64:	2802      	cmp	r0, #2
 8000f66:	d9f7      	bls.n	8000f58 <HAL_RCC_OscConfig+0x180>
 8000f68:	e786      	b.n	8000e78 <HAL_RCC_OscConfig+0xa0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f6a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000f6c:	f023 0301 	bic.w	r3, r3, #1
 8000f70:	676b      	str	r3, [r5, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f72:	f7ff f9f7 	bl	8000364 <HAL_GetTick>
 8000f76:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f78:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000f7a:	0799      	lsls	r1, r3, #30
 8000f7c:	d5de      	bpl.n	8000f3c <HAL_RCC_OscConfig+0x164>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f7e:	f7ff f9f1 	bl	8000364 <HAL_GetTick>
 8000f82:	1b80      	subs	r0, r0, r6
 8000f84:	2802      	cmp	r0, #2
 8000f86:	d9f7      	bls.n	8000f78 <HAL_RCC_OscConfig+0x1a0>
 8000f88:	e776      	b.n	8000e78 <HAL_RCC_OscConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000f8a:	4b2e      	ldr	r3, [pc, #184]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8000f8c:	4d2e      	ldr	r5, [pc, #184]	; (8001048 <HAL_RCC_OscConfig+0x270>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000f8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f90:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f94:	641a      	str	r2, [r3, #64]	; 0x40
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8000fa0:	682b      	ldr	r3, [r5, #0]
 8000fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa6:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8000fa8:	f7ff f9dc 	bl	8000364 <HAL_GetTick>
 8000fac:	4606      	mov	r6, r0
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8000fae:	682b      	ldr	r3, [r5, #0]
 8000fb0:	05da      	lsls	r2, r3, #23
 8000fb2:	d514      	bpl.n	8000fde <HAL_RCC_OscConfig+0x206>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fb4:	68a3      	ldr	r3, [r4, #8]
 8000fb6:	4d23      	ldr	r5, [pc, #140]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d116      	bne.n	8000fea <HAL_RCC_OscConfig+0x212>
 8000fbc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fc4:	f241 3588 	movw	r5, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fc8:	f7ff f9cc 	bl	8000364 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fcc:	4e1d      	ldr	r6, [pc, #116]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fce:	4607      	mov	r7, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fd0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000fd2:	079b      	lsls	r3, r3, #30
 8000fd4:	d526      	bpl.n	8001024 <HAL_RCC_OscConfig+0x24c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fd6:	69a2      	ldr	r2, [r4, #24]
 8000fd8:	2a00      	cmp	r2, #0
 8000fda:	d137      	bne.n	800104c <HAL_RCC_OscConfig+0x274>
 8000fdc:	e079      	b.n	80010d2 <HAL_RCC_OscConfig+0x2fa>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000fde:	f7ff f9c1 	bl	8000364 <HAL_GetTick>
 8000fe2:	1b80      	subs	r0, r0, r6
 8000fe4:	2864      	cmp	r0, #100	; 0x64
 8000fe6:	d9e2      	bls.n	8000fae <HAL_RCC_OscConfig+0x1d6>
 8000fe8:	e746      	b.n	8000e78 <HAL_RCC_OscConfig+0xa0>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fea:	b96b      	cbnz	r3, 8001008 <HAL_RCC_OscConfig+0x230>
 8000fec:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fee:	f241 3788 	movw	r7, #5000	; 0x1388
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ff2:	f023 0301 	bic.w	r3, r3, #1
 8000ff6:	672b      	str	r3, [r5, #112]	; 0x70
 8000ff8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ffa:	f023 0304 	bic.w	r3, r3, #4
 8000ffe:	672b      	str	r3, [r5, #112]	; 0x70
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001000:	f7ff f9b0 	bl	8000364 <HAL_GetTick>
 8001004:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001006:	e019      	b.n	800103c <HAL_RCC_OscConfig+0x264>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001008:	2b05      	cmp	r3, #5
 800100a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800100c:	d103      	bne.n	8001016 <HAL_RCC_OscConfig+0x23e>
 800100e:	f043 0304 	orr.w	r3, r3, #4
 8001012:	672b      	str	r3, [r5, #112]	; 0x70
 8001014:	e7d2      	b.n	8000fbc <HAL_RCC_OscConfig+0x1e4>
 8001016:	f023 0301 	bic.w	r3, r3, #1
 800101a:	672b      	str	r3, [r5, #112]	; 0x70
 800101c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800101e:	f023 0304 	bic.w	r3, r3, #4
 8001022:	e7ce      	b.n	8000fc2 <HAL_RCC_OscConfig+0x1ea>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001024:	f7ff f99e 	bl	8000364 <HAL_GetTick>
 8001028:	1bc0      	subs	r0, r0, r7
 800102a:	42a8      	cmp	r0, r5
 800102c:	d9d0      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x1f8>
 800102e:	e723      	b.n	8000e78 <HAL_RCC_OscConfig+0xa0>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001030:	f7ff f998 	bl	8000364 <HAL_GetTick>
 8001034:	1b80      	subs	r0, r0, r6
 8001036:	42b8      	cmp	r0, r7
 8001038:	f63f af1e 	bhi.w	8000e78 <HAL_RCC_OscConfig+0xa0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800103c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800103e:	0798      	lsls	r0, r3, #30
 8001040:	d4f6      	bmi.n	8001030 <HAL_RCC_OscConfig+0x258>
 8001042:	e7c8      	b.n	8000fd6 <HAL_RCC_OscConfig+0x1fe>
 8001044:	40023800 	.word	0x40023800
 8001048:	40007000 	.word	0x40007000
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800104c:	4d2f      	ldr	r5, [pc, #188]	; (800110c <HAL_RCC_OscConfig+0x334>)
 800104e:	68ab      	ldr	r3, [r5, #8]
 8001050:	f003 030c 	and.w	r3, r3, #12
 8001054:	2b08      	cmp	r3, #8
 8001056:	f43f aedd 	beq.w	8000e14 <HAL_RCC_OscConfig+0x3c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800105a:	682b      	ldr	r3, [r5, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800105c:	2a02      	cmp	r2, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800105e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001062:	602b      	str	r3, [r5, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001064:	d143      	bne.n	80010ee <HAL_RCC_OscConfig+0x316>
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001066:	f7ff f97d 	bl	8000364 <HAL_GetTick>
 800106a:	4607      	mov	r7, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800106c:	682b      	ldr	r3, [r5, #0]
 800106e:	4e27      	ldr	r6, [pc, #156]	; (800110c <HAL_RCC_OscConfig+0x334>)
 8001070:	0199      	lsls	r1, r3, #6
 8001072:	d430      	bmi.n	80010d6 <HAL_RCC_OscConfig+0x2fe>
 8001074:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001078:	fa92 f2a2 	rbit	r2, r2
 800107c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001080:	fab2 f082 	clz	r0, r2
 8001084:	fa93 f3a3 	rbit	r3, r3
 8001088:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 800108c:	fab3 f583 	clz	r5, r3
 8001090:	fa92 f2a2 	rbit	r2, r2
 8001094:	69e3      	ldr	r3, [r4, #28]
 8001096:	fab2 f182 	clz	r1, r2
 800109a:	6a27      	ldr	r7, [r4, #32]
 800109c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800109e:	431f      	orrs	r7, r3
 80010a0:	4082      	lsls	r2, r0
 80010a2:	f047 5300 	orr.w	r3, r7, #536870912	; 0x20000000
 80010a6:	ea43 0002 	orr.w	r0, r3, r2
 80010aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80010ac:	085a      	lsrs	r2, r3, #1
 80010ae:	3a01      	subs	r2, #1
 80010b0:	fa02 f305 	lsl.w	r3, r2, r5
 80010b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80010b6:	4303      	orrs	r3, r0
 80010b8:	408a      	lsls	r2, r1
 80010ba:	4313      	orrs	r3, r2
 80010bc:	6073      	str	r3, [r6, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010be:	6833      	ldr	r3, [r6, #0]
 80010c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010c4:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010c6:	f7ff f94d 	bl	8000364 <HAL_GetTick>
 80010ca:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010cc:	6833      	ldr	r3, [r6, #0]
 80010ce:	019a      	lsls	r2, r3, #6
 80010d0:	d507      	bpl.n	80010e2 <HAL_RCC_OscConfig+0x30a>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80010d2:	2000      	movs	r0, #0
 80010d4:	e017      	b.n	8001106 <HAL_RCC_OscConfig+0x32e>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010d6:	f7ff f945 	bl	8000364 <HAL_GetTick>
 80010da:	1bc0      	subs	r0, r0, r7
 80010dc:	2802      	cmp	r0, #2
 80010de:	d9c5      	bls.n	800106c <HAL_RCC_OscConfig+0x294>
 80010e0:	e6ca      	b.n	8000e78 <HAL_RCC_OscConfig+0xa0>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010e2:	f7ff f93f 	bl	8000364 <HAL_GetTick>
 80010e6:	1b00      	subs	r0, r0, r4
 80010e8:	2802      	cmp	r0, #2
 80010ea:	d9ef      	bls.n	80010cc <HAL_RCC_OscConfig+0x2f4>
 80010ec:	e6c4      	b.n	8000e78 <HAL_RCC_OscConfig+0xa0>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ee:	f7ff f939 	bl	8000364 <HAL_GetTick>
 80010f2:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010f4:	682b      	ldr	r3, [r5, #0]
 80010f6:	019b      	lsls	r3, r3, #6
 80010f8:	d5eb      	bpl.n	80010d2 <HAL_RCC_OscConfig+0x2fa>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010fa:	f7ff f933 	bl	8000364 <HAL_GetTick>
 80010fe:	1b00      	subs	r0, r0, r4
 8001100:	2802      	cmp	r0, #2
 8001102:	d9f7      	bls.n	80010f4 <HAL_RCC_OscConfig+0x31c>
 8001104:	e6b8      	b.n	8000e78 <HAL_RCC_OscConfig+0xa0>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001106:	b003      	add	sp, #12
 8001108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800110a:	bf00      	nop
 800110c:	40023800 	.word	0x40023800

08001110 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001110:	491b      	ldr	r1, [pc, #108]	; (8001180 <HAL_RCC_GetSysClockFreq+0x70>)
 8001112:	688b      	ldr	r3, [r1, #8]
 8001114:	f003 030c 	and.w	r3, r3, #12
 8001118:	2b04      	cmp	r3, #4
 800111a:	d02c      	beq.n	8001176 <HAL_RCC_GetSysClockFreq+0x66>
 800111c:	2b08      	cmp	r3, #8
 800111e:	d12c      	bne.n	800117a <HAL_RCC_GetSysClockFreq+0x6a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001120:	6848      	ldr	r0, [r1, #4]
 8001122:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001126:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001128:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800112c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001130:	684b      	ldr	r3, [r1, #4]
 8001132:	fa92 f2a2 	rbit	r2, r2
 8001136:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 800113a:	fab2 f282 	clz	r2, r2
 800113e:	ea01 0103 	and.w	r1, r1, r3
 8001142:	fa21 f102 	lsr.w	r1, r1, r2
 8001146:	bf14      	ite	ne
 8001148:	4a0e      	ldrne	r2, [pc, #56]	; (8001184 <HAL_RCC_GetSysClockFreq+0x74>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 800114a:	4a0f      	ldreq	r2, [pc, #60]	; (8001188 <HAL_RCC_GetSysClockFreq+0x78>)
 800114c:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8001150:	4a0b      	ldr	r2, [pc, #44]	; (8001180 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8001152:	fb00 f301 	mul.w	r3, r0, r1
 8001156:	f44f 3040 	mov.w	r0, #196608	; 0x30000
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 800115a:	6852      	ldr	r2, [r2, #4]
 800115c:	fa90 f0a0 	rbit	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8001160:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8001164:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8001168:	fa22 f000 	lsr.w	r0, r2, r0
 800116c:	3001      	adds	r0, #1
 800116e:	0040      	lsls	r0, r0, #1
 8001170:	fbb3 f0f0 	udiv	r0, r3, r0
 8001174:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001176:	4803      	ldr	r0, [pc, #12]	; (8001184 <HAL_RCC_GetSysClockFreq+0x74>)
 8001178:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800117a:	4803      	ldr	r0, [pc, #12]	; (8001188 <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800
 8001184:	017d7840 	.word	0x017d7840
 8001188:	00f42400 	.word	0x00f42400

0800118c <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800118c:	4a50      	ldr	r2, [pc, #320]	; (80012d0 <HAL_RCC_ClockConfig+0x144>)
 800118e:	6813      	ldr	r3, [r2, #0]
 8001190:	f003 030f 	and.w	r3, r3, #15
 8001194:	428b      	cmp	r3, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800119a:	4604      	mov	r4, r0
 800119c:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800119e:	d30a      	bcc.n	80011b6 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
  
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011a0:	6821      	ldr	r1, [r4, #0]
 80011a2:	0788      	lsls	r0, r1, #30
 80011a4:	d514      	bpl.n	80011d0 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011a6:	484b      	ldr	r0, [pc, #300]	; (80012d4 <HAL_RCC_ClockConfig+0x148>)
 80011a8:	6883      	ldr	r3, [r0, #8]
 80011aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011ae:	68a3      	ldr	r3, [r4, #8]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	6083      	str	r3, [r0, #8]
 80011b4:	e00c      	b.n	80011d0 <HAL_RCC_ClockConfig+0x44>
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011b6:	6813      	ldr	r3, [r2, #0]
 80011b8:	f023 030f 	bic.w	r3, r3, #15
 80011bc:	430b      	orrs	r3, r1
 80011be:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011c0:	6813      	ldr	r3, [r2, #0]
 80011c2:	f003 030f 	and.w	r3, r3, #15
 80011c6:	4299      	cmp	r1, r3
 80011c8:	d0ea      	beq.n	80011a0 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 80011ca:	2001      	movs	r0, #1
 80011cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011d0:	07c9      	lsls	r1, r1, #31
 80011d2:	d406      	bmi.n	80011e2 <HAL_RCC_ClockConfig+0x56>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80011d4:	4a3e      	ldr	r2, [pc, #248]	; (80012d0 <HAL_RCC_ClockConfig+0x144>)
 80011d6:	6813      	ldr	r3, [r2, #0]
 80011d8:	f003 030f 	and.w	r3, r3, #15
 80011dc:	429d      	cmp	r5, r3
 80011de:	d342      	bcc.n	8001266 <HAL_RCC_ClockConfig+0xda>
 80011e0:	e04b      	b.n	800127a <HAL_RCC_ClockConfig+0xee>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011e2:	6862      	ldr	r2, [r4, #4]
 80011e4:	4b3b      	ldr	r3, [pc, #236]	; (80012d4 <HAL_RCC_ClockConfig+0x148>)
 80011e6:	2a01      	cmp	r2, #1
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e8:	6819      	ldr	r1, [r3, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ea:	d102      	bne.n	80011f2 <HAL_RCC_ClockConfig+0x66>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ec:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 80011f0:	e006      	b.n	8001200 <HAL_RCC_ClockConfig+0x74>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011f2:	2a02      	cmp	r2, #2
 80011f4:	d102      	bne.n	80011fc <HAL_RCC_ClockConfig+0x70>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011f6:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 80011fa:	e001      	b.n	8001200 <HAL_RCC_ClockConfig+0x74>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fc:	f011 0f02 	tst.w	r1, #2
 8001200:	d0e3      	beq.n	80011ca <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001202:	6899      	ldr	r1, [r3, #8]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001204:	f241 3888 	movw	r8, #5000	; 0x1388
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001208:	4f32      	ldr	r7, [pc, #200]	; (80012d4 <HAL_RCC_ClockConfig+0x148>)
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800120a:	f021 0103 	bic.w	r1, r1, #3
 800120e:	430a      	orrs	r2, r1
 8001210:	609a      	str	r2, [r3, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001212:	f7ff f8a7 	bl	8000364 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001216:	6863      	ldr	r3, [r4, #4]
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001218:	4606      	mov	r6, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800121a:	2b01      	cmp	r3, #1
 800121c:	d10c      	bne.n	8001238 <HAL_RCC_ClockConfig+0xac>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	f003 030c 	and.w	r3, r3, #12
 8001224:	2b04      	cmp	r3, #4
 8001226:	d0d5      	beq.n	80011d4 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001228:	f7ff f89c 	bl	8000364 <HAL_GetTick>
 800122c:	1b80      	subs	r0, r0, r6
 800122e:	4540      	cmp	r0, r8
 8001230:	d9f5      	bls.n	800121e <HAL_RCC_ClockConfig+0x92>
        {
          return HAL_TIMEOUT;
 8001232:	2003      	movs	r0, #3
 8001234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001238:	2b02      	cmp	r3, #2
 800123a:	d10f      	bne.n	800125c <HAL_RCC_ClockConfig+0xd0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	f003 030c 	and.w	r3, r3, #12
 8001242:	2b08      	cmp	r3, #8
 8001244:	d0c6      	beq.n	80011d4 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001246:	f7ff f88d 	bl	8000364 <HAL_GetTick>
 800124a:	1b80      	subs	r0, r0, r6
 800124c:	4540      	cmp	r0, r8
 800124e:	d9f5      	bls.n	800123c <HAL_RCC_ClockConfig+0xb0>
 8001250:	e7ef      	b.n	8001232 <HAL_RCC_ClockConfig+0xa6>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001252:	f7ff f887 	bl	8000364 <HAL_GetTick>
 8001256:	1b80      	subs	r0, r0, r6
 8001258:	4540      	cmp	r0, r8
 800125a:	d8ea      	bhi.n	8001232 <HAL_RCC_ClockConfig+0xa6>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	f013 0f0c 	tst.w	r3, #12
 8001262:	d1f6      	bne.n	8001252 <HAL_RCC_ClockConfig+0xc6>
 8001264:	e7b6      	b.n	80011d4 <HAL_RCC_ClockConfig+0x48>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001266:	6813      	ldr	r3, [r2, #0]
 8001268:	f023 030f 	bic.w	r3, r3, #15
 800126c:	432b      	orrs	r3, r5
 800126e:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001270:	6813      	ldr	r3, [r2, #0]
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	429d      	cmp	r5, r3
 8001278:	d1a7      	bne.n	80011ca <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800127a:	6821      	ldr	r1, [r4, #0]
 800127c:	074a      	lsls	r2, r1, #29
 800127e:	d506      	bpl.n	800128e <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001280:	4814      	ldr	r0, [pc, #80]	; (80012d4 <HAL_RCC_ClockConfig+0x148>)
 8001282:	6883      	ldr	r3, [r0, #8]
 8001284:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001288:	68e3      	ldr	r3, [r4, #12]
 800128a:	4313      	orrs	r3, r2
 800128c:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800128e:	070b      	lsls	r3, r1, #28
 8001290:	d507      	bpl.n	80012a2 <HAL_RCC_ClockConfig+0x116>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001292:	4a10      	ldr	r2, [pc, #64]	; (80012d4 <HAL_RCC_ClockConfig+0x148>)
 8001294:	6921      	ldr	r1, [r4, #16]
 8001296:	6893      	ldr	r3, [r2, #8]
 8001298:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800129c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80012a0:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80012a2:	f7ff ff35 	bl	8001110 <HAL_RCC_GetSysClockFreq>
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <HAL_RCC_ClockConfig+0x148>)
 80012a8:	22f0      	movs	r2, #240	; 0xf0
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	fa92 f2a2 	rbit	r2, r2
 80012b0:	fab2 f282 	clz	r2, r2
 80012b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012b8:	40d3      	lsrs	r3, r2
 80012ba:	4a07      	ldr	r2, [pc, #28]	; (80012d8 <HAL_RCC_ClockConfig+0x14c>)
 80012bc:	5cd3      	ldrb	r3, [r2, r3]
 80012be:	40d8      	lsrs	r0, r3
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_RCC_ClockConfig+0x150>)
 80012c2:	6018      	str	r0, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80012c4:	2000      	movs	r0, #0
 80012c6:	f7ff f825 	bl	8000314 <HAL_InitTick>
  
  return HAL_OK;
 80012ca:	2000      	movs	r0, #0
}
 80012cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012d0:	40023c00 	.word	0x40023c00
 80012d4:	40023800 	.word	0x40023800
 80012d8:	08003a4b 	.word	0x08003a4b
 80012dc:	20000000 	.word	0x20000000

080012e0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80012e0:	4b01      	ldr	r3, [pc, #4]	; (80012e8 <HAL_RCC_GetHCLKFreq+0x8>)
 80012e2:	6818      	ldr	r0, [r3, #0]
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	20000000 	.word	0x20000000

080012ec <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012ee:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	fa92 f2a2 	rbit	r2, r2
 80012f8:	fab2 f282 	clz	r2, r2
 80012fc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001300:	40d3      	lsrs	r3, r2
 8001302:	4a04      	ldr	r2, [pc, #16]	; (8001314 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001304:	5cd3      	ldrb	r3, [r2, r3]
 8001306:	4a04      	ldr	r2, [pc, #16]	; (8001318 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001308:	6810      	ldr	r0, [r2, #0]
}
 800130a:	40d8      	lsrs	r0, r3
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800
 8001314:	08003a5b 	.word	0x08003a5b
 8001318:	20000000 	.word	0x20000000

0800131c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <HAL_RCC_GetPCLK2Freq+0x24>)
 800131e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	fa92 f2a2 	rbit	r2, r2
 8001328:	fab2 f282 	clz	r2, r2
 800132c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001330:	40d3      	lsrs	r3, r2
 8001332:	4a04      	ldr	r2, [pc, #16]	; (8001344 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001334:	5cd3      	ldrb	r3, [r2, r3]
 8001336:	4a04      	ldr	r2, [pc, #16]	; (8001348 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001338:	6810      	ldr	r0, [r2, #0]
} 
 800133a:	40d8      	lsrs	r0, r3
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40023800 	.word	0x40023800
 8001344:	08003a5b 	.word	0x08003a5b
 8001348:	20000000 	.word	0x20000000

0800134c <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800134c:	6803      	ldr	r3, [r0, #0]
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800134e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001352:	f013 0601 	ands.w	r6, r3, #1
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001356:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001358:	d00b      	beq.n	8001372 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800135a:	4ab6      	ldr	r2, [pc, #728]	; (8001634 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800135c:	6891      	ldr	r1, [r2, #8]
 800135e:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8001362:	6091      	str	r1, [r2, #8]
 8001364:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001366:	6891      	ldr	r1, [r2, #8]
 8001368:	4331      	orrs	r1, r6
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tickstart = 0;
  uint32_t tmpreg0 = 0;
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
 800136a:	fab6 f686 	clz	r6, r6
 800136e:	0976      	lsrs	r6, r6, #5
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001370:	6091      	str	r1, [r2, #8]
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001372:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8001376:	d012      	beq.n	800139e <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001378:	49ae      	ldr	r1, [pc, #696]	; (8001634 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800137a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800137c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001380:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001384:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
    {
      plli2sused = 1; 
 8001388:	bf08      	it	eq
 800138a:	2601      	moveq	r6, #1
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800138c:	ea42 0205 	orr.w	r2, r2, r5
{
  uint32_t tickstart = 0;
  uint32_t tmpreg0 = 0;
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;
 8001390:	bf16      	itet	ne
 8001392:	fab5 f585 	clzne	r5, r5
 8001396:	2500      	moveq	r5, #0
 8001398:	096d      	lsrne	r5, r5, #5
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800139a:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800139e:	02d8      	lsls	r0, r3, #11
 80013a0:	d511      	bpl.n	80013c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80013a2:	48a4      	ldr	r0, [pc, #656]	; (8001634 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80013a4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80013a6:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80013aa:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80013ae:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80013b2:	ea42 0201 	orr.w	r2, r2, r1
 80013b6:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80013ba:	d003      	beq.n	80013c4 <HAL_RCCEx_PeriphCLKConfig+0x78>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 80013bc:	2900      	cmp	r1, #0
 80013be:	bf08      	it	eq
 80013c0:	2501      	moveq	r5, #1
 80013c2:	e000      	b.n	80013c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1; 
 80013c4:	2601      	movs	r6, #1
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {    
      plli2sused = 1; 
 80013c6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80013ca:	bf18      	it	ne
 80013cc:	2601      	movne	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80013ce:	0699      	lsls	r1, r3, #26
 80013d0:	d55d      	bpl.n	800148e <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80013d2:	4b98      	ldr	r3, [pc, #608]	; (8001634 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80013d4:	4f98      	ldr	r7, [pc, #608]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80013d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013dc:	641a      	str	r2, [r3, #64]	; 0x40
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e4:	9301      	str	r3, [sp, #4]
 80013e6:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ee:	603b      	str	r3, [r7, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80013f0:	f7fe ffb8 	bl	8000364 <HAL_GetTick>
 80013f4:	4680      	mov	r8, r0
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	05da      	lsls	r2, r3, #23
 80013fa:	d407      	bmi.n	800140c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013fc:	f7fe ffb2 	bl	8000364 <HAL_GetTick>
 8001400:	ebc8 0000 	rsb	r0, r8, r0
 8001404:	2864      	cmp	r0, #100	; 0x64
 8001406:	d9f6      	bls.n	80013f6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
      {
        return HAL_TIMEOUT;
 8001408:	2003      	movs	r0, #3
 800140a:	e340      	b.n	8001a8e <HAL_RCCEx_PeriphCLKConfig+0x742>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800140c:	4f89      	ldr	r7, [pc, #548]	; (8001634 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800140e:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001410:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001414:	d10f      	bne.n	8001436 <HAL_RCCEx_PeriphCLKConfig+0xea>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001416:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001418:	f402 7340 	and.w	r3, r2, #768	; 0x300
 800141c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001420:	4b84      	ldr	r3, [pc, #528]	; (8001634 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001422:	d12b      	bne.n	800147c <HAL_RCCEx_PeriphCLKConfig+0x130>
 8001424:	6899      	ldr	r1, [r3, #8]
 8001426:	f421 10f8 	bic.w	r0, r1, #2031616	; 0x1f0000
 800142a:	f022 4170 	bic.w	r1, r2, #4026531840	; 0xf0000000
 800142e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8001432:	4301      	orrs	r1, r0
 8001434:	e025      	b.n	8001482 <HAL_RCCEx_PeriphCLKConfig+0x136>
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001436:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001438:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800143c:	4293      	cmp	r3, r2
 800143e:	d0ea      	beq.n	8001416 <HAL_RCCEx_PeriphCLKConfig+0xca>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001440:	6f3b      	ldr	r3, [r7, #112]	; 0x70

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001442:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001444:	f423 7340 	bic.w	r3, r3, #768	; 0x300

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001448:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800144c:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800144e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001450:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001454:	673a      	str	r2, [r7, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001456:	673b      	str	r3, [r7, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001458:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800145a:	07db      	lsls	r3, r3, #31
 800145c:	d5db      	bpl.n	8001416 <HAL_RCCEx_PeriphCLKConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145e:	f7fe ff81 	bl	8000364 <HAL_GetTick>
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001462:	f241 3988 	movw	r9, #5000	; 0x1388

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001466:	4680      	mov	r8, r0
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001468:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800146a:	0798      	lsls	r0, r3, #30
 800146c:	d4d3      	bmi.n	8001416 <HAL_RCCEx_PeriphCLKConfig+0xca>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800146e:	f7fe ff79 	bl	8000364 <HAL_GetTick>
 8001472:	ebc8 0000 	rsb	r0, r8, r0
 8001476:	4548      	cmp	r0, r9
 8001478:	d9f6      	bls.n	8001468 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800147a:	e7c5      	b.n	8001408 <HAL_RCCEx_PeriphCLKConfig+0xbc>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800147c:	6899      	ldr	r1, [r3, #8]
 800147e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001482:	6099      	str	r1, [r3, #8]
 8001484:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001488:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800148a:	430a      	orrs	r2, r1
 800148c:	671a      	str	r2, [r3, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800148e:	6823      	ldr	r3, [r4, #0]
 8001490:	06d9      	lsls	r1, r3, #27
 8001492:	d50c      	bpl.n	80014ae <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001494:	4a67      	ldr	r2, [pc, #412]	; (8001634 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001496:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800149a:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800149e:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 80014a2:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 80014a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80014a8:	4301      	orrs	r1, r0
 80014aa:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80014ae:	045a      	lsls	r2, r3, #17
 80014b0:	d508      	bpl.n	80014c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80014b2:	4860      	ldr	r0, [pc, #384]	; (8001634 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80014b4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80014b8:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 80014bc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80014be:	430a      	orrs	r2, r1
 80014c0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80014c4:	041f      	lsls	r7, r3, #16
 80014c6:	d508      	bpl.n	80014da <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80014c8:	485a      	ldr	r0, [pc, #360]	; (8001634 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80014ca:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80014ce:	f422 2140 	bic.w	r1, r2, #786432	; 0xc0000
 80014d2:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80014d4:	430a      	orrs	r2, r1
 80014d6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80014da:	03d8      	lsls	r0, r3, #15
 80014dc:	d508      	bpl.n	80014f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80014de:	4855      	ldr	r0, [pc, #340]	; (8001634 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80014e0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80014e4:	f422 1140 	bic.w	r1, r2, #3145728	; 0x300000
 80014e8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80014ea:	430a      	orrs	r2, r1
 80014ec:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80014f0:	0399      	lsls	r1, r3, #14
 80014f2:	d508      	bpl.n	8001506 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80014f4:	484f      	ldr	r0, [pc, #316]	; (8001634 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80014f6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80014fa:	f422 0140 	bic.w	r1, r2, #12582912	; 0xc00000
 80014fe:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8001500:	430a      	orrs	r2, r1
 8001502:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001506:	065a      	lsls	r2, r3, #25
 8001508:	d508      	bpl.n	800151c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800150a:	484a      	ldr	r0, [pc, #296]	; (8001634 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800150c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001510:	f022 0103 	bic.w	r1, r2, #3
 8001514:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001516:	430a      	orrs	r2, r1
 8001518:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800151c:	061f      	lsls	r7, r3, #24
 800151e:	d508      	bpl.n	8001532 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001520:	4844      	ldr	r0, [pc, #272]	; (8001634 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001522:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001526:	f022 010c 	bic.w	r1, r2, #12
 800152a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800152c:	430a      	orrs	r2, r1
 800152e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001532:	05d8      	lsls	r0, r3, #23
 8001534:	d508      	bpl.n	8001548 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001536:	483f      	ldr	r0, [pc, #252]	; (8001634 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001538:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800153c:	f022 0130 	bic.w	r1, r2, #48	; 0x30
 8001540:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8001542:	430a      	orrs	r2, r1
 8001544:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001548:	0599      	lsls	r1, r3, #22
 800154a:	d508      	bpl.n	800155e <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800154c:	4839      	ldr	r0, [pc, #228]	; (8001634 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800154e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001552:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 8001556:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001558:	430a      	orrs	r2, r1
 800155a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800155e:	055a      	lsls	r2, r3, #21
 8001560:	d508      	bpl.n	8001574 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001562:	4834      	ldr	r0, [pc, #208]	; (8001634 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001564:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001568:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 800156c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800156e:	430a      	orrs	r2, r1
 8001570:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001574:	051f      	lsls	r7, r3, #20
 8001576:	d508      	bpl.n	800158a <HAL_RCCEx_PeriphCLKConfig+0x23e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001578:	482e      	ldr	r0, [pc, #184]	; (8001634 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800157a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800157e:	f422 6140 	bic.w	r1, r2, #3072	; 0xc00
 8001582:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001584:	430a      	orrs	r2, r1
 8001586:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800158a:	04d8      	lsls	r0, r3, #19
 800158c:	d508      	bpl.n	80015a0 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800158e:	4829      	ldr	r0, [pc, #164]	; (8001634 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001590:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001594:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8001598:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800159a:	430a      	orrs	r2, r1
 800159c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80015a0:	0499      	lsls	r1, r3, #18
 80015a2:	d508      	bpl.n	80015b6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80015a4:	4823      	ldr	r0, [pc, #140]	; (8001634 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80015a6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80015aa:	f422 4140 	bic.w	r1, r2, #49152	; 0xc000
 80015ae:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80015b0:	430a      	orrs	r2, r1
 80015b2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80015b6:	025a      	lsls	r2, r3, #9
 80015b8:	d508      	bpl.n	80015cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80015ba:	481e      	ldr	r0, [pc, #120]	; (8001634 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80015bc:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80015c0:	f022 6180 	bic.w	r1, r2, #67108864	; 0x4000000
 80015c4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80015c6:	430a      	orrs	r2, r1
 80015c8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80015cc:	029f      	lsls	r7, r3, #10
 80015ce:	d50c      	bpl.n	80015ea <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80015d0:	4818      	ldr	r0, [pc, #96]	; (8001634 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80015d2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80015d4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 80015d8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80015dc:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 80015e0:	bf08      	it	eq
 80015e2:	2501      	moveq	r5, #1
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80015e4:	430a      	orrs	r2, r1
 80015e6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1; 
 80015ea:	f013 0f08 	tst.w	r3, #8
 80015ee:	bf18      	it	ne
 80015f0:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80015f2:	0358      	lsls	r0, r3, #13
 80015f4:	d508      	bpl.n	8001608 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80015f6:	480f      	ldr	r0, [pc, #60]	; (8001634 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80015f8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80015fc:	f022 7140 	bic.w	r1, r2, #50331648	; 0x3000000
 8001600:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8001602:	430a      	orrs	r2, r1
 8001604:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001608:	0219      	lsls	r1, r3, #8
 800160a:	d509      	bpl.n	8001620 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800160c:	4809      	ldr	r0, [pc, #36]	; (8001634 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800160e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001612:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8001616:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800161a:	430a      	orrs	r2, r1
 800161c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001620:	2e01      	cmp	r6, #1
 8001622:	d00b      	beq.n	800163c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8001624:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001628:	d008      	beq.n	800163c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800162a:	2d01      	cmp	r5, #1
 800162c:	f040 818c 	bne.w	8001948 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8001630:	e123      	b.n	800187a <HAL_RCCEx_PeriphCLKConfig+0x52e>
 8001632:	bf00      	nop
 8001634:	40023800 	.word	0x40023800
 8001638:	40007000 	.word	0x40007000
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();  
 800163c:	4ec8      	ldr	r6, [pc, #800]	; (8001960 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 800163e:	6833      	ldr	r3, [r6, #0]
 8001640:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001644:	6033      	str	r3, [r6, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001646:	f7fe fe8d 	bl	8000364 <HAL_GetTick>
 800164a:	4607      	mov	r7, r0
    
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800164c:	6833      	ldr	r3, [r6, #0]
 800164e:	f8df e310 	ldr.w	lr, [pc, #784]	; 8001960 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8001652:	011a      	lsls	r2, r3, #4
 8001654:	d505      	bpl.n	8001662 <HAL_RCCEx_PeriphCLKConfig+0x316>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001656:	f7fe fe85 	bl	8000364 <HAL_GetTick>
 800165a:	1bc0      	subs	r0, r0, r7
 800165c:	2864      	cmp	r0, #100	; 0x64
 800165e:	d9f5      	bls.n	800164c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8001660:	e6d2      	b.n	8001408 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001662:	6827      	ldr	r7, [r4, #0]
 8001664:	07fb      	lsls	r3, r7, #31
 8001666:	d53c      	bpl.n	80016e2 <HAL_RCCEx_PeriphCLKConfig+0x396>
 8001668:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800166a:	bbd3      	cbnz	r3, 80016e2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 800166c:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 8001670:	f44f 3840 	mov.w	r8, #196608	; 0x30000
 8001674:	fa98 f9a8 	rbit	r9, r8
 8001678:	f04f 6670 	mov.w	r6, #251658240	; 0xf000000
 800167c:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8001680:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 8001684:	fa96 fca6 	rbit	ip, r6
 8001688:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 800168c:	fabc fc8c 	clz	ip, ip
 8001690:	fa9a faaa 	rbit	sl, sl
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001694:	faba fa8a 	clz	sl, sl
 8001698:	fa98 f8a8 	rbit	r8, r8
 800169c:	fab8 f888 	clz	r8, r8
 80016a0:	fa96 f6a6 	rbit	r6, r6
 80016a4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80016a8:	fab6 f686 	clz	r6, r6
 80016ac:	fa93 f3a3 	rbit	r3, r3
 80016b0:	fab3 fb83 	clz	fp, r3
 80016b4:	6861      	ldr	r1, [r4, #4]
 80016b6:	68a3      	ldr	r3, [r4, #8]
 80016b8:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 80016bc:	fa01 f10a 	lsl.w	r1, r1, sl
 80016c0:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80016c4:	fa03 f30b 	lsl.w	r3, r3, fp
 80016c8:	fa20 f009 	lsr.w	r0, r0, r9
 80016cc:	fa22 f20c 	lsr.w	r2, r2, ip
 80016d0:	430b      	orrs	r3, r1
 80016d2:	fa00 f108 	lsl.w	r1, r0, r8
 80016d6:	4319      	orrs	r1, r3
 80016d8:	fa02 f306 	lsl.w	r3, r2, r6
 80016dc:	430b      	orrs	r3, r1
 80016de:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
    }
        
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80016e2:	033e      	lsls	r6, r7, #12
 80016e4:	d503      	bpl.n	80016ee <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 80016e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80016e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80016ec:	d005      	beq.n	80016fa <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80016ee:	02f8      	lsls	r0, r7, #11
 80016f0:	d549      	bpl.n	8001786 <HAL_RCCEx_PeriphCLKConfig+0x43a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 80016f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016f8:	d145      	bne.n	8001786 <HAL_RCCEx_PeriphCLKConfig+0x43a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 80016fa:	f8df e264 	ldr.w	lr, [pc, #612]	; 8001960 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80016fe:	f44f 3840 	mov.w	r8, #196608	; 0x30000
 8001702:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 8001706:	fa98 f9a8 	rbit	r9, r8
 800170a:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 800170e:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8001712:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 8001716:	fa96 fca6 	rbit	ip, r6
 800171a:	f647 7bc0 	movw	fp, #32704	; 0x7fc0
 800171e:	fabc fc8c 	clz	ip, ip
 8001722:	fa9b fbab 	rbit	fp, fp
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001726:	fabb fb8b 	clz	fp, fp
 800172a:	fa98 f8a8 	rbit	r8, r8
 800172e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8001732:	fab8 f888 	clz	r8, r8
 8001736:	fa93 f3a3 	rbit	r3, r3
 800173a:	fab3 fa83 	clz	sl, r3
 800173e:	fa96 f6a6 	rbit	r6, r6
 8001742:	6863      	ldr	r3, [r4, #4]
 8001744:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8001748:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 800174c:	fab6 f686 	clz	r6, r6
 8001750:	fa03 f10b 	lsl.w	r1, r3, fp
 8001754:	68e3      	ldr	r3, [r4, #12]
 8001756:	fa20 f009 	lsr.w	r0, r0, r9
 800175a:	fa22 f20c 	lsr.w	r2, r2, ip
 800175e:	fa03 f30a 	lsl.w	r3, r3, sl
 8001762:	430b      	orrs	r3, r1
 8001764:	fa00 f108 	lsl.w	r1, r0, r8
 8001768:	4319      	orrs	r1, r3
 800176a:	fa02 f306 	lsl.w	r3, r2, r6
 800176e:	430b      	orrs	r3, r1
 8001770:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8001774:	f8de 308c 	ldr.w	r3, [lr, #140]	; 0x8c
 8001778:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800177a:	f023 031f 	bic.w	r3, r3, #31
 800177e:	3a01      	subs	r2, #1
 8001780:	4313      	orrs	r3, r2
 8001782:	f8ce 308c 	str.w	r3, [lr, #140]	; 0x8c
    }          

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001786:	01f9      	lsls	r1, r7, #7
 8001788:	d53c      	bpl.n	8001804 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 800178a:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8001960 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800178e:	f04f 6870 	mov.w	r8, #251658240	; 0xf000000
 8001792:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 8001796:	fa98 f9a8 	rbit	r9, r8
 800179a:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 800179e:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 80017a2:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 80017a6:	fa96 fca6 	rbit	ip, r6
 80017aa:	f647 7bc0 	movw	fp, #32704	; 0x7fc0
 80017ae:	fabc fc8c 	clz	ip, ip
 80017b2:	fa9b fbab 	rbit	fp, fp
 80017b6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80017ba:	fabb fb8b 	clz	fp, fp
 80017be:	fa93 f3a3 	rbit	r3, r3
 80017c2:	fab3 fa83 	clz	sl, r3
 80017c6:	fa98 f8a8 	rbit	r8, r8
 80017ca:	fab8 f888 	clz	r8, r8
 80017ce:	fa96 f6a6 	rbit	r6, r6
 80017d2:	6863      	ldr	r3, [r4, #4]
 80017d4:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 80017d8:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 80017dc:	fab6 f686 	clz	r6, r6
 80017e0:	fa03 f10b 	lsl.w	r1, r3, fp
 80017e4:	6923      	ldr	r3, [r4, #16]
 80017e6:	fa20 f009 	lsr.w	r0, r0, r9
 80017ea:	fa22 f20c 	lsr.w	r2, r2, ip
 80017ee:	fa03 f30a 	lsl.w	r3, r3, sl
 80017f2:	430b      	orrs	r3, r1
 80017f4:	fa00 f108 	lsl.w	r1, r0, r8
 80017f8:	4319      	orrs	r1, r3
 80017fa:	fa02 f306 	lsl.w	r3, r2, r6
 80017fe:	430b      	orrs	r3, r1
 8001800:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
    }  
         
    /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001804:	01ba      	lsls	r2, r7, #6
 8001806:	d526      	bpl.n	8001856 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8001808:	f647 7ec0 	movw	lr, #32704	; 0x7fc0
 800180c:	fa9e feae 	rbit	lr, lr
 8001810:	f44f 3040 	mov.w	r0, #196608	; 0x30000
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001814:	fabe fe8e 	clz	lr, lr
 8001818:	fa90 f0a0 	rbit	r0, r0
 800181c:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8001820:	fab0 f780 	clz	r7, r0
 8001824:	fa92 f2a2 	rbit	r2, r2
 8001828:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800182c:	fab2 f682 	clz	r6, r2
 8001830:	fa93 f3a3 	rbit	r3, r3
 8001834:	fab3 f183 	clz	r1, r3
 8001838:	6920      	ldr	r0, [r4, #16]
 800183a:	6863      	ldr	r3, [r4, #4]
 800183c:	68e2      	ldr	r2, [r4, #12]
 800183e:	40b8      	lsls	r0, r7
 8001840:	fa03 f30e 	lsl.w	r3, r3, lr
 8001844:	40b2      	lsls	r2, r6
 8001846:	4303      	orrs	r3, r0
 8001848:	431a      	orrs	r2, r3
 800184a:	68a3      	ldr	r3, [r4, #8]
 800184c:	408b      	lsls	r3, r1
 800184e:	4313      	orrs	r3, r2
 8001850:	4a43      	ldr	r2, [pc, #268]	; (8001960 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8001852:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    } 
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001856:	4e42      	ldr	r6, [pc, #264]	; (8001960 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8001858:	6833      	ldr	r3, [r6, #0]
 800185a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800185e:	6033      	str	r3, [r6, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001860:	f7fe fd80 	bl	8000364 <HAL_GetTick>
 8001864:	4607      	mov	r7, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001866:	6833      	ldr	r3, [r6, #0]
 8001868:	011b      	lsls	r3, r3, #4
 800186a:	f53f aede 	bmi.w	800162a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800186e:	f7fe fd79 	bl	8000364 <HAL_GetTick>
 8001872:	1bc0      	subs	r0, r0, r7
 8001874:	2864      	cmp	r0, #100	; 0x64
 8001876:	d9f6      	bls.n	8001866 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8001878:	e5c6      	b.n	8001408 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 800187a:	4d39      	ldr	r5, [pc, #228]	; (8001960 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 800187c:	682b      	ldr	r3, [r5, #0]
 800187e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001882:	602b      	str	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001884:	f7fe fd6e 	bl	8000364 <HAL_GetTick>
 8001888:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800188a:	682b      	ldr	r3, [r5, #0]
 800188c:	009f      	lsls	r7, r3, #2
 800188e:	d45d      	bmi.n	800194c <HAL_RCCEx_PeriphCLKConfig+0x600>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001890:	6825      	ldr	r5, [r4, #0]
 8001892:	032e      	lsls	r6, r5, #12
 8001894:	d460      	bmi.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8001896:	02e8      	lsls	r0, r5, #11
 8001898:	d464      	bmi.n	8001964 <HAL_RCCEx_PeriphCLKConfig+0x618>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800189a:	02a9      	lsls	r1, r5, #10
 800189c:	f100 80ad 	bmi.w	80019fa <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80018a0:	072a      	lsls	r2, r5, #28
 80018a2:	d545      	bpl.n	8001930 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 80018a4:	4f2e      	ldr	r7, [pc, #184]	; (8001960 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 80018a6:	f04f 6570 	mov.w	r5, #251658240	; 0xf000000
 80018aa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80018ae:	fa95 fca5 	rbit	ip, r5
 80018b2:	f44f 3640 	mov.w	r6, #196608	; 0x30000
 80018b6:	fabc fc8c 	clz	ip, ip
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 80018ba:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80018be:	fa96 f8a6 	rbit	r8, r6
 80018c2:	f647 79c0 	movw	r9, #32704	; 0x7fc0
 80018c6:	fab8 f888 	clz	r8, r8
 80018ca:	fa99 f9a9 	rbit	r9, r9
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80018ce:	fab9 f989 	clz	r9, r9
 80018d2:	fa96 f6a6 	rbit	r6, r6
 80018d6:	fab6 f686 	clz	r6, r6
 80018da:	fa95 f5a5 	rbit	r5, r5
 80018de:	f04f 4ee0 	mov.w	lr, #1879048192	; 0x70000000
 80018e2:	fab5 f585 	clz	r5, r5
 80018e6:	fa9e feae 	rbit	lr, lr
 80018ea:	6963      	ldr	r3, [r4, #20]
 80018ec:	fabe fe8e 	clz	lr, lr
 80018f0:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 80018f4:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80018f8:	fa03 f109 	lsl.w	r1, r3, r9
 80018fc:	69e3      	ldr	r3, [r4, #28]
 80018fe:	fa20 f008 	lsr.w	r0, r0, r8
 8001902:	fa22 f20c 	lsr.w	r2, r2, ip
 8001906:	fa03 fe0e 	lsl.w	lr, r3, lr
 800190a:	fa02 f305 	lsl.w	r3, r2, r5
 800190e:	ea41 0e0e 	orr.w	lr, r1, lr
 8001912:	fa00 f106 	lsl.w	r1, r0, r6
 8001916:	ea4e 0101 	orr.w	r1, lr, r1
 800191a:	430b      	orrs	r3, r1
 800191c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001920:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001924:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001928:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800192a:	4313      	orrs	r3, r2
 800192c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001930:	4c0b      	ldr	r4, [pc, #44]	; (8001960 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8001932:	6823      	ldr	r3, [r4, #0]
 8001934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001938:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800193a:	f7fe fd13 	bl	8000364 <HAL_GetTick>
 800193e:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001940:	6823      	ldr	r3, [r4, #0]
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	f140 809c 	bpl.w	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x734>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001948:	2000      	movs	r0, #0
 800194a:	e0a0      	b.n	8001a8e <HAL_RCCEx_PeriphCLKConfig+0x742>
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800194c:	f7fe fd0a 	bl	8000364 <HAL_GetTick>
 8001950:	1b80      	subs	r0, r0, r6
 8001952:	2864      	cmp	r0, #100	; 0x64
 8001954:	d999      	bls.n	800188a <HAL_RCCEx_PeriphCLKConfig+0x53e>
 8001956:	e557      	b.n	8001408 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001958:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800195a:	b133      	cbz	r3, 800196a <HAL_RCCEx_PeriphCLKConfig+0x61e>
 800195c:	e79b      	b.n	8001896 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001964:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001966:	2b00      	cmp	r3, #0
 8001968:	d197      	bne.n	800189a <HAL_RCCEx_PeriphCLKConfig+0x54e>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 800196a:	4f4a      	ldr	r7, [pc, #296]	; (8001a94 <HAL_RCCEx_PeriphCLKConfig+0x748>)
 800196c:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
 8001970:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001974:	fa9c f9ac 	rbit	r9, ip
 8001978:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 800197c:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8001980:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001984:	fa96 fea6 	rbit	lr, r6
 8001988:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 800198c:	fabe fe8e 	clz	lr, lr
 8001990:	fa9a faaa 	rbit	sl, sl
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001994:	faba fa8a 	clz	sl, sl
 8001998:	fa9c fcac 	rbit	ip, ip
 800199c:	f04f 6870 	mov.w	r8, #251658240	; 0xf000000
 80019a0:	fabc fc8c 	clz	ip, ip
 80019a4:	fa98 f8a8 	rbit	r8, r8
 80019a8:	fab8 f888 	clz	r8, r8
 80019ac:	fa96 f6a6 	rbit	r6, r6
 80019b0:	69a1      	ldr	r1, [r4, #24]
 80019b2:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 80019b6:	6963      	ldr	r3, [r4, #20]
 80019b8:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 80019bc:	fa01 f808 	lsl.w	r8, r1, r8
 80019c0:	fa20 f009 	lsr.w	r0, r0, r9
 80019c4:	fa03 f30a 	lsl.w	r3, r3, sl
 80019c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80019cc:	fab6 f686 	clz	r6, r6
 80019d0:	fa00 f10c 	lsl.w	r1, r0, ip
 80019d4:	ea43 0308 	orr.w	r3, r3, r8
 80019d8:	4319      	orrs	r1, r3
 80019da:	fa02 f306 	lsl.w	r3, r2, r6
 80019de:	430b      	orrs	r3, r1
 80019e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80019e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019e8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80019ea:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80019ee:	3a01      	subs	r2, #1
 80019f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80019f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80019f8:	e74f      	b.n	800189a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80019fa:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80019fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001a00:	f47f af4e 	bne.w	80018a0 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8001a04:	4f23      	ldr	r7, [pc, #140]	; (8001a94 <HAL_RCCEx_PeriphCLKConfig+0x748>)
 8001a06:	f04f 6c70 	mov.w	ip, #251658240	; 0xf000000
 8001a0a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001a0e:	fa9c f9ac 	rbit	r9, ip
 8001a12:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8001a16:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8001a1a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001a1e:	fa96 fea6 	rbit	lr, r6
 8001a22:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 8001a26:	fabe fe8e 	clz	lr, lr
 8001a2a:	fa9a faaa 	rbit	sl, sl
 8001a2e:	f44f 3840 	mov.w	r8, #196608	; 0x30000
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001a32:	faba fa8a 	clz	sl, sl
 8001a36:	fa98 f8a8 	rbit	r8, r8
 8001a3a:	fab8 f888 	clz	r8, r8
 8001a3e:	fa9c fcac 	rbit	ip, ip
 8001a42:	fabc fc8c 	clz	ip, ip
 8001a46:	fa96 f6a6 	rbit	r6, r6
 8001a4a:	6a21      	ldr	r1, [r4, #32]
 8001a4c:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8001a50:	6963      	ldr	r3, [r4, #20]
 8001a52:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8001a56:	fa01 f808 	lsl.w	r8, r1, r8
 8001a5a:	fa20 f009 	lsr.w	r0, r0, r9
 8001a5e:	fa03 f30a 	lsl.w	r3, r3, sl
 8001a62:	fab6 f686 	clz	r6, r6
 8001a66:	fa00 f10c 	lsl.w	r1, r0, ip
 8001a6a:	fa22 f20e 	lsr.w	r2, r2, lr
 8001a6e:	ea43 0308 	orr.w	r3, r3, r8
 8001a72:	4319      	orrs	r1, r3
 8001a74:	fa02 f306 	lsl.w	r3, r2, r6
 8001a78:	430b      	orrs	r3, r1
 8001a7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001a7e:	e70f      	b.n	80018a0 <HAL_RCCEx_PeriphCLKConfig+0x554>
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001a80:	f7fe fc70 	bl	8000364 <HAL_GetTick>
 8001a84:	1b40      	subs	r0, r0, r5
 8001a86:	2864      	cmp	r0, #100	; 0x64
 8001a88:	f67f af5a 	bls.w	8001940 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8001a8c:	e4bc      	b.n	8001408 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 8001a8e:	b003      	add	sp, #12
 8001a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a94:	40023800 	.word	0x40023800

08001a98 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a98:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a9a:	4604      	mov	r4, r0
 8001a9c:	2800      	cmp	r0, #0
 8001a9e:	d04f      	beq.n	8001b40 <HAL_SPI_Init+0xa8>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001aa4:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8001aa8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001aac:	b91b      	cbnz	r3, 8001ab6 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001aae:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ab2:	f001 fa1f 	bl	8002ef4 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ab6:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ab8:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001aba:	68e2      	ldr	r2, [r4, #12]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001abc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ac0:	680b      	ldr	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ac2:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ac6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001aca:	600b      	str	r3, [r1, #0]
 8001acc:	f04f 0300 	mov.w	r3, #0

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ad0:	d903      	bls.n	8001ada <HAL_SPI_Init+0x42>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001ad2:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001ad4:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8001ad8:	e001      	b.n	8001ade <HAL_SPI_Init+0x46>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001ada:	f44f 5080 	mov.w	r0, #4096	; 0x1000

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ade:	bf18      	it	ne
 8001ae0:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001ae2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ae4:	b92b      	cbnz	r3, 8001af2 <HAL_SPI_Init+0x5a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ae6:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001aea:	bf8c      	ite	hi
 8001aec:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001aee:	2301      	movls	r3, #1
 8001af0:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001af2:	68a5      	ldr	r5, [r4, #8]
 8001af4:	6866      	ldr	r6, [r4, #4]
 8001af6:	69a3      	ldr	r3, [r4, #24]
 8001af8:	432e      	orrs	r6, r5
 8001afa:	6925      	ldr	r5, [r4, #16]
 8001afc:	432e      	orrs	r6, r5
 8001afe:	6965      	ldr	r5, [r4, #20]
 8001b00:	432e      	orrs	r6, r5
 8001b02:	69e5      	ldr	r5, [r4, #28]
 8001b04:	432e      	orrs	r6, r5
 8001b06:	6a25      	ldr	r5, [r4, #32]
 8001b08:	432e      	orrs	r6, r5
 8001b0a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8001b0c:	432e      	orrs	r6, r5
 8001b0e:	f403 7500 	and.w	r5, r3, #512	; 0x200
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001b12:	0c1b      	lsrs	r3, r3, #16
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001b14:	4335      	orrs	r5, r6
 8001b16:	600d      	str	r5, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001b18:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001b1a:	432a      	orrs	r2, r5
 8001b1c:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001b1e:	4315      	orrs	r5, r2
 8001b20:	f003 0204 	and.w	r2, r3, #4
 8001b24:	ea45 0302 	orr.w	r3, r5, r2
 8001b28:	4303      	orrs	r3, r0
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b2a:	2000      	movs	r0, #0
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001b2c:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b2e:	69cb      	ldr	r3, [r1, #28]
 8001b30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001b34:	61cb      	str	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 8001b36:	2301      	movs	r3, #1
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b38:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001b3a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 8001b3e:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 8001b40:	2001      	movs	r0, #1

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
}
 8001b42:	bd70      	pop	{r4, r5, r6, pc}

08001b44 <HAL_SPI_ErrorCallback>:
 8001b44:	4770      	bx	lr
	...

08001b48 <HAL_SPI_IRQHandler>:
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
  uint32_t itsource = hspi->Instance->CR2;
 8001b48:	6803      	ldr	r3, [r0, #0]
 8001b4a:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8001b4c:	689a      	ldr	r2, [r3, #8]
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001b4e:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
  uint32_t itflag   = hspi->Instance->SR;

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8001b50:	f002 0541 	and.w	r5, r2, #65	; 0x41
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001b54:	b085      	sub	sp, #20
 8001b56:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
  uint32_t itflag   = hspi->Instance->SR;

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8001b58:	2d01      	cmp	r5, #1
 8001b5a:	d103      	bne.n	8001b64 <HAL_SPI_IRQHandler+0x1c>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8001b5c:	064d      	lsls	r5, r1, #25
 8001b5e:	d501      	bpl.n	8001b64 <HAL_SPI_IRQHandler+0x1c>
  {
    hspi->RxISR(hspi);
 8001b60:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001b62:	e005      	b.n	8001b70 <HAL_SPI_IRQHandler+0x28>
    return;
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8001b64:	0795      	lsls	r5, r2, #30
 8001b66:	d505      	bpl.n	8001b74 <HAL_SPI_IRQHandler+0x2c>
 8001b68:	0608      	lsls	r0, r1, #24
 8001b6a:	d503      	bpl.n	8001b74 <HAL_SPI_IRQHandler+0x2c>
  {
    hspi->TxISR(hspi);
 8001b6c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001b6e:	4620      	mov	r0, r4
 8001b70:	4798      	blx	r3
    return;
 8001b72:	e056      	b.n	8001c22 <HAL_SPI_IRQHandler+0xda>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8001b74:	f412 7fb0 	tst.w	r2, #352	; 0x160
 8001b78:	d053      	beq.n	8001c22 <HAL_SPI_IRQHandler+0xda>
 8001b7a:	068d      	lsls	r5, r1, #26
 8001b7c:	d551      	bpl.n	8001c22 <HAL_SPI_IRQHandler+0xda>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((itflag & SPI_FLAG_OVR) != RESET)
 8001b7e:	0650      	lsls	r0, r2, #25
 8001b80:	d516      	bpl.n	8001bb0 <HAL_SPI_IRQHandler+0x68>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001b82:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8001b86:	2500      	movs	r5, #0
 8001b88:	2803      	cmp	r0, #3
 8001b8a:	d00a      	beq.n	8001ba2 <HAL_SPI_IRQHandler+0x5a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001b8c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001b8e:	f040 0004 	orr.w	r0, r0, #4
 8001b92:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b94:	9500      	str	r5, [sp, #0]
 8001b96:	68d8      	ldr	r0, [r3, #12]
 8001b98:	9000      	str	r0, [sp, #0]
 8001b9a:	6898      	ldr	r0, [r3, #8]
 8001b9c:	9000      	str	r0, [sp, #0]
 8001b9e:	9800      	ldr	r0, [sp, #0]
 8001ba0:	e006      	b.n	8001bb0 <HAL_SPI_IRQHandler+0x68>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ba2:	9501      	str	r5, [sp, #4]
 8001ba4:	68da      	ldr	r2, [r3, #12]
 8001ba6:	9201      	str	r2, [sp, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	9301      	str	r3, [sp, #4]
 8001bac:	9b01      	ldr	r3, [sp, #4]
        return;
 8001bae:	e038      	b.n	8001c22 <HAL_SPI_IRQHandler+0xda>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((itflag & SPI_FLAG_MODF) != RESET)
 8001bb0:	0695      	lsls	r5, r2, #26
 8001bb2:	d50c      	bpl.n	8001bce <HAL_SPI_IRQHandler+0x86>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001bb4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001bb6:	f040 0001 	orr.w	r0, r0, #1
 8001bba:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	9002      	str	r0, [sp, #8]
 8001bc0:	6898      	ldr	r0, [r3, #8]
 8001bc2:	9002      	str	r0, [sp, #8]
 8001bc4:	6818      	ldr	r0, [r3, #0]
 8001bc6:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8001bca:	6018      	str	r0, [r3, #0]
 8001bcc:	9802      	ldr	r0, [sp, #8]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((itflag & SPI_FLAG_FRE) != RESET)
 8001bce:	05d0      	lsls	r0, r2, #23
 8001bd0:	d508      	bpl.n	8001be4 <HAL_SPI_IRQHandler+0x9c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001bd2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001bd4:	f042 0208 	orr.w	r2, r2, #8
 8001bd8:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	9203      	str	r2, [sp, #12]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	9203      	str	r2, [sp, #12]
 8001be2:	9a03      	ldr	r2, [sp, #12]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001be4:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001be6:	b1e2      	cbz	r2, 8001c22 <HAL_SPI_IRQHandler+0xda>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001bee:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001bf6:	078a      	lsls	r2, r1, #30
 8001bf8:	d010      	beq.n	8001c1c <HAL_SPI_IRQHandler+0xd4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001bfa:	685a      	ldr	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001bfc:	6da0      	ldr	r0, [r4, #88]	; 0x58

      hspi->State = HAL_SPI_STATE_READY;
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001bfe:	f022 0203 	bic.w	r2, r2, #3
 8001c02:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001c04:	b118      	cbz	r0, 8001c0e <HAL_SPI_IRQHandler+0xc6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001c06:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <HAL_SPI_IRQHandler+0xe0>)
 8001c08:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8001c0a:	f7fe ff14 	bl	8000a36 <HAL_DMA_Abort_IT>
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001c0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001c10:	b138      	cbz	r0, 8001c22 <HAL_SPI_IRQHandler+0xda>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001c12:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <HAL_SPI_IRQHandler+0xe0>)
 8001c14:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8001c16:	f7fe ff0e 	bl	8000a36 <HAL_DMA_Abort_IT>
 8001c1a:	e002      	b.n	8001c22 <HAL_SPI_IRQHandler+0xda>
        }
      }
      else
      {
        /* Call user error callback */
        HAL_SPI_ErrorCallback(hspi);
 8001c1c:	4620      	mov	r0, r4
 8001c1e:	f7ff ff91 	bl	8001b44 <HAL_SPI_ErrorCallback>
      }
    }
    return;
  }
}
 8001c22:	b005      	add	sp, #20
 8001c24:	bd30      	pop	{r4, r5, pc}
 8001c26:	bf00      	nop
 8001c28:	08001c2d 	.word	0x08001c2d

08001c2c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001c2c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c2e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8001c30:	2300      	movs	r3, #0
 8001c32:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8001c36:	87c3      	strh	r3, [r0, #62]	; 0x3e

  HAL_SPI_ErrorCallback(hspi);
 8001c38:	f7ff ff84 	bl	8001b44 <HAL_SPI_ErrorCallback>
 8001c3c:	bd08      	pop	{r3, pc}
	...

08001c40 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001c40:	4a2e      	ldr	r2, [pc, #184]	; (8001cfc <TIM_Base_SetConfig+0xbc>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8001c42:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001c44:	4290      	cmp	r0, r2
 8001c46:	d012      	beq.n	8001c6e <TIM_Base_SetConfig+0x2e>
 8001c48:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001c4c:	d00f      	beq.n	8001c6e <TIM_Base_SetConfig+0x2e>
 8001c4e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001c52:	4290      	cmp	r0, r2
 8001c54:	d00b      	beq.n	8001c6e <TIM_Base_SetConfig+0x2e>
 8001c56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c5a:	4290      	cmp	r0, r2
 8001c5c:	d007      	beq.n	8001c6e <TIM_Base_SetConfig+0x2e>
 8001c5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c62:	4290      	cmp	r0, r2
 8001c64:	d003      	beq.n	8001c6e <TIM_Base_SetConfig+0x2e>
 8001c66:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001c6a:	4290      	cmp	r0, r2
 8001c6c:	d118      	bne.n	8001ca0 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001c6e:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001c74:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001c76:	4a21      	ldr	r2, [pc, #132]	; (8001cfc <TIM_Base_SetConfig+0xbc>)
 8001c78:	4290      	cmp	r0, r2
 8001c7a:	d037      	beq.n	8001cec <TIM_Base_SetConfig+0xac>
 8001c7c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001c80:	d034      	beq.n	8001cec <TIM_Base_SetConfig+0xac>
 8001c82:	4a1f      	ldr	r2, [pc, #124]	; (8001d00 <TIM_Base_SetConfig+0xc0>)
 8001c84:	4290      	cmp	r0, r2
 8001c86:	d031      	beq.n	8001cec <TIM_Base_SetConfig+0xac>
 8001c88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c8c:	4290      	cmp	r0, r2
 8001c8e:	d02d      	beq.n	8001cec <TIM_Base_SetConfig+0xac>
 8001c90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c94:	4290      	cmp	r0, r2
 8001c96:	d029      	beq.n	8001cec <TIM_Base_SetConfig+0xac>
 8001c98:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001c9c:	4290      	cmp	r0, r2
 8001c9e:	d025      	beq.n	8001cec <TIM_Base_SetConfig+0xac>
 8001ca0:	4a18      	ldr	r2, [pc, #96]	; (8001d04 <TIM_Base_SetConfig+0xc4>)
 8001ca2:	4290      	cmp	r0, r2
 8001ca4:	d022      	beq.n	8001cec <TIM_Base_SetConfig+0xac>
 8001ca6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001caa:	4290      	cmp	r0, r2
 8001cac:	d01e      	beq.n	8001cec <TIM_Base_SetConfig+0xac>
 8001cae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cb2:	4290      	cmp	r0, r2
 8001cb4:	d01a      	beq.n	8001cec <TIM_Base_SetConfig+0xac>
 8001cb6:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001cba:	4290      	cmp	r0, r2
 8001cbc:	d016      	beq.n	8001cec <TIM_Base_SetConfig+0xac>
 8001cbe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cc2:	4290      	cmp	r0, r2
 8001cc4:	d012      	beq.n	8001cec <TIM_Base_SetConfig+0xac>
 8001cc6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cca:	4290      	cmp	r0, r2
 8001ccc:	d00e      	beq.n	8001cec <TIM_Base_SetConfig+0xac>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8001cce:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cd0:	688b      	ldr	r3, [r1, #8]
 8001cd2:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001cd4:	680b      	ldr	r3, [r1, #0]
 8001cd6:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001cd8:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <TIM_Base_SetConfig+0xbc>)
 8001cda:	4298      	cmp	r0, r3
 8001cdc:	d00b      	beq.n	8001cf6 <TIM_Base_SetConfig+0xb6>
 8001cde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ce2:	4298      	cmp	r0, r3
 8001ce4:	d007      	beq.n	8001cf6 <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	6143      	str	r3, [r0, #20]
}
 8001cea:	4770      	bx	lr
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cf0:	68ca      	ldr	r2, [r1, #12]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	e7eb      	b.n	8001cce <TIM_Base_SetConfig+0x8e>
  TIMx->PSC = (uint32_t)Structure->Prescaler;
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001cf6:	690b      	ldr	r3, [r1, #16]
 8001cf8:	6303      	str	r3, [r0, #48]	; 0x30
 8001cfa:	e7f4      	b.n	8001ce6 <TIM_Base_SetConfig+0xa6>
 8001cfc:	40010000 	.word	0x40010000
 8001d00:	40000400 	.word	0x40000400
 8001d04:	40014000 	.word	0x40014000

08001d08 <HAL_TIM_PWM_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d08:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001d0a:	4604      	mov	r4, r0
 8001d0c:	b1a0      	cbz	r0, 8001d38 <HAL_TIM_PWM_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001d0e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001d12:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d16:	b91b      	cbnz	r3, 8001d20 <HAL_TIM_PWM_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;  
 8001d18:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d1c:	f001 f93e 	bl	8002f9c <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 8001d20:	2302      	movs	r3, #2
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001d22:	6820      	ldr	r0, [r4, #0]
 8001d24:	1d21      	adds	r1, r4, #4
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 8001d26:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001d2a:	f7ff ff89 	bl	8001c40 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001d2e:	2301      	movs	r3, #1
  
  return HAL_OK;
 8001d30:	2000      	movs	r0, #0
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001d32:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8001d36:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8001d38:	2001      	movs	r0, #1
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}  
 8001d3a:	bd10      	pop	{r4, pc}

08001d3c <HAL_TIM_IC_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001d3c:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001d3e:	4604      	mov	r4, r0
 8001d40:	b1a0      	cbz	r0, 8001d6c <HAL_TIM_IC_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision)); 

  if(htim->State == HAL_TIM_STATE_RESET)
 8001d42:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001d46:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d4a:	b91b      	cbnz	r3, 8001d54 <HAL_TIM_IC_Init+0x18>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;   
 8001d4c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001d50:	f001 f8fe 	bl	8002f50 <HAL_TIM_IC_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 8001d54:	2302      	movs	r3, #2
  
  /* Init the base time for the input capture */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001d56:	6820      	ldr	r0, [r4, #0]
 8001d58:	1d21      	adds	r1, r4, #4
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 8001d5a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Init the base time for the input capture */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001d5e:	f7ff ff6f 	bl	8001c40 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001d62:	2301      	movs	r3, #1
  
  return HAL_OK;
 8001d64:	2000      	movs	r0, #0
  
  /* Init the base time for the input capture */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001d66:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8001d6a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8001d6c:	2001      	movs	r0, #1
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8001d6e:	bd10      	pop	{r4, pc}

08001d70 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d70:	6a03      	ldr	r3, [r0, #32]
 8001d72:	f023 0301 	bic.w	r3, r3, #1
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001d76:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d78:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d7a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001d7c:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d7e:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d80:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001d82:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8001d86:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d8a:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001d8c:	f023 0502 	bic.w	r5, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001d90:	688b      	ldr	r3, [r1, #8]
 8001d92:	432b      	orrs	r3, r5

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001d94:	4d0c      	ldr	r5, [pc, #48]	; (8001dc8 <TIM_OC1_SetConfig+0x58>)
 8001d96:	42a8      	cmp	r0, r5
 8001d98:	d009      	beq.n	8001dae <TIM_OC1_SetConfig+0x3e>
 8001d9a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d9e:	42a8      	cmp	r0, r5
 8001da0:	d005      	beq.n	8001dae <TIM_OC1_SetConfig+0x3e>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001da2:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001da4:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001da6:	6184      	str	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001da8:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001daa:	6203      	str	r3, [r0, #32]
} 
 8001dac:	bd70      	pop	{r4, r5, r6, pc}
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001dae:	68cd      	ldr	r5, [r1, #12]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001db0:	f023 0308 	bic.w	r3, r3, #8
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001db4:	694e      	ldr	r6, [r1, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001db6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001dba:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001dbc:	698d      	ldr	r5, [r1, #24]
 8001dbe:	4335      	orrs	r5, r6
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001dc0:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001dc4:	432a      	orrs	r2, r5
 8001dc6:	e7ec      	b.n	8001da2 <TIM_OC1_SetConfig+0x32>
 8001dc8:	40010000 	.word	0x40010000

08001dcc <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001dcc:	6a03      	ldr	r3, [r0, #32]
 8001dce:	f023 0310 	bic.w	r3, r3, #16
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001dd2:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001dd4:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8001dd6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001dd8:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001dda:	6984      	ldr	r4, [r0, #24]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001ddc:	f023 0320 	bic.w	r3, r3, #32
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001de0:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001de2:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8001de6:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001dea:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8001dee:	688d      	ldr	r5, [r1, #8]
 8001df0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001df4:	4d0e      	ldr	r5, [pc, #56]	; (8001e30 <TIM_OC2_SetConfig+0x64>)
 8001df6:	42a8      	cmp	r0, r5
 8001df8:	d009      	beq.n	8001e0e <TIM_OC2_SetConfig+0x42>
 8001dfa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001dfe:	42a8      	cmp	r0, r5
 8001e00:	d005      	beq.n	8001e0e <TIM_OC2_SetConfig+0x42>
    tmpcr2 |= (OC_Config->OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e02:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001e04:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e06:	6184      	str	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001e08:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e0a:	6203      	str	r3, [r0, #32]
}
 8001e0c:	bd30      	pop	{r4, r5, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8001e0e:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001e10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001e14:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8001e18:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8001e1c:	694d      	ldr	r5, [r1, #20]
 8001e1e:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001e22:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001e24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001e28:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8001e2c:	e7e9      	b.n	8001e02 <TIM_OC2_SetConfig+0x36>
 8001e2e:	bf00      	nop
 8001e30:	40010000 	.word	0x40010000

08001e34 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e34:	6a03      	ldr	r3, [r0, #32]
 8001e36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e3a:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e3c:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e3e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001e40:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e42:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001e44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e48:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001e4a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8001e4e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e52:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8001e54:	688d      	ldr	r5, [r1, #8]
 8001e56:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001e5a:	4d0e      	ldr	r5, [pc, #56]	; (8001e94 <TIM_OC3_SetConfig+0x60>)
 8001e5c:	42a8      	cmp	r0, r5
 8001e5e:	d009      	beq.n	8001e74 <TIM_OC3_SetConfig+0x40>
 8001e60:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001e64:	42a8      	cmp	r0, r5
 8001e66:	d005      	beq.n	8001e74 <TIM_OC3_SetConfig+0x40>
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e68:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001e6a:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001e6c:	61c4      	str	r4, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001e6e:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e70:	6203      	str	r3, [r0, #32]
}
 8001e72:	bd30      	pop	{r4, r5, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8001e74:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001e76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001e7a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8001e7e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8001e82:	694d      	ldr	r5, [r1, #20]
 8001e84:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8001e88:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001e8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8001e8e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8001e92:	e7e9      	b.n	8001e68 <TIM_OC3_SetConfig+0x34>
 8001e94:	40010000 	.word	0x40010000

08001e98 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001e98:	6a03      	ldr	r3, [r0, #32]
 8001e9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e9e:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001ea0:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ea2:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001ea4:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001ea6:	69c3      	ldr	r3, [r0, #28]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001ea8:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001eac:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001eae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eb2:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001eb6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8001eba:	688d      	ldr	r5, [r1, #8]
 8001ebc:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001ec0:	4d09      	ldr	r5, [pc, #36]	; (8001ee8 <TIM_OC4_SetConfig+0x50>)
 8001ec2:	42a8      	cmp	r0, r5
 8001ec4:	d009      	beq.n	8001eda <TIM_OC4_SetConfig+0x42>
 8001ec6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001eca:	42a8      	cmp	r0, r5
 8001ecc:	d005      	beq.n	8001eda <TIM_OC4_SetConfig+0x42>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ece:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8001ed0:	61c3      	str	r3, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001ed2:	684b      	ldr	r3, [r1, #4]
 8001ed4:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ed6:	6204      	str	r4, [r0, #32]
}
 8001ed8:	bd30      	pop	{r4, r5, pc}
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001eda:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001ede:	694d      	ldr	r5, [r1, #20]
 8001ee0:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8001ee4:	e7f3      	b.n	8001ece <TIM_OC4_SetConfig+0x36>
 8001ee6:	bf00      	nop
 8001ee8:	40010000 	.word	0x40010000

08001eec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.  
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8001eec:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001eee:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001ef0:	4e1a      	ldr	r6, [pc, #104]	; (8001f5c <TIM_TI1_SetConfig+0x70>)
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ef2:	f024 0401 	bic.w	r4, r4, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001ef6:	42b0      	cmp	r0, r6
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ef8:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001efa:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001efc:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001efe:	d01a      	beq.n	8001f36 <TIM_TI1_SetConfig+0x4a>
 8001f00:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001f04:	d017      	beq.n	8001f36 <TIM_TI1_SetConfig+0x4a>
 8001f06:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8001f0a:	42b0      	cmp	r0, r6
 8001f0c:	d013      	beq.n	8001f36 <TIM_TI1_SetConfig+0x4a>
 8001f0e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001f12:	42b0      	cmp	r0, r6
 8001f14:	d00f      	beq.n	8001f36 <TIM_TI1_SetConfig+0x4a>
 8001f16:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001f1a:	42b0      	cmp	r0, r6
 8001f1c:	d00b      	beq.n	8001f36 <TIM_TI1_SetConfig+0x4a>
 8001f1e:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8001f22:	42b0      	cmp	r0, r6
 8001f24:	d007      	beq.n	8001f36 <TIM_TI1_SetConfig+0x4a>
 8001f26:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8001f2a:	42b0      	cmp	r0, r6
 8001f2c:	d003      	beq.n	8001f36 <TIM_TI1_SetConfig+0x4a>
 8001f2e:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8001f32:	42b0      	cmp	r0, r6
 8001f34:	d10f      	bne.n	8001f56 <TIM_TI1_SetConfig+0x6a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001f36:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8001f3a:	4322      	orrs	r2, r4
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4) & TIM_CCMR1_IC1F);
 8001f3c:	011b      	lsls	r3, r3, #4
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f3e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4) & TIM_CCMR1_IC1F);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f42:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001f46:	f001 010a 	and.w	r1, r1, #10
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4) & TIM_CCMR1_IC1F);
 8001f4a:	b2db      	uxtb	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001f4c:	430d      	orrs	r5, r1
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4) & TIM_CCMR1_IC1F);
 8001f4e:	431a      	orrs	r2, r3
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f50:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001f52:	6205      	str	r5, [r0, #32]
}
 8001f54:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
    tmpccmr1 |= TIM_ICSelection;
  } 
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001f56:	f044 0201 	orr.w	r2, r4, #1
 8001f5a:	e7ef      	b.n	8001f3c <TIM_TI1_SetConfig+0x50>
 8001f5c:	40010000 	.word	0x40010000

08001f60 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef* sConfig, uint32_t Channel)
{
 8001f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
  
  __HAL_LOCK(htim);
 8001f62:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef* sConfig, uint32_t Channel)
{
 8001f66:	4605      	mov	r5, r0
 8001f68:	460c      	mov	r4, r1
 8001f6a:	2002      	movs	r0, #2
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
  
  __HAL_LOCK(htim);
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d07f      	beq.n	8002070 <HAL_TIM_IC_ConfigChannel+0x110>
 8001f70:	2301      	movs	r3, #1
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001f72:	f885 0039 	strb.w	r0, [r5, #57]	; 0x39
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
  
  __HAL_LOCK(htim);
 8001f76:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
  
  if (Channel == TIM_CHANNEL_1)
 8001f7a:	b972      	cbnz	r2, 8001f9a <HAL_TIM_IC_ConfigChannel+0x3a>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001f7c:	68cb      	ldr	r3, [r1, #12]
 8001f7e:	6828      	ldr	r0, [r5, #0]
 8001f80:	c906      	ldmia	r1, {r1, r2}
 8001f82:	f7ff ffb3 	bl	8001eec <TIM_TI1_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001f86:	682b      	ldr	r3, [r5, #0]
 8001f88:	699a      	ldr	r2, [r3, #24]
 8001f8a:	f022 020c 	bic.w	r2, r2, #12
 8001f8e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001f90:	68a2      	ldr	r2, [r4, #8]
 8001f92:	6999      	ldr	r1, [r3, #24]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	619a      	str	r2, [r3, #24]
 8001f98:	e064      	b.n	8002064 <HAL_TIM_IC_ConfigChannel+0x104>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001f9a:	2a04      	cmp	r2, #4
 8001f9c:	688e      	ldr	r6, [r1, #8]
 8001f9e:	682b      	ldr	r3, [r5, #0]
 8001fa0:	68e0      	ldr	r0, [r4, #12]
 8001fa2:	e891 4002 	ldmia.w	r1, {r1, lr}
 8001fa6:	d11f      	bne.n	8001fe8 <HAL_TIM_IC_ConfigChannel+0x88>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fa8:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
  tmpccmr1 |= (TIM_ICSelection << 8);

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12) & TIM_CCMR1_IC2F);
 8001faa:	0300      	lsls	r0, r0, #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001fac:	0109      	lsls	r1, r1, #4
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fae:	f022 0210 	bic.w	r2, r2, #16
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
  tmpccmr1 |= (TIM_ICSelection << 8);

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12) & TIM_CCMR1_IC2F);
 8001fb2:	b280      	uxth	r0, r0

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001fb4:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fba:	699c      	ldr	r4, [r3, #24]
  tmpccer = TIMx->CCER;
 8001fbc:	6a1f      	ldr	r7, [r3, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001fbe:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8);
 8001fc2:	ea44 220e 	orr.w	r2, r4, lr, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001fc6:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12) & TIM_CCMR1_IC2F);
 8001fca:	4310      	orrs	r0, r2

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001fcc:	f027 02a0 	bic.w	r2, r7, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001fd0:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001fd2:	6198      	str	r0, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fd4:	6219      	str	r1, [r3, #32]
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);
               
    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001fd6:	699a      	ldr	r2, [r3, #24]
 8001fd8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001fdc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8);
 8001fde:	699a      	ldr	r2, [r3, #24]
 8001fe0:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001fe4:	619e      	str	r6, [r3, #24]
 8001fe6:	e03d      	b.n	8002064 <HAL_TIM_IC_ConfigChannel+0x104>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001fe8:	2a08      	cmp	r2, #8
{
  uint32_t tmpccmr2 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001fea:	6a1a      	ldr	r2, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8);
  }
  else if (Channel == TIM_CHANNEL_3)
 8001fec:	d11c      	bne.n	8002028 <HAL_TIM_IC_ConfigChannel+0xc8>
{
  uint32_t tmpccmr2 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001fee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
  tmpccmr2 |= TIM_ICSelection;

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4) & TIM_CCMR2_IC3F);
 8001ff2:	0100      	lsls	r0, r0, #4

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001ff4:	0209      	lsls	r1, r1, #8
{
  uint32_t tmpccmr2 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ff6:	621a      	str	r2, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
  tmpccmr2 |= TIM_ICSelection;

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4) & TIM_CCMR2_IC3F);
 8001ff8:	b2c0      	uxtb	r0, r0
  uint32_t tmpccmr2 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
  tmpccmr2 = TIMx->CCMR2;
 8001ffa:	69dc      	ldr	r4, [r3, #28]
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4) & TIM_CCMR2_IC3F);

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001ffc:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  uint32_t tmpccer = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
 8002000:	6a1f      	ldr	r7, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002002:	f024 0403 	bic.w	r4, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 8002006:	ea4e 0204 	orr.w	r2, lr, r4

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800200a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4) & TIM_CCMR2_IC3F);
 800200e:	4310      	orrs	r0, r2

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002010:	f427 6220 	bic.w	r2, r7, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002014:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002016:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer;
 8002018:	6219      	str	r1, [r3, #32]
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800201a:	69da      	ldr	r2, [r3, #28]
 800201c:	f022 020c 	bic.w	r2, r2, #12
 8002020:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002022:	69da      	ldr	r2, [r3, #28]
 8002024:	4316      	orrs	r6, r2
 8002026:	e01c      	b.n	8002062 <HAL_TIM_IC_ConfigChannel+0x102>
{
  uint32_t tmpccmr2 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002028:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
  tmpccmr2 |= (TIM_ICSelection << 8);

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12) & TIM_CCMR2_IC4F);
 800202c:	0300      	lsls	r0, r0, #12

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800202e:	0309      	lsls	r1, r1, #12
{
  uint32_t tmpccmr2 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002030:	621a      	str	r2, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
  tmpccmr2 |= (TIM_ICSelection << 8);

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12) & TIM_CCMR2_IC4F);
 8002032:	b280      	uxth	r0, r0
  uint32_t tmpccmr2 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
  tmpccmr2 = TIMx->CCMR2;
 8002034:	69dc      	ldr	r4, [r3, #28]
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12) & TIM_CCMR2_IC4F);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002036:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  uint32_t tmpccer = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
 800203a:	6a1f      	ldr	r7, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800203c:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8);
 8002040:	ea44 220e 	orr.w	r2, r4, lr, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002044:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12) & TIM_CCMR2_IC4F);
 8002048:	4310      	orrs	r0, r2

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800204a:	f427 4220 	bic.w	r2, r7, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800204e:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002050:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002052:	6219      	str	r1, [r3, #32]
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002054:	69da      	ldr	r2, [r3, #28]
 8002056:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800205a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8);
 800205c:	69da      	ldr	r2, [r3, #28]
 800205e:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8002062:	61de      	str	r6, [r3, #28]
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8002064:	2301      	movs	r3, #1
    
  __HAL_UNLOCK(htim);
 8002066:	2000      	movs	r0, #0

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8);
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8002068:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 800206c:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  
  return HAL_OK; 
}
 8002070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002072 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002072:	2301      	movs	r3, #1

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002074:	408a      	lsls	r2, r1
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002076:	408b      	lsls	r3, r1
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002078:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800207a:	6a04      	ldr	r4, [r0, #32]
 800207c:	ea24 0303 	bic.w	r3, r4, r3
 8002080:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002082:	6a03      	ldr	r3, [r0, #32]
 8002084:	ea42 0103 	orr.w	r1, r2, r3
 8002088:	6201      	str	r1, [r0, #32]
 800208a:	bd10      	pop	{r4, pc}

0800208c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800208c:	b510      	push	{r4, lr}
 800208e:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002090:	2201      	movs	r2, #1
 8002092:	6800      	ldr	r0, [r0, #0]
 8002094:	f7ff ffed 	bl	8002072 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8002098:	6823      	ldr	r3, [r4, #0]
 800209a:	4a08      	ldr	r2, [pc, #32]	; (80020bc <HAL_TIM_PWM_Start+0x30>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d003      	beq.n	80020a8 <HAL_TIM_PWM_Start+0x1c>
 80020a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d103      	bne.n	80020b0 <HAL_TIM_PWM_Start+0x24>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80020a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020ae:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80020b0:	681a      	ldr	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
} 
 80020b2:	2000      	movs	r0, #0
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80020b4:	f042 0201 	orr.w	r2, r2, #1
 80020b8:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
} 
 80020ba:	bd10      	pop	{r4, pc}
 80020bc:	40010000 	.word	0x40010000

080020c0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{ 
 80020c0:	b510      	push	{r4, lr}
 80020c2:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
    
  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80020c4:	2200      	movs	r2, #0
 80020c6:	6800      	ldr	r0, [r0, #0]
 80020c8:	f7ff ffd3 	bl	8002072 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80020cc:	6823      	ldr	r3, [r4, #0]
 80020ce:	4a14      	ldr	r2, [pc, #80]	; (8002120 <HAL_TIM_PWM_Stop+0x60>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d003      	beq.n	80020dc <HAL_TIM_PWM_Stop+0x1c>
 80020d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020d8:	4293      	cmp	r3, r2
 80020da:	d10d      	bne.n	80020f8 <HAL_TIM_PWM_Stop+0x38>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80020dc:	6a19      	ldr	r1, [r3, #32]
 80020de:	f241 1211 	movw	r2, #4369	; 0x1111
 80020e2:	400a      	ands	r2, r1
 80020e4:	b942      	cbnz	r2, 80020f8 <HAL_TIM_PWM_Stop+0x38>
 80020e6:	6a19      	ldr	r1, [r3, #32]
 80020e8:	f240 4244 	movw	r2, #1092	; 0x444
 80020ec:	400a      	ands	r2, r1
 80020ee:	b91a      	cbnz	r2, 80020f8 <HAL_TIM_PWM_Stop+0x38>
 80020f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020f6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80020f8:	6a19      	ldr	r1, [r3, #32]
 80020fa:	f241 1211 	movw	r2, #4369	; 0x1111
 80020fe:	400a      	ands	r2, r1
 8002100:	b942      	cbnz	r2, 8002114 <HAL_TIM_PWM_Stop+0x54>
 8002102:	6a19      	ldr	r1, [r3, #32]
 8002104:	f240 4244 	movw	r2, #1092	; 0x444
 8002108:	400a      	ands	r2, r1
 800210a:	b91a      	cbnz	r2, 8002114 <HAL_TIM_PWM_Stop+0x54>
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	f022 0201 	bic.w	r2, r2, #1
 8002112:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002114:	2301      	movs	r3, #1
  
  /* Return function status */
  return HAL_OK;
} 
 8002116:	2000      	movs	r0, #0
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002118:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
} 
 800211c:	bd10      	pop	{r4, pc}
 800211e:	bf00      	nop
 8002120:	40010000 	.word	0x40010000

08002124 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002124:	6a03      	ldr	r3, [r0, #32]
 8002126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800212a:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800212c:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800212e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002130:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002132:	6d44      	ldr	r4, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002134:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002138:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2; 
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800213a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800213e:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002142:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8002144:	688d      	ldr	r5, [r1, #8]
 8002146:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800214a:	4d09      	ldr	r5, [pc, #36]	; (8002170 <TIM_OC5_SetConfig+0x4c>)
 800214c:	42a8      	cmp	r0, r5
 800214e:	d003      	beq.n	8002158 <TIM_OC5_SetConfig+0x34>
 8002150:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002154:	42a8      	cmp	r0, r5
 8002156:	d104      	bne.n	8002162 <TIM_OC5_SetConfig+0x3e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002158:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 800215c:	694d      	ldr	r5, [r1, #20]
 800215e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002162:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002164:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002166:	6544      	str	r4, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002168:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800216a:	6203      	str	r3, [r0, #32]
 800216c:	bd30      	pop	{r4, r5, pc}
 800216e:	bf00      	nop
 8002170:	40010000 	.word	0x40010000

08002174 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002174:	6a03      	ldr	r3, [r0, #32]
 8002176:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800217a:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800217c:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800217e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002180:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002182:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002184:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx = TIMx->CCMR3;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002188:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2; 
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800218a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800218e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002192:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8002196:	688d      	ldr	r5, [r1, #8]
 8002198:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800219c:	4d08      	ldr	r5, [pc, #32]	; (80021c0 <TIM_OC6_SetConfig+0x4c>)
 800219e:	42a8      	cmp	r0, r5
 80021a0:	d003      	beq.n	80021aa <TIM_OC6_SetConfig+0x36>
 80021a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80021a6:	42a8      	cmp	r0, r5
 80021a8:	d104      	bne.n	80021b4 <TIM_OC6_SetConfig+0x40>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80021aa:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 80021ae:	694d      	ldr	r5, [r1, #20]
 80021b0:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021b4:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80021b6:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80021b8:	684b      	ldr	r3, [r1, #4]
 80021ba:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80021bc:	6202      	str	r2, [r0, #32]
 80021be:	bd30      	pop	{r4, r5, pc}
 80021c0:	40010000 	.word	0x40010000

080021c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 80021c4:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80021c6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 80021ca:	4604      	mov	r4, r0
 80021cc:	460d      	mov	r5, r1
 80021ce:	2002      	movs	r0, #2
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d07b      	beq.n	80022cc <HAL_TIM_PWM_ConfigChannel+0x108>
 80021d4:	2301      	movs	r3, #1
  
  htim->State = HAL_TIM_STATE_BUSY;
    
  switch (Channel)
 80021d6:	2a08      	cmp	r2, #8
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
  
  htim->State = HAL_TIM_STATE_BUSY;
 80021d8:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80021dc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
    
  switch (Channel)
 80021e0:	d03c      	beq.n	800225c <HAL_TIM_PWM_ConfigChannel+0x98>
 80021e2:	d813      	bhi.n	800220c <HAL_TIM_PWM_ConfigChannel+0x48>
 80021e4:	b34a      	cbz	r2, 800223a <HAL_TIM_PWM_ConfigChannel+0x76>
 80021e6:	2a04      	cmp	r2, #4
 80021e8:	d16a      	bne.n	80022c0 <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021ea:	6820      	ldr	r0, [r4, #0]
 80021ec:	f7ff fdee 	bl	8001dcc <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021f0:	6823      	ldr	r3, [r4, #0]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80021f2:	6929      	ldr	r1, [r5, #16]
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021f4:	699a      	ldr	r2, [r3, #24]
 80021f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021fa:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021fc:	699a      	ldr	r2, [r3, #24]
 80021fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002202:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002204:	699a      	ldr	r2, [r3, #24]
 8002206:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800220a:	e025      	b.n	8002258 <HAL_TIM_PWM_ConfigChannel+0x94>
  /* Check input state */
  __HAL_LOCK(htim);
  
  htim->State = HAL_TIM_STATE_BUSY;
    
  switch (Channel)
 800220c:	2a10      	cmp	r2, #16
 800220e:	d036      	beq.n	800227e <HAL_TIM_PWM_ConfigChannel+0xba>
 8002210:	2a14      	cmp	r2, #20
 8002212:	d044      	beq.n	800229e <HAL_TIM_PWM_ConfigChannel+0xda>
 8002214:	2a0c      	cmp	r2, #12
 8002216:	d153      	bne.n	80022c0 <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002218:	6820      	ldr	r0, [r4, #0]
 800221a:	f7ff fe3d 	bl	8001e98 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800221e:	6823      	ldr	r3, [r4, #0]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8002220:	6929      	ldr	r1, [r5, #16]
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002222:	69da      	ldr	r2, [r3, #28]
 8002224:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002228:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800222a:	69da      	ldr	r2, [r3, #28]
 800222c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002230:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8002232:	69da      	ldr	r2, [r3, #28]
 8002234:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002238:	e01f      	b.n	800227a <HAL_TIM_PWM_ConfigChannel+0xb6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800223a:	6820      	ldr	r0, [r4, #0]
 800223c:	f7ff fd98 	bl	8001d70 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002240:	6823      	ldr	r3, [r4, #0]
 8002242:	699a      	ldr	r2, [r3, #24]
 8002244:	f042 0208 	orr.w	r2, r2, #8
 8002248:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800224a:	699a      	ldr	r2, [r3, #24]
 800224c:	f022 0204 	bic.w	r2, r2, #4
 8002250:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002252:	692a      	ldr	r2, [r5, #16]
 8002254:	6999      	ldr	r1, [r3, #24]
 8002256:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002258:	619a      	str	r2, [r3, #24]
    }
    break;
 800225a:	e031      	b.n	80022c0 <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800225c:	6820      	ldr	r0, [r4, #0]
 800225e:	f7ff fde9 	bl	8001e34 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002262:	6823      	ldr	r3, [r4, #0]
 8002264:	69da      	ldr	r2, [r3, #28]
 8002266:	f042 0208 	orr.w	r2, r2, #8
 800226a:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800226c:	69da      	ldr	r2, [r3, #28]
 800226e:	f022 0204 	bic.w	r2, r2, #4
 8002272:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002274:	692a      	ldr	r2, [r5, #16]
 8002276:	69d9      	ldr	r1, [r3, #28]
 8002278:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 800227a:	61da      	str	r2, [r3, #28]
    }
    break;
 800227c:	e020      	b.n	80022c0 <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800227e:	6820      	ldr	r0, [r4, #0]
 8002280:	f7ff ff50 	bl	8002124 <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002284:	6823      	ldr	r3, [r4, #0]
 8002286:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002288:	f042 0208 	orr.w	r2, r2, #8
 800228c:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800228e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002290:	f022 0204 	bic.w	r2, r2, #4
 8002294:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8002296:	692a      	ldr	r2, [r5, #16]
 8002298:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800229a:	430a      	orrs	r2, r1
 800229c:	e00f      	b.n	80022be <HAL_TIM_PWM_ConfigChannel+0xfa>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800229e:	6820      	ldr	r0, [r4, #0]
 80022a0:	f7ff ff68 	bl	8002174 <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80022a4:	6823      	ldr	r3, [r4, #0]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 80022a6:	6909      	ldr	r1, [r1, #16]
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80022a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80022aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ae:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80022b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80022b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 80022b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80022ba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80022be:	655a      	str	r2, [r3, #84]	; 0x54
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 80022c0:	2301      	movs	r3, #1
    
  __HAL_UNLOCK(htim);
 80022c2:	2000      	movs	r0, #0
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 80022c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 80022c8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 80022cc:	bd38      	pop	{r3, r4, r5, pc}
	...

080022d0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80022d0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80022d4:	2b01      	cmp	r3, #1
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80022d6:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80022d8:	d01c      	beq.n	8002314 <HAL_TIMEx_MasterConfigSynchronization+0x44>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022da:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80022dc:	4c0e      	ldr	r4, [pc, #56]	; (8002318 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  
  /* Check input state */
  __HAL_LOCK(htim);

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022de:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80022e0:	42a2      	cmp	r2, r4

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022e2:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80022e4:	d003      	beq.n	80022ee <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 80022e6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80022ea:	42a2      	cmp	r2, r4
 80022ec:	d103      	bne.n	80022f6 <HAL_TIMEx_MasterConfigSynchronization+0x26>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80022ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80022f2:	684c      	ldr	r4, [r1, #4]
 80022f4:	4323      	orrs	r3, r4
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022f6:	680c      	ldr	r4, [r1, #0]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022fc:	6889      	ldr	r1, [r1, #8]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022fe:	4323      	orrs	r3, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002300:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002304:	6053      	str	r3, [r2, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002306:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8002308:	2300      	movs	r3, #0
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800230a:	6091      	str	r1, [r2, #8]

  __HAL_UNLOCK(htim);
 800230c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 8002310:	4618      	mov	r0, r3
 8002312:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002314:	2002      	movs	r0, #2
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
  
  return HAL_OK;
} 
 8002316:	bd30      	pop	{r4, r5, pc}
 8002318:	40010000 	.word	0x40010000

0800231c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800231c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002320:	9d06      	ldr	r5, [sp, #24]
 8002322:	4604      	mov	r4, r0
 8002324:	460f      	mov	r7, r1
 8002326:	4616      	mov	r6, r2
 8002328:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800232a:	6821      	ldr	r1, [r4, #0]
 800232c:	69ca      	ldr	r2, [r1, #28]
 800232e:	ea37 0302 	bics.w	r3, r7, r2
 8002332:	bf0c      	ite	eq
 8002334:	2201      	moveq	r2, #1
 8002336:	2200      	movne	r2, #0
 8002338:	42b2      	cmp	r2, r6
 800233a:	d11d      	bne.n	8002378 <UART_WaitOnFlagUntilTimeout+0x5c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800233c:	1c6b      	adds	r3, r5, #1
 800233e:	d0f5      	beq.n	800232c <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8002340:	b99d      	cbnz	r5, 800236a <UART_WaitOnFlagUntilTimeout+0x4e>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002342:	6823      	ldr	r3, [r4, #0]

        huart->gState = HAL_UART_STATE_READY;
        huart->RxState = HAL_UART_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002344:	2003      	movs	r0, #3
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800234c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	f022 0201 	bic.w	r2, r2, #1
 8002354:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002356:	2320      	movs	r3, #32
 8002358:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800235c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002360:	2300      	movs	r3, #0
 8002362:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8002366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800236a:	f7fd fffb 	bl	8000364 <HAL_GetTick>
 800236e:	ebc8 0000 	rsb	r0, r8, r0
 8002372:	4285      	cmp	r5, r0
 8002374:	d8d9      	bhi.n	800232a <UART_WaitOnFlagUntilTimeout+0xe>
 8002376:	e7e4      	b.n	8002342 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002378:	2000      	movs	r0, #0
}
 800237a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800237e <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800237e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002382:	461f      	mov	r7, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002384:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002388:	4604      	mov	r4, r0
 800238a:	460d      	mov	r5, r1
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800238c:	2b20      	cmp	r3, #32
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800238e:	4690      	mov	r8, r2
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002390:	d14b      	bne.n	800242a <HAL_UART_Transmit+0xac>
  {
    if((pData == NULL ) || (Size == 0U))
 8002392:	2900      	cmp	r1, #0
 8002394:	d047      	beq.n	8002426 <HAL_UART_Transmit+0xa8>
 8002396:	2a00      	cmp	r2, #0
 8002398:	d045      	beq.n	8002426 <HAL_UART_Transmit+0xa8>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800239a:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d043      	beq.n	800242a <HAL_UART_Transmit+0xac>
 80023a2:	2301      	movs	r3, #1
 80023a4:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023a8:	2300      	movs	r3, #0
 80023aa:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023ac:	2321      	movs	r3, #33	; 0x21
 80023ae:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80023b2:	f7fd ffd7 	bl	8000364 <HAL_GetTick>
 80023b6:	4606      	mov	r6, r0

    huart->TxXferSize = Size;
 80023b8:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 80023bc:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80023c0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80023c4:	b292      	uxth	r2, r2
 80023c6:	b302      	cbz	r2, 800240a <HAL_UART_Transmit+0x8c>
    {
      huart->TxXferCount--;
 80023c8:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023cc:	2200      	movs	r2, #0
 80023ce:	9700      	str	r7, [sp, #0]
 80023d0:	2180      	movs	r1, #128	; 0x80

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0U)
    {
      huart->TxXferCount--;
 80023d2:	3b01      	subs	r3, #1
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023d4:	4620      	mov	r0, r4

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0U)
    {
      huart->TxXferCount--;
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023dc:	4633      	mov	r3, r6
 80023de:	f7ff ff9d 	bl	800231c <UART_WaitOnFlagUntilTimeout>
 80023e2:	b108      	cbz	r0, 80023e8 <HAL_UART_Transmit+0x6a>
      {
        return HAL_TIMEOUT;
 80023e4:	2003      	movs	r0, #3
 80023e6:	e021      	b.n	800242c <HAL_UART_Transmit+0xae>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023e8:	68a3      	ldr	r3, [r4, #8]
 80023ea:	6822      	ldr	r2, [r4, #0]
 80023ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023f0:	d107      	bne.n	8002402 <HAL_UART_Transmit+0x84>
 80023f2:	6923      	ldr	r3, [r4, #16]
 80023f4:	b92b      	cbnz	r3, 8002402 <HAL_UART_Transmit+0x84>
      {
        tmp = (uint16_t*) pData;
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80023f6:	f835 3b02 	ldrh.w	r3, [r5], #2
 80023fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023fe:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2;
 8002400:	e7de      	b.n	80023c0 <HAL_UART_Transmit+0x42>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002402:	782b      	ldrb	r3, [r5, #0]
 8002404:	3501      	adds	r5, #1
 8002406:	6293      	str	r3, [r2, #40]	; 0x28
 8002408:	e7da      	b.n	80023c0 <HAL_UART_Transmit+0x42>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800240a:	9700      	str	r7, [sp, #0]
 800240c:	4633      	mov	r3, r6
 800240e:	2140      	movs	r1, #64	; 0x40
 8002410:	4620      	mov	r0, r4
 8002412:	f7ff ff83 	bl	800231c <UART_WaitOnFlagUntilTimeout>
 8002416:	2800      	cmp	r0, #0
 8002418:	d1e4      	bne.n	80023e4 <HAL_UART_Transmit+0x66>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800241a:	2320      	movs	r3, #32

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800241c:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002420:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    return HAL_OK;
 8002424:	e002      	b.n	800242c <HAL_UART_Transmit+0xae>
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0U))
    {
      return  HAL_ERROR;
 8002426:	2001      	movs	r0, #1
 8002428:	e000      	b.n	800242c <HAL_UART_Transmit+0xae>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800242a:	2002      	movs	r0, #2
  }
}
 800242c:	b002      	add	sp, #8
 800242e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002434 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart: uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002434:	b538      	push	{r3, r4, r5, lr}
 8002436:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002438:	6805      	ldr	r5, [r0, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800243a:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800243c:	6922      	ldr	r2, [r4, #16]
 800243e:	68a1      	ldr	r1, [r4, #8]
 8002440:	6828      	ldr	r0, [r5, #0]
 8002442:	4311      	orrs	r1, r2
 8002444:	6962      	ldr	r2, [r4, #20]
 8002446:	430a      	orrs	r2, r1
 8002448:	ea42 0103 	orr.w	r1, r2, r3
 800244c:	4a88      	ldr	r2, [pc, #544]	; (8002670 <UART_SetConfig+0x23c>)
 800244e:	4002      	ands	r2, r0
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002450:	69a0      	ldr	r0, [r4, #24]
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002452:	430a      	orrs	r2, r1
 8002454:	602a      	str	r2, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002456:	686a      	ldr	r2, [r5, #4]
 8002458:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800245c:	68e2      	ldr	r2, [r4, #12]
 800245e:	430a      	orrs	r2, r1
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002460:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002462:	606a      	str	r2, [r5, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002464:	4301      	orrs	r1, r0
 8002466:	68aa      	ldr	r2, [r5, #8]
 8002468:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800246c:	430a      	orrs	r2, r1
 800246e:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002470:	4a80      	ldr	r2, [pc, #512]	; (8002674 <UART_SetConfig+0x240>)
 8002472:	4295      	cmp	r5, r2
 8002474:	d107      	bne.n	8002486 <UART_SetConfig+0x52>
 8002476:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800247a:	497f      	ldr	r1, [pc, #508]	; (8002678 <UART_SetConfig+0x244>)
 800247c:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002480:	f002 0203 	and.w	r2, r2, #3
 8002484:	e009      	b.n	800249a <UART_SetConfig+0x66>
 8002486:	4a7d      	ldr	r2, [pc, #500]	; (800267c <UART_SetConfig+0x248>)
 8002488:	4295      	cmp	r5, r2
 800248a:	d10b      	bne.n	80024a4 <UART_SetConfig+0x70>
 800248c:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8002490:	497b      	ldr	r1, [pc, #492]	; (8002680 <UART_SetConfig+0x24c>)
 8002492:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002496:	f002 020c 	and.w	r2, r2, #12

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800249a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800249e:	5c8a      	ldrb	r2, [r1, r2]
 80024a0:	d073      	beq.n	800258a <UART_SetConfig+0x156>
 80024a2:	e0b6      	b.n	8002612 <UART_SetConfig+0x1de>
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024a4:	4a77      	ldr	r2, [pc, #476]	; (8002684 <UART_SetConfig+0x250>)
 80024a6:	4295      	cmp	r5, r2
 80024a8:	d10d      	bne.n	80024c6 <UART_SetConfig+0x92>
 80024aa:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 80024ae:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80024b2:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80024b6:	2a10      	cmp	r2, #16
 80024b8:	f000 8086 	beq.w	80025c8 <UART_SetConfig+0x194>
 80024bc:	d95d      	bls.n	800257a <UART_SetConfig+0x146>
 80024be:	2a20      	cmp	r2, #32
 80024c0:	d078      	beq.n	80025b4 <UART_SetConfig+0x180>
 80024c2:	2a30      	cmp	r2, #48	; 0x30
 80024c4:	e00e      	b.n	80024e4 <UART_SetConfig+0xb0>
 80024c6:	4a70      	ldr	r2, [pc, #448]	; (8002688 <UART_SetConfig+0x254>)
 80024c8:	4295      	cmp	r5, r2
 80024ca:	d10d      	bne.n	80024e8 <UART_SetConfig+0xb4>
 80024cc:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 80024d0:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80024d4:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 80024d8:	2a40      	cmp	r2, #64	; 0x40
 80024da:	d075      	beq.n	80025c8 <UART_SetConfig+0x194>
 80024dc:	d94d      	bls.n	800257a <UART_SetConfig+0x146>
 80024de:	2a80      	cmp	r2, #128	; 0x80
 80024e0:	d068      	beq.n	80025b4 <UART_SetConfig+0x180>
 80024e2:	2ac0      	cmp	r2, #192	; 0xc0
 80024e4:	d07c      	beq.n	80025e0 <UART_SetConfig+0x1ac>
 80024e6:	e087      	b.n	80025f8 <UART_SetConfig+0x1c4>
 80024e8:	4a68      	ldr	r2, [pc, #416]	; (800268c <UART_SetConfig+0x258>)
 80024ea:	4295      	cmp	r5, r2
 80024ec:	d10f      	bne.n	800250e <UART_SetConfig+0xda>
 80024ee:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 80024f2:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80024f6:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80024fa:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80024fe:	d063      	beq.n	80025c8 <UART_SetConfig+0x194>
 8002500:	d93b      	bls.n	800257a <UART_SetConfig+0x146>
 8002502:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002506:	d055      	beq.n	80025b4 <UART_SetConfig+0x180>
 8002508:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800250c:	e7ea      	b.n	80024e4 <UART_SetConfig+0xb0>
 800250e:	4a60      	ldr	r2, [pc, #384]	; (8002690 <UART_SetConfig+0x25c>)
 8002510:	4295      	cmp	r5, r2
 8002512:	d112      	bne.n	800253a <UART_SetConfig+0x106>
 8002514:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 8002518:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800251c:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8002520:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002524:	d050      	beq.n	80025c8 <UART_SetConfig+0x194>
 8002526:	d802      	bhi.n	800252e <UART_SetConfig+0xfa>
 8002528:	2a00      	cmp	r2, #0
 800252a:	d03d      	beq.n	80025a8 <UART_SetConfig+0x174>
 800252c:	e064      	b.n	80025f8 <UART_SetConfig+0x1c4>
 800252e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002532:	d03f      	beq.n	80025b4 <UART_SetConfig+0x180>
 8002534:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8002538:	e7d4      	b.n	80024e4 <UART_SetConfig+0xb0>
 800253a:	4a56      	ldr	r2, [pc, #344]	; (8002694 <UART_SetConfig+0x260>)
 800253c:	4295      	cmp	r5, r2
 800253e:	d10f      	bne.n	8002560 <UART_SetConfig+0x12c>
 8002540:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8002544:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002548:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 800254c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002550:	d03a      	beq.n	80025c8 <UART_SetConfig+0x194>
 8002552:	d912      	bls.n	800257a <UART_SetConfig+0x146>
 8002554:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002558:	d02c      	beq.n	80025b4 <UART_SetConfig+0x180>
 800255a:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 800255e:	e7c1      	b.n	80024e4 <UART_SetConfig+0xb0>
 8002560:	4a4d      	ldr	r2, [pc, #308]	; (8002698 <UART_SetConfig+0x264>)
 8002562:	4295      	cmp	r5, r2
 8002564:	d148      	bne.n	80025f8 <UART_SetConfig+0x1c4>
 8002566:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 800256a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800256e:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8002572:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002576:	d027      	beq.n	80025c8 <UART_SetConfig+0x194>
 8002578:	d801      	bhi.n	800257e <UART_SetConfig+0x14a>
 800257a:	b17a      	cbz	r2, 800259c <UART_SetConfig+0x168>
 800257c:	e03c      	b.n	80025f8 <UART_SetConfig+0x1c4>
 800257e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002582:	d017      	beq.n	80025b4 <UART_SetConfig+0x180>
 8002584:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8002588:	e7ac      	b.n	80024e4 <UART_SetConfig+0xb0>

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  {
    switch (clocksource)
 800258a:	2a08      	cmp	r2, #8
 800258c:	d837      	bhi.n	80025fe <UART_SetConfig+0x1ca>
 800258e:	e8df f002 	tbb	[pc, r2]
 8002592:	0e08      	.short	0x0e08
 8002594:	361e3614 	.word	0x361e3614
 8002598:	3636      	.short	0x3636
 800259a:	2a          	.byte	0x2a
 800259b:	00          	.byte	0x00

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800259c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025a0:	d140      	bne.n	8002624 <UART_SetConfig+0x1f0>
  {
    switch (clocksource)
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80025a2:	f7fe fea3 	bl	80012ec <HAL_RCC_GetPCLK1Freq>
 80025a6:	e014      	b.n	80025d2 <UART_SetConfig+0x19e>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025ac:	d13d      	bne.n	800262a <UART_SetConfig+0x1f6>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80025ae:	f7fe feb5 	bl	800131c <HAL_RCC_GetPCLK2Freq>
 80025b2:	e00e      	b.n	80025d2 <UART_SetConfig+0x19e>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025b8:	d13a      	bne.n	8002630 <UART_SetConfig+0x1fc>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80025ba:	6860      	ldr	r0, [r4, #4]
 80025bc:	0842      	lsrs	r2, r0, #1
 80025be:	f102 73f4 	add.w	r3, r2, #31981568	; 0x1e80000
 80025c2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80025c6:	e012      	b.n	80025ee <UART_SetConfig+0x1ba>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025cc:	d139      	bne.n	8002642 <UART_SetConfig+0x20e>
      break;
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80025ce:	f7fe fd9f 	bl	8001110 <HAL_RCC_GetSysClockFreq>
 80025d2:	6863      	ldr	r3, [r4, #4]
 80025d4:	085a      	lsrs	r2, r3, #1
 80025d6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 80025da:	fbb0 f3f3 	udiv	r3, r0, r3
 80025de:	e008      	b.n	80025f2 <UART_SetConfig+0x1be>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025e4:	d137      	bne.n	8002656 <UART_SetConfig+0x222>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80025e6:	6860      	ldr	r0, [r4, #4]
 80025e8:	0843      	lsrs	r3, r0, #1
 80025ea:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80025ee:	fbb3 f3f0 	udiv	r3, r3, r0
 80025f2:	b29b      	uxth	r3, r3
{
  uint32_t tmpreg                     = 0x00000000U;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000U;
  uint16_t usartdiv                   = 0x0000U;
  HAL_StatusTypeDef ret               = HAL_OK;
 80025f4:	2000      	movs	r0, #0
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
 80025f6:	e004      	b.n	8002602 <UART_SetConfig+0x1ce>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025fc:	d135      	bne.n	800266a <UART_SetConfig+0x236>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80025fe:	2001      	movs	r0, #1
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg                     = 0x00000000U;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000U;
  uint16_t usartdiv                   = 0x0000U;
 8002600:	2300      	movs	r3, #0
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002602:	f3c3 0142 	ubfx	r1, r3, #1, #3
 8002606:	f023 030f 	bic.w	r3, r3, #15
    huart->Instance->BRR = brrtemp;
 800260a:	6822      	ldr	r2, [r4, #0]
 800260c:	430b      	orrs	r3, r1
 800260e:	60d3      	str	r3, [r2, #12]
 8002610:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    switch (clocksource)
 8002612:	2a08      	cmp	r2, #8
 8002614:	d829      	bhi.n	800266a <UART_SetConfig+0x236>
 8002616:	e8df f002 	tbb	[pc, r2]
 800261a:	0805      	.short	0x0805
 800261c:	2814280b 	.word	0x2814280b
 8002620:	2828      	.short	0x2828
 8002622:	1e          	.byte	0x1e
 8002623:	00          	.byte	0x00
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002624:	f7fe fe62 	bl	80012ec <HAL_RCC_GetPCLK1Freq>
 8002628:	e00d      	b.n	8002646 <UART_SetConfig+0x212>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800262a:	f7fe fe77 	bl	800131c <HAL_RCC_GetPCLK2Freq>
 800262e:	e00a      	b.n	8002646 <UART_SetConfig+0x212>
      break;
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002630:	6861      	ldr	r1, [r4, #4]
 8002632:	084a      	lsrs	r2, r1, #1
 8002634:	f502 0374 	add.w	r3, r2, #15990784	; 0xf40000
 8002638:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800263c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002640:	e00f      	b.n	8002662 <UART_SetConfig+0x22e>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002642:	f7fe fd65 	bl	8001110 <HAL_RCC_GetSysClockFreq>
 8002646:	6863      	ldr	r3, [r4, #4]
 8002648:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800264c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002650:	b280      	uxth	r0, r0
 8002652:	60e8      	str	r0, [r5, #12]
 8002654:	e007      	b.n	8002666 <UART_SetConfig+0x232>
      break;
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002656:	6862      	ldr	r2, [r4, #4]
 8002658:	0853      	lsrs	r3, r2, #1
 800265a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800265e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002662:	b29b      	uxth	r3, r3
 8002664:	60eb      	str	r3, [r5, #12]
{
  uint32_t tmpreg                     = 0x00000000U;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000U;
  uint16_t usartdiv                   = 0x0000U;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002666:	2000      	movs	r0, #0
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
 8002668:	bd38      	pop	{r3, r4, r5, pc}
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 800266a:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 800266c:	bd38      	pop	{r3, r4, r5, pc}
 800266e:	bf00      	nop
 8002670:	efff69f3 	.word	0xefff69f3
 8002674:	40011000 	.word	0x40011000
 8002678:	080039e0 	.word	0x080039e0
 800267c:	40004400 	.word	0x40004400
 8002680:	080039e4 	.word	0x080039e4
 8002684:	40004800 	.word	0x40004800
 8002688:	40004c00 	.word	0x40004c00
 800268c:	40005000 	.word	0x40005000
 8002690:	40011400 	.word	0x40011400
 8002694:	40007800 	.word	0x40007800
 8002698:	40007c00 	.word	0x40007c00

0800269c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800269c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800269e:	07da      	lsls	r2, r3, #31
  * @brief Configure the UART peripheral advanced features
  * @param huart: uart handle
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80026a0:	b510      	push	{r4, lr}
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80026a2:	d506      	bpl.n	80026b2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80026a4:	6804      	ldr	r4, [r0, #0]
 80026a6:	6862      	ldr	r2, [r4, #4]
 80026a8:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 80026ac:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80026ae:	430a      	orrs	r2, r1
 80026b0:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80026b2:	079c      	lsls	r4, r3, #30
 80026b4:	d506      	bpl.n	80026c4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80026b6:	6804      	ldr	r4, [r0, #0]
 80026b8:	6862      	ldr	r2, [r4, #4]
 80026ba:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80026be:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80026c0:	430a      	orrs	r2, r1
 80026c2:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80026c4:	0759      	lsls	r1, r3, #29
 80026c6:	d506      	bpl.n	80026d6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80026c8:	6804      	ldr	r4, [r0, #0]
 80026ca:	6862      	ldr	r2, [r4, #4]
 80026cc:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 80026d0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80026d2:	430a      	orrs	r2, r1
 80026d4:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80026d6:	071a      	lsls	r2, r3, #28
 80026d8:	d506      	bpl.n	80026e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80026da:	6804      	ldr	r4, [r0, #0]
 80026dc:	6862      	ldr	r2, [r4, #4]
 80026de:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 80026e2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80026e4:	430a      	orrs	r2, r1
 80026e6:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80026e8:	06dc      	lsls	r4, r3, #27
 80026ea:	d506      	bpl.n	80026fa <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80026ec:	6804      	ldr	r4, [r0, #0]
 80026ee:	68a2      	ldr	r2, [r4, #8]
 80026f0:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 80026f4:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80026f6:	430a      	orrs	r2, r1
 80026f8:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80026fa:	0699      	lsls	r1, r3, #26
 80026fc:	d506      	bpl.n	800270c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80026fe:	6804      	ldr	r4, [r0, #0]
 8002700:	68a2      	ldr	r2, [r4, #8]
 8002702:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8002706:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002708:	430a      	orrs	r2, r1
 800270a:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800270c:	065a      	lsls	r2, r3, #25
 800270e:	d510      	bpl.n	8002732 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002710:	6801      	ldr	r1, [r0, #0]
 8002712:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002714:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002716:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800271a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800271e:	ea42 0204 	orr.w	r2, r2, r4
 8002722:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002724:	d105      	bne.n	8002732 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002726:	684a      	ldr	r2, [r1, #4]
 8002728:	f422 04c0 	bic.w	r4, r2, #6291456	; 0x600000
 800272c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800272e:	4322      	orrs	r2, r4
 8002730:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002732:	061b      	lsls	r3, r3, #24
 8002734:	d506      	bpl.n	8002744 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002736:	6801      	ldr	r1, [r0, #0]
 8002738:	684b      	ldr	r3, [r1, #4]
 800273a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800273e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002740:	4313      	orrs	r3, r2
 8002742:	604b      	str	r3, [r1, #4]
 8002744:	bd10      	pop	{r4, pc}

08002746 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002746:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002748:	2600      	movs	r6, #0
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800274a:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800274c:	66c6      	str	r6, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800274e:	f7fd fe09 	bl	8000364 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002752:	6823      	ldr	r3, [r4, #0]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002754:	4605      	mov	r5, r0

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	071a      	lsls	r2, r3, #28
 800275a:	d404      	bmi.n	8002766 <UART_CheckIdleState+0x20>
      /* Timeout Occurred */
      return HAL_TIMEOUT;
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800275c:	6823      	ldr	r3, [r4, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	075b      	lsls	r3, r3, #29
 8002762:	d51a      	bpl.n	800279a <UART_CheckIdleState+0x54>
 8002764:	e00d      	b.n	8002782 <UART_CheckIdleState+0x3c>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002766:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800276a:	4632      	mov	r2, r6
 800276c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	4603      	mov	r3, r0
 8002774:	4620      	mov	r0, r4
 8002776:	f7ff fdd1 	bl	800231c <UART_WaitOnFlagUntilTimeout>
 800277a:	2800      	cmp	r0, #0
 800277c:	d0ee      	beq.n	800275c <UART_CheckIdleState+0x16>
    {
      /* Timeout Occurred */
      return HAL_TIMEOUT;
 800277e:	2003      	movs	r0, #3
 8002780:	e013      	b.n	80027aa <UART_CheckIdleState+0x64>
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002782:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002786:	2200      	movs	r2, #0
 8002788:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800278c:	4620      	mov	r0, r4
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	462b      	mov	r3, r5
 8002792:	f7ff fdc3 	bl	800231c <UART_WaitOnFlagUntilTimeout>
 8002796:	2800      	cmp	r0, #0
 8002798:	d1f1      	bne.n	800277e <UART_CheckIdleState+0x38>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 800279a:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800279c:	2000      	movs	r0, #0
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 800279e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80027a2:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
 80027a6:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
}
 80027aa:	b002      	add	sp, #8
 80027ac:	bd70      	pop	{r4, r5, r6, pc}

080027ae <HAL_UART_Init>:
  *         parameters in the UART_InitTypeDef and creates the associated handle .
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027ae:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 80027b0:	4604      	mov	r4, r0
 80027b2:	b360      	cbz	r0, 800280e <HAL_UART_Init+0x60>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80027b4:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80027b8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80027bc:	b91b      	cbnz	r3, 80027c6 <HAL_UART_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027be:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027c2:	f000 fc39 	bl	8003038 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80027c6:	6822      	ldr	r2, [r4, #0]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027c8:	2324      	movs	r3, #36	; 0x24

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027ca:	4620      	mov	r0, r4

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027cc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80027d0:	6813      	ldr	r3, [r2, #0]
 80027d2:	f023 0301 	bic.w	r3, r3, #1
 80027d6:	6013      	str	r3, [r2, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027d8:	f7ff fe2c 	bl	8002434 <UART_SetConfig>
 80027dc:	2801      	cmp	r0, #1
 80027de:	d016      	beq.n	800280e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027e2:	b113      	cbz	r3, 80027ea <HAL_UART_Init+0x3c>
  {
    UART_AdvFeatureConfig(huart);
 80027e4:	4620      	mov	r0, r4
 80027e6:	f7ff ff59 	bl	800269c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ea:	6823      	ldr	r3, [r4, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027ec:	4620      	mov	r0, r4
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027fc:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	f042 0201 	orr.w	r2, r2, #1

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 8002804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002808:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800280a:	f7ff bf9c 	b.w	8002746 <UART_CheckIdleState>
}
 800280e:	2001      	movs	r0, #1
 8002810:	bd10      	pop	{r4, pc}
	...

08002814 <Transmit>:

}


//takes char array
void Transmit(char message[]) {
 8002814:	b510      	push	{r4, lr}
 8002816:	4604      	mov	r4, r0

	int len;
	len=strlen(message);
 8002818:	f7fd fcfa 	bl	8000210 <strlen>
	HAL_UART_Transmit(&huart1, message, len, 1000);
 800281c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002820:	b282      	uxth	r2, r0
 8002822:	4621      	mov	r1, r4
 8002824:	4802      	ldr	r0, [pc, #8]	; (8002830 <Transmit+0x1c>)
}
 8002826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//takes char array
void Transmit(char message[]) {

	int len;
	len=strlen(message);
	HAL_UART_Transmit(&huart1, message, len, 1000);
 800282a:	f7ff bda8 	b.w	800237e <HAL_UART_Transmit>
 800282e:	bf00      	nop
 8002830:	20000180 	.word	0x20000180

08002834 <HAL_ADC_ConvCpltCallback>:
}

//ADC interrupt handler. Runs when all four channels have been converted
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* handle)
{
	HAL_GPIO_TogglePin(GPIOD, LED3_Pin);
 8002834:	2108      	movs	r1, #8
 8002836:	4801      	ldr	r0, [pc, #4]	; (800283c <HAL_ADC_ConvCpltCallback+0x8>)
 8002838:	f7fe babe 	b.w	8000db8 <HAL_GPIO_TogglePin>
 800283c:	40020c00 	.word	0x40020c00

08002840 <Error_Handler>:

void Error_Handler(void)
{
  while(1) 
  {
	  sprintf(buffer, "State: %d", HAL_state);
 8002840:	4c05      	ldr	r4, [pc, #20]	; (8002858 <Error_Handler+0x18>)
{
	HAL_GPIO_TogglePin(GPIOD, LED3_Pin);
}

void Error_Handler(void)
{
 8002842:	b508      	push	{r3, lr}
  while(1) 
  {
	  sprintf(buffer, "State: %d", HAL_state);
 8002844:	6822      	ldr	r2, [r4, #0]
 8002846:	4905      	ldr	r1, [pc, #20]	; (800285c <Error_Handler+0x1c>)
 8002848:	4805      	ldr	r0, [pc, #20]	; (8002860 <Error_Handler+0x20>)
 800284a:	f000 fc89 	bl	8003160 <siprintf>
	  Transmit(buffer);
 800284e:	4804      	ldr	r0, [pc, #16]	; (8002860 <Error_Handler+0x20>)
 8002850:	f7ff ffe0 	bl	8002814 <Transmit>
 8002854:	e7f6      	b.n	8002844 <Error_Handler+0x4>
 8002856:	bf00      	nop
 8002858:	20000088 	.word	0x20000088
 800285c:	080039f1 	.word	0x080039f1
 8002860:	200001f0 	.word	0x200001f0

08002864 <Set_Left>:


void Set_Left(int speed, int direction) {

	//when switching directions, PWM polarity switches
	if (direction == FORWARD) {
 8002864:	2901      	cmp	r1, #1
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);

}


void Set_Left(int speed, int direction) {
 8002866:	b530      	push	{r4, r5, lr}
 8002868:	4604      	mov	r4, r0

	//when switching directions, PWM polarity switches
	if (direction == FORWARD) {
		speed = 665 - speed;
 800286a:	bf08      	it	eq
 800286c:	f5c0 7426 	rsbeq	r4, r0, #664	; 0x298
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);

}


void Set_Left(int speed, int direction) {
 8002870:	b089      	sub	sp, #36	; 0x24
 8002872:	460d      	mov	r5, r1
	//when switching directions, PWM polarity switches
	if (direction == FORWARD) {
		speed = 665 - speed;
	}

	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8002874:	480f      	ldr	r0, [pc, #60]	; (80028b4 <Set_Left+0x50>)
 8002876:	f04f 0100 	mov.w	r1, #0

void Set_Left(int speed, int direction) {

	//when switching directions, PWM polarity switches
	if (direction == FORWARD) {
		speed = 665 - speed;
 800287a:	bf08      	it	eq
 800287c:	3401      	addeq	r4, #1
	}

	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800287e:	f7ff fc1f 	bl	80020c0 <HAL_TIM_PWM_Stop>
	TIM_OC_InitTypeDef tim2config;

	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002882:	2200      	movs	r2, #0

	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	TIM_OC_InitTypeDef tim2config;

	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
 8002884:	2360      	movs	r3, #96	; 0x60
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
	tim2config.OCFastMode = TIM_OCFAST_DISABLE;
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &tim2config, TIM_CHANNEL_1) != HAL_OK)
 8002886:	a901      	add	r1, sp, #4
 8002888:	480a      	ldr	r0, [pc, #40]	; (80028b4 <Set_Left+0x50>)
	}

	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	TIM_OC_InitTypeDef tim2config;

	tim2config.Pulse = speed;
 800288a:	9402      	str	r4, [sp, #8]
	tim2config.OCMode = TIM_OCMODE_PWM1;
 800288c:	9301      	str	r3, [sp, #4]
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800288e:	9203      	str	r2, [sp, #12]
	tim2config.OCFastMode = TIM_OCFAST_DISABLE;
 8002890:	9205      	str	r2, [sp, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &tim2config, TIM_CHANNEL_1) != HAL_OK)
 8002892:	f7ff fc97 	bl	80021c4 <HAL_TIM_PWM_ConfigChannel>
 8002896:	4601      	mov	r1, r0
 8002898:	b108      	cbz	r0, 800289e <Set_Left+0x3a>
	  {
	     Error_Handler();
 800289a:	f7ff ffd1 	bl	8002840 <Error_Handler>
	  }

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800289e:	4805      	ldr	r0, [pc, #20]	; (80028b4 <Set_Left+0x50>)
 80028a0:	f7ff fbf4 	bl	800208c <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, LDIC_Pin, direction);
 80028a4:	2102      	movs	r1, #2
 80028a6:	b2ea      	uxtb	r2, r5
 80028a8:	4803      	ldr	r0, [pc, #12]	; (80028b8 <Set_Left+0x54>)
 80028aa:	f7fe fa81 	bl	8000db0 <HAL_GPIO_WritePin>

}
 80028ae:	b009      	add	sp, #36	; 0x24
 80028b0:	bd30      	pop	{r4, r5, pc}
 80028b2:	bf00      	nop
 80028b4:	20008420 	.word	0x20008420
 80028b8:	40020000 	.word	0x40020000

080028bc <Set_Right>:

//when switching directions, PWM polarity switches
void Set_Right(int speed, int direction) {

	if (direction == FORWARD) {
 80028bc:	2901      	cmp	r1, #1
	HAL_GPIO_WritePin(GPIOA, LDIC_Pin, direction);

}

//when switching directions, PWM polarity switches
void Set_Right(int speed, int direction) {
 80028be:	b530      	push	{r4, r5, lr}
 80028c0:	4604      	mov	r4, r0

	if (direction == FORWARD) {
			speed = 665 - speed;
 80028c2:	bf08      	it	eq
 80028c4:	f5c0 7426 	rsbeq	r4, r0, #664	; 0x298
	HAL_GPIO_WritePin(GPIOA, LDIC_Pin, direction);

}

//when switching directions, PWM polarity switches
void Set_Right(int speed, int direction) {
 80028c8:	b089      	sub	sp, #36	; 0x24
 80028ca:	460d      	mov	r5, r1

	if (direction == FORWARD) {
			speed = 665 - speed;
	}

	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80028cc:	480f      	ldr	r0, [pc, #60]	; (800290c <Set_Right+0x50>)
 80028ce:	f04f 0108 	mov.w	r1, #8

//when switching directions, PWM polarity switches
void Set_Right(int speed, int direction) {

	if (direction == FORWARD) {
			speed = 665 - speed;
 80028d2:	bf08      	it	eq
 80028d4:	3401      	addeq	r4, #1
	}

	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80028d6:	f7ff fbf3 	bl	80020c0 <HAL_TIM_PWM_Stop>
	TIM_OC_InitTypeDef tim2config;
	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
 80028da:	2360      	movs	r3, #96	; 0x60
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
	tim2config.OCFastMode = TIM_OCFAST_DISABLE;

	if (HAL_TIM_PWM_ConfigChannel(&htim2, &tim2config, TIM_CHANNEL_3) != HAL_OK)
 80028dc:	2208      	movs	r2, #8
 80028de:	a901      	add	r1, sp, #4
 80028e0:	480a      	ldr	r0, [pc, #40]	; (800290c <Set_Right+0x50>)
	}

	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
	TIM_OC_InitTypeDef tim2config;
	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
 80028e2:	9301      	str	r3, [sp, #4]
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028e4:	2300      	movs	r3, #0
			speed = 665 - speed;
	}

	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
	TIM_OC_InitTypeDef tim2config;
	tim2config.Pulse = speed;
 80028e6:	9402      	str	r4, [sp, #8]
	tim2config.OCMode = TIM_OCMODE_PWM1;
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028e8:	9303      	str	r3, [sp, #12]
	tim2config.OCFastMode = TIM_OCFAST_DISABLE;
 80028ea:	9305      	str	r3, [sp, #20]

	if (HAL_TIM_PWM_ConfigChannel(&htim2, &tim2config, TIM_CHANNEL_3) != HAL_OK)
 80028ec:	f7ff fc6a 	bl	80021c4 <HAL_TIM_PWM_ConfigChannel>
 80028f0:	b108      	cbz	r0, 80028f6 <Set_Right+0x3a>
	{
	   Error_Handler();
 80028f2:	f7ff ffa5 	bl	8002840 <Error_Handler>
	}

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80028f6:	2108      	movs	r1, #8
 80028f8:	4804      	ldr	r0, [pc, #16]	; (800290c <Set_Right+0x50>)
 80028fa:	f7ff fbc7 	bl	800208c <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, RDIC_Pin, direction);
 80028fe:	2108      	movs	r1, #8
 8002900:	b2ea      	uxtb	r2, r5
 8002902:	4803      	ldr	r0, [pc, #12]	; (8002910 <Set_Right+0x54>)
 8002904:	f7fe fa54 	bl	8000db0 <HAL_GPIO_WritePin>

}
 8002908:	b009      	add	sp, #36	; 0x24
 800290a:	bd30      	pop	{r4, r5, pc}
 800290c:	20008420 	.word	0x20008420
 8002910:	40020000 	.word	0x40020000

08002914 <HAL_GPIO_EXTI_Callback>:
}

//button interrupt routine (THIS IS RUN WHEN BUTTONS ARE PRESSED
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (GPIO_Pin == BUTTON2_Pin)
 8002914:	2840      	cmp	r0, #64	; 0x40
  }
}

//button interrupt routine (THIS IS RUN WHEN BUTTONS ARE PRESSED
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002916:	b510      	push	{r4, lr}
  if (GPIO_Pin == BUTTON2_Pin)
 8002918:	d113      	bne.n	8002942 <HAL_GPIO_EXTI_Callback+0x2e>
  {
    HAL_GPIO_TogglePin(GPIOD, LED5_Pin);

    if (puls < 500) {
 800291a:	4c0f      	ldr	r4, [pc, #60]	; (8002958 <HAL_GPIO_EXTI_Callback+0x44>)
//button interrupt routine (THIS IS RUN WHEN BUTTONS ARE PRESSED
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (GPIO_Pin == BUTTON2_Pin)
  {
    HAL_GPIO_TogglePin(GPIOD, LED5_Pin);
 800291c:	2102      	movs	r1, #2
 800291e:	480f      	ldr	r0, [pc, #60]	; (800295c <HAL_GPIO_EXTI_Callback+0x48>)
 8002920:	f7fe fa4a 	bl	8000db8 <HAL_GPIO_TogglePin>

    if (puls < 500) {
 8002924:	6820      	ldr	r0, [r4, #0]
 8002926:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800292a:	da06      	bge.n	800293a <HAL_GPIO_EXTI_Callback+0x26>
    Set_Left(puls, FORWARD);
 800292c:	2101      	movs	r1, #1
 800292e:	f7ff ff99 	bl	8002864 <Set_Left>
    Set_Right(puls, BACKWARD);
 8002932:	2100      	movs	r1, #0
 8002934:	6820      	ldr	r0, [r4, #0]
 8002936:	f7ff ffc1 	bl	80028bc <Set_Right>
    }
    puls = puls + 25; //increment pulse
 800293a:	6823      	ldr	r3, [r4, #0]
 800293c:	3319      	adds	r3, #25
 800293e:	6023      	str	r3, [r4, #0]
 8002940:	bd10      	pop	{r4, pc}
  }

  if (GPIO_Pin == BUTTON1_Pin)
 8002942:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002946:	d105      	bne.n	8002954 <HAL_GPIO_EXTI_Callback+0x40>
  {
	  //Toggle LED4
      HAL_GPIO_TogglePin(GPIOD, LED4_Pin);
 8002948:	2104      	movs	r1, #4
 800294a:	4804      	ldr	r0, [pc, #16]	; (800295c <HAL_GPIO_EXTI_Callback+0x48>)
  }
}
 800294c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  }

  if (GPIO_Pin == BUTTON1_Pin)
  {
	  //Toggle LED4
      HAL_GPIO_TogglePin(GPIOD, LED4_Pin);
 8002950:	f7fe ba32 	b.w	8000db8 <HAL_GPIO_TogglePin>
 8002954:	bd10      	pop	{r4, pc}
 8002956:	bf00      	nop
 8002958:	20000084 	.word	0x20000084
 800295c:	40020c00 	.word	0x40020c00

08002960 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002960:	4b26      	ldr	r3, [pc, #152]	; (80029fc <SystemClock_Config+0x9c>)
 8002962:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002964:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
	HAL_UART_Transmit(&huart1, message, len, 1000);
}


void SystemClock_Config(void)
{
 8002968:	b510      	push	{r4, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 800296a:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_UART_Transmit(&huart1, message, len, 1000);
}


void SystemClock_Config(void)
{
 800296c:	b0b4      	sub	sp, #208	; 0xd0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002970:	4a23      	ldr	r2, [pc, #140]	; (8002a00 <SystemClock_Config+0xa0>)
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002972:	a807      	add	r0, sp, #28
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	9b00      	ldr	r3, [sp, #0]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800297c:	6813      	ldr	r3, [r2, #0]
 800297e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002982:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002986:	6013      	str	r3, [r2, #0]
 8002988:	6813      	ldr	r3, [r2, #0]
 800298a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800298e:	9301      	str	r3, [sp, #4]
 8002990:	9b01      	ldr	r3, [sp, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002992:	2302      	movs	r3, #2
 8002994:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002996:	2301      	movs	r3, #1
 8002998:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800299a:	2310      	movs	r3, #16
 800299c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800299e:	2300      	movs	r3, #0
 80029a0:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029a2:	f7fe fa19 	bl	8000dd8 <HAL_RCC_OscConfig>
 80029a6:	4601      	mov	r1, r0
 80029a8:	b108      	cbz	r0, 80029ae <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80029aa:	f7ff ff49 	bl	8002840 <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029ae:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80029b0:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029b2:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029b4:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029b6:	9006      	str	r0, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80029b8:	a802      	add	r0, sp, #8
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029ba:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80029bc:	f7fe fbe6 	bl	800118c <HAL_RCC_ClockConfig>
 80029c0:	2800      	cmp	r0, #0
 80029c2:	d1f2      	bne.n	80029aa <SystemClock_Config+0x4a>
  {
    Error_Handler();
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80029c4:	2340      	movs	r3, #64	; 0x40
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80029c6:	9024      	str	r0, [sp, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029c8:	a813      	add	r0, sp, #76	; 0x4c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80029ca:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029cc:	f7fe fcbe 	bl	800134c <HAL_RCCEx_PeriphCLKConfig>
 80029d0:	4604      	mov	r4, r0
 80029d2:	2800      	cmp	r0, #0
 80029d4:	d1e9      	bne.n	80029aa <SystemClock_Config+0x4a>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80029d6:	f7fe fc83 	bl	80012e0 <HAL_RCC_GetHCLKFreq>
 80029da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029de:	fbb0 f0f3 	udiv	r0, r0, r3
 80029e2:	f7fd ff35 	bl	8000850 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80029e6:	2004      	movs	r0, #4
 80029e8:	f7fd ff48 	bl	800087c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80029ec:	4622      	mov	r2, r4
 80029ee:	4621      	mov	r1, r4
 80029f0:	f04f 30ff 	mov.w	r0, #4294967295
 80029f4:	f7fd fee8 	bl	80007c8 <HAL_NVIC_SetPriority>
}
 80029f8:	b034      	add	sp, #208	; 0xd0
 80029fa:	bd10      	pop	{r4, pc}
 80029fc:	40023800 	.word	0x40023800
 8002a00:	40007000 	.word	0x40007000

08002a04 <main>:

enum {ADC_VAL_BUFFER_LENGTH = 8192}; //DMA Buffer size
uint32_t ADC_valbuffer[ADC_VAL_BUFFER_LENGTH];

int main(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b0a6      	sub	sp, #152	; 0x98
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : RDIC_Pin LDIC_Pin GYRO_CS_Pin */
  GPIO_InitStruct.Pin = RDIC_Pin|LDIC_Pin|GYRO_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	2500      	movs	r5, #0
{
   //STARTUP

  /* MCU Configuration----------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a0a:	f7fd fc97 	bl	800033c <HAL_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : RDIC_Pin LDIC_Pin GYRO_CS_Pin */
  GPIO_InitStruct.Pin = RDIC_Pin|LDIC_Pin|GYRO_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a0e:	2601      	movs	r6, #1

  /* MCU Configuration----------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
  /* Configure the system clock */
  SystemClock_Config();
 8002a10:	f7ff ffa6 	bl	8002960 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a14:	4b53      	ldr	r3, [pc, #332]	; (8002b64 <main+0x160>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RDIC_Pin|LDIC_Pin|GYRO_CS_Pin, GPIO_PIN_RESET);
 8002a16:	211a      	movs	r1, #26
 8002a18:	4853      	ldr	r0, [pc, #332]	; (8002b68 <main+0x164>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a1c:	f44f 7840 	mov.w	r8, #768	; 0x300
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a20:	4c52      	ldr	r4, [pc, #328]	; (8002b6c <main+0x168>)
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.NbrOfDiscConversion = 0;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
 8002a22:	2704      	movs	r7, #4
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a24:	f042 0201 	orr.w	r2, r2, #1
 8002a28:	631a      	str	r2, [r3, #48]	; 0x30
 8002a2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a2c:	f002 0201 	and.w	r2, r2, #1
 8002a30:	9202      	str	r2, [sp, #8]
 8002a32:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a36:	f042 0204 	orr.w	r2, r2, #4
 8002a3a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a3e:	f002 0204 	and.w	r2, r2, #4
 8002a42:	9203      	str	r2, [sp, #12]
 8002a44:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a48:	f042 0202 	orr.w	r2, r2, #2
 8002a4c:	631a      	str	r2, [r3, #48]	; 0x30
 8002a4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a50:	f002 0202 	and.w	r2, r2, #2
 8002a54:	9204      	str	r2, [sp, #16]
 8002a56:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a5a:	f042 0210 	orr.w	r2, r2, #16
 8002a5e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a62:	f002 0210 	and.w	r2, r2, #16
 8002a66:	9205      	str	r2, [sp, #20]
 8002a68:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a6c:	f042 0208 	orr.w	r2, r2, #8
 8002a70:	631a      	str	r2, [r3, #48]	; 0x30

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RDIC_Pin|LDIC_Pin|GYRO_CS_Pin, GPIO_PIN_RESET);
 8002a72:	2200      	movs	r2, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	9306      	str	r3, [sp, #24]
 8002a7c:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RDIC_Pin|LDIC_Pin|GYRO_CS_Pin, GPIO_PIN_RESET);
 8002a7e:	f7fe f997 	bl	8000db0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LED5_Pin|LED4_Pin|LED3_Pin|LED2_Pin , GPIO_PIN_RESET);
 8002a82:	2200      	movs	r2, #0
 8002a84:	211e      	movs	r1, #30
 8002a86:	483a      	ldr	r0, [pc, #232]	; (8002b70 <main+0x16c>)
 8002a88:	f7fe f992 	bl	8000db0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LED1_Pin, GPIO_PIN_SET);
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	2120      	movs	r1, #32
 8002a90:	4837      	ldr	r0, [pc, #220]	; (8002b70 <main+0x16c>)
 8002a92:	f7fe f98d 	bl	8000db0 <HAL_GPIO_WritePin>

  //Emitters
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002a96:	2200      	movs	r2, #0
 8002a98:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002a9c:	4835      	ldr	r0, [pc, #212]	; (8002b74 <main+0x170>)
 8002a9e:	f7fe f987 	bl	8000db0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	2130      	movs	r1, #48	; 0x30
 8002aa6:	4834      	ldr	r0, [pc, #208]	; (8002b78 <main+0x174>)
 8002aa8:	f7fe f982 	bl	8000db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RDIC_Pin LDIC_Pin GYRO_CS_Pin */
  GPIO_InitStruct.Pin = RDIC_Pin|LDIC_Pin|GYRO_CS_Pin;
 8002aac:	231a      	movs	r3, #26
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aae:	a91f      	add	r1, sp, #124	; 0x7c
 8002ab0:	482d      	ldr	r0, [pc, #180]	; (8002b68 <main+0x164>)
  //Emitters
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : RDIC_Pin LDIC_Pin GYRO_CS_Pin */
  GPIO_InitStruct.Pin = RDIC_Pin|LDIC_Pin|GYRO_CS_Pin;
 8002ab2:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab4:	9620      	str	r6, [sp, #128]	; 0x80
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab6:	9521      	str	r5, [sp, #132]	; 0x84
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab8:	9522      	str	r5, [sp, #136]	; 0x88
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aba:	f7fe f88d 	bl	8000bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
 8002abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 8002ac2:	a91f      	add	r1, sp, #124	; 0x7c
 8002ac4:	482a      	ldr	r0, [pc, #168]	; (8002b70 <main+0x16c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
 8002ac6:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ac8:	9420      	str	r4, [sp, #128]	; 0x80
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aca:	9521      	str	r5, [sp, #132]	; 0x84
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 8002acc:	f7fe f884 	bl	8000bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin;
 8002ad0:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);
 8002ad2:	a91f      	add	r1, sp, #124	; 0x7c
 8002ad4:	4827      	ldr	r0, [pc, #156]	; (8002b74 <main+0x170>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin;
 8002ad6:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ad8:	9420      	str	r4, [sp, #128]	; 0x80
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ada:	9521      	str	r5, [sp, #132]	; 0x84
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);
 8002adc:	f7fe f87c 	bl	8000bd8 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8002ae0:	462a      	mov	r2, r5
 8002ae2:	2102      	movs	r1, #2
 8002ae4:	2028      	movs	r0, #40	; 0x28

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 8002ae6:	4c25      	ldr	r4, [pc, #148]	; (8002b7c <main+0x178>)
  GPIO_InitStruct.Pin = BUTTON2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8002ae8:	f7fd fe6e 	bl	80007c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002aec:	2028      	movs	r0, #40	; 0x28
 8002aee:	f7fd fea3 	bl	8000838 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8002af2:	462a      	mov	r2, r5
 8002af4:	4631      	mov	r1, r6
 8002af6:	2017      	movs	r0, #23
 8002af8:	f7fd fe66 	bl	80007c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002afc:	2017      	movs	r0, #23
 8002afe:	f7fd fe9b 	bl	8000838 <HAL_NVIC_EnableIRQ>
  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b02:	a91f      	add	r1, sp, #124	; 0x7c
 8002b04:	481b      	ldr	r0, [pc, #108]	; (8002b74 <main+0x170>)

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b06:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b0a:	9620      	str	r6, [sp, #128]	; 0x80
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0c:	9521      	str	r5, [sp, #132]	; 0x84
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0e:	9522      	str	r5, [sp, #136]	; 0x88
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b10:	f7fe f862 	bl	8000bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED5_Pin LED4_Pin LED3_Pin LED2_Pin 
                           LED1_Pin */
  GPIO_InitStruct.Pin = LED5_Pin|LED4_Pin|LED3_Pin|LED2_Pin 
 8002b14:	233e      	movs	r3, #62	; 0x3e
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b16:	a91f      	add	r1, sp, #124	; 0x7c
 8002b18:	4815      	ldr	r0, [pc, #84]	; (8002b70 <main+0x16c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : LED5_Pin LED4_Pin LED3_Pin LED2_Pin 
                           LED1_Pin */
  GPIO_InitStruct.Pin = LED5_Pin|LED4_Pin|LED3_Pin|LED2_Pin 
 8002b1a:	931f      	str	r3, [sp, #124]	; 0x7c
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b1c:	9620      	str	r6, [sp, #128]	; 0x80
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	9521      	str	r5, [sp, #132]	; 0x84
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b20:	9522      	str	r5, [sp, #136]	; 0x88
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b22:	f7fe f859 	bl	8000bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002b26:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b28:	4813      	ldr	r0, [pc, #76]	; (8002b78 <main+0x174>)
 8002b2a:	a91f      	add	r1, sp, #124	; 0x7c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b2c:	9620      	str	r6, [sp, #128]	; 0x80
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002b2e:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b30:	9521      	str	r5, [sp, #132]	; 0x84
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b32:	9522      	str	r5, [sp, #136]	; 0x88
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b34:	f7fe f850 	bl	8000bd8 <HAL_GPIO_Init>
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002b38:	4b11      	ldr	r3, [pc, #68]	; (8002b80 <main+0x17c>)
 8002b3a:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.EOCSelection = DISABLE;

  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b3e:	4620      	mov	r0, r4

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b40:	60a5      	str	r5, [r4, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002b42:	6126      	str	r6, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002b44:	61a6      	str	r6, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b46:	6225      	str	r5, [r4, #32]
  hadc1.Init.NbrOfDiscConversion = 0;
 8002b48:	6265      	str	r5, [r4, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b4a:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 8002b4c:	62a5      	str	r5, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b4e:	60e5      	str	r5, [r4, #12]
  hadc1.Init.NbrOfConversion = 4;
 8002b50:	61e7      	str	r7, [r4, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002b52:	6326      	str	r6, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = DISABLE;
 8002b54:	6165      	str	r5, [r4, #20]
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002b56:	e884 4008 	stmia.w	r4, {r3, lr}
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.EOCSelection = DISABLE;

  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b5a:	f7fd fc17 	bl	800038c <HAL_ADC_Init>
 8002b5e:	b188      	cbz	r0, 8002b84 <main+0x180>
  {
    Error_Handler();
 8002b60:	f7ff fe6e 	bl	8002840 <Error_Handler>
 8002b64:	40023800 	.word	0x40023800
 8002b68:	40020000 	.word	0x40020000
 8002b6c:	10210000 	.word	0x10210000
 8002b70:	40020c00 	.word	0x40020c00
 8002b74:	40020800 	.word	0x40020800
 8002b78:	40020400 	.word	0x40020400
 8002b7c:	20000138 	.word	0x20000138
 8002b80:	40012000 	.word	0x40012000
  }


  sConfig.Channel = ADC_CHANNEL_14;
 8002b84:	230e      	movs	r3, #14
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
  sConfig.Offset = 0;
 8002b86:	9017      	str	r0, [sp, #92]	; 0x5c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b88:	a914      	add	r1, sp, #80	; 0x50
 8002b8a:	4620      	mov	r0, r4
  {
    Error_Handler();
  }


  sConfig.Channel = ADC_CHANNEL_14;
 8002b8c:	9314      	str	r3, [sp, #80]	; 0x50
  sConfig.Rank = 1;
 8002b8e:	9615      	str	r6, [sp, #84]	; 0x54
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8002b90:	9716      	str	r7, [sp, #88]	; 0x58
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b92:	f7fd fd67 	bl	8000664 <HAL_ADC_ConfigChannel>
 8002b96:	2800      	cmp	r0, #0
 8002b98:	d1e2      	bne.n	8002b60 <main+0x15c>
  {
	//state = 1;
    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_15;
 8002b9a:	230f      	movs	r3, #15
  sConfig.Rank = 2;
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
  sConfig.Offset = 0;
 8002b9c:	9017      	str	r0, [sp, #92]	; 0x5c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b9e:	a914      	add	r1, sp, #80	; 0x50
 8002ba0:	4620      	mov	r0, r4
  {
	//state = 1;
    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_15;
 8002ba2:	9314      	str	r3, [sp, #80]	; 0x50
  sConfig.Rank = 2;
 8002ba4:	2302      	movs	r3, #2
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8002ba6:	9716      	str	r7, [sp, #88]	; 0x58
	//state = 1;
    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_15;
  sConfig.Rank = 2;
 8002ba8:	9315      	str	r3, [sp, #84]	; 0x54
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002baa:	f7fd fd5b 	bl	8000664 <HAL_ADC_ConfigChannel>
 8002bae:	2800      	cmp	r0, #0
 8002bb0:	d1d6      	bne.n	8002b60 <main+0x15c>
  {
	//state = 2;
    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_8;
 8002bb2:	2508      	movs	r5, #8
  sConfig.Rank = 3;
 8002bb4:	2303      	movs	r3, #3
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
  sConfig.Offset = 0;
 8002bb6:	9017      	str	r0, [sp, #92]	; 0x5c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bb8:	a914      	add	r1, sp, #80	; 0x50
 8002bba:	4620      	mov	r0, r4
  {
	//state = 2;
    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_8;
 8002bbc:	9514      	str	r5, [sp, #80]	; 0x50
  sConfig.Rank = 3;
 8002bbe:	9315      	str	r3, [sp, #84]	; 0x54
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8002bc0:	9716      	str	r7, [sp, #88]	; 0x58
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bc2:	f7fd fd4f 	bl	8000664 <HAL_ADC_ConfigChannel>
 8002bc6:	2800      	cmp	r0, #0
 8002bc8:	d1ca      	bne.n	8002b60 <main+0x15c>
  {
	//state = 3;
    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_9;
 8002bca:	2309      	movs	r3, #9
  sConfig.Rank = 4;
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
  sConfig.Offset = 0;
 8002bcc:	9017      	str	r0, [sp, #92]	; 0x5c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bce:	a914      	add	r1, sp, #80	; 0x50
 8002bd0:	4620      	mov	r0, r4
  {
	//state = 3;
    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_9;
 8002bd2:	9314      	str	r3, [sp, #80]	; 0x50
  sConfig.Rank = 4;
 8002bd4:	9715      	str	r7, [sp, #84]	; 0x54
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8002bd6:	9716      	str	r7, [sp, #88]	; 0x58
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bd8:	f7fd fd44 	bl	8000664 <HAL_ADC_ConfigChannel>
 8002bdc:	2800      	cmp	r0, #0
 8002bde:	d1bf      	bne.n	8002b60 <main+0x15c>

	//state = 4;
    Error_Handler();
  }

  if(HAL_ADC_Start_DMA(&hadc1, ADC_valbuffer, ADC_VAL_BUFFER_LENGTH) != HAL_OK)
 8002be0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002be4:	496e      	ldr	r1, [pc, #440]	; (8002da0 <main+0x39c>)
 8002be6:	4620      	mov	r0, r4
 8002be8:	f7fd fc7a 	bl	80004e0 <HAL_ADC_Start_DMA>
 8002bec:	2800      	cmp	r0, #0
 8002bee:	d1b7      	bne.n	8002b60 <main+0x15c>

/* SPI1 init function */
static void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 8002bf0:	4b6c      	ldr	r3, [pc, #432]	; (8002da4 <main+0x3a0>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002bf2:	f44f 7782 	mov.w	r7, #260	; 0x104
 8002bf6:	4a6c      	ldr	r2, [pc, #432]	; (8002da8 <main+0x3a4>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002bf8:	6098      	str	r0, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bfa:	6118      	str	r0, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bfc:	6158      	str	r0, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bfe:	61d8      	str	r0, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c00:	6218      	str	r0, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c02:	6258      	str	r0, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c04:	6298      	str	r0, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c06:	6318      	str	r0, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;

  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c08:	4618      	mov	r0, r3
{

  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002c0a:	f8c3 800c 	str.w	r8, [r3, #12]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c0e:	635d      	str	r5, [r3, #52]	; 0x34
/* SPI1 init function */
static void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c10:	e883 0084 	stmia.w	r3, {r2, r7}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8002c1a:	2207      	movs	r2, #7
 8002c1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;

  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c1e:	f7fe ff3b 	bl	8001a98 <HAL_SPI_Init>
 8002c22:	2800      	cmp	r0, #0
 8002c24:	d19c      	bne.n	8002b60 <main+0x15c>
{

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_IC_InitTypeDef sConfigIC;

  htim1.Instance = TIM1;
 8002c26:	4c61      	ldr	r4, [pc, #388]	; (8002dac <main+0x3a8>)
 8002c28:	4b61      	ldr	r3, [pc, #388]	; (8002db0 <main+0x3ac>)
  htim1.Init.Prescaler = 0;
 8002c2a:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c2c:	60a0      	str	r0, [r4, #8]
  htim1.Init.Period = 0;
 8002c2e:	60e0      	str	r0, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c30:	6120      	str	r0, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8002c32:	6160      	str	r0, [r4, #20]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002c34:	4620      	mov	r0, r4
{

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_IC_InitTypeDef sConfigIC;

  htim1.Instance = TIM1;
 8002c36:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 0;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002c38:	f7ff f880 	bl	8001d3c <HAL_TIM_IC_Init>
 8002c3c:	2800      	cmp	r0, #0
 8002c3e:	d18f      	bne.n	8002b60 <main+0x15c>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c40:	900d      	str	r0, [sp, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c42:	a90d      	add	r1, sp, #52	; 0x34
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002c44:	900e      	str	r0, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c46:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c48:	4620      	mov	r0, r4
 8002c4a:	f7ff fb41 	bl	80022d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	2800      	cmp	r0, #0
 8002c52:	d185      	bne.n	8002b60 <main+0x15c>
  {
    Error_Handler();
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002c54:	9010      	str	r0, [sp, #64]	; 0x40
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002c56:	a910      	add	r1, sp, #64	; 0x40
    Error_Handler();
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002c58:	9012      	str	r0, [sp, #72]	; 0x48
  sConfigIC.ICFilter = 0;
 8002c5a:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002c5c:	4620      	mov	r0, r4
  {
    Error_Handler();
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002c5e:	9611      	str	r6, [sp, #68]	; 0x44
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002c60:	f7ff f97e 	bl	8001f60 <HAL_TIM_IC_ConfigChannel>
 8002c64:	2800      	cmp	r0, #0
 8002c66:	f47f af7b 	bne.w	8002b60 <main+0x15c>
  {
    Error_Handler();
  }

  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002c6a:	2204      	movs	r2, #4
 8002c6c:	a910      	add	r1, sp, #64	; 0x40
 8002c6e:	4620      	mov	r0, r4
 8002c70:	f7ff f976 	bl	8001f60 <HAL_TIM_IC_ConfigChannel>
 8002c74:	2800      	cmp	r0, #0
 8002c76:	f47f af73 	bne.w	8002b60 <main+0x15c>
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  //uhPrescalerValue = (uint32_t)((SystemCoreClock /2) / 18000000) - 1;

  htim2.Instance = TIM2;
 8002c7a:	4c4e      	ldr	r4, [pc, #312]	; (8002db4 <main+0x3b0>)
  htim2.Init.Prescaler = 5;
 8002c7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c80:	2605      	movs	r6, #5
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c82:	60a0      	str	r0, [r4, #8]
  htim2.Init.Period = 665;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c84:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002c86:	4620      	mov	r0, r4
  TIM_OC_InitTypeDef sConfigOC;

  //uhPrescalerValue = (uint32_t)((SystemCoreClock /2) / 18000000) - 1;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 5;
 8002c88:	e884 0048 	stmia.w	r4, {r3, r6}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 665;
 8002c8c:	f240 2399 	movw	r3, #665	; 0x299
 8002c90:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002c92:	f7ff f839 	bl	8001d08 <HAL_TIM_PWM_Init>
 8002c96:	2800      	cmp	r0, #0
 8002c98:	f47f af62 	bne.w	8002b60 <main+0x15c>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c9c:	900a      	str	r0, [sp, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c9e:	a90a      	add	r1, sp, #40	; 0x28
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ca0:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ca2:	4620      	mov	r0, r4
 8002ca4:	f7ff fb14 	bl	80022d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	2800      	cmp	r0, #0
 8002cac:	f47f af58 	bne.w	8002b60 <main+0x15c>
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cb0:	2660      	movs	r6, #96	; 0x60
  sConfigOC.Pulse = 0;
 8002cb2:	9020      	str	r0, [sp, #128]	; 0x80
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cb4:	9021      	str	r0, [sp, #132]	; 0x84
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cb6:	a91f      	add	r1, sp, #124	; 0x7c
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cb8:	9023      	str	r0, [sp, #140]	; 0x8c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cba:	4620      	mov	r0, r4
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cbc:	961f      	str	r6, [sp, #124]	; 0x7c
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cbe:	f7ff fa81 	bl	80021c4 <HAL_TIM_PWM_ConfigChannel>
 8002cc2:	2800      	cmp	r0, #0
 8002cc4:	f47f af4c 	bne.w	8002b60 <main+0x15c>
  {
    Error_Handler();
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002cc8:	462a      	mov	r2, r5
 8002cca:	a91f      	add	r1, sp, #124	; 0x7c
 8002ccc:	4620      	mov	r0, r4
 8002cce:	f7ff fa79 	bl	80021c4 <HAL_TIM_PWM_ConfigChannel>
 8002cd2:	4605      	mov	r5, r0
 8002cd4:	2800      	cmp	r0, #0
 8002cd6:	f47f af43 	bne.w	8002b60 <main+0x15c>
  {
    Error_Handler();
  }

  HAL_TIM_MspPostInit(&htim2);
 8002cda:	4620      	mov	r0, r4
{

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim4.Instance = TIM4;
 8002cdc:	4c36      	ldr	r4, [pc, #216]	; (8002db8 <main+0x3b4>)
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }

  HAL_TIM_MspPostInit(&htim2);
 8002cde:	f000 f981 	bl	8002fe4 <HAL_TIM_MspPostInit>

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 8;
 8002ce2:	2308      	movs	r3, #8
 8002ce4:	4935      	ldr	r1, [pc, #212]	; (8002dbc <main+0x3b8>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 3375;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002ce6:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 8;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ce8:	60a5      	str	r5, [r4, #8]
  htim4.Init.Period = 3375;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cea:	6125      	str	r5, [r4, #16]

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 8;
 8002cec:	e884 000a 	stmia.w	r4, {r1, r3}
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 3375;
 8002cf0:	f640 532f 	movw	r3, #3375	; 0xd2f
 8002cf4:	60e3      	str	r3, [r4, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002cf6:	f7ff f807 	bl	8001d08 <HAL_TIM_PWM_Init>
 8002cfa:	2800      	cmp	r0, #0
 8002cfc:	f47f af30 	bne.w	8002b60 <main+0x15c>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d00:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d02:	a907      	add	r1, sp, #28
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d04:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d06:	4620      	mov	r0, r4
 8002d08:	f7ff fae2 	bl	80022d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	2800      	cmp	r0, #0
 8002d10:	f47f af26 	bne.w	8002b60 <main+0x15c>
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 400;
 8002d14:	f44f 73c8 	mov.w	r3, #400	; 0x190
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d18:	901a      	str	r0, [sp, #104]	; 0x68
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d1a:	901c      	str	r0, [sp, #112]	; 0x70
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d1c:	eb0d 0106 	add.w	r1, sp, r6
 8002d20:	4620      	mov	r0, r4
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d22:	9618      	str	r6, [sp, #96]	; 0x60
  sConfigOC.Pulse = 400;
 8002d24:	9319      	str	r3, [sp, #100]	; 0x64
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d26:	f7ff fa4d 	bl	80021c4 <HAL_TIM_PWM_ConfigChannel>
 8002d2a:	4605      	mov	r5, r0
 8002d2c:	2800      	cmp	r0, #0
 8002d2e:	f47f af17 	bne.w	8002b60 <main+0x15c>
  {
    Error_Handler();
  }

  HAL_TIM_MspPostInit(&htim4);
 8002d32:	4620      	mov	r0, r4
 8002d34:	f000 f956 	bl	8002fe4 <HAL_TIM_MspPostInit>
}

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
  huart1.Instance = USART1;
 8002d38:	4821      	ldr	r0, [pc, #132]	; (8002dc0 <main+0x3bc>)
  huart1.Init.BaudRate = 115200;
 8002d3a:	4a22      	ldr	r2, [pc, #136]	; (8002dc4 <main+0x3c0>)
 8002d3c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d40:	6085      	str	r5, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d42:	60c5      	str	r5, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d44:	6105      	str	r5, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d46:	6185      	str	r5, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d48:	61c5      	str	r5, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d4a:	6205      	str	r5, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d4c:	6245      	str	r5, [r0, #36]	; 0x24

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 8002d4e:	e880 000c 	stmia.w	r0, {r2, r3}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d52:	230c      	movs	r3, #12
 8002d54:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d56:	f7ff fd2a 	bl	80027ae <HAL_UART_Init>
 8002d5a:	4604      	mov	r4, r0
 8002d5c:	2800      	cmp	r0, #0
 8002d5e:	f47f aeff 	bne.w	8002b60 <main+0x15c>
  MX_USART1_UART_Init();

  //buzzer
  //HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);

  Set_Left(0, FORWARD);
 8002d62:	2101      	movs	r1, #1
 8002d64:	f7ff fd7e 	bl	8002864 <Set_Left>
  Set_Right(0, FORWARD);
 8002d68:	4620      	mov	r0, r4
 8002d6a:	2101      	movs	r1, #1
  //END STARTUP

  //MAIN INFINITE PROGRAM LOOP
  while (1)
  {
	  sprintf(buffer, "L Value: %d  LF Value: %d \r\nRF Value: %d R Value: %d \r\n--------------------- \r\n", ADC_valbuffer[0], ADC_valbuffer[1], ADC_valbuffer[2], ADC_valbuffer[3]); //lf, rf, r);
 8002d6c:	4c0c      	ldr	r4, [pc, #48]	; (8002da0 <main+0x39c>)

  //buzzer
  //HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);

  Set_Left(0, FORWARD);
  Set_Right(0, FORWARD);
 8002d6e:	f7ff fda5 	bl	80028bc <Set_Right>

  //turn on emitters at startup CHECK main.h for #defines
  HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, ON);
 8002d72:	2201      	movs	r2, #1
 8002d74:	2120      	movs	r1, #32
 8002d76:	4814      	ldr	r0, [pc, #80]	; (8002dc8 <main+0x3c4>)
 8002d78:	f7fe f81a 	bl	8000db0 <HAL_GPIO_WritePin>
  //END STARTUP

  //MAIN INFINITE PROGRAM LOOP
  while (1)
  {
	  sprintf(buffer, "L Value: %d  LF Value: %d \r\nRF Value: %d R Value: %d \r\n--------------------- \r\n", ADC_valbuffer[0], ADC_valbuffer[1], ADC_valbuffer[2], ADC_valbuffer[3]); //lf, rf, r);
 8002d7c:	68e3      	ldr	r3, [r4, #12]
 8002d7e:	4913      	ldr	r1, [pc, #76]	; (8002dcc <main+0x3c8>)
 8002d80:	9301      	str	r3, [sp, #4]
 8002d82:	68a3      	ldr	r3, [r4, #8]
 8002d84:	4812      	ldr	r0, [pc, #72]	; (8002dd0 <main+0x3cc>)
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002d8c:	f000 f9e8 	bl	8003160 <siprintf>
	  Transmit(buffer); //transmit the message above
 8002d90:	480f      	ldr	r0, [pc, #60]	; (8002dd0 <main+0x3cc>)
 8002d92:	f7ff fd3f 	bl	8002814 <Transmit>
	  HAL_Delay(100); //delay won't affect interrupts
 8002d96:	2064      	movs	r0, #100	; 0x64
 8002d98:	f7fd faea 	bl	8000370 <HAL_Delay>
 8002d9c:	e7ee      	b.n	8002d7c <main+0x378>
 8002d9e:	bf00      	nop
 8002da0:	200002b8 	.word	0x200002b8
 8002da4:	200083bc 	.word	0x200083bc
 8002da8:	40013000 	.word	0x40013000
 8002dac:	200082b8 	.word	0x200082b8
 8002db0:	40010000 	.word	0x40010000
 8002db4:	20008420 	.word	0x20008420
 8002db8:	200000fc 	.word	0x200000fc
 8002dbc:	40000800 	.word	0x40000800
 8002dc0:	20000180 	.word	0x20000180
 8002dc4:	40011000 	.word	0x40011000
 8002dc8:	40020400 	.word	0x40020400
 8002dcc:	080039fb 	.word	0x080039fb
 8002dd0:	200001f0 	.word	0x200001f0

08002dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dd4:	b508      	push	{r3, lr}

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dd6:	2003      	movs	r0, #3
 8002dd8:	f7fd fce4 	bl	80007a4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f06f 000b 	mvn.w	r0, #11
 8002de2:	4611      	mov	r1, r2
 8002de4:	f7fd fcf0 	bl	80007c8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002de8:	2200      	movs	r2, #0
 8002dea:	f06f 000a 	mvn.w	r0, #10
 8002dee:	4611      	mov	r1, r2
 8002df0:	f7fd fcea 	bl	80007c8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002df4:	2200      	movs	r2, #0
 8002df6:	f06f 0009 	mvn.w	r0, #9
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	f7fd fce4 	bl	80007c8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002e00:	2200      	movs	r2, #0
 8002e02:	f06f 0004 	mvn.w	r0, #4
 8002e06:	4611      	mov	r1, r2
 8002e08:	f7fd fcde 	bl	80007c8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f06f 0003 	mvn.w	r0, #3
 8002e12:	4611      	mov	r1, r2
 8002e14:	f7fd fcd8 	bl	80007c8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f06f 0001 	mvn.w	r0, #1
 8002e1e:	4611      	mov	r1, r2
 8002e20:	f7fd fcd2 	bl	80007c8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002e24:	2200      	movs	r2, #0
 8002e26:	f04f 30ff 	mov.w	r0, #4294967295
 8002e2a:	4611      	mov	r1, r2

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002e30:	f7fd bcca 	b.w	80007c8 <HAL_NVIC_SetPriority>

08002e34 <HAL_ADC_MspInit>:
{

  GPIO_InitTypeDef GPIO_InitStruct;
  static DMA_HandleTypeDef  hdma_adc;

  if(hadc->Instance==ADC1)
 8002e34:	6802      	ldr	r2, [r0, #0]
 8002e36:	4b2a      	ldr	r3, [pc, #168]	; (8002ee0 <HAL_ADC_MspInit+0xac>)
 8002e38:	429a      	cmp	r2, r3

  /* USER CODE END MspInit 1 */
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e3a:	b570      	push	{r4, r5, r6, lr}
 8002e3c:	4606      	mov	r6, r0
 8002e3e:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;
  static DMA_HandleTypeDef  hdma_adc;

  if(hadc->Instance==ADC1)
 8002e40:	d14b      	bne.n	8002eda <HAL_ADC_MspInit+0xa6>
  {

    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e42:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e46:	2500      	movs	r5, #0
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e48:	2403      	movs	r4, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e4a:	a903      	add	r1, sp, #12
  static DMA_HandleTypeDef  hdma_adc;

  if(hadc->Instance==ADC1)
  {

    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e4e:	4825      	ldr	r0, [pc, #148]	; (8002ee4 <HAL_ADC_MspInit+0xb0>)
  static DMA_HandleTypeDef  hdma_adc;

  if(hadc->Instance==ADC1)
  {

    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e54:	645a      	str	r2, [r3, #68]	; 0x44
 8002e56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e58:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002e5c:	9201      	str	r2, [sp, #4]
 8002e5e:	9a01      	ldr	r2, [sp, #4]

    /* Enable DMA2 clock */
    __HAL_RCC_DMA2_CLK_ENABLE();
 8002e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e62:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002e66:	631a      	str	r2, [r3, #48]	; 0x30
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e6a:	9404      	str	r4, [sp, #16]
  {

    __HAL_RCC_ADC1_CLK_ENABLE();

    /* Enable DMA2 clock */
    __HAL_RCC_DMA2_CLK_ENABLE();
 8002e6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e70:	9505      	str	r5, [sp, #20]
  {

    __HAL_RCC_ADC1_CLK_ENABLE();

    /* Enable DMA2 clock */
    __HAL_RCC_DMA2_CLK_ENABLE();
 8002e72:	9302      	str	r3, [sp, #8]
 8002e74:	9b02      	ldr	r3, [sp, #8]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
 8002e76:	2330      	movs	r3, #48	; 0x30
 8002e78:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e7a:	f7fd fead 	bl	8000bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RF_REC_Pin|R_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e7e:	a903      	add	r1, sp, #12
 8002e80:	4819      	ldr	r0, [pc, #100]	; (8002ee8 <HAL_ADC_MspInit+0xb4>)
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = RF_REC_Pin|R_REC_Pin;
 8002e82:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e84:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e86:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e88:	f7fd fea6 	bl	8000bd8 <HAL_GPIO_Init>

    hdma_adc.Instance = DMA2_Stream0;
 8002e8c:	4c17      	ldr	r4, [pc, #92]	; (8002eec <HAL_ADC_MspInit+0xb8>)
 8002e8e:	4b18      	ldr	r3, [pc, #96]	; (8002ef0 <HAL_ADC_MspInit+0xbc>)
    hdma_adc.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    hdma_adc.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
    hdma_adc.Init.MemBurst = DMA_MBURST_SINGLE;
    hdma_adc.Init.PeriphBurst = DMA_PBURST_SINGLE;

    HAL_DMA_Init(&hdma_adc);
 8002e90:	4620      	mov	r0, r4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    hdma_adc.Instance = DMA2_Stream0;
    hdma_adc.Init.Channel  = DMA_CHANNEL_0;
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e92:	60a5      	str	r5, [r4, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e94:	60e5      	str	r5, [r4, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc.Init.Mode = DMA_CIRCULAR;
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_adc.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e96:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_adc.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
    hdma_adc.Init.MemBurst = DMA_MBURST_SINGLE;
 8002e98:	62e5      	str	r5, [r4, #44]	; 0x2c
    hdma_adc.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002e9a:	6325      	str	r5, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    hdma_adc.Instance = DMA2_Stream0;
    hdma_adc.Init.Channel  = DMA_CHANNEL_0;
 8002e9c:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002ea0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ea4:	6123      	str	r3, [r4, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ea6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eaa:	6163      	str	r3, [r4, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002eac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002eb0:	61a3      	str	r3, [r4, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002eb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eb6:	61e3      	str	r3, [r4, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8002eb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ebc:	6223      	str	r3, [r4, #32]
    hdma_adc.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    hdma_adc.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	62a3      	str	r3, [r4, #40]	; 0x28
    hdma_adc.Init.MemBurst = DMA_MBURST_SINGLE;
    hdma_adc.Init.PeriphBurst = DMA_PBURST_SINGLE;

    HAL_DMA_Init(&hdma_adc);
 8002ec2:	f7fd fd03 	bl	80008cc <HAL_DMA_Init>

      /* Associate the initialized DMA handle to the ADC handle */
    __HAL_LINKDMA(hadc, DMA_Handle, hdma_adc);
 8002ec6:	63b4      	str	r4, [r6, #56]	; 0x38

      /*##-4- Configure the NVIC for DMA #########################################*/
      /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002ec8:	2038      	movs	r0, #56	; 0x38
 8002eca:	462a      	mov	r2, r5
 8002ecc:	4629      	mov	r1, r5
    hdma_adc.Init.PeriphBurst = DMA_PBURST_SINGLE;

    HAL_DMA_Init(&hdma_adc);

      /* Associate the initialized DMA handle to the ADC handle */
    __HAL_LINKDMA(hadc, DMA_Handle, hdma_adc);
 8002ece:	63a6      	str	r6, [r4, #56]	; 0x38

      /*##-4- Configure the NVIC for DMA #########################################*/
      /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002ed0:	f7fd fc7a 	bl	80007c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002ed4:	2038      	movs	r0, #56	; 0x38
 8002ed6:	f7fd fcaf 	bl	8000838 <HAL_NVIC_EnableIRQ>

  }

}
 8002eda:	b008      	add	sp, #32
 8002edc:	bd70      	pop	{r4, r5, r6, pc}
 8002ede:	bf00      	nop
 8002ee0:	40012000 	.word	0x40012000
 8002ee4:	40020800 	.word	0x40020800
 8002ee8:	40020400 	.word	0x40020400
 8002eec:	2000008c 	.word	0x2000008c
 8002ef0:	40026410 	.word	0x40026410

08002ef4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8002ef4:	6802      	ldr	r2, [r0, #0]
 8002ef6:	4b14      	ldr	r3, [pc, #80]	; (8002f48 <HAL_SPI_MspInit+0x54>)
 8002ef8:	429a      	cmp	r2, r3


}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002efa:	b510      	push	{r4, lr}
 8002efc:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8002efe:	d120      	bne.n	8002f42 <HAL_SPI_MspInit+0x4e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f00:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GYRO_SCLK_Pin|GYRO_MISO_Pin|GYRO_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f04:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f06:	a901      	add	r1, sp, #4
 8002f08:	4810      	ldr	r0, [pc, #64]	; (8002f4c <HAL_SPI_MspInit+0x58>)
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f10:	645a      	str	r2, [r3, #68]	; 0x44
 8002f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GYRO_SCLK_Pin|GYRO_MISO_Pin|GYRO_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f14:	9403      	str	r4, [sp, #12]
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	9b00      	ldr	r3, [sp, #0]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GYRO_SCLK_Pin|GYRO_MISO_Pin|GYRO_MOSI_Pin;
 8002f1e:	23e0      	movs	r3, #224	; 0xe0
 8002f20:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f22:	2302      	movs	r3, #2
 8002f24:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f26:	2303      	movs	r3, #3
 8002f28:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f2a:	2305      	movs	r3, #5
 8002f2c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f2e:	f7fd fe53 	bl	8000bd8 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 8002f32:	2023      	movs	r0, #35	; 0x23
 8002f34:	4622      	mov	r2, r4
 8002f36:	2101      	movs	r1, #1
 8002f38:	f7fd fc46 	bl	80007c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002f3c:	2023      	movs	r0, #35	; 0x23
 8002f3e:	f7fd fc7b 	bl	8000838 <HAL_NVIC_EnableIRQ>

  }

}
 8002f42:	b006      	add	sp, #24
 8002f44:	bd10      	pop	{r4, pc}
 8002f46:	bf00      	nop
 8002f48:	40013000 	.word	0x40013000
 8002f4c:	40020000 	.word	0x40020000

08002f50 <HAL_TIM_IC_MspInit>:
  /* USER CODE END SPI1_MspDeInit 1 */

}

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002f50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_ic->Instance==TIM1)
 8002f52:	6802      	ldr	r2, [r0, #0]
 8002f54:	4b0f      	ldr	r3, [pc, #60]	; (8002f94 <HAL_TIM_IC_MspInit+0x44>)
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d118      	bne.n	8002f8c <HAL_TIM_IC_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f5a:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
    GPIO_InitStruct.Pin = LENC_CHB_Pin|LENC_CHA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f5e:	a901      	add	r1, sp, #4
 8002f60:	480d      	ldr	r0, [pc, #52]	; (8002f98 <HAL_TIM_IC_MspInit+0x48>)
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f64:	f042 0201 	orr.w	r2, r2, #1
 8002f68:	645a      	str	r2, [r3, #68]	; 0x44
 8002f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	9b00      	ldr	r3, [sp, #0]
  
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = LENC_CHB_Pin|LENC_CHA_Pin;
 8002f74:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002f78:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f82:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002f84:	2301      	movs	r3, #1
 8002f86:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f88:	f7fd fe26 	bl	8000bd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002f8c:	b007      	add	sp, #28
 8002f8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f92:	bf00      	nop
 8002f94:	40010000 	.word	0x40010000
 8002f98:	40021000 	.word	0x40021000

08002f9c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM2)
 8002f9c:	6803      	ldr	r3, [r0, #0]
  /* USER CODE END TIM1_MspInit 1 */
  }
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002f9e:	b082      	sub	sp, #8

  if(htim_pwm->Instance==TIM2)
 8002fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa4:	d10b      	bne.n	8002fbe <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fa6:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8002faa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fac:	f042 0201 	orr.w	r2, r2, #1
 8002fb0:	641a      	str	r2, [r3, #64]	; 0x40
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	9b00      	ldr	r3, [sp, #0]
 8002fbc:	e00c      	b.n	8002fd8 <HAL_TIM_PWM_MspInit+0x3c>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM4)
 8002fbe:	4a07      	ldr	r2, [pc, #28]	; (8002fdc <HAL_TIM_PWM_MspInit+0x40>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d109      	bne.n	8002fd8 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002fc4:	4b06      	ldr	r3, [pc, #24]	; (8002fe0 <HAL_TIM_PWM_MspInit+0x44>)
 8002fc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fc8:	f042 0204 	orr.w	r2, r2, #4
 8002fcc:	641a      	str	r2, [r3, #64]	; 0x40
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	9301      	str	r3, [sp, #4]
 8002fd6:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002fd8:	b002      	add	sp, #8
 8002fda:	4770      	bx	lr
 8002fdc:	40000800 	.word	0x40000800
 8002fe0:	40023800 	.word	0x40023800

08002fe4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002fe4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM2)
 8002fe6:	6803      	ldr	r3, [r0, #0]
 8002fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fec:	d10b      	bne.n	8003006 <HAL_TIM_MspPostInit+0x22>

    /**TIM2 GPIO Configuration    
    PA0/WKUP     ------> TIM2_CH1
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = RPWM_Pin|LPWM_Pin;
 8002fee:	2305      	movs	r3, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ff0:	a901      	add	r1, sp, #4
 8002ff2:	480e      	ldr	r0, [pc, #56]	; (800302c <HAL_TIM_MspPostInit+0x48>)

    /**TIM2 GPIO Configuration    
    PA0/WKUP     ------> TIM2_CH1
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = RPWM_Pin|LPWM_Pin;
 8002ff4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002ffe:	2301      	movs	r3, #1
 8003000:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003002:	9305      	str	r3, [sp, #20]
 8003004:	e00d      	b.n	8003022 <HAL_TIM_MspPostInit+0x3e>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM4)
 8003006:	4a0a      	ldr	r2, [pc, #40]	; (8003030 <HAL_TIM_MspPostInit+0x4c>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d10c      	bne.n	8003026 <HAL_TIM_MspPostInit+0x42>
  /* USER CODE END TIM4_MspPostInit 0 */
  
    /**TIM4 GPIO Configuration    
    PD12     ------> TIM4_CH1 
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 800300c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003010:	2200      	movs	r2, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8003012:	a901      	add	r1, sp, #4
 8003014:	4807      	ldr	r0, [pc, #28]	; (8003034 <HAL_TIM_MspPostInit+0x50>)
  /* USER CODE END TIM4_MspPostInit 0 */
  
    /**TIM4 GPIO Configuration    
    PD12     ------> TIM4_CH1 
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8003016:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003018:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301a:	9203      	str	r2, [sp, #12]
  
    /**TIM4 GPIO Configuration    
    PD12     ------> TIM4_CH1 
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800301e:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003020:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8003022:	f7fd fdd9 	bl	8000bd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003026:	b007      	add	sp, #28
 8003028:	f85d fb04 	ldr.w	pc, [sp], #4
 800302c:	40020000 	.word	0x40020000
 8003030:	40000800 	.word	0x40000800
 8003034:	40020c00 	.word	0x40020c00

08003038 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003038:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800303a:	6802      	ldr	r2, [r0, #0]
 800303c:	4b0f      	ldr	r3, [pc, #60]	; (800307c <HAL_UART_MspInit+0x44>)
 800303e:	429a      	cmp	r2, r3
 8003040:	d119      	bne.n	8003076 <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003042:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003046:	a901      	add	r1, sp, #4
 8003048:	480d      	ldr	r0, [pc, #52]	; (8003080 <HAL_UART_MspInit+0x48>)
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800304a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800304c:	f042 0210 	orr.w	r2, r2, #16
 8003050:	645a      	str	r2, [r3, #68]	; 0x44
 8003052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003054:	f003 0310 	and.w	r3, r3, #16
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	9b00      	ldr	r3, [sp, #0]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800305c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003060:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003062:	2302      	movs	r3, #2
 8003064:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003066:	2301      	movs	r3, #1
 8003068:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800306a:	2303      	movs	r3, #3
 800306c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800306e:	2307      	movs	r3, #7
 8003070:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003072:	f7fd fdb1 	bl	8000bd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003076:	b007      	add	sp, #28
 8003078:	f85d fb04 	ldr.w	pc, [sp], #4
 800307c:	40011000 	.word	0x40011000
 8003080:	40020000 	.word	0x40020000

08003084 <NMI_Handler>:
 8003084:	4770      	bx	lr

08003086 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003086:	e7fe      	b.n	8003086 <HardFault_Handler>

08003088 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003088:	e7fe      	b.n	8003088 <MemManage_Handler>

0800308a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800308a:	e7fe      	b.n	800308a <BusFault_Handler>

0800308c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800308c:	e7fe      	b.n	800308c <UsageFault_Handler>

0800308e <SVC_Handler>:
 800308e:	4770      	bx	lr

08003090 <DebugMon_Handler>:
 8003090:	4770      	bx	lr

08003092 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003092:	4770      	bx	lr

08003094 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003094:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003096:	f7fd f95d 	bl	8000354 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800309a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 800309e:	f7fd bbfa 	b.w	8000896 <HAL_SYSTICK_IRQHandler>

080030a2 <EXTI15_10_IRQHandler>:
  /* USER CODE END SysTick_IRQn 1 */
}

void EXTI15_10_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80030a2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80030a6:	f7fd be8b 	b.w	8000dc0 <HAL_GPIO_EXTI_IRQHandler>

080030aa <EXTI9_5_IRQHandler>:
}

void EXTI9_5_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80030aa:	2040      	movs	r0, #64	; 0x40
 80030ac:	f7fd be88 	b.w	8000dc0 <HAL_GPIO_EXTI_IRQHandler>

080030b0 <DMA2_Stream0_IRQHandler>:
}

void DMA2_Stream0_IRQHandler(void)
{
  HAL_DMA_IRQHandler(hadc1.DMA_Handle);
 80030b0:	4b01      	ldr	r3, [pc, #4]	; (80030b8 <DMA2_Stream0_IRQHandler+0x8>)
 80030b2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80030b4:	f7fd bcd2 	b.w	8000a5c <HAL_DMA_IRQHandler>
 80030b8:	20000138 	.word	0x20000138

080030bc <SPI1_IRQHandler>:
}

void SPI1_IRQHandler(void)
{
  HAL_SPI_IRQHandler(&hspi1);
 80030bc:	4801      	ldr	r0, [pc, #4]	; (80030c4 <SPI1_IRQHandler+0x8>)
 80030be:	f7fe bd43 	b.w	8001b48 <HAL_SPI_IRQHandler>
 80030c2:	bf00      	nop
 80030c4:	200083bc 	.word	0x200083bc

080030c8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030c8:	490f      	ldr	r1, [pc, #60]	; (8003108 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80030ca:	2000      	movs	r0, #0
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030cc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80030d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80030d8:	4b0c      	ldr	r3, [pc, #48]	; (800310c <SystemInit+0x44>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	f042 0201 	orr.w	r2, r2, #1
 80030e0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80030e2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80030ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80030ee:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80030f0:	4a07      	ldr	r2, [pc, #28]	; (8003110 <SystemInit+0x48>)
 80030f2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030fa:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80030fc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80030fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003102:	608b      	str	r3, [r1, #8]
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	e000ed00 	.word	0xe000ed00
 800310c:	40023800 	.word	0x40023800
 8003110:	24003010 	.word	0x24003010

08003114 <__libc_init_array>:
 8003114:	b570      	push	{r4, r5, r6, lr}
 8003116:	4b0e      	ldr	r3, [pc, #56]	; (8003150 <__libc_init_array+0x3c>)
 8003118:	4c0e      	ldr	r4, [pc, #56]	; (8003154 <__libc_init_array+0x40>)
 800311a:	1ae4      	subs	r4, r4, r3
 800311c:	10a4      	asrs	r4, r4, #2
 800311e:	2500      	movs	r5, #0
 8003120:	461e      	mov	r6, r3
 8003122:	42a5      	cmp	r5, r4
 8003124:	d004      	beq.n	8003130 <__libc_init_array+0x1c>
 8003126:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800312a:	4798      	blx	r3
 800312c:	3501      	adds	r5, #1
 800312e:	e7f8      	b.n	8003122 <__libc_init_array+0xe>
 8003130:	f000 fc46 	bl	80039c0 <_init>
 8003134:	4c08      	ldr	r4, [pc, #32]	; (8003158 <__libc_init_array+0x44>)
 8003136:	4b09      	ldr	r3, [pc, #36]	; (800315c <__libc_init_array+0x48>)
 8003138:	1ae4      	subs	r4, r4, r3
 800313a:	10a4      	asrs	r4, r4, #2
 800313c:	2500      	movs	r5, #0
 800313e:	461e      	mov	r6, r3
 8003140:	42a5      	cmp	r5, r4
 8003142:	d004      	beq.n	800314e <__libc_init_array+0x3a>
 8003144:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003148:	4798      	blx	r3
 800314a:	3501      	adds	r5, #1
 800314c:	e7f8      	b.n	8003140 <__libc_init_array+0x2c>
 800314e:	bd70      	pop	{r4, r5, r6, pc}
 8003150:	08003a98 	.word	0x08003a98
 8003154:	08003a98 	.word	0x08003a98
 8003158:	08003a9c 	.word	0x08003a9c
 800315c:	08003a98 	.word	0x08003a98

08003160 <siprintf>:
 8003160:	b40e      	push	{r1, r2, r3}
 8003162:	b500      	push	{lr}
 8003164:	b09c      	sub	sp, #112	; 0x70
 8003166:	f44f 7102 	mov.w	r1, #520	; 0x208
 800316a:	ab1d      	add	r3, sp, #116	; 0x74
 800316c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003170:	9002      	str	r0, [sp, #8]
 8003172:	9006      	str	r0, [sp, #24]
 8003174:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003178:	480a      	ldr	r0, [pc, #40]	; (80031a4 <siprintf+0x44>)
 800317a:	9104      	str	r1, [sp, #16]
 800317c:	9107      	str	r1, [sp, #28]
 800317e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003182:	f853 2b04 	ldr.w	r2, [r3], #4
 8003186:	f8ad 1016 	strh.w	r1, [sp, #22]
 800318a:	6800      	ldr	r0, [r0, #0]
 800318c:	9301      	str	r3, [sp, #4]
 800318e:	a902      	add	r1, sp, #8
 8003190:	f000 f864 	bl	800325c <_svfiprintf_r>
 8003194:	9b02      	ldr	r3, [sp, #8]
 8003196:	2200      	movs	r2, #0
 8003198:	701a      	strb	r2, [r3, #0]
 800319a:	b01c      	add	sp, #112	; 0x70
 800319c:	f85d eb04 	ldr.w	lr, [sp], #4
 80031a0:	b003      	add	sp, #12
 80031a2:	4770      	bx	lr
 80031a4:	20000064 	.word	0x20000064

080031a8 <__ssputs_r>:
 80031a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031ac:	688e      	ldr	r6, [r1, #8]
 80031ae:	429e      	cmp	r6, r3
 80031b0:	4682      	mov	sl, r0
 80031b2:	460c      	mov	r4, r1
 80031b4:	4691      	mov	r9, r2
 80031b6:	4698      	mov	r8, r3
 80031b8:	d83e      	bhi.n	8003238 <__ssputs_r+0x90>
 80031ba:	898a      	ldrh	r2, [r1, #12]
 80031bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80031c0:	d03a      	beq.n	8003238 <__ssputs_r+0x90>
 80031c2:	6825      	ldr	r5, [r4, #0]
 80031c4:	6909      	ldr	r1, [r1, #16]
 80031c6:	1a6f      	subs	r7, r5, r1
 80031c8:	6965      	ldr	r5, [r4, #20]
 80031ca:	2302      	movs	r3, #2
 80031cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031d0:	fb95 f5f3 	sdiv	r5, r5, r3
 80031d4:	1c7b      	adds	r3, r7, #1
 80031d6:	4443      	add	r3, r8
 80031d8:	429d      	cmp	r5, r3
 80031da:	bf38      	it	cc
 80031dc:	461d      	movcc	r5, r3
 80031de:	0553      	lsls	r3, r2, #21
 80031e0:	d50f      	bpl.n	8003202 <__ssputs_r+0x5a>
 80031e2:	4629      	mov	r1, r5
 80031e4:	f000 fb3e 	bl	8003864 <_malloc_r>
 80031e8:	4606      	mov	r6, r0
 80031ea:	b198      	cbz	r0, 8003214 <__ssputs_r+0x6c>
 80031ec:	463a      	mov	r2, r7
 80031ee:	6921      	ldr	r1, [r4, #16]
 80031f0:	f000 fac4 	bl	800377c <memcpy>
 80031f4:	89a3      	ldrh	r3, [r4, #12]
 80031f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80031fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031fe:	81a3      	strh	r3, [r4, #12]
 8003200:	e013      	b.n	800322a <__ssputs_r+0x82>
 8003202:	462a      	mov	r2, r5
 8003204:	f000 fb8c 	bl	8003920 <_realloc_r>
 8003208:	4606      	mov	r6, r0
 800320a:	b970      	cbnz	r0, 800322a <__ssputs_r+0x82>
 800320c:	6921      	ldr	r1, [r4, #16]
 800320e:	4650      	mov	r0, sl
 8003210:	f000 fada 	bl	80037c8 <_free_r>
 8003214:	230c      	movs	r3, #12
 8003216:	f8ca 3000 	str.w	r3, [sl]
 800321a:	89a3      	ldrh	r3, [r4, #12]
 800321c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003220:	81a3      	strh	r3, [r4, #12]
 8003222:	f04f 30ff 	mov.w	r0, #4294967295
 8003226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800322a:	6126      	str	r6, [r4, #16]
 800322c:	6165      	str	r5, [r4, #20]
 800322e:	443e      	add	r6, r7
 8003230:	1bed      	subs	r5, r5, r7
 8003232:	6026      	str	r6, [r4, #0]
 8003234:	60a5      	str	r5, [r4, #8]
 8003236:	4646      	mov	r6, r8
 8003238:	4546      	cmp	r6, r8
 800323a:	bf28      	it	cs
 800323c:	4646      	movcs	r6, r8
 800323e:	4632      	mov	r2, r6
 8003240:	4649      	mov	r1, r9
 8003242:	6820      	ldr	r0, [r4, #0]
 8003244:	f000 faa5 	bl	8003792 <memmove>
 8003248:	68a3      	ldr	r3, [r4, #8]
 800324a:	1b9b      	subs	r3, r3, r6
 800324c:	60a3      	str	r3, [r4, #8]
 800324e:	6823      	ldr	r3, [r4, #0]
 8003250:	441e      	add	r6, r3
 8003252:	6026      	str	r6, [r4, #0]
 8003254:	2000      	movs	r0, #0
 8003256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800325c <_svfiprintf_r>:
 800325c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003260:	b09d      	sub	sp, #116	; 0x74
 8003262:	4680      	mov	r8, r0
 8003264:	9303      	str	r3, [sp, #12]
 8003266:	898b      	ldrh	r3, [r1, #12]
 8003268:	061c      	lsls	r4, r3, #24
 800326a:	460d      	mov	r5, r1
 800326c:	4616      	mov	r6, r2
 800326e:	d50d      	bpl.n	800328c <_svfiprintf_r+0x30>
 8003270:	690b      	ldr	r3, [r1, #16]
 8003272:	b95b      	cbnz	r3, 800328c <_svfiprintf_r+0x30>
 8003274:	2140      	movs	r1, #64	; 0x40
 8003276:	f000 faf5 	bl	8003864 <_malloc_r>
 800327a:	6028      	str	r0, [r5, #0]
 800327c:	6128      	str	r0, [r5, #16]
 800327e:	b918      	cbnz	r0, 8003288 <_svfiprintf_r+0x2c>
 8003280:	230c      	movs	r3, #12
 8003282:	f8c8 3000 	str.w	r3, [r8]
 8003286:	e0cd      	b.n	8003424 <_svfiprintf_r+0x1c8>
 8003288:	2340      	movs	r3, #64	; 0x40
 800328a:	616b      	str	r3, [r5, #20]
 800328c:	2300      	movs	r3, #0
 800328e:	9309      	str	r3, [sp, #36]	; 0x24
 8003290:	2320      	movs	r3, #32
 8003292:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003296:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8003434 <_svfiprintf_r+0x1d8>
 800329a:	2330      	movs	r3, #48	; 0x30
 800329c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032a0:	4637      	mov	r7, r6
 80032a2:	463c      	mov	r4, r7
 80032a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80032a8:	b91b      	cbnz	r3, 80032b2 <_svfiprintf_r+0x56>
 80032aa:	ebb7 0906 	subs.w	r9, r7, r6
 80032ae:	d010      	beq.n	80032d2 <_svfiprintf_r+0x76>
 80032b0:	e003      	b.n	80032ba <_svfiprintf_r+0x5e>
 80032b2:	2b25      	cmp	r3, #37	; 0x25
 80032b4:	d0f9      	beq.n	80032aa <_svfiprintf_r+0x4e>
 80032b6:	4627      	mov	r7, r4
 80032b8:	e7f3      	b.n	80032a2 <_svfiprintf_r+0x46>
 80032ba:	464b      	mov	r3, r9
 80032bc:	4632      	mov	r2, r6
 80032be:	4629      	mov	r1, r5
 80032c0:	4640      	mov	r0, r8
 80032c2:	f7ff ff71 	bl	80031a8 <__ssputs_r>
 80032c6:	3001      	adds	r0, #1
 80032c8:	f000 80a7 	beq.w	800341a <_svfiprintf_r+0x1be>
 80032cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032ce:	444b      	add	r3, r9
 80032d0:	9309      	str	r3, [sp, #36]	; 0x24
 80032d2:	783b      	ldrb	r3, [r7, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 80a0 	beq.w	800341a <_svfiprintf_r+0x1be>
 80032da:	2300      	movs	r3, #0
 80032dc:	f04f 32ff 	mov.w	r2, #4294967295
 80032e0:	9304      	str	r3, [sp, #16]
 80032e2:	9307      	str	r3, [sp, #28]
 80032e4:	9205      	str	r2, [sp, #20]
 80032e6:	9306      	str	r3, [sp, #24]
 80032e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032ec:	931a      	str	r3, [sp, #104]	; 0x68
 80032ee:	2601      	movs	r6, #1
 80032f0:	2205      	movs	r2, #5
 80032f2:	7821      	ldrb	r1, [r4, #0]
 80032f4:	484e      	ldr	r0, [pc, #312]	; (8003430 <_svfiprintf_r+0x1d4>)
 80032f6:	f7fc ff93 	bl	8000220 <memchr>
 80032fa:	1c67      	adds	r7, r4, #1
 80032fc:	9b04      	ldr	r3, [sp, #16]
 80032fe:	b138      	cbz	r0, 8003310 <_svfiprintf_r+0xb4>
 8003300:	4a4b      	ldr	r2, [pc, #300]	; (8003430 <_svfiprintf_r+0x1d4>)
 8003302:	1a80      	subs	r0, r0, r2
 8003304:	fa06 f000 	lsl.w	r0, r6, r0
 8003308:	4318      	orrs	r0, r3
 800330a:	9004      	str	r0, [sp, #16]
 800330c:	463c      	mov	r4, r7
 800330e:	e7ef      	b.n	80032f0 <_svfiprintf_r+0x94>
 8003310:	06d9      	lsls	r1, r3, #27
 8003312:	bf44      	itt	mi
 8003314:	2220      	movmi	r2, #32
 8003316:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800331a:	071a      	lsls	r2, r3, #28
 800331c:	bf44      	itt	mi
 800331e:	222b      	movmi	r2, #43	; 0x2b
 8003320:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003324:	7822      	ldrb	r2, [r4, #0]
 8003326:	2a2a      	cmp	r2, #42	; 0x2a
 8003328:	d003      	beq.n	8003332 <_svfiprintf_r+0xd6>
 800332a:	9a07      	ldr	r2, [sp, #28]
 800332c:	2100      	movs	r1, #0
 800332e:	200a      	movs	r0, #10
 8003330:	e00b      	b.n	800334a <_svfiprintf_r+0xee>
 8003332:	9a03      	ldr	r2, [sp, #12]
 8003334:	1d11      	adds	r1, r2, #4
 8003336:	6812      	ldr	r2, [r2, #0]
 8003338:	9103      	str	r1, [sp, #12]
 800333a:	2a00      	cmp	r2, #0
 800333c:	da10      	bge.n	8003360 <_svfiprintf_r+0x104>
 800333e:	4252      	negs	r2, r2
 8003340:	f043 0002 	orr.w	r0, r3, #2
 8003344:	9207      	str	r2, [sp, #28]
 8003346:	9004      	str	r0, [sp, #16]
 8003348:	e00b      	b.n	8003362 <_svfiprintf_r+0x106>
 800334a:	4627      	mov	r7, r4
 800334c:	3401      	adds	r4, #1
 800334e:	783b      	ldrb	r3, [r7, #0]
 8003350:	3b30      	subs	r3, #48	; 0x30
 8003352:	2b09      	cmp	r3, #9
 8003354:	d803      	bhi.n	800335e <_svfiprintf_r+0x102>
 8003356:	fb00 3202 	mla	r2, r0, r2, r3
 800335a:	2101      	movs	r1, #1
 800335c:	e7f5      	b.n	800334a <_svfiprintf_r+0xee>
 800335e:	b101      	cbz	r1, 8003362 <_svfiprintf_r+0x106>
 8003360:	9207      	str	r2, [sp, #28]
 8003362:	783b      	ldrb	r3, [r7, #0]
 8003364:	2b2e      	cmp	r3, #46	; 0x2e
 8003366:	d11e      	bne.n	80033a6 <_svfiprintf_r+0x14a>
 8003368:	787b      	ldrb	r3, [r7, #1]
 800336a:	2b2a      	cmp	r3, #42	; 0x2a
 800336c:	d10a      	bne.n	8003384 <_svfiprintf_r+0x128>
 800336e:	9b03      	ldr	r3, [sp, #12]
 8003370:	1d1a      	adds	r2, r3, #4
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	9203      	str	r2, [sp, #12]
 8003376:	2b00      	cmp	r3, #0
 8003378:	bfb8      	it	lt
 800337a:	f04f 33ff 	movlt.w	r3, #4294967295
 800337e:	3702      	adds	r7, #2
 8003380:	9305      	str	r3, [sp, #20]
 8003382:	e010      	b.n	80033a6 <_svfiprintf_r+0x14a>
 8003384:	2300      	movs	r3, #0
 8003386:	9305      	str	r3, [sp, #20]
 8003388:	1c78      	adds	r0, r7, #1
 800338a:	4619      	mov	r1, r3
 800338c:	240a      	movs	r4, #10
 800338e:	4607      	mov	r7, r0
 8003390:	3001      	adds	r0, #1
 8003392:	783a      	ldrb	r2, [r7, #0]
 8003394:	3a30      	subs	r2, #48	; 0x30
 8003396:	2a09      	cmp	r2, #9
 8003398:	d803      	bhi.n	80033a2 <_svfiprintf_r+0x146>
 800339a:	fb04 2101 	mla	r1, r4, r1, r2
 800339e:	2301      	movs	r3, #1
 80033a0:	e7f5      	b.n	800338e <_svfiprintf_r+0x132>
 80033a2:	b103      	cbz	r3, 80033a6 <_svfiprintf_r+0x14a>
 80033a4:	9105      	str	r1, [sp, #20]
 80033a6:	2203      	movs	r2, #3
 80033a8:	7839      	ldrb	r1, [r7, #0]
 80033aa:	4822      	ldr	r0, [pc, #136]	; (8003434 <_svfiprintf_r+0x1d8>)
 80033ac:	f7fc ff38 	bl	8000220 <memchr>
 80033b0:	b140      	cbz	r0, 80033c4 <_svfiprintf_r+0x168>
 80033b2:	2340      	movs	r3, #64	; 0x40
 80033b4:	ebcb 0000 	rsb	r0, fp, r0
 80033b8:	fa03 f000 	lsl.w	r0, r3, r0
 80033bc:	9b04      	ldr	r3, [sp, #16]
 80033be:	4318      	orrs	r0, r3
 80033c0:	9004      	str	r0, [sp, #16]
 80033c2:	3701      	adds	r7, #1
 80033c4:	7839      	ldrb	r1, [r7, #0]
 80033c6:	481c      	ldr	r0, [pc, #112]	; (8003438 <_svfiprintf_r+0x1dc>)
 80033c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033cc:	2206      	movs	r2, #6
 80033ce:	1c7e      	adds	r6, r7, #1
 80033d0:	f7fc ff26 	bl	8000220 <memchr>
 80033d4:	b188      	cbz	r0, 80033fa <_svfiprintf_r+0x19e>
 80033d6:	4b19      	ldr	r3, [pc, #100]	; (800343c <_svfiprintf_r+0x1e0>)
 80033d8:	b933      	cbnz	r3, 80033e8 <_svfiprintf_r+0x18c>
 80033da:	9b03      	ldr	r3, [sp, #12]
 80033dc:	3307      	adds	r3, #7
 80033de:	f023 0307 	bic.w	r3, r3, #7
 80033e2:	3308      	adds	r3, #8
 80033e4:	9303      	str	r3, [sp, #12]
 80033e6:	e014      	b.n	8003412 <_svfiprintf_r+0x1b6>
 80033e8:	ab03      	add	r3, sp, #12
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	462a      	mov	r2, r5
 80033ee:	4b14      	ldr	r3, [pc, #80]	; (8003440 <_svfiprintf_r+0x1e4>)
 80033f0:	a904      	add	r1, sp, #16
 80033f2:	4640      	mov	r0, r8
 80033f4:	f3af 8000 	nop.w
 80033f8:	e007      	b.n	800340a <_svfiprintf_r+0x1ae>
 80033fa:	ab03      	add	r3, sp, #12
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	462a      	mov	r2, r5
 8003400:	4b0f      	ldr	r3, [pc, #60]	; (8003440 <_svfiprintf_r+0x1e4>)
 8003402:	a904      	add	r1, sp, #16
 8003404:	4640      	mov	r0, r8
 8003406:	f000 f893 	bl	8003530 <_printf_i>
 800340a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800340e:	4682      	mov	sl, r0
 8003410:	d003      	beq.n	800341a <_svfiprintf_r+0x1be>
 8003412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003414:	4453      	add	r3, sl
 8003416:	9309      	str	r3, [sp, #36]	; 0x24
 8003418:	e742      	b.n	80032a0 <_svfiprintf_r+0x44>
 800341a:	89ab      	ldrh	r3, [r5, #12]
 800341c:	065b      	lsls	r3, r3, #25
 800341e:	d401      	bmi.n	8003424 <_svfiprintf_r+0x1c8>
 8003420:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003422:	e001      	b.n	8003428 <_svfiprintf_r+0x1cc>
 8003424:	f04f 30ff 	mov.w	r0, #4294967295
 8003428:	b01d      	add	sp, #116	; 0x74
 800342a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800342e:	bf00      	nop
 8003430:	08003a65 	.word	0x08003a65
 8003434:	08003a6b 	.word	0x08003a6b
 8003438:	08003a6f 	.word	0x08003a6f
 800343c:	00000000 	.word	0x00000000
 8003440:	080031a9 	.word	0x080031a9

08003444 <_printf_common>:
 8003444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003448:	4691      	mov	r9, r2
 800344a:	461f      	mov	r7, r3
 800344c:	690a      	ldr	r2, [r1, #16]
 800344e:	688b      	ldr	r3, [r1, #8]
 8003450:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003454:	4293      	cmp	r3, r2
 8003456:	bfb8      	it	lt
 8003458:	4613      	movlt	r3, r2
 800345a:	f8c9 3000 	str.w	r3, [r9]
 800345e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003462:	4606      	mov	r6, r0
 8003464:	460c      	mov	r4, r1
 8003466:	b112      	cbz	r2, 800346e <_printf_common+0x2a>
 8003468:	3301      	adds	r3, #1
 800346a:	f8c9 3000 	str.w	r3, [r9]
 800346e:	6823      	ldr	r3, [r4, #0]
 8003470:	0699      	lsls	r1, r3, #26
 8003472:	bf42      	ittt	mi
 8003474:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003478:	3302      	addmi	r3, #2
 800347a:	f8c9 3000 	strmi.w	r3, [r9]
 800347e:	6825      	ldr	r5, [r4, #0]
 8003480:	f015 0506 	ands.w	r5, r5, #6
 8003484:	d110      	bne.n	80034a8 <_printf_common+0x64>
 8003486:	f104 0a19 	add.w	sl, r4, #25
 800348a:	e007      	b.n	800349c <_printf_common+0x58>
 800348c:	2301      	movs	r3, #1
 800348e:	4652      	mov	r2, sl
 8003490:	4639      	mov	r1, r7
 8003492:	4630      	mov	r0, r6
 8003494:	47c0      	blx	r8
 8003496:	3001      	adds	r0, #1
 8003498:	d01a      	beq.n	80034d0 <_printf_common+0x8c>
 800349a:	3501      	adds	r5, #1
 800349c:	68e3      	ldr	r3, [r4, #12]
 800349e:	f8d9 2000 	ldr.w	r2, [r9]
 80034a2:	1a9b      	subs	r3, r3, r2
 80034a4:	429d      	cmp	r5, r3
 80034a6:	dbf1      	blt.n	800348c <_printf_common+0x48>
 80034a8:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80034ac:	6822      	ldr	r2, [r4, #0]
 80034ae:	3300      	adds	r3, #0
 80034b0:	bf18      	it	ne
 80034b2:	2301      	movne	r3, #1
 80034b4:	0692      	lsls	r2, r2, #26
 80034b6:	d50f      	bpl.n	80034d8 <_printf_common+0x94>
 80034b8:	18e1      	adds	r1, r4, r3
 80034ba:	1c5a      	adds	r2, r3, #1
 80034bc:	2030      	movs	r0, #48	; 0x30
 80034be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034c2:	4422      	add	r2, r4
 80034c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034cc:	3302      	adds	r3, #2
 80034ce:	e003      	b.n	80034d8 <_printf_common+0x94>
 80034d0:	f04f 30ff 	mov.w	r0, #4294967295
 80034d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034dc:	4639      	mov	r1, r7
 80034de:	4630      	mov	r0, r6
 80034e0:	47c0      	blx	r8
 80034e2:	3001      	adds	r0, #1
 80034e4:	d0f4      	beq.n	80034d0 <_printf_common+0x8c>
 80034e6:	6822      	ldr	r2, [r4, #0]
 80034e8:	f8d9 5000 	ldr.w	r5, [r9]
 80034ec:	68e3      	ldr	r3, [r4, #12]
 80034ee:	f002 0206 	and.w	r2, r2, #6
 80034f2:	2a04      	cmp	r2, #4
 80034f4:	bf08      	it	eq
 80034f6:	1b5d      	subeq	r5, r3, r5
 80034f8:	6922      	ldr	r2, [r4, #16]
 80034fa:	68a3      	ldr	r3, [r4, #8]
 80034fc:	bf0c      	ite	eq
 80034fe:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003502:	2500      	movne	r5, #0
 8003504:	4293      	cmp	r3, r2
 8003506:	bfc4      	itt	gt
 8003508:	1a9b      	subgt	r3, r3, r2
 800350a:	18ed      	addgt	r5, r5, r3
 800350c:	f04f 0900 	mov.w	r9, #0
 8003510:	341a      	adds	r4, #26
 8003512:	454d      	cmp	r5, r9
 8003514:	d009      	beq.n	800352a <_printf_common+0xe6>
 8003516:	2301      	movs	r3, #1
 8003518:	4622      	mov	r2, r4
 800351a:	4639      	mov	r1, r7
 800351c:	4630      	mov	r0, r6
 800351e:	47c0      	blx	r8
 8003520:	3001      	adds	r0, #1
 8003522:	d0d5      	beq.n	80034d0 <_printf_common+0x8c>
 8003524:	f109 0901 	add.w	r9, r9, #1
 8003528:	e7f3      	b.n	8003512 <_printf_common+0xce>
 800352a:	2000      	movs	r0, #0
 800352c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003530 <_printf_i>:
 8003530:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003534:	4617      	mov	r7, r2
 8003536:	7e0a      	ldrb	r2, [r1, #24]
 8003538:	b085      	sub	sp, #20
 800353a:	2a6e      	cmp	r2, #110	; 0x6e
 800353c:	4698      	mov	r8, r3
 800353e:	4606      	mov	r6, r0
 8003540:	460c      	mov	r4, r1
 8003542:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003544:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003548:	f000 80ae 	beq.w	80036a8 <_printf_i+0x178>
 800354c:	d811      	bhi.n	8003572 <_printf_i+0x42>
 800354e:	2a63      	cmp	r2, #99	; 0x63
 8003550:	d022      	beq.n	8003598 <_printf_i+0x68>
 8003552:	d809      	bhi.n	8003568 <_printf_i+0x38>
 8003554:	2a00      	cmp	r2, #0
 8003556:	f000 80bb 	beq.w	80036d0 <_printf_i+0x1a0>
 800355a:	2a58      	cmp	r2, #88	; 0x58
 800355c:	f040 80ca 	bne.w	80036f4 <_printf_i+0x1c4>
 8003560:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003564:	4983      	ldr	r1, [pc, #524]	; (8003774 <_printf_i+0x244>)
 8003566:	e055      	b.n	8003614 <_printf_i+0xe4>
 8003568:	2a64      	cmp	r2, #100	; 0x64
 800356a:	d01e      	beq.n	80035aa <_printf_i+0x7a>
 800356c:	2a69      	cmp	r2, #105	; 0x69
 800356e:	d01c      	beq.n	80035aa <_printf_i+0x7a>
 8003570:	e0c0      	b.n	80036f4 <_printf_i+0x1c4>
 8003572:	2a73      	cmp	r2, #115	; 0x73
 8003574:	f000 80b0 	beq.w	80036d8 <_printf_i+0x1a8>
 8003578:	d809      	bhi.n	800358e <_printf_i+0x5e>
 800357a:	2a6f      	cmp	r2, #111	; 0x6f
 800357c:	d02e      	beq.n	80035dc <_printf_i+0xac>
 800357e:	2a70      	cmp	r2, #112	; 0x70
 8003580:	f040 80b8 	bne.w	80036f4 <_printf_i+0x1c4>
 8003584:	680a      	ldr	r2, [r1, #0]
 8003586:	f042 0220 	orr.w	r2, r2, #32
 800358a:	600a      	str	r2, [r1, #0]
 800358c:	e03e      	b.n	800360c <_printf_i+0xdc>
 800358e:	2a75      	cmp	r2, #117	; 0x75
 8003590:	d024      	beq.n	80035dc <_printf_i+0xac>
 8003592:	2a78      	cmp	r2, #120	; 0x78
 8003594:	d03a      	beq.n	800360c <_printf_i+0xdc>
 8003596:	e0ad      	b.n	80036f4 <_printf_i+0x1c4>
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800359e:	1d11      	adds	r1, r2, #4
 80035a0:	6019      	str	r1, [r3, #0]
 80035a2:	6813      	ldr	r3, [r2, #0]
 80035a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035a8:	e0a8      	b.n	80036fc <_printf_i+0x1cc>
 80035aa:	6821      	ldr	r1, [r4, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	f011 0f80 	tst.w	r1, #128	; 0x80
 80035b2:	d002      	beq.n	80035ba <_printf_i+0x8a>
 80035b4:	1d11      	adds	r1, r2, #4
 80035b6:	6019      	str	r1, [r3, #0]
 80035b8:	e008      	b.n	80035cc <_printf_i+0x9c>
 80035ba:	f011 0f40 	tst.w	r1, #64	; 0x40
 80035be:	f102 0104 	add.w	r1, r2, #4
 80035c2:	6019      	str	r1, [r3, #0]
 80035c4:	d002      	beq.n	80035cc <_printf_i+0x9c>
 80035c6:	f9b2 3000 	ldrsh.w	r3, [r2]
 80035ca:	e000      	b.n	80035ce <_printf_i+0x9e>
 80035cc:	6813      	ldr	r3, [r2, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	da3c      	bge.n	800364c <_printf_i+0x11c>
 80035d2:	222d      	movs	r2, #45	; 0x2d
 80035d4:	425b      	negs	r3, r3
 80035d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80035da:	e037      	b.n	800364c <_printf_i+0x11c>
 80035dc:	6821      	ldr	r1, [r4, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	f011 0f80 	tst.w	r1, #128	; 0x80
 80035e4:	d002      	beq.n	80035ec <_printf_i+0xbc>
 80035e6:	1d11      	adds	r1, r2, #4
 80035e8:	6019      	str	r1, [r3, #0]
 80035ea:	e007      	b.n	80035fc <_printf_i+0xcc>
 80035ec:	f011 0f40 	tst.w	r1, #64	; 0x40
 80035f0:	f102 0104 	add.w	r1, r2, #4
 80035f4:	6019      	str	r1, [r3, #0]
 80035f6:	d001      	beq.n	80035fc <_printf_i+0xcc>
 80035f8:	8813      	ldrh	r3, [r2, #0]
 80035fa:	e000      	b.n	80035fe <_printf_i+0xce>
 80035fc:	6813      	ldr	r3, [r2, #0]
 80035fe:	7e22      	ldrb	r2, [r4, #24]
 8003600:	495c      	ldr	r1, [pc, #368]	; (8003774 <_printf_i+0x244>)
 8003602:	2a6f      	cmp	r2, #111	; 0x6f
 8003604:	bf14      	ite	ne
 8003606:	220a      	movne	r2, #10
 8003608:	2208      	moveq	r2, #8
 800360a:	e01b      	b.n	8003644 <_printf_i+0x114>
 800360c:	2278      	movs	r2, #120	; 0x78
 800360e:	495a      	ldr	r1, [pc, #360]	; (8003778 <_printf_i+0x248>)
 8003610:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003614:	6822      	ldr	r2, [r4, #0]
 8003616:	6818      	ldr	r0, [r3, #0]
 8003618:	f012 0f80 	tst.w	r2, #128	; 0x80
 800361c:	f100 0504 	add.w	r5, r0, #4
 8003620:	601d      	str	r5, [r3, #0]
 8003622:	d103      	bne.n	800362c <_printf_i+0xfc>
 8003624:	0655      	lsls	r5, r2, #25
 8003626:	d501      	bpl.n	800362c <_printf_i+0xfc>
 8003628:	8803      	ldrh	r3, [r0, #0]
 800362a:	e000      	b.n	800362e <_printf_i+0xfe>
 800362c:	6803      	ldr	r3, [r0, #0]
 800362e:	07d0      	lsls	r0, r2, #31
 8003630:	bf44      	itt	mi
 8003632:	f042 0220 	orrmi.w	r2, r2, #32
 8003636:	6022      	strmi	r2, [r4, #0]
 8003638:	b91b      	cbnz	r3, 8003642 <_printf_i+0x112>
 800363a:	6822      	ldr	r2, [r4, #0]
 800363c:	f022 0220 	bic.w	r2, r2, #32
 8003640:	6022      	str	r2, [r4, #0]
 8003642:	2210      	movs	r2, #16
 8003644:	2000      	movs	r0, #0
 8003646:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800364a:	e001      	b.n	8003650 <_printf_i+0x120>
 800364c:	4949      	ldr	r1, [pc, #292]	; (8003774 <_printf_i+0x244>)
 800364e:	220a      	movs	r2, #10
 8003650:	6865      	ldr	r5, [r4, #4]
 8003652:	60a5      	str	r5, [r4, #8]
 8003654:	2d00      	cmp	r5, #0
 8003656:	db08      	blt.n	800366a <_printf_i+0x13a>
 8003658:	6820      	ldr	r0, [r4, #0]
 800365a:	f020 0004 	bic.w	r0, r0, #4
 800365e:	6020      	str	r0, [r4, #0]
 8003660:	b92b      	cbnz	r3, 800366e <_printf_i+0x13e>
 8003662:	2d00      	cmp	r5, #0
 8003664:	d17d      	bne.n	8003762 <_printf_i+0x232>
 8003666:	4675      	mov	r5, lr
 8003668:	e00c      	b.n	8003684 <_printf_i+0x154>
 800366a:	2b00      	cmp	r3, #0
 800366c:	d079      	beq.n	8003762 <_printf_i+0x232>
 800366e:	4675      	mov	r5, lr
 8003670:	fbb3 f0f2 	udiv	r0, r3, r2
 8003674:	fb02 3310 	mls	r3, r2, r0, r3
 8003678:	5ccb      	ldrb	r3, [r1, r3]
 800367a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800367e:	4603      	mov	r3, r0
 8003680:	2800      	cmp	r0, #0
 8003682:	d1f5      	bne.n	8003670 <_printf_i+0x140>
 8003684:	2a08      	cmp	r2, #8
 8003686:	d10b      	bne.n	80036a0 <_printf_i+0x170>
 8003688:	6823      	ldr	r3, [r4, #0]
 800368a:	07da      	lsls	r2, r3, #31
 800368c:	d508      	bpl.n	80036a0 <_printf_i+0x170>
 800368e:	6923      	ldr	r3, [r4, #16]
 8003690:	6862      	ldr	r2, [r4, #4]
 8003692:	429a      	cmp	r2, r3
 8003694:	bfde      	ittt	le
 8003696:	2330      	movle	r3, #48	; 0x30
 8003698:	f805 3c01 	strble.w	r3, [r5, #-1]
 800369c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80036a0:	ebc5 030e 	rsb	r3, r5, lr
 80036a4:	6123      	str	r3, [r4, #16]
 80036a6:	e02e      	b.n	8003706 <_printf_i+0x1d6>
 80036a8:	6808      	ldr	r0, [r1, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	6949      	ldr	r1, [r1, #20]
 80036ae:	f010 0f80 	tst.w	r0, #128	; 0x80
 80036b2:	d003      	beq.n	80036bc <_printf_i+0x18c>
 80036b4:	1d10      	adds	r0, r2, #4
 80036b6:	6018      	str	r0, [r3, #0]
 80036b8:	6813      	ldr	r3, [r2, #0]
 80036ba:	e008      	b.n	80036ce <_printf_i+0x19e>
 80036bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80036c0:	f102 0004 	add.w	r0, r2, #4
 80036c4:	6018      	str	r0, [r3, #0]
 80036c6:	6813      	ldr	r3, [r2, #0]
 80036c8:	d001      	beq.n	80036ce <_printf_i+0x19e>
 80036ca:	8019      	strh	r1, [r3, #0]
 80036cc:	e000      	b.n	80036d0 <_printf_i+0x1a0>
 80036ce:	6019      	str	r1, [r3, #0]
 80036d0:	2300      	movs	r3, #0
 80036d2:	6123      	str	r3, [r4, #16]
 80036d4:	4675      	mov	r5, lr
 80036d6:	e016      	b.n	8003706 <_printf_i+0x1d6>
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	1d11      	adds	r1, r2, #4
 80036dc:	6019      	str	r1, [r3, #0]
 80036de:	6815      	ldr	r5, [r2, #0]
 80036e0:	6862      	ldr	r2, [r4, #4]
 80036e2:	2100      	movs	r1, #0
 80036e4:	4628      	mov	r0, r5
 80036e6:	f7fc fd9b 	bl	8000220 <memchr>
 80036ea:	b108      	cbz	r0, 80036f0 <_printf_i+0x1c0>
 80036ec:	1b40      	subs	r0, r0, r5
 80036ee:	6060      	str	r0, [r4, #4]
 80036f0:	6863      	ldr	r3, [r4, #4]
 80036f2:	e004      	b.n	80036fe <_printf_i+0x1ce>
 80036f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036f8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80036fc:	2301      	movs	r3, #1
 80036fe:	6123      	str	r3, [r4, #16]
 8003700:	2300      	movs	r3, #0
 8003702:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003706:	f8cd 8000 	str.w	r8, [sp]
 800370a:	463b      	mov	r3, r7
 800370c:	aa03      	add	r2, sp, #12
 800370e:	4621      	mov	r1, r4
 8003710:	4630      	mov	r0, r6
 8003712:	f7ff fe97 	bl	8003444 <_printf_common>
 8003716:	3001      	adds	r0, #1
 8003718:	d102      	bne.n	8003720 <_printf_i+0x1f0>
 800371a:	f04f 30ff 	mov.w	r0, #4294967295
 800371e:	e026      	b.n	800376e <_printf_i+0x23e>
 8003720:	6923      	ldr	r3, [r4, #16]
 8003722:	462a      	mov	r2, r5
 8003724:	4639      	mov	r1, r7
 8003726:	4630      	mov	r0, r6
 8003728:	47c0      	blx	r8
 800372a:	3001      	adds	r0, #1
 800372c:	d0f5      	beq.n	800371a <_printf_i+0x1ea>
 800372e:	6823      	ldr	r3, [r4, #0]
 8003730:	079b      	lsls	r3, r3, #30
 8003732:	d510      	bpl.n	8003756 <_printf_i+0x226>
 8003734:	2500      	movs	r5, #0
 8003736:	f104 0919 	add.w	r9, r4, #25
 800373a:	e007      	b.n	800374c <_printf_i+0x21c>
 800373c:	2301      	movs	r3, #1
 800373e:	464a      	mov	r2, r9
 8003740:	4639      	mov	r1, r7
 8003742:	4630      	mov	r0, r6
 8003744:	47c0      	blx	r8
 8003746:	3001      	adds	r0, #1
 8003748:	d0e7      	beq.n	800371a <_printf_i+0x1ea>
 800374a:	3501      	adds	r5, #1
 800374c:	68e3      	ldr	r3, [r4, #12]
 800374e:	9a03      	ldr	r2, [sp, #12]
 8003750:	1a9b      	subs	r3, r3, r2
 8003752:	429d      	cmp	r5, r3
 8003754:	dbf2      	blt.n	800373c <_printf_i+0x20c>
 8003756:	68e0      	ldr	r0, [r4, #12]
 8003758:	9b03      	ldr	r3, [sp, #12]
 800375a:	4298      	cmp	r0, r3
 800375c:	bfb8      	it	lt
 800375e:	4618      	movlt	r0, r3
 8003760:	e005      	b.n	800376e <_printf_i+0x23e>
 8003762:	780b      	ldrb	r3, [r1, #0]
 8003764:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003768:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800376c:	e78a      	b.n	8003684 <_printf_i+0x154>
 800376e:	b005      	add	sp, #20
 8003770:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003774:	08003a76 	.word	0x08003a76
 8003778:	08003a87 	.word	0x08003a87

0800377c <memcpy>:
 800377c:	b510      	push	{r4, lr}
 800377e:	1e43      	subs	r3, r0, #1
 8003780:	440a      	add	r2, r1
 8003782:	4291      	cmp	r1, r2
 8003784:	d004      	beq.n	8003790 <memcpy+0x14>
 8003786:	f811 4b01 	ldrb.w	r4, [r1], #1
 800378a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800378e:	e7f8      	b.n	8003782 <memcpy+0x6>
 8003790:	bd10      	pop	{r4, pc}

08003792 <memmove>:
 8003792:	4288      	cmp	r0, r1
 8003794:	b510      	push	{r4, lr}
 8003796:	eb01 0302 	add.w	r3, r1, r2
 800379a:	d801      	bhi.n	80037a0 <memmove+0xe>
 800379c:	1e42      	subs	r2, r0, #1
 800379e:	e00b      	b.n	80037b8 <memmove+0x26>
 80037a0:	4298      	cmp	r0, r3
 80037a2:	d2fb      	bcs.n	800379c <memmove+0xa>
 80037a4:	1881      	adds	r1, r0, r2
 80037a6:	1ad2      	subs	r2, r2, r3
 80037a8:	42d3      	cmn	r3, r2
 80037aa:	d004      	beq.n	80037b6 <memmove+0x24>
 80037ac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037b0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80037b4:	e7f8      	b.n	80037a8 <memmove+0x16>
 80037b6:	bd10      	pop	{r4, pc}
 80037b8:	4299      	cmp	r1, r3
 80037ba:	d004      	beq.n	80037c6 <memmove+0x34>
 80037bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037c0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80037c4:	e7f8      	b.n	80037b8 <memmove+0x26>
 80037c6:	bd10      	pop	{r4, pc}

080037c8 <_free_r>:
 80037c8:	b538      	push	{r3, r4, r5, lr}
 80037ca:	4605      	mov	r5, r0
 80037cc:	2900      	cmp	r1, #0
 80037ce:	d046      	beq.n	800385e <_free_r+0x96>
 80037d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037d4:	1f0c      	subs	r4, r1, #4
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	bfb8      	it	lt
 80037da:	18e4      	addlt	r4, r4, r3
 80037dc:	f000 f8d6 	bl	800398c <__malloc_lock>
 80037e0:	4a1f      	ldr	r2, [pc, #124]	; (8003860 <_free_r+0x98>)
 80037e2:	6813      	ldr	r3, [r2, #0]
 80037e4:	4611      	mov	r1, r2
 80037e6:	b913      	cbnz	r3, 80037ee <_free_r+0x26>
 80037e8:	6063      	str	r3, [r4, #4]
 80037ea:	6014      	str	r4, [r2, #0]
 80037ec:	e032      	b.n	8003854 <_free_r+0x8c>
 80037ee:	42a3      	cmp	r3, r4
 80037f0:	d90e      	bls.n	8003810 <_free_r+0x48>
 80037f2:	6822      	ldr	r2, [r4, #0]
 80037f4:	18a0      	adds	r0, r4, r2
 80037f6:	4283      	cmp	r3, r0
 80037f8:	bf04      	itt	eq
 80037fa:	6818      	ldreq	r0, [r3, #0]
 80037fc:	685b      	ldreq	r3, [r3, #4]
 80037fe:	6063      	str	r3, [r4, #4]
 8003800:	bf04      	itt	eq
 8003802:	1812      	addeq	r2, r2, r0
 8003804:	6022      	streq	r2, [r4, #0]
 8003806:	600c      	str	r4, [r1, #0]
 8003808:	e024      	b.n	8003854 <_free_r+0x8c>
 800380a:	42a2      	cmp	r2, r4
 800380c:	d803      	bhi.n	8003816 <_free_r+0x4e>
 800380e:	4613      	mov	r3, r2
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	2a00      	cmp	r2, #0
 8003814:	d1f9      	bne.n	800380a <_free_r+0x42>
 8003816:	6818      	ldr	r0, [r3, #0]
 8003818:	1819      	adds	r1, r3, r0
 800381a:	42a1      	cmp	r1, r4
 800381c:	d10b      	bne.n	8003836 <_free_r+0x6e>
 800381e:	6821      	ldr	r1, [r4, #0]
 8003820:	4401      	add	r1, r0
 8003822:	1858      	adds	r0, r3, r1
 8003824:	4282      	cmp	r2, r0
 8003826:	6019      	str	r1, [r3, #0]
 8003828:	d114      	bne.n	8003854 <_free_r+0x8c>
 800382a:	6810      	ldr	r0, [r2, #0]
 800382c:	6852      	ldr	r2, [r2, #4]
 800382e:	605a      	str	r2, [r3, #4]
 8003830:	4401      	add	r1, r0
 8003832:	6019      	str	r1, [r3, #0]
 8003834:	e00e      	b.n	8003854 <_free_r+0x8c>
 8003836:	d902      	bls.n	800383e <_free_r+0x76>
 8003838:	230c      	movs	r3, #12
 800383a:	602b      	str	r3, [r5, #0]
 800383c:	e00a      	b.n	8003854 <_free_r+0x8c>
 800383e:	6821      	ldr	r1, [r4, #0]
 8003840:	1860      	adds	r0, r4, r1
 8003842:	4282      	cmp	r2, r0
 8003844:	bf04      	itt	eq
 8003846:	6810      	ldreq	r0, [r2, #0]
 8003848:	6852      	ldreq	r2, [r2, #4]
 800384a:	6062      	str	r2, [r4, #4]
 800384c:	bf04      	itt	eq
 800384e:	1809      	addeq	r1, r1, r0
 8003850:	6021      	streq	r1, [r4, #0]
 8003852:	605c      	str	r4, [r3, #4]
 8003854:	4628      	mov	r0, r5
 8003856:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800385a:	f000 b898 	b.w	800398e <__malloc_unlock>
 800385e:	bd38      	pop	{r3, r4, r5, pc}
 8003860:	200000f0 	.word	0x200000f0

08003864 <_malloc_r>:
 8003864:	b570      	push	{r4, r5, r6, lr}
 8003866:	1ccd      	adds	r5, r1, #3
 8003868:	f025 0503 	bic.w	r5, r5, #3
 800386c:	3508      	adds	r5, #8
 800386e:	2d0c      	cmp	r5, #12
 8003870:	bf38      	it	cc
 8003872:	250c      	movcc	r5, #12
 8003874:	2d00      	cmp	r5, #0
 8003876:	4606      	mov	r6, r0
 8003878:	db01      	blt.n	800387e <_malloc_r+0x1a>
 800387a:	42a9      	cmp	r1, r5
 800387c:	d902      	bls.n	8003884 <_malloc_r+0x20>
 800387e:	230c      	movs	r3, #12
 8003880:	6033      	str	r3, [r6, #0]
 8003882:	e046      	b.n	8003912 <_malloc_r+0xae>
 8003884:	f000 f882 	bl	800398c <__malloc_lock>
 8003888:	4b23      	ldr	r3, [pc, #140]	; (8003918 <_malloc_r+0xb4>)
 800388a:	681c      	ldr	r4, [r3, #0]
 800388c:	461a      	mov	r2, r3
 800388e:	4621      	mov	r1, r4
 8003890:	b1a1      	cbz	r1, 80038bc <_malloc_r+0x58>
 8003892:	680b      	ldr	r3, [r1, #0]
 8003894:	1b5b      	subs	r3, r3, r5
 8003896:	d40e      	bmi.n	80038b6 <_malloc_r+0x52>
 8003898:	2b0b      	cmp	r3, #11
 800389a:	d903      	bls.n	80038a4 <_malloc_r+0x40>
 800389c:	600b      	str	r3, [r1, #0]
 800389e:	18cc      	adds	r4, r1, r3
 80038a0:	50cd      	str	r5, [r1, r3]
 80038a2:	e01e      	b.n	80038e2 <_malloc_r+0x7e>
 80038a4:	428c      	cmp	r4, r1
 80038a6:	bf0d      	iteet	eq
 80038a8:	6863      	ldreq	r3, [r4, #4]
 80038aa:	684b      	ldrne	r3, [r1, #4]
 80038ac:	6063      	strne	r3, [r4, #4]
 80038ae:	6013      	streq	r3, [r2, #0]
 80038b0:	bf18      	it	ne
 80038b2:	460c      	movne	r4, r1
 80038b4:	e015      	b.n	80038e2 <_malloc_r+0x7e>
 80038b6:	460c      	mov	r4, r1
 80038b8:	6849      	ldr	r1, [r1, #4]
 80038ba:	e7e9      	b.n	8003890 <_malloc_r+0x2c>
 80038bc:	4c17      	ldr	r4, [pc, #92]	; (800391c <_malloc_r+0xb8>)
 80038be:	6823      	ldr	r3, [r4, #0]
 80038c0:	b91b      	cbnz	r3, 80038ca <_malloc_r+0x66>
 80038c2:	4630      	mov	r0, r6
 80038c4:	f000 f852 	bl	800396c <_sbrk_r>
 80038c8:	6020      	str	r0, [r4, #0]
 80038ca:	4629      	mov	r1, r5
 80038cc:	4630      	mov	r0, r6
 80038ce:	f000 f84d 	bl	800396c <_sbrk_r>
 80038d2:	1c43      	adds	r3, r0, #1
 80038d4:	d018      	beq.n	8003908 <_malloc_r+0xa4>
 80038d6:	1cc4      	adds	r4, r0, #3
 80038d8:	f024 0403 	bic.w	r4, r4, #3
 80038dc:	42a0      	cmp	r0, r4
 80038de:	d10d      	bne.n	80038fc <_malloc_r+0x98>
 80038e0:	6025      	str	r5, [r4, #0]
 80038e2:	4630      	mov	r0, r6
 80038e4:	f000 f853 	bl	800398e <__malloc_unlock>
 80038e8:	f104 000b 	add.w	r0, r4, #11
 80038ec:	1d23      	adds	r3, r4, #4
 80038ee:	f020 0007 	bic.w	r0, r0, #7
 80038f2:	1ac3      	subs	r3, r0, r3
 80038f4:	d00e      	beq.n	8003914 <_malloc_r+0xb0>
 80038f6:	425a      	negs	r2, r3
 80038f8:	50e2      	str	r2, [r4, r3]
 80038fa:	bd70      	pop	{r4, r5, r6, pc}
 80038fc:	1a21      	subs	r1, r4, r0
 80038fe:	4630      	mov	r0, r6
 8003900:	f000 f834 	bl	800396c <_sbrk_r>
 8003904:	3001      	adds	r0, #1
 8003906:	d1eb      	bne.n	80038e0 <_malloc_r+0x7c>
 8003908:	230c      	movs	r3, #12
 800390a:	6033      	str	r3, [r6, #0]
 800390c:	4630      	mov	r0, r6
 800390e:	f000 f83e 	bl	800398e <__malloc_unlock>
 8003912:	2000      	movs	r0, #0
 8003914:	bd70      	pop	{r4, r5, r6, pc}
 8003916:	bf00      	nop
 8003918:	200000f0 	.word	0x200000f0
 800391c:	200000ec 	.word	0x200000ec

08003920 <_realloc_r>:
 8003920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003922:	4607      	mov	r7, r0
 8003924:	4615      	mov	r5, r2
 8003926:	460e      	mov	r6, r1
 8003928:	b921      	cbnz	r1, 8003934 <_realloc_r+0x14>
 800392a:	4611      	mov	r1, r2
 800392c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003930:	f7ff bf98 	b.w	8003864 <_malloc_r>
 8003934:	b91a      	cbnz	r2, 800393e <_realloc_r+0x1e>
 8003936:	f7ff ff47 	bl	80037c8 <_free_r>
 800393a:	4628      	mov	r0, r5
 800393c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800393e:	f000 f827 	bl	8003990 <_malloc_usable_size_r>
 8003942:	4285      	cmp	r5, r0
 8003944:	d90e      	bls.n	8003964 <_realloc_r+0x44>
 8003946:	4629      	mov	r1, r5
 8003948:	4638      	mov	r0, r7
 800394a:	f7ff ff8b 	bl	8003864 <_malloc_r>
 800394e:	4604      	mov	r4, r0
 8003950:	b150      	cbz	r0, 8003968 <_realloc_r+0x48>
 8003952:	4631      	mov	r1, r6
 8003954:	462a      	mov	r2, r5
 8003956:	f7ff ff11 	bl	800377c <memcpy>
 800395a:	4631      	mov	r1, r6
 800395c:	4638      	mov	r0, r7
 800395e:	f7ff ff33 	bl	80037c8 <_free_r>
 8003962:	e001      	b.n	8003968 <_realloc_r+0x48>
 8003964:	4630      	mov	r0, r6
 8003966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003968:	4620      	mov	r0, r4
 800396a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800396c <_sbrk_r>:
 800396c:	b538      	push	{r3, r4, r5, lr}
 800396e:	4c06      	ldr	r4, [pc, #24]	; (8003988 <_sbrk_r+0x1c>)
 8003970:	2300      	movs	r3, #0
 8003972:	4605      	mov	r5, r0
 8003974:	4608      	mov	r0, r1
 8003976:	6023      	str	r3, [r4, #0]
 8003978:	f000 f814 	bl	80039a4 <_sbrk>
 800397c:	1c43      	adds	r3, r0, #1
 800397e:	d102      	bne.n	8003986 <_sbrk_r+0x1a>
 8003980:	6823      	ldr	r3, [r4, #0]
 8003982:	b103      	cbz	r3, 8003986 <_sbrk_r+0x1a>
 8003984:	602b      	str	r3, [r5, #0]
 8003986:	bd38      	pop	{r3, r4, r5, pc}
 8003988:	2000845c 	.word	0x2000845c

0800398c <__malloc_lock>:
 800398c:	4770      	bx	lr

0800398e <__malloc_unlock>:
 800398e:	4770      	bx	lr

08003990 <_malloc_usable_size_r>:
 8003990:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003994:	2800      	cmp	r0, #0
 8003996:	bfbe      	ittt	lt
 8003998:	1809      	addlt	r1, r1, r0
 800399a:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 800399e:	18c0      	addlt	r0, r0, r3
 80039a0:	3804      	subs	r0, #4
 80039a2:	4770      	bx	lr

080039a4 <_sbrk>:
 80039a4:	4b04      	ldr	r3, [pc, #16]	; (80039b8 <_sbrk+0x14>)
 80039a6:	6819      	ldr	r1, [r3, #0]
 80039a8:	4602      	mov	r2, r0
 80039aa:	b909      	cbnz	r1, 80039b0 <_sbrk+0xc>
 80039ac:	4903      	ldr	r1, [pc, #12]	; (80039bc <_sbrk+0x18>)
 80039ae:	6019      	str	r1, [r3, #0]
 80039b0:	6818      	ldr	r0, [r3, #0]
 80039b2:	4402      	add	r2, r0
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	4770      	bx	lr
 80039b8:	200000f4 	.word	0x200000f4
 80039bc:	20008460 	.word	0x20008460

080039c0 <_init>:
 80039c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c2:	bf00      	nop
 80039c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039c6:	bc08      	pop	{r3}
 80039c8:	469e      	mov	lr, r3
 80039ca:	4770      	bx	lr

080039cc <_fini>:
 80039cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ce:	bf00      	nop
 80039d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039d2:	bc08      	pop	{r3}
 80039d4:	469e      	mov	lr, r3
 80039d6:	4770      	bx	lr

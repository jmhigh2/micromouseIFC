
C:\Users\Jonathan\Desktop\micromouse\mm747\Debug\mm747.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b3c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  08004d0c  08004d0c  00014d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005064  08005064  00015064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005068  08005068  00015068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  20000000  0800506c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000a24  2000006c  080050d8  0002006c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000a90  080050d8  00020a90  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
  9 .debug_line   00006f2d  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00013edf  00000000  00000000  00026fc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000028ad  00000000  00000000  0003aea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000d10  00000000  00000000  0003d758  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001608  00000000  00000000  0003e468  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000a2ac  00000000  00000000  0003fa70  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000048fd  00000000  00000000  00049d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0004e619  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002aa8  00000000  00000000  0004e698  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004cf4 	.word	0x08004cf4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08004cf4 	.word	0x08004cf4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80002c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80002c6:	e003      	b.n	80002d0 <LoopCopyDataInit>

080002c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80002c8:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80002ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80002cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80002ce:	3104      	adds	r1, #4

080002d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80002d0:	480b      	ldr	r0, [pc, #44]	; (8000300 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80002d2:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80002d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80002d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80002d8:	d3f6      	bcc.n	80002c8 <CopyDataInit>
  ldr  r2, =_sbss
 80002da:	4a0b      	ldr	r2, [pc, #44]	; (8000308 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80002dc:	e002      	b.n	80002e4 <LoopFillZerobss>

080002de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80002de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80002e0:	f842 3b04 	str.w	r3, [r2], #4

080002e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80002e4:	4b09      	ldr	r3, [pc, #36]	; (800030c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80002e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80002e8:	d3f9      	bcc.n	80002de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80002ea:	f004 f87f 	bl	80043ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002ee:	f004 f8a3 	bl	8004438 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002f2:	f003 fac3 	bl	800387c <main>
  bx  lr    
 80002f6:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002f8:	20050000 	.word	0x20050000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80002fc:	0800506c 	.word	0x0800506c
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000300:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000304:	2000006c 	.word	0x2000006c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000308:	2000006c 	.word	0x2000006c
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800030c:	20000a90 	.word	0x20000a90

08000310 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000310:	e7fe      	b.n	8000310 <ADC_IRQHandler>
	...

08000314 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000314:	4b08      	ldr	r3, [pc, #32]	; (8000338 <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000316:	b510      	push	{r4, lr}
 8000318:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 800031a:	6818      	ldr	r0, [r3, #0]
 800031c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000320:	fbb0 f0f3 	udiv	r0, r0, r3
 8000324:	f000 fac2 	bl	80008ac <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000328:	2200      	movs	r2, #0
 800032a:	4621      	mov	r1, r4
 800032c:	f04f 30ff 	mov.w	r0, #4294967295
 8000330:	f000 fa78 	bl	8000824 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000334:	2000      	movs	r0, #0
 8000336:	bd10      	pop	{r4, pc}
 8000338:	20000004 	.word	0x20000004

0800033c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800033c:	b508      	push	{r3, lr}
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800033e:	2003      	movs	r0, #3
 8000340:	f000 fa5e 	bl	8000800 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000344:	2000      	movs	r0, #0
 8000346:	f7ff ffe5 	bl	8000314 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800034a:	f003 fe5f 	bl	800400c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 800034e:	2000      	movs	r0, #0
 8000350:	bd08      	pop	{r3, pc}
	...

08000354 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000354:	4a02      	ldr	r2, [pc, #8]	; (8000360 <HAL_IncTick+0xc>)
 8000356:	6813      	ldr	r3, [r2, #0]
 8000358:	3301      	adds	r3, #1
 800035a:	6013      	str	r3, [r2, #0]
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	200004dc 	.word	0x200004dc

08000364 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000364:	4b01      	ldr	r3, [pc, #4]	; (800036c <HAL_GetTick+0x8>)
 8000366:	6818      	ldr	r0, [r3, #0]
}
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	200004dc 	.word	0x200004dc

08000370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000370:	b513      	push	{r0, r1, r4, lr}
 8000372:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8000374:	f7ff fff6 	bl	8000364 <HAL_GetTick>
 8000378:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800037a:	f7ff fff3 	bl	8000364 <HAL_GetTick>
 800037e:	9b01      	ldr	r3, [sp, #4]
 8000380:	1b00      	subs	r0, r0, r4
 8000382:	4298      	cmp	r0, r3
 8000384:	d3f9      	bcc.n	800037a <HAL_Delay+0xa>
  {
  }
}
 8000386:	b002      	add	sp, #8
 8000388:	bd10      	pop	{r4, pc}
	...

0800038c <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800038c:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800038e:	4604      	mov	r4, r0
 8000390:	2800      	cmp	r0, #0
 8000392:	f000 809e 	beq.w	80004d2 <HAL_ADC_Init+0x146>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000396:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000398:	b923      	cbnz	r3, 80003a4 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800039a:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800039c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80003a0:	f003 fe64 	bl	800406c <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80003a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80003a6:	06db      	lsls	r3, r3, #27
 80003a8:	f100 808e 	bmi.w	80004c8 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80003ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80003ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80003b2:	f023 0302 	bic.w	r3, r3, #2
 80003b6:	f043 0302 	orr.w	r3, r3, #2
 80003ba:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80003bc:	4b46      	ldr	r3, [pc, #280]	; (80004d8 <HAL_ADC_Init+0x14c>)
 80003be:	685a      	ldr	r2, [r3, #4]
 80003c0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80003c4:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80003c6:	6859      	ldr	r1, [r3, #4]
 80003c8:	6862      	ldr	r2, [r4, #4]
 80003ca:	430a      	orrs	r2, r1
 80003cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80003ce:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80003d0:	6921      	ldr	r1, [r4, #16]
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80003d2:	685a      	ldr	r2, [r3, #4]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80003d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80003d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80003da:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80003dc:	685a      	ldr	r2, [r3, #4]
 80003de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80003e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80003e4:	685a      	ldr	r2, [r3, #4]
 80003e6:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80003ea:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80003ec:	68a2      	ldr	r2, [r4, #8]
 80003ee:	6859      	ldr	r1, [r3, #4]
 80003f0:	430a      	orrs	r2, r1
 80003f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80003f4:	689a      	ldr	r2, [r3, #8]
 80003f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80003fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80003fc:	68e2      	ldr	r2, [r4, #12]
 80003fe:	6899      	ldr	r1, [r3, #8]
 8000400:	430a      	orrs	r2, r1
 8000402:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000404:	4a35      	ldr	r2, [pc, #212]	; (80004dc <HAL_ADC_Init+0x150>)
 8000406:	4290      	cmp	r0, r2
 8000408:	d00e      	beq.n	8000428 <HAL_ADC_Init+0x9c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800040a:	6899      	ldr	r1, [r3, #8]
 800040c:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000410:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000412:	689a      	ldr	r2, [r3, #8]
 8000414:	4302      	orrs	r2, r0
 8000416:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000418:	689a      	ldr	r2, [r3, #8]
 800041a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800041e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000420:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000422:	6899      	ldr	r1, [r3, #8]
 8000424:	430a      	orrs	r2, r1
 8000426:	e006      	b.n	8000436 <HAL_ADC_Init+0xaa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000428:	689a      	ldr	r2, [r3, #8]
 800042a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800042e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000430:	689a      	ldr	r2, [r3, #8]
 8000432:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000436:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000438:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800043a:	69a1      	ldr	r1, [r4, #24]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800043c:	f022 0202 	bic.w	r2, r2, #2
 8000440:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000442:	689a      	ldr	r2, [r3, #8]
 8000444:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000448:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800044a:	6a22      	ldr	r2, [r4, #32]
 800044c:	b19a      	cbz	r2, 8000476 <HAL_ADC_Init+0xea>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800044e:	685a      	ldr	r2, [r3, #4]
 8000450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000454:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000456:	685a      	ldr	r2, [r3, #4]
 8000458:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800045c:	605a      	str	r2, [r3, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800045e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000462:	fa92 f2a2 	rbit	r2, r2
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000466:	fab2 f182 	clz	r1, r2
 800046a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800046c:	6858      	ldr	r0, [r3, #4]
 800046e:	3a01      	subs	r2, #1
 8000470:	408a      	lsls	r2, r1
 8000472:	4302      	orrs	r2, r0
 8000474:	e002      	b.n	800047c <HAL_ADC_Init+0xf0>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000476:	685a      	ldr	r2, [r3, #4]
 8000478:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800047c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC parameters */
    ADC_Init(hadc);
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800047e:	2000      	movs	r0, #0
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000482:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000486:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000488:	69e2      	ldr	r2, [r4, #28]
 800048a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800048c:	3a01      	subs	r2, #1
 800048e:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000492:	6b21      	ldr	r1, [r4, #48]	; 0x30
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000494:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000496:	689a      	ldr	r2, [r3, #8]
 8000498:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800049c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800049e:	689a      	ldr	r2, [r3, #8]
 80004a0:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80004a4:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80004a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80004a8:	689a      	ldr	r2, [r3, #8]
 80004aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80004ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80004b0:	689a      	ldr	r2, [r3, #8]
 80004b2:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80004b6:	609a      	str	r2, [r3, #8]
    
    /* Set ADC parameters */
    ADC_Init(hadc);
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80004b8:	6460      	str	r0, [r4, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80004ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80004bc:	f023 0303 	bic.w	r3, r3, #3
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	6423      	str	r3, [r4, #64]	; 0x40
 80004c6:	e000      	b.n	80004ca <HAL_ADC_Init+0x13e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80004c8:	2001      	movs	r0, #1
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80004ca:	2300      	movs	r3, #0
 80004cc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80004d0:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 80004d2:	2001      	movs	r0, #1
  /* Release Lock */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	bf00      	nop
 80004d8:	40012300 	.word	0x40012300
 80004dc:	0f000001 	.word	0x0f000001

080004e0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80004e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80004e2:	4613      	mov	r3, r2
  __IO uint32_t counter = 0;
 80004e4:	2200      	movs	r2, #0
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80004e6:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 80004e8:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80004ea:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80004ee:	2a01      	cmp	r2, #1
 80004f0:	d064      	beq.n	80005bc <HAL_ADC_Start_DMA+0xdc>
 80004f2:	2201      	movs	r2, #1
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80004f4:	6805      	ldr	r5, [r0, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80004f6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80004fa:	68aa      	ldr	r2, [r5, #8]
 80004fc:	07d2      	lsls	r2, r2, #31
 80004fe:	d503      	bpl.n	8000508 <HAL_ADC_Start_DMA+0x28>
      counter--;
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000500:	68aa      	ldr	r2, [r5, #8]
 8000502:	07d0      	lsls	r0, r2, #31
 8000504:	d413      	bmi.n	800052e <HAL_ADC_Start_DMA+0x4e>
 8000506:	e04e      	b.n	80005a6 <HAL_ADC_Start_DMA+0xc6>
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000508:	68aa      	ldr	r2, [r5, #8]
 800050a:	f042 0201 	orr.w	r2, r2, #1
 800050e:	60aa      	str	r2, [r5, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000510:	4a2c      	ldr	r2, [pc, #176]	; (80005c4 <HAL_ADC_Start_DMA+0xe4>)
 8000512:	6810      	ldr	r0, [r2, #0]
 8000514:	4a2c      	ldr	r2, [pc, #176]	; (80005c8 <HAL_ADC_Start_DMA+0xe8>)
 8000516:	fbb0 f0f2 	udiv	r0, r0, r2
 800051a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800051e:	9001      	str	r0, [sp, #4]
    while(counter != 0)
 8000520:	9a01      	ldr	r2, [sp, #4]
 8000522:	2a00      	cmp	r2, #0
 8000524:	d0ec      	beq.n	8000500 <HAL_ADC_Start_DMA+0x20>
    {
      counter--;
 8000526:	9a01      	ldr	r2, [sp, #4]
 8000528:	3a01      	subs	r2, #1
 800052a:	9201      	str	r2, [sp, #4]
 800052c:	e7f8      	b.n	8000520 <HAL_ADC_Start_DMA+0x40>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800052e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000530:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8000534:	f020 0001 	bic.w	r0, r0, #1
 8000538:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800053c:	6420      	str	r0, [r4, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800053e:	686a      	ldr	r2, [r5, #4]
 8000540:	0552      	lsls	r2, r2, #21
 8000542:	d505      	bpl.n	8000550 <HAL_ADC_Start_DMA+0x70>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000544:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000546:	f420 5040 	bic.w	r0, r0, #12288	; 0x3000
 800054a:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800054e:	6420      	str	r0, [r4, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000550:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000552:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000556:	d002      	beq.n	800055e <HAL_ADC_Start_DMA+0x7e>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000558:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800055a:	f022 0206 	bic.w	r2, r2, #6
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800055e:	6462      	str	r2, [r4, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000560:	2200      	movs	r2, #0

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000562:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000564:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000568:	4a18      	ldr	r2, [pc, #96]	; (80005cc <HAL_ADC_Start_DMA+0xec>)
 800056a:	63c2      	str	r2, [r0, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800056c:	4a18      	ldr	r2, [pc, #96]	; (80005d0 <HAL_ADC_Start_DMA+0xf0>)
 800056e:	6402      	str	r2, [r0, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000570:	4a18      	ldr	r2, [pc, #96]	; (80005d4 <HAL_ADC_Start_DMA+0xf4>)
 8000572:	64c2      	str	r2, [r0, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000574:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000578:	602a      	str	r2, [r5, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800057a:	686a      	ldr	r2, [r5, #4]
 800057c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000580:	606a      	str	r2, [r5, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000582:	68aa      	ldr	r2, [r5, #8]
 8000584:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000588:	60aa      	str	r2, [r5, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800058a:	460a      	mov	r2, r1
 800058c:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 8000590:	f000 fa40 	bl	8000a14 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8000594:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <HAL_ADC_Start_DMA+0xf8>)
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	f013 0f1f 	tst.w	r3, #31
 800059c:	6823      	ldr	r3, [r4, #0]
 800059e:	d004      	beq.n	80005aa <HAL_ADC_Start_DMA+0xca>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80005a0:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <HAL_ADC_Start_DMA+0xfc>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d001      	beq.n	80005aa <HAL_ADC_Start_DMA+0xca>
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80005a6:	2000      	movs	r0, #0
 80005a8:	e009      	b.n	80005be <HAL_ADC_Start_DMA+0xde>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80005aa:	6898      	ldr	r0, [r3, #8]
 80005ac:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80005b0:	d1f9      	bne.n	80005a6 <HAL_ADC_Start_DMA+0xc6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80005b2:	689a      	ldr	r2, [r3, #8]
 80005b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	e000      	b.n	80005be <HAL_ADC_Start_DMA+0xde>
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80005bc:	2002      	movs	r0, #2
    }
  }
  
  /* Return function status */
  return HAL_OK;
}
 80005be:	b003      	add	sp, #12
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop
 80005c4:	20000004 	.word	0x20000004
 80005c8:	000f4240 	.word	0x000f4240
 80005cc:	0800063b 	.word	0x0800063b
 80005d0:	0800069d 	.word	0x0800069d
 80005d4:	080006a9 	.word	0x080006a9
 80005d8:	40012300 	.word	0x40012300
 80005dc:	40012000 	.word	0x40012000

080005e0 <HAL_ADC_Stop_DMA>:
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80005e0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80005e4:	2b01      	cmp	r3, #1
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80005e6:	b510      	push	{r4, lr}
 80005e8:	4604      	mov	r4, r0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80005ea:	d024      	beq.n	8000636 <HAL_ADC_Stop_DMA+0x56>
 80005ec:	2301      	movs	r3, #1
 80005ee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80005f2:	6803      	ldr	r3, [r0, #0]
 80005f4:	689a      	ldr	r2, [r3, #8]
 80005f6:	f022 0201 	bic.w	r2, r2, #1
 80005fa:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80005fc:	689a      	ldr	r2, [r3, #8]
 80005fe:	07d2      	lsls	r2, r2, #31
 8000600:	d414      	bmi.n	800062c <HAL_ADC_Stop_DMA+0x4c>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8000602:	689a      	ldr	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8000604:	6b80      	ldr	r0, [r0, #56]	; 0x38
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8000606:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800060a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800060c:	f000 fa41 	bl	8000a92 <HAL_DMA_Abort>
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8000610:	6822      	ldr	r2, [r4, #0]
 8000612:	6853      	ldr	r3, [r2, #4]
 8000614:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000618:	6053      	str	r3, [r2, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800061a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800061c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000620:	f023 0301 	bic.w	r3, r3, #1
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6423      	str	r3, [r4, #64]	; 0x40
 800062a:	e000      	b.n	800062e <HAL_ADC_Stop_DMA+0x4e>
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800062c:	2000      	movs	r0, #0
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800062e:	2300      	movs	r3, #0
 8000630:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8000634:	bd10      	pop	{r4, pc}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000636:	2002      	movs	r0, #2
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
}
 8000638:	bd10      	pop	{r4, pc}

0800063a <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800063a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800063c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800063e:	f012 0f50 	tst.w	r2, #80	; 0x50
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000642:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000644:	d124      	bne.n	8000690 <ADC_DMAConvCplt+0x56>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000646:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800064c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	6891      	ldr	r1, [r2, #8]
 8000652:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8000656:	d117      	bne.n	8000688 <ADC_DMAConvCplt+0x4e>
 8000658:	6999      	ldr	r1, [r3, #24]
 800065a:	b9a9      	cbnz	r1, 8000688 <ADC_DMAConvCplt+0x4e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800065c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800065e:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 8000662:	d002      	beq.n	800066a <ADC_DMAConvCplt+0x30>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000664:	6891      	ldr	r1, [r2, #8]
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000666:	0549      	lsls	r1, r1, #21
 8000668:	d40e      	bmi.n	8000688 <ADC_DMAConvCplt+0x4e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800066a:	6851      	ldr	r1, [r2, #4]
 800066c:	f021 0120 	bic.w	r1, r1, #32
 8000670:	6051      	str	r1, [r2, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000672:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000674:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000678:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800067a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800067c:	04d2      	lsls	r2, r2, #19
 800067e:	d403      	bmi.n	8000688 <ADC_DMAConvCplt+0x4e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000680:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000682:	f042 0201 	orr.w	r2, r2, #1
 8000686:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 8000688:	4618      	mov	r0, r3
 800068a:	f002 ff4d 	bl	8003528 <HAL_ADC_ConvCpltCallback>
 800068e:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  }
}
 8000692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_ADC_ConvCpltCallback(hadc);
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000698:	4718      	bx	r3

0800069a <HAL_ADC_ConvHalfCpltCallback>:
 800069a:	4770      	bx	lr

0800069c <ADC_DMAHalfConvCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800069c:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* Conversion complete callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800069e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80006a0:	f7ff fffb 	bl	800069a <HAL_ADC_ConvHalfCpltCallback>
 80006a4:	bd08      	pop	{r3, pc}

080006a6 <HAL_ADC_ErrorCallback>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80006a6:	4770      	bx	lr

080006a8 <ADC_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80006a8:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80006aa:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80006ac:	2340      	movs	r3, #64	; 0x40
 80006ae:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80006b0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80006b2:	f043 0304 	orr.w	r3, r3, #4
 80006b6:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_ADC_ErrorCallback(hadc); 
 80006b8:	f7ff fff5 	bl	80006a6 <HAL_ADC_ErrorCallback>
 80006bc:	bd08      	pop	{r3, pc}
	...

080006c0 <HAL_ADC_ConfigChannel>:
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  __IO uint32_t counter = 0;
 80006c0:	2300      	movs	r3, #0
  *         the configuration information for the specified ADC.
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80006c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 80006c4:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006c6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d070      	beq.n	80007b0 <HAL_ADC_ConfigChannel+0xf0>
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 80006ce:	680d      	ldr	r5, [r1, #0]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006d0:	2301      	movs	r3, #1
 80006d2:	6804      	ldr	r4, [r0, #0]
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 80006d4:	2d09      	cmp	r5, #9
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006d6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80006da:	b2ae      	uxth	r6, r5
 80006dc:	688f      	ldr	r7, [r1, #8]
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 80006de:	d917      	bls.n	8000710 <HAL_ADC_ConfigChannel+0x50>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80006e0:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 80006e4:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 80006e8:	f1a2 031e 	sub.w	r3, r2, #30
 80006ec:	2207      	movs	r2, #7
 80006ee:	409a      	lsls	r2, r3
 80006f0:	ea2e 0202 	bic.w	r2, lr, r2
 80006f4:	60e2      	str	r2, [r4, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80006f6:	4a3d      	ldr	r2, [pc, #244]	; (80007ec <HAL_ADC_ConfigChannel+0x12c>)
 80006f8:	4295      	cmp	r5, r2
 80006fa:	d103      	bne.n	8000704 <HAL_ADC_ConfigChannel+0x44>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80006fc:	68e3      	ldr	r3, [r4, #12]
 80006fe:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 8000702:	e003      	b.n	800070c <HAL_ADC_ConfigChannel+0x4c>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000704:	68e2      	ldr	r2, [r4, #12]
 8000706:	fa07 f303 	lsl.w	r3, r7, r3
 800070a:	4313      	orrs	r3, r2
 800070c:	60e3      	str	r3, [r4, #12]
 800070e:	e00e      	b.n	800072e <HAL_ADC_ConfigChannel+0x6e>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000710:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000714:	f04f 0e07 	mov.w	lr, #7
 8000718:	6922      	ldr	r2, [r4, #16]
 800071a:	fa0e fe03 	lsl.w	lr, lr, r3
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800071e:	fa07 f303 	lsl.w	r3, r7, r3
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000722:	ea22 020e 	bic.w	r2, r2, lr
 8000726:	6122      	str	r2, [r4, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000728:	6922      	ldr	r2, [r4, #16]
 800072a:	4313      	orrs	r3, r2
 800072c:	6123      	str	r3, [r4, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800072e:	684b      	ldr	r3, [r1, #4]
 8000730:	2b06      	cmp	r3, #6
 8000732:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8000736:	d80d      	bhi.n	8000754 <HAL_ADC_ConfigChannel+0x94>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000738:	4413      	add	r3, r2
 800073a:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800073c:	1f59      	subs	r1, r3, #5
 800073e:	231f      	movs	r3, #31
 8000740:	408b      	lsls	r3, r1
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000742:	fa06 f101 	lsl.w	r1, r6, r1
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000746:	ea27 0303 	bic.w	r3, r7, r3
 800074a:	6363      	str	r3, [r4, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800074c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800074e:	4311      	orrs	r1, r2
 8000750:	6361      	str	r1, [r4, #52]	; 0x34
 8000752:	e01d      	b.n	8000790 <HAL_ADC_ConfigChannel+0xd0>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000754:	2b0c      	cmp	r3, #12
 8000756:	d80e      	bhi.n	8000776 <HAL_ADC_ConfigChannel+0xb6>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000758:	4413      	add	r3, r2
 800075a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800075c:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000760:	231f      	movs	r3, #31
 8000762:	4093      	lsls	r3, r2
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000764:	fa06 f202 	lsl.w	r2, r6, r2
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000768:	ea21 0303 	bic.w	r3, r1, r3
 800076c:	6323      	str	r3, [r4, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800076e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000770:	431a      	orrs	r2, r3
 8000772:	6322      	str	r2, [r4, #48]	; 0x30
 8000774:	e00c      	b.n	8000790 <HAL_ADC_ConfigChannel+0xd0>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000776:	4413      	add	r3, r2
 8000778:	221f      	movs	r2, #31
 800077a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800077c:	3b41      	subs	r3, #65	; 0x41
 800077e:	409a      	lsls	r2, r3
 8000780:	ea27 0202 	bic.w	r2, r7, r2
 8000784:	62e2      	str	r2, [r4, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000786:	fa06 f203 	lsl.w	r2, r6, r3
 800078a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800078c:	430a      	orrs	r2, r1
 800078e:	62e2      	str	r2, [r4, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000790:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <HAL_ADC_ConfigChannel+0x130>)
 8000792:	429c      	cmp	r4, r3
 8000794:	d004      	beq.n	80007a0 <HAL_ADC_ConfigChannel+0xe0>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000796:	2300      	movs	r3, #0
 8000798:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800079c:	4618      	mov	r0, r3
 800079e:	e023      	b.n	80007e8 <HAL_ADC_ConfigChannel+0x128>
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80007a0:	2d12      	cmp	r5, #18
 80007a2:	d107      	bne.n	80007b4 <HAL_ADC_ConfigChannel+0xf4>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80007a4:	4a13      	ldr	r2, [pc, #76]	; (80007f4 <HAL_ADC_ConfigChannel+0x134>)
 80007a6:	6853      	ldr	r3, [r2, #4]
 80007a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007ac:	6053      	str	r3, [r2, #4]
 80007ae:	e7f2      	b.n	8000796 <HAL_ADC_ConfigChannel+0xd6>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80007b0:	2002      	movs	r0, #2
 80007b2:	e019      	b.n	80007e8 <HAL_ADC_ConfigChannel+0x128>
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80007b4:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <HAL_ADC_ConfigChannel+0x12c>)
 80007b6:	429d      	cmp	r5, r3
 80007b8:	d001      	beq.n	80007be <HAL_ADC_ConfigChannel+0xfe>
 80007ba:	2d11      	cmp	r5, #17
 80007bc:	d1eb      	bne.n	8000796 <HAL_ADC_ConfigChannel+0xd6>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80007be:	490d      	ldr	r1, [pc, #52]	; (80007f4 <HAL_ADC_ConfigChannel+0x134>)

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80007c0:	429d      	cmp	r5, r3
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80007c2:	684a      	ldr	r2, [r1, #4]
 80007c4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80007c8:	604a      	str	r2, [r1, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80007ca:	d1e4      	bne.n	8000796 <HAL_ADC_ConfigChannel+0xd6>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <HAL_ADC_ConfigChannel+0x138>)
 80007ce:	4a0b      	ldr	r2, [pc, #44]	; (80007fc <HAL_ADC_ConfigChannel+0x13c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80007d6:	230a      	movs	r3, #10
 80007d8:	4353      	muls	r3, r2
      while(counter != 0)
      {
        counter--;
 80007da:	9301      	str	r3, [sp, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
      while(counter != 0)
 80007dc:	9b01      	ldr	r3, [sp, #4]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d0d9      	beq.n	8000796 <HAL_ADC_ConfigChannel+0xd6>
      {
        counter--;
 80007e2:	9b01      	ldr	r3, [sp, #4]
 80007e4:	3b01      	subs	r3, #1
 80007e6:	e7f8      	b.n	80007da <HAL_ADC_ConfigChannel+0x11a>
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return HAL_OK;
}
 80007e8:	b003      	add	sp, #12
 80007ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ec:	10000012 	.word	0x10000012
 80007f0:	40012000 	.word	0x40012000
 80007f4:	40012300 	.word	0x40012300
 80007f8:	20000004 	.word	0x20000004
 80007fc:	000f4240 	.word	0x000f4240

08000800 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000800:	4a07      	ldr	r2, [pc, #28]	; (8000820 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000802:	0200      	lsls	r0, r0, #8
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000804:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000806:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800080a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800080e:	041b      	lsls	r3, r3, #16
 8000810:	0c1b      	lsrs	r3, r3, #16
 8000812:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800081a:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800081c:	60d3      	str	r3, [r2, #12]
 800081e:	4770      	bx	lr
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000824:	4b19      	ldr	r3, [pc, #100]	; (800088c <HAL_NVIC_SetPriority+0x68>)
 8000826:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000828:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800082c:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800082e:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000832:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000834:	2c04      	cmp	r4, #4
 8000836:	bf28      	it	cs
 8000838:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800083a:	2d06      	cmp	r5, #6

  return (
 800083c:	f04f 0501 	mov.w	r5, #1
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000840:	bf8c      	ite	hi
 8000842:	3b03      	subhi	r3, #3
 8000844:	2300      	movls	r3, #0

  return (
 8000846:	fa05 f404 	lsl.w	r4, r5, r4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800084a:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800084c:	f104 34ff 	add.w	r4, r4, #4294967295
 8000850:	ea04 0401 	and.w	r4, r4, r1
 8000854:	fa04 f403 	lsl.w	r4, r4, r3
 8000858:	fa05 f303 	lsl.w	r3, r5, r3
 800085c:	f103 33ff 	add.w	r3, r3, #4294967295
 8000860:	ea02 0203 	and.w	r2, r2, r3
 8000864:	ea42 0204 	orr.w	r2, r2, r4
 8000868:	ea4f 1202 	mov.w	r2, r2, lsl #4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800086c:	da05      	bge.n	800087a <HAL_NVIC_SetPriority+0x56>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800086e:	f000 000f 	and.w	r0, r0, #15
 8000872:	b2d2      	uxtb	r2, r2
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_NVIC_SetPriority+0x6c>)
 8000876:	541a      	strb	r2, [r3, r0]
 8000878:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800087a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800087e:	b2d2      	uxtb	r2, r2
 8000880:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000884:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000888:	bd30      	pop	{r4, r5, pc}
 800088a:	bf00      	nop
 800088c:	e000ed00 	.word	0xe000ed00
 8000890:	e000ed14 	.word	0xe000ed14

08000894 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000894:	0942      	lsrs	r2, r0, #5
 8000896:	2301      	movs	r3, #1
 8000898:	f000 001f 	and.w	r0, r0, #31
 800089c:	fa03 f000 	lsl.w	r0, r3, r0
 80008a0:	4b01      	ldr	r3, [pc, #4]	; (80008a8 <HAL_NVIC_EnableIRQ+0x14>)
 80008a2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80008a6:	4770      	bx	lr
 80008a8:	e000e100 	.word	0xe000e100

080008ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008ac:	3801      	subs	r0, #1
 80008ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80008b2:	d20a      	bcs.n	80008ca <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b6:	21f0      	movs	r1, #240	; 0xf0
 80008b8:	4a06      	ldr	r2, [pc, #24]	; (80008d4 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ba:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008bc:	2000      	movs	r0, #0
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008be:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008c2:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008c4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000e010 	.word	0xe000e010
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80008d8:	4b04      	ldr	r3, [pc, #16]	; (80008ec <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80008da:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	bf0c      	ite	eq
 80008e0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80008e4:	f022 0204 	bicne.w	r2, r2, #4
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	4770      	bx	lr
 80008ec:	e000e010 	.word	0xe000e010

080008f0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80008f0:	4770      	bx	lr

080008f2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80008f2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80008f4:	f7ff fffc 	bl	80008f0 <HAL_SYSTICK_Callback>
 80008f8:	bd08      	pop	{r3, pc}
	...

080008fc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80008fc:	6803      	ldr	r3, [r0, #0]
 80008fe:	2118      	movs	r1, #24
 8000900:	b2da      	uxtb	r2, r3
 8000902:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000906:	3a10      	subs	r2, #16
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000908:	f023 0303 	bic.w	r3, r3, #3
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800090c:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000910:	4904      	ldr	r1, [pc, #16]	; (8000924 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000912:	2a03      	cmp	r2, #3
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000914:	5c89      	ldrb	r1, [r1, r2]
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000916:	bf88      	it	hi
 8000918:	3304      	addhi	r3, #4
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800091a:	65c1      	str	r1, [r0, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800091c:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 800091e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	08004d30 	.word	0x08004d30

08000928 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000928:	b570      	push	{r4, r5, r6, lr}
 800092a:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 800092c:	f7ff fd1a 	bl	8000364 <HAL_GetTick>
 8000930:	4605      	mov	r5, r0
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000932:	2c00      	cmp	r4, #0
 8000934:	d064      	beq.n	8000a00 <HAL_DMA_Init+0xd8>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000936:	2300      	movs	r3, #0

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000938:	6822      	ldr	r2, [r4, #0]
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800093a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800093e:	2302      	movs	r3, #2
 8000940:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000944:	6813      	ldr	r3, [r2, #0]
 8000946:	f023 0301 	bic.w	r3, r3, #1
 800094a:	6013      	str	r3, [r2, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800094c:	6821      	ldr	r1, [r4, #0]
 800094e:	680b      	ldr	r3, [r1, #0]
 8000950:	07d8      	lsls	r0, r3, #31
 8000952:	d508      	bpl.n	8000966 <HAL_DMA_Init+0x3e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000954:	f7ff fd06 	bl	8000364 <HAL_GetTick>
 8000958:	1b40      	subs	r0, r0, r5
 800095a:	2805      	cmp	r0, #5
 800095c:	d9f6      	bls.n	800094c <HAL_DMA_Init+0x24>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800095e:	2320      	movs	r3, #32
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000960:	2003      	movs	r0, #3
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000962:	6563      	str	r3, [r4, #84]	; 0x54
 8000964:	e051      	b.n	8000a0a <HAL_DMA_Init+0xe2>
      return HAL_TIMEOUT;
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000966:	680b      	ldr	r3, [r1, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000968:	4a29      	ldr	r2, [pc, #164]	; (8000a10 <HAL_DMA_Init+0xe8>)
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800096a:	6865      	ldr	r5, [r4, #4]
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800096c:	401a      	ands	r2, r3
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800096e:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000970:	69a0      	ldr	r0, [r4, #24]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000972:	431d      	orrs	r5, r3
 8000974:	68e3      	ldr	r3, [r4, #12]
 8000976:	431d      	orrs	r5, r3
 8000978:	6923      	ldr	r3, [r4, #16]
 800097a:	431d      	orrs	r5, r3
 800097c:	6963      	ldr	r3, [r4, #20]
 800097e:	432b      	orrs	r3, r5
 8000980:	69e5      	ldr	r5, [r4, #28]
 8000982:	4303      	orrs	r3, r0
 8000984:	432b      	orrs	r3, r5
 8000986:	6a25      	ldr	r5, [r4, #32]
 8000988:	432b      	orrs	r3, r5
 800098a:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800098c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800098e:	2a04      	cmp	r2, #4
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000990:	bf01      	itttt	eq
 8000992:	6b25      	ldreq	r5, [r4, #48]	; 0x30
 8000994:	6ae6      	ldreq	r6, [r4, #44]	; 0x2c
 8000996:	4335      	orreq	r5, r6
 8000998:	432b      	orreq	r3, r5

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800099a:	2a04      	cmp	r2, #4
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800099c:	600b      	str	r3, [r1, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800099e:	694b      	ldr	r3, [r1, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80009a0:	f023 0307 	bic.w	r3, r3, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80009a4:	ea43 0302 	orr.w	r3, r3, r2

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80009a8:	d11c      	bne.n	80009e4 <HAL_DMA_Init+0xbc>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80009aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80009ac:	4313      	orrs	r3, r2
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80009ae:	b920      	cbnz	r0, 80009ba <HAL_DMA_Init+0x92>
  {
    switch (tmp)
 80009b0:	2a01      	cmp	r2, #1
 80009b2:	d00b      	beq.n	80009cc <HAL_DMA_Init+0xa4>
 80009b4:	d313      	bcc.n	80009de <HAL_DMA_Init+0xb6>
 80009b6:	2a02      	cmp	r2, #2
 80009b8:	e010      	b.n	80009dc <HAL_DMA_Init+0xb4>
        break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80009ba:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80009be:	d10a      	bne.n	80009d6 <HAL_DMA_Init+0xae>
  {
    switch (tmp)
 80009c0:	2a03      	cmp	r2, #3
 80009c2:	d80f      	bhi.n	80009e4 <HAL_DMA_Init+0xbc>
 80009c4:	e8df f002 	tbb	[pc, r2]
 80009c8:	021e0b1e 	.word	0x021e0b1e
        break;
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80009cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80009ce:	f1b2 7fc0 	cmp.w	r2, #25165824	; 0x1800000
 80009d2:	d107      	bne.n	80009e4 <HAL_DMA_Init+0xbc>
 80009d4:	e016      	b.n	8000a04 <HAL_DMA_Init+0xdc>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80009d6:	2a02      	cmp	r2, #2
 80009d8:	d914      	bls.n	8000a04 <HAL_DMA_Init+0xdc>
 80009da:	2a03      	cmp	r2, #3
 80009dc:	d102      	bne.n	80009e4 <HAL_DMA_Init+0xbc>
      case DMA_FIFO_THRESHOLD_HALFFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80009de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80009e0:	01d2      	lsls	r2, r2, #7
 80009e2:	d40f      	bmi.n	8000a04 <HAL_DMA_Init+0xdc>
      return HAL_ERROR; 
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80009e4:	614b      	str	r3, [r1, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80009e6:	4620      	mov	r0, r4
 80009e8:	f7ff ff88 	bl	80008fc <DMA_CalcBaseAndBitshift>
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009ec:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80009ee:	233f      	movs	r3, #63	; 0x3f
 80009f0:	4093      	lsls	r3, r2
 80009f2:	6083      	str	r3, [r0, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009f4:	2000      	movs	r0, #0
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009f6:	2301      	movs	r3, #1
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009f8:	6560      	str	r0, [r4, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009fa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8000a00:	2001      	movs	r0, #1
 8000a02:	bd70      	pop	{r4, r5, r6, pc}
    tmp |= hdma->Init.FIFOThreshold;
    
    if (DMA_CheckFifoParam(hdma) != HAL_OK)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000a04:	2340      	movs	r3, #64	; 0x40
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000a06:	2001      	movs	r0, #1
    tmp |= hdma->Init.FIFOThreshold;
    
    if (DMA_CheckFifoParam(hdma) != HAL_OK)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000a08:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000a0a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 8000a0e:	bd70      	pop	{r4, r5, r6, pc}
 8000a10:	f010803f 	.word	0xf010803f

08000a14 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a14:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a16:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000a1a:	2c01      	cmp	r4, #1
 8000a1c:	d037      	beq.n	8000a8e <HAL_DMA_Start_IT+0x7a>
 8000a1e:	2401      	movs	r4, #1
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a20:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8000a22:	2500      	movs	r5, #0
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a24:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a28:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8000a2c:	2c01      	cmp	r4, #1
 8000a2e:	f04f 0402 	mov.w	r4, #2
 8000a32:	d128      	bne.n	8000a86 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a34:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000a38:	6804      	ldr	r4, [r0, #0]
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a3a:	6545      	str	r5, [r0, #84]	; 0x54
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000a3c:	6825      	ldr	r5, [r4, #0]
 8000a3e:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000a42:	6025      	str	r5, [r4, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000a44:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000a46:	6883      	ldr	r3, [r0, #8]
 8000a48:	2b40      	cmp	r3, #64	; 0x40
 8000a4a:	d102      	bne.n	8000a52 <HAL_DMA_Start_IT+0x3e>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000a4c:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000a4e:	60e1      	str	r1, [r4, #12]
 8000a50:	e001      	b.n	8000a56 <HAL_DMA_Start_IT+0x42>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8000a52:	60a1      	str	r1, [r4, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000a54:	60e2      	str	r2, [r4, #12]
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a56:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000a58:	233f      	movs	r3, #63	; 0x3f
 8000a5a:	4093      	lsls	r3, r2
 8000a5c:	60b3      	str	r3, [r6, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000a5e:	6823      	ldr	r3, [r4, #0]
 8000a60:	f043 0316 	orr.w	r3, r3, #22
 8000a64:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000a66:	6963      	ldr	r3, [r4, #20]
 8000a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a6c:	6163      	str	r3, [r4, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000a6e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000a70:	b11b      	cbz	r3, 8000a7a <HAL_DMA_Start_IT+0x66>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000a72:	6823      	ldr	r3, [r4, #0]
 8000a74:	f043 0308 	orr.w	r3, r3, #8
 8000a78:	6023      	str	r3, [r4, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000a7a:	6823      	ldr	r3, [r4, #0]
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;
 8000a7c:	2000      	movs	r0, #0
    {
      hdma->Instance->CR  |= DMA_IT_HT;
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	6023      	str	r3, [r4, #0]
 8000a84:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000a86:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000a8a:	4620      	mov	r0, r4
 8000a8c:	bd70      	pop	{r4, r5, r6, pc}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a8e:	2002      	movs	r0, #2
    /* Return error status */
    status = HAL_BUSY;
  }
  
  return status;
}
 8000a90:	bd70      	pop	{r4, r5, r6, pc}

08000a92 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a92:	b570      	push	{r4, r5, r6, lr}
 8000a94:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a96:	6d85      	ldr	r5, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8000a98:	f7ff fc64 	bl	8000364 <HAL_GetTick>
 8000a9c:	4606      	mov	r6, r0
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a9e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8000aa2:	2b02      	cmp	r3, #2
 8000aa4:	d006      	beq.n	8000ab4 <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000aa6:	2380      	movs	r3, #128	; 0x80
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    return HAL_ERROR;
 8000aa8:	2001      	movs	r0, #1
  
  uint32_t tickstart = HAL_GetTick();
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000aaa:	6563      	str	r3, [r4, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aac:	2300      	movs	r3, #0
 8000aae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    return HAL_ERROR;
 8000ab2:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ab4:	6823      	ldr	r3, [r4, #0]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	f022 0216 	bic.w	r2, r2, #22
 8000abc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000abe:	695a      	ldr	r2, [r3, #20]
 8000ac0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ac4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ac6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000ac8:	b90a      	cbnz	r2, 8000ace <HAL_DMA_Abort+0x3c>
 8000aca:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000acc:	b11a      	cbz	r2, 8000ad6 <HAL_DMA_Abort+0x44>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	f022 0208 	bic.w	r2, r2, #8
 8000ad4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	f022 0201 	bic.w	r2, r2, #1
 8000adc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ade:	6823      	ldr	r3, [r4, #0]
 8000ae0:	6818      	ldr	r0, [r3, #0]
 8000ae2:	f010 0001 	ands.w	r0, r0, #1
 8000ae6:	d00d      	beq.n	8000b04 <HAL_DMA_Abort+0x72>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ae8:	f7ff fc3c 	bl	8000364 <HAL_GetTick>
 8000aec:	1b80      	subs	r0, r0, r6
 8000aee:	2805      	cmp	r0, #5
 8000af0:	d9f5      	bls.n	8000ade <HAL_DMA_Abort+0x4c>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000af2:	2320      	movs	r3, #32
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000af4:	2003      	movs	r0, #3
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000af6:	6563      	str	r3, [r4, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000af8:	2300      	movs	r3, #0
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000afa:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000afe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
        
        return HAL_TIMEOUT;
 8000b02:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b04:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000b06:	233f      	movs	r3, #63	; 0x3f
 8000b08:	4093      	lsls	r3, r2
 8000b0a:	60ab      	str	r3, [r5, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000b0c:	2301      	movs	r3, #1
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b0e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000b12:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  }
  return HAL_OK;
}
 8000b16:	bd70      	pop	{r4, r5, r6, pc}

08000b18 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b18:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	d003      	beq.n	8000b28 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b20:	2380      	movs	r3, #128	; 0x80
 8000b22:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000b24:	2001      	movs	r0, #1
 8000b26:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000b28:	6802      	ldr	r2, [r0, #0]
    return HAL_ERROR;
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000b2a:	2305      	movs	r3, #5
 8000b2c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
  }

  return HAL_OK;
 8000b30:	2000      	movs	r0, #0
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000b32:	6813      	ldr	r3, [r2, #0]
 8000b34:	f023 0301 	bic.w	r3, r3, #1
 8000b38:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
}
 8000b3a:	4770      	bx	lr

08000b3c <HAL_DMA_IRQHandler>:
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8000b3c:	2300      	movs	r3, #0
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8000b40:	9301      	str	r3, [sp, #4]
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b42:	4604      	mov	r4, r0
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8000b44:	4b59      	ldr	r3, [pc, #356]	; (8000cac <HAL_DMA_IRQHandler+0x170>)

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000b46:	6d85      	ldr	r5, [r0, #88]	; 0x58
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8000b48:	681f      	ldr	r7, [r3, #0]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  uint32_t timeout = SystemCoreClock / 9600;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;
 8000b4e:	682e      	ldr	r6, [r5, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b50:	4093      	lsls	r3, r2
 8000b52:	421e      	tst	r6, r3
 8000b54:	d00c      	beq.n	8000b70 <HAL_DMA_IRQHandler+0x34>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000b56:	6801      	ldr	r1, [r0, #0]
 8000b58:	6808      	ldr	r0, [r1, #0]
 8000b5a:	0740      	lsls	r0, r0, #29
 8000b5c:	d508      	bpl.n	8000b70 <HAL_DMA_IRQHandler+0x34>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000b5e:	6808      	ldr	r0, [r1, #0]
 8000b60:	f020 0004 	bic.w	r0, r0, #4
 8000b64:	6008      	str	r0, [r1, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000b66:	60ab      	str	r3, [r5, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000b68:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b70:	4b4f      	ldr	r3, [pc, #316]	; (8000cb0 <HAL_DMA_IRQHandler+0x174>)
 8000b72:	4093      	lsls	r3, r2
 8000b74:	421e      	tst	r6, r3
 8000b76:	d008      	beq.n	8000b8a <HAL_DMA_IRQHandler+0x4e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000b78:	6821      	ldr	r1, [r4, #0]
 8000b7a:	6949      	ldr	r1, [r1, #20]
 8000b7c:	0609      	lsls	r1, r1, #24
 8000b7e:	d504      	bpl.n	8000b8a <HAL_DMA_IRQHandler+0x4e>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000b80:	60ab      	str	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000b82:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b84:	f043 0302 	orr.w	r3, r3, #2
 8000b88:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b8a:	4b4a      	ldr	r3, [pc, #296]	; (8000cb4 <HAL_DMA_IRQHandler+0x178>)
 8000b8c:	4093      	lsls	r3, r2
 8000b8e:	421e      	tst	r6, r3
 8000b90:	d008      	beq.n	8000ba4 <HAL_DMA_IRQHandler+0x68>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000b92:	6821      	ldr	r1, [r4, #0]
 8000b94:	6809      	ldr	r1, [r1, #0]
 8000b96:	0788      	lsls	r0, r1, #30
 8000b98:	d504      	bpl.n	8000ba4 <HAL_DMA_IRQHandler+0x68>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000b9a:	60ab      	str	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000b9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b9e:	f043 0304 	orr.w	r3, r3, #4
 8000ba2:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000ba4:	2310      	movs	r3, #16
 8000ba6:	fa03 f202 	lsl.w	r2, r3, r2
 8000baa:	4216      	tst	r6, r2
 8000bac:	d017      	beq.n	8000bde <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000bae:	6823      	ldr	r3, [r4, #0]
 8000bb0:	6819      	ldr	r1, [r3, #0]
 8000bb2:	0709      	lsls	r1, r1, #28
 8000bb4:	d513      	bpl.n	8000bde <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000bb6:	60aa      	str	r2, [r5, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	0350      	lsls	r0, r2, #13
 8000bbc:	d504      	bpl.n	8000bc8 <HAL_DMA_IRQHandler+0x8c>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	0319      	lsls	r1, r3, #12
 8000bc2:	d508      	bpl.n	8000bd6 <HAL_DMA_IRQHandler+0x9a>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000bc4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000bc6:	e007      	b.n	8000bd8 <HAL_DMA_IRQHandler+0x9c>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	05d2      	lsls	r2, r2, #23
 8000bcc:	d403      	bmi.n	8000bd6 <HAL_DMA_IRQHandler+0x9a>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	f022 0208 	bic.w	r2, r2, #8
 8000bd4:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000bd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000bd8:	b10b      	cbz	r3, 8000bde <HAL_DMA_IRQHandler+0xa2>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000bda:	4620      	mov	r0, r4
 8000bdc:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000bde:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000be0:	2220      	movs	r2, #32
 8000be2:	408a      	lsls	r2, r1
 8000be4:	4216      	tst	r6, r2
 8000be6:	d03b      	beq.n	8000c60 <HAL_DMA_IRQHandler+0x124>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000be8:	6823      	ldr	r3, [r4, #0]
 8000bea:	6818      	ldr	r0, [r3, #0]
 8000bec:	06c6      	lsls	r6, r0, #27
 8000bee:	d537      	bpl.n	8000c60 <HAL_DMA_IRQHandler+0x124>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000bf0:	60aa      	str	r2, [r5, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000bf2:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000bf6:	2a05      	cmp	r2, #5
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000bf8:	681a      	ldr	r2, [r3, #0]
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000bfa:	d119      	bne.n	8000c30 <HAL_DMA_IRQHandler+0xf4>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000bfc:	f022 0216 	bic.w	r2, r2, #22
 8000c00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c02:	695a      	ldr	r2, [r3, #20]
 8000c04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c08:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c0a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000c0c:	b90a      	cbnz	r2, 8000c12 <HAL_DMA_IRQHandler+0xd6>
 8000c0e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000c10:	b11a      	cbz	r2, 8000c1a <HAL_DMA_IRQHandler+0xde>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	f022 0208 	bic.w	r2, r2, #8
 8000c18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c1a:	233f      	movs	r3, #63	; 0x3f
 8000c1c:	408b      	lsls	r3, r1
 8000c1e:	60ab      	str	r3, [r5, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c20:	2300      	movs	r3, #0
 8000c22:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
         
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000c26:	2301      	movs	r3, #1
 8000c28:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	
        if(hdma->XferAbortCallback != NULL)
 8000c2c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000c2e:	e037      	b.n	8000ca0 <HAL_DMA_IRQHandler+0x164>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }
      
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c30:	0350      	lsls	r0, r2, #13
 8000c32:	d504      	bpl.n	8000c3e <HAL_DMA_IRQHandler+0x102>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	0319      	lsls	r1, r3, #12
 8000c38:	d40e      	bmi.n	8000c58 <HAL_DMA_IRQHandler+0x11c>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000c3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c3c:	e00d      	b.n	8000c5a <HAL_DMA_IRQHandler+0x11e>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000c44:	d108      	bne.n	8000c58 <HAL_DMA_IRQHandler+0x11c>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000c46:	6819      	ldr	r1, [r3, #0]
 8000c48:	f021 0110 	bic.w	r1, r1, #16
 8000c4c:	6019      	str	r1, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
          
          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c4e:	2301      	movs	r3, #1
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000c50:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          
          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c54:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        }
        
        if(hdma->XferCpltCallback != NULL)
 8000c58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000c5a:	b10b      	cbz	r3, 8000c60 <HAL_DMA_IRQHandler+0x124>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000c5c:	4620      	mov	r0, r4
 8000c5e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000c60:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000c62:	b303      	cbz	r3, 8000ca6 <HAL_DMA_IRQHandler+0x16a>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000c64:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000c66:	07da      	lsls	r2, r3, #31
 8000c68:	d519      	bpl.n	8000c9e <HAL_DMA_IRQHandler+0x162>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000c6a:	2305      	movs	r3, #5
      
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000c6c:	6822      	ldr	r2, [r4, #0]
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000c6e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000c72:	6813      	ldr	r3, [r2, #0]
 8000c74:	f023 0301 	bic.w	r3, r3, #1
 8000c78:	6013      	str	r3, [r2, #0]
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8000c7a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000c7e:	fbb7 f7f3 	udiv	r7, r7, r3
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
      
      do
      {
        if (++count > timeout)
 8000c82:	9b01      	ldr	r3, [sp, #4]
 8000c84:	3301      	adds	r3, #1
 8000c86:	429f      	cmp	r7, r3
 8000c88:	9301      	str	r3, [sp, #4]
 8000c8a:	d302      	bcc.n	8000c92 <HAL_DMA_IRQHandler+0x156>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000c8c:	6813      	ldr	r3, [r2, #0]
 8000c8e:	07db      	lsls	r3, r3, #31
 8000c90:	d4f7      	bmi.n	8000c82 <HAL_DMA_IRQHandler+0x146>

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000c92:	2300      	movs	r3, #0
 8000c94:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    }
    
    if(hdma->XferErrorCallback != NULL)
 8000c9e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000ca0:	b10b      	cbz	r3, 8000ca6 <HAL_DMA_IRQHandler+0x16a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000ca2:	4620      	mov	r0, r4
 8000ca4:	4798      	blx	r3
    }
  }
}
 8000ca6:	b003      	add	sp, #12
 8000ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000004 	.word	0x20000004
 8000cb0:	00800001 	.word	0x00800001
 8000cb4:	00800004 	.word	0x00800004

08000cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cbc:	680b      	ldr	r3, [r1, #0]
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cbe:	b085      	sub	sp, #20
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cc0:	4e6f      	ldr	r6, [pc, #444]	; (8000e80 <HAL_GPIO_Init+0x1c8>)
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cc2:	9301      	str	r3, [sp, #4]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000cc4:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc6:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 8000e88 <HAL_GPIO_Init+0x1d0>
 8000cca:	46b6      	mov	lr, r6

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ccc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8000e8c <HAL_GPIO_Init+0x1d4>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000cd0:	2201      	movs	r2, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8000cd2:	9c01      	ldr	r4, [sp, #4]

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000cd4:	409a      	lsls	r2, r3
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8000cd6:	ea32 0404 	bics.w	r4, r2, r4
 8000cda:	f040 80c9 	bne.w	8000e70 <HAL_GPIO_Init+0x1b8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cde:	684c      	ldr	r4, [r1, #4]
 8000ce0:	f024 0910 	bic.w	r9, r4, #16
 8000ce4:	f1b9 0f02 	cmp.w	r9, #2
 8000ce8:	d114      	bne.n	8000d14 <HAL_GPIO_Init+0x5c>
 8000cea:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000cee:	f003 0b07 	and.w	fp, r3, #7
 8000cf2:	250f      	movs	r5, #15
 8000cf4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000cf8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000cfc:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000d00:	fa05 f50b 	lsl.w	r5, r5, fp
 8000d04:	ea27 0505 	bic.w	r5, r7, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000d08:	690f      	ldr	r7, [r1, #16]
 8000d0a:	fa07 f70b 	lsl.w	r7, r7, fp
 8000d0e:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3] = temp;
 8000d10:	f8ca 7020 	str.w	r7, [sl, #32]
 8000d14:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d18:	2503      	movs	r5, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d1a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d1c:	f004 0b03 	and.w	fp, r4, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d20:	fa05 f50a 	lsl.w	r5, r5, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d24:	f109 39ff 	add.w	r9, r9, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d28:	fa0b fb0a 	lsl.w	fp, fp, sl
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d2c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d2e:	f1b9 0f01 	cmp.w	r9, #1
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d32:	ea07 0705 	and.w	r7, r7, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d36:	ea4b 0707 	orr.w	r7, fp, r7
      GPIOx->MODER = temp;
 8000d3a:	6007      	str	r7, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d3c:	d812      	bhi.n	8000d64 <HAL_GPIO_Init+0xac>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d3e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d40:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8000d44:	68cf      	ldr	r7, [r1, #12]
 8000d46:	fa07 f70a 	lsl.w	r7, r7, sl
 8000d4a:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000d4e:	f3c4 1900 	ubfx	r9, r4, #4, #1
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
        GPIOx->OSPEEDR = temp;
 8000d52:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000d54:	fa09 f903 	lsl.w	r9, r9, r3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d58:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d5a:	ea27 0702 	bic.w	r7, r7, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000d5e:	ea49 0707 	orr.w	r7, r9, r7
        GPIOx->OTYPER = temp;
 8000d62:	6047      	str	r7, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d64:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d66:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000d68:	688f      	ldr	r7, [r1, #8]
 8000d6a:	fa07 f70a 	lsl.w	r7, r7, sl
 8000d6e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000d70:	60c5      	str	r5, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d72:	00e5      	lsls	r5, r4, #3
 8000d74:	d57c      	bpl.n	8000e70 <HAL_GPIO_Init+0x1b8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	f8dc 5044 	ldr.w	r5, [ip, #68]	; 0x44
 8000d7a:	f023 0703 	bic.w	r7, r3, #3

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000d7e:	f003 0a03 	and.w	sl, r3, #3
 8000d82:	f04f 090f 	mov.w	r9, #15
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d86:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8000d8a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000d8e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	f8cc 5044 	str.w	r5, [ip, #68]	; 0x44
 8000d96:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000d9a:	f8dc 5044 	ldr.w	r5, [ip, #68]	; 0x44
 8000d9e:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8000da2:	9503      	str	r5, [sp, #12]
 8000da4:	9d03      	ldr	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000da6:	fa09 f50a 	lsl.w	r5, r9, sl
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
 8000daa:	f8d7 b008 	ldr.w	fp, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000dae:	ea2b 0905 	bic.w	r9, fp, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000db2:	4d34      	ldr	r5, [pc, #208]	; (8000e84 <HAL_GPIO_Init+0x1cc>)
 8000db4:	42a8      	cmp	r0, r5
 8000db6:	d024      	beq.n	8000e02 <HAL_GPIO_Init+0x14a>
 8000db8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000dbc:	42a8      	cmp	r0, r5
 8000dbe:	d022      	beq.n	8000e06 <HAL_GPIO_Init+0x14e>
 8000dc0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000dc4:	42a8      	cmp	r0, r5
 8000dc6:	d020      	beq.n	8000e0a <HAL_GPIO_Init+0x152>
 8000dc8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000dcc:	42a8      	cmp	r0, r5
 8000dce:	d01e      	beq.n	8000e0e <HAL_GPIO_Init+0x156>
 8000dd0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000dd4:	42a8      	cmp	r0, r5
 8000dd6:	d01c      	beq.n	8000e12 <HAL_GPIO_Init+0x15a>
 8000dd8:	4540      	cmp	r0, r8
 8000dda:	d01c      	beq.n	8000e16 <HAL_GPIO_Init+0x15e>
 8000ddc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000de0:	42a8      	cmp	r0, r5
 8000de2:	d01a      	beq.n	8000e1a <HAL_GPIO_Init+0x162>
 8000de4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000de8:	42a8      	cmp	r0, r5
 8000dea:	d018      	beq.n	8000e1e <HAL_GPIO_Init+0x166>
 8000dec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000df0:	42a8      	cmp	r0, r5
 8000df2:	d016      	beq.n	8000e22 <HAL_GPIO_Init+0x16a>
 8000df4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000df8:	42a8      	cmp	r0, r5
 8000dfa:	bf14      	ite	ne
 8000dfc:	250a      	movne	r5, #10
 8000dfe:	2509      	moveq	r5, #9
 8000e00:	e010      	b.n	8000e24 <HAL_GPIO_Init+0x16c>
 8000e02:	2500      	movs	r5, #0
 8000e04:	e00e      	b.n	8000e24 <HAL_GPIO_Init+0x16c>
 8000e06:	2501      	movs	r5, #1
 8000e08:	e00c      	b.n	8000e24 <HAL_GPIO_Init+0x16c>
 8000e0a:	2502      	movs	r5, #2
 8000e0c:	e00a      	b.n	8000e24 <HAL_GPIO_Init+0x16c>
 8000e0e:	2503      	movs	r5, #3
 8000e10:	e008      	b.n	8000e24 <HAL_GPIO_Init+0x16c>
 8000e12:	2504      	movs	r5, #4
 8000e14:	e006      	b.n	8000e24 <HAL_GPIO_Init+0x16c>
 8000e16:	2505      	movs	r5, #5
 8000e18:	e004      	b.n	8000e24 <HAL_GPIO_Init+0x16c>
 8000e1a:	2506      	movs	r5, #6
 8000e1c:	e002      	b.n	8000e24 <HAL_GPIO_Init+0x16c>
 8000e1e:	2507      	movs	r5, #7
 8000e20:	e000      	b.n	8000e24 <HAL_GPIO_Init+0x16c>
 8000e22:	2508      	movs	r5, #8
 8000e24:	fa05 f50a 	lsl.w	r5, r5, sl
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e28:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e2c:	ea45 0509 	orr.w	r5, r5, r9
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e30:	60bd      	str	r5, [r7, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8000e32:	ea6f 0702 	mvn.w	r7, r2
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e36:	6835      	ldr	r5, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 8000e38:	bf0c      	ite	eq
 8000e3a:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8000e3c:	4315      	orrne	r5, r2
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e3e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8000e42:	f8ce 5000 	str.w	r5, [lr]

        temp = EXTI->EMR;
 8000e46:	f8de 5004 	ldr.w	r5, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 8000e4a:	bf0c      	ite	eq
 8000e4c:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8000e4e:	4315      	orrne	r5, r2
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e50:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8000e54:	6075      	str	r5, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e56:	68b5      	ldr	r5, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8000e58:	bf0c      	ite	eq
 8000e5a:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8000e5c:	4315      	orrne	r5, r2
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e5e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8000e60:	f8ce 5008 	str.w	r5, [lr, #8]

        temp = EXTI->FTSR;
 8000e64:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 8000e68:	bf54      	ite	pl
 8000e6a:	403d      	andpl	r5, r7
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8000e6c:	4315      	orrmi	r5, r2
        }
        EXTI->FTSR = temp;
 8000e6e:	60f5      	str	r5, [r6, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e70:	3301      	adds	r3, #1
 8000e72:	2b10      	cmp	r3, #16
 8000e74:	f47f af2c 	bne.w	8000cd0 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8000e78:	b005      	add	sp, #20
 8000e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e7e:	bf00      	nop
 8000e80:	40013c00 	.word	0x40013c00
 8000e84:	40020000 	.word	0x40020000
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40021400 	.word	0x40021400

08000e90 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e90:	b902      	cbnz	r2, 8000e94 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000e92:	0409      	lsls	r1, r1, #16
 8000e94:	6181      	str	r1, [r0, #24]
 8000e96:	4770      	bx	lr

08000e98 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000e98:	6943      	ldr	r3, [r0, #20]
 8000e9a:	4059      	eors	r1, r3
 8000e9c:	6141      	str	r1, [r0, #20]
 8000e9e:	4770      	bx	lr

08000ea0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ea0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000ea2:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000ea4:	6959      	ldr	r1, [r3, #20]
 8000ea6:	4201      	tst	r1, r0
 8000ea8:	d002      	beq.n	8000eb0 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000eaa:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000eac:	f002 fa36 	bl	800331c <HAL_GPIO_EXTI_Callback>
 8000eb0:	bd08      	pop	{r3, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40013c00 	.word	0x40013c00

08000eb8 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb8:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <HAL_PWREx_EnableOverDrive+0x68>)
 8000eba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ebc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000ec0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec2:	641a      	str	r2, [r3, #64]	; 0x40
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000ec6:	4c17      	ldr	r4, [pc, #92]	; (8000f24 <HAL_PWREx_EnableOverDrive+0x6c>)
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000ecc:	4625      	mov	r5, r4
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ece:	9301      	str	r3, [sp, #4]
 8000ed0:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000ed2:	6823      	ldr	r3, [r4, #0]
 8000ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ed8:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000eda:	f7ff fa43 	bl	8000364 <HAL_GetTick>
 8000ede:	4606      	mov	r6, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000ee0:	686b      	ldr	r3, [r5, #4]
 8000ee2:	4c10      	ldr	r4, [pc, #64]	; (8000f24 <HAL_PWREx_EnableOverDrive+0x6c>)
 8000ee4:	03da      	lsls	r2, r3, #15
 8000ee6:	d407      	bmi.n	8000ef8 <HAL_PWREx_EnableOverDrive+0x40>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000ee8:	f7ff fa3c 	bl	8000364 <HAL_GetTick>
 8000eec:	1b80      	subs	r0, r0, r6
 8000eee:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000ef2:	d9f5      	bls.n	8000ee0 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8000ef4:	2003      	movs	r0, #3
 8000ef6:	e011      	b.n	8000f1c <HAL_PWREx_EnableOverDrive+0x64>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000ef8:	6823      	ldr	r3, [r4, #0]
 8000efa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000efe:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f00:	f7ff fa30 	bl	8000364 <HAL_GetTick>
 8000f04:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000f06:	6863      	ldr	r3, [r4, #4]
 8000f08:	039b      	lsls	r3, r3, #14
 8000f0a:	d406      	bmi.n	8000f1a <HAL_PWREx_EnableOverDrive+0x62>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000f0c:	f7ff fa2a 	bl	8000364 <HAL_GetTick>
 8000f10:	1b40      	subs	r0, r0, r5
 8000f12:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000f16:	d9f6      	bls.n	8000f06 <HAL_PWREx_EnableOverDrive+0x4e>
 8000f18:	e7ec      	b.n	8000ef4 <HAL_PWREx_EnableOverDrive+0x3c>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000f1a:	2000      	movs	r0, #0
}
 8000f1c:	b002      	add	sp, #8
 8000f1e:	bd70      	pop	{r4, r5, r6, pc}
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40007000 	.word	0x40007000

08000f28 <HAL_RCC_OscConfig>:
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f28:	6803      	ldr	r3, [r0, #0]
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000f2c:	4604      	mov	r4, r0
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f2e:	07d8      	lsls	r0, r3, #31
 8000f30:	d403      	bmi.n	8000f3a <HAL_RCC_OscConfig+0x12>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f32:	6823      	ldr	r3, [r4, #0]
 8000f34:	0799      	lsls	r1, r3, #30
 8000f36:	d452      	bmi.n	8000fde <HAL_RCC_OscConfig+0xb6>
 8000f38:	e0a5      	b.n	8001086 <HAL_RCC_OscConfig+0x15e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f3a:	4b96      	ldr	r3, [pc, #600]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	689a      	ldr	r2, [r3, #8]
 8000f3e:	f002 020c 	and.w	r2, r2, #12
 8000f42:	2a04      	cmp	r2, #4
 8000f44:	d007      	beq.n	8000f56 <HAL_RCC_OscConfig+0x2e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f46:	689a      	ldr	r2, [r3, #8]
 8000f48:	f002 020c 	and.w	r2, r2, #12
 8000f4c:	2a08      	cmp	r2, #8
 8000f4e:	d10b      	bne.n	8000f68 <HAL_RCC_OscConfig+0x40>
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	025a      	lsls	r2, r3, #9
 8000f54:	d508      	bpl.n	8000f68 <HAL_RCC_OscConfig+0x40>
    {
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f56:	4b8f      	ldr	r3, [pc, #572]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	039b      	lsls	r3, r3, #14
 8000f5c:	d5e9      	bpl.n	8000f32 <HAL_RCC_OscConfig+0xa>
 8000f5e:	6863      	ldr	r3, [r4, #4]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d1e6      	bne.n	8000f32 <HAL_RCC_OscConfig+0xa>
      {
        return HAL_ERROR;
 8000f64:	2001      	movs	r0, #1
 8000f66:	e176      	b.n	8001256 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f68:	6863      	ldr	r3, [r4, #4]
 8000f6a:	4d8a      	ldr	r5, [pc, #552]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f70:	d013      	beq.n	8000f9a <HAL_RCC_OscConfig+0x72>
 8000f72:	b95b      	cbnz	r3, 8000f8c <HAL_RCC_OscConfig+0x64>
 8000f74:	682b      	ldr	r3, [r5, #0]
 8000f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f7a:	602b      	str	r3, [r5, #0]
 8000f7c:	682b      	ldr	r3, [r5, #0]
 8000f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f82:	602b      	str	r3, [r5, #0]
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f84:	f7ff f9ee 	bl	8000364 <HAL_GetTick>
 8000f88:	4606      	mov	r6, r0
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f8a:	e024      	b.n	8000fd6 <HAL_RCC_OscConfig+0xae>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f90:	682b      	ldr	r3, [r5, #0]
 8000f92:	d106      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x7a>
 8000f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f98:	602b      	str	r3, [r5, #0]
 8000f9a:	682b      	ldr	r3, [r5, #0]
 8000f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa0:	e005      	b.n	8000fae <HAL_RCC_OscConfig+0x86>
 8000fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fa6:	602b      	str	r3, [r5, #0]
 8000fa8:	682b      	ldr	r3, [r5, #0]
 8000faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fae:	602b      	str	r3, [r5, #0]
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fb0:	f7ff f9d8 	bl	8000364 <HAL_GetTick>
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb4:	4d77      	ldr	r5, [pc, #476]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fb6:	4606      	mov	r6, r0
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb8:	682b      	ldr	r3, [r5, #0]
 8000fba:	039f      	lsls	r7, r3, #14
 8000fbc:	d4b9      	bmi.n	8000f32 <HAL_RCC_OscConfig+0xa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fbe:	f7ff f9d1 	bl	8000364 <HAL_GetTick>
 8000fc2:	1b80      	subs	r0, r0, r6
 8000fc4:	2864      	cmp	r0, #100	; 0x64
 8000fc6:	d9f7      	bls.n	8000fb8 <HAL_RCC_OscConfig+0x90>
          {
            return HAL_TIMEOUT;
 8000fc8:	2003      	movs	r0, #3
 8000fca:	e144      	b.n	8001256 <HAL_RCC_OscConfig+0x32e>
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fcc:	f7ff f9ca 	bl	8000364 <HAL_GetTick>
 8000fd0:	1b80      	subs	r0, r0, r6
 8000fd2:	2864      	cmp	r0, #100	; 0x64
 8000fd4:	d8f8      	bhi.n	8000fc8 <HAL_RCC_OscConfig+0xa0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fd6:	682b      	ldr	r3, [r5, #0]
 8000fd8:	0398      	lsls	r0, r3, #14
 8000fda:	d4f7      	bmi.n	8000fcc <HAL_RCC_OscConfig+0xa4>
 8000fdc:	e7a9      	b.n	8000f32 <HAL_RCC_OscConfig+0xa>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fde:	4b6d      	ldr	r3, [pc, #436]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	f012 0f0c 	tst.w	r2, #12
 8000fe6:	d007      	beq.n	8000ff8 <HAL_RCC_OscConfig+0xd0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	f002 020c 	and.w	r2, r2, #12
 8000fee:	2a08      	cmp	r2, #8
 8000ff0:	d117      	bne.n	8001022 <HAL_RCC_OscConfig+0xfa>
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	0259      	lsls	r1, r3, #9
 8000ff6:	d414      	bmi.n	8001022 <HAL_RCC_OscConfig+0xfa>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ff8:	4b66      	ldr	r3, [pc, #408]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	0792      	lsls	r2, r2, #30
 8000ffe:	d502      	bpl.n	8001006 <HAL_RCC_OscConfig+0xde>
 8001000:	68e2      	ldr	r2, [r4, #12]
 8001002:	2a01      	cmp	r2, #1
 8001004:	d1ae      	bne.n	8000f64 <HAL_RCC_OscConfig+0x3c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	21f8      	movs	r1, #248	; 0xf8
 800100a:	fa91 f1a1 	rbit	r1, r1
 800100e:	6920      	ldr	r0, [r4, #16]
 8001010:	fab1 f181 	clz	r1, r1
 8001014:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001018:	fa00 f101 	lsl.w	r1, r0, r1
 800101c:	430a      	orrs	r2, r1
 800101e:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001020:	e031      	b.n	8001086 <HAL_RCC_OscConfig+0x15e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001022:	68e3      	ldr	r3, [r4, #12]
 8001024:	4d5b      	ldr	r5, [pc, #364]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8001026:	b1f3      	cbz	r3, 8001066 <HAL_RCC_OscConfig+0x13e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001028:	682b      	ldr	r3, [r5, #0]
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001030:	f7ff f998 	bl	8000364 <HAL_GetTick>
 8001034:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001036:	682b      	ldr	r3, [r5, #0]
 8001038:	4856      	ldr	r0, [pc, #344]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 800103a:	079b      	lsls	r3, r3, #30
 800103c:	d405      	bmi.n	800104a <HAL_RCC_OscConfig+0x122>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800103e:	f7ff f991 	bl	8000364 <HAL_GetTick>
 8001042:	1b80      	subs	r0, r0, r6
 8001044:	2802      	cmp	r0, #2
 8001046:	d9f6      	bls.n	8001036 <HAL_RCC_OscConfig+0x10e>
 8001048:	e7be      	b.n	8000fc8 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800104a:	6803      	ldr	r3, [r0, #0]
 800104c:	22f8      	movs	r2, #248	; 0xf8
 800104e:	fa92 f2a2 	rbit	r2, r2
 8001052:	6921      	ldr	r1, [r4, #16]
 8001054:	fab2 f282 	clz	r2, r2
 8001058:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800105c:	fa01 f202 	lsl.w	r2, r1, r2
 8001060:	4313      	orrs	r3, r2
 8001062:	6003      	str	r3, [r0, #0]
 8001064:	e00f      	b.n	8001086 <HAL_RCC_OscConfig+0x15e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001066:	682b      	ldr	r3, [r5, #0]
 8001068:	f023 0301 	bic.w	r3, r3, #1
 800106c:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800106e:	f7ff f979 	bl	8000364 <HAL_GetTick>
 8001072:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001074:	682b      	ldr	r3, [r5, #0]
 8001076:	079f      	lsls	r7, r3, #30
 8001078:	d505      	bpl.n	8001086 <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800107a:	f7ff f973 	bl	8000364 <HAL_GetTick>
 800107e:	1b80      	subs	r0, r0, r6
 8001080:	2802      	cmp	r0, #2
 8001082:	d9f7      	bls.n	8001074 <HAL_RCC_OscConfig+0x14c>
 8001084:	e7a0      	b.n	8000fc8 <HAL_RCC_OscConfig+0xa0>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001086:	6823      	ldr	r3, [r4, #0]
 8001088:	071e      	lsls	r6, r3, #28
 800108a:	d403      	bmi.n	8001094 <HAL_RCC_OscConfig+0x16c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800108c:	6823      	ldr	r3, [r4, #0]
 800108e:	075d      	lsls	r5, r3, #29
 8001090:	d549      	bpl.n	8001126 <HAL_RCC_OscConfig+0x1fe>
 8001092:	e022      	b.n	80010da <HAL_RCC_OscConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001094:	6963      	ldr	r3, [r4, #20]
 8001096:	4d3f      	ldr	r5, [pc, #252]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8001098:	b17b      	cbz	r3, 80010ba <HAL_RCC_OscConfig+0x192>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800109a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	676b      	str	r3, [r5, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010a2:	f7ff f95f 	bl	8000364 <HAL_GetTick>
 80010a6:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010a8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80010aa:	0798      	lsls	r0, r3, #30
 80010ac:	d4ee      	bmi.n	800108c <HAL_RCC_OscConfig+0x164>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010ae:	f7ff f959 	bl	8000364 <HAL_GetTick>
 80010b2:	1b80      	subs	r0, r0, r6
 80010b4:	2802      	cmp	r0, #2
 80010b6:	d9f7      	bls.n	80010a8 <HAL_RCC_OscConfig+0x180>
 80010b8:	e786      	b.n	8000fc8 <HAL_RCC_OscConfig+0xa0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010ba:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80010bc:	f023 0301 	bic.w	r3, r3, #1
 80010c0:	676b      	str	r3, [r5, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010c2:	f7ff f94f 	bl	8000364 <HAL_GetTick>
 80010c6:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010c8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80010ca:	0799      	lsls	r1, r3, #30
 80010cc:	d5de      	bpl.n	800108c <HAL_RCC_OscConfig+0x164>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010ce:	f7ff f949 	bl	8000364 <HAL_GetTick>
 80010d2:	1b80      	subs	r0, r0, r6
 80010d4:	2802      	cmp	r0, #2
 80010d6:	d9f7      	bls.n	80010c8 <HAL_RCC_OscConfig+0x1a0>
 80010d8:	e776      	b.n	8000fc8 <HAL_RCC_OscConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80010da:	4b2e      	ldr	r3, [pc, #184]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80010dc:	4d2e      	ldr	r5, [pc, #184]	; (8001198 <HAL_RCC_OscConfig+0x270>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80010de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010e4:	641a      	str	r2, [r3, #64]	; 0x40
 80010e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ec:	9301      	str	r3, [sp, #4]
 80010ee:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80010f0:	682b      	ldr	r3, [r5, #0]
 80010f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f6:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80010f8:	f7ff f934 	bl	8000364 <HAL_GetTick>
 80010fc:	4606      	mov	r6, r0
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80010fe:	682b      	ldr	r3, [r5, #0]
 8001100:	05da      	lsls	r2, r3, #23
 8001102:	d514      	bpl.n	800112e <HAL_RCC_OscConfig+0x206>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001104:	68a3      	ldr	r3, [r4, #8]
 8001106:	4d23      	ldr	r5, [pc, #140]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8001108:	2b01      	cmp	r3, #1
 800110a:	d116      	bne.n	800113a <HAL_RCC_OscConfig+0x212>
 800110c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001114:	f241 3588 	movw	r5, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001118:	f7ff f924 	bl	8000364 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800111c:	4e1d      	ldr	r6, [pc, #116]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800111e:	4607      	mov	r7, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001120:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001122:	079b      	lsls	r3, r3, #30
 8001124:	d526      	bpl.n	8001174 <HAL_RCC_OscConfig+0x24c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001126:	69a2      	ldr	r2, [r4, #24]
 8001128:	2a00      	cmp	r2, #0
 800112a:	d137      	bne.n	800119c <HAL_RCC_OscConfig+0x274>
 800112c:	e079      	b.n	8001222 <HAL_RCC_OscConfig+0x2fa>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800112e:	f7ff f919 	bl	8000364 <HAL_GetTick>
 8001132:	1b80      	subs	r0, r0, r6
 8001134:	2864      	cmp	r0, #100	; 0x64
 8001136:	d9e2      	bls.n	80010fe <HAL_RCC_OscConfig+0x1d6>
 8001138:	e746      	b.n	8000fc8 <HAL_RCC_OscConfig+0xa0>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800113a:	b96b      	cbnz	r3, 8001158 <HAL_RCC_OscConfig+0x230>
 800113c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800113e:	f241 3788 	movw	r7, #5000	; 0x1388
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001142:	f023 0301 	bic.w	r3, r3, #1
 8001146:	672b      	str	r3, [r5, #112]	; 0x70
 8001148:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800114a:	f023 0304 	bic.w	r3, r3, #4
 800114e:	672b      	str	r3, [r5, #112]	; 0x70
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001150:	f7ff f908 	bl	8000364 <HAL_GetTick>
 8001154:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001156:	e019      	b.n	800118c <HAL_RCC_OscConfig+0x264>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001158:	2b05      	cmp	r3, #5
 800115a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800115c:	d103      	bne.n	8001166 <HAL_RCC_OscConfig+0x23e>
 800115e:	f043 0304 	orr.w	r3, r3, #4
 8001162:	672b      	str	r3, [r5, #112]	; 0x70
 8001164:	e7d2      	b.n	800110c <HAL_RCC_OscConfig+0x1e4>
 8001166:	f023 0301 	bic.w	r3, r3, #1
 800116a:	672b      	str	r3, [r5, #112]	; 0x70
 800116c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800116e:	f023 0304 	bic.w	r3, r3, #4
 8001172:	e7ce      	b.n	8001112 <HAL_RCC_OscConfig+0x1ea>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001174:	f7ff f8f6 	bl	8000364 <HAL_GetTick>
 8001178:	1bc0      	subs	r0, r0, r7
 800117a:	42a8      	cmp	r0, r5
 800117c:	d9d0      	bls.n	8001120 <HAL_RCC_OscConfig+0x1f8>
 800117e:	e723      	b.n	8000fc8 <HAL_RCC_OscConfig+0xa0>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001180:	f7ff f8f0 	bl	8000364 <HAL_GetTick>
 8001184:	1b80      	subs	r0, r0, r6
 8001186:	42b8      	cmp	r0, r7
 8001188:	f63f af1e 	bhi.w	8000fc8 <HAL_RCC_OscConfig+0xa0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800118c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800118e:	0798      	lsls	r0, r3, #30
 8001190:	d4f6      	bmi.n	8001180 <HAL_RCC_OscConfig+0x258>
 8001192:	e7c8      	b.n	8001126 <HAL_RCC_OscConfig+0x1fe>
 8001194:	40023800 	.word	0x40023800
 8001198:	40007000 	.word	0x40007000
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800119c:	4d2f      	ldr	r5, [pc, #188]	; (800125c <HAL_RCC_OscConfig+0x334>)
 800119e:	68ab      	ldr	r3, [r5, #8]
 80011a0:	f003 030c 	and.w	r3, r3, #12
 80011a4:	2b08      	cmp	r3, #8
 80011a6:	f43f aedd 	beq.w	8000f64 <HAL_RCC_OscConfig+0x3c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011aa:	682b      	ldr	r3, [r5, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011ac:	2a02      	cmp	r2, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011b2:	602b      	str	r3, [r5, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011b4:	d143      	bne.n	800123e <HAL_RCC_OscConfig+0x316>
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b6:	f7ff f8d5 	bl	8000364 <HAL_GetTick>
 80011ba:	4607      	mov	r7, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011bc:	682b      	ldr	r3, [r5, #0]
 80011be:	4e27      	ldr	r6, [pc, #156]	; (800125c <HAL_RCC_OscConfig+0x334>)
 80011c0:	0199      	lsls	r1, r3, #6
 80011c2:	d430      	bmi.n	8001226 <HAL_RCC_OscConfig+0x2fe>
 80011c4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80011c8:	fa92 f2a2 	rbit	r2, r2
 80011cc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011d0:	fab2 f082 	clz	r0, r2
 80011d4:	fa93 f3a3 	rbit	r3, r3
 80011d8:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 80011dc:	fab3 f583 	clz	r5, r3
 80011e0:	fa92 f2a2 	rbit	r2, r2
 80011e4:	69e3      	ldr	r3, [r4, #28]
 80011e6:	fab2 f182 	clz	r1, r2
 80011ea:	6a27      	ldr	r7, [r4, #32]
 80011ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80011ee:	431f      	orrs	r7, r3
 80011f0:	4082      	lsls	r2, r0
 80011f2:	f047 5300 	orr.w	r3, r7, #536870912	; 0x20000000
 80011f6:	ea43 0002 	orr.w	r0, r3, r2
 80011fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80011fc:	085a      	lsrs	r2, r3, #1
 80011fe:	3a01      	subs	r2, #1
 8001200:	fa02 f305 	lsl.w	r3, r2, r5
 8001204:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001206:	4303      	orrs	r3, r0
 8001208:	408a      	lsls	r2, r1
 800120a:	4313      	orrs	r3, r2
 800120c:	6073      	str	r3, [r6, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800120e:	6833      	ldr	r3, [r6, #0]
 8001210:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001214:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001216:	f7ff f8a5 	bl	8000364 <HAL_GetTick>
 800121a:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800121c:	6833      	ldr	r3, [r6, #0]
 800121e:	019a      	lsls	r2, r3, #6
 8001220:	d507      	bpl.n	8001232 <HAL_RCC_OscConfig+0x30a>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001222:	2000      	movs	r0, #0
 8001224:	e017      	b.n	8001256 <HAL_RCC_OscConfig+0x32e>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001226:	f7ff f89d 	bl	8000364 <HAL_GetTick>
 800122a:	1bc0      	subs	r0, r0, r7
 800122c:	2802      	cmp	r0, #2
 800122e:	d9c5      	bls.n	80011bc <HAL_RCC_OscConfig+0x294>
 8001230:	e6ca      	b.n	8000fc8 <HAL_RCC_OscConfig+0xa0>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001232:	f7ff f897 	bl	8000364 <HAL_GetTick>
 8001236:	1b00      	subs	r0, r0, r4
 8001238:	2802      	cmp	r0, #2
 800123a:	d9ef      	bls.n	800121c <HAL_RCC_OscConfig+0x2f4>
 800123c:	e6c4      	b.n	8000fc8 <HAL_RCC_OscConfig+0xa0>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800123e:	f7ff f891 	bl	8000364 <HAL_GetTick>
 8001242:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001244:	682b      	ldr	r3, [r5, #0]
 8001246:	019b      	lsls	r3, r3, #6
 8001248:	d5eb      	bpl.n	8001222 <HAL_RCC_OscConfig+0x2fa>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800124a:	f7ff f88b 	bl	8000364 <HAL_GetTick>
 800124e:	1b00      	subs	r0, r0, r4
 8001250:	2802      	cmp	r0, #2
 8001252:	d9f7      	bls.n	8001244 <HAL_RCC_OscConfig+0x31c>
 8001254:	e6b8      	b.n	8000fc8 <HAL_RCC_OscConfig+0xa0>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001256:	b003      	add	sp, #12
 8001258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800125a:	bf00      	nop
 800125c:	40023800 	.word	0x40023800

08001260 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001260:	491b      	ldr	r1, [pc, #108]	; (80012d0 <HAL_RCC_GetSysClockFreq+0x70>)
 8001262:	688b      	ldr	r3, [r1, #8]
 8001264:	f003 030c 	and.w	r3, r3, #12
 8001268:	2b04      	cmp	r3, #4
 800126a:	d02c      	beq.n	80012c6 <HAL_RCC_GetSysClockFreq+0x66>
 800126c:	2b08      	cmp	r3, #8
 800126e:	d12c      	bne.n	80012ca <HAL_RCC_GetSysClockFreq+0x6a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001270:	6848      	ldr	r0, [r1, #4]
 8001272:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001276:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001278:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800127c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001280:	684b      	ldr	r3, [r1, #4]
 8001282:	fa92 f2a2 	rbit	r2, r2
 8001286:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 800128a:	fab2 f282 	clz	r2, r2
 800128e:	ea01 0103 	and.w	r1, r1, r3
 8001292:	fa21 f102 	lsr.w	r1, r1, r2
 8001296:	bf14      	ite	ne
 8001298:	4a0e      	ldrne	r2, [pc, #56]	; (80012d4 <HAL_RCC_GetSysClockFreq+0x74>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 800129a:	4a0f      	ldreq	r2, [pc, #60]	; (80012d8 <HAL_RCC_GetSysClockFreq+0x78>)
 800129c:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 80012a0:	4a0b      	ldr	r2, [pc, #44]	; (80012d0 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80012a2:	fb00 f301 	mul.w	r3, r0, r1
 80012a6:	f44f 3040 	mov.w	r0, #196608	; 0x30000
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 80012aa:	6852      	ldr	r2, [r2, #4]
 80012ac:	fa90 f0a0 	rbit	r0, r0
      
      sysclockfreq = pllvco/pllp;
 80012b0:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 80012b4:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 80012b8:	fa22 f000 	lsr.w	r0, r2, r0
 80012bc:	3001      	adds	r0, #1
 80012be:	0040      	lsls	r0, r0, #1
 80012c0:	fbb3 f0f0 	udiv	r0, r3, r0
 80012c4:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012c6:	4803      	ldr	r0, [pc, #12]	; (80012d4 <HAL_RCC_GetSysClockFreq+0x74>)
 80012c8:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012ca:	4803      	ldr	r0, [pc, #12]	; (80012d8 <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800
 80012d4:	017d7840 	.word	0x017d7840
 80012d8:	00f42400 	.word	0x00f42400

080012dc <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80012dc:	4a50      	ldr	r2, [pc, #320]	; (8001420 <HAL_RCC_ClockConfig+0x144>)
 80012de:	6813      	ldr	r3, [r2, #0]
 80012e0:	f003 030f 	and.w	r3, r3, #15
 80012e4:	428b      	cmp	r3, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012ea:	4604      	mov	r4, r0
 80012ec:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80012ee:	d30a      	bcc.n	8001306 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
  
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012f0:	6821      	ldr	r1, [r4, #0]
 80012f2:	0788      	lsls	r0, r1, #30
 80012f4:	d514      	bpl.n	8001320 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012f6:	484b      	ldr	r0, [pc, #300]	; (8001424 <HAL_RCC_ClockConfig+0x148>)
 80012f8:	6883      	ldr	r3, [r0, #8]
 80012fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012fe:	68a3      	ldr	r3, [r4, #8]
 8001300:	4313      	orrs	r3, r2
 8001302:	6083      	str	r3, [r0, #8]
 8001304:	e00c      	b.n	8001320 <HAL_RCC_ClockConfig+0x44>
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001306:	6813      	ldr	r3, [r2, #0]
 8001308:	f023 030f 	bic.w	r3, r3, #15
 800130c:	430b      	orrs	r3, r1
 800130e:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001310:	6813      	ldr	r3, [r2, #0]
 8001312:	f003 030f 	and.w	r3, r3, #15
 8001316:	4299      	cmp	r1, r3
 8001318:	d0ea      	beq.n	80012f0 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 800131a:	2001      	movs	r0, #1
 800131c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001320:	07c9      	lsls	r1, r1, #31
 8001322:	d406      	bmi.n	8001332 <HAL_RCC_ClockConfig+0x56>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001324:	4a3e      	ldr	r2, [pc, #248]	; (8001420 <HAL_RCC_ClockConfig+0x144>)
 8001326:	6813      	ldr	r3, [r2, #0]
 8001328:	f003 030f 	and.w	r3, r3, #15
 800132c:	429d      	cmp	r5, r3
 800132e:	d342      	bcc.n	80013b6 <HAL_RCC_ClockConfig+0xda>
 8001330:	e04b      	b.n	80013ca <HAL_RCC_ClockConfig+0xee>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001332:	6862      	ldr	r2, [r4, #4]
 8001334:	4b3b      	ldr	r3, [pc, #236]	; (8001424 <HAL_RCC_ClockConfig+0x148>)
 8001336:	2a01      	cmp	r2, #1
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001338:	6819      	ldr	r1, [r3, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800133a:	d102      	bne.n	8001342 <HAL_RCC_ClockConfig+0x66>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133c:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 8001340:	e006      	b.n	8001350 <HAL_RCC_ClockConfig+0x74>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001342:	2a02      	cmp	r2, #2
 8001344:	d102      	bne.n	800134c <HAL_RCC_ClockConfig+0x70>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001346:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 800134a:	e001      	b.n	8001350 <HAL_RCC_ClockConfig+0x74>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800134c:	f011 0f02 	tst.w	r1, #2
 8001350:	d0e3      	beq.n	800131a <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001352:	6899      	ldr	r1, [r3, #8]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001354:	f241 3888 	movw	r8, #5000	; 0x1388
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001358:	4f32      	ldr	r7, [pc, #200]	; (8001424 <HAL_RCC_ClockConfig+0x148>)
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800135a:	f021 0103 	bic.w	r1, r1, #3
 800135e:	430a      	orrs	r2, r1
 8001360:	609a      	str	r2, [r3, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001362:	f7fe ffff 	bl	8000364 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001366:	6863      	ldr	r3, [r4, #4]
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001368:	4606      	mov	r6, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800136a:	2b01      	cmp	r3, #1
 800136c:	d10c      	bne.n	8001388 <HAL_RCC_ClockConfig+0xac>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	f003 030c 	and.w	r3, r3, #12
 8001374:	2b04      	cmp	r3, #4
 8001376:	d0d5      	beq.n	8001324 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001378:	f7fe fff4 	bl	8000364 <HAL_GetTick>
 800137c:	1b80      	subs	r0, r0, r6
 800137e:	4540      	cmp	r0, r8
 8001380:	d9f5      	bls.n	800136e <HAL_RCC_ClockConfig+0x92>
        {
          return HAL_TIMEOUT;
 8001382:	2003      	movs	r0, #3
 8001384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001388:	2b02      	cmp	r3, #2
 800138a:	d10f      	bne.n	80013ac <HAL_RCC_ClockConfig+0xd0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	2b08      	cmp	r3, #8
 8001394:	d0c6      	beq.n	8001324 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001396:	f7fe ffe5 	bl	8000364 <HAL_GetTick>
 800139a:	1b80      	subs	r0, r0, r6
 800139c:	4540      	cmp	r0, r8
 800139e:	d9f5      	bls.n	800138c <HAL_RCC_ClockConfig+0xb0>
 80013a0:	e7ef      	b.n	8001382 <HAL_RCC_ClockConfig+0xa6>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013a2:	f7fe ffdf 	bl	8000364 <HAL_GetTick>
 80013a6:	1b80      	subs	r0, r0, r6
 80013a8:	4540      	cmp	r0, r8
 80013aa:	d8ea      	bhi.n	8001382 <HAL_RCC_ClockConfig+0xa6>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	f013 0f0c 	tst.w	r3, #12
 80013b2:	d1f6      	bne.n	80013a2 <HAL_RCC_ClockConfig+0xc6>
 80013b4:	e7b6      	b.n	8001324 <HAL_RCC_ClockConfig+0x48>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013b6:	6813      	ldr	r3, [r2, #0]
 80013b8:	f023 030f 	bic.w	r3, r3, #15
 80013bc:	432b      	orrs	r3, r5
 80013be:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013c0:	6813      	ldr	r3, [r2, #0]
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	429d      	cmp	r5, r3
 80013c8:	d1a7      	bne.n	800131a <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ca:	6821      	ldr	r1, [r4, #0]
 80013cc:	074a      	lsls	r2, r1, #29
 80013ce:	d506      	bpl.n	80013de <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013d0:	4814      	ldr	r0, [pc, #80]	; (8001424 <HAL_RCC_ClockConfig+0x148>)
 80013d2:	6883      	ldr	r3, [r0, #8]
 80013d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80013d8:	68e3      	ldr	r3, [r4, #12]
 80013da:	4313      	orrs	r3, r2
 80013dc:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013de:	070b      	lsls	r3, r1, #28
 80013e0:	d507      	bpl.n	80013f2 <HAL_RCC_ClockConfig+0x116>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013e2:	4a10      	ldr	r2, [pc, #64]	; (8001424 <HAL_RCC_ClockConfig+0x148>)
 80013e4:	6921      	ldr	r1, [r4, #16]
 80013e6:	6893      	ldr	r3, [r2, #8]
 80013e8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80013ec:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80013f0:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80013f2:	f7ff ff35 	bl	8001260 <HAL_RCC_GetSysClockFreq>
 80013f6:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <HAL_RCC_ClockConfig+0x148>)
 80013f8:	22f0      	movs	r2, #240	; 0xf0
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	fa92 f2a2 	rbit	r2, r2
 8001400:	fab2 f282 	clz	r2, r2
 8001404:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001408:	40d3      	lsrs	r3, r2
 800140a:	4a07      	ldr	r2, [pc, #28]	; (8001428 <HAL_RCC_ClockConfig+0x14c>)
 800140c:	5cd3      	ldrb	r3, [r2, r3]
 800140e:	40d8      	lsrs	r0, r3
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_RCC_ClockConfig+0x150>)
 8001412:	6018      	str	r0, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001414:	2000      	movs	r0, #0
 8001416:	f7fe ff7d 	bl	8000314 <HAL_InitTick>
  
  return HAL_OK;
 800141a:	2000      	movs	r0, #0
}
 800141c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001420:	40023c00 	.word	0x40023c00
 8001424:	40023800 	.word	0x40023800
 8001428:	08005015 	.word	0x08005015
 800142c:	20000004 	.word	0x20000004

08001430 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001430:	4b01      	ldr	r3, [pc, #4]	; (8001438 <HAL_RCC_GetHCLKFreq+0x8>)
 8001432:	6818      	ldr	r0, [r3, #0]
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	20000004 	.word	0x20000004

0800143c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <HAL_RCC_GetPCLK1Freq+0x24>)
 800143e:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	fa92 f2a2 	rbit	r2, r2
 8001448:	fab2 f282 	clz	r2, r2
 800144c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001450:	40d3      	lsrs	r3, r2
 8001452:	4a04      	ldr	r2, [pc, #16]	; (8001464 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001454:	5cd3      	ldrb	r3, [r2, r3]
 8001456:	4a04      	ldr	r2, [pc, #16]	; (8001468 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001458:	6810      	ldr	r0, [r2, #0]
}
 800145a:	40d8      	lsrs	r0, r3
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800
 8001464:	08005025 	.word	0x08005025
 8001468:	20000004 	.word	0x20000004

0800146c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800146c:	4b08      	ldr	r3, [pc, #32]	; (8001490 <HAL_RCC_GetPCLK2Freq+0x24>)
 800146e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	fa92 f2a2 	rbit	r2, r2
 8001478:	fab2 f282 	clz	r2, r2
 800147c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001480:	40d3      	lsrs	r3, r2
 8001482:	4a04      	ldr	r2, [pc, #16]	; (8001494 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001484:	5cd3      	ldrb	r3, [r2, r3]
 8001486:	4a04      	ldr	r2, [pc, #16]	; (8001498 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001488:	6810      	ldr	r0, [r2, #0]
} 
 800148a:	40d8      	lsrs	r0, r3
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800
 8001494:	08005025 	.word	0x08005025
 8001498:	20000004 	.word	0x20000004

0800149c <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800149c:	6803      	ldr	r3, [r0, #0]
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800149e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80014a2:	f013 0601 	ands.w	r6, r3, #1
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80014a6:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80014a8:	d00b      	beq.n	80014c2 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80014aa:	4ab6      	ldr	r2, [pc, #728]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80014ac:	6891      	ldr	r1, [r2, #8]
 80014ae:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80014b2:	6091      	str	r1, [r2, #8]
 80014b4:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80014b6:	6891      	ldr	r1, [r2, #8]
 80014b8:	4331      	orrs	r1, r6
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tickstart = 0;
  uint32_t tmpreg0 = 0;
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
 80014ba:	fab6 f686 	clz	r6, r6
 80014be:	0976      	lsrs	r6, r6, #5
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80014c0:	6091      	str	r1, [r2, #8]
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80014c2:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 80014c6:	d012      	beq.n	80014ee <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80014c8:	49ae      	ldr	r1, [pc, #696]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80014ca:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80014cc:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80014d0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80014d4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
    {
      plli2sused = 1; 
 80014d8:	bf08      	it	eq
 80014da:	2601      	moveq	r6, #1
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80014dc:	ea42 0205 	orr.w	r2, r2, r5
{
  uint32_t tickstart = 0;
  uint32_t tmpreg0 = 0;
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;
 80014e0:	bf16      	itet	ne
 80014e2:	fab5 f585 	clzne	r5, r5
 80014e6:	2500      	moveq	r5, #0
 80014e8:	096d      	lsrne	r5, r5, #5
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80014ea:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80014ee:	02d8      	lsls	r0, r3, #11
 80014f0:	d511      	bpl.n	8001516 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80014f2:	48a4      	ldr	r0, [pc, #656]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80014f4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80014f6:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80014fa:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80014fe:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001502:	ea42 0201 	orr.w	r2, r2, r1
 8001506:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800150a:	d003      	beq.n	8001514 <HAL_RCCEx_PeriphCLKConfig+0x78>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 800150c:	2900      	cmp	r1, #0
 800150e:	bf08      	it	eq
 8001510:	2501      	moveq	r5, #1
 8001512:	e000      	b.n	8001516 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1; 
 8001514:	2601      	movs	r6, #1
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {    
      plli2sused = 1; 
 8001516:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800151a:	bf18      	it	ne
 800151c:	2601      	movne	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800151e:	0699      	lsls	r1, r3, #26
 8001520:	d55d      	bpl.n	80015de <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	4b98      	ldr	r3, [pc, #608]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001524:	4f98      	ldr	r7, [pc, #608]	; (8001788 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001526:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001528:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800152c:	641a      	str	r2, [r3, #64]	; 0x40
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001534:	9301      	str	r3, [sp, #4]
 8001536:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800153e:	603b      	str	r3, [r7, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001540:	f7fe ff10 	bl	8000364 <HAL_GetTick>
 8001544:	4680      	mov	r8, r0
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	05da      	lsls	r2, r3, #23
 800154a:	d407      	bmi.n	800155c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800154c:	f7fe ff0a 	bl	8000364 <HAL_GetTick>
 8001550:	ebc8 0000 	rsb	r0, r8, r0
 8001554:	2864      	cmp	r0, #100	; 0x64
 8001556:	d9f6      	bls.n	8001546 <HAL_RCCEx_PeriphCLKConfig+0xaa>
      {
        return HAL_TIMEOUT;
 8001558:	2003      	movs	r0, #3
 800155a:	e340      	b.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x742>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800155c:	4f89      	ldr	r7, [pc, #548]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800155e:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001560:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001564:	d10f      	bne.n	8001586 <HAL_RCCEx_PeriphCLKConfig+0xea>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001566:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001568:	f402 7340 	and.w	r3, r2, #768	; 0x300
 800156c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001570:	4b84      	ldr	r3, [pc, #528]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001572:	d12b      	bne.n	80015cc <HAL_RCCEx_PeriphCLKConfig+0x130>
 8001574:	6899      	ldr	r1, [r3, #8]
 8001576:	f421 10f8 	bic.w	r0, r1, #2031616	; 0x1f0000
 800157a:	f022 4170 	bic.w	r1, r2, #4026531840	; 0xf0000000
 800157e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8001582:	4301      	orrs	r1, r0
 8001584:	e025      	b.n	80015d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001586:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001588:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800158c:	4293      	cmp	r3, r2
 800158e:	d0ea      	beq.n	8001566 <HAL_RCCEx_PeriphCLKConfig+0xca>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001590:	6f3b      	ldr	r3, [r7, #112]	; 0x70

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001592:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001594:	f423 7340 	bic.w	r3, r3, #768	; 0x300

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001598:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800159c:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800159e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80015a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80015a4:	673a      	str	r2, [r7, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80015a6:	673b      	str	r3, [r7, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80015a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015aa:	07db      	lsls	r3, r3, #31
 80015ac:	d5db      	bpl.n	8001566 <HAL_RCCEx_PeriphCLKConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ae:	f7fe fed9 	bl	8000364 <HAL_GetTick>
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b2:	f241 3988 	movw	r9, #5000	; 0x1388

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b6:	4680      	mov	r8, r0
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015ba:	0798      	lsls	r0, r3, #30
 80015bc:	d4d3      	bmi.n	8001566 <HAL_RCCEx_PeriphCLKConfig+0xca>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015be:	f7fe fed1 	bl	8000364 <HAL_GetTick>
 80015c2:	ebc8 0000 	rsb	r0, r8, r0
 80015c6:	4548      	cmp	r0, r9
 80015c8:	d9f6      	bls.n	80015b8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80015ca:	e7c5      	b.n	8001558 <HAL_RCCEx_PeriphCLKConfig+0xbc>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80015cc:	6899      	ldr	r1, [r3, #8]
 80015ce:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80015d2:	6099      	str	r1, [r3, #8]
 80015d4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80015d8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80015da:	430a      	orrs	r2, r1
 80015dc:	671a      	str	r2, [r3, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80015de:	6823      	ldr	r3, [r4, #0]
 80015e0:	06d9      	lsls	r1, r3, #27
 80015e2:	d50c      	bpl.n	80015fe <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80015e4:	4a67      	ldr	r2, [pc, #412]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80015e6:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80015ea:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80015ee:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 80015f2:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 80015f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80015f8:	4301      	orrs	r1, r0
 80015fa:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80015fe:	045a      	lsls	r2, r3, #17
 8001600:	d508      	bpl.n	8001614 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001602:	4860      	ldr	r0, [pc, #384]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001604:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001608:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 800160c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800160e:	430a      	orrs	r2, r1
 8001610:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001614:	041f      	lsls	r7, r3, #16
 8001616:	d508      	bpl.n	800162a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001618:	485a      	ldr	r0, [pc, #360]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800161a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800161e:	f422 2140 	bic.w	r1, r2, #786432	; 0xc0000
 8001622:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8001624:	430a      	orrs	r2, r1
 8001626:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800162a:	03d8      	lsls	r0, r3, #15
 800162c:	d508      	bpl.n	8001640 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800162e:	4855      	ldr	r0, [pc, #340]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001630:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001634:	f422 1140 	bic.w	r1, r2, #3145728	; 0x300000
 8001638:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800163a:	430a      	orrs	r2, r1
 800163c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001640:	0399      	lsls	r1, r3, #14
 8001642:	d508      	bpl.n	8001656 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001644:	484f      	ldr	r0, [pc, #316]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001646:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800164a:	f422 0140 	bic.w	r1, r2, #12582912	; 0xc00000
 800164e:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8001650:	430a      	orrs	r2, r1
 8001652:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001656:	065a      	lsls	r2, r3, #25
 8001658:	d508      	bpl.n	800166c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800165a:	484a      	ldr	r0, [pc, #296]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800165c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001660:	f022 0103 	bic.w	r1, r2, #3
 8001664:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001666:	430a      	orrs	r2, r1
 8001668:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800166c:	061f      	lsls	r7, r3, #24
 800166e:	d508      	bpl.n	8001682 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001670:	4844      	ldr	r0, [pc, #272]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001672:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001676:	f022 010c 	bic.w	r1, r2, #12
 800167a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800167c:	430a      	orrs	r2, r1
 800167e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001682:	05d8      	lsls	r0, r3, #23
 8001684:	d508      	bpl.n	8001698 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001686:	483f      	ldr	r0, [pc, #252]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001688:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800168c:	f022 0130 	bic.w	r1, r2, #48	; 0x30
 8001690:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8001692:	430a      	orrs	r2, r1
 8001694:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001698:	0599      	lsls	r1, r3, #22
 800169a:	d508      	bpl.n	80016ae <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800169c:	4839      	ldr	r0, [pc, #228]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800169e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80016a2:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 80016a6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80016a8:	430a      	orrs	r2, r1
 80016aa:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80016ae:	055a      	lsls	r2, r3, #21
 80016b0:	d508      	bpl.n	80016c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80016b2:	4834      	ldr	r0, [pc, #208]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80016b4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80016b8:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 80016bc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80016be:	430a      	orrs	r2, r1
 80016c0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80016c4:	051f      	lsls	r7, r3, #20
 80016c6:	d508      	bpl.n	80016da <HAL_RCCEx_PeriphCLKConfig+0x23e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80016c8:	482e      	ldr	r0, [pc, #184]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80016ca:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80016ce:	f422 6140 	bic.w	r1, r2, #3072	; 0xc00
 80016d2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80016d4:	430a      	orrs	r2, r1
 80016d6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80016da:	04d8      	lsls	r0, r3, #19
 80016dc:	d508      	bpl.n	80016f0 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80016de:	4829      	ldr	r0, [pc, #164]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80016e0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80016e4:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80016e8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80016ea:	430a      	orrs	r2, r1
 80016ec:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80016f0:	0499      	lsls	r1, r3, #18
 80016f2:	d508      	bpl.n	8001706 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80016f4:	4823      	ldr	r0, [pc, #140]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80016f6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80016fa:	f422 4140 	bic.w	r1, r2, #49152	; 0xc000
 80016fe:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001700:	430a      	orrs	r2, r1
 8001702:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001706:	025a      	lsls	r2, r3, #9
 8001708:	d508      	bpl.n	800171c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800170a:	481e      	ldr	r0, [pc, #120]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800170c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001710:	f022 6180 	bic.w	r1, r2, #67108864	; 0x4000000
 8001714:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8001716:	430a      	orrs	r2, r1
 8001718:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800171c:	029f      	lsls	r7, r3, #10
 800171e:	d50c      	bpl.n	800173a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001720:	4818      	ldr	r0, [pc, #96]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001722:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001724:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 8001728:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800172c:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 8001730:	bf08      	it	eq
 8001732:	2501      	moveq	r5, #1
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001734:	430a      	orrs	r2, r1
 8001736:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1; 
 800173a:	f013 0f08 	tst.w	r3, #8
 800173e:	bf18      	it	ne
 8001740:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001742:	0358      	lsls	r0, r3, #13
 8001744:	d508      	bpl.n	8001758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001746:	480f      	ldr	r0, [pc, #60]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001748:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800174c:	f022 7140 	bic.w	r1, r2, #50331648	; 0x3000000
 8001750:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8001752:	430a      	orrs	r2, r1
 8001754:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001758:	0219      	lsls	r1, r3, #8
 800175a:	d509      	bpl.n	8001770 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800175c:	4809      	ldr	r0, [pc, #36]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800175e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001762:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8001766:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800176a:	430a      	orrs	r2, r1
 800176c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001770:	2e01      	cmp	r6, #1
 8001772:	d00b      	beq.n	800178c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8001774:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001778:	d008      	beq.n	800178c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800177a:	2d01      	cmp	r5, #1
 800177c:	f040 818c 	bne.w	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8001780:	e123      	b.n	80019ca <HAL_RCCEx_PeriphCLKConfig+0x52e>
 8001782:	bf00      	nop
 8001784:	40023800 	.word	0x40023800
 8001788:	40007000 	.word	0x40007000
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();  
 800178c:	4ec8      	ldr	r6, [pc, #800]	; (8001ab0 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 800178e:	6833      	ldr	r3, [r6, #0]
 8001790:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001794:	6033      	str	r3, [r6, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001796:	f7fe fde5 	bl	8000364 <HAL_GetTick>
 800179a:	4607      	mov	r7, r0
    
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800179c:	6833      	ldr	r3, [r6, #0]
 800179e:	f8df e310 	ldr.w	lr, [pc, #784]	; 8001ab0 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80017a2:	011a      	lsls	r2, r3, #4
 80017a4:	d505      	bpl.n	80017b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80017a6:	f7fe fddd 	bl	8000364 <HAL_GetTick>
 80017aa:	1bc0      	subs	r0, r0, r7
 80017ac:	2864      	cmp	r0, #100	; 0x64
 80017ae:	d9f5      	bls.n	800179c <HAL_RCCEx_PeriphCLKConfig+0x300>
 80017b0:	e6d2      	b.n	8001558 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80017b2:	6827      	ldr	r7, [r4, #0]
 80017b4:	07fb      	lsls	r3, r7, #31
 80017b6:	d53c      	bpl.n	8001832 <HAL_RCCEx_PeriphCLKConfig+0x396>
 80017b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80017ba:	bbd3      	cbnz	r3, 8001832 <HAL_RCCEx_PeriphCLKConfig+0x396>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 80017bc:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 80017c0:	f44f 3840 	mov.w	r8, #196608	; 0x30000
 80017c4:	fa98 f9a8 	rbit	r9, r8
 80017c8:	f04f 6670 	mov.w	r6, #251658240	; 0xf000000
 80017cc:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 80017d0:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 80017d4:	fa96 fca6 	rbit	ip, r6
 80017d8:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 80017dc:	fabc fc8c 	clz	ip, ip
 80017e0:	fa9a faaa 	rbit	sl, sl
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80017e4:	faba fa8a 	clz	sl, sl
 80017e8:	fa98 f8a8 	rbit	r8, r8
 80017ec:	fab8 f888 	clz	r8, r8
 80017f0:	fa96 f6a6 	rbit	r6, r6
 80017f4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80017f8:	fab6 f686 	clz	r6, r6
 80017fc:	fa93 f3a3 	rbit	r3, r3
 8001800:	fab3 fb83 	clz	fp, r3
 8001804:	6861      	ldr	r1, [r4, #4]
 8001806:	68a3      	ldr	r3, [r4, #8]
 8001808:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 800180c:	fa01 f10a 	lsl.w	r1, r1, sl
 8001810:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001814:	fa03 f30b 	lsl.w	r3, r3, fp
 8001818:	fa20 f009 	lsr.w	r0, r0, r9
 800181c:	fa22 f20c 	lsr.w	r2, r2, ip
 8001820:	430b      	orrs	r3, r1
 8001822:	fa00 f108 	lsl.w	r1, r0, r8
 8001826:	4319      	orrs	r1, r3
 8001828:	fa02 f306 	lsl.w	r3, r2, r6
 800182c:	430b      	orrs	r3, r1
 800182e:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
    }
        
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001832:	033e      	lsls	r6, r7, #12
 8001834:	d503      	bpl.n	800183e <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8001836:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001838:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800183c:	d005      	beq.n	800184a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800183e:	02f8      	lsls	r0, r7, #11
 8001840:	d549      	bpl.n	80018d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8001842:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001844:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001848:	d145      	bne.n	80018d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 800184a:	f8df e264 	ldr.w	lr, [pc, #612]	; 8001ab0 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800184e:	f44f 3840 	mov.w	r8, #196608	; 0x30000
 8001852:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 8001856:	fa98 f9a8 	rbit	r9, r8
 800185a:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 800185e:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8001862:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 8001866:	fa96 fca6 	rbit	ip, r6
 800186a:	f647 7bc0 	movw	fp, #32704	; 0x7fc0
 800186e:	fabc fc8c 	clz	ip, ip
 8001872:	fa9b fbab 	rbit	fp, fp
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001876:	fabb fb8b 	clz	fp, fp
 800187a:	fa98 f8a8 	rbit	r8, r8
 800187e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8001882:	fab8 f888 	clz	r8, r8
 8001886:	fa93 f3a3 	rbit	r3, r3
 800188a:	fab3 fa83 	clz	sl, r3
 800188e:	fa96 f6a6 	rbit	r6, r6
 8001892:	6863      	ldr	r3, [r4, #4]
 8001894:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8001898:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 800189c:	fab6 f686 	clz	r6, r6
 80018a0:	fa03 f10b 	lsl.w	r1, r3, fp
 80018a4:	68e3      	ldr	r3, [r4, #12]
 80018a6:	fa20 f009 	lsr.w	r0, r0, r9
 80018aa:	fa22 f20c 	lsr.w	r2, r2, ip
 80018ae:	fa03 f30a 	lsl.w	r3, r3, sl
 80018b2:	430b      	orrs	r3, r1
 80018b4:	fa00 f108 	lsl.w	r1, r0, r8
 80018b8:	4319      	orrs	r1, r3
 80018ba:	fa02 f306 	lsl.w	r3, r2, r6
 80018be:	430b      	orrs	r3, r1
 80018c0:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 80018c4:	f8de 308c 	ldr.w	r3, [lr, #140]	; 0x8c
 80018c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80018ca:	f023 031f 	bic.w	r3, r3, #31
 80018ce:	3a01      	subs	r2, #1
 80018d0:	4313      	orrs	r3, r2
 80018d2:	f8ce 308c 	str.w	r3, [lr, #140]	; 0x8c
    }          

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80018d6:	01f9      	lsls	r1, r7, #7
 80018d8:	d53c      	bpl.n	8001954 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 80018da:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8001ab0 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80018de:	f04f 6870 	mov.w	r8, #251658240	; 0xf000000
 80018e2:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 80018e6:	fa98 f9a8 	rbit	r9, r8
 80018ea:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 80018ee:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 80018f2:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 80018f6:	fa96 fca6 	rbit	ip, r6
 80018fa:	f647 7bc0 	movw	fp, #32704	; 0x7fc0
 80018fe:	fabc fc8c 	clz	ip, ip
 8001902:	fa9b fbab 	rbit	fp, fp
 8001906:	f44f 3340 	mov.w	r3, #196608	; 0x30000
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800190a:	fabb fb8b 	clz	fp, fp
 800190e:	fa93 f3a3 	rbit	r3, r3
 8001912:	fab3 fa83 	clz	sl, r3
 8001916:	fa98 f8a8 	rbit	r8, r8
 800191a:	fab8 f888 	clz	r8, r8
 800191e:	fa96 f6a6 	rbit	r6, r6
 8001922:	6863      	ldr	r3, [r4, #4]
 8001924:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8001928:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 800192c:	fab6 f686 	clz	r6, r6
 8001930:	fa03 f10b 	lsl.w	r1, r3, fp
 8001934:	6923      	ldr	r3, [r4, #16]
 8001936:	fa20 f009 	lsr.w	r0, r0, r9
 800193a:	fa22 f20c 	lsr.w	r2, r2, ip
 800193e:	fa03 f30a 	lsl.w	r3, r3, sl
 8001942:	430b      	orrs	r3, r1
 8001944:	fa00 f108 	lsl.w	r1, r0, r8
 8001948:	4319      	orrs	r1, r3
 800194a:	fa02 f306 	lsl.w	r3, r2, r6
 800194e:	430b      	orrs	r3, r1
 8001950:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
    }  
         
    /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001954:	01ba      	lsls	r2, r7, #6
 8001956:	d526      	bpl.n	80019a6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8001958:	f647 7ec0 	movw	lr, #32704	; 0x7fc0
 800195c:	fa9e feae 	rbit	lr, lr
 8001960:	f44f 3040 	mov.w	r0, #196608	; 0x30000
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001964:	fabe fe8e 	clz	lr, lr
 8001968:	fa90 f0a0 	rbit	r0, r0
 800196c:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8001970:	fab0 f780 	clz	r7, r0
 8001974:	fa92 f2a2 	rbit	r2, r2
 8001978:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800197c:	fab2 f682 	clz	r6, r2
 8001980:	fa93 f3a3 	rbit	r3, r3
 8001984:	fab3 f183 	clz	r1, r3
 8001988:	6920      	ldr	r0, [r4, #16]
 800198a:	6863      	ldr	r3, [r4, #4]
 800198c:	68e2      	ldr	r2, [r4, #12]
 800198e:	40b8      	lsls	r0, r7
 8001990:	fa03 f30e 	lsl.w	r3, r3, lr
 8001994:	40b2      	lsls	r2, r6
 8001996:	4303      	orrs	r3, r0
 8001998:	431a      	orrs	r2, r3
 800199a:	68a3      	ldr	r3, [r4, #8]
 800199c:	408b      	lsls	r3, r1
 800199e:	4313      	orrs	r3, r2
 80019a0:	4a43      	ldr	r2, [pc, #268]	; (8001ab0 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 80019a2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    } 
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80019a6:	4e42      	ldr	r6, [pc, #264]	; (8001ab0 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 80019a8:	6833      	ldr	r3, [r6, #0]
 80019aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019ae:	6033      	str	r3, [r6, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019b0:	f7fe fcd8 	bl	8000364 <HAL_GetTick>
 80019b4:	4607      	mov	r7, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80019b6:	6833      	ldr	r3, [r6, #0]
 80019b8:	011b      	lsls	r3, r3, #4
 80019ba:	f53f aede 	bmi.w	800177a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80019be:	f7fe fcd1 	bl	8000364 <HAL_GetTick>
 80019c2:	1bc0      	subs	r0, r0, r7
 80019c4:	2864      	cmp	r0, #100	; 0x64
 80019c6:	d9f6      	bls.n	80019b6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80019c8:	e5c6      	b.n	8001558 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 80019ca:	4d39      	ldr	r5, [pc, #228]	; (8001ab0 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 80019cc:	682b      	ldr	r3, [r5, #0]
 80019ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019d2:	602b      	str	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019d4:	f7fe fcc6 	bl	8000364 <HAL_GetTick>
 80019d8:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80019da:	682b      	ldr	r3, [r5, #0]
 80019dc:	009f      	lsls	r7, r3, #2
 80019de:	d45d      	bmi.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0x600>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80019e0:	6825      	ldr	r5, [r4, #0]
 80019e2:	032e      	lsls	r6, r5, #12
 80019e4:	d460      	bmi.n	8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80019e6:	02e8      	lsls	r0, r5, #11
 80019e8:	d464      	bmi.n	8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x618>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80019ea:	02a9      	lsls	r1, r5, #10
 80019ec:	f100 80ad 	bmi.w	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80019f0:	072a      	lsls	r2, r5, #28
 80019f2:	d545      	bpl.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 80019f4:	4f2e      	ldr	r7, [pc, #184]	; (8001ab0 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 80019f6:	f04f 6570 	mov.w	r5, #251658240	; 0xf000000
 80019fa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80019fe:	fa95 fca5 	rbit	ip, r5
 8001a02:	f44f 3640 	mov.w	r6, #196608	; 0x30000
 8001a06:	fabc fc8c 	clz	ip, ip
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8001a0a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001a0e:	fa96 f8a6 	rbit	r8, r6
 8001a12:	f647 79c0 	movw	r9, #32704	; 0x7fc0
 8001a16:	fab8 f888 	clz	r8, r8
 8001a1a:	fa99 f9a9 	rbit	r9, r9
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001a1e:	fab9 f989 	clz	r9, r9
 8001a22:	fa96 f6a6 	rbit	r6, r6
 8001a26:	fab6 f686 	clz	r6, r6
 8001a2a:	fa95 f5a5 	rbit	r5, r5
 8001a2e:	f04f 4ee0 	mov.w	lr, #1879048192	; 0x70000000
 8001a32:	fab5 f585 	clz	r5, r5
 8001a36:	fa9e feae 	rbit	lr, lr
 8001a3a:	6963      	ldr	r3, [r4, #20]
 8001a3c:	fabe fe8e 	clz	lr, lr
 8001a40:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8001a44:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001a48:	fa03 f109 	lsl.w	r1, r3, r9
 8001a4c:	69e3      	ldr	r3, [r4, #28]
 8001a4e:	fa20 f008 	lsr.w	r0, r0, r8
 8001a52:	fa22 f20c 	lsr.w	r2, r2, ip
 8001a56:	fa03 fe0e 	lsl.w	lr, r3, lr
 8001a5a:	fa02 f305 	lsl.w	r3, r2, r5
 8001a5e:	ea41 0e0e 	orr.w	lr, r1, lr
 8001a62:	fa00 f106 	lsl.w	r1, r0, r6
 8001a66:	ea4e 0101 	orr.w	r1, lr, r1
 8001a6a:	430b      	orrs	r3, r1
 8001a6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001a70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001a80:	4c0b      	ldr	r4, [pc, #44]	; (8001ab0 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8001a82:	6823      	ldr	r3, [r4, #0]
 8001a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a88:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a8a:	f7fe fc6b 	bl	8000364 <HAL_GetTick>
 8001a8e:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001a90:	6823      	ldr	r3, [r4, #0]
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	f140 809c 	bpl.w	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x734>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001a98:	2000      	movs	r0, #0
 8001a9a:	e0a0      	b.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x742>
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001a9c:	f7fe fc62 	bl	8000364 <HAL_GetTick>
 8001aa0:	1b80      	subs	r0, r0, r6
 8001aa2:	2864      	cmp	r0, #100	; 0x64
 8001aa4:	d999      	bls.n	80019da <HAL_RCCEx_PeriphCLKConfig+0x53e>
 8001aa6:	e557      	b.n	8001558 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001aa8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001aaa:	b133      	cbz	r3, 8001aba <HAL_RCCEx_PeriphCLKConfig+0x61e>
 8001aac:	e79b      	b.n	80019e6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8001aae:	bf00      	nop
 8001ab0:	40023800 	.word	0x40023800
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001ab4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d197      	bne.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0x54e>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8001aba:	4f4a      	ldr	r7, [pc, #296]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x748>)
 8001abc:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
 8001ac0:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001ac4:	fa9c f9ac 	rbit	r9, ip
 8001ac8:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8001acc:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8001ad0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001ad4:	fa96 fea6 	rbit	lr, r6
 8001ad8:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 8001adc:	fabe fe8e 	clz	lr, lr
 8001ae0:	fa9a faaa 	rbit	sl, sl
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001ae4:	faba fa8a 	clz	sl, sl
 8001ae8:	fa9c fcac 	rbit	ip, ip
 8001aec:	f04f 6870 	mov.w	r8, #251658240	; 0xf000000
 8001af0:	fabc fc8c 	clz	ip, ip
 8001af4:	fa98 f8a8 	rbit	r8, r8
 8001af8:	fab8 f888 	clz	r8, r8
 8001afc:	fa96 f6a6 	rbit	r6, r6
 8001b00:	69a1      	ldr	r1, [r4, #24]
 8001b02:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8001b06:	6963      	ldr	r3, [r4, #20]
 8001b08:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8001b0c:	fa01 f808 	lsl.w	r8, r1, r8
 8001b10:	fa20 f009 	lsr.w	r0, r0, r9
 8001b14:	fa03 f30a 	lsl.w	r3, r3, sl
 8001b18:	fa22 f20e 	lsr.w	r2, r2, lr
 8001b1c:	fab6 f686 	clz	r6, r6
 8001b20:	fa00 f10c 	lsl.w	r1, r0, ip
 8001b24:	ea43 0308 	orr.w	r3, r3, r8
 8001b28:	4319      	orrs	r1, r3
 8001b2a:	fa02 f306 	lsl.w	r3, r2, r6
 8001b2e:	430b      	orrs	r3, r1
 8001b30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001b34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b38:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001b3a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001b3e:	3a01      	subs	r2, #1
 8001b40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001b44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001b48:	e74f      	b.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001b4a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001b4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b50:	f47f af4e 	bne.w	80019f0 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8001b54:	4f23      	ldr	r7, [pc, #140]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x748>)
 8001b56:	f04f 6c70 	mov.w	ip, #251658240	; 0xf000000
 8001b5a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001b5e:	fa9c f9ac 	rbit	r9, ip
 8001b62:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8001b66:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8001b6a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001b6e:	fa96 fea6 	rbit	lr, r6
 8001b72:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 8001b76:	fabe fe8e 	clz	lr, lr
 8001b7a:	fa9a faaa 	rbit	sl, sl
 8001b7e:	f44f 3840 	mov.w	r8, #196608	; 0x30000
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001b82:	faba fa8a 	clz	sl, sl
 8001b86:	fa98 f8a8 	rbit	r8, r8
 8001b8a:	fab8 f888 	clz	r8, r8
 8001b8e:	fa9c fcac 	rbit	ip, ip
 8001b92:	fabc fc8c 	clz	ip, ip
 8001b96:	fa96 f6a6 	rbit	r6, r6
 8001b9a:	6a21      	ldr	r1, [r4, #32]
 8001b9c:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8001ba0:	6963      	ldr	r3, [r4, #20]
 8001ba2:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8001ba6:	fa01 f808 	lsl.w	r8, r1, r8
 8001baa:	fa20 f009 	lsr.w	r0, r0, r9
 8001bae:	fa03 f30a 	lsl.w	r3, r3, sl
 8001bb2:	fab6 f686 	clz	r6, r6
 8001bb6:	fa00 f10c 	lsl.w	r1, r0, ip
 8001bba:	fa22 f20e 	lsr.w	r2, r2, lr
 8001bbe:	ea43 0308 	orr.w	r3, r3, r8
 8001bc2:	4319      	orrs	r1, r3
 8001bc4:	fa02 f306 	lsl.w	r3, r2, r6
 8001bc8:	430b      	orrs	r3, r1
 8001bca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001bce:	e70f      	b.n	80019f0 <HAL_RCCEx_PeriphCLKConfig+0x554>
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001bd0:	f7fe fbc8 	bl	8000364 <HAL_GetTick>
 8001bd4:	1b40      	subs	r0, r0, r5
 8001bd6:	2864      	cmp	r0, #100	; 0x64
 8001bd8:	f67f af5a 	bls.w	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8001bdc:	e4bc      	b.n	8001558 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 8001bde:	b003      	add	sp, #12
 8001be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001be4:	40023800 	.word	0x40023800

08001be8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001be8:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001bea:	4604      	mov	r4, r0
 8001bec:	2800      	cmp	r0, #0
 8001bee:	d04f      	beq.n	8001c90 <HAL_SPI_Init+0xa8>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001bf4:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8001bf8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001bfc:	b91b      	cbnz	r3, 8001c06 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001bfe:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c02:	f002 fa93 	bl	800412c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c06:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c08:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c0a:	68e2      	ldr	r2, [r4, #12]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c0c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c10:	680b      	ldr	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c12:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c1a:	600b      	str	r3, [r1, #0]
 8001c1c:	f04f 0300 	mov.w	r3, #0

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c20:	d903      	bls.n	8001c2a <HAL_SPI_Init+0x42>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001c22:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001c24:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8001c28:	e001      	b.n	8001c2e <HAL_SPI_Init+0x46>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001c2a:	f44f 5080 	mov.w	r0, #4096	; 0x1000

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c2e:	bf18      	it	ne
 8001c30:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001c32:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c34:	b92b      	cbnz	r3, 8001c42 <HAL_SPI_Init+0x5a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c36:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001c3a:	bf8c      	ite	hi
 8001c3c:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001c3e:	2301      	movls	r3, #1
 8001c40:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001c42:	68a5      	ldr	r5, [r4, #8]
 8001c44:	6866      	ldr	r6, [r4, #4]
 8001c46:	69a3      	ldr	r3, [r4, #24]
 8001c48:	432e      	orrs	r6, r5
 8001c4a:	6925      	ldr	r5, [r4, #16]
 8001c4c:	432e      	orrs	r6, r5
 8001c4e:	6965      	ldr	r5, [r4, #20]
 8001c50:	432e      	orrs	r6, r5
 8001c52:	69e5      	ldr	r5, [r4, #28]
 8001c54:	432e      	orrs	r6, r5
 8001c56:	6a25      	ldr	r5, [r4, #32]
 8001c58:	432e      	orrs	r6, r5
 8001c5a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8001c5c:	432e      	orrs	r6, r5
 8001c5e:	f403 7500 	and.w	r5, r3, #512	; 0x200
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001c62:	0c1b      	lsrs	r3, r3, #16
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001c64:	4335      	orrs	r5, r6
 8001c66:	600d      	str	r5, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001c68:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001c6a:	432a      	orrs	r2, r5
 8001c6c:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001c6e:	4315      	orrs	r5, r2
 8001c70:	f003 0204 	and.w	r2, r3, #4
 8001c74:	ea45 0302 	orr.w	r3, r5, r2
 8001c78:	4303      	orrs	r3, r0
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c7a:	2000      	movs	r0, #0
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001c7c:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c7e:	69cb      	ldr	r3, [r1, #28]
 8001c80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c84:	61cb      	str	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 8001c86:	2301      	movs	r3, #1
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c88:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001c8a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 8001c8e:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 8001c90:	2001      	movs	r0, #1

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
}
 8001c92:	bd70      	pop	{r4, r5, r6, pc}

08001c94 <HAL_SPI_IRQHandler>:
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
  uint32_t itsource = hspi->Instance->CR2;
 8001c94:	6803      	ldr	r3, [r0, #0]
 8001c96:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8001c98:	689a      	ldr	r2, [r3, #8]
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001c9a:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
  uint32_t itflag   = hspi->Instance->SR;

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8001c9c:	f002 0541 	and.w	r5, r2, #65	; 0x41
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001ca0:	b085      	sub	sp, #20
 8001ca2:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
  uint32_t itflag   = hspi->Instance->SR;

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8001ca4:	2d01      	cmp	r5, #1
 8001ca6:	d103      	bne.n	8001cb0 <HAL_SPI_IRQHandler+0x1c>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8001ca8:	064d      	lsls	r5, r1, #25
 8001caa:	d501      	bpl.n	8001cb0 <HAL_SPI_IRQHandler+0x1c>
  {
    hspi->RxISR(hspi);
 8001cac:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001cae:	e005      	b.n	8001cbc <HAL_SPI_IRQHandler+0x28>
    return;
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8001cb0:	0795      	lsls	r5, r2, #30
 8001cb2:	d505      	bpl.n	8001cc0 <HAL_SPI_IRQHandler+0x2c>
 8001cb4:	0608      	lsls	r0, r1, #24
 8001cb6:	d503      	bpl.n	8001cc0 <HAL_SPI_IRQHandler+0x2c>
  {
    hspi->TxISR(hspi);
 8001cb8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001cba:	4620      	mov	r0, r4
 8001cbc:	4798      	blx	r3
    return;
 8001cbe:	e056      	b.n	8001d6e <HAL_SPI_IRQHandler+0xda>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8001cc0:	f412 7fb0 	tst.w	r2, #352	; 0x160
 8001cc4:	d053      	beq.n	8001d6e <HAL_SPI_IRQHandler+0xda>
 8001cc6:	068d      	lsls	r5, r1, #26
 8001cc8:	d551      	bpl.n	8001d6e <HAL_SPI_IRQHandler+0xda>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((itflag & SPI_FLAG_OVR) != RESET)
 8001cca:	0650      	lsls	r0, r2, #25
 8001ccc:	d516      	bpl.n	8001cfc <HAL_SPI_IRQHandler+0x68>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001cce:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8001cd2:	2500      	movs	r5, #0
 8001cd4:	2803      	cmp	r0, #3
 8001cd6:	d00a      	beq.n	8001cee <HAL_SPI_IRQHandler+0x5a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001cd8:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001cda:	f040 0004 	orr.w	r0, r0, #4
 8001cde:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ce0:	9500      	str	r5, [sp, #0]
 8001ce2:	68d8      	ldr	r0, [r3, #12]
 8001ce4:	9000      	str	r0, [sp, #0]
 8001ce6:	6898      	ldr	r0, [r3, #8]
 8001ce8:	9000      	str	r0, [sp, #0]
 8001cea:	9800      	ldr	r0, [sp, #0]
 8001cec:	e006      	b.n	8001cfc <HAL_SPI_IRQHandler+0x68>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001cee:	9501      	str	r5, [sp, #4]
 8001cf0:	68da      	ldr	r2, [r3, #12]
 8001cf2:	9201      	str	r2, [sp, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	9301      	str	r3, [sp, #4]
 8001cf8:	9b01      	ldr	r3, [sp, #4]
        return;
 8001cfa:	e038      	b.n	8001d6e <HAL_SPI_IRQHandler+0xda>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((itflag & SPI_FLAG_MODF) != RESET)
 8001cfc:	0695      	lsls	r5, r2, #26
 8001cfe:	d50c      	bpl.n	8001d1a <HAL_SPI_IRQHandler+0x86>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001d00:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001d02:	f040 0001 	orr.w	r0, r0, #1
 8001d06:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001d08:	2000      	movs	r0, #0
 8001d0a:	9002      	str	r0, [sp, #8]
 8001d0c:	6898      	ldr	r0, [r3, #8]
 8001d0e:	9002      	str	r0, [sp, #8]
 8001d10:	6818      	ldr	r0, [r3, #0]
 8001d12:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8001d16:	6018      	str	r0, [r3, #0]
 8001d18:	9802      	ldr	r0, [sp, #8]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((itflag & SPI_FLAG_FRE) != RESET)
 8001d1a:	05d0      	lsls	r0, r2, #23
 8001d1c:	d508      	bpl.n	8001d30 <HAL_SPI_IRQHandler+0x9c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001d1e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001d20:	f042 0208 	orr.w	r2, r2, #8
 8001d24:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001d26:	2200      	movs	r2, #0
 8001d28:	9203      	str	r2, [sp, #12]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	9203      	str	r2, [sp, #12]
 8001d2e:	9a03      	ldr	r2, [sp, #12]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d30:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001d32:	b1e2      	cbz	r2, 8001d6e <HAL_SPI_IRQHandler+0xda>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001d3a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001d42:	078a      	lsls	r2, r1, #30
 8001d44:	d010      	beq.n	8001d68 <HAL_SPI_IRQHandler+0xd4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001d46:	685a      	ldr	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001d48:	6da0      	ldr	r0, [r4, #88]	; 0x58

      hspi->State = HAL_SPI_STATE_READY;
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001d4a:	f022 0203 	bic.w	r2, r2, #3
 8001d4e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001d50:	b118      	cbz	r0, 8001d5a <HAL_SPI_IRQHandler+0xc6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001d52:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <HAL_SPI_IRQHandler+0xe0>)
 8001d54:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8001d56:	f7fe fedf 	bl	8000b18 <HAL_DMA_Abort_IT>
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001d5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001d5c:	b138      	cbz	r0, 8001d6e <HAL_SPI_IRQHandler+0xda>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001d5e:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <HAL_SPI_IRQHandler+0xe0>)
 8001d60:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8001d62:	f7fe fed9 	bl	8000b18 <HAL_DMA_Abort_IT>
 8001d66:	e002      	b.n	8001d6e <HAL_SPI_IRQHandler+0xda>
        }
      }
      else
      {
        /* Call user error callback */
        HAL_SPI_ErrorCallback(hspi);
 8001d68:	4620      	mov	r0, r4
 8001d6a:	f001 fb11 	bl	8003390 <HAL_SPI_ErrorCallback>
      }
    }
    return;
  }
}
 8001d6e:	b005      	add	sp, #20
 8001d70:	bd30      	pop	{r4, r5, pc}
 8001d72:	bf00      	nop
 8001d74:	08001d79 	.word	0x08001d79

08001d78 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001d78:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d7a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8001d82:	87c3      	strh	r3, [r0, #62]	; 0x3e

  HAL_SPI_ErrorCallback(hspi);
 8001d84:	f001 fb04 	bl	8003390 <HAL_SPI_ErrorCallback>
 8001d88:	bd08      	pop	{r3, pc}

08001d8a <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d8a:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
  
  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8001d8c:	b151      	cbz	r1, 8001da4 <HAL_TIM_Encoder_Start_IT+0x1a>
 8001d8e:	2904      	cmp	r1, #4
 8001d90:	d114      	bne.n	8001dbc <HAL_TIM_Encoder_Start_IT+0x32>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001d92:	6a1a      	ldr	r2, [r3, #32]
 8001d94:	f022 0210 	bic.w	r2, r2, #16
 8001d98:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001d9a:	6a1a      	ldr	r2, [r3, #32]
 8001d9c:	f042 0210 	orr.w	r2, r2, #16
 8001da0:	621a      	str	r2, [r3, #32]
 8001da2:	e01f      	b.n	8001de4 <HAL_TIM_Encoder_Start_IT+0x5a>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001da4:	6a1a      	ldr	r2, [r3, #32]
 8001da6:	f022 0201 	bic.w	r2, r2, #1
 8001daa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001dac:	6a1a      	ldr	r2, [r3, #32]
 8001dae:	f042 0201 	orr.w	r2, r2, #1
 8001db2:	621a      	str	r2, [r3, #32]
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	f042 0202 	orr.w	r2, r2, #2
 8001dba:	e016      	b.n	8001dea <HAL_TIM_Encoder_Start_IT+0x60>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001dbc:	6a1a      	ldr	r2, [r3, #32]
 8001dbe:	f022 0201 	bic.w	r2, r2, #1
 8001dc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001dc4:	6a1a      	ldr	r2, [r3, #32]
 8001dc6:	f042 0201 	orr.w	r2, r2, #1
 8001dca:	621a      	str	r2, [r3, #32]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001dcc:	6a1a      	ldr	r2, [r3, #32]
 8001dce:	f022 0210 	bic.w	r2, r2, #16
 8001dd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001dd4:	6a1a      	ldr	r2, [r3, #32]
 8001dd6:	f042 0210 	orr.w	r2, r2, #16
 8001dda:	621a      	str	r2, [r3, #32]
    }  
    default :
    {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001ddc:	68da      	ldr	r2, [r3, #12]
 8001dde:	f042 0202 	orr.w	r2, r2, #2
 8001de2:	60da      	str	r2, [r3, #12]
     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	f042 0204 	orr.w	r2, r2, #4
 8001dea:	60da      	str	r2, [r3, #12]
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
  
  /* Return function status */
  return HAL_OK;
}
 8001dec:	2000      	movs	r0, #0
     break; 
    }
  }
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	f042 0201 	orr.w	r2, r2, #1
 8001df4:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
}
 8001df6:	4770      	bx	lr

08001df8 <HAL_TIM_PeriodElapsedCallback>:
 8001df8:	4770      	bx	lr

08001dfa <HAL_TIM_OC_DelayElapsedCallback>:
 8001dfa:	4770      	bx	lr

08001dfc <HAL_TIM_IC_CaptureCallback>:
 8001dfc:	4770      	bx	lr

08001dfe <HAL_TIM_PWM_PulseFinishedCallback>:
 8001dfe:	4770      	bx	lr

08001e00 <HAL_TIM_TriggerCallback>:
 8001e00:	4770      	bx	lr

08001e02 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e02:	6803      	ldr	r3, [r0, #0]
 8001e04:	691a      	ldr	r2, [r3, #16]
 8001e06:	0791      	lsls	r1, r2, #30
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e08:	b510      	push	{r4, lr}
 8001e0a:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e0c:	d514      	bpl.n	8001e38 <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	0792      	lsls	r2, r2, #30
 8001e12:	d511      	bpl.n	8001e38 <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e14:	f06f 0202 	mvn.w	r2, #2
 8001e18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e1a:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8001e1c:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e1e:	7602      	strb	r2, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8001e20:	0799      	lsls	r1, r3, #30
 8001e22:	d002      	beq.n	8001e2a <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001e24:	f7ff ffea 	bl	8001dfc <HAL_TIM_IC_CaptureCallback>
 8001e28:	e004      	b.n	8001e34 <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e2a:	f7ff ffe6 	bl	8001dfa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e2e:	4620      	mov	r0, r4
 8001e30:	f7ff ffe5 	bl	8001dfe <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e34:	2300      	movs	r3, #0
 8001e36:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e38:	6823      	ldr	r3, [r4, #0]
 8001e3a:	691a      	ldr	r2, [r3, #16]
 8001e3c:	0752      	lsls	r2, r2, #29
 8001e3e:	d516      	bpl.n	8001e6e <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	0750      	lsls	r0, r2, #29
 8001e44:	d513      	bpl.n	8001e6e <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e46:	f06f 0204 	mvn.w	r2, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001e4a:	4620      	mov	r0, r4
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e4e:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001e50:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e52:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001e54:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001e58:	d002      	beq.n	8001e60 <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001e5a:	f7ff ffcf 	bl	8001dfc <HAL_TIM_IC_CaptureCallback>
 8001e5e:	e004      	b.n	8001e6a <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e60:	f7ff ffcb 	bl	8001dfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e64:	4620      	mov	r0, r4
 8001e66:	f7ff ffca 	bl	8001dfe <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e6e:	6823      	ldr	r3, [r4, #0]
 8001e70:	691a      	ldr	r2, [r3, #16]
 8001e72:	0711      	lsls	r1, r2, #28
 8001e74:	d515      	bpl.n	8001ea2 <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	0712      	lsls	r2, r2, #28
 8001e7a:	d512      	bpl.n	8001ea2 <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e7c:	f06f 0208 	mvn.w	r2, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001e80:	4620      	mov	r0, r4
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e84:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001e86:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e88:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001e8a:	079b      	lsls	r3, r3, #30
 8001e8c:	d002      	beq.n	8001e94 <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001e8e:	f7ff ffb5 	bl	8001dfc <HAL_TIM_IC_CaptureCallback>
 8001e92:	e004      	b.n	8001e9e <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e94:	f7ff ffb1 	bl	8001dfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001e98:	4620      	mov	r0, r4
 8001e9a:	f7ff ffb0 	bl	8001dfe <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ea2:	6823      	ldr	r3, [r4, #0]
 8001ea4:	691a      	ldr	r2, [r3, #16]
 8001ea6:	06d0      	lsls	r0, r2, #27
 8001ea8:	d516      	bpl.n	8001ed8 <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	06d1      	lsls	r1, r2, #27
 8001eae:	d513      	bpl.n	8001ed8 <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001eb0:	f06f 0210 	mvn.w	r2, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001eb4:	4620      	mov	r0, r4
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001eb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001eb8:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8001eba:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ebc:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8001ebe:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001ec2:	d002      	beq.n	8001eca <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001ec4:	f7ff ff9a 	bl	8001dfc <HAL_TIM_IC_CaptureCallback>
 8001ec8:	e004      	b.n	8001ed4 <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eca:	f7ff ff96 	bl	8001dfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ece:	4620      	mov	r0, r4
 8001ed0:	f7ff ff95 	bl	8001dfe <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ed8:	6823      	ldr	r3, [r4, #0]
 8001eda:	691a      	ldr	r2, [r3, #16]
 8001edc:	07d2      	lsls	r2, r2, #31
 8001ede:	d508      	bpl.n	8001ef2 <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	07d0      	lsls	r0, r2, #31
 8001ee4:	d505      	bpl.n	8001ef2 <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ee6:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eea:	4620      	mov	r0, r4
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001eec:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eee:	f7ff ff83 	bl	8001df8 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ef2:	6823      	ldr	r3, [r4, #0]
 8001ef4:	691a      	ldr	r2, [r3, #16]
 8001ef6:	0611      	lsls	r1, r2, #24
 8001ef8:	d508      	bpl.n	8001f0c <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	0612      	lsls	r2, r2, #24
 8001efe:	d505      	bpl.n	8001f0c <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f00:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001f04:	4620      	mov	r0, r4
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f06:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001f08:	f000 fad7 	bl	80024ba <HAL_TIMEx_BreakCallback>
    }
  }
  
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001f0c:	6823      	ldr	r3, [r4, #0]
 8001f0e:	691a      	ldr	r2, [r3, #16]
 8001f10:	05d0      	lsls	r0, r2, #23
 8001f12:	d508      	bpl.n	8001f26 <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	0611      	lsls	r1, r2, #24
 8001f18:	d505      	bpl.n	8001f26 <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f1a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001f1e:	4620      	mov	r0, r4
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f20:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001f22:	f000 faca 	bl	80024ba <HAL_TIMEx_BreakCallback>
    }
  }

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	691a      	ldr	r2, [r3, #16]
 8001f2a:	0652      	lsls	r2, r2, #25
 8001f2c:	d508      	bpl.n	8001f40 <HAL_TIM_IRQHandler+0x13e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	0650      	lsls	r0, r2, #25
 8001f32:	d505      	bpl.n	8001f40 <HAL_TIM_IRQHandler+0x13e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f34:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001f38:	4620      	mov	r0, r4
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f3a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001f3c:	f7ff ff60 	bl	8001e00 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f40:	6823      	ldr	r3, [r4, #0]
 8001f42:	691a      	ldr	r2, [r3, #16]
 8001f44:	0691      	lsls	r1, r2, #26
 8001f46:	d50a      	bpl.n	8001f5e <HAL_TIM_IRQHandler+0x15c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001f48:	68da      	ldr	r2, [r3, #12]
 8001f4a:	0692      	lsls	r2, r2, #26
 8001f4c:	d507      	bpl.n	8001f5e <HAL_TIM_IRQHandler+0x15c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f4e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001f52:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f54:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 8001f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 8001f5a:	f000 baad 	b.w	80024b8 <HAL_TIMEx_CommutationCallback>
 8001f5e:	bd10      	pop	{r4, pc}

08001f60 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001f60:	4a2e      	ldr	r2, [pc, #184]	; (800201c <TIM_Base_SetConfig+0xbc>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8001f62:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001f64:	4290      	cmp	r0, r2
 8001f66:	d012      	beq.n	8001f8e <TIM_Base_SetConfig+0x2e>
 8001f68:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001f6c:	d00f      	beq.n	8001f8e <TIM_Base_SetConfig+0x2e>
 8001f6e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001f72:	4290      	cmp	r0, r2
 8001f74:	d00b      	beq.n	8001f8e <TIM_Base_SetConfig+0x2e>
 8001f76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f7a:	4290      	cmp	r0, r2
 8001f7c:	d007      	beq.n	8001f8e <TIM_Base_SetConfig+0x2e>
 8001f7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f82:	4290      	cmp	r0, r2
 8001f84:	d003      	beq.n	8001f8e <TIM_Base_SetConfig+0x2e>
 8001f86:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001f8a:	4290      	cmp	r0, r2
 8001f8c:	d118      	bne.n	8001fc0 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001f8e:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001f94:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001f96:	4a21      	ldr	r2, [pc, #132]	; (800201c <TIM_Base_SetConfig+0xbc>)
 8001f98:	4290      	cmp	r0, r2
 8001f9a:	d037      	beq.n	800200c <TIM_Base_SetConfig+0xac>
 8001f9c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001fa0:	d034      	beq.n	800200c <TIM_Base_SetConfig+0xac>
 8001fa2:	4a1f      	ldr	r2, [pc, #124]	; (8002020 <TIM_Base_SetConfig+0xc0>)
 8001fa4:	4290      	cmp	r0, r2
 8001fa6:	d031      	beq.n	800200c <TIM_Base_SetConfig+0xac>
 8001fa8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fac:	4290      	cmp	r0, r2
 8001fae:	d02d      	beq.n	800200c <TIM_Base_SetConfig+0xac>
 8001fb0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fb4:	4290      	cmp	r0, r2
 8001fb6:	d029      	beq.n	800200c <TIM_Base_SetConfig+0xac>
 8001fb8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001fbc:	4290      	cmp	r0, r2
 8001fbe:	d025      	beq.n	800200c <TIM_Base_SetConfig+0xac>
 8001fc0:	4a18      	ldr	r2, [pc, #96]	; (8002024 <TIM_Base_SetConfig+0xc4>)
 8001fc2:	4290      	cmp	r0, r2
 8001fc4:	d022      	beq.n	800200c <TIM_Base_SetConfig+0xac>
 8001fc6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fca:	4290      	cmp	r0, r2
 8001fcc:	d01e      	beq.n	800200c <TIM_Base_SetConfig+0xac>
 8001fce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fd2:	4290      	cmp	r0, r2
 8001fd4:	d01a      	beq.n	800200c <TIM_Base_SetConfig+0xac>
 8001fd6:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001fda:	4290      	cmp	r0, r2
 8001fdc:	d016      	beq.n	800200c <TIM_Base_SetConfig+0xac>
 8001fde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fe2:	4290      	cmp	r0, r2
 8001fe4:	d012      	beq.n	800200c <TIM_Base_SetConfig+0xac>
 8001fe6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fea:	4290      	cmp	r0, r2
 8001fec:	d00e      	beq.n	800200c <TIM_Base_SetConfig+0xac>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8001fee:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ff0:	688b      	ldr	r3, [r1, #8]
 8001ff2:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001ff4:	680b      	ldr	r3, [r1, #0]
 8001ff6:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001ff8:	4b08      	ldr	r3, [pc, #32]	; (800201c <TIM_Base_SetConfig+0xbc>)
 8001ffa:	4298      	cmp	r0, r3
 8001ffc:	d00b      	beq.n	8002016 <TIM_Base_SetConfig+0xb6>
 8001ffe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002002:	4298      	cmp	r0, r3
 8002004:	d007      	beq.n	8002016 <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002006:	2301      	movs	r3, #1
 8002008:	6143      	str	r3, [r0, #20]
}
 800200a:	4770      	bx	lr
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800200c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002010:	68ca      	ldr	r2, [r1, #12]
 8002012:	4313      	orrs	r3, r2
 8002014:	e7eb      	b.n	8001fee <TIM_Base_SetConfig+0x8e>
  TIMx->PSC = (uint32_t)Structure->Prescaler;
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002016:	690b      	ldr	r3, [r1, #16]
 8002018:	6303      	str	r3, [r0, #48]	; 0x30
 800201a:	e7f4      	b.n	8002006 <TIM_Base_SetConfig+0xa6>
 800201c:	40010000 	.word	0x40010000
 8002020:	40000400 	.word	0x40000400
 8002024:	40014000 	.word	0x40014000

08002028 <HAL_TIM_PWM_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002028:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800202a:	4604      	mov	r4, r0
 800202c:	b1a0      	cbz	r0, 8002058 <HAL_TIM_PWM_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 800202e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002032:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002036:	b91b      	cbnz	r3, 8002040 <HAL_TIM_PWM_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;  
 8002038:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800203c:	f002 f904 	bl	8004248 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 8002040:	2302      	movs	r3, #2
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002042:	6820      	ldr	r0, [r4, #0]
 8002044:	1d21      	adds	r1, r4, #4
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 8002046:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800204a:	f7ff ff89 	bl	8001f60 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800204e:	2301      	movs	r3, #1
  
  return HAL_OK;
 8002050:	2000      	movs	r0, #0
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002052:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8002056:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002058:	2001      	movs	r0, #1
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}  
 800205a:	bd10      	pop	{r4, pc}

0800205c <HAL_TIM_Encoder_Init>:
  *                the configuration information for TIM module.
  * @param  sConfig: TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 800205c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800205e:	460c      	mov	r4, r1
  uint32_t tmpsmcr = 0;
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002060:	4605      	mov	r5, r0
 8002062:	2800      	cmp	r0, #0
 8002064:	d043      	beq.n	80020ee <HAL_TIM_Encoder_Init+0x92>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002066:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800206a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800206e:	b91b      	cbnz	r3, 8002078 <HAL_TIM_Encoder_Init+0x1c>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;  
 8002070:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002074:	f002 f888 	bl	8004188 <HAL_TIM_Encoder_MspInit>
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002078:	4629      	mov	r1, r5
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 800207a:	2302      	movs	r3, #2
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800207c:	f851 0b04 	ldr.w	r0, [r1], #4
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 8002080:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002084:	6883      	ldr	r3, [r0, #8]
 8002086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800208a:	f023 0307 	bic.w	r3, r3, #7
 800208e:	6083      	str	r3, [r0, #8]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 8002090:	f7ff ff66 	bl	8001f60 <TIM_Base_SetConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002094:	6828      	ldr	r0, [r5, #0]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002096:	6823      	ldr	r3, [r4, #0]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002098:	6887      	ldr	r7, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800209a:	6981      	ldr	r1, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800209c:	431f      	orrs	r7, r3
 800209e:	69a2      	ldr	r2, [r4, #24]
 80020a0:	f421 7340 	bic.w	r3, r1, #768	; 0x300
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 80020a4:	6921      	ldr	r1, [r4, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80020a6:	6a06      	ldr	r6, [r0, #32]
 80020a8:	f023 0303 	bic.w	r3, r3, #3
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 80020ac:	0109      	lsls	r1, r1, #4
 80020ae:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
 80020b2:	68a3      	ldr	r3, [r4, #8]
 80020b4:	4313      	orrs	r3, r2
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 80020b6:	69e2      	ldr	r2, [r4, #28]
 80020b8:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 80020bc:	68e2      	ldr	r2, [r4, #12]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80020be:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 80020c2:	430a      	orrs	r2, r1
 80020c4:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80020c6:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 80020ca:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 80020ce:	6961      	ldr	r1, [r4, #20]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	f026 02aa 	bic.w	r2, r6, #170	; 0xaa
 80020d6:	ea42 1201 	orr.w	r2, r2, r1, lsl #4

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 80020da:	6861      	ldr	r1, [r4, #4]
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80020dc:	6087      	str	r7, [r0, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 80020de:	430a      	orrs	r2, r1
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80020e0:	6183      	str	r3, [r0, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80020e2:	2301      	movs	r3, #1

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80020e4:	6202      	str	r2, [r0, #32]
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
 80020e6:	2000      	movs	r0, #0

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80020e8:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  
  return HAL_OK;
 80020ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t tmpccer = 0;
  
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 80020ee:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 80020f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080020f4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020f4:	6a03      	ldr	r3, [r0, #32]
 80020f6:	f023 0301 	bic.w	r3, r3, #1
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020fa:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020fc:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020fe:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002100:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002102:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002104:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002106:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800210a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800210e:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002110:	f023 0502 	bic.w	r5, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002114:	688b      	ldr	r3, [r1, #8]
 8002116:	432b      	orrs	r3, r5

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002118:	4d0c      	ldr	r5, [pc, #48]	; (800214c <TIM_OC1_SetConfig+0x58>)
 800211a:	42a8      	cmp	r0, r5
 800211c:	d009      	beq.n	8002132 <TIM_OC1_SetConfig+0x3e>
 800211e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002122:	42a8      	cmp	r0, r5
 8002124:	d005      	beq.n	8002132 <TIM_OC1_SetConfig+0x3e>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002126:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002128:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800212a:	6184      	str	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800212c:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800212e:	6203      	str	r3, [r0, #32]
} 
 8002130:	bd70      	pop	{r4, r5, r6, pc}
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002132:	68cd      	ldr	r5, [r1, #12]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002134:	f023 0308 	bic.w	r3, r3, #8
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002138:	694e      	ldr	r6, [r1, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800213a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800213e:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002140:	698d      	ldr	r5, [r1, #24]
 8002142:	4335      	orrs	r5, r6
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002144:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002148:	432a      	orrs	r2, r5
 800214a:	e7ec      	b.n	8002126 <TIM_OC1_SetConfig+0x32>
 800214c:	40010000 	.word	0x40010000

08002150 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002150:	6a03      	ldr	r3, [r0, #32]
 8002152:	f023 0310 	bic.w	r3, r3, #16
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002156:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002158:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800215a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800215c:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800215e:	6984      	ldr	r4, [r0, #24]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002160:	f023 0320 	bic.w	r3, r3, #32
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002164:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002166:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 800216a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800216e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8002172:	688d      	ldr	r5, [r1, #8]
 8002174:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002178:	4d0e      	ldr	r5, [pc, #56]	; (80021b4 <TIM_OC2_SetConfig+0x64>)
 800217a:	42a8      	cmp	r0, r5
 800217c:	d009      	beq.n	8002192 <TIM_OC2_SetConfig+0x42>
 800217e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002182:	42a8      	cmp	r0, r5
 8002184:	d005      	beq.n	8002192 <TIM_OC2_SetConfig+0x42>
    tmpcr2 |= (OC_Config->OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002186:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002188:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800218a:	6184      	str	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800218c:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800218e:	6203      	str	r3, [r0, #32]
}
 8002190:	bd30      	pop	{r4, r5, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8002192:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002194:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002198:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 800219c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80021a0:	694d      	ldr	r5, [r1, #20]
 80021a2:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80021a6:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80021a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80021ac:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 80021b0:	e7e9      	b.n	8002186 <TIM_OC2_SetConfig+0x36>
 80021b2:	bf00      	nop
 80021b4:	40010000 	.word	0x40010000

080021b8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021b8:	6a03      	ldr	r3, [r0, #32]
 80021ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021be:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021c0:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021c2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80021c4:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021c6:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80021c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021cc:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80021ce:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80021d2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021d6:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 80021d8:	688d      	ldr	r5, [r1, #8]
 80021da:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80021de:	4d0e      	ldr	r5, [pc, #56]	; (8002218 <TIM_OC3_SetConfig+0x60>)
 80021e0:	42a8      	cmp	r0, r5
 80021e2:	d009      	beq.n	80021f8 <TIM_OC3_SetConfig+0x40>
 80021e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80021e8:	42a8      	cmp	r0, r5
 80021ea:	d005      	beq.n	80021f8 <TIM_OC3_SetConfig+0x40>
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021ec:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80021ee:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80021f0:	61c4      	str	r4, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80021f2:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021f4:	6203      	str	r3, [r0, #32]
}
 80021f6:	bd30      	pop	{r4, r5, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80021f8:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80021fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80021fe:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8002202:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8002206:	694d      	ldr	r5, [r1, #20]
 8002208:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 800220c:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800220e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8002212:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8002216:	e7e9      	b.n	80021ec <TIM_OC3_SetConfig+0x34>
 8002218:	40010000 	.word	0x40010000

0800221c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800221c:	6a03      	ldr	r3, [r0, #32]
 800221e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002222:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002224:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002226:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002228:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800222a:	69c3      	ldr	r3, [r0, #28]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800222c:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002230:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002232:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002236:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800223a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 800223e:	688d      	ldr	r5, [r1, #8]
 8002240:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002244:	4d09      	ldr	r5, [pc, #36]	; (800226c <TIM_OC4_SetConfig+0x50>)
 8002246:	42a8      	cmp	r0, r5
 8002248:	d009      	beq.n	800225e <TIM_OC4_SetConfig+0x42>
 800224a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800224e:	42a8      	cmp	r0, r5
 8002250:	d005      	beq.n	800225e <TIM_OC4_SetConfig+0x42>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002252:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8002254:	61c3      	str	r3, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002256:	684b      	ldr	r3, [r1, #4]
 8002258:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800225a:	6204      	str	r4, [r0, #32]
}
 800225c:	bd30      	pop	{r4, r5, pc}
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800225e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8002262:	694d      	ldr	r5, [r1, #20]
 8002264:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8002268:	e7f3      	b.n	8002252 <TIM_OC4_SetConfig+0x36>
 800226a:	bf00      	nop
 800226c:	40010000 	.word	0x40010000

08002270 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002270:	2301      	movs	r3, #1

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002272:	408a      	lsls	r2, r1
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002274:	408b      	lsls	r3, r1
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002276:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002278:	6a04      	ldr	r4, [r0, #32]
 800227a:	ea24 0303 	bic.w	r3, r4, r3
 800227e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002280:	6a03      	ldr	r3, [r0, #32]
 8002282:	ea42 0103 	orr.w	r1, r2, r3
 8002286:	6201      	str	r1, [r0, #32]
 8002288:	bd10      	pop	{r4, pc}
	...

0800228c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800228c:	b510      	push	{r4, lr}
 800228e:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002290:	2201      	movs	r2, #1
 8002292:	6800      	ldr	r0, [r0, #0]
 8002294:	f7ff ffec 	bl	8002270 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8002298:	6823      	ldr	r3, [r4, #0]
 800229a:	4a08      	ldr	r2, [pc, #32]	; (80022bc <HAL_TIM_PWM_Start+0x30>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d003      	beq.n	80022a8 <HAL_TIM_PWM_Start+0x1c>
 80022a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d103      	bne.n	80022b0 <HAL_TIM_PWM_Start+0x24>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80022a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022ae:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80022b0:	681a      	ldr	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
} 
 80022b2:	2000      	movs	r0, #0
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80022b4:	f042 0201 	orr.w	r2, r2, #1
 80022b8:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
} 
 80022ba:	bd10      	pop	{r4, pc}
 80022bc:	40010000 	.word	0x40010000

080022c0 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80022c0:	6a03      	ldr	r3, [r0, #32]
 80022c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022c6:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80022c8:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022ca:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80022cc:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80022ce:	6d44      	ldr	r4, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80022d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022d4:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2; 
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80022d6:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80022da:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022de:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 80022e0:	688d      	ldr	r5, [r1, #8]
 80022e2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80022e6:	4d09      	ldr	r5, [pc, #36]	; (800230c <TIM_OC5_SetConfig+0x4c>)
 80022e8:	42a8      	cmp	r0, r5
 80022ea:	d003      	beq.n	80022f4 <TIM_OC5_SetConfig+0x34>
 80022ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80022f0:	42a8      	cmp	r0, r5
 80022f2:	d104      	bne.n	80022fe <TIM_OC5_SetConfig+0x3e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80022f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 80022f8:	694d      	ldr	r5, [r1, #20]
 80022fa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022fe:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002300:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002302:	6544      	str	r4, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002304:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002306:	6203      	str	r3, [r0, #32]
 8002308:	bd30      	pop	{r4, r5, pc}
 800230a:	bf00      	nop
 800230c:	40010000 	.word	0x40010000

08002310 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002310:	6a03      	ldr	r3, [r0, #32]
 8002312:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002316:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002318:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800231a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800231c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800231e:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002320:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx = TIMx->CCMR3;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002324:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2; 
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002326:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800232a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800232e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8002332:	688d      	ldr	r5, [r1, #8]
 8002334:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002338:	4d08      	ldr	r5, [pc, #32]	; (800235c <TIM_OC6_SetConfig+0x4c>)
 800233a:	42a8      	cmp	r0, r5
 800233c:	d003      	beq.n	8002346 <TIM_OC6_SetConfig+0x36>
 800233e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002342:	42a8      	cmp	r0, r5
 8002344:	d104      	bne.n	8002350 <TIM_OC6_SetConfig+0x40>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002346:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 800234a:	694d      	ldr	r5, [r1, #20]
 800234c:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002350:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002352:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002354:	684b      	ldr	r3, [r1, #4]
 8002356:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002358:	6202      	str	r2, [r0, #32]
 800235a:	bd30      	pop	{r4, r5, pc}
 800235c:	40010000 	.word	0x40010000

08002360 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 8002360:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002362:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 8002366:	4604      	mov	r4, r0
 8002368:	460d      	mov	r5, r1
 800236a:	2002      	movs	r0, #2
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800236c:	2b01      	cmp	r3, #1
 800236e:	d07b      	beq.n	8002468 <HAL_TIM_PWM_ConfigChannel+0x108>
 8002370:	2301      	movs	r3, #1
  
  htim->State = HAL_TIM_STATE_BUSY;
    
  switch (Channel)
 8002372:	2a08      	cmp	r2, #8
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002374:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002378:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
    
  switch (Channel)
 800237c:	d03c      	beq.n	80023f8 <HAL_TIM_PWM_ConfigChannel+0x98>
 800237e:	d813      	bhi.n	80023a8 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002380:	b34a      	cbz	r2, 80023d6 <HAL_TIM_PWM_ConfigChannel+0x76>
 8002382:	2a04      	cmp	r2, #4
 8002384:	d16a      	bne.n	800245c <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002386:	6820      	ldr	r0, [r4, #0]
 8002388:	f7ff fee2 	bl	8002150 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800238c:	6823      	ldr	r3, [r4, #0]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800238e:	6929      	ldr	r1, [r5, #16]
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002390:	699a      	ldr	r2, [r3, #24]
 8002392:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002396:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002398:	699a      	ldr	r2, [r3, #24]
 800239a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800239e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80023a0:	699a      	ldr	r2, [r3, #24]
 80023a2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80023a6:	e025      	b.n	80023f4 <HAL_TIM_PWM_ConfigChannel+0x94>
  /* Check input state */
  __HAL_LOCK(htim);
  
  htim->State = HAL_TIM_STATE_BUSY;
    
  switch (Channel)
 80023a8:	2a10      	cmp	r2, #16
 80023aa:	d036      	beq.n	800241a <HAL_TIM_PWM_ConfigChannel+0xba>
 80023ac:	2a14      	cmp	r2, #20
 80023ae:	d044      	beq.n	800243a <HAL_TIM_PWM_ConfigChannel+0xda>
 80023b0:	2a0c      	cmp	r2, #12
 80023b2:	d153      	bne.n	800245c <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023b4:	6820      	ldr	r0, [r4, #0]
 80023b6:	f7ff ff31 	bl	800221c <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023ba:	6823      	ldr	r3, [r4, #0]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 80023bc:	6929      	ldr	r1, [r5, #16]
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023be:	69da      	ldr	r2, [r3, #28]
 80023c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023c4:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023c6:	69da      	ldr	r2, [r3, #28]
 80023c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 80023ce:	69da      	ldr	r2, [r3, #28]
 80023d0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80023d4:	e01f      	b.n	8002416 <HAL_TIM_PWM_ConfigChannel+0xb6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023d6:	6820      	ldr	r0, [r4, #0]
 80023d8:	f7ff fe8c 	bl	80020f4 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023dc:	6823      	ldr	r3, [r4, #0]
 80023de:	699a      	ldr	r2, [r3, #24]
 80023e0:	f042 0208 	orr.w	r2, r2, #8
 80023e4:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023e6:	699a      	ldr	r2, [r3, #24]
 80023e8:	f022 0204 	bic.w	r2, r2, #4
 80023ec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023ee:	692a      	ldr	r2, [r5, #16]
 80023f0:	6999      	ldr	r1, [r3, #24]
 80023f2:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80023f4:	619a      	str	r2, [r3, #24]
    }
    break;
 80023f6:	e031      	b.n	800245c <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023f8:	6820      	ldr	r0, [r4, #0]
 80023fa:	f7ff fedd 	bl	80021b8 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023fe:	6823      	ldr	r3, [r4, #0]
 8002400:	69da      	ldr	r2, [r3, #28]
 8002402:	f042 0208 	orr.w	r2, r2, #8
 8002406:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002408:	69da      	ldr	r2, [r3, #28]
 800240a:	f022 0204 	bic.w	r2, r2, #4
 800240e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002410:	692a      	ldr	r2, [r5, #16]
 8002412:	69d9      	ldr	r1, [r3, #28]
 8002414:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8002416:	61da      	str	r2, [r3, #28]
    }
    break;
 8002418:	e020      	b.n	800245c <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800241a:	6820      	ldr	r0, [r4, #0]
 800241c:	f7ff ff50 	bl	80022c0 <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002420:	6823      	ldr	r3, [r4, #0]
 8002422:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002424:	f042 0208 	orr.w	r2, r2, #8
 8002428:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800242a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800242c:	f022 0204 	bic.w	r2, r2, #4
 8002430:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8002432:	692a      	ldr	r2, [r5, #16]
 8002434:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002436:	430a      	orrs	r2, r1
 8002438:	e00f      	b.n	800245a <HAL_TIM_PWM_ConfigChannel+0xfa>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800243a:	6820      	ldr	r0, [r4, #0]
 800243c:	f7ff ff68 	bl	8002310 <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002440:	6823      	ldr	r3, [r4, #0]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8002442:	6909      	ldr	r1, [r1, #16]
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002444:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002446:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800244a:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800244c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800244e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002452:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8002454:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002456:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800245a:	655a      	str	r2, [r3, #84]	; 0x54
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 800245c:	2301      	movs	r3, #1
    
  __HAL_UNLOCK(htim);
 800245e:	2000      	movs	r0, #0
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8002460:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 8002464:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 8002468:	bd38      	pop	{r3, r4, r5, pc}
	...

0800246c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800246c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002470:	2b01      	cmp	r3, #1
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002472:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002474:	d01c      	beq.n	80024b0 <HAL_TIMEx_MasterConfigSynchronization+0x44>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002476:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002478:	4c0e      	ldr	r4, [pc, #56]	; (80024b4 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  
  /* Check input state */
  __HAL_LOCK(htim);

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800247a:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800247c:	42a2      	cmp	r2, r4

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800247e:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002480:	d003      	beq.n	800248a <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 8002482:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002486:	42a2      	cmp	r2, r4
 8002488:	d103      	bne.n	8002492 <HAL_TIMEx_MasterConfigSynchronization+0x26>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800248a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800248e:	684c      	ldr	r4, [r1, #4]
 8002490:	4323      	orrs	r3, r4
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002492:	680c      	ldr	r4, [r1, #0]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002498:	6889      	ldr	r1, [r1, #8]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800249a:	4323      	orrs	r3, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800249c:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024a0:	6053      	str	r3, [r2, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024a2:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 80024a4:	2300      	movs	r3, #0
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80024a6:	6091      	str	r1, [r2, #8]

  __HAL_UNLOCK(htim);
 80024a8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 80024ac:	4618      	mov	r0, r3
 80024ae:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80024b0:	2002      	movs	r0, #2
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
  
  return HAL_OK;
} 
 80024b2:	bd30      	pop	{r4, r5, pc}
 80024b4:	40010000 	.word	0x40010000

080024b8 <HAL_TIMEx_CommutationCallback>:
 80024b8:	4770      	bx	lr

080024ba <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024ba:	4770      	bx	lr

080024bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80024bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024c0:	9d06      	ldr	r5, [sp, #24]
 80024c2:	4604      	mov	r4, r0
 80024c4:	460f      	mov	r7, r1
 80024c6:	4616      	mov	r6, r2
 80024c8:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024ca:	6821      	ldr	r1, [r4, #0]
 80024cc:	69ca      	ldr	r2, [r1, #28]
 80024ce:	ea37 0302 	bics.w	r3, r7, r2
 80024d2:	bf0c      	ite	eq
 80024d4:	2201      	moveq	r2, #1
 80024d6:	2200      	movne	r2, #0
 80024d8:	42b2      	cmp	r2, r6
 80024da:	d11d      	bne.n	8002518 <UART_WaitOnFlagUntilTimeout+0x5c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80024dc:	1c6b      	adds	r3, r5, #1
 80024de:	d0f5      	beq.n	80024cc <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 80024e0:	b99d      	cbnz	r5, 800250a <UART_WaitOnFlagUntilTimeout+0x4e>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024e2:	6823      	ldr	r3, [r4, #0]

        huart->gState = HAL_UART_STATE_READY;
        huart->RxState = HAL_UART_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024e4:	2003      	movs	r0, #3
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80024ec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	f022 0201 	bic.w	r2, r2, #1
 80024f4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80024f6:	2320      	movs	r3, #32
 80024f8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80024fc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002500:	2300      	movs	r3, #0
 8002502:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8002506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800250a:	f7fd ff2b 	bl	8000364 <HAL_GetTick>
 800250e:	ebc8 0000 	rsb	r0, r8, r0
 8002512:	4285      	cmp	r5, r0
 8002514:	d8d9      	bhi.n	80024ca <UART_WaitOnFlagUntilTimeout+0xe>
 8002516:	e7e4      	b.n	80024e2 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002518:	2000      	movs	r0, #0
}
 800251a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800251e <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800251e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002522:	461f      	mov	r7, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002524:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002528:	4604      	mov	r4, r0
 800252a:	460d      	mov	r5, r1
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800252c:	2b20      	cmp	r3, #32
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800252e:	4690      	mov	r8, r2
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002530:	d14b      	bne.n	80025ca <HAL_UART_Transmit+0xac>
  {
    if((pData == NULL ) || (Size == 0U))
 8002532:	2900      	cmp	r1, #0
 8002534:	d047      	beq.n	80025c6 <HAL_UART_Transmit+0xa8>
 8002536:	2a00      	cmp	r2, #0
 8002538:	d045      	beq.n	80025c6 <HAL_UART_Transmit+0xa8>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800253a:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800253e:	2b01      	cmp	r3, #1
 8002540:	d043      	beq.n	80025ca <HAL_UART_Transmit+0xac>
 8002542:	2301      	movs	r3, #1
 8002544:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002548:	2300      	movs	r3, #0
 800254a:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800254c:	2321      	movs	r3, #33	; 0x21
 800254e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002552:	f7fd ff07 	bl	8000364 <HAL_GetTick>
 8002556:	4606      	mov	r6, r0

    huart->TxXferSize = Size;
 8002558:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 800255c:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8002560:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002564:	b292      	uxth	r2, r2
 8002566:	b302      	cbz	r2, 80025aa <HAL_UART_Transmit+0x8c>
    {
      huart->TxXferCount--;
 8002568:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800256c:	2200      	movs	r2, #0
 800256e:	9700      	str	r7, [sp, #0]
 8002570:	2180      	movs	r1, #128	; 0x80

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0U)
    {
      huart->TxXferCount--;
 8002572:	3b01      	subs	r3, #1
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002574:	4620      	mov	r0, r4

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0U)
    {
      huart->TxXferCount--;
 8002576:	b29b      	uxth	r3, r3
 8002578:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800257c:	4633      	mov	r3, r6
 800257e:	f7ff ff9d 	bl	80024bc <UART_WaitOnFlagUntilTimeout>
 8002582:	b108      	cbz	r0, 8002588 <HAL_UART_Transmit+0x6a>
      {
        return HAL_TIMEOUT;
 8002584:	2003      	movs	r0, #3
 8002586:	e021      	b.n	80025cc <HAL_UART_Transmit+0xae>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002588:	68a3      	ldr	r3, [r4, #8]
 800258a:	6822      	ldr	r2, [r4, #0]
 800258c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002590:	d107      	bne.n	80025a2 <HAL_UART_Transmit+0x84>
 8002592:	6923      	ldr	r3, [r4, #16]
 8002594:	b92b      	cbnz	r3, 80025a2 <HAL_UART_Transmit+0x84>
      {
        tmp = (uint16_t*) pData;
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002596:	f835 3b02 	ldrh.w	r3, [r5], #2
 800259a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800259e:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2;
 80025a0:	e7de      	b.n	8002560 <HAL_UART_Transmit+0x42>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80025a2:	782b      	ldrb	r3, [r5, #0]
 80025a4:	3501      	adds	r5, #1
 80025a6:	6293      	str	r3, [r2, #40]	; 0x28
 80025a8:	e7da      	b.n	8002560 <HAL_UART_Transmit+0x42>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025aa:	9700      	str	r7, [sp, #0]
 80025ac:	4633      	mov	r3, r6
 80025ae:	2140      	movs	r1, #64	; 0x40
 80025b0:	4620      	mov	r0, r4
 80025b2:	f7ff ff83 	bl	80024bc <UART_WaitOnFlagUntilTimeout>
 80025b6:	2800      	cmp	r0, #0
 80025b8:	d1e4      	bne.n	8002584 <HAL_UART_Transmit+0x66>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025ba:	2320      	movs	r3, #32

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025bc:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025c0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    return HAL_OK;
 80025c4:	e002      	b.n	80025cc <HAL_UART_Transmit+0xae>
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0U))
    {
      return  HAL_ERROR;
 80025c6:	2001      	movs	r0, #1
 80025c8:	e000      	b.n	80025cc <HAL_UART_Transmit+0xae>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80025ca:	2002      	movs	r0, #2
  }
}
 80025cc:	b002      	add	sp, #8
 80025ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080025d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart: uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025d4:	b538      	push	{r3, r4, r5, lr}
 80025d6:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80025d8:	6805      	ldr	r5, [r0, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025da:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80025dc:	6922      	ldr	r2, [r4, #16]
 80025de:	68a1      	ldr	r1, [r4, #8]
 80025e0:	6828      	ldr	r0, [r5, #0]
 80025e2:	4311      	orrs	r1, r2
 80025e4:	6962      	ldr	r2, [r4, #20]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	ea42 0103 	orr.w	r1, r2, r3
 80025ec:	4a88      	ldr	r2, [pc, #544]	; (8002810 <UART_SetConfig+0x23c>)
 80025ee:	4002      	ands	r2, r0
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80025f0:	69a0      	ldr	r0, [r4, #24]
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80025f2:	430a      	orrs	r2, r1
 80025f4:	602a      	str	r2, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025f6:	686a      	ldr	r2, [r5, #4]
 80025f8:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80025fc:	68e2      	ldr	r2, [r4, #12]
 80025fe:	430a      	orrs	r2, r1
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002600:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002602:	606a      	str	r2, [r5, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002604:	4301      	orrs	r1, r0
 8002606:	68aa      	ldr	r2, [r5, #8]
 8002608:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800260c:	430a      	orrs	r2, r1
 800260e:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002610:	4a80      	ldr	r2, [pc, #512]	; (8002814 <UART_SetConfig+0x240>)
 8002612:	4295      	cmp	r5, r2
 8002614:	d107      	bne.n	8002626 <UART_SetConfig+0x52>
 8002616:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800261a:	497f      	ldr	r1, [pc, #508]	; (8002818 <UART_SetConfig+0x244>)
 800261c:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002620:	f002 0203 	and.w	r2, r2, #3
 8002624:	e009      	b.n	800263a <UART_SetConfig+0x66>
 8002626:	4a7d      	ldr	r2, [pc, #500]	; (800281c <UART_SetConfig+0x248>)
 8002628:	4295      	cmp	r5, r2
 800262a:	d10b      	bne.n	8002644 <UART_SetConfig+0x70>
 800262c:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8002630:	497b      	ldr	r1, [pc, #492]	; (8002820 <UART_SetConfig+0x24c>)
 8002632:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002636:	f002 020c 	and.w	r2, r2, #12

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800263a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800263e:	5c8a      	ldrb	r2, [r1, r2]
 8002640:	d073      	beq.n	800272a <UART_SetConfig+0x156>
 8002642:	e0b6      	b.n	80027b2 <UART_SetConfig+0x1de>
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002644:	4a77      	ldr	r2, [pc, #476]	; (8002824 <UART_SetConfig+0x250>)
 8002646:	4295      	cmp	r5, r2
 8002648:	d10d      	bne.n	8002666 <UART_SetConfig+0x92>
 800264a:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 800264e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002652:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8002656:	2a10      	cmp	r2, #16
 8002658:	f000 8086 	beq.w	8002768 <UART_SetConfig+0x194>
 800265c:	d95d      	bls.n	800271a <UART_SetConfig+0x146>
 800265e:	2a20      	cmp	r2, #32
 8002660:	d078      	beq.n	8002754 <UART_SetConfig+0x180>
 8002662:	2a30      	cmp	r2, #48	; 0x30
 8002664:	e00e      	b.n	8002684 <UART_SetConfig+0xb0>
 8002666:	4a70      	ldr	r2, [pc, #448]	; (8002828 <UART_SetConfig+0x254>)
 8002668:	4295      	cmp	r5, r2
 800266a:	d10d      	bne.n	8002688 <UART_SetConfig+0xb4>
 800266c:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 8002670:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002674:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8002678:	2a40      	cmp	r2, #64	; 0x40
 800267a:	d075      	beq.n	8002768 <UART_SetConfig+0x194>
 800267c:	d94d      	bls.n	800271a <UART_SetConfig+0x146>
 800267e:	2a80      	cmp	r2, #128	; 0x80
 8002680:	d068      	beq.n	8002754 <UART_SetConfig+0x180>
 8002682:	2ac0      	cmp	r2, #192	; 0xc0
 8002684:	d07c      	beq.n	8002780 <UART_SetConfig+0x1ac>
 8002686:	e087      	b.n	8002798 <UART_SetConfig+0x1c4>
 8002688:	4a68      	ldr	r2, [pc, #416]	; (800282c <UART_SetConfig+0x258>)
 800268a:	4295      	cmp	r5, r2
 800268c:	d10f      	bne.n	80026ae <UART_SetConfig+0xda>
 800268e:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 8002692:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002696:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800269a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800269e:	d063      	beq.n	8002768 <UART_SetConfig+0x194>
 80026a0:	d93b      	bls.n	800271a <UART_SetConfig+0x146>
 80026a2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80026a6:	d055      	beq.n	8002754 <UART_SetConfig+0x180>
 80026a8:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80026ac:	e7ea      	b.n	8002684 <UART_SetConfig+0xb0>
 80026ae:	4a60      	ldr	r2, [pc, #384]	; (8002830 <UART_SetConfig+0x25c>)
 80026b0:	4295      	cmp	r5, r2
 80026b2:	d112      	bne.n	80026da <UART_SetConfig+0x106>
 80026b4:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 80026b8:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80026bc:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80026c0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80026c4:	d050      	beq.n	8002768 <UART_SetConfig+0x194>
 80026c6:	d802      	bhi.n	80026ce <UART_SetConfig+0xfa>
 80026c8:	2a00      	cmp	r2, #0
 80026ca:	d03d      	beq.n	8002748 <UART_SetConfig+0x174>
 80026cc:	e064      	b.n	8002798 <UART_SetConfig+0x1c4>
 80026ce:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80026d2:	d03f      	beq.n	8002754 <UART_SetConfig+0x180>
 80026d4:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80026d8:	e7d4      	b.n	8002684 <UART_SetConfig+0xb0>
 80026da:	4a56      	ldr	r2, [pc, #344]	; (8002834 <UART_SetConfig+0x260>)
 80026dc:	4295      	cmp	r5, r2
 80026de:	d10f      	bne.n	8002700 <UART_SetConfig+0x12c>
 80026e0:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 80026e4:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80026e8:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 80026ec:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80026f0:	d03a      	beq.n	8002768 <UART_SetConfig+0x194>
 80026f2:	d912      	bls.n	800271a <UART_SetConfig+0x146>
 80026f4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80026f8:	d02c      	beq.n	8002754 <UART_SetConfig+0x180>
 80026fa:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 80026fe:	e7c1      	b.n	8002684 <UART_SetConfig+0xb0>
 8002700:	4a4d      	ldr	r2, [pc, #308]	; (8002838 <UART_SetConfig+0x264>)
 8002702:	4295      	cmp	r5, r2
 8002704:	d148      	bne.n	8002798 <UART_SetConfig+0x1c4>
 8002706:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 800270a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800270e:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8002712:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002716:	d027      	beq.n	8002768 <UART_SetConfig+0x194>
 8002718:	d801      	bhi.n	800271e <UART_SetConfig+0x14a>
 800271a:	b17a      	cbz	r2, 800273c <UART_SetConfig+0x168>
 800271c:	e03c      	b.n	8002798 <UART_SetConfig+0x1c4>
 800271e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002722:	d017      	beq.n	8002754 <UART_SetConfig+0x180>
 8002724:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8002728:	e7ac      	b.n	8002684 <UART_SetConfig+0xb0>

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  {
    switch (clocksource)
 800272a:	2a08      	cmp	r2, #8
 800272c:	d837      	bhi.n	800279e <UART_SetConfig+0x1ca>
 800272e:	e8df f002 	tbb	[pc, r2]
 8002732:	0e08      	.short	0x0e08
 8002734:	361e3614 	.word	0x361e3614
 8002738:	3636      	.short	0x3636
 800273a:	2a          	.byte	0x2a
 800273b:	00          	.byte	0x00

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800273c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002740:	d140      	bne.n	80027c4 <UART_SetConfig+0x1f0>
  {
    switch (clocksource)
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002742:	f7fe fe7b 	bl	800143c <HAL_RCC_GetPCLK1Freq>
 8002746:	e014      	b.n	8002772 <UART_SetConfig+0x19e>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002748:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800274c:	d13d      	bne.n	80027ca <UART_SetConfig+0x1f6>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800274e:	f7fe fe8d 	bl	800146c <HAL_RCC_GetPCLK2Freq>
 8002752:	e00e      	b.n	8002772 <UART_SetConfig+0x19e>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002754:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002758:	d13a      	bne.n	80027d0 <UART_SetConfig+0x1fc>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800275a:	6860      	ldr	r0, [r4, #4]
 800275c:	0842      	lsrs	r2, r0, #1
 800275e:	f102 73f4 	add.w	r3, r2, #31981568	; 0x1e80000
 8002762:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002766:	e012      	b.n	800278e <UART_SetConfig+0x1ba>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002768:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800276c:	d139      	bne.n	80027e2 <UART_SetConfig+0x20e>
      break;
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800276e:	f7fe fd77 	bl	8001260 <HAL_RCC_GetSysClockFreq>
 8002772:	6863      	ldr	r3, [r4, #4]
 8002774:	085a      	lsrs	r2, r3, #1
 8002776:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800277a:	fbb0 f3f3 	udiv	r3, r0, r3
 800277e:	e008      	b.n	8002792 <UART_SetConfig+0x1be>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002784:	d137      	bne.n	80027f6 <UART_SetConfig+0x222>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002786:	6860      	ldr	r0, [r4, #4]
 8002788:	0843      	lsrs	r3, r0, #1
 800278a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800278e:	fbb3 f3f0 	udiv	r3, r3, r0
 8002792:	b29b      	uxth	r3, r3
{
  uint32_t tmpreg                     = 0x00000000U;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000U;
  uint16_t usartdiv                   = 0x0000U;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002794:	2000      	movs	r0, #0
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
 8002796:	e004      	b.n	80027a2 <UART_SetConfig+0x1ce>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002798:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800279c:	d135      	bne.n	800280a <UART_SetConfig+0x236>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 800279e:	2001      	movs	r0, #1
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg                     = 0x00000000U;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000U;
  uint16_t usartdiv                   = 0x0000U;
 80027a0:	2300      	movs	r3, #0
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80027a2:	f3c3 0142 	ubfx	r1, r3, #1, #3
 80027a6:	f023 030f 	bic.w	r3, r3, #15
    huart->Instance->BRR = brrtemp;
 80027aa:	6822      	ldr	r2, [r4, #0]
 80027ac:	430b      	orrs	r3, r1
 80027ae:	60d3      	str	r3, [r2, #12]
 80027b0:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    switch (clocksource)
 80027b2:	2a08      	cmp	r2, #8
 80027b4:	d829      	bhi.n	800280a <UART_SetConfig+0x236>
 80027b6:	e8df f002 	tbb	[pc, r2]
 80027ba:	0805      	.short	0x0805
 80027bc:	2814280b 	.word	0x2814280b
 80027c0:	2828      	.short	0x2828
 80027c2:	1e          	.byte	0x1e
 80027c3:	00          	.byte	0x00
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80027c4:	f7fe fe3a 	bl	800143c <HAL_RCC_GetPCLK1Freq>
 80027c8:	e00d      	b.n	80027e6 <UART_SetConfig+0x212>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80027ca:	f7fe fe4f 	bl	800146c <HAL_RCC_GetPCLK2Freq>
 80027ce:	e00a      	b.n	80027e6 <UART_SetConfig+0x212>
      break;
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80027d0:	6861      	ldr	r1, [r4, #4]
 80027d2:	084a      	lsrs	r2, r1, #1
 80027d4:	f502 0374 	add.w	r3, r2, #15990784	; 0xf40000
 80027d8:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80027dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80027e0:	e00f      	b.n	8002802 <UART_SetConfig+0x22e>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80027e2:	f7fe fd3d 	bl	8001260 <HAL_RCC_GetSysClockFreq>
 80027e6:	6863      	ldr	r3, [r4, #4]
 80027e8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80027ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80027f0:	b280      	uxth	r0, r0
 80027f2:	60e8      	str	r0, [r5, #12]
 80027f4:	e007      	b.n	8002806 <UART_SetConfig+0x232>
      break;
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80027f6:	6862      	ldr	r2, [r4, #4]
 80027f8:	0853      	lsrs	r3, r2, #1
 80027fa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80027fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8002802:	b29b      	uxth	r3, r3
 8002804:	60eb      	str	r3, [r5, #12]
{
  uint32_t tmpreg                     = 0x00000000U;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000U;
  uint16_t usartdiv                   = 0x0000U;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002806:	2000      	movs	r0, #0
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
 8002808:	bd38      	pop	{r3, r4, r5, pc}
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 800280a:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 800280c:	bd38      	pop	{r3, r4, r5, pc}
 800280e:	bf00      	nop
 8002810:	efff69f3 	.word	0xefff69f3
 8002814:	40011000 	.word	0x40011000
 8002818:	08004d38 	.word	0x08004d38
 800281c:	40004400 	.word	0x40004400
 8002820:	08004d3c 	.word	0x08004d3c
 8002824:	40004800 	.word	0x40004800
 8002828:	40004c00 	.word	0x40004c00
 800282c:	40005000 	.word	0x40005000
 8002830:	40011400 	.word	0x40011400
 8002834:	40007800 	.word	0x40007800
 8002838:	40007c00 	.word	0x40007c00

0800283c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800283c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800283e:	07da      	lsls	r2, r3, #31
  * @brief Configure the UART peripheral advanced features
  * @param huart: uart handle
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002840:	b510      	push	{r4, lr}
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002842:	d506      	bpl.n	8002852 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002844:	6804      	ldr	r4, [r0, #0]
 8002846:	6862      	ldr	r2, [r4, #4]
 8002848:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 800284c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800284e:	430a      	orrs	r2, r1
 8002850:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002852:	079c      	lsls	r4, r3, #30
 8002854:	d506      	bpl.n	8002864 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002856:	6804      	ldr	r4, [r0, #0]
 8002858:	6862      	ldr	r2, [r4, #4]
 800285a:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 800285e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002860:	430a      	orrs	r2, r1
 8002862:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002864:	0759      	lsls	r1, r3, #29
 8002866:	d506      	bpl.n	8002876 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002868:	6804      	ldr	r4, [r0, #0]
 800286a:	6862      	ldr	r2, [r4, #4]
 800286c:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8002870:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002872:	430a      	orrs	r2, r1
 8002874:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002876:	071a      	lsls	r2, r3, #28
 8002878:	d506      	bpl.n	8002888 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800287a:	6804      	ldr	r4, [r0, #0]
 800287c:	6862      	ldr	r2, [r4, #4]
 800287e:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8002882:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002884:	430a      	orrs	r2, r1
 8002886:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002888:	06dc      	lsls	r4, r3, #27
 800288a:	d506      	bpl.n	800289a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800288c:	6804      	ldr	r4, [r0, #0]
 800288e:	68a2      	ldr	r2, [r4, #8]
 8002890:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8002894:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002896:	430a      	orrs	r2, r1
 8002898:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800289a:	0699      	lsls	r1, r3, #26
 800289c:	d506      	bpl.n	80028ac <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800289e:	6804      	ldr	r4, [r0, #0]
 80028a0:	68a2      	ldr	r2, [r4, #8]
 80028a2:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80028a6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80028a8:	430a      	orrs	r2, r1
 80028aa:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028ac:	065a      	lsls	r2, r3, #25
 80028ae:	d510      	bpl.n	80028d2 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028b0:	6801      	ldr	r1, [r0, #0]
 80028b2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80028b4:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028b6:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028ba:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80028be:	ea42 0204 	orr.w	r2, r2, r4
 80028c2:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028c4:	d105      	bne.n	80028d2 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028c6:	684a      	ldr	r2, [r1, #4]
 80028c8:	f422 04c0 	bic.w	r4, r2, #6291456	; 0x600000
 80028cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80028ce:	4322      	orrs	r2, r4
 80028d0:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80028d2:	061b      	lsls	r3, r3, #24
 80028d4:	d506      	bpl.n	80028e4 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80028d6:	6801      	ldr	r1, [r0, #0]
 80028d8:	684b      	ldr	r3, [r1, #4]
 80028da:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80028de:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80028e0:	4313      	orrs	r3, r2
 80028e2:	604b      	str	r3, [r1, #4]
 80028e4:	bd10      	pop	{r4, pc}

080028e6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80028e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028e8:	2600      	movs	r6, #0
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80028ea:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ec:	66c6      	str	r6, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80028ee:	f7fd fd39 	bl	8000364 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80028f2:	6823      	ldr	r3, [r4, #0]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80028f4:	4605      	mov	r5, r0

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	071a      	lsls	r2, r3, #28
 80028fa:	d404      	bmi.n	8002906 <UART_CheckIdleState+0x20>
      /* Timeout Occurred */
      return HAL_TIMEOUT;
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80028fc:	6823      	ldr	r3, [r4, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	075b      	lsls	r3, r3, #29
 8002902:	d51a      	bpl.n	800293a <UART_CheckIdleState+0x54>
 8002904:	e00d      	b.n	8002922 <UART_CheckIdleState+0x3c>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002906:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800290a:	4632      	mov	r2, r6
 800290c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	4603      	mov	r3, r0
 8002914:	4620      	mov	r0, r4
 8002916:	f7ff fdd1 	bl	80024bc <UART_WaitOnFlagUntilTimeout>
 800291a:	2800      	cmp	r0, #0
 800291c:	d0ee      	beq.n	80028fc <UART_CheckIdleState+0x16>
    {
      /* Timeout Occurred */
      return HAL_TIMEOUT;
 800291e:	2003      	movs	r0, #3
 8002920:	e013      	b.n	800294a <UART_CheckIdleState+0x64>
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002922:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002926:	2200      	movs	r2, #0
 8002928:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800292c:	4620      	mov	r0, r4
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	462b      	mov	r3, r5
 8002932:	f7ff fdc3 	bl	80024bc <UART_WaitOnFlagUntilTimeout>
 8002936:	2800      	cmp	r0, #0
 8002938:	d1f1      	bne.n	800291e <UART_CheckIdleState+0x38>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 800293a:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800293c:	2000      	movs	r0, #0
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 800293e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002942:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
 8002946:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
}
 800294a:	b002      	add	sp, #8
 800294c:	bd70      	pop	{r4, r5, r6, pc}

0800294e <HAL_UART_Init>:
  *         parameters in the UART_InitTypeDef and creates the associated handle .
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800294e:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002950:	4604      	mov	r4, r0
 8002952:	b360      	cbz	r0, 80029ae <HAL_UART_Init+0x60>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002954:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002958:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800295c:	b91b      	cbnz	r3, 8002966 <HAL_UART_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800295e:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002962:	f001 fcef 	bl	8004344 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002966:	6822      	ldr	r2, [r4, #0]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002968:	2324      	movs	r3, #36	; 0x24

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800296a:	4620      	mov	r0, r4

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800296c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002970:	6813      	ldr	r3, [r2, #0]
 8002972:	f023 0301 	bic.w	r3, r3, #1
 8002976:	6013      	str	r3, [r2, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002978:	f7ff fe2c 	bl	80025d4 <UART_SetConfig>
 800297c:	2801      	cmp	r0, #1
 800297e:	d016      	beq.n	80029ae <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002980:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002982:	b113      	cbz	r3, 800298a <HAL_UART_Init+0x3c>
  {
    UART_AdvFeatureConfig(huart);
 8002984:	4620      	mov	r0, r4
 8002986:	f7ff ff59 	bl	800283c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800298a:	6823      	ldr	r3, [r4, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800298c:	4620      	mov	r0, r4
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002994:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800299c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	f042 0201 	orr.w	r2, r2, #1

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 80029a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80029a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029aa:	f7ff bf9c 	b.w	80028e6 <UART_CheckIdleState>
}
 80029ae:	2001      	movs	r0, #1
 80029b0:	bd10      	pop	{r4, pc}
	...

080029b4 <Emergency_Stop>:
	{HAL_TIM_PWM_Stop(&htim9, TIM_CHANNEL_1);}
}

int Emergency_Stop() {

if (dif_l > 3700 || dif_r > 3700 || cur_move == PAUSE) //Emergency STOP conditions
 80029b4:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <Emergency_Stop+0x44>)
 80029b6:	f640 6174 	movw	r1, #3700	; 0xe74
 80029ba:	4a10      	ldr	r2, [pc, #64]	; (80029fc <Emergency_Stop+0x48>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	428b      	cmp	r3, r1
 80029c0:	dc06      	bgt.n	80029d0 <Emergency_Stop+0x1c>
 80029c2:	480f      	ldr	r0, [pc, #60]	; (8002a00 <Emergency_Stop+0x4c>)
 80029c4:	6800      	ldr	r0, [r0, #0]
 80029c6:	4288      	cmp	r0, r1
 80029c8:	dc02      	bgt.n	80029d0 <Emergency_Stop+0x1c>
 80029ca:	6811      	ldr	r1, [r2, #0]
 80029cc:	2904      	cmp	r1, #4
 80029ce:	d10f      	bne.n	80029f0 <Emergency_Stop+0x3c>
	  {
		  if (cur_move == FWD || cur_move == PAUSE)
 80029d0:	6812      	ldr	r2, [r2, #0]
 80029d2:	f032 0204 	bics.w	r2, r2, #4
 80029d6:	d00d      	beq.n	80029f4 <Emergency_Stop+0x40>
		  {return TRUE;} //stops motors, and breaks out of searching loop
		  //else if (cur_move == RIGHT && r_turnflag == TRUE)
		  //{return TRUE;}
		  //else if (cur_move == LEFT && l_turnflag == TRUE)
		  //{return TRUE;}
		  else if (abs(dif_l - dif_r) > 3200) {
 80029d8:	4a09      	ldr	r2, [pc, #36]	; (8002a00 <Emergency_Stop+0x4c>)
int Emergency_Stop() {

if (dif_l > 3700 || dif_r > 3700 || cur_move == PAUSE) //Emergency STOP conditions
	  {
		  if (cur_move == FWD || cur_move == PAUSE)
		  {return TRUE;} //stops motors, and breaks out of searching loop
 80029da:	6810      	ldr	r0, [r2, #0]
 80029dc:	1a18      	subs	r0, r3, r0
 80029de:	2800      	cmp	r0, #0
 80029e0:	bfb8      	it	lt
 80029e2:	4240      	neglt	r0, r0
 80029e4:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
 80029e8:	bfd4      	ite	le
 80029ea:	2000      	movle	r0, #0
 80029ec:	2001      	movgt	r0, #1
 80029ee:	4770      	bx	lr
		  //{return TRUE;}
		  else if (abs(dif_l - dif_r) > 3200) {
			  return TRUE;
		  }
	  }
return FALSE;
 80029f0:	2000      	movs	r0, #0
 80029f2:	4770      	bx	lr
int Emergency_Stop() {

if (dif_l > 3700 || dif_r > 3700 || cur_move == PAUSE) //Emergency STOP conditions
	  {
		  if (cur_move == FWD || cur_move == PAUSE)
		  {return TRUE;} //stops motors, and breaks out of searching loop
 80029f4:	2001      	movs	r0, #1
		  else if (abs(dif_l - dif_r) > 3200) {
			  return TRUE;
		  }
	  }
return FALSE;
}
 80029f6:	4770      	bx	lr
 80029f8:	20000124 	.word	0x20000124
 80029fc:	200002ac 	.word	0x200002ac
 8002a00:	20000350 	.word	0x20000350

08002a04 <Motor_Correction>:

}
int correction = 0;


if (l_wall > SIDE_THRESHOLD && r_wall > SIDE_THRESHOLD) { //both walls available
 8002a04:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 8002a08:	dd07      	ble.n	8002a1a <Motor_Correction+0x16>
 8002a0a:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
 8002a0e:	dd08      	ble.n	8002a22 <Motor_Correction+0x1e>
	  	  errorP = (l_wall - dif_rf+100); //dif_rf + 500 for primary
 8002a10:	4b16      	ldr	r3, [pc, #88]	; (8002a6c <Motor_Correction+0x68>)
 8002a12:	6819      	ldr	r1, [r3, #0]
 8002a14:	1a40      	subs	r0, r0, r1
 8002a16:	3064      	adds	r0, #100	; 0x64
 8002a18:	e008      	b.n	8002a2c <Motor_Correction+0x28>
	  	  errorD = errorP - oldErrorP;
}
else if (l_wall >= SIDE_THRESHOLD && r_wall <= SIDE_THRESHOLD) { //only left wall to correct. Optimal reading should be 1600
 8002a1a:	d109      	bne.n	8002a30 <Motor_Correction+0x2c>
 8002a1c:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
 8002a20:	dc02      	bgt.n	8002a28 <Motor_Correction+0x24>
		  errorP = (l_wall - 1600); //75 is correction factor. Left side needs more corrections for some reason
 8002a22:	f5a0 60c8 	sub.w	r0, r0, #1600	; 0x640
 8002a26:	e001      	b.n	8002a2c <Motor_Correction+0x28>
		  errorD = errorP - oldErrorP;
}
else if (l_wall <= SIDE_THRESHOLD && r_wall >= SIDE_THRESHOLD) {//only right wall to correct. Optimal reading should be 1500. (200 is offset)
		  errorP = (1600 - r_wall); //100 is correction factor. Right side needs less correction
 8002a28:	f5c1 60c8 	rsb	r0, r1, #1600	; 0x640
		  errorD = errorP - oldErrorP;
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	e010      	b.n	8002a52 <Motor_Correction+0x4e>
}
else if (l_wall >= SIDE_THRESHOLD && r_wall <= SIDE_THRESHOLD) { //only left wall to correct. Optimal reading should be 1600
		  errorP = (l_wall - 1600); //75 is correction factor. Left side needs more corrections for some reason
		  errorD = errorP - oldErrorP;
}
else if (l_wall <= SIDE_THRESHOLD && r_wall >= SIDE_THRESHOLD) {//only right wall to correct. Optimal reading should be 1500. (200 is offset)
 8002a30:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
 8002a34:	daf8      	bge.n	8002a28 <Motor_Correction+0x24>
		  errorP = (1600 - r_wall); //100 is correction factor. Right side needs less correction
		  errorD = errorP - oldErrorP;
}
else if (l_wall <= SIDE_THRESHOLD && r_wall <= SIDE_THRESHOLD) { //use encoders when there's no walls available
		  errorP = ((l_count - prev_l_count) - (r_count - prev_r_count))*5;
 8002a36:	4b0e      	ldr	r3, [pc, #56]	; (8002a70 <Motor_Correction+0x6c>)
 8002a38:	6818      	ldr	r0, [r3, #0]
 8002a3a:	4b0e      	ldr	r3, [pc, #56]	; (8002a74 <Motor_Correction+0x70>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4418      	add	r0, r3
 8002a40:	4b0d      	ldr	r3, [pc, #52]	; (8002a78 <Motor_Correction+0x74>)
 8002a42:	6819      	ldr	r1, [r3, #0]
 8002a44:	4b0d      	ldr	r3, [pc, #52]	; (8002a7c <Motor_Correction+0x78>)
 8002a46:	1a40      	subs	r0, r0, r1
 8002a48:	6819      	ldr	r1, [r3, #0]
	      errorD = 0;
 8002a4a:	2300      	movs	r3, #0
else if (l_wall <= SIDE_THRESHOLD && r_wall >= SIDE_THRESHOLD) {//only right wall to correct. Optimal reading should be 1500. (200 is offset)
		  errorP = (1600 - r_wall); //100 is correction factor. Right side needs less correction
		  errorD = errorP - oldErrorP;
}
else if (l_wall <= SIDE_THRESHOLD && r_wall <= SIDE_THRESHOLD) { //use encoders when there's no walls available
		  errorP = ((l_count - prev_l_count) - (r_count - prev_r_count))*5;
 8002a4c:	1a40      	subs	r0, r0, r1
 8002a4e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	      errorD = 0;
}

correction = errorP/P + errorD/D; //P and D are tuning parameters
 8002a52:	2264      	movs	r2, #100	; 0x64
 8002a54:	fb93 f3f2 	sdiv	r3, r3, r2
 8002a58:	fb90 f0f2 	sdiv	r0, r0, r2
 8002a5c:	4418      	add	r0, r3
oldErrorP = errorP;
if (abs(correction) < 50) {
 8002a5e:	f100 0331 	add.w	r3, r0, #49	; 0x31
 8002a62:	2b62      	cmp	r3, #98	; 0x62
 8002a64:	bf88      	it	hi
 8002a66:	2000      	movhi	r0, #0
	return correction;
}
else
{return 0;}

}
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	2000046c 	.word	0x2000046c
 8002a70:	200003b8 	.word	0x200003b8
 8002a74:	200004e0 	.word	0x200004e0
 8002a78:	200004e4 	.word	0x200004e4
 8002a7c:	20000360 	.word	0x20000360

08002a80 <Reset_Counters>:

}

void Reset_Counters() {

__HAL_TIM_SET_COUNTER(&htim1, 0); //reset counters
 8002a80:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <Reset_Counters+0x20>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	2300      	movs	r3, #0
 8002a86:	6253      	str	r3, [r2, #36]	; 0x24
__HAL_TIM_SET_COUNTER(&htim4, 0);
 8002a88:	4a06      	ldr	r2, [pc, #24]	; (8002aa4 <Reset_Counters+0x24>)
 8002a8a:	6812      	ldr	r2, [r2, #0]
 8002a8c:	6253      	str	r3, [r2, #36]	; 0x24
prev_l_count = 0;
 8002a8e:	4a06      	ldr	r2, [pc, #24]	; (8002aa8 <Reset_Counters+0x28>)
 8002a90:	6013      	str	r3, [r2, #0]
prev_r_count = 0;
 8002a92:	4a06      	ldr	r2, [pc, #24]	; (8002aac <Reset_Counters+0x2c>)
 8002a94:	6013      	str	r3, [r2, #0]
lenc_diff = 0;
 8002a96:	4a06      	ldr	r2, [pc, #24]	; (8002ab0 <Reset_Counters+0x30>)
 8002a98:	6013      	str	r3, [r2, #0]
renc_diff = 0;
 8002a9a:	4a06      	ldr	r2, [pc, #24]	; (8002ab4 <Reset_Counters+0x34>)
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	4770      	bx	lr
 8002aa0:	20000898 	.word	0x20000898
 8002aa4:	200004e8 	.word	0x200004e8
 8002aa8:	200004e4 	.word	0x200004e4
 8002aac:	200004e0 	.word	0x200004e0
 8002ab0:	2000035c 	.word	0x2000035c
 8002ab4:	20000410 	.word	0x20000410

08002ab8 <Transmit>:
	Transmit(tx_buffer);
	sprintf(tx_buffer, "RIGHT Turn Flag: %d \r\nLEFT Turn Flag: %d \r\n-----------------------", r_turnflag, l_turnflag);
}

//takes char array
void Transmit(char message[]) {
 8002ab8:	b510      	push	{r4, lr}
 8002aba:	4604      	mov	r4, r0

	int len;
	len=strlen(message);
 8002abc:	f7fd fba8 	bl	8000210 <strlen>
	HAL_UART_Transmit(&huart1, message, len, 1000);
 8002ac0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ac4:	b282      	uxth	r2, r0
 8002ac6:	4621      	mov	r1, r4
 8002ac8:	4802      	ldr	r0, [pc, #8]	; (8002ad4 <Transmit+0x1c>)
}
 8002aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//takes char array
void Transmit(char message[]) {

	int len;
	len=strlen(message);
	HAL_UART_Transmit(&huart1, message, len, 1000);
 8002ace:	f7ff bd26 	b.w	800251e <HAL_UART_Transmit>
 8002ad2:	bf00      	nop
 8002ad4:	20000744 	.word	0x20000744

08002ad8 <Send_State>:
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
	HAL_GPIO_WritePin(GPIOA, RDIC_Pin, direction);

}

void Send_State(void) {
 8002ad8:	b5f0      	push	{r4, r5, r6, r7, lr}

	int i = 0;
 8002ada:	2400      	movs	r4, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
	HAL_GPIO_WritePin(GPIOA, RDIC_Pin, direction);

}

void Send_State(void) {
 8002adc:	b08b      	sub	sp, #44	; 0x2c

	int i = 0;
	//for(int i = 0; i < DBG_BUFFER; i++)
    while (l_debug[i] != 0 && i < DBG_BUFFER)
 8002ade:	4d1b      	ldr	r5, [pc, #108]	; (8002b4c <Send_State+0x74>)
	{
	sprintf(tx_buffer, "Decision %d: \r\nL: %d   \r\nR: %d   \r\nRF: %d    \r\nLF: %d   \r\nCur Direc: %d \r\nNext Direction: %d  \r\nL Count: %d   R Count: %d \r\nPrev L: %d    Prev R: %d  \r\n---------------------\r\n", i, l_debug[i], r_debug[i], rf_debug[i], lf_debug[i], cur_debug[i], turn_debug[i], l_count_debug[i], r_count_debug[i], prev_l_debug[i], prev_r_debug[i]);
 8002ae0:	4e1b      	ldr	r6, [pc, #108]	; (8002b50 <Send_State+0x78>)
 8002ae2:	4f1c      	ldr	r7, [pc, #112]	; (8002b54 <Send_State+0x7c>)

void Send_State(void) {

	int i = 0;
	//for(int i = 0; i < DBG_BUFFER; i++)
    while (l_debug[i] != 0 && i < DBG_BUFFER)
 8002ae4:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8002ae8:	b35b      	cbz	r3, 8002b42 <Send_State+0x6a>
	{
	sprintf(tx_buffer, "Decision %d: \r\nL: %d   \r\nR: %d   \r\nRF: %d    \r\nLF: %d   \r\nCur Direc: %d \r\nNext Direction: %d  \r\nL Count: %d   R Count: %d \r\nPrev L: %d    Prev R: %d  \r\n---------------------\r\n", i, l_debug[i], r_debug[i], rf_debug[i], lf_debug[i], cur_debug[i], turn_debug[i], l_count_debug[i], r_count_debug[i], prev_l_debug[i], prev_r_debug[i]);
 8002aea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8002aee:	491a      	ldr	r1, [pc, #104]	; (8002b58 <Send_State+0x80>)
 8002af0:	9208      	str	r2, [sp, #32]
 8002af2:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
 8002af6:	4819      	ldr	r0, [pc, #100]	; (8002b5c <Send_State+0x84>)
 8002af8:	9207      	str	r2, [sp, #28]
 8002afa:	4a19      	ldr	r2, [pc, #100]	; (8002b60 <Send_State+0x88>)
 8002afc:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8002b00:	9206      	str	r2, [sp, #24]
 8002b02:	4a18      	ldr	r2, [pc, #96]	; (8002b64 <Send_State+0x8c>)
 8002b04:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8002b08:	9205      	str	r2, [sp, #20]
 8002b0a:	4a17      	ldr	r2, [pc, #92]	; (8002b68 <Send_State+0x90>)
 8002b0c:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8002b10:	9204      	str	r2, [sp, #16]
 8002b12:	4a16      	ldr	r2, [pc, #88]	; (8002b6c <Send_State+0x94>)
 8002b14:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8002b18:	9203      	str	r2, [sp, #12]
 8002b1a:	4a15      	ldr	r2, [pc, #84]	; (8002b70 <Send_State+0x98>)
 8002b1c:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8002b20:	9202      	str	r2, [sp, #8]
 8002b22:	4a14      	ldr	r2, [pc, #80]	; (8002b74 <Send_State+0x9c>)
 8002b24:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8002b28:	9201      	str	r2, [sp, #4]
 8002b2a:	4a13      	ldr	r2, [pc, #76]	; (8002b78 <Send_State+0xa0>)
 8002b2c:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8002b30:	9200      	str	r2, [sp, #0]
 8002b32:	4622      	mov	r2, r4
 8002b34:	f001 fca6 	bl	8004484 <siprintf>
	Transmit(tx_buffer);
 8002b38:	4808      	ldr	r0, [pc, #32]	; (8002b5c <Send_State+0x84>)
 8002b3a:	f7ff ffbd 	bl	8002ab8 <Transmit>
	i++;
 8002b3e:	3401      	adds	r4, #1
 8002b40:	e7d0      	b.n	8002ae4 <Send_State+0xc>
	}
	dbg_count = 0;
 8002b42:	4a0e      	ldr	r2, [pc, #56]	; (8002b7c <Send_State+0xa4>)
 8002b44:	6013      	str	r3, [r2, #0]
}
 8002b46:	b00b      	add	sp, #44	; 0x2c
 8002b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	200001b4 	.word	0x200001b4
 8002b50:	2000025c 	.word	0x2000025c
 8002b54:	200000c4 	.word	0x200000c4
 8002b58:	08004d49 	.word	0x08004d49
 8002b5c:	20000634 	.word	0x20000634
 8002b60:	20000128 	.word	0x20000128
 8002b64:	200002b0 	.word	0x200002b0
 8002b68:	20000364 	.word	0x20000364
 8002b6c:	20000418 	.word	0x20000418
 8002b70:	20000300 	.word	0x20000300
 8002b74:	20000208 	.word	0x20000208
 8002b78:	200003c0 	.word	0x200003c0
 8002b7c:	20000178 	.word	0x20000178

08002b80 <Send_Debug>:

void Send_Debug(void) {

	sprintf(tx_buffer, "L Value: %d  LF Value: %d \r\nRF Value: %d R Value: %d \r\n--------------------- \r\n", dif_l, dif_lf, dif_rf, dif_r); //lf, rf, r);
 8002b80:	4b1f      	ldr	r3, [pc, #124]	; (8002c00 <Send_Debug+0x80>)
 8002b82:	4a20      	ldr	r2, [pc, #128]	; (8002c04 <Send_Debug+0x84>)
 8002b84:	681b      	ldr	r3, [r3, #0]
	i++;
	}
	dbg_count = 0;
}

void Send_Debug(void) {
 8002b86:	b513      	push	{r0, r1, r4, lr}

	sprintf(tx_buffer, "L Value: %d  LF Value: %d \r\nRF Value: %d R Value: %d \r\n--------------------- \r\n", dif_l, dif_lf, dif_rf, dif_r); //lf, rf, r);
 8002b88:	9301      	str	r3, [sp, #4]
 8002b8a:	4b1f      	ldr	r3, [pc, #124]	; (8002c08 <Send_Debug+0x88>)
 8002b8c:	4c1f      	ldr	r4, [pc, #124]	; (8002c0c <Send_Debug+0x8c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	491f      	ldr	r1, [pc, #124]	; (8002c10 <Send_Debug+0x90>)
 8002b92:	4620      	mov	r0, r4
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	4b1f      	ldr	r3, [pc, #124]	; (8002c14 <Send_Debug+0x94>)
 8002b98:	6812      	ldr	r2, [r2, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f001 fc72 	bl	8004484 <siprintf>
	Transmit(tx_buffer); //transmitm the message above
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	f7ff ff89 	bl	8002ab8 <Transmit>
	sprintf(tx_buffer, "Left Count Value: %d \r\nRight Count Value %d \r\n-----------------\r\n", l_count, r_count);
 8002ba6:	4b1c      	ldr	r3, [pc, #112]	; (8002c18 <Send_Debug+0x98>)
 8002ba8:	4a1c      	ldr	r2, [pc, #112]	; (8002c1c <Send_Debug+0x9c>)
 8002baa:	4620      	mov	r0, r4
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6812      	ldr	r2, [r2, #0]
 8002bb0:	491b      	ldr	r1, [pc, #108]	; (8002c20 <Send_Debug+0xa0>)
 8002bb2:	f001 fc67 	bl	8004484 <siprintf>
	Transmit(tx_buffer); //transmit the message above
 8002bb6:	4620      	mov	r0, r4
 8002bb8:	f7ff ff7e 	bl	8002ab8 <Transmit>
	sprintf(tx_buffer, "Prev_L: %d \r\nPrev R %d \r\n-----------------\r\n", prev_l_count, prev_r_count);
 8002bbc:	4b19      	ldr	r3, [pc, #100]	; (8002c24 <Send_Debug+0xa4>)
 8002bbe:	4a1a      	ldr	r2, [pc, #104]	; (8002c28 <Send_Debug+0xa8>)
 8002bc0:	4620      	mov	r0, r4
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6812      	ldr	r2, [r2, #0]
 8002bc6:	4919      	ldr	r1, [pc, #100]	; (8002c2c <Send_Debug+0xac>)
 8002bc8:	f001 fc5c 	bl	8004484 <siprintf>
	Transmit(tx_buffer); //transmit the message above
 8002bcc:	4620      	mov	r0, r4
 8002bce:	f7ff ff73 	bl	8002ab8 <Transmit>
	sprintf(tx_buffer, "cur_move: %d \r\nnext_move: %d\r\n-----------------\r\n", cur_move, next_move);
 8002bd2:	4b17      	ldr	r3, [pc, #92]	; (8002c30 <Send_Debug+0xb0>)
 8002bd4:	4a17      	ldr	r2, [pc, #92]	; (8002c34 <Send_Debug+0xb4>)
 8002bd6:	4620      	mov	r0, r4
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6812      	ldr	r2, [r2, #0]
 8002bdc:	4916      	ldr	r1, [pc, #88]	; (8002c38 <Send_Debug+0xb8>)
 8002bde:	f001 fc51 	bl	8004484 <siprintf>
	Transmit(tx_buffer);
 8002be2:	4620      	mov	r0, r4
 8002be4:	f7ff ff68 	bl	8002ab8 <Transmit>
	sprintf(tx_buffer, "RIGHT Turn Flag: %d \r\nLEFT Turn Flag: %d \r\n-----------------------", r_turnflag, l_turnflag);
 8002be8:	4b14      	ldr	r3, [pc, #80]	; (8002c3c <Send_Debug+0xbc>)
 8002bea:	4a15      	ldr	r2, [pc, #84]	; (8002c40 <Send_Debug+0xc0>)
 8002bec:	4620      	mov	r0, r4
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6812      	ldr	r2, [r2, #0]
 8002bf2:	4914      	ldr	r1, [pc, #80]	; (8002c44 <Send_Debug+0xc4>)
}
 8002bf4:	b002      	add	sp, #8
 8002bf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Transmit(tx_buffer); //transmit the message above
	sprintf(tx_buffer, "Prev_L: %d \r\nPrev R %d \r\n-----------------\r\n", prev_l_count, prev_r_count);
	Transmit(tx_buffer); //transmit the message above
	sprintf(tx_buffer, "cur_move: %d \r\nnext_move: %d\r\n-----------------\r\n", cur_move, next_move);
	Transmit(tx_buffer);
	sprintf(tx_buffer, "RIGHT Turn Flag: %d \r\nLEFT Turn Flag: %d \r\n-----------------------", r_turnflag, l_turnflag);
 8002bfa:	f001 bc43 	b.w	8004484 <siprintf>
 8002bfe:	bf00      	nop
 8002c00:	20000350 	.word	0x20000350
 8002c04:	20000124 	.word	0x20000124
 8002c08:	2000046c 	.word	0x2000046c
 8002c0c:	20000634 	.word	0x20000634
 8002c10:	08004df9 	.word	0x08004df9
 8002c14:	2000017c 	.word	0x2000017c
 8002c18:	20000360 	.word	0x20000360
 8002c1c:	200003b8 	.word	0x200003b8
 8002c20:	08004e49 	.word	0x08004e49
 8002c24:	200004e0 	.word	0x200004e0
 8002c28:	200004e4 	.word	0x200004e4
 8002c2c:	08004e8b 	.word	0x08004e8b
 8002c30:	20000118 	.word	0x20000118
 8002c34:	200002ac 	.word	0x200002ac
 8002c38:	08004eb8 	.word	0x08004eb8
 8002c3c:	200003bc 	.word	0x200003bc
 8002c40:	200003b4 	.word	0x200003b4
 8002c44:	08004eea 	.word	0x08004eea

08002c48 <Save_State>:

}

void Save_State(void) {

	l_debug[dbg_count] = dif_l;
 8002c48:	4a1c      	ldr	r2, [pc, #112]	; (8002cbc <Save_State+0x74>)
 8002c4a:	491d      	ldr	r1, [pc, #116]	; (8002cc0 <Save_State+0x78>)
 8002c4c:	6813      	ldr	r3, [r2, #0]
 8002c4e:	6808      	ldr	r0, [r1, #0]
 8002c50:	491c      	ldr	r1, [pc, #112]	; (8002cc4 <Save_State+0x7c>)
 8002c52:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
	r_debug[dbg_count] = dif_r;
 8002c56:	491c      	ldr	r1, [pc, #112]	; (8002cc8 <Save_State+0x80>)
 8002c58:	6808      	ldr	r0, [r1, #0]
 8002c5a:	491c      	ldr	r1, [pc, #112]	; (8002ccc <Save_State+0x84>)
 8002c5c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
	rf_debug[dbg_count] = dif_rf;
 8002c60:	491b      	ldr	r1, [pc, #108]	; (8002cd0 <Save_State+0x88>)
 8002c62:	6808      	ldr	r0, [r1, #0]
 8002c64:	491b      	ldr	r1, [pc, #108]	; (8002cd4 <Save_State+0x8c>)
 8002c66:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
	lf_debug[dbg_count] = dif_lf;
 8002c6a:	491b      	ldr	r1, [pc, #108]	; (8002cd8 <Save_State+0x90>)
 8002c6c:	6808      	ldr	r0, [r1, #0]
 8002c6e:	491b      	ldr	r1, [pc, #108]	; (8002cdc <Save_State+0x94>)
 8002c70:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
	cur_debug[dbg_count] = cur_move;
 8002c74:	491a      	ldr	r1, [pc, #104]	; (8002ce0 <Save_State+0x98>)
 8002c76:	6808      	ldr	r0, [r1, #0]
 8002c78:	491a      	ldr	r1, [pc, #104]	; (8002ce4 <Save_State+0x9c>)
 8002c7a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
	turn_debug[dbg_count] = next_move;
 8002c7e:	491a      	ldr	r1, [pc, #104]	; (8002ce8 <Save_State+0xa0>)
 8002c80:	6808      	ldr	r0, [r1, #0]
 8002c82:	491a      	ldr	r1, [pc, #104]	; (8002cec <Save_State+0xa4>)
 8002c84:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
	l_count_debug[dbg_count] = l_count;
 8002c88:	4919      	ldr	r1, [pc, #100]	; (8002cf0 <Save_State+0xa8>)
 8002c8a:	6808      	ldr	r0, [r1, #0]
 8002c8c:	4919      	ldr	r1, [pc, #100]	; (8002cf4 <Save_State+0xac>)
 8002c8e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
	r_count_debug[dbg_count] = r_count;
 8002c92:	4919      	ldr	r1, [pc, #100]	; (8002cf8 <Save_State+0xb0>)
 8002c94:	6808      	ldr	r0, [r1, #0]
 8002c96:	4919      	ldr	r1, [pc, #100]	; (8002cfc <Save_State+0xb4>)
 8002c98:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
	prev_l_debug[dbg_count] = prev_l_count;
 8002c9c:	4918      	ldr	r1, [pc, #96]	; (8002d00 <Save_State+0xb8>)
 8002c9e:	6808      	ldr	r0, [r1, #0]
 8002ca0:	4918      	ldr	r1, [pc, #96]	; (8002d04 <Save_State+0xbc>)
 8002ca2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
	prev_r_debug[dbg_count] = prev_r_count;
 8002ca6:	4918      	ldr	r1, [pc, #96]	; (8002d08 <Save_State+0xc0>)
 8002ca8:	6808      	ldr	r0, [r1, #0]
 8002caa:	4918      	ldr	r1, [pc, #96]	; (8002d0c <Save_State+0xc4>)
 8002cac:	f841 0023 	str.w	r0, [r1, r3, lsl #2]

	dbg_count++;
 8002cb0:	3301      	adds	r3, #1

	if (dbg_count >= DBG_BUFFER)
 8002cb2:	2b13      	cmp	r3, #19
		{dbg_count = 0;}
 8002cb4:	bfc8      	it	gt
 8002cb6:	2300      	movgt	r3, #0
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	4770      	bx	lr
 8002cbc:	20000178 	.word	0x20000178
 8002cc0:	20000124 	.word	0x20000124
 8002cc4:	200001b4 	.word	0x200001b4
 8002cc8:	20000350 	.word	0x20000350
 8002ccc:	200003c0 	.word	0x200003c0
 8002cd0:	2000046c 	.word	0x2000046c
 8002cd4:	20000208 	.word	0x20000208
 8002cd8:	2000017c 	.word	0x2000017c
 8002cdc:	20000300 	.word	0x20000300
 8002ce0:	200002ac 	.word	0x200002ac
 8002ce4:	20000418 	.word	0x20000418
 8002ce8:	20000118 	.word	0x20000118
 8002cec:	20000364 	.word	0x20000364
 8002cf0:	200003b8 	.word	0x200003b8
 8002cf4:	200002b0 	.word	0x200002b0
 8002cf8:	20000360 	.word	0x20000360
 8002cfc:	20000128 	.word	0x20000128
 8002d00:	200004e4 	.word	0x200004e4
 8002d04:	200000c4 	.word	0x200000c4
 8002d08:	200004e0 	.word	0x200004e0
 8002d0c:	2000025c 	.word	0x2000025c

08002d10 <Print_Maze>:

	HAL_GPIO_WritePin(GPIOA, GYRO_CS_Pin, GPIO_PIN_RESET);

}

void Print_Maze() {
 8002d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

sprintf(tx_buffer, "Floodfill Values: \r\n");
 8002d12:	4931      	ldr	r1, [pc, #196]	; (8002dd8 <Print_Maze+0xc8>)
Transmit(tx_buffer);
 8002d14:	2500      	movs	r5, #0

}

void Print_Maze() {

sprintf(tx_buffer, "Floodfill Values: \r\n");
 8002d16:	4831      	ldr	r0, [pc, #196]	; (8002ddc <Print_Maze+0xcc>)
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //floodfill values
	for (int j = 0; j < X_MAZE_SIZE; j++) {
		sprintf(tx_buffer, "%d ", maze[j][i]);
 8002d18:	4e31      	ldr	r6, [pc, #196]	; (8002de0 <Print_Maze+0xd0>)

}

void Print_Maze() {

sprintf(tx_buffer, "Floodfill Values: \r\n");
 8002d1a:	f001 fbd7 	bl	80044cc <strcpy>
Transmit(tx_buffer);
 8002d1e:	482f      	ldr	r0, [pc, #188]	; (8002ddc <Print_Maze+0xcc>)
 8002d20:	f7ff feca 	bl	8002ab8 <Transmit>

	HAL_GPIO_WritePin(GPIOA, GYRO_CS_Pin, GPIO_PIN_RESET);

}

void Print_Maze() {
 8002d24:	2400      	movs	r4, #0

sprintf(tx_buffer, "Floodfill Values: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //floodfill values
	for (int j = 0; j < X_MAZE_SIZE; j++) {
		sprintf(tx_buffer, "%d ", maze[j][i]);
 8002d26:	19a3      	adds	r3, r4, r6
 8002d28:	492e      	ldr	r1, [pc, #184]	; (8002de4 <Print_Maze+0xd4>)
 8002d2a:	482c      	ldr	r0, [pc, #176]	; (8002ddc <Print_Maze+0xcc>)
 8002d2c:	340c      	adds	r4, #12
 8002d2e:	595a      	ldr	r2, [r3, r5]
 8002d30:	f001 fba8 	bl	8004484 <siprintf>
		Transmit(tx_buffer);
 8002d34:	4829      	ldr	r0, [pc, #164]	; (8002ddc <Print_Maze+0xcc>)
 8002d36:	f7ff febf 	bl	8002ab8 <Transmit>
void Print_Maze() {

sprintf(tx_buffer, "Floodfill Values: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //floodfill values
	for (int j = 0; j < X_MAZE_SIZE; j++) {
 8002d3a:	2c48      	cmp	r4, #72	; 0x48
 8002d3c:	d1f3      	bne.n	8002d26 <Print_Maze+0x16>
		sprintf(tx_buffer, "%d ", maze[j][i]);
		Transmit(tx_buffer);
	}
	sprintf(tx_buffer, "\r\n \r\n");
 8002d3e:	492a      	ldr	r1, [pc, #168]	; (8002de8 <Print_Maze+0xd8>)
 8002d40:	3504      	adds	r5, #4
 8002d42:	4826      	ldr	r0, [pc, #152]	; (8002ddc <Print_Maze+0xcc>)
 8002d44:	f001 fbc2 	bl	80044cc <strcpy>
	Transmit(tx_buffer);
 8002d48:	4824      	ldr	r0, [pc, #144]	; (8002ddc <Print_Maze+0xcc>)
 8002d4a:	f7ff feb5 	bl	8002ab8 <Transmit>

void Print_Maze() {

sprintf(tx_buffer, "Floodfill Values: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //floodfill values
 8002d4e:	2d0c      	cmp	r5, #12
 8002d50:	d1e8      	bne.n	8002d24 <Print_Maze+0x14>
		Transmit(tx_buffer);
	}
	sprintf(tx_buffer, "\r\n \r\n");
	Transmit(tx_buffer);
}
sprintf(tx_buffer, "Horizontal Walls: \r\n");
 8002d52:	4926      	ldr	r1, [pc, #152]	; (8002dec <Print_Maze+0xdc>)
Transmit(tx_buffer);
 8002d54:	2400      	movs	r4, #0
		Transmit(tx_buffer);
	}
	sprintf(tx_buffer, "\r\n \r\n");
	Transmit(tx_buffer);
}
sprintf(tx_buffer, "Horizontal Walls: \r\n");
 8002d56:	4821      	ldr	r0, [pc, #132]	; (8002ddc <Print_Maze+0xcc>)
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE - 1; i++) { //horizontal walls
	for (int j = 0; j < X_MAZE_SIZE; j++) {
		sprintf(tx_buffer, "%d ", horiz_walls[j][i]);
 8002d58:	4f25      	ldr	r7, [pc, #148]	; (8002df0 <Print_Maze+0xe0>)
		Transmit(tx_buffer);
	}
	sprintf(tx_buffer, "\r\n \r\n");
	Transmit(tx_buffer);
}
sprintf(tx_buffer, "Horizontal Walls: \r\n");
 8002d5a:	f001 fbb7 	bl	80044cc <strcpy>
Transmit(tx_buffer);
 8002d5e:	481f      	ldr	r0, [pc, #124]	; (8002ddc <Print_Maze+0xcc>)
 8002d60:	f7ff feaa 	bl	8002ab8 <Transmit>
}

void Print_Maze() {

sprintf(tx_buffer, "Floodfill Values: \r\n");
Transmit(tx_buffer);
 8002d64:	2500      	movs	r5, #0
}
sprintf(tx_buffer, "Horizontal Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE - 1; i++) { //horizontal walls
	for (int j = 0; j < X_MAZE_SIZE; j++) {
		sprintf(tx_buffer, "%d ", horiz_walls[j][i]);
 8002d66:	193e      	adds	r6, r7, r4
 8002d68:	f856 2035 	ldr.w	r2, [r6, r5, lsl #3]
	Transmit(tx_buffer);
}
sprintf(tx_buffer, "Horizontal Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE - 1; i++) { //horizontal walls
	for (int j = 0; j < X_MAZE_SIZE; j++) {
 8002d6c:	3501      	adds	r5, #1
		sprintf(tx_buffer, "%d ", horiz_walls[j][i]);
 8002d6e:	491d      	ldr	r1, [pc, #116]	; (8002de4 <Print_Maze+0xd4>)
 8002d70:	481a      	ldr	r0, [pc, #104]	; (8002ddc <Print_Maze+0xcc>)
 8002d72:	f001 fb87 	bl	8004484 <siprintf>
		Transmit(tx_buffer);
 8002d76:	4819      	ldr	r0, [pc, #100]	; (8002ddc <Print_Maze+0xcc>)
 8002d78:	f7ff fe9e 	bl	8002ab8 <Transmit>
	Transmit(tx_buffer);
}
sprintf(tx_buffer, "Horizontal Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE - 1; i++) { //horizontal walls
	for (int j = 0; j < X_MAZE_SIZE; j++) {
 8002d7c:	2d06      	cmp	r5, #6
 8002d7e:	d1f3      	bne.n	8002d68 <Print_Maze+0x58>
		sprintf(tx_buffer, "%d ", horiz_walls[j][i]);
		Transmit(tx_buffer);
	}
	sprintf(tx_buffer, "\r\n \r\n");
 8002d80:	4919      	ldr	r1, [pc, #100]	; (8002de8 <Print_Maze+0xd8>)
 8002d82:	3404      	adds	r4, #4
 8002d84:	4815      	ldr	r0, [pc, #84]	; (8002ddc <Print_Maze+0xcc>)
 8002d86:	f001 fba1 	bl	80044cc <strcpy>
	Transmit(tx_buffer);
 8002d8a:	4814      	ldr	r0, [pc, #80]	; (8002ddc <Print_Maze+0xcc>)
 8002d8c:	f7ff fe94 	bl	8002ab8 <Transmit>
	sprintf(tx_buffer, "\r\n \r\n");
	Transmit(tx_buffer);
}
sprintf(tx_buffer, "Horizontal Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE - 1; i++) { //horizontal walls
 8002d90:	2c08      	cmp	r4, #8
 8002d92:	d1e7      	bne.n	8002d64 <Print_Maze+0x54>
	}
	sprintf(tx_buffer, "\r\n \r\n");
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Vertical Walls: \r\n");
 8002d94:	4917      	ldr	r1, [pc, #92]	; (8002df4 <Print_Maze+0xe4>)
Transmit(tx_buffer);
 8002d96:	2500      	movs	r5, #0
	}
	sprintf(tx_buffer, "\r\n \r\n");
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Vertical Walls: \r\n");
 8002d98:	4810      	ldr	r0, [pc, #64]	; (8002ddc <Print_Maze+0xcc>)
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //vertical walls
	for (int j = 0; j < X_MAZE_SIZE - 1; j++) {
		sprintf(tx_buffer, "%d ", vert_walls[j][i]);
 8002d9a:	4e17      	ldr	r6, [pc, #92]	; (8002df8 <Print_Maze+0xe8>)
	}
	sprintf(tx_buffer, "\r\n \r\n");
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Vertical Walls: \r\n");
 8002d9c:	f001 fb96 	bl	80044cc <strcpy>
Transmit(tx_buffer);
 8002da0:	480e      	ldr	r0, [pc, #56]	; (8002ddc <Print_Maze+0xcc>)
 8002da2:	f7ff fe89 	bl	8002ab8 <Transmit>
	}
	sprintf(tx_buffer, "\r\n \r\n");
	Transmit(tx_buffer);
}
sprintf(tx_buffer, "Horizontal Walls: \r\n");
Transmit(tx_buffer);
 8002da6:	2400      	movs	r4, #0

sprintf(tx_buffer, "Vertical Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //vertical walls
	for (int j = 0; j < X_MAZE_SIZE - 1; j++) {
		sprintf(tx_buffer, "%d ", vert_walls[j][i]);
 8002da8:	1933      	adds	r3, r6, r4
 8002daa:	490e      	ldr	r1, [pc, #56]	; (8002de4 <Print_Maze+0xd4>)
 8002dac:	480b      	ldr	r0, [pc, #44]	; (8002ddc <Print_Maze+0xcc>)
 8002dae:	340c      	adds	r4, #12
 8002db0:	595a      	ldr	r2, [r3, r5]
 8002db2:	f001 fb67 	bl	8004484 <siprintf>
		Transmit(tx_buffer);
 8002db6:	4809      	ldr	r0, [pc, #36]	; (8002ddc <Print_Maze+0xcc>)
 8002db8:	f7ff fe7e 	bl	8002ab8 <Transmit>
}

sprintf(tx_buffer, "Vertical Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //vertical walls
	for (int j = 0; j < X_MAZE_SIZE - 1; j++) {
 8002dbc:	2c3c      	cmp	r4, #60	; 0x3c
 8002dbe:	d1f3      	bne.n	8002da8 <Print_Maze+0x98>
		sprintf(tx_buffer, "%d ", vert_walls[j][i]);
		Transmit(tx_buffer);
	}
	sprintf(tx_buffer, "\r\n \r\n");
 8002dc0:	4909      	ldr	r1, [pc, #36]	; (8002de8 <Print_Maze+0xd8>)
 8002dc2:	3504      	adds	r5, #4
 8002dc4:	4805      	ldr	r0, [pc, #20]	; (8002ddc <Print_Maze+0xcc>)
 8002dc6:	f001 fb81 	bl	80044cc <strcpy>
	Transmit(tx_buffer);
 8002dca:	4804      	ldr	r0, [pc, #16]	; (8002ddc <Print_Maze+0xcc>)
 8002dcc:	f7ff fe74 	bl	8002ab8 <Transmit>
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Vertical Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //vertical walls
 8002dd0:	2d0c      	cmp	r5, #12
 8002dd2:	d1e8      	bne.n	8002da6 <Print_Maze+0x96>
 8002dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	08004f32 	.word	0x08004f32
 8002ddc:	20000634 	.word	0x20000634
 8002de0:	20000524 	.word	0x20000524
 8002de4:	08004f47 	.word	0x08004f47
 8002de8:	08004f4b 	.word	0x08004f4b
 8002dec:	08004f51 	.word	0x08004f51
 8002df0:	20000180 	.word	0x20000180
 8002df4:	08004f66 	.word	0x08004f66
 8002df8:	20000088 	.word	0x20000088

08002dfc <Get_Lowest_Square>:
	Transmit(tx_buffer);
}

}

int Get_Lowest_Square(int x, int y) { //gets lowest square
 8002dfc:	b5f0      	push	{r4, r5, r6, r7, lr}

int values[5] = {127, 127, 127, 127, 127}; //first value is default 127. Then it goes: up, down, left, right
 8002dfe:	4f30      	ldr	r7, [pc, #192]	; (8002ec0 <Get_Lowest_Square+0xc4>)
	Transmit(tx_buffer);
}

}

int Get_Lowest_Square(int x, int y) { //gets lowest square
 8002e00:	b087      	sub	sp, #28
 8002e02:	4604      	mov	r4, r0
 8002e04:	460d      	mov	r5, r1

int values[5] = {127, 127, 127, 127, 127}; //first value is default 127. Then it goes: up, down, left, right
 8002e06:	ae01      	add	r6, sp, #4
int min = 0;

if (y > 0 && horiz_walls[x][y-1] != TRUE) { //if row is greater than zero
 8002e08:	2d00      	cmp	r5, #0

}

int Get_Lowest_Square(int x, int y) { //gets lowest square

int values[5] = {127, 127, 127, 127, 127}; //first value is default 127. Then it goes: up, down, left, right
 8002e0a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002e0c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	a901      	add	r1, sp, #4
 8002e12:	482c      	ldr	r0, [pc, #176]	; (8002ec4 <Get_Lowest_Square+0xc8>)
 8002e14:	6033      	str	r3, [r6, #0]
 8002e16:	ea4f 0344 	mov.w	r3, r4, lsl #1
int min = 0;

if (y > 0 && horiz_walls[x][y-1] != TRUE) { //if row is greater than zero
 8002e1a:	dc0c      	bgt.n	8002e36 <Get_Lowest_Square+0x3a>
	values[1] = maze[x][y-1]; //up square
}

if (y < Y_MAZE_SIZE - 1 && horiz_walls[x][y] != TRUE) {
 8002e1c:	195a      	adds	r2, r3, r5
 8002e1e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8002e22:	2a01      	cmp	r2, #1
 8002e24:	d015      	beq.n	8002e52 <Get_Lowest_Square+0x56>
	values[2] = maze[x][y+1];
 8002e26:	1c68      	adds	r0, r5, #1
 8002e28:	191a      	adds	r2, r3, r4
 8002e2a:	4402      	add	r2, r0
 8002e2c:	4826      	ldr	r0, [pc, #152]	; (8002ec8 <Get_Lowest_Square+0xcc>)
 8002e2e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8002e32:	9203      	str	r2, [sp, #12]
 8002e34:	e00d      	b.n	8002e52 <Get_Lowest_Square+0x56>
int Get_Lowest_Square(int x, int y) { //gets lowest square

int values[5] = {127, 127, 127, 127, 127}; //first value is default 127. Then it goes: up, down, left, right
int min = 0;

if (y > 0 && horiz_walls[x][y-1] != TRUE) { //if row is greater than zero
 8002e36:	1e6a      	subs	r2, r5, #1
 8002e38:	189e      	adds	r6, r3, r2
 8002e3a:	f850 6026 	ldr.w	r6, [r0, r6, lsl #2]
 8002e3e:	2e01      	cmp	r6, #1
 8002e40:	d005      	beq.n	8002e4e <Get_Lowest_Square+0x52>
	values[1] = maze[x][y-1]; //up square
 8002e42:	191e      	adds	r6, r3, r4
 8002e44:	4432      	add	r2, r6
 8002e46:	4e20      	ldr	r6, [pc, #128]	; (8002ec8 <Get_Lowest_Square+0xcc>)
 8002e48:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8002e4c:	9202      	str	r2, [sp, #8]
}

if (y < Y_MAZE_SIZE - 1 && horiz_walls[x][y] != TRUE) {
 8002e4e:	2d01      	cmp	r5, #1
 8002e50:	d0e4      	beq.n	8002e1c <Get_Lowest_Square+0x20>
	values[2] = maze[x][y+1];
}

if (x > 0 && vert_walls[x - 1][y] != TRUE) {
 8002e52:	2c00      	cmp	r4, #0
 8002e54:	481d      	ldr	r0, [pc, #116]	; (8002ecc <Get_Lowest_Square+0xd0>)
 8002e56:	dc0e      	bgt.n	8002e76 <Get_Lowest_Square+0x7a>
	values[3] = maze[x - 1][y];
}

if (x < X_MAZE_SIZE - 1 && vert_walls[x][y] != TRUE) {
 8002e58:	4423      	add	r3, r4
 8002e5a:	442b      	add	r3, r5
 8002e5c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d016      	beq.n	8002e92 <Get_Lowest_Square+0x96>
	values[4] = maze[x+1][y];
 8002e64:	3401      	adds	r4, #1
 8002e66:	4b18      	ldr	r3, [pc, #96]	; (8002ec8 <Get_Lowest_Square+0xcc>)
 8002e68:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8002e6c:	442c      	add	r4, r5
 8002e6e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8002e72:	9305      	str	r3, [sp, #20]
 8002e74:	e00d      	b.n	8002e92 <Get_Lowest_Square+0x96>

if (y < Y_MAZE_SIZE - 1 && horiz_walls[x][y] != TRUE) {
	values[2] = maze[x][y+1];
}

if (x > 0 && vert_walls[x - 1][y] != TRUE) {
 8002e76:	1e62      	subs	r2, r4, #1
 8002e78:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002e7c:	442a      	add	r2, r5
 8002e7e:	f850 6022 	ldr.w	r6, [r0, r2, lsl #2]
 8002e82:	2e01      	cmp	r6, #1
	values[3] = maze[x - 1][y];
 8002e84:	bf1e      	ittt	ne
 8002e86:	4e10      	ldrne	r6, [pc, #64]	; (8002ec8 <Get_Lowest_Square+0xcc>)
 8002e88:	f856 2022 	ldrne.w	r2, [r6, r2, lsl #2]
 8002e8c:	9204      	strne	r2, [sp, #16]
}

if (x < X_MAZE_SIZE - 1 && vert_walls[x][y] != TRUE) {
 8002e8e:	2c04      	cmp	r4, #4
 8002e90:	dde2      	ble.n	8002e58 <Get_Lowest_Square+0x5c>
	values[4] = maze[x+1][y];
}

for (int i = 1; i < 5; i++) {
 8002e92:	2201      	movs	r2, #1
}

int Get_Lowest_Square(int x, int y) { //gets lowest square

int values[5] = {127, 127, 127, 127, 127}; //first value is default 127. Then it goes: up, down, left, right
int min = 0;
 8002e94:	2300      	movs	r3, #0
if (x < X_MAZE_SIZE - 1 && vert_walls[x][y] != TRUE) {
	values[4] = maze[x+1][y];
}

for (int i = 1; i < 5; i++) {
if(values[i] < values[min]) {
 8002e96:	a806      	add	r0, sp, #24
 8002e98:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
 8002e9c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002ea0:	f850 0c14 	ldr.w	r0, [r0, #-20]
 8002ea4:	4284      	cmp	r4, r0
 8002ea6:	bfb8      	it	lt
 8002ea8:	4613      	movlt	r3, r2

if (x < X_MAZE_SIZE - 1 && vert_walls[x][y] != TRUE) {
	values[4] = maze[x+1][y];
}

for (int i = 1; i < 5; i++) {
 8002eaa:	3201      	adds	r2, #1
 8002eac:	2a05      	cmp	r2, #5
 8002eae:	d1f2      	bne.n	8002e96 <Get_Lowest_Square+0x9a>
if(values[i] < values[min]) {
	min = i;
}
}

return values[min];
 8002eb0:	aa06      	add	r2, sp, #24
 8002eb2:	eb02 0383 	add.w	r3, r2, r3, lsl #2

}
 8002eb6:	f853 0c14 	ldr.w	r0, [r3, #-20]
 8002eba:	b007      	add	sp, #28
 8002ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	08004d0c 	.word	0x08004d0c
 8002ec4:	20000180 	.word	0x20000180
 8002ec8:	20000524 	.word	0x20000524
 8002ecc:	20000088 	.word	0x20000088

08002ed0 <Floodfill>:

void Floodfill() {
 8002ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	f5ad 7d49 	sub.w	sp, sp, #804	; 0x324
int pathdist = 1;


for (int i = 0; i < X_MAZE_SIZE; i++) { //initialize all values to 127
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
		maze[i][j] = 127;
 8002eda:	4822      	ldr	r0, [pc, #136]	; (8002f64 <Floodfill+0x94>)
 8002edc:	227f      	movs	r2, #127	; 0x7f
 8002ede:	1819      	adds	r1, r3, r0
 8002ee0:	501a      	str	r2, [r3, r0]
 8002ee2:	330c      	adds	r3, #12
 8002ee4:	4f1f      	ldr	r7, [pc, #124]	; (8002f64 <Floodfill+0x94>)
 8002ee6:	604a      	str	r2, [r1, #4]
int y = 0;
int buffer_counter = 0;
int pathdist = 1;


for (int i = 0; i < X_MAZE_SIZE; i++) { //initialize all values to 127
 8002ee8:	2b48      	cmp	r3, #72	; 0x48
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
		maze[i][j] = 127;
 8002eea:	608a      	str	r2, [r1, #8]
int y = 0;
int buffer_counter = 0;
int pathdist = 1;


for (int i = 0; i < X_MAZE_SIZE; i++) { //initialize all values to 127
 8002eec:	d1f7      	bne.n	8002ede <Floodfill+0xe>
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
		maze[i][j] = 127;
	}
}

maze[X_FINAL][Y_FINAL] = 0;
 8002eee:	2300      	movs	r3, #0
int x_buffer[100]; //buffer to store coordinates
int y_buffer[100];
int x = 0; //x values to be read
int y = 0;
int buffer_counter = 0;
int pathdist = 1;
 8002ef0:	f04f 0801 	mov.w	r8, #1
 8002ef4:	f04f 0a0c 	mov.w	sl, #12
		if (maze[i][j] != 127) {
			continue; //if cell has already been updated skip it
		}
		if (Get_Lowest_Square(i, j) != 127) {
			x_buffer[buffer_counter] = i;
			y_buffer[buffer_counter] = j;
 8002ef8:	f50d 79c8 	add.w	r9, sp, #400	; 0x190
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
		maze[i][j] = 127;
	}
}

maze[X_FINAL][Y_FINAL] = 0;
 8002efc:	63fb      	str	r3, [r7, #60]	; 0x3c

while(1) {

buffer_counter = 0;

for (int i = 0; i < X_MAZE_SIZE; i++) { //initialize all values to 127
 8002efe:	2400      	movs	r4, #0
horiz_walls[13][1] = 1;
*/

while(1) {

buffer_counter = 0;
 8002f00:	4626      	mov	r6, r4
 8002f02:	fb0a 7b04 	mla	fp, sl, r4, r7
int x_buffer[100]; //buffer to store coordinates
int y_buffer[100];
int x = 0; //x values to be read
int y = 0;
int buffer_counter = 0;
int pathdist = 1;
 8002f06:	2500      	movs	r5, #0

buffer_counter = 0;

for (int i = 0; i < X_MAZE_SIZE; i++) { //initialize all values to 127
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
		if (maze[i][j] != 127) {
 8002f08:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 8002f0c:	2b7f      	cmp	r3, #127	; 0x7f
 8002f0e:	d10a      	bne.n	8002f26 <Floodfill+0x56>
			continue; //if cell has already been updated skip it
		}
		if (Get_Lowest_Square(i, j) != 127) {
 8002f10:	4629      	mov	r1, r5
 8002f12:	4620      	mov	r0, r4
 8002f14:	f7ff ff72 	bl	8002dfc <Get_Lowest_Square>
 8002f18:	287f      	cmp	r0, #127	; 0x7f
			x_buffer[buffer_counter] = i;
 8002f1a:	bf1e      	ittt	ne
 8002f1c:	f84d 4026 	strne.w	r4, [sp, r6, lsl #2]
			y_buffer[buffer_counter] = j;
 8002f20:	f849 5026 	strne.w	r5, [r9, r6, lsl #2]
			buffer_counter++;
 8002f24:	3601      	addne	r6, #1
while(1) {

buffer_counter = 0;

for (int i = 0; i < X_MAZE_SIZE; i++) { //initialize all values to 127
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
 8002f26:	3501      	adds	r5, #1
 8002f28:	2d03      	cmp	r5, #3
 8002f2a:	d1ed      	bne.n	8002f08 <Floodfill+0x38>

while(1) {

buffer_counter = 0;

for (int i = 0; i < X_MAZE_SIZE; i++) { //initialize all values to 127
 8002f2c:	3401      	adds	r4, #1
 8002f2e:	2c06      	cmp	r4, #6
 8002f30:	d1e7      	bne.n	8002f02 <Floodfill+0x32>
 8002f32:	2300      	movs	r3, #0
			buffer_counter++;
		}
	}
}

for (int i = 0; i < buffer_counter; i++) {
 8002f34:	429e      	cmp	r6, r3
 8002f36:	d00a      	beq.n	8002f4e <Floodfill+0x7e>
x = x_buffer[i];
y = y_buffer[i];
maze[x][y] = pathdist;
 8002f38:	f85d 2023 	ldr.w	r2, [sp, r3, lsl #2]
 8002f3c:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
			buffer_counter++;
		}
	}
}

for (int i = 0; i < buffer_counter; i++) {
 8002f40:	3301      	adds	r3, #1
x = x_buffer[i];
y = y_buffer[i];
maze[x][y] = pathdist;
 8002f42:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002f46:	440a      	add	r2, r1
 8002f48:	f847 8022 	str.w	r8, [r7, r2, lsl #2]
 8002f4c:	e7f2      	b.n	8002f34 <Floodfill+0x64>
}

if (maze[X_START][Y_START] != 127) {
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2b7f      	cmp	r3, #127	; 0x7f
 8002f52:	d102      	bne.n	8002f5a <Floodfill+0x8a>

	break;
}
pathdist++;
 8002f54:	f108 0801 	add.w	r8, r8, #1

}
 8002f58:	e7d1      	b.n	8002efe <Floodfill+0x2e>
}
 8002f5a:	f50d 7d49 	add.w	sp, sp, #804	; 0x324
 8002f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f62:	bf00      	nop
 8002f64:	20000524 	.word	0x20000524

08002f68 <Calc_Optimal>:
		}
		break;
	}
}

void Calc_Optimal() {
 8002f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
int counter = 0;

int x = X_START;
int y = Y_START;

int val = maze[x][y];
 8002f6c:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8003130 <Calc_Optimal+0x1c8>
		}
		break;
	}
}

void Calc_Optimal() {
 8002f70:	b089      	sub	sp, #36	; 0x24
int x = X_START;
int y = Y_START;

int val = maze[x][y];
int next_values[4] = {-1, -1, -1, -1};
int index = 0;
 8002f72:	2500      	movs	r5, #0

while(maze[x][y] != 0) {
 8002f74:	4f6b      	ldr	r7, [pc, #428]	; (8003124 <Calc_Optimal+0x1bc>)
int counter = 0;

int x = X_START;
int y = Y_START;

int val = maze[x][y];
 8002f76:	f8d9 3008 	ldr.w	r3, [r9, #8]
int next_values[4] = {-1, -1, -1, -1};
 8002f7a:	f10d 0a10 	add.w	sl, sp, #16

int cur_dir = START_DIR;
int counter = 0;

int x = X_START;
int y = Y_START;
 8002f7e:	2602      	movs	r6, #2
const int E[2] = {1, 0};

int cur_dir = START_DIR;
int counter = 0;

int x = X_START;
 8002f80:	462c      	mov	r4, r5
int y = Y_START;

int val = maze[x][y];
 8002f82:	9303      	str	r3, [sp, #12]
const int N[2] = {0, -1};
const int S[2] = {0, 1};
const int W[2] = {-1, 0};
const int E[2] = {1, 0};

int cur_dir = START_DIR;
 8002f84:	46a8      	mov	r8, r5

int x = X_START;
int y = Y_START;

int val = maze[x][y];
int next_values[4] = {-1, -1, -1, -1};
 8002f86:	4b68      	ldr	r3, [pc, #416]	; (8003128 <Calc_Optimal+0x1c0>)
 8002f88:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 8003140 <Calc_Optimal+0x1d8>
 8002f8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f8e:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
 8002f92:	4b64      	ldr	r3, [pc, #400]	; (8003124 <Calc_Optimal+0x1bc>)
 8002f94:	1af9      	subs	r1, r7, r3
int index = 0;

while(maze[x][y] != 0) {
 8002f96:	0063      	lsls	r3, r4, #1
 8002f98:	eb03 0e04 	add.w	lr, r3, r4
 8002f9c:	eb0e 0206 	add.w	r2, lr, r6
 8002fa0:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8002fa4:	2a00      	cmp	r2, #0
 8002fa6:	f000 8089 	beq.w	80030bc <Calc_Optimal+0x154>

next_values[0] = 127;
 8002faa:	207f      	movs	r0, #127	; 0x7f
next_values[2] = 127;
next_values[3] = 127;

val = maze[x][y];

if (y > 0 && horiz_walls[x][y-1] != TRUE) { //if row is greater than zero
 8002fac:	2e00      	cmp	r6, #0
next_values[0] = 127;
next_values[1] = 127;
next_values[2] = 127;
next_values[3] = 127;

val = maze[x][y];
 8002fae:	9203      	str	r2, [sp, #12]
int next_values[4] = {-1, -1, -1, -1};
int index = 0;

while(maze[x][y] != 0) {

next_values[0] = 127;
 8002fb0:	9004      	str	r0, [sp, #16]
next_values[1] = 127;
 8002fb2:	9005      	str	r0, [sp, #20]
next_values[2] = 127;
 8002fb4:	9006      	str	r0, [sp, #24]
next_values[3] = 127;
 8002fb6:	9007      	str	r0, [sp, #28]

val = maze[x][y];

if (y > 0 && horiz_walls[x][y-1] != TRUE) { //if row is greater than zero
 8002fb8:	dc0d      	bgt.n	8002fd6 <Calc_Optimal+0x6e>
	next_values[0] = maze[x][y-1]; //up square
}

if (y < Y_MAZE_SIZE - 1 && horiz_walls[x][y] != TRUE) {
 8002fba:	0063      	lsls	r3, r4, #1
 8002fbc:	485b      	ldr	r0, [pc, #364]	; (800312c <Calc_Optimal+0x1c4>)
 8002fbe:	1999      	adds	r1, r3, r6
 8002fc0:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8002fc4:	2901      	cmp	r1, #1
 8002fc6:	d014      	beq.n	8002ff2 <Calc_Optimal+0x8a>
	next_values[1] = maze[x][y+1]; //down square
 8002fc8:	4423      	add	r3, r4
 8002fca:	1c71      	adds	r1, r6, #1
 8002fcc:	440b      	add	r3, r1
 8002fce:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8002fd2:	9305      	str	r3, [sp, #20]
 8002fd4:	e00d      	b.n	8002ff2 <Calc_Optimal+0x8a>
next_values[2] = 127;
next_values[3] = 127;

val = maze[x][y];

if (y > 0 && horiz_walls[x][y-1] != TRUE) { //if row is greater than zero
 8002fd6:	1e71      	subs	r1, r6, #1
 8002fd8:	4854      	ldr	r0, [pc, #336]	; (800312c <Calc_Optimal+0x1c4>)
 8002fda:	440b      	add	r3, r1
 8002fdc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002fe0:	2b01      	cmp	r3, #1
	next_values[0] = maze[x][y-1]; //up square
 8002fe2:	bf1f      	itttt	ne
 8002fe4:	4b52      	ldrne	r3, [pc, #328]	; (8003130 <Calc_Optimal+0x1c8>)
 8002fe6:	4471      	addne	r1, lr
 8002fe8:	f853 3021 	ldrne.w	r3, [r3, r1, lsl #2]
 8002fec:	9304      	strne	r3, [sp, #16]
}

if (y < Y_MAZE_SIZE - 1 && horiz_walls[x][y] != TRUE) {
 8002fee:	2e01      	cmp	r6, #1
 8002ff0:	d0e3      	beq.n	8002fba <Calc_Optimal+0x52>
	next_values[1] = maze[x][y+1]; //down square
}

if (x > 0 && vert_walls[x - 1][y] != TRUE) {
 8002ff2:	2c00      	cmp	r4, #0
 8002ff4:	dc0e      	bgt.n	8003014 <Calc_Optimal+0xac>
	next_values[2] = maze[x - 1][y]; //left square
}

if (x < X_MAZE_SIZE - 1 && vert_walls[x][y] != TRUE) {
 8002ff6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8002ffa:	4433      	add	r3, r6
 8002ffc:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d014      	beq.n	800302e <Calc_Optimal+0xc6>
	next_values[3] = maze[x+1][y]; //right square
 8003004:	1c63      	adds	r3, r4, #1
 8003006:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800300a:	4433      	add	r3, r6
 800300c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8003010:	9307      	str	r3, [sp, #28]
 8003012:	e00c      	b.n	800302e <Calc_Optimal+0xc6>

if (y < Y_MAZE_SIZE - 1 && horiz_walls[x][y] != TRUE) {
	next_values[1] = maze[x][y+1]; //down square
}

if (x > 0 && vert_walls[x - 1][y] != TRUE) {
 8003014:	1e63      	subs	r3, r4, #1
 8003016:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800301a:	4433      	add	r3, r6
 800301c:	f85b 1023 	ldr.w	r1, [fp, r3, lsl #2]
 8003020:	2901      	cmp	r1, #1
	next_values[2] = maze[x - 1][y]; //left square
 8003022:	bf1c      	itt	ne
 8003024:	f859 3023 	ldrne.w	r3, [r9, r3, lsl #2]
 8003028:	9306      	strne	r3, [sp, #24]
}

if (x < X_MAZE_SIZE - 1 && vert_walls[x][y] != TRUE) {
 800302a:	2c04      	cmp	r4, #4
 800302c:	dde3      	ble.n	8002ff6 <Calc_Optimal+0x8e>
	next_values[3] = maze[x+1][y]; //right square
}

for (int i = 0; i < 4; i++) {
 800302e:	2300      	movs	r3, #0
	if (next_values[i] == val - 1) {
 8003030:	1e51      	subs	r1, r2, #1
 8003032:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8003036:	4288      	cmp	r0, r1
 8003038:	bf08      	it	eq
 800303a:	461d      	moveq	r5, r3

if (x < X_MAZE_SIZE - 1 && vert_walls[x][y] != TRUE) {
	next_values[3] = maze[x+1][y]; //right square
}

for (int i = 0; i < 4; i++) {
 800303c:	3301      	adds	r3, #1
 800303e:	2b04      	cmp	r3, #4
 8003040:	d1f7      	bne.n	8003032 <Calc_Optimal+0xca>
	if (next_values[i] == val - 1) {
		index = i;
	}
}

switch (cur_dir) {
 8003042:	f1b8 0f02 	cmp.w	r8, #2
 8003046:	d01d      	beq.n	8003084 <Calc_Optimal+0x11c>
 8003048:	f1b8 0f03 	cmp.w	r8, #3
 800304c:	d027      	beq.n	800309e <Calc_Optimal+0x136>
 800304e:	f1b8 0f01 	cmp.w	r8, #1
 8003052:	d00b      	beq.n	800306c <Calc_Optimal+0x104>

case NORTH:
	switch(index) {
 8003054:	2d02      	cmp	r5, #2
 8003056:	d005      	beq.n	8003064 <Calc_Optimal+0xfc>
 8003058:	2d03      	cmp	r5, #3
 800305a:	d005      	beq.n	8003068 <Calc_Optimal+0x100>
 800305c:	2d00      	cmp	r5, #0
 800305e:	d143      	bne.n	80030e8 <Calc_Optimal+0x180>
	case(0):
			optimal_path[counter] = 'f';
 8003060:	2366      	movs	r3, #102	; 0x66
 8003062:	e023      	b.n	80030ac <Calc_Optimal+0x144>
	break;
	case(1):
			//NO
	break;
	case(2):
			optimal_path[counter] = 'l';
 8003064:	236c      	movs	r3, #108	; 0x6c
 8003066:	e018      	b.n	800309a <Calc_Optimal+0x132>
			cur_dir = WEST;
	break;
	case(3):
			optimal_path[counter] = 'r';
 8003068:	2372      	movs	r3, #114	; 0x72
 800306a:	e025      	b.n	80030b8 <Calc_Optimal+0x150>
	break;
	}
break;

case SOUTH:
	switch(index) {
 800306c:	2d02      	cmp	r5, #2
 800306e:	d005      	beq.n	800307c <Calc_Optimal+0x114>
 8003070:	2d03      	cmp	r5, #3
 8003072:	d005      	beq.n	8003080 <Calc_Optimal+0x118>
 8003074:	2d01      	cmp	r5, #1
 8003076:	d148      	bne.n	800310a <Calc_Optimal+0x1a2>
	case(0):
			//NO
	break;
	case(1):
			optimal_path[counter] = 'f';
 8003078:	2366      	movs	r3, #102	; 0x66
 800307a:	e01a      	b.n	80030b2 <Calc_Optimal+0x14a>
	break;
	case(2):
			optimal_path[counter] = 'r';
 800307c:	2372      	movs	r3, #114	; 0x72
 800307e:	e00c      	b.n	800309a <Calc_Optimal+0x132>
			cur_dir = WEST;
	break;
	case(3):
			optimal_path[counter] = 'l';
 8003080:	236c      	movs	r3, #108	; 0x6c
 8003082:	e019      	b.n	80030b8 <Calc_Optimal+0x150>
	break;
	}
break;

case WEST:
	switch(index) {
 8003084:	2d01      	cmp	r5, #1
 8003086:	d005      	beq.n	8003094 <Calc_Optimal+0x12c>
 8003088:	2d02      	cmp	r5, #2
 800308a:	d005      	beq.n	8003098 <Calc_Optimal+0x130>
 800308c:	2d00      	cmp	r5, #0
 800308e:	d140      	bne.n	8003112 <Calc_Optimal+0x1aa>
	case(0):
			optimal_path[counter] = 'r';
 8003090:	2372      	movs	r3, #114	; 0x72
 8003092:	e00b      	b.n	80030ac <Calc_Optimal+0x144>
			cur_dir = NORTH;
	break;
	case(1):
			optimal_path[counter] = 'l';
 8003094:	236c      	movs	r3, #108	; 0x6c
 8003096:	e00c      	b.n	80030b2 <Calc_Optimal+0x14a>
			cur_dir = SOUTH;
	break;
	case(2):
			optimal_path[counter] = 'f';
 8003098:	2366      	movs	r3, #102	; 0x66
 800309a:	703b      	strb	r3, [r7, #0]
	break;
 800309c:	e039      	b.n	8003112 <Calc_Optimal+0x1aa>
	break;
	}
break;

case EAST:
	switch(index) {
 800309e:	2d01      	cmp	r5, #1
 80030a0:	d006      	beq.n	80030b0 <Calc_Optimal+0x148>
 80030a2:	2d03      	cmp	r5, #3
 80030a4:	d007      	beq.n	80030b6 <Calc_Optimal+0x14e>
 80030a6:	2d00      	cmp	r5, #0
 80030a8:	d137      	bne.n	800311a <Calc_Optimal+0x1b2>
	case(0):
			optimal_path[counter] = 'l';
 80030aa:	236c      	movs	r3, #108	; 0x6c
 80030ac:	703b      	strb	r3, [r7, #0]
			cur_dir = NORTH;
	break;
 80030ae:	e01b      	b.n	80030e8 <Calc_Optimal+0x180>
	case(1):
			optimal_path[counter] = 'r';
 80030b0:	2372      	movs	r3, #114	; 0x72
 80030b2:	703b      	strb	r3, [r7, #0]
			cur_dir = SOUTH;
	break;
 80030b4:	e029      	b.n	800310a <Calc_Optimal+0x1a2>
	case(2):
			//NO
	break;
	case(3):
			optimal_path[counter] = 'f';
 80030b6:	2366      	movs	r3, #102	; 0x66
 80030b8:	703b      	strb	r3, [r7, #0]
	break;
 80030ba:	e02e      	b.n	800311a <Calc_Optimal+0x1b2>
Transmit(tx_buffer);
//while loop

}

optimal_path[counter] = 's';
 80030bc:	2373      	movs	r3, #115	; 0x73
 80030be:	4a19      	ldr	r2, [pc, #100]	; (8003124 <Calc_Optimal+0x1bc>)
//sprintf(tx_buffer, optimal_path);
sprintf(tx_buffer, "FINAL:   X VALUE: %d    Y VALUE: %d    DIRECTION: %d   VALUE: %d \r\n", x, y, cur_dir, val);
 80030c0:	481c      	ldr	r0, [pc, #112]	; (8003134 <Calc_Optimal+0x1cc>)
Transmit(tx_buffer);
//while loop

}

optimal_path[counter] = 's';
 80030c2:	5453      	strb	r3, [r2, r1]
//sprintf(tx_buffer, optimal_path);
sprintf(tx_buffer, "FINAL:   X VALUE: %d    Y VALUE: %d    DIRECTION: %d   VALUE: %d \r\n", x, y, cur_dir, val);
 80030c4:	4622      	mov	r2, r4
 80030c6:	9b03      	ldr	r3, [sp, #12]
 80030c8:	491b      	ldr	r1, [pc, #108]	; (8003138 <Calc_Optimal+0x1d0>)
 80030ca:	9301      	str	r3, [sp, #4]
 80030cc:	4633      	mov	r3, r6
 80030ce:	f8cd 8000 	str.w	r8, [sp]
 80030d2:	f001 f9d7 	bl	8004484 <siprintf>
Transmit(tx_buffer);
 80030d6:	4817      	ldr	r0, [pc, #92]	; (8003134 <Calc_Optimal+0x1cc>)
 80030d8:	f7ff fcee 	bl	8002ab8 <Transmit>
Transmit(optimal_path);
 80030dc:	4811      	ldr	r0, [pc, #68]	; (8003124 <Calc_Optimal+0x1bc>)
}
 80030de:	b009      	add	sp, #36	; 0x24
 80030e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

optimal_path[counter] = 's';
//sprintf(tx_buffer, optimal_path);
sprintf(tx_buffer, "FINAL:   X VALUE: %d    Y VALUE: %d    DIRECTION: %d   VALUE: %d \r\n", x, y, cur_dir, val);
Transmit(tx_buffer);
Transmit(optimal_path);
 80030e4:	f7ff bce8 	b.w	8002ab8 <Transmit>
}

switch (cur_dir) {
case NORTH:
	x = x + N[0];
	y = y + N[1];
 80030e8:	3e01      	subs	r6, #1
break;
 80030ea:	f04f 0800 	mov.w	r8, #0
	x = x + E[0];
	y = y + E[1];
break;
}
counter++;
sprintf(tx_buffer, "X VALUE: %d    Y VALUE: %d    DIRECTION: %d   VALUE: %d \r\n", x, y, cur_dir, val);
 80030ee:	9201      	str	r2, [sp, #4]
 80030f0:	4633      	mov	r3, r6
 80030f2:	4622      	mov	r2, r4
 80030f4:	4911      	ldr	r1, [pc, #68]	; (800313c <Calc_Optimal+0x1d4>)
 80030f6:	f8cd 8000 	str.w	r8, [sp]
 80030fa:	3701      	adds	r7, #1
 80030fc:	480d      	ldr	r0, [pc, #52]	; (8003134 <Calc_Optimal+0x1cc>)
 80030fe:	f001 f9c1 	bl	8004484 <siprintf>
Transmit(tx_buffer);
 8003102:	480c      	ldr	r0, [pc, #48]	; (8003134 <Calc_Optimal+0x1cc>)
 8003104:	f7ff fcd8 	bl	8002ab8 <Transmit>
 8003108:	e743      	b.n	8002f92 <Calc_Optimal+0x2a>
	x = x + N[0];
	y = y + N[1];
break;
case SOUTH:
	x = x + S[0];
	y = y + S[1];
 800310a:	3601      	adds	r6, #1
break;
 800310c:	f04f 0801 	mov.w	r8, #1
 8003110:	e7ed      	b.n	80030ee <Calc_Optimal+0x186>
case WEST:
	x = x + W[0];
 8003112:	3c01      	subs	r4, #1
	y = y + W[1];
break;
 8003114:	f04f 0802 	mov.w	r8, #2
 8003118:	e7e9      	b.n	80030ee <Calc_Optimal+0x186>
case EAST:
	x = x + E[0];
 800311a:	3401      	adds	r4, #1
	y = y + E[1];
break;
 800311c:	f04f 0803 	mov.w	r8, #3
 8003120:	e7e5      	b.n	80030ee <Calc_Optimal+0x186>
 8003122:	bf00      	nop
 8003124:	20000910 	.word	0x20000910
 8003128:	08004d20 	.word	0x08004d20
 800312c:	20000180 	.word	0x20000180
 8003130:	20000524 	.word	0x20000524
 8003134:	20000634 	.word	0x20000634
 8003138:	08004f79 	.word	0x08004f79
 800313c:	08004f82 	.word	0x08004f82
 8003140:	20000088 	.word	0x20000088

08003144 <Fast_Straights>:
sprintf(tx_buffer, "FINAL:   X VALUE: %d    Y VALUE: %d    DIRECTION: %d   VALUE: %d \r\n", x, y, cur_dir, val);
Transmit(tx_buffer);
Transmit(optimal_path);
}

void Fast_Straights() {
 8003144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

char command;
int counter = 0;
int new_count = 0;
command = optimal_path[counter];
int fwd_count = 0;
 8003148:	2300      	movs	r3, #0
void Fast_Straights() {

char command;
int counter = 0;
int new_count = 0;
command = optimal_path[counter];
 800314a:	4f2a      	ldr	r7, [pc, #168]	; (80031f4 <Fast_Straights+0xb0>)
int fwd_count = 0;
char cmd_buff = 'f';
 800314c:	2466      	movs	r4, #102	; 0x66
 800314e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8003200 <Fast_Straights+0xbc>
void Fast_Straights() {

char command;
int counter = 0;
int new_count = 0;
command = optimal_path[counter];
 8003152:	f817 6b01 	ldrb.w	r6, [r7], #1

void Fast_Straights() {

char command;
int counter = 0;
int new_count = 0;
 8003156:	461d      	mov	r5, r3
command = optimal_path[counter];
int fwd_count = 0;
char cmd_buff = 'f';

while (command != 's') {
 8003158:	2e73      	cmp	r6, #115	; 0x73
 800315a:	d03f      	beq.n	80031dc <Fast_Straights+0x98>
	if (command == 'f') {
 800315c:	2e66      	cmp	r6, #102	; 0x66
 800315e:	d101      	bne.n	8003164 <Fast_Straights+0x20>
		fwd_count++;
 8003160:	3301      	adds	r3, #1
 8003162:	e038      	b.n	80031d6 <Fast_Straights+0x92>
	}
	else {
	if (fwd_count > 0) {
 8003164:	b39b      	cbz	r3, 80031ce <Fast_Straights+0x8a>
		switch(fwd_count) {
 8003166:	3b01      	subs	r3, #1
 8003168:	2b0e      	cmp	r3, #14
 800316a:	d826      	bhi.n	80031ba <Fast_Straights+0x76>
 800316c:	e8df f003 	tbb	[pc, r3]
 8003170:	0e0c0a08 	.word	0x0e0c0a08
 8003174:	16141210 	.word	0x16141210
 8003178:	1e1c1a18 	.word	0x1e1c1a18
 800317c:	2220      	.short	0x2220
 800317e:	24          	.byte	0x24
 800317f:	00          	.byte	0x00
			case 1: cmd_buff = FWD1; break;
 8003180:	2462      	movs	r4, #98	; 0x62
 8003182:	e01a      	b.n	80031ba <Fast_Straights+0x76>
			case 2:	cmd_buff = FWD2; break;
 8003184:	2463      	movs	r4, #99	; 0x63
 8003186:	e018      	b.n	80031ba <Fast_Straights+0x76>
			case 3: cmd_buff = FWD3; break;
 8003188:	2464      	movs	r4, #100	; 0x64
 800318a:	e016      	b.n	80031ba <Fast_Straights+0x76>
			case 4: cmd_buff = FWD4; break;
 800318c:	2465      	movs	r4, #101	; 0x65
 800318e:	e014      	b.n	80031ba <Fast_Straights+0x76>
			case 5: cmd_buff = FWD5; break;
 8003190:	2466      	movs	r4, #102	; 0x66
 8003192:	e012      	b.n	80031ba <Fast_Straights+0x76>
			case 6:	cmd_buff = FWD6; break;
 8003194:	2467      	movs	r4, #103	; 0x67
 8003196:	e010      	b.n	80031ba <Fast_Straights+0x76>
			case 7:	cmd_buff = FWD7; break;
 8003198:	2468      	movs	r4, #104	; 0x68
 800319a:	e00e      	b.n	80031ba <Fast_Straights+0x76>
			case 8: cmd_buff = FWD8; break;
 800319c:	2469      	movs	r4, #105	; 0x69
 800319e:	e00c      	b.n	80031ba <Fast_Straights+0x76>
			case 9:	cmd_buff = FWD9; break;
 80031a0:	246a      	movs	r4, #106	; 0x6a
 80031a2:	e00a      	b.n	80031ba <Fast_Straights+0x76>
			case 10: cmd_buff = FWD10; break;
 80031a4:	246b      	movs	r4, #107	; 0x6b
 80031a6:	e008      	b.n	80031ba <Fast_Straights+0x76>
			case 11: cmd_buff = FWD11; break;
 80031a8:	246d      	movs	r4, #109	; 0x6d
 80031aa:	e006      	b.n	80031ba <Fast_Straights+0x76>
			case 12: cmd_buff = FWD12; break;
 80031ac:	246e      	movs	r4, #110	; 0x6e
 80031ae:	e004      	b.n	80031ba <Fast_Straights+0x76>
			case 13: cmd_buff = FWD13; break;
 80031b0:	246f      	movs	r4, #111	; 0x6f
 80031b2:	e002      	b.n	80031ba <Fast_Straights+0x76>
			case 14: cmd_buff = FWD14; break;
 80031b4:	2470      	movs	r4, #112	; 0x70
 80031b6:	e000      	b.n	80031ba <Fast_Straights+0x76>
			case 15: cmd_buff = FWD15; break;
 80031b8:	2471      	movs	r4, #113	; 0x71
			}
			new_path[new_count] = cmd_buff;
			new_count++;
			sprintf(tx_buffer, "stupid \r\n");
 80031ba:	490f      	ldr	r1, [pc, #60]	; (80031f8 <Fast_Straights+0xb4>)
 80031bc:	480f      	ldr	r0, [pc, #60]	; (80031fc <Fast_Straights+0xb8>)
			case 12: cmd_buff = FWD12; break;
			case 13: cmd_buff = FWD13; break;
			case 14: cmd_buff = FWD14; break;
			case 15: cmd_buff = FWD15; break;
			}
			new_path[new_count] = cmd_buff;
 80031be:	f808 4005 	strb.w	r4, [r8, r5]
			new_count++;
			sprintf(tx_buffer, "stupid \r\n");
 80031c2:	f001 f983 	bl	80044cc <strcpy>
			Transmit(tx_buffer);
 80031c6:	480d      	ldr	r0, [pc, #52]	; (80031fc <Fast_Straights+0xb8>)
			case 13: cmd_buff = FWD13; break;
			case 14: cmd_buff = FWD14; break;
			case 15: cmd_buff = FWD15; break;
			}
			new_path[new_count] = cmd_buff;
			new_count++;
 80031c8:	3501      	adds	r5, #1
			sprintf(tx_buffer, "stupid \r\n");
			Transmit(tx_buffer);
 80031ca:	f7ff fc75 	bl	8002ab8 <Transmit>
		}
		new_path[new_count] = command;
 80031ce:	f808 6005 	strb.w	r6, [r8, r5]
		new_count++;
		fwd_count = 0;
 80031d2:	2300      	movs	r3, #0
			new_count++;
			sprintf(tx_buffer, "stupid \r\n");
			Transmit(tx_buffer);
		}
		new_path[new_count] = command;
		new_count++;
 80031d4:	3501      	adds	r5, #1
		fwd_count = 0;
	}
counter++;
command = optimal_path[counter];
 80031d6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80031da:	e7bd      	b.n	8003158 <Fast_Straights+0x14>
}
Transmit(new_path);
 80031dc:	4808      	ldr	r0, [pc, #32]	; (8003200 <Fast_Straights+0xbc>)
 80031de:	f7ff fc6b 	bl	8002ab8 <Transmit>
sprintf(tx_buffer, "stupid \r\n");
 80031e2:	4905      	ldr	r1, [pc, #20]	; (80031f8 <Fast_Straights+0xb4>)
 80031e4:	4805      	ldr	r0, [pc, #20]	; (80031fc <Fast_Straights+0xb8>)
 80031e6:	f001 f971 	bl	80044cc <strcpy>
Transmit(tx_buffer);
 80031ea:	4804      	ldr	r0, [pc, #16]	; (80031fc <Fast_Straights+0xb8>)
}
 80031ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
counter++;
command = optimal_path[counter];
}
Transmit(new_path);
sprintf(tx_buffer, "stupid \r\n");
Transmit(tx_buffer);
 80031f0:	f7ff bc62 	b.w	8002ab8 <Transmit>
 80031f4:	20000910 	.word	0x20000910
 80031f8:	08004fbd 	.word	0x08004fbd
 80031fc:	20000634 	.word	0x20000634
 8003200:	200007b4 	.word	0x200007b4

08003204 <Get_Next_Dumb>:

int Get_Next_Dumb() {

	int next = 0;

	switch (cur_move) {
 8003204:	4b40      	ldr	r3, [pc, #256]	; (8003308 <Get_Next_Dumb+0x104>)
 8003206:	6818      	ldr	r0, [r3, #0]
 8003208:	2801      	cmp	r0, #1



}

int Get_Next_Dumb() {
 800320a:	b510      	push	{r4, lr}

	int next = 0;

	switch (cur_move) {
 800320c:	d055      	beq.n	80032ba <Get_Next_Dumb+0xb6>
 800320e:	2802      	cmp	r0, #2
 8003210:	d031      	beq.n	8003276 <Get_Next_Dumb+0x72>
 8003212:	2800      	cmp	r0, #0
 8003214:	d170      	bne.n	80032f8 <Get_Next_Dumb+0xf4>

		  case FWD:
			  if ((dif_l >= FRONT_THRESHOLD || dif_r >= FRONT_THRESHOLD) && dif_rf <= SIDE_THRESHOLD) //if front and right side is not blocked
 8003216:	4b3d      	ldr	r3, [pc, #244]	; (800330c <Get_Next_Dumb+0x108>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800321e:	da04      	bge.n	800322a <Get_Next_Dumb+0x26>
 8003220:	4a3b      	ldr	r2, [pc, #236]	; (8003310 <Get_Next_Dumb+0x10c>)
 8003222:	6812      	ldr	r2, [r2, #0]
 8003224:	f5b2 7f96 	cmp.w	r2, #300	; 0x12c
 8003228:	db07      	blt.n	800323a <Get_Next_Dumb+0x36>
 800322a:	4a3a      	ldr	r2, [pc, #232]	; (8003314 <Get_Next_Dumb+0x110>)
 800322c:	6812      	ldr	r2, [r2, #0]
 800322e:	f5b2 7f16 	cmp.w	r2, #600	; 0x258
 8003232:	dd63      	ble.n	80032fc <Get_Next_Dumb+0xf8>
			  {next = RIGHT;}
			  else if ((dif_l >= FRONT_THRESHOLD || dif_r >= FRONT_THRESHOLD) && dif_lf <= SIDE_THRESHOLD) //if front and right side is blocked, but left is not
 8003234:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003238:	da04      	bge.n	8003244 <Get_Next_Dumb+0x40>
 800323a:	4a35      	ldr	r2, [pc, #212]	; (8003310 <Get_Next_Dumb+0x10c>)
 800323c:	6812      	ldr	r2, [r2, #0]
 800323e:	f5b2 7f96 	cmp.w	r2, #300	; 0x12c
 8003242:	db07      	blt.n	8003254 <Get_Next_Dumb+0x50>
 8003244:	4a34      	ldr	r2, [pc, #208]	; (8003318 <Get_Next_Dumb+0x114>)
 8003246:	6812      	ldr	r2, [r2, #0]
 8003248:	f5b2 7f16 	cmp.w	r2, #600	; 0x258
 800324c:	dd52      	ble.n	80032f4 <Get_Next_Dumb+0xf0>
			  {next = LEFT;}
			  else if ((dif_l >= FRONT_THRESHOLD || dif_r >= FRONT_THRESHOLD) && dif_lf > SIDE_THRESHOLD && dif_rf > SIDE_THRESHOLD)
 800324e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003252:	da04      	bge.n	800325e <Get_Next_Dumb+0x5a>
 8003254:	4b2e      	ldr	r3, [pc, #184]	; (8003310 <Get_Next_Dumb+0x10c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800325c:	db4c      	blt.n	80032f8 <Get_Next_Dumb+0xf4>
 800325e:	4b2e      	ldr	r3, [pc, #184]	; (8003318 <Get_Next_Dumb+0x114>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003266:	dd47      	ble.n	80032f8 <Get_Next_Dumb+0xf4>
 8003268:	4b2a      	ldr	r3, [pc, #168]	; (8003314 <Get_Next_Dumb+0x110>)
 800326a:	681b      	ldr	r3, [r3, #0]
			  {next = DEAD;}
 800326c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003270:	bfd8      	it	le
 8003272:	2000      	movle	r0, #0
 8003274:	e03b      	b.n	80032ee <Get_Next_Dumb+0xea>
			  else
			  {next = FWD;}
			  break;

		  case RIGHT:
			  if (dif_l <= 250 || dif_r <= 250) //r_turnflag means the second part of the turn
 8003276:	4b25      	ldr	r3, [pc, #148]	; (800330c <Get_Next_Dumb+0x108>)
 8003278:	6819      	ldr	r1, [r3, #0]
 800327a:	29fa      	cmp	r1, #250	; 0xfa
 800327c:	dd3c      	ble.n	80032f8 <Get_Next_Dumb+0xf4>
 800327e:	4b24      	ldr	r3, [pc, #144]	; (8003310 <Get_Next_Dumb+0x10c>)
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	2afa      	cmp	r2, #250	; 0xfa
 8003284:	dd38      	ble.n	80032f8 <Get_Next_Dumb+0xf4>
			  {next = FWD;}
			  else if (dif_rf > SIDE_THRESHOLD && dif_lf < 300)
 8003286:	4b23      	ldr	r3, [pc, #140]	; (8003314 <Get_Next_Dumb+0x110>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800328e:	dd04      	ble.n	800329a <Get_Next_Dumb+0x96>
 8003290:	4821      	ldr	r0, [pc, #132]	; (8003318 <Get_Next_Dumb+0x114>)
 8003292:	6800      	ldr	r0, [r0, #0]
 8003294:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 8003298:	db2c      	blt.n	80032f4 <Get_Next_Dumb+0xf0>
			  {next = LEFT;}
			  else if ((dif_l >= FRONT_THRESHOLD || dif_r >= FRONT_THRESHOLD) && dif_lf > SIDE_THRESHOLD && dif_rf > SIDE_THRESHOLD)
 800329a:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
 800329e:	da02      	bge.n	80032a6 <Get_Next_Dumb+0xa2>
 80032a0:	f5b2 7f96 	cmp.w	r2, #300	; 0x12c
 80032a4:	db2a      	blt.n	80032fc <Get_Next_Dumb+0xf8>
 80032a6:	4a1c      	ldr	r2, [pc, #112]	; (8003318 <Get_Next_Dumb+0x114>)
 80032a8:	6812      	ldr	r2, [r2, #0]
 80032aa:	f5b2 7f16 	cmp.w	r2, #600	; 0x258
 80032ae:	dd25      	ble.n	80032fc <Get_Next_Dumb+0xf8>
			  if ((dif_l >= FRONT_THRESHOLD || dif_r >= FRONT_THRESHOLD) && dif_rf <= SIDE_THRESHOLD) //if front and right side is not blocked
			  {next = RIGHT;}
			  else if ((dif_l >= FRONT_THRESHOLD || dif_r >= FRONT_THRESHOLD) && dif_lf <= SIDE_THRESHOLD) //if front and right side is blocked, but left is not
			  {next = LEFT;}
			  else if ((dif_l >= FRONT_THRESHOLD || dif_r >= FRONT_THRESHOLD) && dif_lf > SIDE_THRESHOLD && dif_rf > SIDE_THRESHOLD)
			  {next = DEAD;}
 80032b0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80032b4:	bfd8      	it	le
 80032b6:	2002      	movle	r0, #2
 80032b8:	e019      	b.n	80032ee <Get_Next_Dumb+0xea>
			  else
			  {next = RIGHT;}
			  break;

		  case LEFT:
			  if (dif_l <= 250 || dif_r <= 250)
 80032ba:	4b14      	ldr	r3, [pc, #80]	; (800330c <Get_Next_Dumb+0x108>)
 80032bc:	6819      	ldr	r1, [r3, #0]
 80032be:	29fa      	cmp	r1, #250	; 0xfa
 80032c0:	dd1a      	ble.n	80032f8 <Get_Next_Dumb+0xf4>
 80032c2:	4b13      	ldr	r3, [pc, #76]	; (8003310 <Get_Next_Dumb+0x10c>)
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	2afa      	cmp	r2, #250	; 0xfa
 80032c8:	dd16      	ble.n	80032f8 <Get_Next_Dumb+0xf4>
			  {next = FWD;}
			  else if (dif_lf > SIDE_THRESHOLD && dif_rf < 300)
 80032ca:	4b13      	ldr	r3, [pc, #76]	; (8003318 <Get_Next_Dumb+0x114>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80032d2:	dd18      	ble.n	8003306 <Get_Next_Dumb+0x102>
 80032d4:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <Get_Next_Dumb+0x110>)
 80032d6:	681c      	ldr	r4, [r3, #0]
 80032d8:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
 80032dc:	db0e      	blt.n	80032fc <Get_Next_Dumb+0xf8>
			  {next = RIGHT;}
			  else if ((dif_l >= FRONT_THRESHOLD || dif_r >= FRONT_THRESHOLD) && dif_lf > SIDE_THRESHOLD && dif_rf > SIDE_THRESHOLD)
 80032de:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
 80032e2:	db0d      	blt.n	8003300 <Get_Next_Dumb+0xfc>
 80032e4:	681b      	ldr	r3, [r3, #0]
			  if ((dif_l >= FRONT_THRESHOLD || dif_r >= FRONT_THRESHOLD) && dif_rf <= SIDE_THRESHOLD) //if front and right side is not blocked
			  {next = RIGHT;}
			  else if ((dif_l >= FRONT_THRESHOLD || dif_r >= FRONT_THRESHOLD) && dif_lf <= SIDE_THRESHOLD) //if front and right side is blocked, but left is not
			  {next = LEFT;}
			  else if ((dif_l >= FRONT_THRESHOLD || dif_r >= FRONT_THRESHOLD) && dif_lf > SIDE_THRESHOLD && dif_rf > SIDE_THRESHOLD)
			  {next = DEAD;}
 80032e6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80032ea:	bfd8      	it	le
 80032ec:	2001      	movle	r0, #1
 80032ee:	bfc8      	it	gt
 80032f0:	2003      	movgt	r0, #3
 80032f2:	bd10      	pop	{r4, pc}
			  else if (dif_lf > SIDE_THRESHOLD && dif_rf < 300)
			  {next = RIGHT;}
			  else if ((dif_l >= FRONT_THRESHOLD || dif_r >= FRONT_THRESHOLD) && dif_lf > SIDE_THRESHOLD && dif_rf > SIDE_THRESHOLD)
			  {next = DEAD;}
			  else
			  {next = LEFT;}
 80032f4:	2001      	movs	r0, #1
 80032f6:	bd10      	pop	{r4, pc}
			  {next = LEFT;}
			  else if ((dif_l >= FRONT_THRESHOLD || dif_r >= FRONT_THRESHOLD) && dif_lf > SIDE_THRESHOLD && dif_rf > SIDE_THRESHOLD)
			  {next = DEAD;}
			  //the default next_move is the cur_move, so if the front isn't blocked, keep going straight
			  else
			  {next = FWD;}
 80032f8:	2000      	movs	r0, #0
 80032fa:	bd10      	pop	{r4, pc}
			  else if (dif_rf > SIDE_THRESHOLD && dif_lf < 300)
			  {next = LEFT;}
			  else if ((dif_l >= FRONT_THRESHOLD || dif_r >= FRONT_THRESHOLD) && dif_lf > SIDE_THRESHOLD && dif_rf > SIDE_THRESHOLD)
			  {next = DEAD;}
			  else
			  {next = RIGHT;}
 80032fc:	2002      	movs	r0, #2
 80032fe:	bd10      	pop	{r4, pc}
		  case LEFT:
			  if (dif_l <= 250 || dif_r <= 250)
			  {next = FWD;}
			  else if (dif_lf > SIDE_THRESHOLD && dif_rf < 300)
			  {next = RIGHT;}
			  else if ((dif_l >= FRONT_THRESHOLD || dif_r >= FRONT_THRESHOLD) && dif_lf > SIDE_THRESHOLD && dif_rf > SIDE_THRESHOLD)
 8003300:	f5b2 7f96 	cmp.w	r2, #300	; 0x12c
 8003304:	daee      	bge.n	80032e4 <Get_Next_Dumb+0xe0>
			  {next = LEFT;}
			  break;
		  }

return next;
}
 8003306:	bd10      	pop	{r4, pc}
 8003308:	200002ac 	.word	0x200002ac
 800330c:	20000124 	.word	0x20000124
 8003310:	20000350 	.word	0x20000350
 8003314:	2000046c 	.word	0x2000046c
 8003318:	2000017c 	.word	0x2000017c

0800331c <HAL_GPIO_EXTI_Callback>:
}

//button interrupt routine (THIS IS RUN WHEN BUTTONS ARE PRESSED)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (GPIO_Pin == BUTTON2_Pin)
 800331c:	2840      	cmp	r0, #64	; 0x40
  }
}

//button interrupt routine (THIS IS RUN WHEN BUTTONS ARE PRESSED)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800331e:	b508      	push	{r3, lr}
  if (GPIO_Pin == BUTTON2_Pin)
 8003320:	d107      	bne.n	8003332 <HAL_GPIO_EXTI_Callback+0x16>
  {
	  stop_flag = !stop_flag;
 8003322:	4a15      	ldr	r2, [pc, #84]	; (8003378 <HAL_GPIO_EXTI_Callback+0x5c>)
	  HAL_GPIO_TogglePin(GPIOD, LED4_Pin);
 8003324:	2104      	movs	r1, #4
//button interrupt routine (THIS IS RUN WHEN BUTTONS ARE PRESSED)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (GPIO_Pin == BUTTON2_Pin)
  {
	  stop_flag = !stop_flag;
 8003326:	6813      	ldr	r3, [r2, #0]
 8003328:	fab3 f383 	clz	r3, r3
 800332c:	095b      	lsrs	r3, r3, #5
 800332e:	6013      	str	r3, [r2, #0]
 8003330:	e01b      	b.n	800336a <HAL_GPIO_EXTI_Callback+0x4e>
	  HAL_GPIO_TogglePin(GPIOD, LED4_Pin);

  }

  if (GPIO_Pin == BUTTON1_Pin)
 8003332:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003336:	d11d      	bne.n	8003374 <HAL_GPIO_EXTI_Callback+0x58>
  {
	  horiz_walls[5][1] = TRUE;
 8003338:	2201      	movs	r2, #1
 800333a:	4b10      	ldr	r3, [pc, #64]	; (800337c <HAL_GPIO_EXTI_Callback+0x60>)
 800333c:	62da      	str	r2, [r3, #44]	; 0x2c
	  Floodfill();
 800333e:	f7ff fdc7 	bl	8002ed0 <Floodfill>
	  Print_Maze();
 8003342:	f7ff fce5 	bl	8002d10 <Print_Maze>
	  Calc_Optimal();
 8003346:	f7ff fe0f 	bl	8002f68 <Calc_Optimal>
	  Fast_Straights();
 800334a:	f7ff fefb 	bl	8003144 <Fast_Straights>
	  __HAL_TIM_SET_COUNTER(&htim1, 0);
 800334e:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <HAL_GPIO_EXTI_Callback+0x64>)
	  __HAL_TIM_SET_COUNTER(&htim4, 0);
	 debug_flag = !debug_flag;
	 HAL_GPIO_TogglePin(GPIOD, LED3_Pin);
 8003350:	2108      	movs	r1, #8
	  horiz_walls[5][1] = TRUE;
	  Floodfill();
	  Print_Maze();
	  Calc_Optimal();
	  Fast_Straights();
	  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	2300      	movs	r3, #0
 8003356:	6253      	str	r3, [r2, #36]	; 0x24
	  __HAL_TIM_SET_COUNTER(&htim4, 0);
 8003358:	4a0a      	ldr	r2, [pc, #40]	; (8003384 <HAL_GPIO_EXTI_Callback+0x68>)
 800335a:	6812      	ldr	r2, [r2, #0]
 800335c:	6253      	str	r3, [r2, #36]	; 0x24
	 debug_flag = !debug_flag;
 800335e:	4a0a      	ldr	r2, [pc, #40]	; (8003388 <HAL_GPIO_EXTI_Callback+0x6c>)
 8003360:	6813      	ldr	r3, [r2, #0]
 8003362:	fab3 f383 	clz	r3, r3
 8003366:	095b      	lsrs	r3, r3, #5
 8003368:	6013      	str	r3, [r2, #0]
	 HAL_GPIO_TogglePin(GPIOD, LED3_Pin);
 800336a:	4808      	ldr	r0, [pc, #32]	; (800338c <HAL_GPIO_EXTI_Callback+0x70>)
	 //buzzer_flag = !buzzer_flag;
	 //Set_Buzzer(3375, buzzer_flag);
  }
}
 800336c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  Calc_Optimal();
	  Fast_Straights();
	  __HAL_TIM_SET_COUNTER(&htim1, 0);
	  __HAL_TIM_SET_COUNTER(&htim4, 0);
	 debug_flag = !debug_flag;
	 HAL_GPIO_TogglePin(GPIOD, LED3_Pin);
 8003370:	f7fd bd92 	b.w	8000e98 <HAL_GPIO_TogglePin>
 8003374:	bd08      	pop	{r3, pc}
 8003376:	bf00      	nop
 8003378:	20000000 	.word	0x20000000
 800337c:	20000180 	.word	0x20000180
 8003380:	20000898 	.word	0x20000898
 8003384:	200004e8 	.word	0x200004e8
 8003388:	20000468 	.word	0x20000468
 800338c:	40020c00 	.word	0x40020c00

08003390 <HAL_SPI_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003390:	4770      	bx	lr
	...

08003394 <Error_Handler>:

void Error_Handler(void)
{
  while(1) 
  {
	  sprintf(tx_buffer, "State: %d", HAL_state);
 8003394:	4c05      	ldr	r4, [pc, #20]	; (80033ac <Error_Handler+0x18>)
  //wTransferState = TRANSFER_ERROR;
  //HAL_GPIO_TogglePin(GPIOD, LED5_Pin);
}

void Error_Handler(void)
{
 8003396:	b508      	push	{r3, lr}
  while(1) 
  {
	  sprintf(tx_buffer, "State: %d", HAL_state);
 8003398:	6822      	ldr	r2, [r4, #0]
 800339a:	4905      	ldr	r1, [pc, #20]	; (80033b0 <Error_Handler+0x1c>)
 800339c:	4805      	ldr	r0, [pc, #20]	; (80033b4 <Error_Handler+0x20>)
 800339e:	f001 f871 	bl	8004484 <siprintf>
	  Transmit(tx_buffer);
 80033a2:	4804      	ldr	r0, [pc, #16]	; (80033b4 <Error_Handler+0x20>)
 80033a4:	f7ff fb88 	bl	8002ab8 <Transmit>
 80033a8:	e7f6      	b.n	8003398 <Error_Handler+0x4>
 80033aa:	bf00      	nop
 80033ac:	20000358 	.word	0x20000358
 80033b0:	08004fc7 	.word	0x08004fc7
 80033b4:	20000634 	.word	0x20000634

080033b8 <Start_IR>:
lenc_diff = 0;
renc_diff = 0;

}

void Start_IR() {
 80033b8:	b508      	push	{r3, lr}

adc_conv = FALSE;
 80033ba:	2200      	movs	r2, #0
 80033bc:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <Start_IR+0x1c>)
if(HAL_ADC_Start_DMA(&hadc1, ADC_valbuffer, ADC_VAL_BUFFER_LENGTH) != HAL_OK)
 80033be:	4906      	ldr	r1, [pc, #24]	; (80033d8 <Start_IR+0x20>)

}

void Start_IR() {

adc_conv = FALSE;
 80033c0:	601a      	str	r2, [r3, #0]
if(HAL_ADC_Start_DMA(&hadc1, ADC_valbuffer, ADC_VAL_BUFFER_LENGTH) != HAL_OK)
 80033c2:	2220      	movs	r2, #32
 80033c4:	4805      	ldr	r0, [pc, #20]	; (80033dc <Start_IR+0x24>)
 80033c6:	f7fd f88b 	bl	80004e0 <HAL_ADC_Start_DMA>
 80033ca:	b108      	cbz	r0, 80033d0 <Start_IR+0x18>
  {
     Error_Handler();
 80033cc:	f7ff ffe2 	bl	8003394 <Error_Handler>
 80033d0:	bd08      	pop	{r3, pc}
 80033d2:	bf00      	nop
 80033d4:	20000414 	.word	0x20000414
 80033d8:	20000818 	.word	0x20000818
 80033dc:	200006fc 	.word	0x200006fc

080033e0 <Get_IR>:
     Error_Handler();
  }

}

void Get_IR() { //int* val_array
 80033e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int off_r = 0;
	int off_rf = 0;
	int off_lf = 0;

	//left sensor
	Start_IR();
 80033e4:	f7ff ffe8 	bl	80033b8 <Start_IR>
	while (adc_conv == FALSE);
 80033e8:	4a3c      	ldr	r2, [pc, #240]	; (80034dc <Get_IR+0xfc>)
 80033ea:	6813      	ldr	r3, [r2, #0]
 80033ec:	4c3b      	ldr	r4, [pc, #236]	; (80034dc <Get_IR+0xfc>)
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0fb      	beq.n	80033ea <Get_IR+0xa>
	off_l = l;
 80033f2:	4d3b      	ldr	r5, [pc, #236]	; (80034e0 <Get_IR+0x100>)
	HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, ON);
 80033f4:	2201      	movs	r2, #1
 80033f6:	2120      	movs	r1, #32
 80033f8:	483a      	ldr	r0, [pc, #232]	; (80034e4 <Get_IR+0x104>)
	int off_lf = 0;

	//left sensor
	Start_IR();
	while (adc_conv == FALSE);
	off_l = l;
 80033fa:	f8d5 b000 	ldr.w	fp, [r5]
	HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, ON);
 80033fe:	f7fd fd47 	bl	8000e90 <HAL_GPIO_WritePin>
	Start_IR();
 8003402:	f7ff ffd9 	bl	80033b8 <Start_IR>
	while (adc_conv == FALSE);
 8003406:	6823      	ldr	r3, [r4, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0fc      	beq.n	8003406 <Get_IR+0x26>
	on_l = l;
	HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, OFF);
 800340c:	2200      	movs	r2, #0
 800340e:	2120      	movs	r1, #32
 8003410:	4834      	ldr	r0, [pc, #208]	; (80034e4 <Get_IR+0x104>)
	while (adc_conv == FALSE);
	off_l = l;
	HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, ON);
	Start_IR();
	while (adc_conv == FALSE);
	on_l = l;
 8003412:	682f      	ldr	r7, [r5, #0]
	HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, OFF);
 8003414:	f7fd fd3c 	bl	8000e90 <HAL_GPIO_WritePin>

	//right sensor
	Start_IR();
 8003418:	f7ff ffce 	bl	80033b8 <Start_IR>
	while (adc_conv == FALSE);
 800341c:	6823      	ldr	r3, [r4, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0fc      	beq.n	800341c <Get_IR+0x3c>
	off_r = r;
 8003422:	4d31      	ldr	r5, [pc, #196]	; (80034e8 <Get_IR+0x108>)
	HAL_GPIO_WritePin(R_EMIT_PORT, R_EMIT_PIN, ON);
 8003424:	2201      	movs	r2, #1
 8003426:	f44f 7100 	mov.w	r1, #512	; 0x200
 800342a:	4830      	ldr	r0, [pc, #192]	; (80034ec <Get_IR+0x10c>)
	HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, OFF);

	//right sensor
	Start_IR();
	while (adc_conv == FALSE);
	off_r = r;
 800342c:	f8d5 a000 	ldr.w	sl, [r5]
	HAL_GPIO_WritePin(R_EMIT_PORT, R_EMIT_PIN, ON);
 8003430:	f7fd fd2e 	bl	8000e90 <HAL_GPIO_WritePin>
	Start_IR();
 8003434:	f7ff ffc0 	bl	80033b8 <Start_IR>
	while (adc_conv == FALSE);
 8003438:	6823      	ldr	r3, [r4, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0fc      	beq.n	8003438 <Get_IR+0x58>
	on_r = r;
	HAL_GPIO_WritePin(R_EMIT_PORT, R_EMIT_PIN, OFF);
 800343e:	2200      	movs	r2, #0
 8003440:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003444:	4829      	ldr	r0, [pc, #164]	; (80034ec <Get_IR+0x10c>)
	while (adc_conv == FALSE);
	off_r = r;
	HAL_GPIO_WritePin(R_EMIT_PORT, R_EMIT_PIN, ON);
	Start_IR();
	while (adc_conv == FALSE);
	on_r = r;
 8003446:	682e      	ldr	r6, [r5, #0]
	HAL_GPIO_WritePin(R_EMIT_PORT, R_EMIT_PIN, OFF);
 8003448:	f7fd fd22 	bl	8000e90 <HAL_GPIO_WritePin>

	//left front
	Start_IR();
 800344c:	f7ff ffb4 	bl	80033b8 <Start_IR>
	while (adc_conv == FALSE);
 8003450:	6823      	ldr	r3, [r4, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0fc      	beq.n	8003450 <Get_IR+0x70>
	off_lf = lf;
 8003456:	4d26      	ldr	r5, [pc, #152]	; (80034f0 <Get_IR+0x110>)
	HAL_GPIO_WritePin(LF_EMIT_PORT, LF_EMIT_PIN, ON);
 8003458:	2201      	movs	r2, #1
 800345a:	2110      	movs	r1, #16
 800345c:	4821      	ldr	r0, [pc, #132]	; (80034e4 <Get_IR+0x104>)
	HAL_GPIO_WritePin(R_EMIT_PORT, R_EMIT_PIN, OFF);

	//left front
	Start_IR();
	while (adc_conv == FALSE);
	off_lf = lf;
 800345e:	f8d5 8000 	ldr.w	r8, [r5]
	HAL_GPIO_WritePin(LF_EMIT_PORT, LF_EMIT_PIN, ON);
 8003462:	f7fd fd15 	bl	8000e90 <HAL_GPIO_WritePin>
	Start_IR();
 8003466:	f7ff ffa7 	bl	80033b8 <Start_IR>
	while (adc_conv == FALSE);
 800346a:	6823      	ldr	r3, [r4, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0fc      	beq.n	800346a <Get_IR+0x8a>
	on_lf = lf;
	HAL_GPIO_WritePin(LF_EMIT_PORT, LF_EMIT_PIN, OFF);
 8003470:	2200      	movs	r2, #0
 8003472:	2110      	movs	r1, #16
 8003474:	481b      	ldr	r0, [pc, #108]	; (80034e4 <Get_IR+0x104>)
	while (adc_conv == FALSE);
	off_lf = lf;
	HAL_GPIO_WritePin(LF_EMIT_PORT, LF_EMIT_PIN, ON);
	Start_IR();
	while (adc_conv == FALSE);
	on_lf = lf;
 8003476:	682d      	ldr	r5, [r5, #0]
	HAL_GPIO_WritePin(LF_EMIT_PORT, LF_EMIT_PIN, OFF);
 8003478:	f7fd fd0a 	bl	8000e90 <HAL_GPIO_WritePin>

	//right front
	Start_IR();
 800347c:	f7ff ff9c 	bl	80033b8 <Start_IR>
	while (adc_conv == FALSE);
 8003480:	6823      	ldr	r3, [r4, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0fc      	beq.n	8003480 <Get_IR+0xa0>
	off_rf = rf;
 8003486:	4b1b      	ldr	r3, [pc, #108]	; (80034f4 <Get_IR+0x114>)
	HAL_GPIO_WritePin(RF_EMIT_PORT, RF_EMIT_PIN, ON);
 8003488:	2201      	movs	r2, #1
 800348a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800348e:	4817      	ldr	r0, [pc, #92]	; (80034ec <Get_IR+0x10c>)
	HAL_GPIO_WritePin(LF_EMIT_PORT, LF_EMIT_PIN, OFF);

	//right front
	Start_IR();
	while (adc_conv == FALSE);
	off_rf = rf;
 8003490:	f8d3 9000 	ldr.w	r9, [r3]
 8003494:	9301      	str	r3, [sp, #4]
	HAL_GPIO_WritePin(RF_EMIT_PORT, RF_EMIT_PIN, ON);
 8003496:	f7fd fcfb 	bl	8000e90 <HAL_GPIO_WritePin>
	Start_IR();
 800349a:	f7ff ff8d 	bl	80033b8 <Start_IR>
 800349e:	9b01      	ldr	r3, [sp, #4]
	while (adc_conv == FALSE);
 80034a0:	6822      	ldr	r2, [r4, #0]
 80034a2:	2a00      	cmp	r2, #0
 80034a4:	d0fc      	beq.n	80034a0 <Get_IR+0xc0>
	on_rf = rf;
	HAL_GPIO_WritePin(RF_EMIT_PORT, RF_EMIT_PIN, OFF);
 80034a6:	2200      	movs	r2, #0
 80034a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034ac:	480f      	ldr	r0, [pc, #60]	; (80034ec <Get_IR+0x10c>)

	dif_l = on_l - off_l; //val_array[0]
 80034ae:	ebcb 0707 	rsb	r7, fp, r7
	while (adc_conv == FALSE);
	off_rf = rf;
	HAL_GPIO_WritePin(RF_EMIT_PORT, RF_EMIT_PIN, ON);
	Start_IR();
	while (adc_conv == FALSE);
	on_rf = rf;
 80034b2:	681c      	ldr	r4, [r3, #0]
	HAL_GPIO_WritePin(RF_EMIT_PORT, RF_EMIT_PIN, OFF);
 80034b4:	f7fd fcec 	bl	8000e90 <HAL_GPIO_WritePin>

	dif_l = on_l - off_l; //val_array[0]
 80034b8:	4b0f      	ldr	r3, [pc, #60]	; (80034f8 <Get_IR+0x118>)
	dif_r = on_r - off_r; //val_array[1]
 80034ba:	ebca 0606 	rsb	r6, sl, r6
	dif_rf = on_rf - off_rf; //val_array[2]
 80034be:	ebc9 0404 	rsb	r4, r9, r4
	dif_lf = on_lf - off_lf; //val_array[3]
 80034c2:	ebc8 0505 	rsb	r5, r8, r5
	Start_IR();
	while (adc_conv == FALSE);
	on_rf = rf;
	HAL_GPIO_WritePin(RF_EMIT_PORT, RF_EMIT_PIN, OFF);

	dif_l = on_l - off_l; //val_array[0]
 80034c6:	601f      	str	r7, [r3, #0]
	dif_r = on_r - off_r; //val_array[1]
 80034c8:	4b0c      	ldr	r3, [pc, #48]	; (80034fc <Get_IR+0x11c>)
 80034ca:	601e      	str	r6, [r3, #0]
	dif_rf = on_rf - off_rf; //val_array[2]
 80034cc:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <Get_IR+0x120>)
 80034ce:	601c      	str	r4, [r3, #0]
	dif_lf = on_lf - off_lf; //val_array[3]
 80034d0:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <Get_IR+0x124>)
 80034d2:	601d      	str	r5, [r3, #0]

}
 80034d4:	b003      	add	sp, #12
 80034d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034da:	bf00      	nop
 80034dc:	20000414 	.word	0x20000414
 80034e0:	20000204 	.word	0x20000204
 80034e4:	40020400 	.word	0x40020400
 80034e8:	20000354 	.word	0x20000354
 80034ec:	40020800 	.word	0x40020800
 80034f0:	20000120 	.word	0x20000120
 80034f4:	20000258 	.word	0x20000258
 80034f8:	20000124 	.word	0x20000124
 80034fc:	20000350 	.word	0x20000350
 8003500:	2000046c 	.word	0x2000046c
 8003504:	2000017c 	.word	0x2000017c

08003508 <Stop_IR>:
     Error_Handler();
  }

}

void Stop_IR() {
 8003508:	b508      	push	{r3, lr}

adc_conv = TRUE;
 800350a:	2201      	movs	r2, #1
 800350c:	4b04      	ldr	r3, [pc, #16]	; (8003520 <Stop_IR+0x18>)
if(HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 800350e:	4805      	ldr	r0, [pc, #20]	; (8003524 <Stop_IR+0x1c>)

}

void Stop_IR() {

adc_conv = TRUE;
 8003510:	601a      	str	r2, [r3, #0]
if(HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 8003512:	f7fd f865 	bl	80005e0 <HAL_ADC_Stop_DMA>
 8003516:	b108      	cbz	r0, 800351c <Stop_IR+0x14>
  {
     Error_Handler();
 8003518:	f7ff ff3c 	bl	8003394 <Error_Handler>
 800351c:	bd08      	pop	{r3, pc}
 800351e:	bf00      	nop
 8003520:	20000414 	.word	0x20000414
 8003524:	200006fc 	.word	0x200006fc

08003528 <HAL_ADC_ConvCpltCallback>:

}

//ADC interrupt handler. Runs when all four channels have been converted
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* handle)
{
 8003528:	b508      	push	{r3, lr}
	Stop_IR();
 800352a:	f7ff ffed 	bl	8003508 <Stop_IR>
	l = ADC_valbuffer[ADC_VAL_BUFFER_LENGTH - 4];
 800352e:	4b07      	ldr	r3, [pc, #28]	; (800354c <HAL_ADC_ConvCpltCallback+0x24>)
 8003530:	4a07      	ldr	r2, [pc, #28]	; (8003550 <HAL_ADC_ConvCpltCallback+0x28>)
 8003532:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003534:	6011      	str	r1, [r2, #0]
	r = ADC_valbuffer[ADC_VAL_BUFFER_LENGTH - 1];
 8003536:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8003538:	4a06      	ldr	r2, [pc, #24]	; (8003554 <HAL_ADC_ConvCpltCallback+0x2c>)
 800353a:	6011      	str	r1, [r2, #0]
	rf = ADC_valbuffer[ADC_VAL_BUFFER_LENGTH - 2];
 800353c:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800353e:	4a06      	ldr	r2, [pc, #24]	; (8003558 <HAL_ADC_ConvCpltCallback+0x30>)
 8003540:	6011      	str	r1, [r2, #0]
	lf = ADC_valbuffer[ADC_VAL_BUFFER_LENGTH - 3];
 8003542:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <HAL_ADC_ConvCpltCallback+0x34>)
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	bd08      	pop	{r3, pc}
 800354a:	bf00      	nop
 800354c:	20000818 	.word	0x20000818
 8003550:	20000204 	.word	0x20000204
 8003554:	20000354 	.word	0x20000354
 8003558:	20000258 	.word	0x20000258
 800355c:	20000120 	.word	0x20000120

08003560 <Set_Left>:
}

void Set_Left(int speed, int direction) {

	//when switching directions, PWM polarity switches
	if (direction == FORWARD) {
 8003560:	2901      	cmp	r1, #1
	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	TIM_OC_InitTypeDef tim2config;

	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003562:	f04f 0200 	mov.w	r2, #0

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	TIM_OC_InitTypeDef tim2config;

	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
 8003566:	f04f 0360 	mov.w	r3, #96	; 0x60

void Set_Left(int speed, int direction) {

	//when switching directions, PWM polarity switches
	if (direction == FORWARD) {
		speed = 665 - speed;
 800356a:	bf08      	it	eq
 800356c:	f5c0 7026 	rsbeq	r0, r0, #664	; 0x298
	dif_rf = on_rf - off_rf; //val_array[2]
	dif_lf = on_lf - off_lf; //val_array[3]

}

void Set_Left(int speed, int direction) {
 8003570:	b510      	push	{r4, lr}

	//when switching directions, PWM polarity switches
	if (direction == FORWARD) {
		speed = 665 - speed;
 8003572:	bf08      	it	eq
 8003574:	3001      	addeq	r0, #1
	dif_rf = on_rf - off_rf; //val_array[2]
	dif_lf = on_lf - off_lf; //val_array[3]

}

void Set_Left(int speed, int direction) {
 8003576:	b088      	sub	sp, #32
 8003578:	460c      	mov	r4, r1
	}

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	TIM_OC_InitTypeDef tim2config;

	tim2config.Pulse = speed;
 800357a:	9002      	str	r0, [sp, #8]
	tim2config.OCMode = TIM_OCMODE_PWM1;
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
	tim2config.OCFastMode = TIM_OCFAST_DISABLE;
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &tim2config, TIM_CHANNEL_1) != HAL_OK)
 800357c:	a901      	add	r1, sp, #4
 800357e:	480a      	ldr	r0, [pc, #40]	; (80035a8 <Set_Left+0x48>)

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	TIM_OC_InitTypeDef tim2config;

	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
 8003580:	9301      	str	r3, [sp, #4]
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003582:	9203      	str	r2, [sp, #12]
	tim2config.OCFastMode = TIM_OCFAST_DISABLE;
 8003584:	9205      	str	r2, [sp, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &tim2config, TIM_CHANNEL_1) != HAL_OK)
 8003586:	f7fe feeb 	bl	8002360 <HAL_TIM_PWM_ConfigChannel>
 800358a:	4601      	mov	r1, r0
 800358c:	b108      	cbz	r0, 8003592 <Set_Left+0x32>
	  {
	     Error_Handler();
 800358e:	f7ff ff01 	bl	8003394 <Error_Handler>
	  }

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003592:	4805      	ldr	r0, [pc, #20]	; (80035a8 <Set_Left+0x48>)
 8003594:	f7fe fe7a 	bl	800228c <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, LDIC_Pin, direction);
 8003598:	2102      	movs	r1, #2
 800359a:	b2e2      	uxtb	r2, r4
 800359c:	4803      	ldr	r0, [pc, #12]	; (80035ac <Set_Left+0x4c>)
 800359e:	f7fd fc77 	bl	8000e90 <HAL_GPIO_WritePin>

}
 80035a2:	b008      	add	sp, #32
 80035a4:	bd10      	pop	{r4, pc}
 80035a6:	bf00      	nop
 80035a8:	20000a50 	.word	0x20000a50
 80035ac:	40020000 	.word	0x40020000

080035b0 <Set_Right>:

//when switching directions, PWM polarity switches
void Set_Right(int speed, int direction) {

	if (direction == FORWARD) {
 80035b0:	2901      	cmp	r1, #1
	}

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
	TIM_OC_InitTypeDef tim2config;
	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
 80035b2:	f04f 0360 	mov.w	r3, #96	; 0x60
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
	tim2config.OCFastMode = TIM_OCFAST_DISABLE;

	if (HAL_TIM_PWM_ConfigChannel(&htim2, &tim2config, TIM_CHANNEL_3) != HAL_OK)
 80035b6:	f04f 0208 	mov.w	r2, #8

//when switching directions, PWM polarity switches
void Set_Right(int speed, int direction) {

	if (direction == FORWARD) {
			speed = 665 - speed;
 80035ba:	bf08      	it	eq
 80035bc:	f5c0 7026 	rsbeq	r0, r0, #664	; 0x298
	HAL_GPIO_WritePin(GPIOA, LDIC_Pin, direction);

}

//when switching directions, PWM polarity switches
void Set_Right(int speed, int direction) {
 80035c0:	b510      	push	{r4, lr}
 80035c2:	b088      	sub	sp, #32

	if (direction == FORWARD) {
			speed = 665 - speed;
 80035c4:	bf08      	it	eq
 80035c6:	3001      	addeq	r0, #1
	HAL_GPIO_WritePin(GPIOA, LDIC_Pin, direction);

}

//when switching directions, PWM polarity switches
void Set_Right(int speed, int direction) {
 80035c8:	460c      	mov	r4, r1
	}

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
	TIM_OC_InitTypeDef tim2config;
	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
 80035ca:	9301      	str	r3, [sp, #4]
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035cc:	2300      	movs	r3, #0
			speed = 665 - speed;
	}

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
	TIM_OC_InitTypeDef tim2config;
	tim2config.Pulse = speed;
 80035ce:	9002      	str	r0, [sp, #8]
	tim2config.OCMode = TIM_OCMODE_PWM1;
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
	tim2config.OCFastMode = TIM_OCFAST_DISABLE;

	if (HAL_TIM_PWM_ConfigChannel(&htim2, &tim2config, TIM_CHANNEL_3) != HAL_OK)
 80035d0:	a901      	add	r1, sp, #4
 80035d2:	4809      	ldr	r0, [pc, #36]	; (80035f8 <Set_Right+0x48>)

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
	TIM_OC_InitTypeDef tim2config;
	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035d4:	9303      	str	r3, [sp, #12]
	tim2config.OCFastMode = TIM_OCFAST_DISABLE;
 80035d6:	9305      	str	r3, [sp, #20]

	if (HAL_TIM_PWM_ConfigChannel(&htim2, &tim2config, TIM_CHANNEL_3) != HAL_OK)
 80035d8:	f7fe fec2 	bl	8002360 <HAL_TIM_PWM_ConfigChannel>
 80035dc:	b108      	cbz	r0, 80035e2 <Set_Right+0x32>
	{
	   Error_Handler();
 80035de:	f7ff fed9 	bl	8003394 <Error_Handler>
	}

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80035e2:	2108      	movs	r1, #8
 80035e4:	4804      	ldr	r0, [pc, #16]	; (80035f8 <Set_Right+0x48>)
 80035e6:	f7fe fe51 	bl	800228c <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, RDIC_Pin, direction);
 80035ea:	2108      	movs	r1, #8
 80035ec:	b2e2      	uxtb	r2, r4
 80035ee:	4803      	ldr	r0, [pc, #12]	; (80035fc <Set_Right+0x4c>)
 80035f0:	f7fd fc4e 	bl	8000e90 <HAL_GPIO_WritePin>

}
 80035f4:	b008      	add	sp, #32
 80035f6:	bd10      	pop	{r4, pc}
 80035f8:	20000a50 	.word	0x20000a50
 80035fc:	40020000 	.word	0x40020000

08003600 <Dead_End_Correct>:
{return 0;}

}


void Dead_End_Correct(void) {
 8003600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

Reset_Counters();
//3700 for primary
while (dif_r < 3500 && dif_l < 3500) //align while going into square
 8003602:	4f51      	ldr	r7, [pc, #324]	; (8003748 <Dead_End_Correct+0x148>)
}


void Dead_End_Correct(void) {

Reset_Counters();
 8003604:	f7ff fa3c 	bl	8002a80 <Reset_Counters>
 8003608:	4e50      	ldr	r6, [pc, #320]	; (800374c <Dead_End_Correct+0x14c>)
//3700 for primary
while (dif_r < 3500 && dif_l < 3500) //align while going into square
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	f640 53ab 	movw	r3, #3499	; 0xdab
 8003610:	4c4d      	ldr	r4, [pc, #308]	; (8003748 <Dead_End_Correct+0x148>)
 8003612:	429a      	cmp	r2, r3
 8003614:	4d4d      	ldr	r5, [pc, #308]	; (800374c <Dead_End_Correct+0x14c>)
 8003616:	dc17      	bgt.n	8003648 <Dead_End_Correct+0x48>
 8003618:	6832      	ldr	r2, [r6, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	dc14      	bgt.n	8003648 <Dead_End_Correct+0x48>
{
Get_IR();
 800361e:	f7ff fedf 	bl	80033e0 <Get_IR>
m_correction = (dif_l - dif_r)/75;
 8003622:	6838      	ldr	r0, [r7, #0]
 8003624:	6833      	ldr	r3, [r6, #0]
Set_Left(FWD_L - m_correction, FORWARD);
 8003626:	2101      	movs	r1, #1
Reset_Counters();
//3700 for primary
while (dif_r < 3500 && dif_l < 3500) //align while going into square
{
Get_IR();
m_correction = (dif_l - dif_r)/75;
 8003628:	4c49      	ldr	r4, [pc, #292]	; (8003750 <Dead_End_Correct+0x150>)
 800362a:	1a1b      	subs	r3, r3, r0
 800362c:	204b      	movs	r0, #75	; 0x4b
 800362e:	fb93 f0f0 	sdiv	r0, r3, r0
 8003632:	6020      	str	r0, [r4, #0]
Set_Left(FWD_L - m_correction, FORWARD);
 8003634:	f1c0 0087 	rsb	r0, r0, #135	; 0x87
 8003638:	f7ff ff92 	bl	8003560 <Set_Left>
Set_Right(FWD_R + m_correction, FORWARD);
 800363c:	6820      	ldr	r0, [r4, #0]
 800363e:	2101      	movs	r1, #1
 8003640:	3078      	adds	r0, #120	; 0x78
 8003642:	f7ff ffb5 	bl	80035b0 <Set_Right>
 8003646:	e7e0      	b.n	800360a <Dead_End_Correct+0xa>
}

//Turn to the left if right side is greater
if (dif_rf > dif_lf) {
 8003648:	4a42      	ldr	r2, [pc, #264]	; (8003754 <Dead_End_Correct+0x154>)
 800364a:	4b43      	ldr	r3, [pc, #268]	; (8003758 <Dead_End_Correct+0x158>)
 800364c:	6810      	ldr	r0, [r2, #0]
 800364e:	4617      	mov	r7, r2
 8003650:	6819      	ldr	r1, [r3, #0]
 8003652:	461e      	mov	r6, r3
 8003654:	4288      	cmp	r0, r1
 8003656:	dd05      	ble.n	8003664 <Dead_End_Correct+0x64>
Set_Left(LPIVOT_L, BACKWARD); //100
 8003658:	2100      	movs	r1, #0
 800365a:	208c      	movs	r0, #140	; 0x8c
 800365c:	f7ff ff80 	bl	8003560 <Set_Left>
Set_Right(LPIVOT_R, FORWARD); //140
 8003660:	2101      	movs	r1, #1
 8003662:	e004      	b.n	800366e <Dead_End_Correct+0x6e>
}

else { //Turn to the right if the left side is greater
Set_Left(RPIVOT_L, FORWARD);
 8003664:	2101      	movs	r1, #1
 8003666:	208c      	movs	r0, #140	; 0x8c
 8003668:	f7ff ff7a 	bl	8003560 <Set_Left>
Set_Right(RPIVOT_R, BACKWARD);
 800366c:	2100      	movs	r1, #0
 800366e:	2064      	movs	r0, #100	; 0x64
 8003670:	f7ff ff9e 	bl	80035b0 <Set_Right>
}


while (abs(dif_l - dif_r) < 75) { //should be perfectly facing the back wall
 8003674:	682b      	ldr	r3, [r5, #0]
 8003676:	6822      	ldr	r2, [r4, #0]
 8003678:	1a9b      	subs	r3, r3, r2
 800367a:	334a      	adds	r3, #74	; 0x4a
 800367c:	2b94      	cmp	r3, #148	; 0x94
 800367e:	d802      	bhi.n	8003686 <Dead_End_Correct+0x86>
Get_IR();
 8003680:	f7ff feae 	bl	80033e0 <Get_IR>
 8003684:	e7f6      	b.n	8003674 <Dead_End_Correct+0x74>
}
Set_Left(0, FORWARD);
 8003686:	2101      	movs	r1, #1
 8003688:	2000      	movs	r0, #0
 800368a:	f7ff ff69 	bl	8003560 <Set_Left>
Set_Right(0 , FORWARD);
 800368e:	2101      	movs	r1, #1
 8003690:	2000      	movs	r0, #0
 8003692:	f7ff ff8d 	bl	80035b0 <Set_Right>

Get_IR();
 8003696:	f7ff fea3 	bl	80033e0 <Get_IR>
Reset_Counters();
 800369a:	f7ff f9f1 	bl	8002a80 <Reset_Counters>

//pivot again until facing a side wall
if (dif_rf > dif_lf) {
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	6833      	ldr	r3, [r6, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	dd0c      	ble.n	80036c0 <Dead_End_Correct+0xc0>
Set_Left(LPIVOT_L, BACKWARD); //100
 80036a6:	2100      	movs	r1, #0
 80036a8:	208c      	movs	r0, #140	; 0x8c
 80036aa:	f7ff ff59 	bl	8003560 <Set_Left>
Set_Right(LPIVOT_R, FORWARD); //140
 80036ae:	2101      	movs	r1, #1
 80036b0:	2064      	movs	r0, #100	; 0x64
 80036b2:	f7ff ff7d 	bl	80035b0 <Set_Right>
Set_Left(RPIVOT_L, FORWARD);
Set_Right(RPIVOT_R, BACKWARD);
}

do {
l_count = __HAL_TIM_GET_COUNTER(&htim1);
 80036b6:	4b29      	ldr	r3, [pc, #164]	; (800375c <Dead_End_Correct+0x15c>)
 80036b8:	6819      	ldr	r1, [r3, #0]
r_count = __HAL_TIM_GET_COUNTER(&htim4);
 80036ba:	4b29      	ldr	r3, [pc, #164]	; (8003760 <Dead_End_Correct+0x160>)
 80036bc:	6818      	ldr	r0, [r3, #0]
 80036be:	e008      	b.n	80036d2 <Dead_End_Correct+0xd2>
Set_Left(LPIVOT_L, BACKWARD); //100
Set_Right(LPIVOT_R, FORWARD); //140
}

else { //Turn to the right if the left side is greater
Set_Left(RPIVOT_L, FORWARD);
 80036c0:	2101      	movs	r1, #1
 80036c2:	208c      	movs	r0, #140	; 0x8c
 80036c4:	f7ff ff4c 	bl	8003560 <Set_Left>
Set_Right(RPIVOT_R, BACKWARD);
 80036c8:	2100      	movs	r1, #0
 80036ca:	e7f1      	b.n	80036b0 <Dead_End_Correct+0xb0>

do {
l_count = __HAL_TIM_GET_COUNTER(&htim1);
r_count = __HAL_TIM_GET_COUNTER(&htim4);

} while (r_count < 400 && l_count < 400);
 80036cc:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 80036d0:	d204      	bcs.n	80036dc <Dead_End_Correct+0xdc>
Set_Left(RPIVOT_L, FORWARD);
Set_Right(RPIVOT_R, BACKWARD);
}

do {
l_count = __HAL_TIM_GET_COUNTER(&htim1);
 80036d2:	6a4a      	ldr	r2, [r1, #36]	; 0x24
r_count = __HAL_TIM_GET_COUNTER(&htim4);
 80036d4:	6a43      	ldr	r3, [r0, #36]	; 0x24

} while (r_count < 400 && l_count < 400);
 80036d6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80036da:	d3f7      	bcc.n	80036cc <Dead_End_Correct+0xcc>
 80036dc:	4921      	ldr	r1, [pc, #132]	; (8003764 <Dead_End_Correct+0x164>)
 80036de:	600a      	str	r2, [r1, #0]
 80036e0:	4a21      	ldr	r2, [pc, #132]	; (8003768 <Dead_End_Correct+0x168>)
 80036e2:	6013      	str	r3, [r2, #0]

while (abs(dif_l - dif_r) < 75) { //should be perfectly facing the other wall
 80036e4:	682b      	ldr	r3, [r5, #0]
 80036e6:	6822      	ldr	r2, [r4, #0]
 80036e8:	1a9b      	subs	r3, r3, r2
 80036ea:	334a      	adds	r3, #74	; 0x4a
 80036ec:	2b94      	cmp	r3, #148	; 0x94
 80036ee:	d802      	bhi.n	80036f6 <Dead_End_Correct+0xf6>
	Get_IR();
 80036f0:	f7ff fe76 	bl	80033e0 <Get_IR>
 80036f4:	e7f6      	b.n	80036e4 <Dead_End_Correct+0xe4>
}


Set_Left(FWD_L, FORWARD);
 80036f6:	2101      	movs	r1, #1
 80036f8:	2087      	movs	r0, #135	; 0x87
Set_Right(FWD_R, FORWARD);

while ((dif_r < 3500 && dif_l < 3500) && (abs(dif_l - dif_r) > 75)) { //should be perfectly facing the other wall
 80036fa:	f640 56ab 	movw	r6, #3499	; 0xdab
while (abs(dif_l - dif_r) < 75) { //should be perfectly facing the other wall
	Get_IR();
}


Set_Left(FWD_L, FORWARD);
 80036fe:	f7ff ff2f 	bl	8003560 <Set_Left>
Set_Right(FWD_R, FORWARD);
 8003702:	2101      	movs	r1, #1
 8003704:	2078      	movs	r0, #120	; 0x78
 8003706:	f7ff ff53 	bl	80035b0 <Set_Right>

while ((dif_r < 3500 && dif_l < 3500) && (abs(dif_l - dif_r) > 75)) { //should be perfectly facing the other wall
 800370a:	6822      	ldr	r2, [r4, #0]
 800370c:	42b2      	cmp	r2, r6
 800370e:	dc0b      	bgt.n	8003728 <Dead_End_Correct+0x128>
 8003710:	682b      	ldr	r3, [r5, #0]
 8003712:	42b3      	cmp	r3, r6
 8003714:	dc08      	bgt.n	8003728 <Dead_End_Correct+0x128>
 8003716:	1a9b      	subs	r3, r3, r2
 8003718:	2b00      	cmp	r3, #0
 800371a:	bfb8      	it	lt
 800371c:	425b      	neglt	r3, r3
 800371e:	2b4b      	cmp	r3, #75	; 0x4b
 8003720:	dd02      	ble.n	8003728 <Dead_End_Correct+0x128>
	Get_IR();
 8003722:	f7ff fe5d 	bl	80033e0 <Get_IR>
 8003726:	e7f0      	b.n	800370a <Dead_End_Correct+0x10a>
}

//pivot again and move laterally until the front emitters are equal aka align with one side wall
//pivot again and align with both side walls to be facing straight

HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, OFF);
 8003728:	2200      	movs	r2, #0
 800372a:	2110      	movs	r1, #16
 800372c:	480f      	ldr	r0, [pc, #60]	; (800376c <Dead_End_Correct+0x16c>)
 800372e:	f7fd fbaf 	bl	8000e90 <HAL_GPIO_WritePin>
Set_Left(0, FORWARD);
 8003732:	2101      	movs	r1, #1
 8003734:	2000      	movs	r0, #0
 8003736:	f7ff ff13 	bl	8003560 <Set_Left>
Set_Right(0, FORWARD);
 800373a:	2101      	movs	r1, #1
 800373c:	2000      	movs	r0, #0

}
 800373e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
//pivot again and move laterally until the front emitters are equal aka align with one side wall
//pivot again and align with both side walls to be facing straight

HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, OFF);
Set_Left(0, FORWARD);
Set_Right(0, FORWARD);
 8003742:	f7ff bf35 	b.w	80035b0 <Set_Right>
 8003746:	bf00      	nop
 8003748:	20000350 	.word	0x20000350
 800374c:	20000124 	.word	0x20000124
 8003750:	2000011c 	.word	0x2000011c
 8003754:	2000046c 	.word	0x2000046c
 8003758:	2000017c 	.word	0x2000017c
 800375c:	20000898 	.word	0x20000898
 8003760:	200004e8 	.word	0x200004e8
 8003764:	200003b8 	.word	0x200003b8
 8003768:	20000360 	.word	0x20000360
 800376c:	40020c00 	.word	0x40020c00

08003770 <Stop>:
	HAL_UART_Receive(&huart1, rx_buffer, len, 5000);
	Transmit("HAHA");

}

void Stop(void) {
 8003770:	b508      	push	{r3, lr}

	Set_Left(0, FORWARD);
 8003772:	2101      	movs	r1, #1
 8003774:	2000      	movs	r0, #0
 8003776:	f7ff fef3 	bl	8003560 <Set_Left>
	Set_Right(0, FORWARD); //STOP
 800377a:	2101      	movs	r1, #1
 800377c:	2000      	movs	r0, #0
 800377e:	f7ff ff17 	bl	80035b0 <Set_Right>
	if (debug_flag == TRUE) {
 8003782:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <Stop+0x40>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <Stop+0x1e>
	Send_Debug();
 800378a:	f7ff f9f9 	bl	8002b80 <Send_Debug>
	}
	Send_State();
 800378e:	f7ff f9a3 	bl	8002ad8 <Send_State>
	HAL_GPIO_WritePin(GPIOD, LED5_Pin, OFF);
 8003792:	2200      	movs	r2, #0
 8003794:	2102      	movs	r1, #2
 8003796:	4807      	ldr	r0, [pc, #28]	; (80037b4 <Stop+0x44>)
 8003798:	f7fd fb7a 	bl	8000e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4_Pin, OFF);
 800379c:	2200      	movs	r2, #0
 800379e:	2104      	movs	r1, #4
 80037a0:	4804      	ldr	r0, [pc, #16]	; (80037b4 <Stop+0x44>)
 80037a2:	f7fd fb75 	bl	8000e90 <HAL_GPIO_WritePin>
	stop_flag = TRUE;
 80037a6:	2201      	movs	r2, #1
 80037a8:	4b03      	ldr	r3, [pc, #12]	; (80037b8 <Stop+0x48>)
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	bd08      	pop	{r3, pc}
 80037ae:	bf00      	nop
 80037b0:	20000468 	.word	0x20000468
 80037b4:	40020c00 	.word	0x40020c00
 80037b8:	20000000 	.word	0x20000000

080037bc <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80037bc:	4b2d      	ldr	r3, [pc, #180]	; (8003874 <SystemClock_Config+0xb8>)
 80037be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000

return TRUE;
}

void SystemClock_Config(void)
{
 80037c4:	b510      	push	{r4, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80037c6:	641a      	str	r2, [r3, #64]	; 0x40

return TRUE;
}

void SystemClock_Config(void)
{
 80037c8:	b0b4      	sub	sp, #208	; 0xd0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80037ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80037cc:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037ce:	a807      	add	r0, sp, #28
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80037d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	9b00      	ldr	r3, [sp, #0]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80037d8:	4b27      	ldr	r3, [pc, #156]	; (8003878 <SystemClock_Config+0xbc>)
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80037e0:	601a      	str	r2, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80037e4:	9407      	str	r4, [sp, #28]

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80037e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037ea:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80037ec:	9411      	str	r4, [sp, #68]	; 0x44

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80037ee:	9301      	str	r3, [sp, #4]
 80037f0:	9b01      	ldr	r3, [sp, #4]

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037f2:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80037f4:	9412      	str	r4, [sp, #72]	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037f6:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80037f8:	2310      	movs	r3, #16
 80037fa:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80037fc:	2300      	movs	r3, #0
 80037fe:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003800:	2308      	movs	r3, #8
 8003802:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8003804:	23d8      	movs	r3, #216	; 0xd8
 8003806:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003808:	f7fd fb8e 	bl	8000f28 <HAL_RCC_OscConfig>
 800380c:	b108      	cbz	r0, 8003812 <SystemClock_Config+0x56>
  {
    Error_Handler();
 800380e:	f7ff fdc1 	bl	8003394 <Error_Handler>
  }

    /**Activate the Over-Drive mode
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003812:	f7fd fb51 	bl	8000eb8 <HAL_PWREx_EnableOverDrive>
 8003816:	2800      	cmp	r0, #0
 8003818:	d1f9      	bne.n	800380e <SystemClock_Config+0x52>
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800381a:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800381c:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800381e:	2107      	movs	r1, #7
 8003820:	a802      	add	r0, sp, #8
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003822:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003824:	f44f 53a0 	mov.w	r3, #5120	; 0x1400

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003828:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800382a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800382c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003830:	9306      	str	r3, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8003832:	f7fd fd53 	bl	80012dc <HAL_RCC_ClockConfig>
 8003836:	2800      	cmp	r0, #0
 8003838:	d1e9      	bne.n	800380e <SystemClock_Config+0x52>
  {
    Error_Handler();
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800383a:	2340      	movs	r3, #64	; 0x40
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800383c:	9024      	str	r0, [sp, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800383e:	a813      	add	r0, sp, #76	; 0x4c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
  {
    Error_Handler();
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003840:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003842:	f7fd fe2b 	bl	800149c <HAL_RCCEx_PeriphCLKConfig>
 8003846:	4604      	mov	r4, r0
 8003848:	2800      	cmp	r0, #0
 800384a:	d1e0      	bne.n	800380e <SystemClock_Config+0x52>
    Error_Handler();
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800384c:	f7fd fdf0 	bl	8001430 <HAL_RCC_GetHCLKFreq>
 8003850:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003854:	fbb0 f0f3 	udiv	r0, r0, r3
 8003858:	f7fd f828 	bl	80008ac <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800385c:	2004      	movs	r0, #4
 800385e:	f7fd f83b 	bl	80008d8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003862:	4622      	mov	r2, r4
 8003864:	4621      	mov	r1, r4
 8003866:	f04f 30ff 	mov.w	r0, #4294967295
 800386a:	f7fc ffdb 	bl	8000824 <HAL_NVIC_SetPriority>
}
 800386e:	b034      	add	sp, #208	; 0xd0
 8003870:	bd10      	pop	{r4, pc}
 8003872:	bf00      	nop
 8003874:	40023800 	.word	0x40023800
 8003878:	40007000 	.word	0x40007000

0800387c <main>:

enum {ADC_VAL_BUFFER_LENGTH = 32}; //DMA Buffer size
uint32_t ADC_valbuffer[ADC_VAL_BUFFER_LENGTH];

int main(void)
{
 800387c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8003880:	b0b5      	sub	sp, #212	; 0xd4


  /*Configure GPIO pins : RDIC_Pin LDIC_Pin GYRO_CS_Pin */
  GPIO_InitStruct.Pin = RDIC_Pin|LDIC_Pin|GYRO_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003882:	2400      	movs	r4, #0
{
   //STARTUP

  /* MCU Configuration----------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003884:	f7fc fd5a 	bl	800033c <HAL_Init>
  HAL_GPIO_WritePin(GPIOD, LED1_Pin, GPIO_PIN_SET);


  /*Configure GPIO pins : RDIC_Pin LDIC_Pin GYRO_CS_Pin */
  GPIO_InitStruct.Pin = RDIC_Pin|LDIC_Pin|GYRO_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003888:	2601      	movs	r6, #1

  /* MCU Configuration----------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
  /* Configure the system clock */
  SystemClock_Config();
 800388a:	f7ff ff97 	bl	80037bc <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800388e:	4b52      	ldr	r3, [pc, #328]	; (80039d8 <main+0x15c>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RDIC_Pin|LDIC_Pin, GPIO_PIN_RESET);
 8003890:	210a      	movs	r1, #10
 8003892:	4852      	ldr	r0, [pc, #328]	; (80039dc <main+0x160>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  //Configure GPIO pins : PC8 PC9
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003896:	f44f 7940 	mov.w	r9, #768	; 0x300
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800389a:	4d51      	ldr	r5, [pc, #324]	; (80039e0 <main+0x164>)
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800389c:	f44f 3780 	mov.w	r7, #65536	; 0x10000
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038a0:	f042 0201 	orr.w	r2, r2, #1
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.NbrOfDiscConversion = 0;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
 80038a4:	f04f 0a04 	mov.w	sl, #4
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038a8:	631a      	str	r2, [r3, #48]	; 0x30
 80038aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038ac:	f002 0201 	and.w	r2, r2, #1
 80038b0:	9208      	str	r2, [sp, #32]
 80038b2:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038b6:	f042 0204 	orr.w	r2, r2, #4
 80038ba:	631a      	str	r2, [r3, #48]	; 0x30
 80038bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038be:	f002 0204 	and.w	r2, r2, #4
 80038c2:	9209      	str	r2, [sp, #36]	; 0x24
 80038c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038c8:	f042 0202 	orr.w	r2, r2, #2
 80038cc:	631a      	str	r2, [r3, #48]	; 0x30
 80038ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038d0:	f002 0202 	and.w	r2, r2, #2
 80038d4:	920a      	str	r2, [sp, #40]	; 0x28
 80038d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80038d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038da:	f042 0210 	orr.w	r2, r2, #16
 80038de:	631a      	str	r2, [r3, #48]	; 0x30
 80038e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038e2:	f002 0210 	and.w	r2, r2, #16
 80038e6:	920b      	str	r2, [sp, #44]	; 0x2c
 80038e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80038ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038ec:	f042 0208 	orr.w	r2, r2, #8
 80038f0:	631a      	str	r2, [r3, #48]	; 0x30

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RDIC_Pin|LDIC_Pin, GPIO_PIN_RESET);
 80038f2:	2200      	movs	r2, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f6:	f003 0308 	and.w	r3, r3, #8
 80038fa:	930c      	str	r3, [sp, #48]	; 0x30
 80038fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RDIC_Pin|LDIC_Pin, GPIO_PIN_RESET);
 80038fe:	f7fd fac7 	bl	8000e90 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GYRO_CS_Pin, GPIO_PIN_SET);
 8003902:	2201      	movs	r2, #1
 8003904:	2110      	movs	r1, #16
 8003906:	4835      	ldr	r0, [pc, #212]	; (80039dc <main+0x160>)
 8003908:	f7fd fac2 	bl	8000e90 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LED5_Pin|LED4_Pin|LED3_Pin|LED2_Pin , GPIO_PIN_RESET);
 800390c:	2200      	movs	r2, #0
 800390e:	211e      	movs	r1, #30
 8003910:	4834      	ldr	r0, [pc, #208]	; (80039e4 <main+0x168>)
 8003912:	f7fd fabd 	bl	8000e90 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LED1_Pin, GPIO_PIN_SET);
 8003916:	2201      	movs	r2, #1
 8003918:	2120      	movs	r1, #32
 800391a:	4832      	ldr	r0, [pc, #200]	; (80039e4 <main+0x168>)
 800391c:	f7fd fab8 	bl	8000e90 <HAL_GPIO_WritePin>


  /*Configure GPIO pins : RDIC_Pin LDIC_Pin GYRO_CS_Pin */
  GPIO_InitStruct.Pin = RDIC_Pin|LDIC_Pin|GYRO_CS_Pin;
 8003920:	231a      	movs	r3, #26
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003922:	a92b      	add	r1, sp, #172	; 0xac
 8003924:	482d      	ldr	r0, [pc, #180]	; (80039dc <main+0x160>)
  HAL_GPIO_WritePin(GPIOD, LED5_Pin|LED4_Pin|LED3_Pin|LED2_Pin , GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOD, LED1_Pin, GPIO_PIN_SET);


  /*Configure GPIO pins : RDIC_Pin LDIC_Pin GYRO_CS_Pin */
  GPIO_InitStruct.Pin = RDIC_Pin|LDIC_Pin|GYRO_CS_Pin;
 8003926:	932b      	str	r3, [sp, #172]	; 0xac
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003928:	962c      	str	r6, [sp, #176]	; 0xb0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392a:	942d      	str	r4, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800392c:	942e      	str	r4, [sp, #184]	; 0xb8
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800392e:	f7fd f9c3 	bl	8000cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
 8003932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 8003936:	a92b      	add	r1, sp, #172	; 0xac
 8003938:	482a      	ldr	r0, [pc, #168]	; (80039e4 <main+0x168>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
 800393a:	932b      	str	r3, [sp, #172]	; 0xac
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800393c:	952c      	str	r5, [sp, #176]	; 0xb0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393e:	942d      	str	r4, [sp, #180]	; 0xb4
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 8003940:	f7fd f9ba 	bl	8000cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin;
 8003944:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);
 8003946:	a92b      	add	r1, sp, #172	; 0xac
 8003948:	4827      	ldr	r0, [pc, #156]	; (80039e8 <main+0x16c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin;
 800394a:	932b      	str	r3, [sp, #172]	; 0xac
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800394c:	952c      	str	r5, [sp, #176]	; 0xb0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394e:	942d      	str	r4, [sp, #180]	; 0xb4
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);
 8003950:	f7fd f9b2 	bl	8000cb8 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8003954:	4622      	mov	r2, r4
 8003956:	2102      	movs	r1, #2
 8003958:	2028      	movs	r0, #40	; 0x28

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 800395a:	4d24      	ldr	r5, [pc, #144]	; (80039ec <main+0x170>)
  GPIO_InitStruct.Pin = BUTTON2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 800395c:	f7fc ff62 	bl	8000824 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003960:	2028      	movs	r0, #40	; 0x28
 8003962:	f7fc ff97 	bl	8000894 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8003966:	4622      	mov	r2, r4
 8003968:	4631      	mov	r1, r6
 800396a:	2017      	movs	r0, #23
 800396c:	f7fc ff5a 	bl	8000824 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003970:	2017      	movs	r0, #23
 8003972:	f7fc ff8f 	bl	8000894 <HAL_NVIC_EnableIRQ>

  /*Configure GPIO pins : LED5_Pin LED4_Pin LED3_Pin LED2_Pin 
                           LED1_Pin */
  GPIO_InitStruct.Pin = LED5_Pin|LED4_Pin|LED3_Pin|LED2_Pin 
 8003976:	233e      	movs	r3, #62	; 0x3e
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003978:	a92b      	add	r1, sp, #172	; 0xac
 800397a:	481a      	ldr	r0, [pc, #104]	; (80039e4 <main+0x168>)
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

  /*Configure GPIO pins : LED5_Pin LED4_Pin LED3_Pin LED2_Pin 
                           LED1_Pin */
  GPIO_InitStruct.Pin = LED5_Pin|LED4_Pin|LED3_Pin|LED2_Pin 
 800397c:	932b      	str	r3, [sp, #172]	; 0xac
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800397e:	962c      	str	r6, [sp, #176]	; 0xb0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003980:	942d      	str	r4, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003982:	942e      	str	r4, [sp, #184]	; 0xb8
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003984:	f7fd f998 	bl	8000cb8 <HAL_GPIO_Init>
  //Configure GPIO pins : PC8 PC9
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003988:	a92b      	add	r1, sp, #172	; 0xac
 800398a:	4817      	ldr	r0, [pc, #92]	; (80039e8 <main+0x16c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  //Configure GPIO pins : PC8 PC9
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800398c:	f8cd 90ac 	str.w	r9, [sp, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003990:	962c      	str	r6, [sp, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003992:	942d      	str	r4, [sp, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003994:	942e      	str	r4, [sp, #184]	; 0xb8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003996:	f7fd f98f 	bl	8000cb8 <HAL_GPIO_Init>

   //Configure GPIO pins : PB4 PB5
      GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800399a:	2330      	movs	r3, #48	; 0x30
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800399c:	4814      	ldr	r0, [pc, #80]	; (80039f0 <main+0x174>)
 800399e:	a92b      	add	r1, sp, #172	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

   //Configure GPIO pins : PB4 PB5
      GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039a0:	962c      	str	r6, [sp, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

   //Configure GPIO pins : PB4 PB5
      GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80039a2:	932b      	str	r3, [sp, #172]	; 0xac
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a4:	942d      	str	r4, [sp, #180]	; 0xb4
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039a6:	942e      	str	r4, [sp, #184]	; 0xb8
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039a8:	f7fd f986 	bl	8000cb8 <HAL_GPIO_Init>
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80039ac:	4b11      	ldr	r3, [pc, #68]	; (80039f4 <main+0x178>)
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.EOCSelection = DISABLE;

  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80039ae:	4628      	mov	r0, r5

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80039b0:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80039b2:	612e      	str	r6, [r5, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80039b4:	61ae      	str	r6, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80039b6:	622c      	str	r4, [r5, #32]
  hadc1.Init.NbrOfDiscConversion = 0;
 80039b8:	626c      	str	r4, [r5, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80039ba:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 80039bc:	62ac      	str	r4, [r5, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80039be:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 4;
 80039c0:	f8c5 a01c 	str.w	sl, [r5, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80039c4:	632e      	str	r6, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = DISABLE;
 80039c6:	616c      	str	r4, [r5, #20]
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80039c8:	e885 0088 	stmia.w	r5, {r3, r7}
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.EOCSelection = DISABLE;

  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80039cc:	f7fc fcde 	bl	800038c <HAL_ADC_Init>
 80039d0:	b190      	cbz	r0, 80039f8 <main+0x17c>
  {
    Error_Handler();
 80039d2:	f7ff fcdf 	bl	8003394 <Error_Handler>
 80039d6:	bf00      	nop
 80039d8:	40023800 	.word	0x40023800
 80039dc:	40020000 	.word	0x40020000
 80039e0:	10210000 	.word	0x10210000
 80039e4:	40020c00 	.word	0x40020c00
 80039e8:	40020800 	.word	0x40020800
 80039ec:	200006fc 	.word	0x200006fc
 80039f0:	40020400 	.word	0x40020400
 80039f4:	40012000 	.word	0x40012000
  }


  sConfig.Channel = ADC_CHANNEL_14; //l receiver
 80039f8:	230e      	movs	r3, #14
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
  sConfig.Offset = 0;
 80039fa:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039fc:	a910      	add	r1, sp, #64	; 0x40
 80039fe:	4628      	mov	r0, r5
  {
    Error_Handler();
  }


  sConfig.Channel = ADC_CHANNEL_14; //l receiver
 8003a00:	9310      	str	r3, [sp, #64]	; 0x40
  sConfig.Rank = 1;
 8003a02:	9611      	str	r6, [sp, #68]	; 0x44
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8003a04:	9612      	str	r6, [sp, #72]	; 0x48
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a06:	f7fc fe5b 	bl	80006c0 <HAL_ADC_ConfigChannel>
 8003a0a:	2800      	cmp	r0, #0
 8003a0c:	d1e1      	bne.n	80039d2 <main+0x156>
  {

    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_15; //lf receiver
 8003a0e:	230f      	movs	r3, #15
  sConfig.Rank = 2;
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
  sConfig.Offset = 0;
 8003a10:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a12:	a910      	add	r1, sp, #64	; 0x40
 8003a14:	4628      	mov	r0, r5
  {

    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_15; //lf receiver
 8003a16:	9310      	str	r3, [sp, #64]	; 0x40
  sConfig.Rank = 2;
 8003a18:	2302      	movs	r3, #2
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8003a1a:	9612      	str	r6, [sp, #72]	; 0x48

    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_15; //lf receiver
  sConfig.Rank = 2;
 8003a1c:	9311      	str	r3, [sp, #68]	; 0x44
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a1e:	f7fc fe4f 	bl	80006c0 <HAL_ADC_ConfigChannel>
 8003a22:	2800      	cmp	r0, #0
 8003a24:	d1d5      	bne.n	80039d2 <main+0x156>
  {

    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_8; //rf receiver
 8003a26:	2708      	movs	r7, #8
  sConfig.Rank = 3;
 8003a28:	f04f 0803 	mov.w	r8, #3
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
  sConfig.Offset = 0;
 8003a2c:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a2e:	a910      	add	r1, sp, #64	; 0x40
 8003a30:	4628      	mov	r0, r5
  {

    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_8; //rf receiver
 8003a32:	9710      	str	r7, [sp, #64]	; 0x40
  sConfig.Rank = 3;
 8003a34:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8003a38:	9612      	str	r6, [sp, #72]	; 0x48
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a3a:	f7fc fe41 	bl	80006c0 <HAL_ADC_ConfigChannel>
 8003a3e:	2800      	cmp	r0, #0
 8003a40:	d1c7      	bne.n	80039d2 <main+0x156>
  {

    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_9; //r receiver
 8003a42:	2309      	movs	r3, #9
  sConfig.Rank = 4;
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
  sConfig.Offset = 0;
 8003a44:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a46:	a910      	add	r1, sp, #64	; 0x40
 8003a48:	4628      	mov	r0, r5
  {

    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_9; //r receiver
 8003a4a:	9310      	str	r3, [sp, #64]	; 0x40
  sConfig.Rank = 4;
 8003a4c:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8003a50:	9612      	str	r6, [sp, #72]	; 0x48
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a52:	f7fc fe35 	bl	80006c0 <HAL_ADC_ConfigChannel>
 8003a56:	2800      	cmp	r0, #0
 8003a58:	d1bb      	bne.n	80039d2 <main+0x156>

/* SPI1 init function */
static void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 8003a5a:	4ba3      	ldr	r3, [pc, #652]	; (8003ce8 <main+0x46c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003a5c:	f44f 7482 	mov.w	r4, #260	; 0x104
 8003a60:	4aa2      	ldr	r2, [pc, #648]	; (8003cec <main+0x470>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003a62:	6098      	str	r0, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a64:	6118      	str	r0, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a66:	6158      	str	r0, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a68:	61d8      	str	r0, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a6a:	6218      	str	r0, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a6c:	6258      	str	r0, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a6e:	6298      	str	r0, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003a70:	6318      	str	r0, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;

  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003a72:	4618      	mov	r0, r3
{

  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8003a74:	f8c3 900c 	str.w	r9, [r3, #12]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003a78:	635f      	str	r7, [r3, #52]	; 0x34
/* SPI1 init function */
static void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003a7a:	e883 0014 	stmia.w	r3, {r2, r4}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003a7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a82:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8003a84:	2207      	movs	r2, #7
 8003a86:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;

  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003a88:	f7fe f8ae 	bl	8001be8 <HAL_SPI_Init>
 8003a8c:	2800      	cmp	r0, #0
 8003a8e:	d1a0      	bne.n	80039d2 <main+0x156>
//LEFT ENCODER CHANNELS
static void MX_TIM1_Init(void)
{
  TIM_Encoder_InitTypeDef sConfig;

  htim1.Instance = TIM1;
 8003a90:	4c97      	ldr	r4, [pc, #604]	; (8003cf0 <main+0x474>)
  sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
  sConfig.IC2Filter = 0;

  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003a92:	a92b      	add	r1, sp, #172	; 0xac
//LEFT ENCODER CHANNELS
static void MX_TIM1_Init(void)
{
  TIM_Encoder_InitTypeDef sConfig;

  htim1.Instance = TIM1;
 8003a94:	4b97      	ldr	r3, [pc, #604]	; (8003cf4 <main+0x478>)
  htim1.Init.Prescaler = 0;
 8003a96:	6060      	str	r0, [r4, #4]
//LEFT ENCODER CHANNELS
static void MX_TIM1_Init(void)
{
  TIM_Encoder_InitTypeDef sConfig;

  htim1.Instance = TIM1;
 8003a98:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 0xffff;
 8003a9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
  TIM_Encoder_InitTypeDef sConfig;

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a9e:	60a0      	str	r0, [r4, #8]
  htim1.Init.Period = 0xffff;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003aa0:	6120      	str	r0, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8003aa2:	6160      	str	r0, [r4, #20]

  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
  sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003aa4:	902c      	str	r0, [sp, #176]	; 0xb0
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
  sConfig.IC1Filter = 0;
 8003aa6:	902f      	str	r0, [sp, #188]	; 0xbc

  sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003aa8:	9030      	str	r0, [sp, #192]	; 0xc0
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
  sConfig.IC2Filter = 0;
 8003aaa:	9033      	str	r0, [sp, #204]	; 0xcc

  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003aac:	4620      	mov	r0, r4
  TIM_Encoder_InitTypeDef sConfig;

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 0xffff;
 8003aae:	60e3      	str	r3, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;

  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003ab0:	f8cd 80ac 	str.w	r8, [sp, #172]	; 0xac
  sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003ab4:	962d      	str	r6, [sp, #180]	; 0xb4
  sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8003ab6:	972e      	str	r7, [sp, #184]	; 0xb8
  sConfig.IC1Filter = 0;

  sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003ab8:	9631      	str	r6, [sp, #196]	; 0xc4
  sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8003aba:	9732      	str	r7, [sp, #200]	; 0xc8
  sConfig.IC2Filter = 0;

  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003abc:	f7fe face 	bl	800205c <HAL_TIM_Encoder_Init>
 8003ac0:	9404      	str	r4, [sp, #16]
 8003ac2:	2800      	cmp	r0, #0
 8003ac4:	d185      	bne.n	80039d2 <main+0x156>
  {
    Error_Handler();
  }

  if(HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL) != HAL_OK)
 8003ac6:	213c      	movs	r1, #60	; 0x3c
 8003ac8:	4620      	mov	r0, r4
 8003aca:	f7fe f95e 	bl	8001d8a <HAL_TIM_Encoder_Start_IT>
 8003ace:	2800      	cmp	r0, #0
 8003ad0:	f47f af7f 	bne.w	80039d2 <main+0x156>
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  //uhPrescalerValue = (uint32_t)((SystemCoreClock /2) / 18000000) - 1;

  htim2.Instance = TIM2;
 8003ad4:	4c88      	ldr	r4, [pc, #544]	; (8003cf8 <main+0x47c>)
  htim2.Init.Prescaler = 5;
 8003ad6:	2305      	movs	r3, #5
 8003ad8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003adc:	60a0      	str	r0, [r4, #8]
  htim2.Init.Period = 665;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ade:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003ae0:	4620      	mov	r0, r4
  TIM_OC_InitTypeDef sConfigOC;

  //uhPrescalerValue = (uint32_t)((SystemCoreClock /2) / 18000000) - 1;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 5;
 8003ae2:	e884 000a 	stmia.w	r4, {r1, r3}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 665;
 8003ae6:	f240 2399 	movw	r3, #665	; 0x299
 8003aea:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003aec:	f7fe fa9c 	bl	8002028 <HAL_TIM_PWM_Init>
 8003af0:	2800      	cmp	r0, #0
 8003af2:	f47f af6e 	bne.w	80039d2 <main+0x156>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003af6:	900d      	str	r0, [sp, #52]	; 0x34
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003af8:	a90d      	add	r1, sp, #52	; 0x34
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003afa:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003afc:	4620      	mov	r0, r4
 8003afe:	f7fe fcb5 	bl	800246c <HAL_TIMEx_MasterConfigSynchronization>
 8003b02:	2800      	cmp	r0, #0
 8003b04:	f47f af65 	bne.w	80039d2 <main+0x156>
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
 8003b08:	2200      	movs	r2, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b0a:	f04f 0860 	mov.w	r8, #96	; 0x60
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b0e:	a91b      	add	r1, sp, #108	; 0x6c
 8003b10:	4620      	mov	r0, r4
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b12:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
  sConfigOC.Pulse = 0;
 8003b16:	921c      	str	r2, [sp, #112]	; 0x70
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b18:	921d      	str	r2, [sp, #116]	; 0x74
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b1a:	921f      	str	r2, [sp, #124]	; 0x7c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b1c:	f7fe fc20 	bl	8002360 <HAL_TIM_PWM_ConfigChannel>
 8003b20:	2800      	cmp	r0, #0
 8003b22:	f47f af56 	bne.w	80039d2 <main+0x156>
  {
    Error_Handler();
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003b26:	4620      	mov	r0, r4
 8003b28:	463a      	mov	r2, r7
 8003b2a:	a91b      	add	r1, sp, #108	; 0x6c
 8003b2c:	f7fe fc18 	bl	8002360 <HAL_TIM_PWM_ConfigChannel>
 8003b30:	4604      	mov	r4, r0
 8003b32:	2800      	cmp	r0, #0
 8003b34:	f47f af4d 	bne.w	80039d2 <main+0x156>
  {
    Error_Handler();
  }
  HAL_TIM_MspPostInit(&htim2);
 8003b38:	486f      	ldr	r0, [pc, #444]	; (8003cf8 <main+0x47c>)
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim4.Init.RepetitionCounter = 0;

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003b3a:	2601      	movs	r6, #1

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  HAL_TIM_MspPostInit(&htim2);
 8003b3c:	f000 fbb8 	bl	80042b0 <HAL_TIM_MspPostInit>
//RIGHT ENCODER CHANNELS
static void MX_TIM4_Init(void)
{
	TIM_Encoder_InitTypeDef sConfig;

	htim4.Instance = TIM4;
 8003b40:	4d6e      	ldr	r5, [pc, #440]	; (8003cfc <main+0x480>)
 8003b42:	4b6f      	ldr	r3, [pc, #444]	; (8003d00 <main+0x484>)
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
	sConfig.IC2Filter = 0;

	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003b44:	a922      	add	r1, sp, #136	; 0x88
 8003b46:	4628      	mov	r0, r5
{
	TIM_Encoder_InitTypeDef sConfig;

	htim4.Instance = TIM4;
	htim4.Init.Prescaler = 0;
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b48:	60ac      	str	r4, [r5, #8]
	htim4.Init.Period = 0xffff;
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b4a:	612c      	str	r4, [r5, #16]
	htim4.Init.RepetitionCounter = 0;
 8003b4c:	616c      	str	r4, [r5, #20]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003b4e:	9423      	str	r4, [sp, #140]	; 0x8c
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003b50:	9624      	str	r6, [sp, #144]	; 0x90
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8003b52:	9725      	str	r7, [sp, #148]	; 0x94
	sConfig.IC1Filter = 0;
 8003b54:	9426      	str	r4, [sp, #152]	; 0x98

	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003b56:	9427      	str	r4, [sp, #156]	; 0x9c
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003b58:	9628      	str	r6, [sp, #160]	; 0xa0
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8003b5a:	9729      	str	r7, [sp, #164]	; 0xa4
	sConfig.IC2Filter = 0;
 8003b5c:	942a      	str	r4, [sp, #168]	; 0xa8
static void MX_TIM4_Init(void)
{
	TIM_Encoder_InitTypeDef sConfig;

	htim4.Instance = TIM4;
	htim4.Init.Prescaler = 0;
 8003b5e:	e885 0018 	stmia.w	r5, {r3, r4}
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim4.Init.Period = 0xffff;
 8003b62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b66:	60eb      	str	r3, [r5, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim4.Init.RepetitionCounter = 0;

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	9322      	str	r3, [sp, #136]	; 0x88
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
	sConfig.IC2Filter = 0;

	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003b6c:	f7fe fa76 	bl	800205c <HAL_TIM_Encoder_Init>
 8003b70:	9505      	str	r5, [sp, #20]
 8003b72:	2800      	cmp	r0, #0
 8003b74:	f47f af2d 	bne.w	80039d2 <main+0x156>
	{
	  Error_Handler();
	}

	if(HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL) != HAL_OK)
 8003b78:	213c      	movs	r1, #60	; 0x3c
 8003b7a:	4628      	mov	r0, r5
 8003b7c:	f7fe f905 	bl	8001d8a <HAL_TIM_Encoder_Start_IT>
 8003b80:	2800      	cmp	r0, #0
 8003b82:	f47f af26 	bne.w	80039d2 <main+0x156>
static void MX_TIM9_Init(void)
{

  TIM_OC_InitTypeDef sConfigOC;

  htim9.Instance = TIM9;
 8003b86:	4d5f      	ldr	r5, [pc, #380]	; (8003d04 <main+0x488>)
 8003b88:	4b5f      	ldr	r3, [pc, #380]	; (8003d08 <main+0x48c>)
  htim9.Init.Prescaler = 8;
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b8a:	60a8      	str	r0, [r5, #8]
  htim9.Init.Period = 3375;
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b8c:	6128      	str	r0, [r5, #16]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8003b8e:	4628      	mov	r0, r5
{

  TIM_OC_InitTypeDef sConfigOC;

  htim9.Instance = TIM9;
  htim9.Init.Prescaler = 8;
 8003b90:	e885 0088 	stmia.w	r5, {r3, r7}
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim9.Init.Period = 3375;
 8003b94:	f640 532f 	movw	r3, #3375	; 0xd2f
 8003b98:	60eb      	str	r3, [r5, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8003b9a:	f7fe fa45 	bl	8002028 <HAL_TIM_PWM_Init>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	2800      	cmp	r0, #0
 8003ba2:	f47f af16 	bne.w	80039d2 <main+0x156>
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 1790;
 8003ba6:	f240 63fe 	movw	r3, #1790	; 0x6fe
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003baa:	9016      	str	r0, [sp, #88]	; 0x58
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003bac:	9018      	str	r0, [sp, #96]	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003bae:	a914      	add	r1, sp, #80	; 0x50
 8003bb0:	4628      	mov	r0, r5
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bb2:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  sConfigOC.Pulse = 1790;
 8003bb6:	9315      	str	r3, [sp, #84]	; 0x54
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003bb8:	f7fe fbd2 	bl	8002360 <HAL_TIM_PWM_ConfigChannel>
 8003bbc:	4604      	mov	r4, r0
 8003bbe:	2800      	cmp	r0, #0
 8003bc0:	f47f af07 	bne.w	80039d2 <main+0x156>
  {
    Error_Handler();
  }
  HAL_TIM_MspPostInit(&htim9);
 8003bc4:	4628      	mov	r0, r5
 8003bc6:	f000 fb73 	bl	80042b0 <HAL_TIM_MspPostInit>
}

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
  huart1.Instance = USART1;
 8003bca:	4850      	ldr	r0, [pc, #320]	; (8003d0c <main+0x490>)
  huart1.Init.BaudRate = 115200;
 8003bcc:	4a50      	ldr	r2, [pc, #320]	; (8003d10 <main+0x494>)
 8003bce:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003bd2:	6084      	str	r4, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003bd4:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003bd6:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bd8:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bda:	61c4      	str	r4, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003bdc:	6204      	str	r4, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003bde:	6244      	str	r4, [r0, #36]	; 0x24

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 8003be0:	e880 000c 	stmia.w	r0, {r2, r3}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003be4:	230c      	movs	r3, #12
 8003be6:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003be8:	f7fe feb1 	bl	800294e <HAL_UART_Init>
 8003bec:	4604      	mov	r4, r0
 8003bee:	2800      	cmp	r0, #0
 8003bf0:	f47f aeef 	bne.w	80039d2 <main+0x156>

  //buzzer
  //HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);

  //start PWM for motors
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8003bf4:	4639      	mov	r1, r7
 8003bf6:	4840      	ldr	r0, [pc, #256]	; (8003cf8 <main+0x47c>)
 8003bf8:	f7fe fb48 	bl	800228c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003bfc:	4621      	mov	r1, r4
 8003bfe:	483e      	ldr	r0, [pc, #248]	; (8003cf8 <main+0x47c>)
 8003c00:	f7fe fb44 	bl	800228c <HAL_TIM_PWM_Start>

  Set_Left(0, FORWARD); //set mouse to sit
 8003c04:	4631      	mov	r1, r6
 8003c06:	4620      	mov	r0, r4
 8003c08:	f7ff fcaa 	bl	8003560 <Set_Left>
  Set_Right(0, FORWARD);
 8003c0c:	4631      	mov	r1, r6
 8003c0e:	4620      	mov	r0, r4
 8003c10:	f7ff fcce 	bl	80035b0 <Set_Right>


  //MAIN INFINITE PROGRAM LOOP aka ready loop
  while (1)
  {
	  if (stop_flag == FALSE || debug_flag == TRUE) { //press top button to activate IR sensors
 8003c14:	4b3f      	ldr	r3, [pc, #252]	; (8003d14 <main+0x498>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	b11b      	cbz	r3, 8003c22 <main+0x3a6>
 8003c1a:	4b3f      	ldr	r3, [pc, #252]	; (8003d18 <main+0x49c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d10b      	bne.n	8003c3a <main+0x3be>
	  Get_IR(); //get IR sensor readings. diff_x = on_x - off_x
 8003c22:	f7ff fbdd 	bl	80033e0 <Get_IR>
	  l_count = __HAL_TIM_GET_COUNTER(&htim1); //check left and right encoder counts for debug
 8003c26:	9b04      	ldr	r3, [sp, #16]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c2c:	4b3b      	ldr	r3, [pc, #236]	; (8003d1c <main+0x4a0>)
 8003c2e:	601a      	str	r2, [r3, #0]
	  r_count = __HAL_TIM_GET_COUNTER(&htim4);
 8003c30:	9b05      	ldr	r3, [sp, #20]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c36:	4b3a      	ldr	r3, [pc, #232]	; (8003d20 <main+0x4a4>)
 8003c38:	601a      	str	r2, [r3, #0]
	  }

	  if (stop_flag == FALSE && dif_l > 2000) { //start searching (place finger in front)
 8003c3a:	4b36      	ldr	r3, [pc, #216]	; (8003d14 <main+0x498>)
 8003c3c:	681c      	ldr	r4, [r3, #0]
 8003c3e:	2c00      	cmp	r4, #0
 8003c40:	f040 81a9 	bne.w	8003f96 <main+0x71a>
 8003c44:	4b37      	ldr	r3, [pc, #220]	; (8003d24 <main+0x4a8>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003c4c:	f340 81a3 	ble.w	8003f96 <main+0x71a>

      HAL_GPIO_WritePin(GPIOD, LED5_Pin, ON); //Turn on LEDs to indicate it is searching
 8003c50:	2201      	movs	r2, #1
 8003c52:	2102      	movs	r1, #2
 8003c54:	4834      	ldr	r0, [pc, #208]	; (8003d28 <main+0x4ac>)
	  HAL_Delay(1000); //delay before start to get finger out of the way

	  Reset_Counters();

	  r_turnflag = FALSE; //reset turn flags
 8003c56:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8003d40 <main+0x4c4>
	  r_count = __HAL_TIM_GET_COUNTER(&htim4);
	  }

	  if (stop_flag == FALSE && dif_l > 2000) { //start searching (place finger in front)

      HAL_GPIO_WritePin(GPIOD, LED5_Pin, ON); //Turn on LEDs to indicate it is searching
 8003c5a:	f7fd f919 	bl	8000e90 <HAL_GPIO_WritePin>

	  Reset_Counters();

	  r_turnflag = FALSE; //reset turn flags
	  l_turnflag = FALSE;
	  dead_flag = FALSE;
 8003c5e:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8003d44 <main+0x4c8>
	  }

	  if (stop_flag == FALSE && dif_l > 2000) { //start searching (place finger in front)

      HAL_GPIO_WritePin(GPIOD, LED5_Pin, ON); //Turn on LEDs to indicate it is searching
	  HAL_Delay(1000); //delay before start to get finger out of the way
 8003c62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	  l_turnflag = FALSE;
	  dead_flag = FALSE;
	  fwd_flag = FALSE;

	  cur_move = FWD; //reset to default direction
	  next_move = FWD;
 8003c66:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8003d48 <main+0x4cc>
	  }

	  if (stop_flag == FALSE && dif_l > 2000) { //start searching (place finger in front)

      HAL_GPIO_WritePin(GPIOD, LED5_Pin, ON); //Turn on LEDs to indicate it is searching
	  HAL_Delay(1000); //delay before start to get finger out of the way
 8003c6a:	f7fc fb81 	bl	8000370 <HAL_Delay>

	  Reset_Counters();

	  r_turnflag = FALSE; //reset turn flags
	  l_turnflag = FALSE;
 8003c6e:	4e2f      	ldr	r6, [pc, #188]	; (8003d2c <main+0x4b0>)
	  if (stop_flag == FALSE && dif_l > 2000) { //start searching (place finger in front)

      HAL_GPIO_WritePin(GPIOD, LED5_Pin, ON); //Turn on LEDs to indicate it is searching
	  HAL_Delay(1000); //delay before start to get finger out of the way

	  Reset_Counters();
 8003c70:	f7fe ff06 	bl	8002a80 <Reset_Counters>

	  r_turnflag = FALSE; //reset turn flags
	  l_turnflag = FALSE;
	  dead_flag = FALSE;
	  fwd_flag = FALSE;
 8003c74:	4f2e      	ldr	r7, [pc, #184]	; (8003d30 <main+0x4b4>)

	  //Read_Walls()
	  //Floodfill();
	  //Get_Next_Move();

	  Set_Left(FWD_L, FORWARD); //start going straight. get moving
 8003c76:	2101      	movs	r1, #1
	  r_turnflag = FALSE; //reset turn flags
	  l_turnflag = FALSE;
	  dead_flag = FALSE;
	  fwd_flag = FALSE;

	  cur_move = FWD; //reset to default direction
 8003c78:	4d2e      	ldr	r5, [pc, #184]	; (8003d34 <main+0x4b8>)

	  //Read_Walls()
	  //Floodfill();
	  //Get_Next_Move();

	  Set_Left(FWD_L, FORWARD); //start going straight. get moving
 8003c7a:	2087      	movs	r0, #135	; 0x87
      HAL_GPIO_WritePin(GPIOD, LED5_Pin, ON); //Turn on LEDs to indicate it is searching
	  HAL_Delay(1000); //delay before start to get finger out of the way

	  Reset_Counters();

	  r_turnflag = FALSE; //reset turn flags
 8003c7c:	f8ca 4000 	str.w	r4, [sl]
	  l_turnflag = FALSE;
 8003c80:	6034      	str	r4, [r6, #0]
	  dead_flag = FALSE;
 8003c82:	f8c9 4000 	str.w	r4, [r9]
	  fwd_flag = FALSE;
 8003c86:	603c      	str	r4, [r7, #0]

	  cur_move = FWD; //reset to default direction
 8003c88:	602c      	str	r4, [r5, #0]
	  next_move = FWD;
 8003c8a:	f8c8 4000 	str.w	r4, [r8]
 8003c8e:	4644      	mov	r4, r8
 8003c90:	f8df b088 	ldr.w	fp, [pc, #136]	; 8003d1c <main+0x4a0>

	  //Read_Walls()
	  //Floodfill();
	  //Get_Next_Move();

	  Set_Left(FWD_L, FORWARD); //start going straight. get moving
 8003c94:	f7ff fc64 	bl	8003560 <Set_Left>
	  Set_Right(FWD_R, FORWARD);
 8003c98:	2101      	movs	r1, #1
 8003c9a:	2078      	movs	r0, #120	; 0x78
 8003c9c:	f7ff fc88 	bl	80035b0 <Set_Right>
 8003ca0:	f8cd a00c 	str.w	sl, [sp, #12]
 8003ca4:	f8cd 9018 	str.w	r9, [sp, #24]

	  while(1) { //searching loop //while(maze[x_coord][y_coord] != 0)

	  Get_IR(); //get IR readings
 8003ca8:	f7ff fb9a 	bl	80033e0 <Get_IR>

	  if  (cur_move == FWD /*|| r_turnflag == TRUE || l_turnflag == TRUE */) {
 8003cac:	682a      	ldr	r2, [r5, #0]
 8003cae:	b9a2      	cbnz	r2, 8003cda <main+0x45e>
	  m_correction = Motor_Correction(dif_lf, dif_rf, FALSE);
 8003cb0:	4b21      	ldr	r3, [pc, #132]	; (8003d38 <main+0x4bc>)
 8003cb2:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8003d4c <main+0x4d0>
 8003cb6:	6819      	ldr	r1, [r3, #0]
 8003cb8:	4b20      	ldr	r3, [pc, #128]	; (8003d3c <main+0x4c0>)
 8003cba:	6818      	ldr	r0, [r3, #0]
 8003cbc:	f7fe fea2 	bl	8002a04 <Motor_Correction>
	  Set_Left(FWD_L + m_correction, FORWARD);
 8003cc0:	2101      	movs	r1, #1
	  while(1) { //searching loop //while(maze[x_coord][y_coord] != 0)

	  Get_IR(); //get IR readings

	  if  (cur_move == FWD /*|| r_turnflag == TRUE || l_turnflag == TRUE */) {
	  m_correction = Motor_Correction(dif_lf, dif_rf, FALSE);
 8003cc2:	f8c8 0000 	str.w	r0, [r8]
	  Set_Left(FWD_L + m_correction, FORWARD);
 8003cc6:	3087      	adds	r0, #135	; 0x87
 8003cc8:	f7ff fc4a 	bl	8003560 <Set_Left>
	  Set_Right(FWD_R - m_correction, FORWARD);
 8003ccc:	f8d8 0000 	ldr.w	r0, [r8]
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	f1c0 0078 	rsb	r0, r0, #120	; 0x78
 8003cd6:	f7ff fc6b 	bl	80035b0 <Set_Right>
	  //motor correction for straight part of turn and FWD moving
	  }


	  if (Emergency_Stop()) {
 8003cda:	f7fe fe6b 	bl	80029b4 <Emergency_Stop>
 8003cde:	b3b8      	cbz	r0, 8003d50 <main+0x4d4>
		  Stop();
 8003ce0:	f7ff fd46 	bl	8003770 <Stop>
		  break;
 8003ce4:	e157      	b.n	8003f96 <main+0x71a>
 8003ce6:	bf00      	nop
 8003ce8:	200009ec 	.word	0x200009ec
 8003cec:	40013000 	.word	0x40013000
 8003cf0:	20000898 	.word	0x20000898
 8003cf4:	40010000 	.word	0x40010000
 8003cf8:	20000a50 	.word	0x20000a50
 8003cfc:	200004e8 	.word	0x200004e8
 8003d00:	40000800 	.word	0x40000800
 8003d04:	200008d4 	.word	0x200008d4
 8003d08:	40014000 	.word	0x40014000
 8003d0c:	20000744 	.word	0x20000744
 8003d10:	40011000 	.word	0x40011000
 8003d14:	20000000 	.word	0x20000000
 8003d18:	20000468 	.word	0x20000468
 8003d1c:	200003b8 	.word	0x200003b8
 8003d20:	20000360 	.word	0x20000360
 8003d24:	20000124 	.word	0x20000124
 8003d28:	40020c00 	.word	0x40020c00
 8003d2c:	200003bc 	.word	0x200003bc
 8003d30:	200001b0 	.word	0x200001b0
 8003d34:	200002ac 	.word	0x200002ac
 8003d38:	2000046c 	.word	0x2000046c
 8003d3c:	2000017c 	.word	0x2000017c
 8003d40:	200003b4 	.word	0x200003b4
 8003d44:	20000114 	.word	0x20000114
 8003d48:	20000118 	.word	0x20000118
 8003d4c:	2000011c 	.word	0x2000011c
	  }

	  l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
 8003d50:	9b04      	ldr	r3, [sp, #16]
	  r_count = __HAL_TIM_GET_COUNTER(&htim4);
	  lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
 8003d52:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 8004000 <main+0x784>
	  if (Emergency_Stop()) {
		  Stop();
		  break;
	  }

	  l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
 8003d56:	681b      	ldr	r3, [r3, #0]
	  r_count = __HAL_TIM_GET_COUNTER(&htim4);
	  lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
 8003d58:	f8d9 0000 	ldr.w	r0, [r9]
	  if (Emergency_Stop()) {
		  Stop();
		  break;
	  }

	  l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
 8003d5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d5e:	4b9e      	ldr	r3, [pc, #632]	; (8003fd8 <main+0x75c>)
	  r_count = __HAL_TIM_GET_COUNTER(&htim4);
	  lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
 8003d60:	1a10      	subs	r0, r2, r0
		  Stop();
		  break;
	  }

	  l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
	  r_count = __HAL_TIM_GET_COUNTER(&htim4);
 8003d62:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 8004004 <main+0x788>
	  if (Emergency_Stop()) {
		  Stop();
		  break;
	  }

	  l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
 8003d66:	601a      	str	r2, [r3, #0]
	  r_count = __HAL_TIM_GET_COUNTER(&htim4);
 8003d68:	9b05      	ldr	r3, [sp, #20]
	  lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
	  renc_diff = r_count - prev_r_count;
 8003d6a:	4a9c      	ldr	r2, [pc, #624]	; (8003fdc <main+0x760>)
		  Stop();
		  break;
	  }

	  l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
	  r_count = __HAL_TIM_GET_COUNTER(&htim4);
 8003d6c:	681b      	ldr	r3, [r3, #0]
	  lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
	  renc_diff = r_count - prev_r_count;
 8003d6e:	6811      	ldr	r1, [r2, #0]
		  Stop();
		  break;
	  }

	  l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
	  r_count = __HAL_TIM_GET_COUNTER(&htim4);
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
 8003d72:	f8df a294 	ldr.w	sl, [pc, #660]	; 8004008 <main+0x78c>
		  Stop();
		  break;
	  }

	  l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
	  r_count = __HAL_TIM_GET_COUNTER(&htim4);
 8003d76:	f8c8 3000 	str.w	r3, [r8]
	  lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
	  renc_diff = r_count - prev_r_count;
 8003d7a:	1a5b      	subs	r3, r3, r1
 8003d7c:	4998      	ldr	r1, [pc, #608]	; (8003fe0 <main+0x764>)
		  break;
	  }

	  l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
	  r_count = __HAL_TIM_GET_COUNTER(&htim4);
	  lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
 8003d7e:	f8ca 0000 	str.w	r0, [sl]
	  renc_diff = r_count - prev_r_count;
 8003d82:	600b      	str	r3, [r1, #0]

	  switch (cur_move) { //main case statement. While moving, check distance traveled. If 1 unit has been covered, execute next move
 8003d84:	6829      	ldr	r1, [r5, #0]
 8003d86:	2903      	cmp	r1, #3
 8003d88:	d88e      	bhi.n	8003ca8 <main+0x42c>
 8003d8a:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003d8e:	0004      	.short	0x0004
 8003d90:	004a008b 	.word	0x004a008b
 8003d94:	00ea      	.short	0x00ea
	  	  	  	  	  	  //will eventually combine with above statement
	  case FWD:
	  if (fwd_flag == FALSE && (lenc_diff >= F_LENC1 || renc_diff >= F_RENC1)) {
 8003d96:	6839      	ldr	r1, [r7, #0]
 8003d98:	b981      	cbnz	r1, 8003dbc <main+0x540>
 8003d9a:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 8003d9e:	d202      	bcs.n	8003da6 <main+0x52a>
 8003da0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003da4:	d30a      	bcc.n	8003dbc <main+0x540>
		  //Update_Position();
		  //if(!Get_Next_Move()) {
		  //Floodfill();
		  //Get_Next_Move();
		  //}
		  fwd_flag = TRUE;
 8003da6:	2301      	movs	r3, #1
 8003da8:	9207      	str	r2, [sp, #28]
 8003daa:	603b      	str	r3, [r7, #0]
		  Get_IR();
 8003dac:	f7ff fb18 	bl	80033e0 <Get_IR>
		  next_move = Get_Next_Dumb();
 8003db0:	f7ff fa28 	bl	8003204 <Get_Next_Dumb>
 8003db4:	6020      	str	r0, [r4, #0]
		  Save_State();
 8003db6:	f7fe ff47 	bl	8002c48 <Save_State>
 8003dba:	9a07      	ldr	r2, [sp, #28]
		  // place where you can read walls, not quite to end of unit
	  }
	  if (fwd_flag == TRUE && (lenc_diff >= F_LENC2 || renc_diff >= F_RENC2)) { //left and right wheel moving at same speed. If statement checks if distance has been covered
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	f47f af72 	bne.w	8003ca8 <main+0x42c>
 8003dc4:	f8da 3000 	ldr.w	r3, [sl]
 8003dc8:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
 8003dcc:	d805      	bhi.n	8003dda <main+0x55e>
 8003dce:	4b84      	ldr	r3, [pc, #528]	; (8003fe0 <main+0x764>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
 8003dd6:	f67f af67 	bls.w	8003ca8 <main+0x42c>

		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8003dda:	2108      	movs	r1, #8
 8003ddc:	4881      	ldr	r0, [pc, #516]	; (8003fe4 <main+0x768>)
 8003dde:	9207      	str	r2, [sp, #28]
 8003de0:	f7fd f85a 	bl	8000e98 <HAL_GPIO_TogglePin>

		prev_l_count = l_count; //no change. keep going straight. Save encoder values
 8003de4:	f8db 3000 	ldr.w	r3, [fp]
		prev_r_count = r_count;
 8003de8:	9a07      	ldr	r2, [sp, #28]
	  }
	  if (fwd_flag == TRUE && (lenc_diff >= F_LENC2 || renc_diff >= F_RENC2)) { //left and right wheel moving at same speed. If statement checks if distance has been covered

		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);

		prev_l_count = l_count; //no change. keep going straight. Save encoder values
 8003dea:	f8c9 3000 	str.w	r3, [r9]
		prev_r_count = r_count;
		fwd_flag = FALSE;
 8003dee:	f04f 0900 	mov.w	r9, #0
	  if (fwd_flag == TRUE && (lenc_diff >= F_LENC2 || renc_diff >= F_RENC2)) { //left and right wheel moving at same speed. If statement checks if distance has been covered

		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);

		prev_l_count = l_count; //no change. keep going straight. Save encoder values
		prev_r_count = r_count;
 8003df2:	f8d8 3000 	ldr.w	r3, [r8]
		fwd_flag = FALSE;

	    switch (next_move) { //check if motor speeds have to change with next move
 8003df6:	f8d4 8000 	ldr.w	r8, [r4]
	  if (fwd_flag == TRUE && (lenc_diff >= F_LENC2 || renc_diff >= F_RENC2)) { //left and right wheel moving at same speed. If statement checks if distance has been covered

		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);

		prev_l_count = l_count; //no change. keep going straight. Save encoder values
		prev_r_count = r_count;
 8003dfa:	6013      	str	r3, [r2, #0]
		fwd_flag = FALSE;

	    switch (next_move) { //check if motor speeds have to change with next move
 8003dfc:	f1b8 0f01 	cmp.w	r8, #1

		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);

		prev_l_count = l_count; //no change. keep going straight. Save encoder values
		prev_r_count = r_count;
		fwd_flag = FALSE;
 8003e00:	f8c7 9000 	str.w	r9, [r7]

	    switch (next_move) { //check if motor speeds have to change with next move
 8003e04:	d00a      	beq.n	8003e1c <main+0x5a0>
 8003e06:	f1b8 0f02 	cmp.w	r8, #2
 8003e0a:	f040 80a8 	bne.w	8003f5e <main+0x6e2>
	    case FWD:
	    break;

	    case RIGHT:
		Set_Left(RIGHT_L, FORWARD); //need to make right pivot
 8003e0e:	2101      	movs	r1, #1
 8003e10:	2087      	movs	r0, #135	; 0x87
 8003e12:	f7ff fba5 	bl	8003560 <Set_Left>
		Set_Right(RIGHT_R, FORWARD);
 8003e16:	2101      	movs	r1, #1
 8003e18:	4648      	mov	r0, r9
 8003e1a:	e09e      	b.n	8003f5a <main+0x6de>
		break;

	    case LEFT:
	    Set_Left(LEFT_L, FORWARD); //need to make left pivot
 8003e1c:	4641      	mov	r1, r8
 8003e1e:	4648      	mov	r0, r9
 8003e20:	e097      	b.n	8003f52 <main+0x6d6>
	  }
	  break;

	  case RIGHT: //break up turn into turn and accelerate

	  if ((r_turnflag == FALSE) && (lenc_diff >= RT_LENC_1 || renc_diff >= RT_RENC_1)) { //finished making turn. left and right wheel don't travel at same speeds
 8003e22:	9a03      	ldr	r2, [sp, #12]
 8003e24:	6812      	ldr	r2, [r2, #0]
 8003e26:	bb1a      	cbnz	r2, 8003e70 <main+0x5f4>
 8003e28:	f5b0 7fe6 	cmp.w	r0, #460	; 0x1cc
 8003e2c:	d201      	bcs.n	8003e32 <main+0x5b6>
 8003e2e:	2b27      	cmp	r3, #39	; 0x27
 8003e30:	d91e      	bls.n	8003e70 <main+0x5f4>

		  Set_Left(FWD_L, FORWARD); //finish turn by accelerating forward
 8003e32:	2101      	movs	r1, #1
 8003e34:	2087      	movs	r0, #135	; 0x87
 8003e36:	f7ff fb93 	bl	8003560 <Set_Left>
		  Set_Right(FWD_R, FORWARD);
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	2078      	movs	r0, #120	; 0x78
 8003e3e:	f7ff fbb7 	bl	80035b0 <Set_Right>
		  //Read_Walls();
		  //Update Position();
		  //Get_Next_Move();
		  r_turnflag = TRUE;
 8003e42:	9a03      	ldr	r2, [sp, #12]
 8003e44:	2301      	movs	r3, #1
 8003e46:	6013      	str	r3, [r2, #0]
		  prev_l_count = l_count; //save current counters
 8003e48:	f8db 3000 	ldr.w	r3, [fp]
		  prev_r_count = r_count;
 8003e4c:	f8d8 2000 	ldr.w	r2, [r8]
		  Set_Right(FWD_R, FORWARD);
		  //Read_Walls();
		  //Update Position();
		  //Get_Next_Move();
		  r_turnflag = TRUE;
		  prev_l_count = l_count; //save current counters
 8003e50:	f8c9 3000 	str.w	r3, [r9]
		  prev_r_count = r_count;
 8003e54:	4b61      	ldr	r3, [pc, #388]	; (8003fdc <main+0x760>)
 8003e56:	601a      	str	r2, [r3, #0]
		  lenc_diff = 0;
 8003e58:	2300      	movs	r3, #0
		  renc_diff = 0;
 8003e5a:	4a61      	ldr	r2, [pc, #388]	; (8003fe0 <main+0x764>)
		  //Update Position();
		  //Get_Next_Move();
		  r_turnflag = TRUE;
		  prev_l_count = l_count; //save current counters
		  prev_r_count = r_count;
		  lenc_diff = 0;
 8003e5c:	f8ca 3000 	str.w	r3, [sl]
		  renc_diff = 0;
 8003e60:	6013      	str	r3, [r2, #0]
		  Get_IR();
 8003e62:	f7ff fabd 	bl	80033e0 <Get_IR>
		  next_move = Get_Next_Dumb();
 8003e66:	f7ff f9cd 	bl	8003204 <Get_Next_Dumb>
 8003e6a:	6020      	str	r0, [r4, #0]
		  Save_State();
 8003e6c:	f7fe feec 	bl	8002c48 <Save_State>
	  }

	  if ((r_turnflag == TRUE) && (lenc_diff >= RT_LENC_2 || renc_diff >= RT_RENC_2)) { //made it to same point. execute next direction
 8003e70:	9b03      	ldr	r3, [sp, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	f47f af17 	bne.w	8003ca8 <main+0x42c>
 8003e7a:	f8da 3000 	ldr.w	r3, [sl]
 8003e7e:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8003e82:	d205      	bcs.n	8003e90 <main+0x614>
 8003e84:	4b56      	ldr	r3, [pc, #344]	; (8003fe0 <main+0x764>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8003e8c:	f4ff af0c 	bcc.w	8003ca8 <main+0x42c>

		r_turnflag = FALSE;
 8003e90:	f04f 0a00 	mov.w	sl, #0
 8003e94:	9b03      	ldr	r3, [sp, #12]
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8003e96:	2108      	movs	r1, #8
 8003e98:	4852      	ldr	r0, [pc, #328]	; (8003fe4 <main+0x768>)
		  Save_State();
	  }

	  if ((r_turnflag == TRUE) && (lenc_diff >= RT_LENC_2 || renc_diff >= RT_RENC_2)) { //made it to same point. execute next direction

		r_turnflag = FALSE;
 8003e9a:	f8c3 a000 	str.w	sl, [r3]
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8003e9e:	f7fc fffb 	bl	8000e98 <HAL_GPIO_TogglePin>
 8003ea2:	e03d      	b.n	8003f20 <main+0x6a4>
	  } //case RIGHT
	  break;

	  case LEFT:

		  if ((l_turnflag == FALSE) && (lenc_diff >= LT_LENC_1 || renc_diff >= LT_RENC_1)) { //finished making turn. left and right wheel don't travel at same speeds
 8003ea4:	6832      	ldr	r2, [r6, #0]
 8003ea6:	bb12      	cbnz	r2, 8003eee <main+0x672>
 8003ea8:	2827      	cmp	r0, #39	; 0x27
 8003eaa:	d802      	bhi.n	8003eb2 <main+0x636>
 8003eac:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8003eb0:	d31d      	bcc.n	8003eee <main+0x672>

		  	  Set_Left(FWD_L, FORWARD); //finish turn by accelerating forward
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	2087      	movs	r0, #135	; 0x87
 8003eb6:	f7ff fb53 	bl	8003560 <Set_Left>
	  		  Set_Right(FWD_R, FORWARD);
 8003eba:	2101      	movs	r1, #1
 8003ebc:	2078      	movs	r0, #120	; 0x78
 8003ebe:	f7ff fb77 	bl	80035b0 <Set_Right>
	  		  //Read_Walls();
	  		  //Update Position();
	  		  //Get_Next_Move();
	  		  l_turnflag = TRUE;
 8003ec2:	2301      	movs	r3, #1
	  		  prev_l_count = l_count; //save current counters
	  		  prev_r_count = r_count;
 8003ec4:	f8d8 2000 	ldr.w	r2, [r8]
		  	  Set_Left(FWD_L, FORWARD); //finish turn by accelerating forward
	  		  Set_Right(FWD_R, FORWARD);
	  		  //Read_Walls();
	  		  //Update Position();
	  		  //Get_Next_Move();
	  		  l_turnflag = TRUE;
 8003ec8:	6033      	str	r3, [r6, #0]
	  		  prev_l_count = l_count; //save current counters
 8003eca:	f8db 3000 	ldr.w	r3, [fp]
 8003ece:	f8c9 3000 	str.w	r3, [r9]
	  		  prev_r_count = r_count;
 8003ed2:	4b42      	ldr	r3, [pc, #264]	; (8003fdc <main+0x760>)
 8003ed4:	601a      	str	r2, [r3, #0]
	  		  lenc_diff = 0;
 8003ed6:	2300      	movs	r3, #0
	  		  renc_diff = 0;
 8003ed8:	4a41      	ldr	r2, [pc, #260]	; (8003fe0 <main+0x764>)
	  		  //Update Position();
	  		  //Get_Next_Move();
	  		  l_turnflag = TRUE;
	  		  prev_l_count = l_count; //save current counters
	  		  prev_r_count = r_count;
	  		  lenc_diff = 0;
 8003eda:	f8ca 3000 	str.w	r3, [sl]
	  		  renc_diff = 0;
 8003ede:	6013      	str	r3, [r2, #0]
	  		  /*while((l_count - prev_l_count) < 75 && (r_count - prev_r_count) < 75) {
	  			l_count = __HAL_TIM_GET_COUNTER(&htim1); //check left and right encoder counts for debug
	  			r_count = __HAL_TIM_GET_COUNTER(&htim4);
	  		  } */
	  		  Get_IR();
 8003ee0:	f7ff fa7e 	bl	80033e0 <Get_IR>
	  		  next_move = Get_Next_Dumb();
 8003ee4:	f7ff f98e 	bl	8003204 <Get_Next_Dumb>
 8003ee8:	6020      	str	r0, [r4, #0]
	  		  Save_State();
 8003eea:	f7fe fead 	bl	8002c48 <Save_State>
		  	  }

		  if ((l_turnflag == TRUE) && (lenc_diff >= LT_LENC_2 || renc_diff >= LT_RENC_2)) { //made it to same point
 8003eee:	6833      	ldr	r3, [r6, #0]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	f47f aed9 	bne.w	8003ca8 <main+0x42c>
 8003ef6:	f8da 3000 	ldr.w	r3, [sl]
 8003efa:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8003efe:	d205      	bcs.n	8003f0c <main+0x690>
 8003f00:	4b37      	ldr	r3, [pc, #220]	; (8003fe0 <main+0x764>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8003f08:	f4ff aece 	bcc.w	8003ca8 <main+0x42c>

		  	l_turnflag = FALSE;
 8003f0c:	f04f 0a00 	mov.w	sl, #0
		  	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8003f10:	2108      	movs	r1, #8
 8003f12:	4834      	ldr	r0, [pc, #208]	; (8003fe4 <main+0x768>)
	  		  Save_State();
		  	  }

		  if ((l_turnflag == TRUE) && (lenc_diff >= LT_LENC_2 || renc_diff >= LT_RENC_2)) { //made it to same point

		  	l_turnflag = FALSE;
 8003f14:	f8c6 a000 	str.w	sl, [r6]
		  	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8003f18:	f7fc ffbe 	bl	8000e98 <HAL_GPIO_TogglePin>
		  	Save_State();
 8003f1c:	f7fe fe94 	bl	8002c48 <Save_State>
		  	prev_l_count = l_count; //save current counters
 8003f20:	f8db 3000 	ldr.w	r3, [fp]
		  	prev_r_count = r_count;
 8003f24:	f8d8 2000 	ldr.w	r2, [r8]

		    switch (next_move) { //need to change direction or nah
 8003f28:	f8d4 8000 	ldr.w	r8, [r4]
		  if ((l_turnflag == TRUE) && (lenc_diff >= LT_LENC_2 || renc_diff >= LT_RENC_2)) { //made it to same point

		  	l_turnflag = FALSE;
		  	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
		  	Save_State();
		  	prev_l_count = l_count; //save current counters
 8003f2c:	f8c9 3000 	str.w	r3, [r9]
		  	prev_r_count = r_count;

		    switch (next_move) { //need to change direction or nah
 8003f30:	f1b8 0f01 	cmp.w	r8, #1

		  	l_turnflag = FALSE;
		  	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
		  	Save_State();
		  	prev_l_count = l_count; //save current counters
		  	prev_r_count = r_count;
 8003f34:	4b29      	ldr	r3, [pc, #164]	; (8003fdc <main+0x760>)
 8003f36:	601a      	str	r2, [r3, #0]

		    switch (next_move) { //need to change direction or nah
 8003f38:	d009      	beq.n	8003f4e <main+0x6d2>
 8003f3a:	f1b8 0f02 	cmp.w	r8, #2
 8003f3e:	d10e      	bne.n	8003f5e <main+0x6e2>
		    Set_Left(LEFT_L, FORWARD); //need to make right turn again
		    Set_Right(LEFT_R, FORWARD);
		    break;

		    case RIGHT:
		    Set_Left(RIGHT_L, FORWARD); //need to make right turn again
 8003f40:	2101      	movs	r1, #1
 8003f42:	2087      	movs	r0, #135	; 0x87
 8003f44:	f7ff fb0c 	bl	8003560 <Set_Left>
		    Set_Right(RIGHT_R, FORWARD);
 8003f48:	2101      	movs	r1, #1
 8003f4a:	4650      	mov	r0, sl
 8003f4c:	e005      	b.n	8003f5a <main+0x6de>
		    case FWD:
		    //already going straight out of turn
            break;

		    case LEFT:
		    Set_Left(LEFT_L, FORWARD); //need to make right turn again
 8003f4e:	4641      	mov	r1, r8
 8003f50:	4650      	mov	r0, sl
 8003f52:	f7ff fb05 	bl	8003560 <Set_Left>
		    Set_Right(LEFT_R, FORWARD);
 8003f56:	4641      	mov	r1, r8
 8003f58:	2091      	movs	r0, #145	; 0x91
		    break;

		    case RIGHT:
		    Set_Left(RIGHT_L, FORWARD); //need to make right turn again
		    Set_Right(RIGHT_R, FORWARD);
 8003f5a:	f7ff fb29 	bl	80035b0 <Set_Right>
	    	break;

		    case DEAD:
		    break;
		    }
		    cur_move = next_move;
 8003f5e:	6823      	ldr	r3, [r4, #0]
 8003f60:	e017      	b.n	8003f92 <main+0x716>
     	  } //case LEFT
		  break;

	  case DEAD:
		  	 if (dead_flag == FALSE && (lenc_diff >= DEAD_LENC1 || renc_diff >= DEAD_RENC1)) {
 8003f62:	9a06      	ldr	r2, [sp, #24]
 8003f64:	6812      	ldr	r2, [r2, #0]
 8003f66:	2a00      	cmp	r2, #0
 8003f68:	f47f ae9e 	bne.w	8003ca8 <main+0x42c>
 8003f6c:	288b      	cmp	r0, #139	; 0x8b
 8003f6e:	d802      	bhi.n	8003f76 <main+0x6fa>
 8003f70:	2b8b      	cmp	r3, #139	; 0x8b
 8003f72:	f67f ae99 	bls.w	8003ca8 <main+0x42c>
		  	 Set_Left(0, FORWARD); //stop
 8003f76:	2101      	movs	r1, #1
 8003f78:	2000      	movs	r0, #0
 8003f7a:	f7ff faf1 	bl	8003560 <Set_Left>
		  	 Set_Right(0, FORWARD);
 8003f7e:	2101      	movs	r1, #1
 8003f80:	2000      	movs	r0, #0
 8003f82:	f7ff fb15 	bl	80035b0 <Set_Right>
		  	 Dead_End_Correct(); //should be aligned in middle of square
 8003f86:	f7ff fb3b 	bl	8003600 <Dead_End_Correct>
		  	 //Read_Walls();
		  	 //Update_Position();
		  	 //Get_Next_Move();
		  	 next_move = Get_Next_Dumb();
 8003f8a:	f7ff f93b 	bl	8003204 <Get_Next_Dumb>
		  	 cur_move = PAUSE;
 8003f8e:	2304      	movs	r3, #4
		  	 Set_Right(0, FORWARD);
		  	 Dead_End_Correct(); //should be aligned in middle of square
		  	 //Read_Walls();
		  	 //Update_Position();
		  	 //Get_Next_Move();
		  	 next_move = Get_Next_Dumb();
 8003f90:	6020      	str	r0, [r4, #0]
		  	 cur_move = PAUSE;
 8003f92:	602b      	str	r3, [r5, #0]
 8003f94:	e688      	b.n	8003ca8 <main+0x42c>

	  } //searching loop
	  } //if front wall > 1500

	  //ready loop again
	  HAL_Delay(500); //ONLY CHECK FOR FINGER every half second. If you check to quickly it'll never start
 8003f96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003f9a:	f7fc f9e9 	bl	8000370 <HAL_Delay>

	  //DEBUG SHIT. It'll only transmit when it is waiting. Won't take up time while searching
	  if (debug_flag == TRUE){
 8003f9e:	4b12      	ldr	r3, [pc, #72]	; (8003fe8 <main+0x76c>)
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	2a01      	cmp	r2, #1
 8003fa4:	f47f ae36 	bne.w	8003c14 <main+0x398>
      m_correction = Motor_Correction(dif_lf, dif_rf, TRUE);
 8003fa8:	4b10      	ldr	r3, [pc, #64]	; (8003fec <main+0x770>)
 8003faa:	6819      	ldr	r1, [r3, #0]
 8003fac:	4b10      	ldr	r3, [pc, #64]	; (8003ff0 <main+0x774>)
 8003fae:	6818      	ldr	r0, [r3, #0]
 8003fb0:	f7fe fd28 	bl	8002a04 <Motor_Correction>
 8003fb4:	4b0f      	ldr	r3, [pc, #60]	; (8003ff4 <main+0x778>)
	  sprintf(tx_buffer, "L Speed: %d   \r\nR Speed: %d   \r\nCorrection %d \r\n-----------------\r\n", FWD_L + m_correction, FWD_R -m_correction, m_correction);
 8003fb6:	f100 0287 	add.w	r2, r0, #135	; 0x87
 8003fba:	490f      	ldr	r1, [pc, #60]	; (8003ff8 <main+0x77c>)
	  //ready loop again
	  HAL_Delay(500); //ONLY CHECK FOR FINGER every half second. If you check to quickly it'll never start

	  //DEBUG SHIT. It'll only transmit when it is waiting. Won't take up time while searching
	  if (debug_flag == TRUE){
      m_correction = Motor_Correction(dif_lf, dif_rf, TRUE);
 8003fbc:	6018      	str	r0, [r3, #0]
	  sprintf(tx_buffer, "L Speed: %d   \r\nR Speed: %d   \r\nCorrection %d \r\n-----------------\r\n", FWD_L + m_correction, FWD_R -m_correction, m_correction);
 8003fbe:	f1c0 0378 	rsb	r3, r0, #120	; 0x78
 8003fc2:	9000      	str	r0, [sp, #0]
 8003fc4:	480d      	ldr	r0, [pc, #52]	; (8003ffc <main+0x780>)
 8003fc6:	f000 fa5d 	bl	8004484 <siprintf>
	  Transmit(tx_buffer);
 8003fca:	480c      	ldr	r0, [pc, #48]	; (8003ffc <main+0x780>)
 8003fcc:	f7fe fd74 	bl	8002ab8 <Transmit>
	  Send_Debug();
 8003fd0:	f7fe fdd6 	bl	8002b80 <Send_Debug>
 8003fd4:	e61e      	b.n	8003c14 <main+0x398>
 8003fd6:	bf00      	nop
 8003fd8:	200003b8 	.word	0x200003b8
 8003fdc:	200004e0 	.word	0x200004e0
 8003fe0:	20000410 	.word	0x20000410
 8003fe4:	40020c00 	.word	0x40020c00
 8003fe8:	20000468 	.word	0x20000468
 8003fec:	2000046c 	.word	0x2000046c
 8003ff0:	2000017c 	.word	0x2000017c
 8003ff4:	2000011c 	.word	0x2000011c
 8003ff8:	08004fd1 	.word	0x08004fd1
 8003ffc:	20000634 	.word	0x20000634
 8004000:	200004e4 	.word	0x200004e4
 8004004:	20000360 	.word	0x20000360
 8004008:	2000035c 	.word	0x2000035c

0800400c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800400c:	b508      	push	{r3, lr}

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800400e:	2003      	movs	r0, #3
 8004010:	f7fc fbf6 	bl	8000800 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8004014:	2200      	movs	r2, #0
 8004016:	f06f 000b 	mvn.w	r0, #11
 800401a:	4611      	mov	r1, r2
 800401c:	f7fc fc02 	bl	8000824 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8004020:	2200      	movs	r2, #0
 8004022:	f06f 000a 	mvn.w	r0, #10
 8004026:	4611      	mov	r1, r2
 8004028:	f7fc fbfc 	bl	8000824 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800402c:	2200      	movs	r2, #0
 800402e:	f06f 0009 	mvn.w	r0, #9
 8004032:	4611      	mov	r1, r2
 8004034:	f7fc fbf6 	bl	8000824 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8004038:	2200      	movs	r2, #0
 800403a:	f06f 0004 	mvn.w	r0, #4
 800403e:	4611      	mov	r1, r2
 8004040:	f7fc fbf0 	bl	8000824 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8004044:	2200      	movs	r2, #0
 8004046:	f06f 0003 	mvn.w	r0, #3
 800404a:	4611      	mov	r1, r2
 800404c:	f7fc fbea 	bl	8000824 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8004050:	2200      	movs	r2, #0
 8004052:	f06f 0001 	mvn.w	r0, #1
 8004056:	4611      	mov	r1, r2
 8004058:	f7fc fbe4 	bl	8000824 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800405c:	2200      	movs	r2, #0
 800405e:	f04f 30ff 	mov.w	r0, #4294967295
 8004062:	4611      	mov	r1, r2

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004064:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004068:	f7fc bbdc 	b.w	8000824 <HAL_NVIC_SetPriority>

0800406c <HAL_ADC_MspInit>:
{

  GPIO_InitTypeDef GPIO_InitStruct;
  static DMA_HandleTypeDef  hdma_adc;

  if(hadc->Instance==ADC1)
 800406c:	6802      	ldr	r2, [r0, #0]
 800406e:	4b2a      	ldr	r3, [pc, #168]	; (8004118 <HAL_ADC_MspInit+0xac>)
 8004070:	429a      	cmp	r2, r3

  /* USER CODE END MspInit 1 */
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004072:	b570      	push	{r4, r5, r6, lr}
 8004074:	4606      	mov	r6, r0
 8004076:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;
  static DMA_HandleTypeDef  hdma_adc;

  if(hadc->Instance==ADC1)
 8004078:	d14b      	bne.n	8004112 <HAL_ADC_MspInit+0xa6>
  {

    __HAL_RCC_ADC1_CLK_ENABLE();
 800407a:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800407e:	2500      	movs	r5, #0
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004080:	2403      	movs	r4, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004082:	a903      	add	r1, sp, #12
  static DMA_HandleTypeDef  hdma_adc;

  if(hadc->Instance==ADC1)
  {

    __HAL_RCC_ADC1_CLK_ENABLE();
 8004084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004086:	4825      	ldr	r0, [pc, #148]	; (800411c <HAL_ADC_MspInit+0xb0>)
  static DMA_HandleTypeDef  hdma_adc;

  if(hadc->Instance==ADC1)
  {

    __HAL_RCC_ADC1_CLK_ENABLE();
 8004088:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800408c:	645a      	str	r2, [r3, #68]	; 0x44
 800408e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004090:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8004094:	9201      	str	r2, [sp, #4]
 8004096:	9a01      	ldr	r2, [sp, #4]

    /* Enable DMA2 clock */
    __HAL_RCC_DMA2_CLK_ENABLE();
 8004098:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800409a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800409e:	631a      	str	r2, [r3, #48]	; 0x30
 80040a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040a2:	9404      	str	r4, [sp, #16]
  {

    __HAL_RCC_ADC1_CLK_ENABLE();

    /* Enable DMA2 clock */
    __HAL_RCC_DMA2_CLK_ENABLE();
 80040a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a8:	9505      	str	r5, [sp, #20]
  {

    __HAL_RCC_ADC1_CLK_ENABLE();

    /* Enable DMA2 clock */
    __HAL_RCC_DMA2_CLK_ENABLE();
 80040aa:	9302      	str	r3, [sp, #8]
 80040ac:	9b02      	ldr	r3, [sp, #8]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
 80040ae:	2330      	movs	r3, #48	; 0x30
 80040b0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040b2:	f7fc fe01 	bl	8000cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RF_REC_Pin|R_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040b6:	a903      	add	r1, sp, #12
 80040b8:	4819      	ldr	r0, [pc, #100]	; (8004120 <HAL_ADC_MspInit+0xb4>)
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = RF_REC_Pin|R_REC_Pin;
 80040ba:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040bc:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040be:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040c0:	f7fc fdfa 	bl	8000cb8 <HAL_GPIO_Init>

    hdma_adc.Instance = DMA2_Stream0;
 80040c4:	4c17      	ldr	r4, [pc, #92]	; (8004124 <HAL_ADC_MspInit+0xb8>)
 80040c6:	4b18      	ldr	r3, [pc, #96]	; (8004128 <HAL_ADC_MspInit+0xbc>)
    hdma_adc.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    hdma_adc.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
    hdma_adc.Init.MemBurst = DMA_MBURST_SINGLE;
    hdma_adc.Init.PeriphBurst = DMA_PBURST_SINGLE;

    HAL_DMA_Init(&hdma_adc);
 80040c8:	4620      	mov	r0, r4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    hdma_adc.Instance = DMA2_Stream0;
    hdma_adc.Init.Channel  = DMA_CHANNEL_0;
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040ca:	60a5      	str	r5, [r4, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80040cc:	60e5      	str	r5, [r4, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc.Init.Mode = DMA_CIRCULAR;
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_adc.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80040ce:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_adc.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
    hdma_adc.Init.MemBurst = DMA_MBURST_SINGLE;
 80040d0:	62e5      	str	r5, [r4, #44]	; 0x2c
    hdma_adc.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80040d2:	6325      	str	r5, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    hdma_adc.Instance = DMA2_Stream0;
    hdma_adc.Init.Channel  = DMA_CHANNEL_0;
 80040d4:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80040d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040dc:	6123      	str	r3, [r4, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80040de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040e2:	6163      	str	r3, [r4, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80040e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80040e8:	61a3      	str	r3, [r4, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80040ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040ee:	61e3      	str	r3, [r4, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 80040f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040f4:	6223      	str	r3, [r4, #32]
    hdma_adc.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    hdma_adc.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80040f6:	2301      	movs	r3, #1
 80040f8:	62a3      	str	r3, [r4, #40]	; 0x28
    hdma_adc.Init.MemBurst = DMA_MBURST_SINGLE;
    hdma_adc.Init.PeriphBurst = DMA_PBURST_SINGLE;

    HAL_DMA_Init(&hdma_adc);
 80040fa:	f7fc fc15 	bl	8000928 <HAL_DMA_Init>

      /* Associate the initialized DMA handle to the ADC handle */
    __HAL_LINKDMA(hadc, DMA_Handle, hdma_adc);
 80040fe:	63b4      	str	r4, [r6, #56]	; 0x38

      /*##-4- Configure the NVIC for DMA #########################################*/
      /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8004100:	2038      	movs	r0, #56	; 0x38
 8004102:	462a      	mov	r2, r5
 8004104:	4629      	mov	r1, r5
    hdma_adc.Init.PeriphBurst = DMA_PBURST_SINGLE;

    HAL_DMA_Init(&hdma_adc);

      /* Associate the initialized DMA handle to the ADC handle */
    __HAL_LINKDMA(hadc, DMA_Handle, hdma_adc);
 8004106:	63a6      	str	r6, [r4, #56]	; 0x38

      /*##-4- Configure the NVIC for DMA #########################################*/
      /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8004108:	f7fc fb8c 	bl	8000824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800410c:	2038      	movs	r0, #56	; 0x38
 800410e:	f7fc fbc1 	bl	8000894 <HAL_NVIC_EnableIRQ>

  }

}
 8004112:	b008      	add	sp, #32
 8004114:	bd70      	pop	{r4, r5, r6, pc}
 8004116:	bf00      	nop
 8004118:	40012000 	.word	0x40012000
 800411c:	40020800 	.word	0x40020800
 8004120:	40020400 	.word	0x40020400
 8004124:	20000470 	.word	0x20000470
 8004128:	40026410 	.word	0x40026410

0800412c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 800412c:	6802      	ldr	r2, [r0, #0]
 800412e:	4b14      	ldr	r3, [pc, #80]	; (8004180 <HAL_SPI_MspInit+0x54>)
 8004130:	429a      	cmp	r2, r3


}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004132:	b510      	push	{r4, lr}
 8004134:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8004136:	d120      	bne.n	800417a <HAL_SPI_MspInit+0x4e>
  {

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004138:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GYRO_SCLK_Pin|GYRO_MISO_Pin|GYRO_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800413c:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800413e:	a901      	add	r1, sp, #4
 8004140:	4810      	ldr	r0, [pc, #64]	; (8004184 <HAL_SPI_MspInit+0x58>)
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
  {

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004142:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004144:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004148:	645a      	str	r2, [r3, #68]	; 0x44
 800414a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GYRO_SCLK_Pin|GYRO_MISO_Pin|GYRO_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414c:	9403      	str	r4, [sp, #12]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
  {

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800414e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	9b00      	ldr	r3, [sp, #0]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GYRO_SCLK_Pin|GYRO_MISO_Pin|GYRO_MOSI_Pin;
 8004156:	23e0      	movs	r3, #224	; 0xe0
 8004158:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800415a:	2302      	movs	r3, #2
 800415c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800415e:	2303      	movs	r3, #3
 8004160:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004162:	2305      	movs	r3, #5
 8004164:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004166:	f7fc fda7 	bl	8000cb8 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 800416a:	2023      	movs	r0, #35	; 0x23
 800416c:	4622      	mov	r2, r4
 800416e:	2101      	movs	r1, #1
 8004170:	f7fc fb58 	bl	8000824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004174:	2023      	movs	r0, #35	; 0x23
 8004176:	f7fc fb8d 	bl	8000894 <HAL_NVIC_EnableIRQ>

  }

}
 800417a:	b006      	add	sp, #24
 800417c:	bd10      	pop	{r4, pc}
 800417e:	bf00      	nop
 8004180:	40013000 	.word	0x40013000
 8004184:	40020000 	.word	0x40020000

08004188 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8004188:	6803      	ldr	r3, [r0, #0]
 800418a:	4a29      	ldr	r2, [pc, #164]	; (8004230 <HAL_TIM_Encoder_MspInit+0xa8>)
 800418c:	4293      	cmp	r3, r2
  }

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim)
{
 800418e:	b570      	push	{r4, r5, r6, lr}
 8004190:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8004192:	d11e      	bne.n	80041d2 <HAL_TIM_Encoder_MspInit+0x4a>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004194:	4b27      	ldr	r3, [pc, #156]	; (8004234 <HAL_TIM_Encoder_MspInit+0xac>)
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = LENC_CHB_Pin|LENC_CHA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004196:	2401      	movs	r4, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004198:	a903      	add	r1, sp, #12
 800419a:	4827      	ldr	r0, [pc, #156]	; (8004238 <HAL_TIM_Encoder_MspInit+0xb0>)
  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800419c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800419e:	f042 0201 	orr.w	r2, r2, #1
 80041a2:	645a      	str	r2, [r3, #68]	; 0x44
 80041a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = LENC_CHB_Pin|LENC_CHA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80041a6:	9405      	str	r4, [sp, #20]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80041a8:	f003 0301 	and.w	r3, r3, #1
    */
    GPIO_InitStruct.Pin = LENC_CHB_Pin|LENC_CHA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80041ac:	9407      	str	r4, [sp, #28]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80041ae:	9301      	str	r3, [sp, #4]
 80041b0:	9b01      	ldr	r3, [sp, #4]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = LENC_CHB_Pin|LENC_CHA_Pin;
 80041b2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80041b6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041b8:	2302      	movs	r3, #2
 80041ba:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80041bc:	2303      	movs	r3, #3
 80041be:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80041c0:	f7fc fd7a 	bl	8000cb8 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 1);
 80041c4:	201b      	movs	r0, #27
 80041c6:	4622      	mov	r2, r4
 80041c8:	2100      	movs	r1, #0
 80041ca:	f7fc fb2b 	bl	8000824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80041ce:	201b      	movs	r0, #27
 80041d0:	e02a      	b.n	8004228 <HAL_TIM_Encoder_MspInit+0xa0>


  }
  else if(htim->Instance==TIM4)
 80041d2:	4a1a      	ldr	r2, [pc, #104]	; (800423c <HAL_TIM_Encoder_MspInit+0xb4>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d129      	bne.n	800422c <HAL_TIM_Encoder_MspInit+0xa4>
  {
      __HAL_RCC_TIM4_CLK_ENABLE();
 80041d8:	4b16      	ldr	r3, [pc, #88]	; (8004234 <HAL_TIM_Encoder_MspInit+0xac>)
      /**TIM4 GPIO Configuration
      PB6     ------> TIM4_CH1
      PB7     ------> TIM4_CH2
      */
      GPIO_InitStruct.Pin = RENCA_Pin;
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041da:	2402      	movs	r4, #2
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 80041dc:	2601      	movs	r6, #1
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80041de:	2503      	movs	r5, #3


  }
  else if(htim->Instance==TIM4)
  {
      __HAL_RCC_TIM4_CLK_ENABLE();
 80041e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      GPIO_InitStruct.Pin = RENCA_Pin;
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
      HAL_GPIO_Init(RENCA_GPIO_Port, &GPIO_InitStruct);
 80041e2:	a903      	add	r1, sp, #12
 80041e4:	4816      	ldr	r0, [pc, #88]	; (8004240 <HAL_TIM_Encoder_MspInit+0xb8>)


  }
  else if(htim->Instance==TIM4)
  {
      __HAL_RCC_TIM4_CLK_ENABLE();
 80041e6:	f042 0204 	orr.w	r2, r2, #4
 80041ea:	641a      	str	r2, [r3, #64]	; 0x40
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      /**TIM4 GPIO Configuration
      PB6     ------> TIM4_CH1
      PB7     ------> TIM4_CH2
      */
      GPIO_InitStruct.Pin = RENCA_Pin;
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ee:	9404      	str	r4, [sp, #16]


  }
  else if(htim->Instance==TIM4)
  {
      __HAL_RCC_TIM4_CLK_ENABLE();
 80041f0:	f003 0304 	and.w	r3, r3, #4
      PB6     ------> TIM4_CH1
      PB7     ------> TIM4_CH2
      */
      GPIO_InitStruct.Pin = RENCA_Pin;
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 80041f4:	9605      	str	r6, [sp, #20]
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80041f6:	9506      	str	r5, [sp, #24]


  }
  else if(htim->Instance==TIM4)
  {
      __HAL_RCC_TIM4_CLK_ENABLE();
 80041f8:	9302      	str	r3, [sp, #8]
 80041fa:	9b02      	ldr	r3, [sp, #8]

      /**TIM4 GPIO Configuration
      PB6     ------> TIM4_CH1
      PB7     ------> TIM4_CH2
      */
      GPIO_InitStruct.Pin = RENCA_Pin;
 80041fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004200:	9407      	str	r4, [sp, #28]

      /**TIM4 GPIO Configuration
      PB6     ------> TIM4_CH1
      PB7     ------> TIM4_CH2
      */
      GPIO_InitStruct.Pin = RENCA_Pin;
 8004202:	9303      	str	r3, [sp, #12]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
      HAL_GPIO_Init(RENCA_GPIO_Port, &GPIO_InitStruct);
 8004204:	f7fc fd58 	bl	8000cb8 <HAL_GPIO_Init>


      GPIO_InitStruct.Pin = RENCB_Pin;
 8004208:	2340      	movs	r3, #64	; 0x40
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
      HAL_GPIO_Init(RENCB_GPIO_Port, &GPIO_InitStruct);
 800420a:	a903      	add	r1, sp, #12
 800420c:	480d      	ldr	r0, [pc, #52]	; (8004244 <HAL_TIM_Encoder_MspInit+0xbc>)
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
      HAL_GPIO_Init(RENCA_GPIO_Port, &GPIO_InitStruct);


      GPIO_InitStruct.Pin = RENCB_Pin;
 800420e:	9303      	str	r3, [sp, #12]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004210:	9404      	str	r4, [sp, #16]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004212:	9605      	str	r6, [sp, #20]
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004214:	9506      	str	r5, [sp, #24]
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004216:	9407      	str	r4, [sp, #28]
      HAL_GPIO_Init(RENCB_GPIO_Port, &GPIO_InitStruct);
 8004218:	f7fc fd4e 	bl	8000cb8 <HAL_GPIO_Init>


      HAL_NVIC_SetPriority(TIM4_IRQn, 0, 2);
 800421c:	201e      	movs	r0, #30
 800421e:	4622      	mov	r2, r4
 8004220:	2100      	movs	r1, #0
 8004222:	f7fc faff 	bl	8000824 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004226:	201e      	movs	r0, #30
 8004228:	f7fc fb34 	bl	8000894 <HAL_NVIC_EnableIRQ>
}
}
 800422c:	b008      	add	sp, #32
 800422e:	bd70      	pop	{r4, r5, r6, pc}
 8004230:	40010000 	.word	0x40010000
 8004234:	40023800 	.word	0x40023800
 8004238:	40021000 	.word	0x40021000
 800423c:	40000800 	.word	0x40000800
 8004240:	40020c00 	.word	0x40020c00
 8004244:	40020400 	.word	0x40020400

08004248 <HAL_TIM_PWM_MspInit>:
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM2)
 8004248:	6803      	ldr	r3, [r0, #0]
      HAL_NVIC_SetPriority(TIM4_IRQn, 0, 2);
      HAL_NVIC_EnableIRQ(TIM4_IRQn);
}
}
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800424a:	b084      	sub	sp, #16

  if(htim_pwm->Instance==TIM2)
 800424c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004250:	d10b      	bne.n	800426a <HAL_TIM_PWM_MspInit+0x22>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004252:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8004256:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004258:	f042 0201 	orr.w	r2, r2, #1
 800425c:	641a      	str	r2, [r3, #64]	; 0x40
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	9301      	str	r3, [sp, #4]
 8004266:	9b01      	ldr	r3, [sp, #4]
 8004268:	e01a      	b.n	80042a0 <HAL_TIM_PWM_MspInit+0x58>

  }
  else if(htim_pwm->Instance==TIM3)
 800426a:	4a0e      	ldr	r2, [pc, #56]	; (80042a4 <HAL_TIM_PWM_MspInit+0x5c>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d10a      	bne.n	8004286 <HAL_TIM_PWM_MspInit+0x3e>
    {

      /* Peripheral clock enable */
      __HAL_RCC_TIM3_CLK_ENABLE();
 8004270:	4b0d      	ldr	r3, [pc, #52]	; (80042a8 <HAL_TIM_PWM_MspInit+0x60>)
 8004272:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004274:	f042 0202 	orr.w	r2, r2, #2
 8004278:	641a      	str	r2, [r3, #64]	; 0x40
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	9302      	str	r3, [sp, #8]
 8004282:	9b02      	ldr	r3, [sp, #8]
 8004284:	e00c      	b.n	80042a0 <HAL_TIM_PWM_MspInit+0x58>

    }

  else if(htim_pwm->Instance==TIM9)
 8004286:	4a09      	ldr	r2, [pc, #36]	; (80042ac <HAL_TIM_PWM_MspInit+0x64>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d109      	bne.n	80042a0 <HAL_TIM_PWM_MspInit+0x58>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 800428c:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <HAL_TIM_PWM_MspInit+0x60>)
 800428e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004290:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004294:	645a      	str	r2, [r3, #68]	; 0x44
 8004296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800429c:	9303      	str	r3, [sp, #12]
 800429e:	9b03      	ldr	r3, [sp, #12]

  }

}
 80042a0:	b004      	add	sp, #16
 80042a2:	4770      	bx	lr
 80042a4:	40000400 	.word	0x40000400
 80042a8:	40023800 	.word	0x40023800
 80042ac:	40014000 	.word	0x40014000

080042b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM2)
 80042b0:	6803      	ldr	r3, [r0, #0]
 80042b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  }

}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80042b6:	b530      	push	{r4, r5, lr}
 80042b8:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM2)
 80042ba:	d10b      	bne.n	80042d4 <HAL_TIM_MspPostInit+0x24>

    /**TIM2 GPIO Configuration    
    PA0/WKUP     ------> TIM2_CH1
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = RPWM_Pin|LPWM_Pin;
 80042bc:	2305      	movs	r3, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042be:	a901      	add	r1, sp, #4
 80042c0:	481a      	ldr	r0, [pc, #104]	; (800432c <HAL_TIM_MspPostInit+0x7c>)

    /**TIM2 GPIO Configuration    
    PA0/WKUP     ------> TIM2_CH1
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = RPWM_Pin|LPWM_Pin;
 80042c2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c4:	2302      	movs	r3, #2
 80042c6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c8:	2300      	movs	r3, #0
 80042ca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80042cc:	2301      	movs	r3, #1
 80042ce:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80042d0:	9305      	str	r3, [sp, #20]
 80042d2:	e026      	b.n	8004322 <HAL_TIM_MspPostInit+0x72>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  }

  else if(htim->Instance==TIM3)
 80042d4:	4a16      	ldr	r2, [pc, #88]	; (8004330 <HAL_TIM_MspPostInit+0x80>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d115      	bne.n	8004306 <HAL_TIM_MspPostInit+0x56>
      PC9     ------> TIM3_CH4
      PB4     ------> TIM3_CH1
      PB5     ------> TIM3_CH2
      */
      GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042da:	2402      	movs	r4, #2
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042dc:	2500      	movs	r5, #0
      PC8     ------> TIM3_CH3
      PC9     ------> TIM3_CH4
      PB4     ------> TIM3_CH1
      PB5     ------> TIM3_CH2
      */
      GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80042de:	f44f 7340 	mov.w	r3, #768	; 0x300
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042e2:	a901      	add	r1, sp, #4
 80042e4:	4813      	ldr	r0, [pc, #76]	; (8004334 <HAL_TIM_MspPostInit+0x84>)
      PC8     ------> TIM3_CH3
      PC9     ------> TIM3_CH4
      PB4     ------> TIM3_CH1
      PB5     ------> TIM3_CH2
      */
      GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80042e6:	9301      	str	r3, [sp, #4]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042e8:	9402      	str	r4, [sp, #8]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ea:	9503      	str	r5, [sp, #12]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042ec:	9504      	str	r5, [sp, #16]
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80042ee:	9405      	str	r4, [sp, #20]
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042f0:	f7fc fce2 	bl	8000cb8 <HAL_GPIO_Init>

      GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80042f4:	2330      	movs	r3, #48	; 0x30
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042f6:	9402      	str	r4, [sp, #8]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f8:	9503      	str	r5, [sp, #12]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042fa:	a901      	add	r1, sp, #4
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

      GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80042fc:	9301      	str	r3, [sp, #4]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042fe:	9504      	str	r5, [sp, #16]
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004300:	9405      	str	r4, [sp, #20]
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004302:	480d      	ldr	r0, [pc, #52]	; (8004338 <HAL_TIM_MspPostInit+0x88>)
 8004304:	e00d      	b.n	8004322 <HAL_TIM_MspPostInit+0x72>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
    }

  else if(htim->Instance==TIM9)
 8004306:	4a0d      	ldr	r2, [pc, #52]	; (800433c <HAL_TIM_MspPostInit+0x8c>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d10c      	bne.n	8004326 <HAL_TIM_MspPostInit+0x76>
  {
      /**TIM9 GPIO Configuration
      PE5     ------> TIM9_CH1
      */
      GPIO_InitStruct.Pin = BUZZER_Pin;
 800430c:	2320      	movs	r3, #32
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
      HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800430e:	a901      	add	r1, sp, #4
 8004310:	480b      	ldr	r0, [pc, #44]	; (8004340 <HAL_TIM_MspPostInit+0x90>)
  else if(htim->Instance==TIM9)
  {
      /**TIM9 GPIO Configuration
      PE5     ------> TIM9_CH1
      */
      GPIO_InitStruct.Pin = BUZZER_Pin;
 8004312:	9301      	str	r3, [sp, #4]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004314:	2302      	movs	r3, #2
 8004316:	9302      	str	r3, [sp, #8]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004318:	2300      	movs	r3, #0
 800431a:	9303      	str	r3, [sp, #12]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800431c:	9304      	str	r3, [sp, #16]
      GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800431e:	2303      	movs	r3, #3
 8004320:	9305      	str	r3, [sp, #20]
      HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8004322:	f7fc fcc9 	bl	8000cb8 <HAL_GPIO_Init>

  }

}
 8004326:	b007      	add	sp, #28
 8004328:	bd30      	pop	{r4, r5, pc}
 800432a:	bf00      	nop
 800432c:	40020000 	.word	0x40020000
 8004330:	40000400 	.word	0x40000400
 8004334:	40020800 	.word	0x40020800
 8004338:	40020400 	.word	0x40020400
 800433c:	40014000 	.word	0x40014000
 8004340:	40021000 	.word	0x40021000

08004344 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004344:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8004346:	6802      	ldr	r2, [r0, #0]
 8004348:	4b0f      	ldr	r3, [pc, #60]	; (8004388 <HAL_UART_MspInit+0x44>)
 800434a:	429a      	cmp	r2, r3
 800434c:	d119      	bne.n	8004382 <HAL_UART_MspInit+0x3e>
  {

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800434e:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004352:	a901      	add	r1, sp, #4
 8004354:	480d      	ldr	r0, [pc, #52]	; (800438c <HAL_UART_MspInit+0x48>)
  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
  {

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004356:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004358:	f042 0210 	orr.w	r2, r2, #16
 800435c:	645a      	str	r2, [r3, #68]	; 0x44
 800435e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004360:	f003 0310 	and.w	r3, r3, #16
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	9b00      	ldr	r3, [sp, #0]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004368:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800436c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800436e:	2302      	movs	r3, #2
 8004370:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004372:	2301      	movs	r3, #1
 8004374:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004376:	2303      	movs	r3, #3
 8004378:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800437a:	2307      	movs	r3, #7
 800437c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800437e:	f7fc fc9b 	bl	8000cb8 <HAL_GPIO_Init>


  }

}
 8004382:	b007      	add	sp, #28
 8004384:	f85d fb04 	ldr.w	pc, [sp], #4
 8004388:	40011000 	.word	0x40011000
 800438c:	40020000 	.word	0x40020000

08004390 <NMI_Handler>:
 8004390:	4770      	bx	lr

08004392 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8004392:	e7fe      	b.n	8004392 <HardFault_Handler>

08004394 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8004394:	e7fe      	b.n	8004394 <MemManage_Handler>

08004396 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8004396:	e7fe      	b.n	8004396 <BusFault_Handler>

08004398 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8004398:	e7fe      	b.n	8004398 <UsageFault_Handler>

0800439a <SVC_Handler>:
 800439a:	4770      	bx	lr

0800439c <DebugMon_Handler>:
 800439c:	4770      	bx	lr

0800439e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800439e:	4770      	bx	lr

080043a0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80043a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043a2:	f7fb ffd7 	bl	8000354 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 80043aa:	f7fc baa2 	b.w	80008f2 <HAL_SYSTICK_IRQHandler>

080043ae <EXTI15_10_IRQHandler>:
  /* USER CODE END SysTick_IRQn 1 */
}

void EXTI15_10_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80043ae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80043b2:	f7fc bd75 	b.w	8000ea0 <HAL_GPIO_EXTI_IRQHandler>

080043b6 <EXTI9_5_IRQHandler>:
}

void EXTI9_5_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80043b6:	2040      	movs	r0, #64	; 0x40
 80043b8:	f7fc bd72 	b.w	8000ea0 <HAL_GPIO_EXTI_IRQHandler>

080043bc <DMA2_Stream0_IRQHandler>:
}

void DMA2_Stream0_IRQHandler(void)
{
  HAL_DMA_IRQHandler(hadc1.DMA_Handle);
 80043bc:	4b01      	ldr	r3, [pc, #4]	; (80043c4 <DMA2_Stream0_IRQHandler+0x8>)
 80043be:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80043c0:	f7fc bbbc 	b.w	8000b3c <HAL_DMA_IRQHandler>
 80043c4:	200006fc 	.word	0x200006fc

080043c8 <SPI1_IRQHandler>:
}

void SPI1_IRQHandler(void)
{
  HAL_SPI_IRQHandler(&hspi1);
 80043c8:	4801      	ldr	r0, [pc, #4]	; (80043d0 <SPI1_IRQHandler+0x8>)
 80043ca:	f7fd bc63 	b.w	8001c94 <HAL_SPI_IRQHandler>
 80043ce:	bf00      	nop
 80043d0:	200009ec 	.word	0x200009ec

080043d4 <TIM1_CC_IRQHandler>:
}


void TIM1_CC_IRQHandler(void) {

 HAL_TIM_IRQHandler(&htim1);
 80043d4:	4801      	ldr	r0, [pc, #4]	; (80043dc <TIM1_CC_IRQHandler+0x8>)
 80043d6:	f7fd bd14 	b.w	8001e02 <HAL_TIM_IRQHandler>
 80043da:	bf00      	nop
 80043dc:	20000898 	.word	0x20000898

080043e0 <TIM4_IRQHandler>:

}

void TIM4_IRQHandler(void) {

 HAL_TIM_IRQHandler(&htim4);
 80043e0:	4801      	ldr	r0, [pc, #4]	; (80043e8 <TIM4_IRQHandler+0x8>)
 80043e2:	f7fd bd0e 	b.w	8001e02 <HAL_TIM_IRQHandler>
 80043e6:	bf00      	nop
 80043e8:	200004e8 	.word	0x200004e8

080043ec <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043ec:	490f      	ldr	r1, [pc, #60]	; (800442c <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80043ee:	2000      	movs	r0, #0
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043f0:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80043f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80043fc:	4b0c      	ldr	r3, [pc, #48]	; (8004430 <SystemInit+0x44>)
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	f042 0201 	orr.w	r2, r2, #1
 8004404:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004406:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800440e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004412:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004414:	4a07      	ldr	r2, [pc, #28]	; (8004434 <SystemInit+0x48>)
 8004416:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800441e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004420:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004422:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004426:	608b      	str	r3, [r1, #8]
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	e000ed00 	.word	0xe000ed00
 8004430:	40023800 	.word	0x40023800
 8004434:	24003010 	.word	0x24003010

08004438 <__libc_init_array>:
 8004438:	b570      	push	{r4, r5, r6, lr}
 800443a:	4b0e      	ldr	r3, [pc, #56]	; (8004474 <__libc_init_array+0x3c>)
 800443c:	4c0e      	ldr	r4, [pc, #56]	; (8004478 <__libc_init_array+0x40>)
 800443e:	1ae4      	subs	r4, r4, r3
 8004440:	10a4      	asrs	r4, r4, #2
 8004442:	2500      	movs	r5, #0
 8004444:	461e      	mov	r6, r3
 8004446:	42a5      	cmp	r5, r4
 8004448:	d004      	beq.n	8004454 <__libc_init_array+0x1c>
 800444a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800444e:	4798      	blx	r3
 8004450:	3501      	adds	r5, #1
 8004452:	e7f8      	b.n	8004446 <__libc_init_array+0xe>
 8004454:	f000 fc4e 	bl	8004cf4 <_init>
 8004458:	4c08      	ldr	r4, [pc, #32]	; (800447c <__libc_init_array+0x44>)
 800445a:	4b09      	ldr	r3, [pc, #36]	; (8004480 <__libc_init_array+0x48>)
 800445c:	1ae4      	subs	r4, r4, r3
 800445e:	10a4      	asrs	r4, r4, #2
 8004460:	2500      	movs	r5, #0
 8004462:	461e      	mov	r6, r3
 8004464:	42a5      	cmp	r5, r4
 8004466:	d004      	beq.n	8004472 <__libc_init_array+0x3a>
 8004468:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800446c:	4798      	blx	r3
 800446e:	3501      	adds	r5, #1
 8004470:	e7f8      	b.n	8004464 <__libc_init_array+0x2c>
 8004472:	bd70      	pop	{r4, r5, r6, pc}
 8004474:	08005064 	.word	0x08005064
 8004478:	08005064 	.word	0x08005064
 800447c:	08005068 	.word	0x08005068
 8004480:	08005064 	.word	0x08005064

08004484 <siprintf>:
 8004484:	b40e      	push	{r1, r2, r3}
 8004486:	b500      	push	{lr}
 8004488:	b09c      	sub	sp, #112	; 0x70
 800448a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800448e:	ab1d      	add	r3, sp, #116	; 0x74
 8004490:	f8ad 1014 	strh.w	r1, [sp, #20]
 8004494:	9002      	str	r0, [sp, #8]
 8004496:	9006      	str	r0, [sp, #24]
 8004498:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800449c:	480a      	ldr	r0, [pc, #40]	; (80044c8 <siprintf+0x44>)
 800449e:	9104      	str	r1, [sp, #16]
 80044a0:	9107      	str	r1, [sp, #28]
 80044a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80044a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80044aa:	f8ad 1016 	strh.w	r1, [sp, #22]
 80044ae:	6800      	ldr	r0, [r0, #0]
 80044b0:	9301      	str	r3, [sp, #4]
 80044b2:	a902      	add	r1, sp, #8
 80044b4:	f000 f86c 	bl	8004590 <_svfiprintf_r>
 80044b8:	9b02      	ldr	r3, [sp, #8]
 80044ba:	2200      	movs	r2, #0
 80044bc:	701a      	strb	r2, [r3, #0]
 80044be:	b01c      	add	sp, #112	; 0x70
 80044c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80044c4:	b003      	add	sp, #12
 80044c6:	4770      	bx	lr
 80044c8:	20000068 	.word	0x20000068

080044cc <strcpy>:
 80044cc:	4603      	mov	r3, r0
 80044ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044d2:	f803 2b01 	strb.w	r2, [r3], #1
 80044d6:	2a00      	cmp	r2, #0
 80044d8:	d1f9      	bne.n	80044ce <strcpy+0x2>
 80044da:	4770      	bx	lr

080044dc <__ssputs_r>:
 80044dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044e0:	688e      	ldr	r6, [r1, #8]
 80044e2:	429e      	cmp	r6, r3
 80044e4:	4682      	mov	sl, r0
 80044e6:	460c      	mov	r4, r1
 80044e8:	4691      	mov	r9, r2
 80044ea:	4698      	mov	r8, r3
 80044ec:	d83e      	bhi.n	800456c <__ssputs_r+0x90>
 80044ee:	898a      	ldrh	r2, [r1, #12]
 80044f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80044f4:	d03a      	beq.n	800456c <__ssputs_r+0x90>
 80044f6:	6825      	ldr	r5, [r4, #0]
 80044f8:	6909      	ldr	r1, [r1, #16]
 80044fa:	1a6f      	subs	r7, r5, r1
 80044fc:	6965      	ldr	r5, [r4, #20]
 80044fe:	2302      	movs	r3, #2
 8004500:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004504:	fb95 f5f3 	sdiv	r5, r5, r3
 8004508:	1c7b      	adds	r3, r7, #1
 800450a:	4443      	add	r3, r8
 800450c:	429d      	cmp	r5, r3
 800450e:	bf38      	it	cc
 8004510:	461d      	movcc	r5, r3
 8004512:	0553      	lsls	r3, r2, #21
 8004514:	d50f      	bpl.n	8004536 <__ssputs_r+0x5a>
 8004516:	4629      	mov	r1, r5
 8004518:	f000 fb3e 	bl	8004b98 <_malloc_r>
 800451c:	4606      	mov	r6, r0
 800451e:	b198      	cbz	r0, 8004548 <__ssputs_r+0x6c>
 8004520:	463a      	mov	r2, r7
 8004522:	6921      	ldr	r1, [r4, #16]
 8004524:	f000 fac4 	bl	8004ab0 <memcpy>
 8004528:	89a3      	ldrh	r3, [r4, #12]
 800452a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800452e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004532:	81a3      	strh	r3, [r4, #12]
 8004534:	e013      	b.n	800455e <__ssputs_r+0x82>
 8004536:	462a      	mov	r2, r5
 8004538:	f000 fb8c 	bl	8004c54 <_realloc_r>
 800453c:	4606      	mov	r6, r0
 800453e:	b970      	cbnz	r0, 800455e <__ssputs_r+0x82>
 8004540:	6921      	ldr	r1, [r4, #16]
 8004542:	4650      	mov	r0, sl
 8004544:	f000 fada 	bl	8004afc <_free_r>
 8004548:	230c      	movs	r3, #12
 800454a:	f8ca 3000 	str.w	r3, [sl]
 800454e:	89a3      	ldrh	r3, [r4, #12]
 8004550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004554:	81a3      	strh	r3, [r4, #12]
 8004556:	f04f 30ff 	mov.w	r0, #4294967295
 800455a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800455e:	6126      	str	r6, [r4, #16]
 8004560:	6165      	str	r5, [r4, #20]
 8004562:	443e      	add	r6, r7
 8004564:	1bed      	subs	r5, r5, r7
 8004566:	6026      	str	r6, [r4, #0]
 8004568:	60a5      	str	r5, [r4, #8]
 800456a:	4646      	mov	r6, r8
 800456c:	4546      	cmp	r6, r8
 800456e:	bf28      	it	cs
 8004570:	4646      	movcs	r6, r8
 8004572:	4632      	mov	r2, r6
 8004574:	4649      	mov	r1, r9
 8004576:	6820      	ldr	r0, [r4, #0]
 8004578:	f000 faa5 	bl	8004ac6 <memmove>
 800457c:	68a3      	ldr	r3, [r4, #8]
 800457e:	1b9b      	subs	r3, r3, r6
 8004580:	60a3      	str	r3, [r4, #8]
 8004582:	6823      	ldr	r3, [r4, #0]
 8004584:	441e      	add	r6, r3
 8004586:	6026      	str	r6, [r4, #0]
 8004588:	2000      	movs	r0, #0
 800458a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08004590 <_svfiprintf_r>:
 8004590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004594:	b09d      	sub	sp, #116	; 0x74
 8004596:	4680      	mov	r8, r0
 8004598:	9303      	str	r3, [sp, #12]
 800459a:	898b      	ldrh	r3, [r1, #12]
 800459c:	061c      	lsls	r4, r3, #24
 800459e:	460d      	mov	r5, r1
 80045a0:	4616      	mov	r6, r2
 80045a2:	d50d      	bpl.n	80045c0 <_svfiprintf_r+0x30>
 80045a4:	690b      	ldr	r3, [r1, #16]
 80045a6:	b95b      	cbnz	r3, 80045c0 <_svfiprintf_r+0x30>
 80045a8:	2140      	movs	r1, #64	; 0x40
 80045aa:	f000 faf5 	bl	8004b98 <_malloc_r>
 80045ae:	6028      	str	r0, [r5, #0]
 80045b0:	6128      	str	r0, [r5, #16]
 80045b2:	b918      	cbnz	r0, 80045bc <_svfiprintf_r+0x2c>
 80045b4:	230c      	movs	r3, #12
 80045b6:	f8c8 3000 	str.w	r3, [r8]
 80045ba:	e0cd      	b.n	8004758 <_svfiprintf_r+0x1c8>
 80045bc:	2340      	movs	r3, #64	; 0x40
 80045be:	616b      	str	r3, [r5, #20]
 80045c0:	2300      	movs	r3, #0
 80045c2:	9309      	str	r3, [sp, #36]	; 0x24
 80045c4:	2320      	movs	r3, #32
 80045c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045ca:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8004768 <_svfiprintf_r+0x1d8>
 80045ce:	2330      	movs	r3, #48	; 0x30
 80045d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045d4:	4637      	mov	r7, r6
 80045d6:	463c      	mov	r4, r7
 80045d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80045dc:	b91b      	cbnz	r3, 80045e6 <_svfiprintf_r+0x56>
 80045de:	ebb7 0906 	subs.w	r9, r7, r6
 80045e2:	d010      	beq.n	8004606 <_svfiprintf_r+0x76>
 80045e4:	e003      	b.n	80045ee <_svfiprintf_r+0x5e>
 80045e6:	2b25      	cmp	r3, #37	; 0x25
 80045e8:	d0f9      	beq.n	80045de <_svfiprintf_r+0x4e>
 80045ea:	4627      	mov	r7, r4
 80045ec:	e7f3      	b.n	80045d6 <_svfiprintf_r+0x46>
 80045ee:	464b      	mov	r3, r9
 80045f0:	4632      	mov	r2, r6
 80045f2:	4629      	mov	r1, r5
 80045f4:	4640      	mov	r0, r8
 80045f6:	f7ff ff71 	bl	80044dc <__ssputs_r>
 80045fa:	3001      	adds	r0, #1
 80045fc:	f000 80a7 	beq.w	800474e <_svfiprintf_r+0x1be>
 8004600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004602:	444b      	add	r3, r9
 8004604:	9309      	str	r3, [sp, #36]	; 0x24
 8004606:	783b      	ldrb	r3, [r7, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 80a0 	beq.w	800474e <_svfiprintf_r+0x1be>
 800460e:	2300      	movs	r3, #0
 8004610:	f04f 32ff 	mov.w	r2, #4294967295
 8004614:	9304      	str	r3, [sp, #16]
 8004616:	9307      	str	r3, [sp, #28]
 8004618:	9205      	str	r2, [sp, #20]
 800461a:	9306      	str	r3, [sp, #24]
 800461c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004620:	931a      	str	r3, [sp, #104]	; 0x68
 8004622:	2601      	movs	r6, #1
 8004624:	2205      	movs	r2, #5
 8004626:	7821      	ldrb	r1, [r4, #0]
 8004628:	484e      	ldr	r0, [pc, #312]	; (8004764 <_svfiprintf_r+0x1d4>)
 800462a:	f7fb fdf9 	bl	8000220 <memchr>
 800462e:	1c67      	adds	r7, r4, #1
 8004630:	9b04      	ldr	r3, [sp, #16]
 8004632:	b138      	cbz	r0, 8004644 <_svfiprintf_r+0xb4>
 8004634:	4a4b      	ldr	r2, [pc, #300]	; (8004764 <_svfiprintf_r+0x1d4>)
 8004636:	1a80      	subs	r0, r0, r2
 8004638:	fa06 f000 	lsl.w	r0, r6, r0
 800463c:	4318      	orrs	r0, r3
 800463e:	9004      	str	r0, [sp, #16]
 8004640:	463c      	mov	r4, r7
 8004642:	e7ef      	b.n	8004624 <_svfiprintf_r+0x94>
 8004644:	06d9      	lsls	r1, r3, #27
 8004646:	bf44      	itt	mi
 8004648:	2220      	movmi	r2, #32
 800464a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800464e:	071a      	lsls	r2, r3, #28
 8004650:	bf44      	itt	mi
 8004652:	222b      	movmi	r2, #43	; 0x2b
 8004654:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004658:	7822      	ldrb	r2, [r4, #0]
 800465a:	2a2a      	cmp	r2, #42	; 0x2a
 800465c:	d003      	beq.n	8004666 <_svfiprintf_r+0xd6>
 800465e:	9a07      	ldr	r2, [sp, #28]
 8004660:	2100      	movs	r1, #0
 8004662:	200a      	movs	r0, #10
 8004664:	e00b      	b.n	800467e <_svfiprintf_r+0xee>
 8004666:	9a03      	ldr	r2, [sp, #12]
 8004668:	1d11      	adds	r1, r2, #4
 800466a:	6812      	ldr	r2, [r2, #0]
 800466c:	9103      	str	r1, [sp, #12]
 800466e:	2a00      	cmp	r2, #0
 8004670:	da10      	bge.n	8004694 <_svfiprintf_r+0x104>
 8004672:	4252      	negs	r2, r2
 8004674:	f043 0002 	orr.w	r0, r3, #2
 8004678:	9207      	str	r2, [sp, #28]
 800467a:	9004      	str	r0, [sp, #16]
 800467c:	e00b      	b.n	8004696 <_svfiprintf_r+0x106>
 800467e:	4627      	mov	r7, r4
 8004680:	3401      	adds	r4, #1
 8004682:	783b      	ldrb	r3, [r7, #0]
 8004684:	3b30      	subs	r3, #48	; 0x30
 8004686:	2b09      	cmp	r3, #9
 8004688:	d803      	bhi.n	8004692 <_svfiprintf_r+0x102>
 800468a:	fb00 3202 	mla	r2, r0, r2, r3
 800468e:	2101      	movs	r1, #1
 8004690:	e7f5      	b.n	800467e <_svfiprintf_r+0xee>
 8004692:	b101      	cbz	r1, 8004696 <_svfiprintf_r+0x106>
 8004694:	9207      	str	r2, [sp, #28]
 8004696:	783b      	ldrb	r3, [r7, #0]
 8004698:	2b2e      	cmp	r3, #46	; 0x2e
 800469a:	d11e      	bne.n	80046da <_svfiprintf_r+0x14a>
 800469c:	787b      	ldrb	r3, [r7, #1]
 800469e:	2b2a      	cmp	r3, #42	; 0x2a
 80046a0:	d10a      	bne.n	80046b8 <_svfiprintf_r+0x128>
 80046a2:	9b03      	ldr	r3, [sp, #12]
 80046a4:	1d1a      	adds	r2, r3, #4
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	9203      	str	r2, [sp, #12]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	bfb8      	it	lt
 80046ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80046b2:	3702      	adds	r7, #2
 80046b4:	9305      	str	r3, [sp, #20]
 80046b6:	e010      	b.n	80046da <_svfiprintf_r+0x14a>
 80046b8:	2300      	movs	r3, #0
 80046ba:	9305      	str	r3, [sp, #20]
 80046bc:	1c78      	adds	r0, r7, #1
 80046be:	4619      	mov	r1, r3
 80046c0:	240a      	movs	r4, #10
 80046c2:	4607      	mov	r7, r0
 80046c4:	3001      	adds	r0, #1
 80046c6:	783a      	ldrb	r2, [r7, #0]
 80046c8:	3a30      	subs	r2, #48	; 0x30
 80046ca:	2a09      	cmp	r2, #9
 80046cc:	d803      	bhi.n	80046d6 <_svfiprintf_r+0x146>
 80046ce:	fb04 2101 	mla	r1, r4, r1, r2
 80046d2:	2301      	movs	r3, #1
 80046d4:	e7f5      	b.n	80046c2 <_svfiprintf_r+0x132>
 80046d6:	b103      	cbz	r3, 80046da <_svfiprintf_r+0x14a>
 80046d8:	9105      	str	r1, [sp, #20]
 80046da:	2203      	movs	r2, #3
 80046dc:	7839      	ldrb	r1, [r7, #0]
 80046de:	4822      	ldr	r0, [pc, #136]	; (8004768 <_svfiprintf_r+0x1d8>)
 80046e0:	f7fb fd9e 	bl	8000220 <memchr>
 80046e4:	b140      	cbz	r0, 80046f8 <_svfiprintf_r+0x168>
 80046e6:	2340      	movs	r3, #64	; 0x40
 80046e8:	ebcb 0000 	rsb	r0, fp, r0
 80046ec:	fa03 f000 	lsl.w	r0, r3, r0
 80046f0:	9b04      	ldr	r3, [sp, #16]
 80046f2:	4318      	orrs	r0, r3
 80046f4:	9004      	str	r0, [sp, #16]
 80046f6:	3701      	adds	r7, #1
 80046f8:	7839      	ldrb	r1, [r7, #0]
 80046fa:	481c      	ldr	r0, [pc, #112]	; (800476c <_svfiprintf_r+0x1dc>)
 80046fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004700:	2206      	movs	r2, #6
 8004702:	1c7e      	adds	r6, r7, #1
 8004704:	f7fb fd8c 	bl	8000220 <memchr>
 8004708:	b188      	cbz	r0, 800472e <_svfiprintf_r+0x19e>
 800470a:	4b19      	ldr	r3, [pc, #100]	; (8004770 <_svfiprintf_r+0x1e0>)
 800470c:	b933      	cbnz	r3, 800471c <_svfiprintf_r+0x18c>
 800470e:	9b03      	ldr	r3, [sp, #12]
 8004710:	3307      	adds	r3, #7
 8004712:	f023 0307 	bic.w	r3, r3, #7
 8004716:	3308      	adds	r3, #8
 8004718:	9303      	str	r3, [sp, #12]
 800471a:	e014      	b.n	8004746 <_svfiprintf_r+0x1b6>
 800471c:	ab03      	add	r3, sp, #12
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	462a      	mov	r2, r5
 8004722:	4b14      	ldr	r3, [pc, #80]	; (8004774 <_svfiprintf_r+0x1e4>)
 8004724:	a904      	add	r1, sp, #16
 8004726:	4640      	mov	r0, r8
 8004728:	f3af 8000 	nop.w
 800472c:	e007      	b.n	800473e <_svfiprintf_r+0x1ae>
 800472e:	ab03      	add	r3, sp, #12
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	462a      	mov	r2, r5
 8004734:	4b0f      	ldr	r3, [pc, #60]	; (8004774 <_svfiprintf_r+0x1e4>)
 8004736:	a904      	add	r1, sp, #16
 8004738:	4640      	mov	r0, r8
 800473a:	f000 f893 	bl	8004864 <_printf_i>
 800473e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004742:	4682      	mov	sl, r0
 8004744:	d003      	beq.n	800474e <_svfiprintf_r+0x1be>
 8004746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004748:	4453      	add	r3, sl
 800474a:	9309      	str	r3, [sp, #36]	; 0x24
 800474c:	e742      	b.n	80045d4 <_svfiprintf_r+0x44>
 800474e:	89ab      	ldrh	r3, [r5, #12]
 8004750:	065b      	lsls	r3, r3, #25
 8004752:	d401      	bmi.n	8004758 <_svfiprintf_r+0x1c8>
 8004754:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004756:	e001      	b.n	800475c <_svfiprintf_r+0x1cc>
 8004758:	f04f 30ff 	mov.w	r0, #4294967295
 800475c:	b01d      	add	sp, #116	; 0x74
 800475e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004762:	bf00      	nop
 8004764:	0800502f 	.word	0x0800502f
 8004768:	08005035 	.word	0x08005035
 800476c:	08005039 	.word	0x08005039
 8004770:	00000000 	.word	0x00000000
 8004774:	080044dd 	.word	0x080044dd

08004778 <_printf_common>:
 8004778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800477c:	4691      	mov	r9, r2
 800477e:	461f      	mov	r7, r3
 8004780:	690a      	ldr	r2, [r1, #16]
 8004782:	688b      	ldr	r3, [r1, #8]
 8004784:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004788:	4293      	cmp	r3, r2
 800478a:	bfb8      	it	lt
 800478c:	4613      	movlt	r3, r2
 800478e:	f8c9 3000 	str.w	r3, [r9]
 8004792:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004796:	4606      	mov	r6, r0
 8004798:	460c      	mov	r4, r1
 800479a:	b112      	cbz	r2, 80047a2 <_printf_common+0x2a>
 800479c:	3301      	adds	r3, #1
 800479e:	f8c9 3000 	str.w	r3, [r9]
 80047a2:	6823      	ldr	r3, [r4, #0]
 80047a4:	0699      	lsls	r1, r3, #26
 80047a6:	bf42      	ittt	mi
 80047a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80047ac:	3302      	addmi	r3, #2
 80047ae:	f8c9 3000 	strmi.w	r3, [r9]
 80047b2:	6825      	ldr	r5, [r4, #0]
 80047b4:	f015 0506 	ands.w	r5, r5, #6
 80047b8:	d110      	bne.n	80047dc <_printf_common+0x64>
 80047ba:	f104 0a19 	add.w	sl, r4, #25
 80047be:	e007      	b.n	80047d0 <_printf_common+0x58>
 80047c0:	2301      	movs	r3, #1
 80047c2:	4652      	mov	r2, sl
 80047c4:	4639      	mov	r1, r7
 80047c6:	4630      	mov	r0, r6
 80047c8:	47c0      	blx	r8
 80047ca:	3001      	adds	r0, #1
 80047cc:	d01a      	beq.n	8004804 <_printf_common+0x8c>
 80047ce:	3501      	adds	r5, #1
 80047d0:	68e3      	ldr	r3, [r4, #12]
 80047d2:	f8d9 2000 	ldr.w	r2, [r9]
 80047d6:	1a9b      	subs	r3, r3, r2
 80047d8:	429d      	cmp	r5, r3
 80047da:	dbf1      	blt.n	80047c0 <_printf_common+0x48>
 80047dc:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80047e0:	6822      	ldr	r2, [r4, #0]
 80047e2:	3300      	adds	r3, #0
 80047e4:	bf18      	it	ne
 80047e6:	2301      	movne	r3, #1
 80047e8:	0692      	lsls	r2, r2, #26
 80047ea:	d50f      	bpl.n	800480c <_printf_common+0x94>
 80047ec:	18e1      	adds	r1, r4, r3
 80047ee:	1c5a      	adds	r2, r3, #1
 80047f0:	2030      	movs	r0, #48	; 0x30
 80047f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047f6:	4422      	add	r2, r4
 80047f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004800:	3302      	adds	r3, #2
 8004802:	e003      	b.n	800480c <_printf_common+0x94>
 8004804:	f04f 30ff 	mov.w	r0, #4294967295
 8004808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800480c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004810:	4639      	mov	r1, r7
 8004812:	4630      	mov	r0, r6
 8004814:	47c0      	blx	r8
 8004816:	3001      	adds	r0, #1
 8004818:	d0f4      	beq.n	8004804 <_printf_common+0x8c>
 800481a:	6822      	ldr	r2, [r4, #0]
 800481c:	f8d9 5000 	ldr.w	r5, [r9]
 8004820:	68e3      	ldr	r3, [r4, #12]
 8004822:	f002 0206 	and.w	r2, r2, #6
 8004826:	2a04      	cmp	r2, #4
 8004828:	bf08      	it	eq
 800482a:	1b5d      	subeq	r5, r3, r5
 800482c:	6922      	ldr	r2, [r4, #16]
 800482e:	68a3      	ldr	r3, [r4, #8]
 8004830:	bf0c      	ite	eq
 8004832:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004836:	2500      	movne	r5, #0
 8004838:	4293      	cmp	r3, r2
 800483a:	bfc4      	itt	gt
 800483c:	1a9b      	subgt	r3, r3, r2
 800483e:	18ed      	addgt	r5, r5, r3
 8004840:	f04f 0900 	mov.w	r9, #0
 8004844:	341a      	adds	r4, #26
 8004846:	454d      	cmp	r5, r9
 8004848:	d009      	beq.n	800485e <_printf_common+0xe6>
 800484a:	2301      	movs	r3, #1
 800484c:	4622      	mov	r2, r4
 800484e:	4639      	mov	r1, r7
 8004850:	4630      	mov	r0, r6
 8004852:	47c0      	blx	r8
 8004854:	3001      	adds	r0, #1
 8004856:	d0d5      	beq.n	8004804 <_printf_common+0x8c>
 8004858:	f109 0901 	add.w	r9, r9, #1
 800485c:	e7f3      	b.n	8004846 <_printf_common+0xce>
 800485e:	2000      	movs	r0, #0
 8004860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004864 <_printf_i>:
 8004864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004868:	4617      	mov	r7, r2
 800486a:	7e0a      	ldrb	r2, [r1, #24]
 800486c:	b085      	sub	sp, #20
 800486e:	2a6e      	cmp	r2, #110	; 0x6e
 8004870:	4698      	mov	r8, r3
 8004872:	4606      	mov	r6, r0
 8004874:	460c      	mov	r4, r1
 8004876:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004878:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800487c:	f000 80ae 	beq.w	80049dc <_printf_i+0x178>
 8004880:	d811      	bhi.n	80048a6 <_printf_i+0x42>
 8004882:	2a63      	cmp	r2, #99	; 0x63
 8004884:	d022      	beq.n	80048cc <_printf_i+0x68>
 8004886:	d809      	bhi.n	800489c <_printf_i+0x38>
 8004888:	2a00      	cmp	r2, #0
 800488a:	f000 80bb 	beq.w	8004a04 <_printf_i+0x1a0>
 800488e:	2a58      	cmp	r2, #88	; 0x58
 8004890:	f040 80ca 	bne.w	8004a28 <_printf_i+0x1c4>
 8004894:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004898:	4983      	ldr	r1, [pc, #524]	; (8004aa8 <_printf_i+0x244>)
 800489a:	e055      	b.n	8004948 <_printf_i+0xe4>
 800489c:	2a64      	cmp	r2, #100	; 0x64
 800489e:	d01e      	beq.n	80048de <_printf_i+0x7a>
 80048a0:	2a69      	cmp	r2, #105	; 0x69
 80048a2:	d01c      	beq.n	80048de <_printf_i+0x7a>
 80048a4:	e0c0      	b.n	8004a28 <_printf_i+0x1c4>
 80048a6:	2a73      	cmp	r2, #115	; 0x73
 80048a8:	f000 80b0 	beq.w	8004a0c <_printf_i+0x1a8>
 80048ac:	d809      	bhi.n	80048c2 <_printf_i+0x5e>
 80048ae:	2a6f      	cmp	r2, #111	; 0x6f
 80048b0:	d02e      	beq.n	8004910 <_printf_i+0xac>
 80048b2:	2a70      	cmp	r2, #112	; 0x70
 80048b4:	f040 80b8 	bne.w	8004a28 <_printf_i+0x1c4>
 80048b8:	680a      	ldr	r2, [r1, #0]
 80048ba:	f042 0220 	orr.w	r2, r2, #32
 80048be:	600a      	str	r2, [r1, #0]
 80048c0:	e03e      	b.n	8004940 <_printf_i+0xdc>
 80048c2:	2a75      	cmp	r2, #117	; 0x75
 80048c4:	d024      	beq.n	8004910 <_printf_i+0xac>
 80048c6:	2a78      	cmp	r2, #120	; 0x78
 80048c8:	d03a      	beq.n	8004940 <_printf_i+0xdc>
 80048ca:	e0ad      	b.n	8004a28 <_printf_i+0x1c4>
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80048d2:	1d11      	adds	r1, r2, #4
 80048d4:	6019      	str	r1, [r3, #0]
 80048d6:	6813      	ldr	r3, [r2, #0]
 80048d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048dc:	e0a8      	b.n	8004a30 <_printf_i+0x1cc>
 80048de:	6821      	ldr	r1, [r4, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80048e6:	d002      	beq.n	80048ee <_printf_i+0x8a>
 80048e8:	1d11      	adds	r1, r2, #4
 80048ea:	6019      	str	r1, [r3, #0]
 80048ec:	e008      	b.n	8004900 <_printf_i+0x9c>
 80048ee:	f011 0f40 	tst.w	r1, #64	; 0x40
 80048f2:	f102 0104 	add.w	r1, r2, #4
 80048f6:	6019      	str	r1, [r3, #0]
 80048f8:	d002      	beq.n	8004900 <_printf_i+0x9c>
 80048fa:	f9b2 3000 	ldrsh.w	r3, [r2]
 80048fe:	e000      	b.n	8004902 <_printf_i+0x9e>
 8004900:	6813      	ldr	r3, [r2, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	da3c      	bge.n	8004980 <_printf_i+0x11c>
 8004906:	222d      	movs	r2, #45	; 0x2d
 8004908:	425b      	negs	r3, r3
 800490a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800490e:	e037      	b.n	8004980 <_printf_i+0x11c>
 8004910:	6821      	ldr	r1, [r4, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004918:	d002      	beq.n	8004920 <_printf_i+0xbc>
 800491a:	1d11      	adds	r1, r2, #4
 800491c:	6019      	str	r1, [r3, #0]
 800491e:	e007      	b.n	8004930 <_printf_i+0xcc>
 8004920:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004924:	f102 0104 	add.w	r1, r2, #4
 8004928:	6019      	str	r1, [r3, #0]
 800492a:	d001      	beq.n	8004930 <_printf_i+0xcc>
 800492c:	8813      	ldrh	r3, [r2, #0]
 800492e:	e000      	b.n	8004932 <_printf_i+0xce>
 8004930:	6813      	ldr	r3, [r2, #0]
 8004932:	7e22      	ldrb	r2, [r4, #24]
 8004934:	495c      	ldr	r1, [pc, #368]	; (8004aa8 <_printf_i+0x244>)
 8004936:	2a6f      	cmp	r2, #111	; 0x6f
 8004938:	bf14      	ite	ne
 800493a:	220a      	movne	r2, #10
 800493c:	2208      	moveq	r2, #8
 800493e:	e01b      	b.n	8004978 <_printf_i+0x114>
 8004940:	2278      	movs	r2, #120	; 0x78
 8004942:	495a      	ldr	r1, [pc, #360]	; (8004aac <_printf_i+0x248>)
 8004944:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004948:	6822      	ldr	r2, [r4, #0]
 800494a:	6818      	ldr	r0, [r3, #0]
 800494c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004950:	f100 0504 	add.w	r5, r0, #4
 8004954:	601d      	str	r5, [r3, #0]
 8004956:	d103      	bne.n	8004960 <_printf_i+0xfc>
 8004958:	0655      	lsls	r5, r2, #25
 800495a:	d501      	bpl.n	8004960 <_printf_i+0xfc>
 800495c:	8803      	ldrh	r3, [r0, #0]
 800495e:	e000      	b.n	8004962 <_printf_i+0xfe>
 8004960:	6803      	ldr	r3, [r0, #0]
 8004962:	07d0      	lsls	r0, r2, #31
 8004964:	bf44      	itt	mi
 8004966:	f042 0220 	orrmi.w	r2, r2, #32
 800496a:	6022      	strmi	r2, [r4, #0]
 800496c:	b91b      	cbnz	r3, 8004976 <_printf_i+0x112>
 800496e:	6822      	ldr	r2, [r4, #0]
 8004970:	f022 0220 	bic.w	r2, r2, #32
 8004974:	6022      	str	r2, [r4, #0]
 8004976:	2210      	movs	r2, #16
 8004978:	2000      	movs	r0, #0
 800497a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800497e:	e001      	b.n	8004984 <_printf_i+0x120>
 8004980:	4949      	ldr	r1, [pc, #292]	; (8004aa8 <_printf_i+0x244>)
 8004982:	220a      	movs	r2, #10
 8004984:	6865      	ldr	r5, [r4, #4]
 8004986:	60a5      	str	r5, [r4, #8]
 8004988:	2d00      	cmp	r5, #0
 800498a:	db08      	blt.n	800499e <_printf_i+0x13a>
 800498c:	6820      	ldr	r0, [r4, #0]
 800498e:	f020 0004 	bic.w	r0, r0, #4
 8004992:	6020      	str	r0, [r4, #0]
 8004994:	b92b      	cbnz	r3, 80049a2 <_printf_i+0x13e>
 8004996:	2d00      	cmp	r5, #0
 8004998:	d17d      	bne.n	8004a96 <_printf_i+0x232>
 800499a:	4675      	mov	r5, lr
 800499c:	e00c      	b.n	80049b8 <_printf_i+0x154>
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d079      	beq.n	8004a96 <_printf_i+0x232>
 80049a2:	4675      	mov	r5, lr
 80049a4:	fbb3 f0f2 	udiv	r0, r3, r2
 80049a8:	fb02 3310 	mls	r3, r2, r0, r3
 80049ac:	5ccb      	ldrb	r3, [r1, r3]
 80049ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80049b2:	4603      	mov	r3, r0
 80049b4:	2800      	cmp	r0, #0
 80049b6:	d1f5      	bne.n	80049a4 <_printf_i+0x140>
 80049b8:	2a08      	cmp	r2, #8
 80049ba:	d10b      	bne.n	80049d4 <_printf_i+0x170>
 80049bc:	6823      	ldr	r3, [r4, #0]
 80049be:	07da      	lsls	r2, r3, #31
 80049c0:	d508      	bpl.n	80049d4 <_printf_i+0x170>
 80049c2:	6923      	ldr	r3, [r4, #16]
 80049c4:	6862      	ldr	r2, [r4, #4]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	bfde      	ittt	le
 80049ca:	2330      	movle	r3, #48	; 0x30
 80049cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80049d4:	ebc5 030e 	rsb	r3, r5, lr
 80049d8:	6123      	str	r3, [r4, #16]
 80049da:	e02e      	b.n	8004a3a <_printf_i+0x1d6>
 80049dc:	6808      	ldr	r0, [r1, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	6949      	ldr	r1, [r1, #20]
 80049e2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80049e6:	d003      	beq.n	80049f0 <_printf_i+0x18c>
 80049e8:	1d10      	adds	r0, r2, #4
 80049ea:	6018      	str	r0, [r3, #0]
 80049ec:	6813      	ldr	r3, [r2, #0]
 80049ee:	e008      	b.n	8004a02 <_printf_i+0x19e>
 80049f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80049f4:	f102 0004 	add.w	r0, r2, #4
 80049f8:	6018      	str	r0, [r3, #0]
 80049fa:	6813      	ldr	r3, [r2, #0]
 80049fc:	d001      	beq.n	8004a02 <_printf_i+0x19e>
 80049fe:	8019      	strh	r1, [r3, #0]
 8004a00:	e000      	b.n	8004a04 <_printf_i+0x1a0>
 8004a02:	6019      	str	r1, [r3, #0]
 8004a04:	2300      	movs	r3, #0
 8004a06:	6123      	str	r3, [r4, #16]
 8004a08:	4675      	mov	r5, lr
 8004a0a:	e016      	b.n	8004a3a <_printf_i+0x1d6>
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	1d11      	adds	r1, r2, #4
 8004a10:	6019      	str	r1, [r3, #0]
 8004a12:	6815      	ldr	r5, [r2, #0]
 8004a14:	6862      	ldr	r2, [r4, #4]
 8004a16:	2100      	movs	r1, #0
 8004a18:	4628      	mov	r0, r5
 8004a1a:	f7fb fc01 	bl	8000220 <memchr>
 8004a1e:	b108      	cbz	r0, 8004a24 <_printf_i+0x1c0>
 8004a20:	1b40      	subs	r0, r0, r5
 8004a22:	6060      	str	r0, [r4, #4]
 8004a24:	6863      	ldr	r3, [r4, #4]
 8004a26:	e004      	b.n	8004a32 <_printf_i+0x1ce>
 8004a28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a2c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004a30:	2301      	movs	r3, #1
 8004a32:	6123      	str	r3, [r4, #16]
 8004a34:	2300      	movs	r3, #0
 8004a36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a3a:	f8cd 8000 	str.w	r8, [sp]
 8004a3e:	463b      	mov	r3, r7
 8004a40:	aa03      	add	r2, sp, #12
 8004a42:	4621      	mov	r1, r4
 8004a44:	4630      	mov	r0, r6
 8004a46:	f7ff fe97 	bl	8004778 <_printf_common>
 8004a4a:	3001      	adds	r0, #1
 8004a4c:	d102      	bne.n	8004a54 <_printf_i+0x1f0>
 8004a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a52:	e026      	b.n	8004aa2 <_printf_i+0x23e>
 8004a54:	6923      	ldr	r3, [r4, #16]
 8004a56:	462a      	mov	r2, r5
 8004a58:	4639      	mov	r1, r7
 8004a5a:	4630      	mov	r0, r6
 8004a5c:	47c0      	blx	r8
 8004a5e:	3001      	adds	r0, #1
 8004a60:	d0f5      	beq.n	8004a4e <_printf_i+0x1ea>
 8004a62:	6823      	ldr	r3, [r4, #0]
 8004a64:	079b      	lsls	r3, r3, #30
 8004a66:	d510      	bpl.n	8004a8a <_printf_i+0x226>
 8004a68:	2500      	movs	r5, #0
 8004a6a:	f104 0919 	add.w	r9, r4, #25
 8004a6e:	e007      	b.n	8004a80 <_printf_i+0x21c>
 8004a70:	2301      	movs	r3, #1
 8004a72:	464a      	mov	r2, r9
 8004a74:	4639      	mov	r1, r7
 8004a76:	4630      	mov	r0, r6
 8004a78:	47c0      	blx	r8
 8004a7a:	3001      	adds	r0, #1
 8004a7c:	d0e7      	beq.n	8004a4e <_printf_i+0x1ea>
 8004a7e:	3501      	adds	r5, #1
 8004a80:	68e3      	ldr	r3, [r4, #12]
 8004a82:	9a03      	ldr	r2, [sp, #12]
 8004a84:	1a9b      	subs	r3, r3, r2
 8004a86:	429d      	cmp	r5, r3
 8004a88:	dbf2      	blt.n	8004a70 <_printf_i+0x20c>
 8004a8a:	68e0      	ldr	r0, [r4, #12]
 8004a8c:	9b03      	ldr	r3, [sp, #12]
 8004a8e:	4298      	cmp	r0, r3
 8004a90:	bfb8      	it	lt
 8004a92:	4618      	movlt	r0, r3
 8004a94:	e005      	b.n	8004aa2 <_printf_i+0x23e>
 8004a96:	780b      	ldrb	r3, [r1, #0]
 8004a98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004aa0:	e78a      	b.n	80049b8 <_printf_i+0x154>
 8004aa2:	b005      	add	sp, #20
 8004aa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004aa8:	08005040 	.word	0x08005040
 8004aac:	08005051 	.word	0x08005051

08004ab0 <memcpy>:
 8004ab0:	b510      	push	{r4, lr}
 8004ab2:	1e43      	subs	r3, r0, #1
 8004ab4:	440a      	add	r2, r1
 8004ab6:	4291      	cmp	r1, r2
 8004ab8:	d004      	beq.n	8004ac4 <memcpy+0x14>
 8004aba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004abe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ac2:	e7f8      	b.n	8004ab6 <memcpy+0x6>
 8004ac4:	bd10      	pop	{r4, pc}

08004ac6 <memmove>:
 8004ac6:	4288      	cmp	r0, r1
 8004ac8:	b510      	push	{r4, lr}
 8004aca:	eb01 0302 	add.w	r3, r1, r2
 8004ace:	d801      	bhi.n	8004ad4 <memmove+0xe>
 8004ad0:	1e42      	subs	r2, r0, #1
 8004ad2:	e00b      	b.n	8004aec <memmove+0x26>
 8004ad4:	4298      	cmp	r0, r3
 8004ad6:	d2fb      	bcs.n	8004ad0 <memmove+0xa>
 8004ad8:	1881      	adds	r1, r0, r2
 8004ada:	1ad2      	subs	r2, r2, r3
 8004adc:	42d3      	cmn	r3, r2
 8004ade:	d004      	beq.n	8004aea <memmove+0x24>
 8004ae0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ae4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004ae8:	e7f8      	b.n	8004adc <memmove+0x16>
 8004aea:	bd10      	pop	{r4, pc}
 8004aec:	4299      	cmp	r1, r3
 8004aee:	d004      	beq.n	8004afa <memmove+0x34>
 8004af0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004af4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004af8:	e7f8      	b.n	8004aec <memmove+0x26>
 8004afa:	bd10      	pop	{r4, pc}

08004afc <_free_r>:
 8004afc:	b538      	push	{r3, r4, r5, lr}
 8004afe:	4605      	mov	r5, r0
 8004b00:	2900      	cmp	r1, #0
 8004b02:	d046      	beq.n	8004b92 <_free_r+0x96>
 8004b04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b08:	1f0c      	subs	r4, r1, #4
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	bfb8      	it	lt
 8004b0e:	18e4      	addlt	r4, r4, r3
 8004b10:	f000 f8d6 	bl	8004cc0 <__malloc_lock>
 8004b14:	4a1f      	ldr	r2, [pc, #124]	; (8004b94 <_free_r+0x98>)
 8004b16:	6813      	ldr	r3, [r2, #0]
 8004b18:	4611      	mov	r1, r2
 8004b1a:	b913      	cbnz	r3, 8004b22 <_free_r+0x26>
 8004b1c:	6063      	str	r3, [r4, #4]
 8004b1e:	6014      	str	r4, [r2, #0]
 8004b20:	e032      	b.n	8004b88 <_free_r+0x8c>
 8004b22:	42a3      	cmp	r3, r4
 8004b24:	d90e      	bls.n	8004b44 <_free_r+0x48>
 8004b26:	6822      	ldr	r2, [r4, #0]
 8004b28:	18a0      	adds	r0, r4, r2
 8004b2a:	4283      	cmp	r3, r0
 8004b2c:	bf04      	itt	eq
 8004b2e:	6818      	ldreq	r0, [r3, #0]
 8004b30:	685b      	ldreq	r3, [r3, #4]
 8004b32:	6063      	str	r3, [r4, #4]
 8004b34:	bf04      	itt	eq
 8004b36:	1812      	addeq	r2, r2, r0
 8004b38:	6022      	streq	r2, [r4, #0]
 8004b3a:	600c      	str	r4, [r1, #0]
 8004b3c:	e024      	b.n	8004b88 <_free_r+0x8c>
 8004b3e:	42a2      	cmp	r2, r4
 8004b40:	d803      	bhi.n	8004b4a <_free_r+0x4e>
 8004b42:	4613      	mov	r3, r2
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	2a00      	cmp	r2, #0
 8004b48:	d1f9      	bne.n	8004b3e <_free_r+0x42>
 8004b4a:	6818      	ldr	r0, [r3, #0]
 8004b4c:	1819      	adds	r1, r3, r0
 8004b4e:	42a1      	cmp	r1, r4
 8004b50:	d10b      	bne.n	8004b6a <_free_r+0x6e>
 8004b52:	6821      	ldr	r1, [r4, #0]
 8004b54:	4401      	add	r1, r0
 8004b56:	1858      	adds	r0, r3, r1
 8004b58:	4282      	cmp	r2, r0
 8004b5a:	6019      	str	r1, [r3, #0]
 8004b5c:	d114      	bne.n	8004b88 <_free_r+0x8c>
 8004b5e:	6810      	ldr	r0, [r2, #0]
 8004b60:	6852      	ldr	r2, [r2, #4]
 8004b62:	605a      	str	r2, [r3, #4]
 8004b64:	4401      	add	r1, r0
 8004b66:	6019      	str	r1, [r3, #0]
 8004b68:	e00e      	b.n	8004b88 <_free_r+0x8c>
 8004b6a:	d902      	bls.n	8004b72 <_free_r+0x76>
 8004b6c:	230c      	movs	r3, #12
 8004b6e:	602b      	str	r3, [r5, #0]
 8004b70:	e00a      	b.n	8004b88 <_free_r+0x8c>
 8004b72:	6821      	ldr	r1, [r4, #0]
 8004b74:	1860      	adds	r0, r4, r1
 8004b76:	4282      	cmp	r2, r0
 8004b78:	bf04      	itt	eq
 8004b7a:	6810      	ldreq	r0, [r2, #0]
 8004b7c:	6852      	ldreq	r2, [r2, #4]
 8004b7e:	6062      	str	r2, [r4, #4]
 8004b80:	bf04      	itt	eq
 8004b82:	1809      	addeq	r1, r1, r0
 8004b84:	6021      	streq	r1, [r4, #0]
 8004b86:	605c      	str	r4, [r3, #4]
 8004b88:	4628      	mov	r0, r5
 8004b8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b8e:	f000 b898 	b.w	8004cc2 <__malloc_unlock>
 8004b92:	bd38      	pop	{r3, r4, r5, pc}
 8004b94:	200004d4 	.word	0x200004d4

08004b98 <_malloc_r>:
 8004b98:	b570      	push	{r4, r5, r6, lr}
 8004b9a:	1ccd      	adds	r5, r1, #3
 8004b9c:	f025 0503 	bic.w	r5, r5, #3
 8004ba0:	3508      	adds	r5, #8
 8004ba2:	2d0c      	cmp	r5, #12
 8004ba4:	bf38      	it	cc
 8004ba6:	250c      	movcc	r5, #12
 8004ba8:	2d00      	cmp	r5, #0
 8004baa:	4606      	mov	r6, r0
 8004bac:	db01      	blt.n	8004bb2 <_malloc_r+0x1a>
 8004bae:	42a9      	cmp	r1, r5
 8004bb0:	d902      	bls.n	8004bb8 <_malloc_r+0x20>
 8004bb2:	230c      	movs	r3, #12
 8004bb4:	6033      	str	r3, [r6, #0]
 8004bb6:	e046      	b.n	8004c46 <_malloc_r+0xae>
 8004bb8:	f000 f882 	bl	8004cc0 <__malloc_lock>
 8004bbc:	4b23      	ldr	r3, [pc, #140]	; (8004c4c <_malloc_r+0xb4>)
 8004bbe:	681c      	ldr	r4, [r3, #0]
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	4621      	mov	r1, r4
 8004bc4:	b1a1      	cbz	r1, 8004bf0 <_malloc_r+0x58>
 8004bc6:	680b      	ldr	r3, [r1, #0]
 8004bc8:	1b5b      	subs	r3, r3, r5
 8004bca:	d40e      	bmi.n	8004bea <_malloc_r+0x52>
 8004bcc:	2b0b      	cmp	r3, #11
 8004bce:	d903      	bls.n	8004bd8 <_malloc_r+0x40>
 8004bd0:	600b      	str	r3, [r1, #0]
 8004bd2:	18cc      	adds	r4, r1, r3
 8004bd4:	50cd      	str	r5, [r1, r3]
 8004bd6:	e01e      	b.n	8004c16 <_malloc_r+0x7e>
 8004bd8:	428c      	cmp	r4, r1
 8004bda:	bf0d      	iteet	eq
 8004bdc:	6863      	ldreq	r3, [r4, #4]
 8004bde:	684b      	ldrne	r3, [r1, #4]
 8004be0:	6063      	strne	r3, [r4, #4]
 8004be2:	6013      	streq	r3, [r2, #0]
 8004be4:	bf18      	it	ne
 8004be6:	460c      	movne	r4, r1
 8004be8:	e015      	b.n	8004c16 <_malloc_r+0x7e>
 8004bea:	460c      	mov	r4, r1
 8004bec:	6849      	ldr	r1, [r1, #4]
 8004bee:	e7e9      	b.n	8004bc4 <_malloc_r+0x2c>
 8004bf0:	4c17      	ldr	r4, [pc, #92]	; (8004c50 <_malloc_r+0xb8>)
 8004bf2:	6823      	ldr	r3, [r4, #0]
 8004bf4:	b91b      	cbnz	r3, 8004bfe <_malloc_r+0x66>
 8004bf6:	4630      	mov	r0, r6
 8004bf8:	f000 f852 	bl	8004ca0 <_sbrk_r>
 8004bfc:	6020      	str	r0, [r4, #0]
 8004bfe:	4629      	mov	r1, r5
 8004c00:	4630      	mov	r0, r6
 8004c02:	f000 f84d 	bl	8004ca0 <_sbrk_r>
 8004c06:	1c43      	adds	r3, r0, #1
 8004c08:	d018      	beq.n	8004c3c <_malloc_r+0xa4>
 8004c0a:	1cc4      	adds	r4, r0, #3
 8004c0c:	f024 0403 	bic.w	r4, r4, #3
 8004c10:	42a0      	cmp	r0, r4
 8004c12:	d10d      	bne.n	8004c30 <_malloc_r+0x98>
 8004c14:	6025      	str	r5, [r4, #0]
 8004c16:	4630      	mov	r0, r6
 8004c18:	f000 f853 	bl	8004cc2 <__malloc_unlock>
 8004c1c:	f104 000b 	add.w	r0, r4, #11
 8004c20:	1d23      	adds	r3, r4, #4
 8004c22:	f020 0007 	bic.w	r0, r0, #7
 8004c26:	1ac3      	subs	r3, r0, r3
 8004c28:	d00e      	beq.n	8004c48 <_malloc_r+0xb0>
 8004c2a:	425a      	negs	r2, r3
 8004c2c:	50e2      	str	r2, [r4, r3]
 8004c2e:	bd70      	pop	{r4, r5, r6, pc}
 8004c30:	1a21      	subs	r1, r4, r0
 8004c32:	4630      	mov	r0, r6
 8004c34:	f000 f834 	bl	8004ca0 <_sbrk_r>
 8004c38:	3001      	adds	r0, #1
 8004c3a:	d1eb      	bne.n	8004c14 <_malloc_r+0x7c>
 8004c3c:	230c      	movs	r3, #12
 8004c3e:	6033      	str	r3, [r6, #0]
 8004c40:	4630      	mov	r0, r6
 8004c42:	f000 f83e 	bl	8004cc2 <__malloc_unlock>
 8004c46:	2000      	movs	r0, #0
 8004c48:	bd70      	pop	{r4, r5, r6, pc}
 8004c4a:	bf00      	nop
 8004c4c:	200004d4 	.word	0x200004d4
 8004c50:	200004d0 	.word	0x200004d0

08004c54 <_realloc_r>:
 8004c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c56:	4607      	mov	r7, r0
 8004c58:	4615      	mov	r5, r2
 8004c5a:	460e      	mov	r6, r1
 8004c5c:	b921      	cbnz	r1, 8004c68 <_realloc_r+0x14>
 8004c5e:	4611      	mov	r1, r2
 8004c60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004c64:	f7ff bf98 	b.w	8004b98 <_malloc_r>
 8004c68:	b91a      	cbnz	r2, 8004c72 <_realloc_r+0x1e>
 8004c6a:	f7ff ff47 	bl	8004afc <_free_r>
 8004c6e:	4628      	mov	r0, r5
 8004c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c72:	f000 f827 	bl	8004cc4 <_malloc_usable_size_r>
 8004c76:	4285      	cmp	r5, r0
 8004c78:	d90e      	bls.n	8004c98 <_realloc_r+0x44>
 8004c7a:	4629      	mov	r1, r5
 8004c7c:	4638      	mov	r0, r7
 8004c7e:	f7ff ff8b 	bl	8004b98 <_malloc_r>
 8004c82:	4604      	mov	r4, r0
 8004c84:	b150      	cbz	r0, 8004c9c <_realloc_r+0x48>
 8004c86:	4631      	mov	r1, r6
 8004c88:	462a      	mov	r2, r5
 8004c8a:	f7ff ff11 	bl	8004ab0 <memcpy>
 8004c8e:	4631      	mov	r1, r6
 8004c90:	4638      	mov	r0, r7
 8004c92:	f7ff ff33 	bl	8004afc <_free_r>
 8004c96:	e001      	b.n	8004c9c <_realloc_r+0x48>
 8004c98:	4630      	mov	r0, r6
 8004c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c9c:	4620      	mov	r0, r4
 8004c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004ca0 <_sbrk_r>:
 8004ca0:	b538      	push	{r3, r4, r5, lr}
 8004ca2:	4c06      	ldr	r4, [pc, #24]	; (8004cbc <_sbrk_r+0x1c>)
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	4605      	mov	r5, r0
 8004ca8:	4608      	mov	r0, r1
 8004caa:	6023      	str	r3, [r4, #0]
 8004cac:	f000 f814 	bl	8004cd8 <_sbrk>
 8004cb0:	1c43      	adds	r3, r0, #1
 8004cb2:	d102      	bne.n	8004cba <_sbrk_r+0x1a>
 8004cb4:	6823      	ldr	r3, [r4, #0]
 8004cb6:	b103      	cbz	r3, 8004cba <_sbrk_r+0x1a>
 8004cb8:	602b      	str	r3, [r5, #0]
 8004cba:	bd38      	pop	{r3, r4, r5, pc}
 8004cbc:	20000a8c 	.word	0x20000a8c

08004cc0 <__malloc_lock>:
 8004cc0:	4770      	bx	lr

08004cc2 <__malloc_unlock>:
 8004cc2:	4770      	bx	lr

08004cc4 <_malloc_usable_size_r>:
 8004cc4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004cc8:	2800      	cmp	r0, #0
 8004cca:	bfbe      	ittt	lt
 8004ccc:	1809      	addlt	r1, r1, r0
 8004cce:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 8004cd2:	18c0      	addlt	r0, r0, r3
 8004cd4:	3804      	subs	r0, #4
 8004cd6:	4770      	bx	lr

08004cd8 <_sbrk>:
 8004cd8:	4b04      	ldr	r3, [pc, #16]	; (8004cec <_sbrk+0x14>)
 8004cda:	6819      	ldr	r1, [r3, #0]
 8004cdc:	4602      	mov	r2, r0
 8004cde:	b909      	cbnz	r1, 8004ce4 <_sbrk+0xc>
 8004ce0:	4903      	ldr	r1, [pc, #12]	; (8004cf0 <_sbrk+0x18>)
 8004ce2:	6019      	str	r1, [r3, #0]
 8004ce4:	6818      	ldr	r0, [r3, #0]
 8004ce6:	4402      	add	r2, r0
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	4770      	bx	lr
 8004cec:	200004d8 	.word	0x200004d8
 8004cf0:	20000a90 	.word	0x20000a90

08004cf4 <_init>:
 8004cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf6:	bf00      	nop
 8004cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cfa:	bc08      	pop	{r3}
 8004cfc:	469e      	mov	lr, r3
 8004cfe:	4770      	bx	lr

08004d00 <_fini>:
 8004d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d02:	bf00      	nop
 8004d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d06:	bc08      	pop	{r3}
 8004d08:	469e      	mov	lr, r3
 8004d0a:	4770      	bx	lr

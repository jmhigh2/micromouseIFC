
C:\Users\Jonathan\Desktop\micromouse\mm747\Debug\mm747.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002528  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080026f0  080026f0  000126f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800271c  0800271c  0001271c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002720  08002720  00012720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08002724  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001f4  20000004  08002728  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001f8  08002728  000201f8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_line   00005c10  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001003b  00000000  00000000  00025c44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000216d  00000000  00000000  00035c7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ad8  00000000  00000000  00037df0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001180  00000000  00000000  000388c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00008a91  00000000  00000000  00039a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003f4a  00000000  00000000  000424d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00046423  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000201c  00000000  00000000  000464a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000004 	.word	0x20000004
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080026d8 	.word	0x080026d8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000008 	.word	0x20000008
 8000204:	080026d8 	.word	0x080026d8

08000208 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000208:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000240 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800020c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800020e:	e003      	b.n	8000218 <LoopCopyDataInit>

08000210 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000210:	4b0c      	ldr	r3, [pc, #48]	; (8000244 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000212:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000214:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000216:	3104      	adds	r1, #4

08000218 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000218:	480b      	ldr	r0, [pc, #44]	; (8000248 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800021a:	4b0c      	ldr	r3, [pc, #48]	; (800024c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800021c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800021e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000220:	d3f6      	bcc.n	8000210 <CopyDataInit>
  ldr  r2, =_sbss
 8000222:	4a0b      	ldr	r2, [pc, #44]	; (8000250 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000224:	e002      	b.n	800022c <LoopFillZerobss>

08000226 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000226:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000228:	f842 3b04 	str.w	r3, [r2], #4

0800022c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800022c:	4b09      	ldr	r3, [pc, #36]	; (8000254 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800022e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000230:	d3f9      	bcc.n	8000226 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000232:	f002 fa05 	bl	8002640 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000236:	f002 fa29 	bl	800268c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800023a:	f001 ff4f 	bl	80020dc <main>
  bx  lr    
 800023e:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000240:	20050000 	.word	0x20050000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8000244:	08002724 	.word	0x08002724
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000248:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800024c:	20000004 	.word	0x20000004
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000250:	20000004 	.word	0x20000004
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000254:	200001f8 	.word	0x200001f8

08000258 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000258:	e7fe      	b.n	8000258 <ADC_IRQHandler>
	...

0800025c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 800025c:	4b08      	ldr	r3, [pc, #32]	; (8000280 <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800025e:	b510      	push	{r4, lr}
 8000260:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000262:	6818      	ldr	r0, [r3, #0]
 8000264:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000268:	fbb0 f0f3 	udiv	r0, r0, r3
 800026c:	f000 f9b8 	bl	80005e0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000270:	2200      	movs	r2, #0
 8000272:	4621      	mov	r1, r4
 8000274:	f04f 30ff 	mov.w	r0, #4294967295
 8000278:	f000 f97a 	bl	8000570 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 800027c:	2000      	movs	r0, #0
 800027e:	bd10      	pop	{r4, pc}
 8000280:	20000000 	.word	0x20000000

08000284 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000284:	b508      	push	{r3, lr}
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000286:	2003      	movs	r0, #3
 8000288:	f000 f960 	bl	800054c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800028c:	2000      	movs	r0, #0
 800028e:	f7ff ffe5 	bl	800025c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000292:	f002 f8ab 	bl	80023ec <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000296:	2000      	movs	r0, #0
 8000298:	bd08      	pop	{r3, pc}
	...

0800029c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800029c:	4a02      	ldr	r2, [pc, #8]	; (80002a8 <HAL_IncTick+0xc>)
 800029e:	6813      	ldr	r3, [r2, #0]
 80002a0:	3301      	adds	r3, #1
 80002a2:	6013      	str	r3, [r2, #0]
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	20000024 	.word	0x20000024

080002ac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002ac:	4b01      	ldr	r3, [pc, #4]	; (80002b4 <HAL_GetTick+0x8>)
 80002ae:	6818      	ldr	r0, [r3, #0]
}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	20000024 	.word	0x20000024

080002b8 <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80002b8:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80002ba:	4604      	mov	r4, r0
 80002bc:	2800      	cmp	r0, #0
 80002be:	f000 809e 	beq.w	80003fe <HAL_ADC_Init+0x146>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80002c2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80002c4:	b923      	cbnz	r3, 80002d0 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80002c6:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80002c8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80002cc:	f002 f8be 	bl	800244c <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80002d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80002d2:	06db      	lsls	r3, r3, #27
 80002d4:	f100 808e 	bmi.w	80003f4 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80002d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80002da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80002de:	f023 0302 	bic.w	r3, r3, #2
 80002e2:	f043 0302 	orr.w	r3, r3, #2
 80002e6:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80002e8:	4b46      	ldr	r3, [pc, #280]	; (8000404 <HAL_ADC_Init+0x14c>)
 80002ea:	685a      	ldr	r2, [r3, #4]
 80002ec:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80002f0:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80002f2:	6859      	ldr	r1, [r3, #4]
 80002f4:	6862      	ldr	r2, [r4, #4]
 80002f6:	430a      	orrs	r2, r1
 80002f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80002fa:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80002fc:	6921      	ldr	r1, [r4, #16]
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80002fe:	685a      	ldr	r2, [r3, #4]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000300:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000302:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000306:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000308:	685a      	ldr	r2, [r3, #4]
 800030a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800030e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000310:	685a      	ldr	r2, [r3, #4]
 8000312:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000316:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000318:	68a2      	ldr	r2, [r4, #8]
 800031a:	6859      	ldr	r1, [r3, #4]
 800031c:	430a      	orrs	r2, r1
 800031e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000320:	689a      	ldr	r2, [r3, #8]
 8000322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000326:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000328:	68e2      	ldr	r2, [r4, #12]
 800032a:	6899      	ldr	r1, [r3, #8]
 800032c:	430a      	orrs	r2, r1
 800032e:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000330:	4a35      	ldr	r2, [pc, #212]	; (8000408 <HAL_ADC_Init+0x150>)
 8000332:	4290      	cmp	r0, r2
 8000334:	d00e      	beq.n	8000354 <HAL_ADC_Init+0x9c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000336:	6899      	ldr	r1, [r3, #8]
 8000338:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 800033c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800033e:	689a      	ldr	r2, [r3, #8]
 8000340:	4302      	orrs	r2, r0
 8000342:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000344:	689a      	ldr	r2, [r3, #8]
 8000346:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800034a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800034c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800034e:	6899      	ldr	r1, [r3, #8]
 8000350:	430a      	orrs	r2, r1
 8000352:	e006      	b.n	8000362 <HAL_ADC_Init+0xaa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000354:	689a      	ldr	r2, [r3, #8]
 8000356:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800035a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800035c:	689a      	ldr	r2, [r3, #8]
 800035e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000362:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000364:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000366:	69a1      	ldr	r1, [r4, #24]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000368:	f022 0202 	bic.w	r2, r2, #2
 800036c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800036e:	689a      	ldr	r2, [r3, #8]
 8000370:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000374:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000376:	6a22      	ldr	r2, [r4, #32]
 8000378:	b19a      	cbz	r2, 80003a2 <HAL_ADC_Init+0xea>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800037a:	685a      	ldr	r2, [r3, #4]
 800037c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000380:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000382:	685a      	ldr	r2, [r3, #4]
 8000384:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000388:	605a      	str	r2, [r3, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800038a:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800038e:	fa92 f2a2 	rbit	r2, r2
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000392:	fab2 f182 	clz	r1, r2
 8000396:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000398:	6858      	ldr	r0, [r3, #4]
 800039a:	3a01      	subs	r2, #1
 800039c:	408a      	lsls	r2, r1
 800039e:	4302      	orrs	r2, r0
 80003a0:	e002      	b.n	80003a8 <HAL_ADC_Init+0xf0>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80003a2:	685a      	ldr	r2, [r3, #4]
 80003a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80003a8:	605a      	str	r2, [r3, #4]
    
    /* Set ADC parameters */
    ADC_Init(hadc);
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80003aa:	2000      	movs	r0, #0
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80003ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80003ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80003b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80003b4:	69e2      	ldr	r2, [r4, #28]
 80003b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80003b8:	3a01      	subs	r2, #1
 80003ba:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80003be:	6b21      	ldr	r1, [r4, #48]	; 0x30
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80003c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80003c2:	689a      	ldr	r2, [r3, #8]
 80003c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80003c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80003ca:	689a      	ldr	r2, [r3, #8]
 80003cc:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80003d0:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80003d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80003d4:	689a      	ldr	r2, [r3, #8]
 80003d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80003da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80003dc:	689a      	ldr	r2, [r3, #8]
 80003de:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80003e2:	609a      	str	r2, [r3, #8]
    
    /* Set ADC parameters */
    ADC_Init(hadc);
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80003e4:	6460      	str	r0, [r4, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80003e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80003e8:	f023 0303 	bic.w	r3, r3, #3
 80003ec:	f043 0301 	orr.w	r3, r3, #1
 80003f0:	6423      	str	r3, [r4, #64]	; 0x40
 80003f2:	e000      	b.n	80003f6 <HAL_ADC_Init+0x13e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80003f4:	2001      	movs	r0, #1
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80003f6:	2300      	movs	r3, #0
 80003f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80003fc:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 80003fe:	2001      	movs	r0, #1
  /* Release Lock */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8000400:	bd10      	pop	{r4, pc}
 8000402:	bf00      	nop
 8000404:	40012300 	.word	0x40012300
 8000408:	0f000001 	.word	0x0f000001

0800040c <HAL_ADC_ConfigChannel>:
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  __IO uint32_t counter = 0;
 800040c:	2300      	movs	r3, #0
  *         the configuration information for the specified ADC.
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800040e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 8000410:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000412:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000416:	2b01      	cmp	r3, #1
 8000418:	d070      	beq.n	80004fc <HAL_ADC_ConfigChannel+0xf0>
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 800041a:	680d      	ldr	r5, [r1, #0]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800041c:	2301      	movs	r3, #1
 800041e:	6804      	ldr	r4, [r0, #0]
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000420:	2d09      	cmp	r5, #9
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000422:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8000426:	b2ae      	uxth	r6, r5
 8000428:	688f      	ldr	r7, [r1, #8]
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 800042a:	d917      	bls.n	800045c <HAL_ADC_ConfigChannel+0x50>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800042c:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8000430:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8000434:	f1a2 031e 	sub.w	r3, r2, #30
 8000438:	2207      	movs	r2, #7
 800043a:	409a      	lsls	r2, r3
 800043c:	ea2e 0202 	bic.w	r2, lr, r2
 8000440:	60e2      	str	r2, [r4, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000442:	4a3d      	ldr	r2, [pc, #244]	; (8000538 <HAL_ADC_ConfigChannel+0x12c>)
 8000444:	4295      	cmp	r5, r2
 8000446:	d103      	bne.n	8000450 <HAL_ADC_ConfigChannel+0x44>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000448:	68e3      	ldr	r3, [r4, #12]
 800044a:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 800044e:	e003      	b.n	8000458 <HAL_ADC_ConfigChannel+0x4c>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000450:	68e2      	ldr	r2, [r4, #12]
 8000452:	fa07 f303 	lsl.w	r3, r7, r3
 8000456:	4313      	orrs	r3, r2
 8000458:	60e3      	str	r3, [r4, #12]
 800045a:	e00e      	b.n	800047a <HAL_ADC_ConfigChannel+0x6e>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800045c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000460:	f04f 0e07 	mov.w	lr, #7
 8000464:	6922      	ldr	r2, [r4, #16]
 8000466:	fa0e fe03 	lsl.w	lr, lr, r3
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800046a:	fa07 f303 	lsl.w	r3, r7, r3
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800046e:	ea22 020e 	bic.w	r2, r2, lr
 8000472:	6122      	str	r2, [r4, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000474:	6922      	ldr	r2, [r4, #16]
 8000476:	4313      	orrs	r3, r2
 8000478:	6123      	str	r3, [r4, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800047a:	684b      	ldr	r3, [r1, #4]
 800047c:	2b06      	cmp	r3, #6
 800047e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8000482:	d80d      	bhi.n	80004a0 <HAL_ADC_ConfigChannel+0x94>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000484:	4413      	add	r3, r2
 8000486:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000488:	1f59      	subs	r1, r3, #5
 800048a:	231f      	movs	r3, #31
 800048c:	408b      	lsls	r3, r1
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800048e:	fa06 f101 	lsl.w	r1, r6, r1
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000492:	ea27 0303 	bic.w	r3, r7, r3
 8000496:	6363      	str	r3, [r4, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000498:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800049a:	4311      	orrs	r1, r2
 800049c:	6361      	str	r1, [r4, #52]	; 0x34
 800049e:	e01d      	b.n	80004dc <HAL_ADC_ConfigChannel+0xd0>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80004a0:	2b0c      	cmp	r3, #12
 80004a2:	d80e      	bhi.n	80004c2 <HAL_ADC_ConfigChannel+0xb6>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80004a4:	4413      	add	r3, r2
 80004a6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80004a8:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 80004ac:	231f      	movs	r3, #31
 80004ae:	4093      	lsls	r3, r2
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80004b0:	fa06 f202 	lsl.w	r2, r6, r2
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80004b4:	ea21 0303 	bic.w	r3, r1, r3
 80004b8:	6323      	str	r3, [r4, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80004ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80004bc:	431a      	orrs	r2, r3
 80004be:	6322      	str	r2, [r4, #48]	; 0x30
 80004c0:	e00c      	b.n	80004dc <HAL_ADC_ConfigChannel+0xd0>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80004c2:	4413      	add	r3, r2
 80004c4:	221f      	movs	r2, #31
 80004c6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80004c8:	3b41      	subs	r3, #65	; 0x41
 80004ca:	409a      	lsls	r2, r3
 80004cc:	ea27 0202 	bic.w	r2, r7, r2
 80004d0:	62e2      	str	r2, [r4, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80004d2:	fa06 f203 	lsl.w	r2, r6, r3
 80004d6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80004d8:	430a      	orrs	r2, r1
 80004da:	62e2      	str	r2, [r4, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80004dc:	4b17      	ldr	r3, [pc, #92]	; (800053c <HAL_ADC_ConfigChannel+0x130>)
 80004de:	429c      	cmp	r4, r3
 80004e0:	d004      	beq.n	80004ec <HAL_ADC_ConfigChannel+0xe0>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80004e2:	2300      	movs	r3, #0
 80004e4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80004e8:	4618      	mov	r0, r3
 80004ea:	e023      	b.n	8000534 <HAL_ADC_ConfigChannel+0x128>
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80004ec:	2d12      	cmp	r5, #18
 80004ee:	d107      	bne.n	8000500 <HAL_ADC_ConfigChannel+0xf4>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80004f0:	4a13      	ldr	r2, [pc, #76]	; (8000540 <HAL_ADC_ConfigChannel+0x134>)
 80004f2:	6853      	ldr	r3, [r2, #4]
 80004f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004f8:	6053      	str	r3, [r2, #4]
 80004fa:	e7f2      	b.n	80004e2 <HAL_ADC_ConfigChannel+0xd6>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80004fc:	2002      	movs	r0, #2
 80004fe:	e019      	b.n	8000534 <HAL_ADC_ConfigChannel+0x128>
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000500:	4b0d      	ldr	r3, [pc, #52]	; (8000538 <HAL_ADC_ConfigChannel+0x12c>)
 8000502:	429d      	cmp	r5, r3
 8000504:	d001      	beq.n	800050a <HAL_ADC_ConfigChannel+0xfe>
 8000506:	2d11      	cmp	r5, #17
 8000508:	d1eb      	bne.n	80004e2 <HAL_ADC_ConfigChannel+0xd6>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800050a:	490d      	ldr	r1, [pc, #52]	; (8000540 <HAL_ADC_ConfigChannel+0x134>)

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800050c:	429d      	cmp	r5, r3
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800050e:	684a      	ldr	r2, [r1, #4]
 8000510:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000514:	604a      	str	r2, [r1, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000516:	d1e4      	bne.n	80004e2 <HAL_ADC_ConfigChannel+0xd6>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000518:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <HAL_ADC_ConfigChannel+0x138>)
 800051a:	4a0b      	ldr	r2, [pc, #44]	; (8000548 <HAL_ADC_ConfigChannel+0x13c>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000522:	230a      	movs	r3, #10
 8000524:	4353      	muls	r3, r2
      while(counter != 0)
      {
        counter--;
 8000526:	9301      	str	r3, [sp, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
      while(counter != 0)
 8000528:	9b01      	ldr	r3, [sp, #4]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d0d9      	beq.n	80004e2 <HAL_ADC_ConfigChannel+0xd6>
      {
        counter--;
 800052e:	9b01      	ldr	r3, [sp, #4]
 8000530:	3b01      	subs	r3, #1
 8000532:	e7f8      	b.n	8000526 <HAL_ADC_ConfigChannel+0x11a>
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return HAL_OK;
}
 8000534:	b003      	add	sp, #12
 8000536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000538:	10000012 	.word	0x10000012
 800053c:	40012000 	.word	0x40012000
 8000540:	40012300 	.word	0x40012300
 8000544:	20000000 	.word	0x20000000
 8000548:	000f4240 	.word	0x000f4240

0800054c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800054c:	4a07      	ldr	r2, [pc, #28]	; (800056c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800054e:	0200      	lsls	r0, r0, #8
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000550:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000552:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000556:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800055a:	041b      	lsls	r3, r3, #16
 800055c:	0c1b      	lsrs	r3, r3, #16
 800055e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000566:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000568:	60d3      	str	r3, [r2, #12]
 800056a:	4770      	bx	lr
 800056c:	e000ed00 	.word	0xe000ed00

08000570 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000570:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <HAL_NVIC_SetPriority+0x68>)
 8000572:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000574:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000578:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800057a:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800057e:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000580:	2c04      	cmp	r4, #4
 8000582:	bf28      	it	cs
 8000584:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000586:	2d06      	cmp	r5, #6

  return (
 8000588:	f04f 0501 	mov.w	r5, #1
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800058c:	bf8c      	ite	hi
 800058e:	3b03      	subhi	r3, #3
 8000590:	2300      	movls	r3, #0

  return (
 8000592:	fa05 f404 	lsl.w	r4, r5, r4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000596:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000598:	f104 34ff 	add.w	r4, r4, #4294967295
 800059c:	ea04 0401 	and.w	r4, r4, r1
 80005a0:	fa04 f403 	lsl.w	r4, r4, r3
 80005a4:	fa05 f303 	lsl.w	r3, r5, r3
 80005a8:	f103 33ff 	add.w	r3, r3, #4294967295
 80005ac:	ea02 0203 	and.w	r2, r2, r3
 80005b0:	ea42 0204 	orr.w	r2, r2, r4
 80005b4:	ea4f 1202 	mov.w	r2, r2, lsl #4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80005b8:	da05      	bge.n	80005c6 <HAL_NVIC_SetPriority+0x56>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ba:	f000 000f 	and.w	r0, r0, #15
 80005be:	b2d2      	uxtb	r2, r2
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <HAL_NVIC_SetPriority+0x6c>)
 80005c2:	541a      	strb	r2, [r3, r0]
 80005c4:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80005ca:	b2d2      	uxtb	r2, r2
 80005cc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80005d0:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 80005d4:	bd30      	pop	{r4, r5, pc}
 80005d6:	bf00      	nop
 80005d8:	e000ed00 	.word	0xe000ed00
 80005dc:	e000ed14 	.word	0xe000ed14

080005e0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005e0:	3801      	subs	r0, #1
 80005e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005e6:	d20a      	bcs.n	80005fe <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ea:	21f0      	movs	r1, #240	; 0xf0
 80005ec:	4a06      	ldr	r2, [pc, #24]	; (8000608 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005ee:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005f0:	2000      	movs	r0, #0
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005f6:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005f8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80005fe:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	e000e010 	.word	0xe000e010
 8000608:	e000ed00 	.word	0xe000ed00

0800060c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800060c:	4b04      	ldr	r3, [pc, #16]	; (8000620 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800060e:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	bf0c      	ite	eq
 8000614:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000618:	f022 0204 	bicne.w	r2, r2, #4
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	4770      	bx	lr
 8000620:	e000e010 	.word	0xe000e010

08000624 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000624:	4770      	bx	lr

08000626 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000626:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000628:	f7ff fffc 	bl	8000624 <HAL_SYSTICK_Callback>
 800062c:	bd08      	pop	{r3, pc}
	...

08000630 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000634:	680b      	ldr	r3, [r1, #0]
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000636:	b085      	sub	sp, #20
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000638:	4e6f      	ldr	r6, [pc, #444]	; (80007f8 <HAL_GPIO_Init+0x1c8>)
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800063a:	9301      	str	r3, [sp, #4]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800063c:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063e:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 8000800 <HAL_GPIO_Init+0x1d0>
 8000642:	46b6      	mov	lr, r6

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000644:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8000804 <HAL_GPIO_Init+0x1d4>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000648:	2201      	movs	r2, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 800064a:	9c01      	ldr	r4, [sp, #4]

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800064c:	409a      	lsls	r2, r3
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 800064e:	ea32 0404 	bics.w	r4, r2, r4
 8000652:	f040 80c9 	bne.w	80007e8 <HAL_GPIO_Init+0x1b8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000656:	684c      	ldr	r4, [r1, #4]
 8000658:	f024 0910 	bic.w	r9, r4, #16
 800065c:	f1b9 0f02 	cmp.w	r9, #2
 8000660:	d114      	bne.n	800068c <HAL_GPIO_Init+0x5c>
 8000662:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000666:	f003 0b07 	and.w	fp, r3, #7
 800066a:	250f      	movs	r5, #15
 800066c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000670:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000674:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000678:	fa05 f50b 	lsl.w	r5, r5, fp
 800067c:	ea27 0505 	bic.w	r5, r7, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000680:	690f      	ldr	r7, [r1, #16]
 8000682:	fa07 f70b 	lsl.w	r7, r7, fp
 8000686:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3] = temp;
 8000688:	f8ca 7020 	str.w	r7, [sl, #32]
 800068c:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000690:	2503      	movs	r5, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000692:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000694:	f004 0b03 	and.w	fp, r4, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000698:	fa05 f50a 	lsl.w	r5, r5, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800069c:	f109 39ff 	add.w	r9, r9, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80006a0:	fa0b fb0a 	lsl.w	fp, fp, sl
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80006a4:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006a6:	f1b9 0f01 	cmp.w	r9, #1
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80006aa:	ea07 0705 	and.w	r7, r7, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80006ae:	ea4b 0707 	orr.w	r7, fp, r7
      GPIOx->MODER = temp;
 80006b2:	6007      	str	r7, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006b4:	d812      	bhi.n	80006dc <HAL_GPIO_Init+0xac>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80006b6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80006b8:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 80006bc:	68cf      	ldr	r7, [r1, #12]
 80006be:	fa07 f70a 	lsl.w	r7, r7, sl
 80006c2:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80006c6:	f3c4 1900 	ubfx	r9, r4, #4, #1
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
        GPIOx->OSPEEDR = temp;
 80006ca:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80006cc:	fa09 f903 	lsl.w	r9, r9, r3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80006d0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006d2:	ea27 0702 	bic.w	r7, r7, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80006d6:	ea49 0707 	orr.w	r7, r9, r7
        GPIOx->OTYPER = temp;
 80006da:	6047      	str	r7, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80006dc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80006de:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80006e0:	688f      	ldr	r7, [r1, #8]
 80006e2:	fa07 f70a 	lsl.w	r7, r7, sl
 80006e6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80006e8:	60c5      	str	r5, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006ea:	00e5      	lsls	r5, r4, #3
 80006ec:	d57c      	bpl.n	80007e8 <HAL_GPIO_Init+0x1b8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ee:	f8dc 5044 	ldr.w	r5, [ip, #68]	; 0x44
 80006f2:	f023 0703 	bic.w	r7, r3, #3

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80006f6:	f003 0a03 	and.w	sl, r3, #3
 80006fa:	f04f 090f 	mov.w	r9, #15
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fe:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8000702:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000706:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070a:	f8cc 5044 	str.w	r5, [ip, #68]	; 0x44
 800070e:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000712:	f8dc 5044 	ldr.w	r5, [ip, #68]	; 0x44
 8000716:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 800071a:	9503      	str	r5, [sp, #12]
 800071c:	9d03      	ldr	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800071e:	fa09 f50a 	lsl.w	r5, r9, sl
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
 8000722:	f8d7 b008 	ldr.w	fp, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000726:	ea2b 0905 	bic.w	r9, fp, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800072a:	4d34      	ldr	r5, [pc, #208]	; (80007fc <HAL_GPIO_Init+0x1cc>)
 800072c:	42a8      	cmp	r0, r5
 800072e:	d024      	beq.n	800077a <HAL_GPIO_Init+0x14a>
 8000730:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000734:	42a8      	cmp	r0, r5
 8000736:	d022      	beq.n	800077e <HAL_GPIO_Init+0x14e>
 8000738:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800073c:	42a8      	cmp	r0, r5
 800073e:	d020      	beq.n	8000782 <HAL_GPIO_Init+0x152>
 8000740:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000744:	42a8      	cmp	r0, r5
 8000746:	d01e      	beq.n	8000786 <HAL_GPIO_Init+0x156>
 8000748:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800074c:	42a8      	cmp	r0, r5
 800074e:	d01c      	beq.n	800078a <HAL_GPIO_Init+0x15a>
 8000750:	4540      	cmp	r0, r8
 8000752:	d01c      	beq.n	800078e <HAL_GPIO_Init+0x15e>
 8000754:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000758:	42a8      	cmp	r0, r5
 800075a:	d01a      	beq.n	8000792 <HAL_GPIO_Init+0x162>
 800075c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000760:	42a8      	cmp	r0, r5
 8000762:	d018      	beq.n	8000796 <HAL_GPIO_Init+0x166>
 8000764:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000768:	42a8      	cmp	r0, r5
 800076a:	d016      	beq.n	800079a <HAL_GPIO_Init+0x16a>
 800076c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000770:	42a8      	cmp	r0, r5
 8000772:	bf14      	ite	ne
 8000774:	250a      	movne	r5, #10
 8000776:	2509      	moveq	r5, #9
 8000778:	e010      	b.n	800079c <HAL_GPIO_Init+0x16c>
 800077a:	2500      	movs	r5, #0
 800077c:	e00e      	b.n	800079c <HAL_GPIO_Init+0x16c>
 800077e:	2501      	movs	r5, #1
 8000780:	e00c      	b.n	800079c <HAL_GPIO_Init+0x16c>
 8000782:	2502      	movs	r5, #2
 8000784:	e00a      	b.n	800079c <HAL_GPIO_Init+0x16c>
 8000786:	2503      	movs	r5, #3
 8000788:	e008      	b.n	800079c <HAL_GPIO_Init+0x16c>
 800078a:	2504      	movs	r5, #4
 800078c:	e006      	b.n	800079c <HAL_GPIO_Init+0x16c>
 800078e:	2505      	movs	r5, #5
 8000790:	e004      	b.n	800079c <HAL_GPIO_Init+0x16c>
 8000792:	2506      	movs	r5, #6
 8000794:	e002      	b.n	800079c <HAL_GPIO_Init+0x16c>
 8000796:	2507      	movs	r5, #7
 8000798:	e000      	b.n	800079c <HAL_GPIO_Init+0x16c>
 800079a:	2508      	movs	r5, #8
 800079c:	fa05 f50a 	lsl.w	r5, r5, sl
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007a0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80007a4:	ea45 0509 	orr.w	r5, r5, r9
        SYSCFG->EXTICR[position >> 2] = temp;
 80007a8:	60bd      	str	r5, [r7, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 80007aa:	ea6f 0702 	mvn.w	r7, r2
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80007ae:	6835      	ldr	r5, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 80007b0:	bf0c      	ite	eq
 80007b2:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 80007b4:	4315      	orrne	r5, r2
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007b6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80007ba:	f8ce 5000 	str.w	r5, [lr]

        temp = EXTI->EMR;
 80007be:	f8de 5004 	ldr.w	r5, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 80007c2:	bf0c      	ite	eq
 80007c4:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 80007c6:	4315      	orrne	r5, r2
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007c8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80007cc:	6075      	str	r5, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007ce:	68b5      	ldr	r5, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 80007d0:	bf0c      	ite	eq
 80007d2:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 80007d4:	4315      	orrne	r5, r2
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007d6:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80007d8:	f8ce 5008 	str.w	r5, [lr, #8]

        temp = EXTI->FTSR;
 80007dc:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 80007e0:	bf54      	ite	pl
 80007e2:	403d      	andpl	r5, r7
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 80007e4:	4315      	orrmi	r5, r2
        }
        EXTI->FTSR = temp;
 80007e6:	60f5      	str	r5, [r6, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80007e8:	3301      	adds	r3, #1
 80007ea:	2b10      	cmp	r3, #16
 80007ec:	f47f af2c 	bne.w	8000648 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 80007f0:	b005      	add	sp, #20
 80007f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007f6:	bf00      	nop
 80007f8:	40013c00 	.word	0x40013c00
 80007fc:	40020000 	.word	0x40020000
 8000800:	40023800 	.word	0x40023800
 8000804:	40021400 	.word	0x40021400

08000808 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000808:	b902      	cbnz	r2, 800080c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800080a:	0409      	lsls	r1, r1, #16
 800080c:	6181      	str	r1, [r0, #24]
 800080e:	4770      	bx	lr

08000810 <HAL_RCC_OscConfig>:
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000810:	6803      	ldr	r3, [r0, #0]
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000812:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000814:	4604      	mov	r4, r0
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000816:	07d8      	lsls	r0, r3, #31
 8000818:	d403      	bmi.n	8000822 <HAL_RCC_OscConfig+0x12>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800081a:	6823      	ldr	r3, [r4, #0]
 800081c:	0799      	lsls	r1, r3, #30
 800081e:	d452      	bmi.n	80008c6 <HAL_RCC_OscConfig+0xb6>
 8000820:	e0a5      	b.n	800096e <HAL_RCC_OscConfig+0x15e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000822:	4b96      	ldr	r3, [pc, #600]	; (8000a7c <HAL_RCC_OscConfig+0x26c>)
 8000824:	689a      	ldr	r2, [r3, #8]
 8000826:	f002 020c 	and.w	r2, r2, #12
 800082a:	2a04      	cmp	r2, #4
 800082c:	d007      	beq.n	800083e <HAL_RCC_OscConfig+0x2e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800082e:	689a      	ldr	r2, [r3, #8]
 8000830:	f002 020c 	and.w	r2, r2, #12
 8000834:	2a08      	cmp	r2, #8
 8000836:	d10b      	bne.n	8000850 <HAL_RCC_OscConfig+0x40>
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	025a      	lsls	r2, r3, #9
 800083c:	d508      	bpl.n	8000850 <HAL_RCC_OscConfig+0x40>
    {
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800083e:	4b8f      	ldr	r3, [pc, #572]	; (8000a7c <HAL_RCC_OscConfig+0x26c>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	039b      	lsls	r3, r3, #14
 8000844:	d5e9      	bpl.n	800081a <HAL_RCC_OscConfig+0xa>
 8000846:	6863      	ldr	r3, [r4, #4]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d1e6      	bne.n	800081a <HAL_RCC_OscConfig+0xa>
      {
        return HAL_ERROR;
 800084c:	2001      	movs	r0, #1
 800084e:	e176      	b.n	8000b3e <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000850:	6863      	ldr	r3, [r4, #4]
 8000852:	4d8a      	ldr	r5, [pc, #552]	; (8000a7c <HAL_RCC_OscConfig+0x26c>)
 8000854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000858:	d013      	beq.n	8000882 <HAL_RCC_OscConfig+0x72>
 800085a:	b95b      	cbnz	r3, 8000874 <HAL_RCC_OscConfig+0x64>
 800085c:	682b      	ldr	r3, [r5, #0]
 800085e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000862:	602b      	str	r3, [r5, #0]
 8000864:	682b      	ldr	r3, [r5, #0]
 8000866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800086a:	602b      	str	r3, [r5, #0]
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800086c:	f7ff fd1e 	bl	80002ac <HAL_GetTick>
 8000870:	4606      	mov	r6, r0
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000872:	e024      	b.n	80008be <HAL_RCC_OscConfig+0xae>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000874:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000878:	682b      	ldr	r3, [r5, #0]
 800087a:	d106      	bne.n	800088a <HAL_RCC_OscConfig+0x7a>
 800087c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000880:	602b      	str	r3, [r5, #0]
 8000882:	682b      	ldr	r3, [r5, #0]
 8000884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000888:	e005      	b.n	8000896 <HAL_RCC_OscConfig+0x86>
 800088a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800088e:	602b      	str	r3, [r5, #0]
 8000890:	682b      	ldr	r3, [r5, #0]
 8000892:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000896:	602b      	str	r3, [r5, #0]
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000898:	f7ff fd08 	bl	80002ac <HAL_GetTick>
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800089c:	4d77      	ldr	r5, [pc, #476]	; (8000a7c <HAL_RCC_OscConfig+0x26c>)
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800089e:	4606      	mov	r6, r0
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008a0:	682b      	ldr	r3, [r5, #0]
 80008a2:	039f      	lsls	r7, r3, #14
 80008a4:	d4b9      	bmi.n	800081a <HAL_RCC_OscConfig+0xa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008a6:	f7ff fd01 	bl	80002ac <HAL_GetTick>
 80008aa:	1b80      	subs	r0, r0, r6
 80008ac:	2864      	cmp	r0, #100	; 0x64
 80008ae:	d9f7      	bls.n	80008a0 <HAL_RCC_OscConfig+0x90>
          {
            return HAL_TIMEOUT;
 80008b0:	2003      	movs	r0, #3
 80008b2:	e144      	b.n	8000b3e <HAL_RCC_OscConfig+0x32e>
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008b4:	f7ff fcfa 	bl	80002ac <HAL_GetTick>
 80008b8:	1b80      	subs	r0, r0, r6
 80008ba:	2864      	cmp	r0, #100	; 0x64
 80008bc:	d8f8      	bhi.n	80008b0 <HAL_RCC_OscConfig+0xa0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008be:	682b      	ldr	r3, [r5, #0]
 80008c0:	0398      	lsls	r0, r3, #14
 80008c2:	d4f7      	bmi.n	80008b4 <HAL_RCC_OscConfig+0xa4>
 80008c4:	e7a9      	b.n	800081a <HAL_RCC_OscConfig+0xa>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80008c6:	4b6d      	ldr	r3, [pc, #436]	; (8000a7c <HAL_RCC_OscConfig+0x26c>)
 80008c8:	689a      	ldr	r2, [r3, #8]
 80008ca:	f012 0f0c 	tst.w	r2, #12
 80008ce:	d007      	beq.n	80008e0 <HAL_RCC_OscConfig+0xd0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008d0:	689a      	ldr	r2, [r3, #8]
 80008d2:	f002 020c 	and.w	r2, r2, #12
 80008d6:	2a08      	cmp	r2, #8
 80008d8:	d117      	bne.n	800090a <HAL_RCC_OscConfig+0xfa>
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	0259      	lsls	r1, r3, #9
 80008de:	d414      	bmi.n	800090a <HAL_RCC_OscConfig+0xfa>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008e0:	4b66      	ldr	r3, [pc, #408]	; (8000a7c <HAL_RCC_OscConfig+0x26c>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	0792      	lsls	r2, r2, #30
 80008e6:	d502      	bpl.n	80008ee <HAL_RCC_OscConfig+0xde>
 80008e8:	68e2      	ldr	r2, [r4, #12]
 80008ea:	2a01      	cmp	r2, #1
 80008ec:	d1ae      	bne.n	800084c <HAL_RCC_OscConfig+0x3c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	21f8      	movs	r1, #248	; 0xf8
 80008f2:	fa91 f1a1 	rbit	r1, r1
 80008f6:	6920      	ldr	r0, [r4, #16]
 80008f8:	fab1 f181 	clz	r1, r1
 80008fc:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000900:	fa00 f101 	lsl.w	r1, r0, r1
 8000904:	430a      	orrs	r2, r1
 8000906:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000908:	e031      	b.n	800096e <HAL_RCC_OscConfig+0x15e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800090a:	68e3      	ldr	r3, [r4, #12]
 800090c:	4d5b      	ldr	r5, [pc, #364]	; (8000a7c <HAL_RCC_OscConfig+0x26c>)
 800090e:	b1f3      	cbz	r3, 800094e <HAL_RCC_OscConfig+0x13e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000910:	682b      	ldr	r3, [r5, #0]
 8000912:	f043 0301 	orr.w	r3, r3, #1
 8000916:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000918:	f7ff fcc8 	bl	80002ac <HAL_GetTick>
 800091c:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800091e:	682b      	ldr	r3, [r5, #0]
 8000920:	4856      	ldr	r0, [pc, #344]	; (8000a7c <HAL_RCC_OscConfig+0x26c>)
 8000922:	079b      	lsls	r3, r3, #30
 8000924:	d405      	bmi.n	8000932 <HAL_RCC_OscConfig+0x122>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000926:	f7ff fcc1 	bl	80002ac <HAL_GetTick>
 800092a:	1b80      	subs	r0, r0, r6
 800092c:	2802      	cmp	r0, #2
 800092e:	d9f6      	bls.n	800091e <HAL_RCC_OscConfig+0x10e>
 8000930:	e7be      	b.n	80008b0 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000932:	6803      	ldr	r3, [r0, #0]
 8000934:	22f8      	movs	r2, #248	; 0xf8
 8000936:	fa92 f2a2 	rbit	r2, r2
 800093a:	6921      	ldr	r1, [r4, #16]
 800093c:	fab2 f282 	clz	r2, r2
 8000940:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000944:	fa01 f202 	lsl.w	r2, r1, r2
 8000948:	4313      	orrs	r3, r2
 800094a:	6003      	str	r3, [r0, #0]
 800094c:	e00f      	b.n	800096e <HAL_RCC_OscConfig+0x15e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800094e:	682b      	ldr	r3, [r5, #0]
 8000950:	f023 0301 	bic.w	r3, r3, #1
 8000954:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000956:	f7ff fca9 	bl	80002ac <HAL_GetTick>
 800095a:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800095c:	682b      	ldr	r3, [r5, #0]
 800095e:	079f      	lsls	r7, r3, #30
 8000960:	d505      	bpl.n	800096e <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000962:	f7ff fca3 	bl	80002ac <HAL_GetTick>
 8000966:	1b80      	subs	r0, r0, r6
 8000968:	2802      	cmp	r0, #2
 800096a:	d9f7      	bls.n	800095c <HAL_RCC_OscConfig+0x14c>
 800096c:	e7a0      	b.n	80008b0 <HAL_RCC_OscConfig+0xa0>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800096e:	6823      	ldr	r3, [r4, #0]
 8000970:	071e      	lsls	r6, r3, #28
 8000972:	d403      	bmi.n	800097c <HAL_RCC_OscConfig+0x16c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000974:	6823      	ldr	r3, [r4, #0]
 8000976:	075d      	lsls	r5, r3, #29
 8000978:	d549      	bpl.n	8000a0e <HAL_RCC_OscConfig+0x1fe>
 800097a:	e022      	b.n	80009c2 <HAL_RCC_OscConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800097c:	6963      	ldr	r3, [r4, #20]
 800097e:	4d3f      	ldr	r5, [pc, #252]	; (8000a7c <HAL_RCC_OscConfig+0x26c>)
 8000980:	b17b      	cbz	r3, 80009a2 <HAL_RCC_OscConfig+0x192>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000982:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	676b      	str	r3, [r5, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800098a:	f7ff fc8f 	bl	80002ac <HAL_GetTick>
 800098e:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000990:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000992:	0798      	lsls	r0, r3, #30
 8000994:	d4ee      	bmi.n	8000974 <HAL_RCC_OscConfig+0x164>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000996:	f7ff fc89 	bl	80002ac <HAL_GetTick>
 800099a:	1b80      	subs	r0, r0, r6
 800099c:	2802      	cmp	r0, #2
 800099e:	d9f7      	bls.n	8000990 <HAL_RCC_OscConfig+0x180>
 80009a0:	e786      	b.n	80008b0 <HAL_RCC_OscConfig+0xa0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009a2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009a4:	f023 0301 	bic.w	r3, r3, #1
 80009a8:	676b      	str	r3, [r5, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80009aa:	f7ff fc7f 	bl	80002ac <HAL_GetTick>
 80009ae:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009b0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009b2:	0799      	lsls	r1, r3, #30
 80009b4:	d5de      	bpl.n	8000974 <HAL_RCC_OscConfig+0x164>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009b6:	f7ff fc79 	bl	80002ac <HAL_GetTick>
 80009ba:	1b80      	subs	r0, r0, r6
 80009bc:	2802      	cmp	r0, #2
 80009be:	d9f7      	bls.n	80009b0 <HAL_RCC_OscConfig+0x1a0>
 80009c0:	e776      	b.n	80008b0 <HAL_RCC_OscConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80009c2:	4b2e      	ldr	r3, [pc, #184]	; (8000a7c <HAL_RCC_OscConfig+0x26c>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80009c4:	4d2e      	ldr	r5, [pc, #184]	; (8000a80 <HAL_RCC_OscConfig+0x270>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80009c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009cc:	641a      	str	r2, [r3, #64]	; 0x40
 80009ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d4:	9301      	str	r3, [sp, #4]
 80009d6:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80009d8:	682b      	ldr	r3, [r5, #0]
 80009da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009de:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80009e0:	f7ff fc64 	bl	80002ac <HAL_GetTick>
 80009e4:	4606      	mov	r6, r0
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80009e6:	682b      	ldr	r3, [r5, #0]
 80009e8:	05da      	lsls	r2, r3, #23
 80009ea:	d514      	bpl.n	8000a16 <HAL_RCC_OscConfig+0x206>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009ec:	68a3      	ldr	r3, [r4, #8]
 80009ee:	4d23      	ldr	r5, [pc, #140]	; (8000a7c <HAL_RCC_OscConfig+0x26c>)
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d116      	bne.n	8000a22 <HAL_RCC_OscConfig+0x212>
 80009f4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009f6:	f043 0301 	orr.w	r3, r3, #1
 80009fa:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009fc:	f241 3588 	movw	r5, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a00:	f7ff fc54 	bl	80002ac <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a04:	4e1d      	ldr	r6, [pc, #116]	; (8000a7c <HAL_RCC_OscConfig+0x26c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a06:	4607      	mov	r7, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a08:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000a0a:	079b      	lsls	r3, r3, #30
 8000a0c:	d526      	bpl.n	8000a5c <HAL_RCC_OscConfig+0x24c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a0e:	69a2      	ldr	r2, [r4, #24]
 8000a10:	2a00      	cmp	r2, #0
 8000a12:	d137      	bne.n	8000a84 <HAL_RCC_OscConfig+0x274>
 8000a14:	e079      	b.n	8000b0a <HAL_RCC_OscConfig+0x2fa>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000a16:	f7ff fc49 	bl	80002ac <HAL_GetTick>
 8000a1a:	1b80      	subs	r0, r0, r6
 8000a1c:	2864      	cmp	r0, #100	; 0x64
 8000a1e:	d9e2      	bls.n	80009e6 <HAL_RCC_OscConfig+0x1d6>
 8000a20:	e746      	b.n	80008b0 <HAL_RCC_OscConfig+0xa0>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a22:	b96b      	cbnz	r3, 8000a40 <HAL_RCC_OscConfig+0x230>
 8000a24:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a26:	f241 3788 	movw	r7, #5000	; 0x1388
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a2a:	f023 0301 	bic.w	r3, r3, #1
 8000a2e:	672b      	str	r3, [r5, #112]	; 0x70
 8000a30:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a32:	f023 0304 	bic.w	r3, r3, #4
 8000a36:	672b      	str	r3, [r5, #112]	; 0x70
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a38:	f7ff fc38 	bl	80002ac <HAL_GetTick>
 8000a3c:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a3e:	e019      	b.n	8000a74 <HAL_RCC_OscConfig+0x264>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a40:	2b05      	cmp	r3, #5
 8000a42:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a44:	d103      	bne.n	8000a4e <HAL_RCC_OscConfig+0x23e>
 8000a46:	f043 0304 	orr.w	r3, r3, #4
 8000a4a:	672b      	str	r3, [r5, #112]	; 0x70
 8000a4c:	e7d2      	b.n	80009f4 <HAL_RCC_OscConfig+0x1e4>
 8000a4e:	f023 0301 	bic.w	r3, r3, #1
 8000a52:	672b      	str	r3, [r5, #112]	; 0x70
 8000a54:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a56:	f023 0304 	bic.w	r3, r3, #4
 8000a5a:	e7ce      	b.n	80009fa <HAL_RCC_OscConfig+0x1ea>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a5c:	f7ff fc26 	bl	80002ac <HAL_GetTick>
 8000a60:	1bc0      	subs	r0, r0, r7
 8000a62:	42a8      	cmp	r0, r5
 8000a64:	d9d0      	bls.n	8000a08 <HAL_RCC_OscConfig+0x1f8>
 8000a66:	e723      	b.n	80008b0 <HAL_RCC_OscConfig+0xa0>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a68:	f7ff fc20 	bl	80002ac <HAL_GetTick>
 8000a6c:	1b80      	subs	r0, r0, r6
 8000a6e:	42b8      	cmp	r0, r7
 8000a70:	f63f af1e 	bhi.w	80008b0 <HAL_RCC_OscConfig+0xa0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a74:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a76:	0798      	lsls	r0, r3, #30
 8000a78:	d4f6      	bmi.n	8000a68 <HAL_RCC_OscConfig+0x258>
 8000a7a:	e7c8      	b.n	8000a0e <HAL_RCC_OscConfig+0x1fe>
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40007000 	.word	0x40007000
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a84:	4d2f      	ldr	r5, [pc, #188]	; (8000b44 <HAL_RCC_OscConfig+0x334>)
 8000a86:	68ab      	ldr	r3, [r5, #8]
 8000a88:	f003 030c 	and.w	r3, r3, #12
 8000a8c:	2b08      	cmp	r3, #8
 8000a8e:	f43f aedd 	beq.w	800084c <HAL_RCC_OscConfig+0x3c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000a92:	682b      	ldr	r3, [r5, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a94:	2a02      	cmp	r2, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000a96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000a9a:	602b      	str	r3, [r5, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a9c:	d143      	bne.n	8000b26 <HAL_RCC_OscConfig+0x316>
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a9e:	f7ff fc05 	bl	80002ac <HAL_GetTick>
 8000aa2:	4607      	mov	r7, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000aa4:	682b      	ldr	r3, [r5, #0]
 8000aa6:	4e27      	ldr	r6, [pc, #156]	; (8000b44 <HAL_RCC_OscConfig+0x334>)
 8000aa8:	0199      	lsls	r1, r3, #6
 8000aaa:	d430      	bmi.n	8000b0e <HAL_RCC_OscConfig+0x2fe>
 8000aac:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8000ab0:	fa92 f2a2 	rbit	r2, r2
 8000ab4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ab8:	fab2 f082 	clz	r0, r2
 8000abc:	fa93 f3a3 	rbit	r3, r3
 8000ac0:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8000ac4:	fab3 f583 	clz	r5, r3
 8000ac8:	fa92 f2a2 	rbit	r2, r2
 8000acc:	69e3      	ldr	r3, [r4, #28]
 8000ace:	fab2 f182 	clz	r1, r2
 8000ad2:	6a27      	ldr	r7, [r4, #32]
 8000ad4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ad6:	431f      	orrs	r7, r3
 8000ad8:	4082      	lsls	r2, r0
 8000ada:	f047 5300 	orr.w	r3, r7, #536870912	; 0x20000000
 8000ade:	ea43 0002 	orr.w	r0, r3, r2
 8000ae2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ae4:	085a      	lsrs	r2, r3, #1
 8000ae6:	3a01      	subs	r2, #1
 8000ae8:	fa02 f305 	lsl.w	r3, r2, r5
 8000aec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000aee:	4303      	orrs	r3, r0
 8000af0:	408a      	lsls	r2, r1
 8000af2:	4313      	orrs	r3, r2
 8000af4:	6073      	str	r3, [r6, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000af6:	6833      	ldr	r3, [r6, #0]
 8000af8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000afc:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000afe:	f7ff fbd5 	bl	80002ac <HAL_GetTick>
 8000b02:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b04:	6833      	ldr	r3, [r6, #0]
 8000b06:	019a      	lsls	r2, r3, #6
 8000b08:	d507      	bpl.n	8000b1a <HAL_RCC_OscConfig+0x30a>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	e017      	b.n	8000b3e <HAL_RCC_OscConfig+0x32e>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b0e:	f7ff fbcd 	bl	80002ac <HAL_GetTick>
 8000b12:	1bc0      	subs	r0, r0, r7
 8000b14:	2802      	cmp	r0, #2
 8000b16:	d9c5      	bls.n	8000aa4 <HAL_RCC_OscConfig+0x294>
 8000b18:	e6ca      	b.n	80008b0 <HAL_RCC_OscConfig+0xa0>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b1a:	f7ff fbc7 	bl	80002ac <HAL_GetTick>
 8000b1e:	1b00      	subs	r0, r0, r4
 8000b20:	2802      	cmp	r0, #2
 8000b22:	d9ef      	bls.n	8000b04 <HAL_RCC_OscConfig+0x2f4>
 8000b24:	e6c4      	b.n	80008b0 <HAL_RCC_OscConfig+0xa0>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b26:	f7ff fbc1 	bl	80002ac <HAL_GetTick>
 8000b2a:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b2c:	682b      	ldr	r3, [r5, #0]
 8000b2e:	019b      	lsls	r3, r3, #6
 8000b30:	d5eb      	bpl.n	8000b0a <HAL_RCC_OscConfig+0x2fa>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b32:	f7ff fbbb 	bl	80002ac <HAL_GetTick>
 8000b36:	1b00      	subs	r0, r0, r4
 8000b38:	2802      	cmp	r0, #2
 8000b3a:	d9f7      	bls.n	8000b2c <HAL_RCC_OscConfig+0x31c>
 8000b3c:	e6b8      	b.n	80008b0 <HAL_RCC_OscConfig+0xa0>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000b3e:	b003      	add	sp, #12
 8000b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800

08000b48 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b48:	491b      	ldr	r1, [pc, #108]	; (8000bb8 <HAL_RCC_GetSysClockFreq+0x70>)
 8000b4a:	688b      	ldr	r3, [r1, #8]
 8000b4c:	f003 030c 	and.w	r3, r3, #12
 8000b50:	2b04      	cmp	r3, #4
 8000b52:	d02c      	beq.n	8000bae <HAL_RCC_GetSysClockFreq+0x66>
 8000b54:	2b08      	cmp	r3, #8
 8000b56:	d12c      	bne.n	8000bb2 <HAL_RCC_GetSysClockFreq+0x6a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b58:	6848      	ldr	r0, [r1, #4]
 8000b5a:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000b5e:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b60:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000b64:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000b68:	684b      	ldr	r3, [r1, #4]
 8000b6a:	fa92 f2a2 	rbit	r2, r2
 8000b6e:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8000b72:	fab2 f282 	clz	r2, r2
 8000b76:	ea01 0103 	and.w	r1, r1, r3
 8000b7a:	fa21 f102 	lsr.w	r1, r1, r2
 8000b7e:	bf14      	ite	ne
 8000b80:	4a0e      	ldrne	r2, [pc, #56]	; (8000bbc <HAL_RCC_GetSysClockFreq+0x74>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8000b82:	4a0f      	ldreq	r2, [pc, #60]	; (8000bc0 <HAL_RCC_GetSysClockFreq+0x78>)
 8000b84:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8000b88:	4a0b      	ldr	r2, [pc, #44]	; (8000bb8 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8000b8a:	fb00 f301 	mul.w	r3, r0, r1
 8000b8e:	f44f 3040 	mov.w	r0, #196608	; 0x30000
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8000b92:	6852      	ldr	r2, [r2, #4]
 8000b94:	fa90 f0a0 	rbit	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8000b98:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8000b9c:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8000ba0:	fa22 f000 	lsr.w	r0, r2, r0
 8000ba4:	3001      	adds	r0, #1
 8000ba6:	0040      	lsls	r0, r0, #1
 8000ba8:	fbb3 f0f0 	udiv	r0, r3, r0
 8000bac:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000bae:	4803      	ldr	r0, [pc, #12]	; (8000bbc <HAL_RCC_GetSysClockFreq+0x74>)
 8000bb0:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000bb2:	4803      	ldr	r0, [pc, #12]	; (8000bc0 <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	017d7840 	.word	0x017d7840
 8000bc0:	00f42400 	.word	0x00f42400

08000bc4 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bc4:	4a50      	ldr	r2, [pc, #320]	; (8000d08 <HAL_RCC_ClockConfig+0x144>)
 8000bc6:	6813      	ldr	r3, [r2, #0]
 8000bc8:	f003 030f 	and.w	r3, r3, #15
 8000bcc:	428b      	cmp	r3, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bd2:	4604      	mov	r4, r0
 8000bd4:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bd6:	d30a      	bcc.n	8000bee <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
  
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bd8:	6821      	ldr	r1, [r4, #0]
 8000bda:	0788      	lsls	r0, r1, #30
 8000bdc:	d514      	bpl.n	8000c08 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000bde:	484b      	ldr	r0, [pc, #300]	; (8000d0c <HAL_RCC_ClockConfig+0x148>)
 8000be0:	6883      	ldr	r3, [r0, #8]
 8000be2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000be6:	68a3      	ldr	r3, [r4, #8]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	6083      	str	r3, [r0, #8]
 8000bec:	e00c      	b.n	8000c08 <HAL_RCC_ClockConfig+0x44>
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bee:	6813      	ldr	r3, [r2, #0]
 8000bf0:	f023 030f 	bic.w	r3, r3, #15
 8000bf4:	430b      	orrs	r3, r1
 8000bf6:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000bf8:	6813      	ldr	r3, [r2, #0]
 8000bfa:	f003 030f 	and.w	r3, r3, #15
 8000bfe:	4299      	cmp	r1, r3
 8000c00:	d0ea      	beq.n	8000bd8 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8000c02:	2001      	movs	r0, #1
 8000c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c08:	07c9      	lsls	r1, r1, #31
 8000c0a:	d406      	bmi.n	8000c1a <HAL_RCC_ClockConfig+0x56>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c0c:	4a3e      	ldr	r2, [pc, #248]	; (8000d08 <HAL_RCC_ClockConfig+0x144>)
 8000c0e:	6813      	ldr	r3, [r2, #0]
 8000c10:	f003 030f 	and.w	r3, r3, #15
 8000c14:	429d      	cmp	r5, r3
 8000c16:	d342      	bcc.n	8000c9e <HAL_RCC_ClockConfig+0xda>
 8000c18:	e04b      	b.n	8000cb2 <HAL_RCC_ClockConfig+0xee>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c1a:	6862      	ldr	r2, [r4, #4]
 8000c1c:	4b3b      	ldr	r3, [pc, #236]	; (8000d0c <HAL_RCC_ClockConfig+0x148>)
 8000c1e:	2a01      	cmp	r2, #1
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c20:	6819      	ldr	r1, [r3, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c22:	d102      	bne.n	8000c2a <HAL_RCC_ClockConfig+0x66>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c24:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 8000c28:	e006      	b.n	8000c38 <HAL_RCC_ClockConfig+0x74>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c2a:	2a02      	cmp	r2, #2
 8000c2c:	d102      	bne.n	8000c34 <HAL_RCC_ClockConfig+0x70>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c2e:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 8000c32:	e001      	b.n	8000c38 <HAL_RCC_ClockConfig+0x74>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c34:	f011 0f02 	tst.w	r1, #2
 8000c38:	d0e3      	beq.n	8000c02 <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c3a:	6899      	ldr	r1, [r3, #8]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c3c:	f241 3888 	movw	r8, #5000	; 0x1388
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c40:	4f32      	ldr	r7, [pc, #200]	; (8000d0c <HAL_RCC_ClockConfig+0x148>)
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c42:	f021 0103 	bic.w	r1, r1, #3
 8000c46:	430a      	orrs	r2, r1
 8000c48:	609a      	str	r2, [r3, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000c4a:	f7ff fb2f 	bl	80002ac <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c4e:	6863      	ldr	r3, [r4, #4]
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000c50:	4606      	mov	r6, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d10c      	bne.n	8000c70 <HAL_RCC_ClockConfig+0xac>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	f003 030c 	and.w	r3, r3, #12
 8000c5c:	2b04      	cmp	r3, #4
 8000c5e:	d0d5      	beq.n	8000c0c <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c60:	f7ff fb24 	bl	80002ac <HAL_GetTick>
 8000c64:	1b80      	subs	r0, r0, r6
 8000c66:	4540      	cmp	r0, r8
 8000c68:	d9f5      	bls.n	8000c56 <HAL_RCC_ClockConfig+0x92>
        {
          return HAL_TIMEOUT;
 8000c6a:	2003      	movs	r0, #3
 8000c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d10f      	bne.n	8000c94 <HAL_RCC_ClockConfig+0xd0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	f003 030c 	and.w	r3, r3, #12
 8000c7a:	2b08      	cmp	r3, #8
 8000c7c:	d0c6      	beq.n	8000c0c <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c7e:	f7ff fb15 	bl	80002ac <HAL_GetTick>
 8000c82:	1b80      	subs	r0, r0, r6
 8000c84:	4540      	cmp	r0, r8
 8000c86:	d9f5      	bls.n	8000c74 <HAL_RCC_ClockConfig+0xb0>
 8000c88:	e7ef      	b.n	8000c6a <HAL_RCC_ClockConfig+0xa6>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c8a:	f7ff fb0f 	bl	80002ac <HAL_GetTick>
 8000c8e:	1b80      	subs	r0, r0, r6
 8000c90:	4540      	cmp	r0, r8
 8000c92:	d8ea      	bhi.n	8000c6a <HAL_RCC_ClockConfig+0xa6>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	f013 0f0c 	tst.w	r3, #12
 8000c9a:	d1f6      	bne.n	8000c8a <HAL_RCC_ClockConfig+0xc6>
 8000c9c:	e7b6      	b.n	8000c0c <HAL_RCC_ClockConfig+0x48>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c9e:	6813      	ldr	r3, [r2, #0]
 8000ca0:	f023 030f 	bic.w	r3, r3, #15
 8000ca4:	432b      	orrs	r3, r5
 8000ca6:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ca8:	6813      	ldr	r3, [r2, #0]
 8000caa:	f003 030f 	and.w	r3, r3, #15
 8000cae:	429d      	cmp	r5, r3
 8000cb0:	d1a7      	bne.n	8000c02 <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cb2:	6821      	ldr	r1, [r4, #0]
 8000cb4:	074a      	lsls	r2, r1, #29
 8000cb6:	d506      	bpl.n	8000cc6 <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000cb8:	4814      	ldr	r0, [pc, #80]	; (8000d0c <HAL_RCC_ClockConfig+0x148>)
 8000cba:	6883      	ldr	r3, [r0, #8]
 8000cbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000cc0:	68e3      	ldr	r3, [r4, #12]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cc6:	070b      	lsls	r3, r1, #28
 8000cc8:	d507      	bpl.n	8000cda <HAL_RCC_ClockConfig+0x116>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000cca:	4a10      	ldr	r2, [pc, #64]	; (8000d0c <HAL_RCC_ClockConfig+0x148>)
 8000ccc:	6921      	ldr	r1, [r4, #16]
 8000cce:	6893      	ldr	r3, [r2, #8]
 8000cd0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000cd4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000cd8:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000cda:	f7ff ff35 	bl	8000b48 <HAL_RCC_GetSysClockFreq>
 8000cde:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <HAL_RCC_ClockConfig+0x148>)
 8000ce0:	22f0      	movs	r2, #240	; 0xf0
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	fa92 f2a2 	rbit	r2, r2
 8000ce8:	fab2 f282 	clz	r2, r2
 8000cec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cf0:	40d3      	lsrs	r3, r2
 8000cf2:	4a07      	ldr	r2, [pc, #28]	; (8000d10 <HAL_RCC_ClockConfig+0x14c>)
 8000cf4:	5cd3      	ldrb	r3, [r2, r3]
 8000cf6:	40d8      	lsrs	r0, r3
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_RCC_ClockConfig+0x150>)
 8000cfa:	6018      	str	r0, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f7ff faad 	bl	800025c <HAL_InitTick>
  
  return HAL_OK;
 8000d02:	2000      	movs	r0, #0
}
 8000d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d08:	40023c00 	.word	0x40023c00
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	08002701 	.word	0x08002701
 8000d14:	20000000 	.word	0x20000000

08000d18 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000d18:	4b01      	ldr	r3, [pc, #4]	; (8000d20 <HAL_RCC_GetHCLKFreq+0x8>)
 8000d1a:	6818      	ldr	r0, [r3, #0]
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000000 	.word	0x20000000

08000d24 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000d26:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	fa92 f2a2 	rbit	r2, r2
 8000d30:	fab2 f282 	clz	r2, r2
 8000d34:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000d38:	40d3      	lsrs	r3, r2
 8000d3a:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8000d3c:	5cd3      	ldrb	r3, [r2, r3]
 8000d3e:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000d40:	6810      	ldr	r0, [r2, #0]
}
 8000d42:	40d8      	lsrs	r0, r3
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	08002711 	.word	0x08002711
 8000d50:	20000000 	.word	0x20000000

08000d54 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000d56:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	fa92 f2a2 	rbit	r2, r2
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000d68:	40d3      	lsrs	r3, r2
 8000d6a:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8000d6c:	5cd3      	ldrb	r3, [r2, r3]
 8000d6e:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000d70:	6810      	ldr	r0, [r2, #0]
} 
 8000d72:	40d8      	lsrs	r0, r3
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	08002711 	.word	0x08002711
 8000d80:	20000000 	.word	0x20000000

08000d84 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8000d84:	6803      	ldr	r3, [r0, #0]
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000d86:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8000d8a:	f013 0601 	ands.w	r6, r3, #1
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000d8e:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8000d90:	d00b      	beq.n	8000daa <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8000d92:	4ab6      	ldr	r2, [pc, #728]	; (800106c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000d94:	6891      	ldr	r1, [r2, #8]
 8000d96:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8000d9a:	6091      	str	r1, [r2, #8]
 8000d9c:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8000d9e:	6891      	ldr	r1, [r2, #8]
 8000da0:	4331      	orrs	r1, r6
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tickstart = 0;
  uint32_t tmpreg0 = 0;
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
 8000da2:	fab6 f686 	clz	r6, r6
 8000da6:	0976      	lsrs	r6, r6, #5
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8000da8:	6091      	str	r1, [r2, #8]
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8000daa:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8000dae:	d012      	beq.n	8000dd6 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000db0:	49ae      	ldr	r1, [pc, #696]	; (800106c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000db2:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8000db4:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8000db8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000dbc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
    {
      plli2sused = 1; 
 8000dc0:	bf08      	it	eq
 8000dc2:	2601      	moveq	r6, #1
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000dc4:	ea42 0205 	orr.w	r2, r2, r5
{
  uint32_t tickstart = 0;
  uint32_t tmpreg0 = 0;
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;
 8000dc8:	bf16      	itet	ne
 8000dca:	fab5 f585 	clzne	r5, r5
 8000dce:	2500      	moveq	r5, #0
 8000dd0:	096d      	lsrne	r5, r5, #5
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000dd2:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8000dd6:	02d8      	lsls	r0, r3, #11
 8000dd8:	d511      	bpl.n	8000dfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8000dda:	48a4      	ldr	r0, [pc, #656]	; (800106c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000ddc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000dde:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8000de2:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8000de6:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8000dea:	ea42 0201 	orr.w	r2, r2, r1
 8000dee:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8000df2:	d003      	beq.n	8000dfc <HAL_RCCEx_PeriphCLKConfig+0x78>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 8000df4:	2900      	cmp	r1, #0
 8000df6:	bf08      	it	eq
 8000df8:	2501      	moveq	r5, #1
 8000dfa:	e000      	b.n	8000dfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1; 
 8000dfc:	2601      	movs	r6, #1
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {    
      plli2sused = 1; 
 8000dfe:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000e02:	bf18      	it	ne
 8000e04:	2601      	movne	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000e06:	0699      	lsls	r1, r3, #26
 8000e08:	d55d      	bpl.n	8000ec6 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000e0a:	4b98      	ldr	r3, [pc, #608]	; (800106c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8000e0c:	4f98      	ldr	r7, [pc, #608]	; (8001070 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000e0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e10:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e14:	641a      	str	r2, [r3, #64]	; 0x40
 8000e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1c:	9301      	str	r3, [sp, #4]
 8000e1e:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e26:	603b      	str	r3, [r7, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000e28:	f7ff fa40 	bl	80002ac <HAL_GetTick>
 8000e2c:	4680      	mov	r8, r0
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	05da      	lsls	r2, r3, #23
 8000e32:	d407      	bmi.n	8000e44 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e34:	f7ff fa3a 	bl	80002ac <HAL_GetTick>
 8000e38:	ebc8 0000 	rsb	r0, r8, r0
 8000e3c:	2864      	cmp	r0, #100	; 0x64
 8000e3e:	d9f6      	bls.n	8000e2e <HAL_RCCEx_PeriphCLKConfig+0xaa>
      {
        return HAL_TIMEOUT;
 8000e40:	2003      	movs	r0, #3
 8000e42:	e340      	b.n	80014c6 <HAL_RCCEx_PeriphCLKConfig+0x742>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000e44:	4f89      	ldr	r7, [pc, #548]	; (800106c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000e46:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000e48:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000e4c:	d10f      	bne.n	8000e6e <HAL_RCCEx_PeriphCLKConfig+0xea>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000e4e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000e50:	f402 7340 	and.w	r3, r2, #768	; 0x300
 8000e54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000e58:	4b84      	ldr	r3, [pc, #528]	; (800106c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000e5a:	d12b      	bne.n	8000eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8000e5c:	6899      	ldr	r1, [r3, #8]
 8000e5e:	f421 10f8 	bic.w	r0, r1, #2031616	; 0x1f0000
 8000e62:	f022 4170 	bic.w	r1, r2, #4026531840	; 0xf0000000
 8000e66:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8000e6a:	4301      	orrs	r1, r0
 8000e6c:	e025      	b.n	8000eba <HAL_RCCEx_PeriphCLKConfig+0x136>
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000e6e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000e70:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d0ea      	beq.n	8000e4e <HAL_RCCEx_PeriphCLKConfig+0xca>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000e78:	6f3b      	ldr	r3, [r7, #112]	; 0x70

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8000e7a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8000e80:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000e84:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000e86:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000e88:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e8c:	673a      	str	r2, [r7, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8000e8e:	673b      	str	r3, [r7, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8000e90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e92:	07db      	lsls	r3, r3, #31
 8000e94:	d5db      	bpl.n	8000e4e <HAL_RCCEx_PeriphCLKConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e96:	f7ff fa09 	bl	80002ac <HAL_GetTick>
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e9a:	f241 3988 	movw	r9, #5000	; 0x1388

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e9e:	4680      	mov	r8, r0
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ea0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ea2:	0798      	lsls	r0, r3, #30
 8000ea4:	d4d3      	bmi.n	8000e4e <HAL_RCCEx_PeriphCLKConfig+0xca>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ea6:	f7ff fa01 	bl	80002ac <HAL_GetTick>
 8000eaa:	ebc8 0000 	rsb	r0, r8, r0
 8000eae:	4548      	cmp	r0, r9
 8000eb0:	d9f6      	bls.n	8000ea0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8000eb2:	e7c5      	b.n	8000e40 <HAL_RCCEx_PeriphCLKConfig+0xbc>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000eb4:	6899      	ldr	r1, [r3, #8]
 8000eb6:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8000eba:	6099      	str	r1, [r3, #8]
 8000ebc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8000ec0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	671a      	str	r2, [r3, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8000ec6:	6823      	ldr	r3, [r4, #0]
 8000ec8:	06d9      	lsls	r1, r3, #27
 8000eca:	d50c      	bpl.n	8000ee6 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8000ecc:	4a67      	ldr	r2, [pc, #412]	; (800106c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000ece:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8000ed2:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8000ed6:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8000eda:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 8000ede:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000ee0:	4301      	orrs	r1, r0
 8000ee2:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000ee6:	045a      	lsls	r2, r3, #17
 8000ee8:	d508      	bpl.n	8000efc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000eea:	4860      	ldr	r0, [pc, #384]	; (800106c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000eec:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8000ef0:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8000ef4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8000efc:	041f      	lsls	r7, r3, #16
 8000efe:	d508      	bpl.n	8000f12 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8000f00:	485a      	ldr	r0, [pc, #360]	; (800106c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000f02:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8000f06:	f422 2140 	bic.w	r1, r2, #786432	; 0xc0000
 8000f0a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8000f12:	03d8      	lsls	r0, r3, #15
 8000f14:	d508      	bpl.n	8000f28 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8000f16:	4855      	ldr	r0, [pc, #340]	; (800106c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000f18:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8000f1c:	f422 1140 	bic.w	r1, r2, #3145728	; 0x300000
 8000f20:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8000f22:	430a      	orrs	r2, r1
 8000f24:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8000f28:	0399      	lsls	r1, r3, #14
 8000f2a:	d508      	bpl.n	8000f3e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8000f2c:	484f      	ldr	r0, [pc, #316]	; (800106c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000f2e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8000f32:	f422 0140 	bic.w	r1, r2, #12582912	; 0xc00000
 8000f36:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000f3e:	065a      	lsls	r2, r3, #25
 8000f40:	d508      	bpl.n	8000f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000f42:	484a      	ldr	r0, [pc, #296]	; (800106c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000f44:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8000f48:	f022 0103 	bic.w	r1, r2, #3
 8000f4c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8000f54:	061f      	lsls	r7, r3, #24
 8000f56:	d508      	bpl.n	8000f6a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8000f58:	4844      	ldr	r0, [pc, #272]	; (800106c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000f5a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8000f5e:	f022 010c 	bic.w	r1, r2, #12
 8000f62:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000f64:	430a      	orrs	r2, r1
 8000f66:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8000f6a:	05d8      	lsls	r0, r3, #23
 8000f6c:	d508      	bpl.n	8000f80 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8000f6e:	483f      	ldr	r0, [pc, #252]	; (800106c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000f70:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8000f74:	f022 0130 	bic.w	r1, r2, #48	; 0x30
 8000f78:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8000f80:	0599      	lsls	r1, r3, #22
 8000f82:	d508      	bpl.n	8000f96 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8000f84:	4839      	ldr	r0, [pc, #228]	; (800106c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000f86:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8000f8a:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 8000f8e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000f90:	430a      	orrs	r2, r1
 8000f92:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8000f96:	055a      	lsls	r2, r3, #21
 8000f98:	d508      	bpl.n	8000fac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8000f9a:	4834      	ldr	r0, [pc, #208]	; (800106c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000f9c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8000fa0:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8000fa4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000fa6:	430a      	orrs	r2, r1
 8000fa8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8000fac:	051f      	lsls	r7, r3, #20
 8000fae:	d508      	bpl.n	8000fc2 <HAL_RCCEx_PeriphCLKConfig+0x23e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8000fb0:	482e      	ldr	r0, [pc, #184]	; (800106c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000fb2:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8000fb6:	f422 6140 	bic.w	r1, r2, #3072	; 0xc00
 8000fba:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8000fc2:	04d8      	lsls	r0, r3, #19
 8000fc4:	d508      	bpl.n	8000fd8 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8000fc6:	4829      	ldr	r0, [pc, #164]	; (800106c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000fc8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8000fcc:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8000fd0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8000fd8:	0499      	lsls	r1, r3, #18
 8000fda:	d508      	bpl.n	8000fee <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8000fdc:	4823      	ldr	r0, [pc, #140]	; (800106c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000fde:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8000fe2:	f422 4140 	bic.w	r1, r2, #49152	; 0xc000
 8000fe6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8000fee:	025a      	lsls	r2, r3, #9
 8000ff0:	d508      	bpl.n	8001004 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8000ff2:	481e      	ldr	r0, [pc, #120]	; (800106c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8000ff4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8000ff8:	f022 6180 	bic.w	r1, r2, #67108864	; 0x4000000
 8000ffc:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8000ffe:	430a      	orrs	r2, r1
 8001000:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001004:	029f      	lsls	r7, r3, #10
 8001006:	d50c      	bpl.n	8001022 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001008:	4818      	ldr	r0, [pc, #96]	; (800106c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800100a:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800100c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 8001010:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001014:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 8001018:	bf08      	it	eq
 800101a:	2501      	moveq	r5, #1
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800101c:	430a      	orrs	r2, r1
 800101e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1; 
 8001022:	f013 0f08 	tst.w	r3, #8
 8001026:	bf18      	it	ne
 8001028:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800102a:	0358      	lsls	r0, r3, #13
 800102c:	d508      	bpl.n	8001040 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800102e:	480f      	ldr	r0, [pc, #60]	; (800106c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001030:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001034:	f022 7140 	bic.w	r1, r2, #50331648	; 0x3000000
 8001038:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800103a:	430a      	orrs	r2, r1
 800103c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001040:	0219      	lsls	r1, r3, #8
 8001042:	d509      	bpl.n	8001058 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001044:	4809      	ldr	r0, [pc, #36]	; (800106c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001046:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800104a:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 800104e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8001052:	430a      	orrs	r2, r1
 8001054:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001058:	2e01      	cmp	r6, #1
 800105a:	d00b      	beq.n	8001074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 800105c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001060:	d008      	beq.n	8001074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001062:	2d01      	cmp	r5, #1
 8001064:	f040 818c 	bne.w	8001380 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8001068:	e123      	b.n	80012b2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
 800106a:	bf00      	nop
 800106c:	40023800 	.word	0x40023800
 8001070:	40007000 	.word	0x40007000
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();  
 8001074:	4ec8      	ldr	r6, [pc, #800]	; (8001398 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8001076:	6833      	ldr	r3, [r6, #0]
 8001078:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800107c:	6033      	str	r3, [r6, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800107e:	f7ff f915 	bl	80002ac <HAL_GetTick>
 8001082:	4607      	mov	r7, r0
    
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001084:	6833      	ldr	r3, [r6, #0]
 8001086:	f8df e310 	ldr.w	lr, [pc, #784]	; 8001398 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800108a:	011a      	lsls	r2, r3, #4
 800108c:	d505      	bpl.n	800109a <HAL_RCCEx_PeriphCLKConfig+0x316>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800108e:	f7ff f90d 	bl	80002ac <HAL_GetTick>
 8001092:	1bc0      	subs	r0, r0, r7
 8001094:	2864      	cmp	r0, #100	; 0x64
 8001096:	d9f5      	bls.n	8001084 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8001098:	e6d2      	b.n	8000e40 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800109a:	6827      	ldr	r7, [r4, #0]
 800109c:	07fb      	lsls	r3, r7, #31
 800109e:	d53c      	bpl.n	800111a <HAL_RCCEx_PeriphCLKConfig+0x396>
 80010a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80010a2:	bbd3      	cbnz	r3, 800111a <HAL_RCCEx_PeriphCLKConfig+0x396>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 80010a4:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 80010a8:	f44f 3840 	mov.w	r8, #196608	; 0x30000
 80010ac:	fa98 f9a8 	rbit	r9, r8
 80010b0:	f04f 6670 	mov.w	r6, #251658240	; 0xf000000
 80010b4:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 80010b8:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 80010bc:	fa96 fca6 	rbit	ip, r6
 80010c0:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 80010c4:	fabc fc8c 	clz	ip, ip
 80010c8:	fa9a faaa 	rbit	sl, sl
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80010cc:	faba fa8a 	clz	sl, sl
 80010d0:	fa98 f8a8 	rbit	r8, r8
 80010d4:	fab8 f888 	clz	r8, r8
 80010d8:	fa96 f6a6 	rbit	r6, r6
 80010dc:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80010e0:	fab6 f686 	clz	r6, r6
 80010e4:	fa93 f3a3 	rbit	r3, r3
 80010e8:	fab3 fb83 	clz	fp, r3
 80010ec:	6861      	ldr	r1, [r4, #4]
 80010ee:	68a3      	ldr	r3, [r4, #8]
 80010f0:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 80010f4:	fa01 f10a 	lsl.w	r1, r1, sl
 80010f8:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80010fc:	fa03 f30b 	lsl.w	r3, r3, fp
 8001100:	fa20 f009 	lsr.w	r0, r0, r9
 8001104:	fa22 f20c 	lsr.w	r2, r2, ip
 8001108:	430b      	orrs	r3, r1
 800110a:	fa00 f108 	lsl.w	r1, r0, r8
 800110e:	4319      	orrs	r1, r3
 8001110:	fa02 f306 	lsl.w	r3, r2, r6
 8001114:	430b      	orrs	r3, r1
 8001116:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
    }
        
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800111a:	033e      	lsls	r6, r7, #12
 800111c:	d503      	bpl.n	8001126 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 800111e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001120:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001124:	d005      	beq.n	8001132 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8001126:	02f8      	lsls	r0, r7, #11
 8001128:	d549      	bpl.n	80011be <HAL_RCCEx_PeriphCLKConfig+0x43a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 800112a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800112c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001130:	d145      	bne.n	80011be <HAL_RCCEx_PeriphCLKConfig+0x43a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8001132:	f8df e264 	ldr.w	lr, [pc, #612]	; 8001398 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8001136:	f44f 3840 	mov.w	r8, #196608	; 0x30000
 800113a:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 800113e:	fa98 f9a8 	rbit	r9, r8
 8001142:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8001146:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 800114a:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 800114e:	fa96 fca6 	rbit	ip, r6
 8001152:	f647 7bc0 	movw	fp, #32704	; 0x7fc0
 8001156:	fabc fc8c 	clz	ip, ip
 800115a:	fa9b fbab 	rbit	fp, fp
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800115e:	fabb fb8b 	clz	fp, fp
 8001162:	fa98 f8a8 	rbit	r8, r8
 8001166:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 800116a:	fab8 f888 	clz	r8, r8
 800116e:	fa93 f3a3 	rbit	r3, r3
 8001172:	fab3 fa83 	clz	sl, r3
 8001176:	fa96 f6a6 	rbit	r6, r6
 800117a:	6863      	ldr	r3, [r4, #4]
 800117c:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8001180:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8001184:	fab6 f686 	clz	r6, r6
 8001188:	fa03 f10b 	lsl.w	r1, r3, fp
 800118c:	68e3      	ldr	r3, [r4, #12]
 800118e:	fa20 f009 	lsr.w	r0, r0, r9
 8001192:	fa22 f20c 	lsr.w	r2, r2, ip
 8001196:	fa03 f30a 	lsl.w	r3, r3, sl
 800119a:	430b      	orrs	r3, r1
 800119c:	fa00 f108 	lsl.w	r1, r0, r8
 80011a0:	4319      	orrs	r1, r3
 80011a2:	fa02 f306 	lsl.w	r3, r2, r6
 80011a6:	430b      	orrs	r3, r1
 80011a8:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 80011ac:	f8de 308c 	ldr.w	r3, [lr, #140]	; 0x8c
 80011b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80011b2:	f023 031f 	bic.w	r3, r3, #31
 80011b6:	3a01      	subs	r2, #1
 80011b8:	4313      	orrs	r3, r2
 80011ba:	f8ce 308c 	str.w	r3, [lr, #140]	; 0x8c
    }          

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80011be:	01f9      	lsls	r1, r7, #7
 80011c0:	d53c      	bpl.n	800123c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 80011c2:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8001398 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80011c6:	f04f 6870 	mov.w	r8, #251658240	; 0xf000000
 80011ca:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 80011ce:	fa98 f9a8 	rbit	r9, r8
 80011d2:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 80011d6:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 80011da:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 80011de:	fa96 fca6 	rbit	ip, r6
 80011e2:	f647 7bc0 	movw	fp, #32704	; 0x7fc0
 80011e6:	fabc fc8c 	clz	ip, ip
 80011ea:	fa9b fbab 	rbit	fp, fp
 80011ee:	f44f 3340 	mov.w	r3, #196608	; 0x30000
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80011f2:	fabb fb8b 	clz	fp, fp
 80011f6:	fa93 f3a3 	rbit	r3, r3
 80011fa:	fab3 fa83 	clz	sl, r3
 80011fe:	fa98 f8a8 	rbit	r8, r8
 8001202:	fab8 f888 	clz	r8, r8
 8001206:	fa96 f6a6 	rbit	r6, r6
 800120a:	6863      	ldr	r3, [r4, #4]
 800120c:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8001210:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8001214:	fab6 f686 	clz	r6, r6
 8001218:	fa03 f10b 	lsl.w	r1, r3, fp
 800121c:	6923      	ldr	r3, [r4, #16]
 800121e:	fa20 f009 	lsr.w	r0, r0, r9
 8001222:	fa22 f20c 	lsr.w	r2, r2, ip
 8001226:	fa03 f30a 	lsl.w	r3, r3, sl
 800122a:	430b      	orrs	r3, r1
 800122c:	fa00 f108 	lsl.w	r1, r0, r8
 8001230:	4319      	orrs	r1, r3
 8001232:	fa02 f306 	lsl.w	r3, r2, r6
 8001236:	430b      	orrs	r3, r1
 8001238:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
    }  
         
    /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800123c:	01ba      	lsls	r2, r7, #6
 800123e:	d526      	bpl.n	800128e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8001240:	f647 7ec0 	movw	lr, #32704	; 0x7fc0
 8001244:	fa9e feae 	rbit	lr, lr
 8001248:	f44f 3040 	mov.w	r0, #196608	; 0x30000
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800124c:	fabe fe8e 	clz	lr, lr
 8001250:	fa90 f0a0 	rbit	r0, r0
 8001254:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8001258:	fab0 f780 	clz	r7, r0
 800125c:	fa92 f2a2 	rbit	r2, r2
 8001260:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8001264:	fab2 f682 	clz	r6, r2
 8001268:	fa93 f3a3 	rbit	r3, r3
 800126c:	fab3 f183 	clz	r1, r3
 8001270:	6920      	ldr	r0, [r4, #16]
 8001272:	6863      	ldr	r3, [r4, #4]
 8001274:	68e2      	ldr	r2, [r4, #12]
 8001276:	40b8      	lsls	r0, r7
 8001278:	fa03 f30e 	lsl.w	r3, r3, lr
 800127c:	40b2      	lsls	r2, r6
 800127e:	4303      	orrs	r3, r0
 8001280:	431a      	orrs	r2, r3
 8001282:	68a3      	ldr	r3, [r4, #8]
 8001284:	408b      	lsls	r3, r1
 8001286:	4313      	orrs	r3, r2
 8001288:	4a43      	ldr	r2, [pc, #268]	; (8001398 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 800128a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    } 
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800128e:	4e42      	ldr	r6, [pc, #264]	; (8001398 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8001290:	6833      	ldr	r3, [r6, #0]
 8001292:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001296:	6033      	str	r3, [r6, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001298:	f7ff f808 	bl	80002ac <HAL_GetTick>
 800129c:	4607      	mov	r7, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800129e:	6833      	ldr	r3, [r6, #0]
 80012a0:	011b      	lsls	r3, r3, #4
 80012a2:	f53f aede 	bmi.w	8001062 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80012a6:	f7ff f801 	bl	80002ac <HAL_GetTick>
 80012aa:	1bc0      	subs	r0, r0, r7
 80012ac:	2864      	cmp	r0, #100	; 0x64
 80012ae:	d9f6      	bls.n	800129e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80012b0:	e5c6      	b.n	8000e40 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 80012b2:	4d39      	ldr	r5, [pc, #228]	; (8001398 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 80012b4:	682b      	ldr	r3, [r5, #0]
 80012b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012ba:	602b      	str	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80012bc:	f7fe fff6 	bl	80002ac <HAL_GetTick>
 80012c0:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80012c2:	682b      	ldr	r3, [r5, #0]
 80012c4:	009f      	lsls	r7, r3, #2
 80012c6:	d45d      	bmi.n	8001384 <HAL_RCCEx_PeriphCLKConfig+0x600>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80012c8:	6825      	ldr	r5, [r4, #0]
 80012ca:	032e      	lsls	r6, r5, #12
 80012cc:	d460      	bmi.n	8001390 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80012ce:	02e8      	lsls	r0, r5, #11
 80012d0:	d464      	bmi.n	800139c <HAL_RCCEx_PeriphCLKConfig+0x618>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80012d2:	02a9      	lsls	r1, r5, #10
 80012d4:	f100 80ad 	bmi.w	8001432 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80012d8:	072a      	lsls	r2, r5, #28
 80012da:	d545      	bpl.n	8001368 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 80012dc:	4f2e      	ldr	r7, [pc, #184]	; (8001398 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 80012de:	f04f 6570 	mov.w	r5, #251658240	; 0xf000000
 80012e2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80012e6:	fa95 fca5 	rbit	ip, r5
 80012ea:	f44f 3640 	mov.w	r6, #196608	; 0x30000
 80012ee:	fabc fc8c 	clz	ip, ip
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 80012f2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80012f6:	fa96 f8a6 	rbit	r8, r6
 80012fa:	f647 79c0 	movw	r9, #32704	; 0x7fc0
 80012fe:	fab8 f888 	clz	r8, r8
 8001302:	fa99 f9a9 	rbit	r9, r9
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001306:	fab9 f989 	clz	r9, r9
 800130a:	fa96 f6a6 	rbit	r6, r6
 800130e:	fab6 f686 	clz	r6, r6
 8001312:	fa95 f5a5 	rbit	r5, r5
 8001316:	f04f 4ee0 	mov.w	lr, #1879048192	; 0x70000000
 800131a:	fab5 f585 	clz	r5, r5
 800131e:	fa9e feae 	rbit	lr, lr
 8001322:	6963      	ldr	r3, [r4, #20]
 8001324:	fabe fe8e 	clz	lr, lr
 8001328:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 800132c:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001330:	fa03 f109 	lsl.w	r1, r3, r9
 8001334:	69e3      	ldr	r3, [r4, #28]
 8001336:	fa20 f008 	lsr.w	r0, r0, r8
 800133a:	fa22 f20c 	lsr.w	r2, r2, ip
 800133e:	fa03 fe0e 	lsl.w	lr, r3, lr
 8001342:	fa02 f305 	lsl.w	r3, r2, r5
 8001346:	ea41 0e0e 	orr.w	lr, r1, lr
 800134a:	fa00 f106 	lsl.w	r1, r0, r6
 800134e:	ea4e 0101 	orr.w	r1, lr, r1
 8001352:	430b      	orrs	r3, r1
 8001354:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001358:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800135c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001360:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001362:	4313      	orrs	r3, r2
 8001364:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001368:	4c0b      	ldr	r4, [pc, #44]	; (8001398 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 800136a:	6823      	ldr	r3, [r4, #0]
 800136c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001370:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001372:	f7fe ff9b 	bl	80002ac <HAL_GetTick>
 8001376:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001378:	6823      	ldr	r3, [r4, #0]
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	f140 809c 	bpl.w	80014b8 <HAL_RCCEx_PeriphCLKConfig+0x734>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001380:	2000      	movs	r0, #0
 8001382:	e0a0      	b.n	80014c6 <HAL_RCCEx_PeriphCLKConfig+0x742>
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001384:	f7fe ff92 	bl	80002ac <HAL_GetTick>
 8001388:	1b80      	subs	r0, r0, r6
 800138a:	2864      	cmp	r0, #100	; 0x64
 800138c:	d999      	bls.n	80012c2 <HAL_RCCEx_PeriphCLKConfig+0x53e>
 800138e:	e557      	b.n	8000e40 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001390:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001392:	b133      	cbz	r3, 80013a2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
 8001394:	e79b      	b.n	80012ce <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800139c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d197      	bne.n	80012d2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 80013a2:	4f4a      	ldr	r7, [pc, #296]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0x748>)
 80013a4:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
 80013a8:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80013ac:	fa9c f9ac 	rbit	r9, ip
 80013b0:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 80013b4:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 80013b8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80013bc:	fa96 fea6 	rbit	lr, r6
 80013c0:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 80013c4:	fabe fe8e 	clz	lr, lr
 80013c8:	fa9a faaa 	rbit	sl, sl
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80013cc:	faba fa8a 	clz	sl, sl
 80013d0:	fa9c fcac 	rbit	ip, ip
 80013d4:	f04f 6870 	mov.w	r8, #251658240	; 0xf000000
 80013d8:	fabc fc8c 	clz	ip, ip
 80013dc:	fa98 f8a8 	rbit	r8, r8
 80013e0:	fab8 f888 	clz	r8, r8
 80013e4:	fa96 f6a6 	rbit	r6, r6
 80013e8:	69a1      	ldr	r1, [r4, #24]
 80013ea:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 80013ee:	6963      	ldr	r3, [r4, #20]
 80013f0:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 80013f4:	fa01 f808 	lsl.w	r8, r1, r8
 80013f8:	fa20 f009 	lsr.w	r0, r0, r9
 80013fc:	fa03 f30a 	lsl.w	r3, r3, sl
 8001400:	fa22 f20e 	lsr.w	r2, r2, lr
 8001404:	fab6 f686 	clz	r6, r6
 8001408:	fa00 f10c 	lsl.w	r1, r0, ip
 800140c:	ea43 0308 	orr.w	r3, r3, r8
 8001410:	4319      	orrs	r1, r3
 8001412:	fa02 f306 	lsl.w	r3, r2, r6
 8001416:	430b      	orrs	r3, r1
 8001418:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800141c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001420:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001422:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001426:	3a01      	subs	r2, #1
 8001428:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800142c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001430:	e74f      	b.n	80012d2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001432:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001434:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001438:	f47f af4e 	bne.w	80012d8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 800143c:	4f23      	ldr	r7, [pc, #140]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0x748>)
 800143e:	f04f 6c70 	mov.w	ip, #251658240	; 0xf000000
 8001442:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001446:	fa9c f9ac 	rbit	r9, ip
 800144a:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 800144e:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8001452:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001456:	fa96 fea6 	rbit	lr, r6
 800145a:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 800145e:	fabe fe8e 	clz	lr, lr
 8001462:	fa9a faaa 	rbit	sl, sl
 8001466:	f44f 3840 	mov.w	r8, #196608	; 0x30000
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800146a:	faba fa8a 	clz	sl, sl
 800146e:	fa98 f8a8 	rbit	r8, r8
 8001472:	fab8 f888 	clz	r8, r8
 8001476:	fa9c fcac 	rbit	ip, ip
 800147a:	fabc fc8c 	clz	ip, ip
 800147e:	fa96 f6a6 	rbit	r6, r6
 8001482:	6a21      	ldr	r1, [r4, #32]
 8001484:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8001488:	6963      	ldr	r3, [r4, #20]
 800148a:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 800148e:	fa01 f808 	lsl.w	r8, r1, r8
 8001492:	fa20 f009 	lsr.w	r0, r0, r9
 8001496:	fa03 f30a 	lsl.w	r3, r3, sl
 800149a:	fab6 f686 	clz	r6, r6
 800149e:	fa00 f10c 	lsl.w	r1, r0, ip
 80014a2:	fa22 f20e 	lsr.w	r2, r2, lr
 80014a6:	ea43 0308 	orr.w	r3, r3, r8
 80014aa:	4319      	orrs	r1, r3
 80014ac:	fa02 f306 	lsl.w	r3, r2, r6
 80014b0:	430b      	orrs	r3, r1
 80014b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80014b6:	e70f      	b.n	80012d8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80014b8:	f7fe fef8 	bl	80002ac <HAL_GetTick>
 80014bc:	1b40      	subs	r0, r0, r5
 80014be:	2864      	cmp	r0, #100	; 0x64
 80014c0:	f67f af5a 	bls.w	8001378 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 80014c4:	e4bc      	b.n	8000e40 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 80014c6:	b003      	add	sp, #12
 80014c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014cc:	40023800 	.word	0x40023800

080014d0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80014d0:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80014d2:	4604      	mov	r4, r0
 80014d4:	2800      	cmp	r0, #0
 80014d6:	d04f      	beq.n	8001578 <HAL_SPI_Init+0xa8>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014d8:	2300      	movs	r3, #0
 80014da:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80014dc:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80014e0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80014e4:	b91b      	cbnz	r3, 80014ee <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80014e6:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80014ea:	f000 ffd9 	bl	80024a0 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80014ee:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80014f0:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80014f2:	68e2      	ldr	r2, [r4, #12]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80014f4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80014f8:	680b      	ldr	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80014fa:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80014fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001502:	600b      	str	r3, [r1, #0]
 8001504:	f04f 0300 	mov.w	r3, #0

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001508:	d903      	bls.n	8001512 <HAL_SPI_Init+0x42>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800150a:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800150c:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8001510:	e001      	b.n	8001516 <HAL_SPI_Init+0x46>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001512:	f44f 5080 	mov.w	r0, #4096	; 0x1000

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001516:	bf18      	it	ne
 8001518:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800151a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800151c:	b92b      	cbnz	r3, 800152a <HAL_SPI_Init+0x5a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800151e:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001522:	bf8c      	ite	hi
 8001524:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001526:	2301      	movls	r3, #1
 8001528:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800152a:	68a5      	ldr	r5, [r4, #8]
 800152c:	6866      	ldr	r6, [r4, #4]
 800152e:	69a3      	ldr	r3, [r4, #24]
 8001530:	432e      	orrs	r6, r5
 8001532:	6925      	ldr	r5, [r4, #16]
 8001534:	432e      	orrs	r6, r5
 8001536:	6965      	ldr	r5, [r4, #20]
 8001538:	432e      	orrs	r6, r5
 800153a:	69e5      	ldr	r5, [r4, #28]
 800153c:	432e      	orrs	r6, r5
 800153e:	6a25      	ldr	r5, [r4, #32]
 8001540:	432e      	orrs	r6, r5
 8001542:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8001544:	432e      	orrs	r6, r5
 8001546:	f403 7500 	and.w	r5, r3, #512	; 0x200
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800154a:	0c1b      	lsrs	r3, r3, #16
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800154c:	4335      	orrs	r5, r6
 800154e:	600d      	str	r5, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001550:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001552:	432a      	orrs	r2, r5
 8001554:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001556:	4315      	orrs	r5, r2
 8001558:	f003 0204 	and.w	r2, r3, #4
 800155c:	ea45 0302 	orr.w	r3, r5, r2
 8001560:	4303      	orrs	r3, r0
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001562:	2000      	movs	r0, #0
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001564:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001566:	69cb      	ldr	r3, [r1, #28]
 8001568:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800156c:	61cb      	str	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 800156e:	2301      	movs	r3, #1
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001570:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001572:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 8001576:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 8001578:	2001      	movs	r0, #1

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
}
 800157a:	bd70      	pop	{r4, r5, r6, pc}

0800157c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800157c:	4a2e      	ldr	r2, [pc, #184]	; (8001638 <TIM_Base_SetConfig+0xbc>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 800157e:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001580:	4290      	cmp	r0, r2
 8001582:	d012      	beq.n	80015aa <TIM_Base_SetConfig+0x2e>
 8001584:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001588:	d00f      	beq.n	80015aa <TIM_Base_SetConfig+0x2e>
 800158a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800158e:	4290      	cmp	r0, r2
 8001590:	d00b      	beq.n	80015aa <TIM_Base_SetConfig+0x2e>
 8001592:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001596:	4290      	cmp	r0, r2
 8001598:	d007      	beq.n	80015aa <TIM_Base_SetConfig+0x2e>
 800159a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800159e:	4290      	cmp	r0, r2
 80015a0:	d003      	beq.n	80015aa <TIM_Base_SetConfig+0x2e>
 80015a2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80015a6:	4290      	cmp	r0, r2
 80015a8:	d118      	bne.n	80015dc <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80015aa:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80015ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80015b0:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80015b2:	4a21      	ldr	r2, [pc, #132]	; (8001638 <TIM_Base_SetConfig+0xbc>)
 80015b4:	4290      	cmp	r0, r2
 80015b6:	d037      	beq.n	8001628 <TIM_Base_SetConfig+0xac>
 80015b8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80015bc:	d034      	beq.n	8001628 <TIM_Base_SetConfig+0xac>
 80015be:	4a1f      	ldr	r2, [pc, #124]	; (800163c <TIM_Base_SetConfig+0xc0>)
 80015c0:	4290      	cmp	r0, r2
 80015c2:	d031      	beq.n	8001628 <TIM_Base_SetConfig+0xac>
 80015c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015c8:	4290      	cmp	r0, r2
 80015ca:	d02d      	beq.n	8001628 <TIM_Base_SetConfig+0xac>
 80015cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015d0:	4290      	cmp	r0, r2
 80015d2:	d029      	beq.n	8001628 <TIM_Base_SetConfig+0xac>
 80015d4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80015d8:	4290      	cmp	r0, r2
 80015da:	d025      	beq.n	8001628 <TIM_Base_SetConfig+0xac>
 80015dc:	4a18      	ldr	r2, [pc, #96]	; (8001640 <TIM_Base_SetConfig+0xc4>)
 80015de:	4290      	cmp	r0, r2
 80015e0:	d022      	beq.n	8001628 <TIM_Base_SetConfig+0xac>
 80015e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015e6:	4290      	cmp	r0, r2
 80015e8:	d01e      	beq.n	8001628 <TIM_Base_SetConfig+0xac>
 80015ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015ee:	4290      	cmp	r0, r2
 80015f0:	d01a      	beq.n	8001628 <TIM_Base_SetConfig+0xac>
 80015f2:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80015f6:	4290      	cmp	r0, r2
 80015f8:	d016      	beq.n	8001628 <TIM_Base_SetConfig+0xac>
 80015fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015fe:	4290      	cmp	r0, r2
 8001600:	d012      	beq.n	8001628 <TIM_Base_SetConfig+0xac>
 8001602:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001606:	4290      	cmp	r0, r2
 8001608:	d00e      	beq.n	8001628 <TIM_Base_SetConfig+0xac>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 800160a:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800160c:	688b      	ldr	r3, [r1, #8]
 800160e:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001610:	680b      	ldr	r3, [r1, #0]
 8001612:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <TIM_Base_SetConfig+0xbc>)
 8001616:	4298      	cmp	r0, r3
 8001618:	d00b      	beq.n	8001632 <TIM_Base_SetConfig+0xb6>
 800161a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800161e:	4298      	cmp	r0, r3
 8001620:	d007      	beq.n	8001632 <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001622:	2301      	movs	r3, #1
 8001624:	6143      	str	r3, [r0, #20]
}
 8001626:	4770      	bx	lr
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800162c:	68ca      	ldr	r2, [r1, #12]
 800162e:	4313      	orrs	r3, r2
 8001630:	e7eb      	b.n	800160a <TIM_Base_SetConfig+0x8e>
  TIMx->PSC = (uint32_t)Structure->Prescaler;
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001632:	690b      	ldr	r3, [r1, #16]
 8001634:	6303      	str	r3, [r0, #48]	; 0x30
 8001636:	e7f4      	b.n	8001622 <TIM_Base_SetConfig+0xa6>
 8001638:	40010000 	.word	0x40010000
 800163c:	40000400 	.word	0x40000400
 8001640:	40014000 	.word	0x40014000

08001644 <HAL_TIM_PWM_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001644:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001646:	4604      	mov	r4, r0
 8001648:	b1a0      	cbz	r0, 8001674 <HAL_TIM_PWM_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 800164a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800164e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001652:	b91b      	cbnz	r3, 800165c <HAL_TIM_PWM_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;  
 8001654:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001658:	f000 ff6e 	bl	8002538 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 800165c:	2302      	movs	r3, #2
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800165e:	6820      	ldr	r0, [r4, #0]
 8001660:	1d21      	adds	r1, r4, #4
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 8001662:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001666:	f7ff ff89 	bl	800157c <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800166a:	2301      	movs	r3, #1
  
  return HAL_OK;
 800166c:	2000      	movs	r0, #0
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800166e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8001672:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8001674:	2001      	movs	r0, #1
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}  
 8001676:	bd10      	pop	{r4, pc}

08001678 <HAL_TIM_IC_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001678:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800167a:	4604      	mov	r4, r0
 800167c:	b1a0      	cbz	r0, 80016a8 <HAL_TIM_IC_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision)); 

  if(htim->State == HAL_TIM_STATE_RESET)
 800167e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001682:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001686:	b91b      	cbnz	r3, 8001690 <HAL_TIM_IC_Init+0x18>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;   
 8001688:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800168c:	f000 ff2e 	bl	80024ec <HAL_TIM_IC_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 8001690:	2302      	movs	r3, #2
  
  /* Init the base time for the input capture */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001692:	6820      	ldr	r0, [r4, #0]
 8001694:	1d21      	adds	r1, r4, #4
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 8001696:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Init the base time for the input capture */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800169a:	f7ff ff6f 	bl	800157c <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800169e:	2301      	movs	r3, #1
  
  return HAL_OK;
 80016a0:	2000      	movs	r0, #0
  
  /* Init the base time for the input capture */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80016a2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 80016a6:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 80016a8:	2001      	movs	r0, #1
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 80016aa:	bd10      	pop	{r4, pc}

080016ac <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80016ac:	6a03      	ldr	r3, [r0, #32]
 80016ae:	f023 0301 	bic.w	r3, r3, #1
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80016b2:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80016b4:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80016b6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80016b8:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80016ba:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80016bc:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80016be:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80016c2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80016c6:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80016c8:	f023 0502 	bic.w	r5, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80016cc:	688b      	ldr	r3, [r1, #8]
 80016ce:	432b      	orrs	r3, r5

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80016d0:	4d0c      	ldr	r5, [pc, #48]	; (8001704 <TIM_OC1_SetConfig+0x58>)
 80016d2:	42a8      	cmp	r0, r5
 80016d4:	d009      	beq.n	80016ea <TIM_OC1_SetConfig+0x3e>
 80016d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80016da:	42a8      	cmp	r0, r5
 80016dc:	d005      	beq.n	80016ea <TIM_OC1_SetConfig+0x3e>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80016de:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80016e0:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80016e2:	6184      	str	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80016e4:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80016e6:	6203      	str	r3, [r0, #32]
} 
 80016e8:	bd70      	pop	{r4, r5, r6, pc}
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80016ea:	68cd      	ldr	r5, [r1, #12]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80016ec:	f023 0308 	bic.w	r3, r3, #8
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80016f0:	694e      	ldr	r6, [r1, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80016f2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80016f6:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80016f8:	698d      	ldr	r5, [r1, #24]
 80016fa:	4335      	orrs	r5, r6
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80016fc:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001700:	432a      	orrs	r2, r5
 8001702:	e7ec      	b.n	80016de <TIM_OC1_SetConfig+0x32>
 8001704:	40010000 	.word	0x40010000

08001708 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001708:	6a03      	ldr	r3, [r0, #32]
 800170a:	f023 0310 	bic.w	r3, r3, #16
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800170e:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001710:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8001712:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001714:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001716:	6984      	ldr	r4, [r0, #24]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001718:	f023 0320 	bic.w	r3, r3, #32
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800171c:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800171e:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8001722:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001726:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 800172a:	688d      	ldr	r5, [r1, #8]
 800172c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001730:	4d0e      	ldr	r5, [pc, #56]	; (800176c <TIM_OC2_SetConfig+0x64>)
 8001732:	42a8      	cmp	r0, r5
 8001734:	d009      	beq.n	800174a <TIM_OC2_SetConfig+0x42>
 8001736:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800173a:	42a8      	cmp	r0, r5
 800173c:	d005      	beq.n	800174a <TIM_OC2_SetConfig+0x42>
    tmpcr2 |= (OC_Config->OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800173e:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001740:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001742:	6184      	str	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001744:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001746:	6203      	str	r3, [r0, #32]
}
 8001748:	bd30      	pop	{r4, r5, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 800174a:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800174c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001750:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8001754:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8001758:	694d      	ldr	r5, [r1, #20]
 800175a:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800175e:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001764:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8001768:	e7e9      	b.n	800173e <TIM_OC2_SetConfig+0x36>
 800176a:	bf00      	nop
 800176c:	40010000 	.word	0x40010000

08001770 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001770:	6a03      	ldr	r3, [r0, #32]
 8001772:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001776:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001778:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800177a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800177c:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800177e:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001780:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001784:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001786:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800178a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800178e:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8001790:	688d      	ldr	r5, [r1, #8]
 8001792:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001796:	4d0e      	ldr	r5, [pc, #56]	; (80017d0 <TIM_OC3_SetConfig+0x60>)
 8001798:	42a8      	cmp	r0, r5
 800179a:	d009      	beq.n	80017b0 <TIM_OC3_SetConfig+0x40>
 800179c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80017a0:	42a8      	cmp	r0, r5
 80017a2:	d005      	beq.n	80017b0 <TIM_OC3_SetConfig+0x40>
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80017a4:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80017a6:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80017a8:	61c4      	str	r4, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80017aa:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80017ac:	6203      	str	r3, [r0, #32]
}
 80017ae:	bd30      	pop	{r4, r5, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80017b0:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80017b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80017b6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80017ba:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 80017be:	694d      	ldr	r5, [r1, #20]
 80017c0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80017c4:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80017c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80017ca:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 80017ce:	e7e9      	b.n	80017a4 <TIM_OC3_SetConfig+0x34>
 80017d0:	40010000 	.word	0x40010000

080017d4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80017d4:	6a03      	ldr	r3, [r0, #32]
 80017d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80017da:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80017dc:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80017de:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80017e0:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80017e2:	69c3      	ldr	r3, [r0, #28]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80017e4:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80017e8:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80017ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017ee:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80017f2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 80017f6:	688d      	ldr	r5, [r1, #8]
 80017f8:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80017fc:	4d09      	ldr	r5, [pc, #36]	; (8001824 <TIM_OC4_SetConfig+0x50>)
 80017fe:	42a8      	cmp	r0, r5
 8001800:	d009      	beq.n	8001816 <TIM_OC4_SetConfig+0x42>
 8001802:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001806:	42a8      	cmp	r0, r5
 8001808:	d005      	beq.n	8001816 <TIM_OC4_SetConfig+0x42>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800180a:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800180c:	61c3      	str	r3, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800180e:	684b      	ldr	r3, [r1, #4]
 8001810:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001812:	6204      	str	r4, [r0, #32]
}
 8001814:	bd30      	pop	{r4, r5, pc}
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001816:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 800181a:	694d      	ldr	r5, [r1, #20]
 800181c:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8001820:	e7f3      	b.n	800180a <TIM_OC4_SetConfig+0x36>
 8001822:	bf00      	nop
 8001824:	40010000 	.word	0x40010000

08001828 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.  
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8001828:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800182a:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800182c:	4e1a      	ldr	r6, [pc, #104]	; (8001898 <TIM_TI1_SetConfig+0x70>)
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800182e:	f024 0401 	bic.w	r4, r4, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001832:	42b0      	cmp	r0, r6
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001834:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001836:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001838:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800183a:	d01a      	beq.n	8001872 <TIM_TI1_SetConfig+0x4a>
 800183c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001840:	d017      	beq.n	8001872 <TIM_TI1_SetConfig+0x4a>
 8001842:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8001846:	42b0      	cmp	r0, r6
 8001848:	d013      	beq.n	8001872 <TIM_TI1_SetConfig+0x4a>
 800184a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800184e:	42b0      	cmp	r0, r6
 8001850:	d00f      	beq.n	8001872 <TIM_TI1_SetConfig+0x4a>
 8001852:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001856:	42b0      	cmp	r0, r6
 8001858:	d00b      	beq.n	8001872 <TIM_TI1_SetConfig+0x4a>
 800185a:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 800185e:	42b0      	cmp	r0, r6
 8001860:	d007      	beq.n	8001872 <TIM_TI1_SetConfig+0x4a>
 8001862:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8001866:	42b0      	cmp	r0, r6
 8001868:	d003      	beq.n	8001872 <TIM_TI1_SetConfig+0x4a>
 800186a:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800186e:	42b0      	cmp	r0, r6
 8001870:	d10f      	bne.n	8001892 <TIM_TI1_SetConfig+0x6a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001872:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8001876:	4322      	orrs	r2, r4
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4) & TIM_CCMR1_IC1F);
 8001878:	011b      	lsls	r3, r3, #4
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800187a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4) & TIM_CCMR1_IC1F);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800187e:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001882:	f001 010a 	and.w	r1, r1, #10
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4) & TIM_CCMR1_IC1F);
 8001886:	b2db      	uxtb	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001888:	430d      	orrs	r5, r1
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4) & TIM_CCMR1_IC1F);
 800188a:	431a      	orrs	r2, r3
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800188c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800188e:	6205      	str	r5, [r0, #32]
}
 8001890:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
    tmpccmr1 |= TIM_ICSelection;
  } 
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001892:	f044 0201 	orr.w	r2, r4, #1
 8001896:	e7ef      	b.n	8001878 <TIM_TI1_SetConfig+0x50>
 8001898:	40010000 	.word	0x40010000

0800189c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef* sConfig, uint32_t Channel)
{
 800189c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
  
  __HAL_LOCK(htim);
 800189e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef* sConfig, uint32_t Channel)
{
 80018a2:	4605      	mov	r5, r0
 80018a4:	460c      	mov	r4, r1
 80018a6:	2002      	movs	r0, #2
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
  
  __HAL_LOCK(htim);
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d07f      	beq.n	80019ac <HAL_TIM_IC_ConfigChannel+0x110>
 80018ac:	2301      	movs	r3, #1
  
  htim->State = HAL_TIM_STATE_BUSY;
 80018ae:	f885 0039 	strb.w	r0, [r5, #57]	; 0x39
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
  
  __HAL_LOCK(htim);
 80018b2:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
  
  if (Channel == TIM_CHANNEL_1)
 80018b6:	b972      	cbnz	r2, 80018d6 <HAL_TIM_IC_ConfigChannel+0x3a>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80018b8:	68cb      	ldr	r3, [r1, #12]
 80018ba:	6828      	ldr	r0, [r5, #0]
 80018bc:	c906      	ldmia	r1, {r1, r2}
 80018be:	f7ff ffb3 	bl	8001828 <TIM_TI1_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80018c2:	682b      	ldr	r3, [r5, #0]
 80018c4:	699a      	ldr	r2, [r3, #24]
 80018c6:	f022 020c 	bic.w	r2, r2, #12
 80018ca:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80018cc:	68a2      	ldr	r2, [r4, #8]
 80018ce:	6999      	ldr	r1, [r3, #24]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	619a      	str	r2, [r3, #24]
 80018d4:	e064      	b.n	80019a0 <HAL_TIM_IC_ConfigChannel+0x104>
  }
  else if (Channel == TIM_CHANNEL_2)
 80018d6:	2a04      	cmp	r2, #4
 80018d8:	688e      	ldr	r6, [r1, #8]
 80018da:	682b      	ldr	r3, [r5, #0]
 80018dc:	68e0      	ldr	r0, [r4, #12]
 80018de:	e891 4002 	ldmia.w	r1, {r1, lr}
 80018e2:	d11f      	bne.n	8001924 <HAL_TIM_IC_ConfigChannel+0x88>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80018e4:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
  tmpccmr1 |= (TIM_ICSelection << 8);

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12) & TIM_CCMR1_IC2F);
 80018e6:	0300      	lsls	r0, r0, #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80018e8:	0109      	lsls	r1, r1, #4
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80018ea:	f022 0210 	bic.w	r2, r2, #16
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
  tmpccmr1 |= (TIM_ICSelection << 8);

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12) & TIM_CCMR1_IC2F);
 80018ee:	b280      	uxth	r0, r0

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80018f0:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80018f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80018f6:	699c      	ldr	r4, [r3, #24]
  tmpccer = TIMx->CCER;
 80018f8:	6a1f      	ldr	r7, [r3, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80018fa:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8);
 80018fe:	ea44 220e 	orr.w	r2, r4, lr, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001902:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12) & TIM_CCMR1_IC2F);
 8001906:	4310      	orrs	r0, r2

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001908:	f027 02a0 	bic.w	r2, r7, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800190c:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800190e:	6198      	str	r0, [r3, #24]
  TIMx->CCER = tmpccer;
 8001910:	6219      	str	r1, [r3, #32]
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);
               
    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001912:	699a      	ldr	r2, [r3, #24]
 8001914:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001918:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8);
 800191a:	699a      	ldr	r2, [r3, #24]
 800191c:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001920:	619e      	str	r6, [r3, #24]
 8001922:	e03d      	b.n	80019a0 <HAL_TIM_IC_ConfigChannel+0x104>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001924:	2a08      	cmp	r2, #8
{
  uint32_t tmpccmr2 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001926:	6a1a      	ldr	r2, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8);
  }
  else if (Channel == TIM_CHANNEL_3)
 8001928:	d11c      	bne.n	8001964 <HAL_TIM_IC_ConfigChannel+0xc8>
{
  uint32_t tmpccmr2 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800192a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
  tmpccmr2 |= TIM_ICSelection;

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4) & TIM_CCMR2_IC3F);
 800192e:	0100      	lsls	r0, r0, #4

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001930:	0209      	lsls	r1, r1, #8
{
  uint32_t tmpccmr2 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001932:	621a      	str	r2, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
  tmpccmr2 |= TIM_ICSelection;

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4) & TIM_CCMR2_IC3F);
 8001934:	b2c0      	uxtb	r0, r0
  uint32_t tmpccmr2 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
  tmpccmr2 = TIMx->CCMR2;
 8001936:	69dc      	ldr	r4, [r3, #28]
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4) & TIM_CCMR2_IC3F);

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001938:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  uint32_t tmpccer = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
 800193c:	6a1f      	ldr	r7, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800193e:	f024 0403 	bic.w	r4, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 8001942:	ea4e 0204 	orr.w	r2, lr, r4

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8001946:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4) & TIM_CCMR2_IC3F);
 800194a:	4310      	orrs	r0, r2

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800194c:	f427 6220 	bic.w	r2, r7, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001950:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001952:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer;
 8001954:	6219      	str	r1, [r3, #32]
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001956:	69da      	ldr	r2, [r3, #28]
 8001958:	f022 020c 	bic.w	r2, r2, #12
 800195c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800195e:	69da      	ldr	r2, [r3, #28]
 8001960:	4316      	orrs	r6, r2
 8001962:	e01c      	b.n	800199e <HAL_TIM_IC_ConfigChannel+0x102>
{
  uint32_t tmpccmr2 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001964:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
  tmpccmr2 |= (TIM_ICSelection << 8);

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12) & TIM_CCMR2_IC4F);
 8001968:	0300      	lsls	r0, r0, #12

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800196a:	0309      	lsls	r1, r1, #12
{
  uint32_t tmpccmr2 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800196c:	621a      	str	r2, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
  tmpccmr2 |= (TIM_ICSelection << 8);

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12) & TIM_CCMR2_IC4F);
 800196e:	b280      	uxth	r0, r0
  uint32_t tmpccmr2 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
  tmpccmr2 = TIMx->CCMR2;
 8001970:	69dc      	ldr	r4, [r3, #28]
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12) & TIM_CCMR2_IC4F);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001972:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  uint32_t tmpccer = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
 8001976:	6a1f      	ldr	r7, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001978:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8);
 800197c:	ea44 220e 	orr.w	r2, r4, lr, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001980:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12) & TIM_CCMR2_IC4F);
 8001984:	4310      	orrs	r0, r2

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001986:	f427 4220 	bic.w	r2, r7, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800198a:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800198c:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 800198e:	6219      	str	r1, [r3, #32]
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001990:	69da      	ldr	r2, [r3, #28]
 8001992:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001996:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8);
 8001998:	69da      	ldr	r2, [r3, #28]
 800199a:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 800199e:	61de      	str	r6, [r3, #28]
  }
  
  htim->State = HAL_TIM_STATE_READY;
 80019a0:	2301      	movs	r3, #1
    
  __HAL_UNLOCK(htim);
 80019a2:	2000      	movs	r0, #0

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8);
  }
  
  htim->State = HAL_TIM_STATE_READY;
 80019a4:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 80019a8:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  
  return HAL_OK; 
}
 80019ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080019ae <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80019ae:	2301      	movs	r3, #1

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80019b0:	408a      	lsls	r2, r1
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80019b2:	408b      	lsls	r3, r1
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80019b4:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80019b6:	6a04      	ldr	r4, [r0, #32]
 80019b8:	ea24 0303 	bic.w	r3, r4, r3
 80019bc:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80019be:	6a03      	ldr	r3, [r0, #32]
 80019c0:	ea42 0103 	orr.w	r1, r2, r3
 80019c4:	6201      	str	r1, [r0, #32]
 80019c6:	bd10      	pop	{r4, pc}

080019c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80019c8:	b510      	push	{r4, lr}
 80019ca:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80019cc:	2201      	movs	r2, #1
 80019ce:	6800      	ldr	r0, [r0, #0]
 80019d0:	f7ff ffed 	bl	80019ae <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80019d4:	6823      	ldr	r3, [r4, #0]
 80019d6:	4a08      	ldr	r2, [pc, #32]	; (80019f8 <HAL_TIM_PWM_Start+0x30>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d003      	beq.n	80019e4 <HAL_TIM_PWM_Start+0x1c>
 80019dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d103      	bne.n	80019ec <HAL_TIM_PWM_Start+0x24>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80019e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019ea:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80019ec:	681a      	ldr	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
} 
 80019ee:	2000      	movs	r0, #0
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80019f0:	f042 0201 	orr.w	r2, r2, #1
 80019f4:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
} 
 80019f6:	bd10      	pop	{r4, pc}
 80019f8:	40010000 	.word	0x40010000

080019fc <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80019fc:	6a03      	ldr	r3, [r0, #32]
 80019fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001a02:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001a04:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a06:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001a08:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001a0a:	6d44      	ldr	r4, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8001a0c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a10:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2; 
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001a12:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8001a16:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a1a:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8001a1c:	688d      	ldr	r5, [r1, #8]
 8001a1e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001a22:	4d09      	ldr	r5, [pc, #36]	; (8001a48 <TIM_OC5_SetConfig+0x4c>)
 8001a24:	42a8      	cmp	r0, r5
 8001a26:	d003      	beq.n	8001a30 <TIM_OC5_SetConfig+0x34>
 8001a28:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a2c:	42a8      	cmp	r0, r5
 8001a2e:	d104      	bne.n	8001a3a <TIM_OC5_SetConfig+0x3e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001a30:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8001a34:	694d      	ldr	r5, [r1, #20]
 8001a36:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a3a:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8001a3c:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001a3e:	6544      	str	r4, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8001a40:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001a42:	6203      	str	r3, [r0, #32]
 8001a44:	bd30      	pop	{r4, r5, pc}
 8001a46:	bf00      	nop
 8001a48:	40010000 	.word	0x40010000

08001a4c <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001a4c:	6a03      	ldr	r3, [r0, #32]
 8001a4e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001a52:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001a54:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a56:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001a58:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001a5a:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001a5c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx = TIMx->CCMR3;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001a60:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2; 
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001a62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001a6a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8001a6e:	688d      	ldr	r5, [r1, #8]
 8001a70:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001a74:	4d08      	ldr	r5, [pc, #32]	; (8001a98 <TIM_OC6_SetConfig+0x4c>)
 8001a76:	42a8      	cmp	r0, r5
 8001a78:	d003      	beq.n	8001a82 <TIM_OC6_SetConfig+0x36>
 8001a7a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a7e:	42a8      	cmp	r0, r5
 8001a80:	d104      	bne.n	8001a8c <TIM_OC6_SetConfig+0x40>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001a82:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8001a86:	694d      	ldr	r5, [r1, #20]
 8001a88:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a8c:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001a8e:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8001a90:	684b      	ldr	r3, [r1, #4]
 8001a92:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001a94:	6202      	str	r2, [r0, #32]
 8001a96:	bd30      	pop	{r4, r5, pc}
 8001a98:	40010000 	.word	0x40010000

08001a9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 8001a9c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001a9e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 8001aa2:	4604      	mov	r4, r0
 8001aa4:	460d      	mov	r5, r1
 8001aa6:	2002      	movs	r0, #2
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d07b      	beq.n	8001ba4 <HAL_TIM_PWM_ConfigChannel+0x108>
 8001aac:	2301      	movs	r3, #1
  
  htim->State = HAL_TIM_STATE_BUSY;
    
  switch (Channel)
 8001aae:	2a08      	cmp	r2, #8
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001ab0:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001ab4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
    
  switch (Channel)
 8001ab8:	d03c      	beq.n	8001b34 <HAL_TIM_PWM_ConfigChannel+0x98>
 8001aba:	d813      	bhi.n	8001ae4 <HAL_TIM_PWM_ConfigChannel+0x48>
 8001abc:	b34a      	cbz	r2, 8001b12 <HAL_TIM_PWM_ConfigChannel+0x76>
 8001abe:	2a04      	cmp	r2, #4
 8001ac0:	d16a      	bne.n	8001b98 <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ac2:	6820      	ldr	r0, [r4, #0]
 8001ac4:	f7ff fe20 	bl	8001708 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ac8:	6823      	ldr	r3, [r4, #0]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001aca:	6929      	ldr	r1, [r5, #16]
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001acc:	699a      	ldr	r2, [r3, #24]
 8001ace:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ad2:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ad4:	699a      	ldr	r2, [r3, #24]
 8001ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001adc:	699a      	ldr	r2, [r3, #24]
 8001ade:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001ae2:	e025      	b.n	8001b30 <HAL_TIM_PWM_ConfigChannel+0x94>
  /* Check input state */
  __HAL_LOCK(htim);
  
  htim->State = HAL_TIM_STATE_BUSY;
    
  switch (Channel)
 8001ae4:	2a10      	cmp	r2, #16
 8001ae6:	d036      	beq.n	8001b56 <HAL_TIM_PWM_ConfigChannel+0xba>
 8001ae8:	2a14      	cmp	r2, #20
 8001aea:	d044      	beq.n	8001b76 <HAL_TIM_PWM_ConfigChannel+0xda>
 8001aec:	2a0c      	cmp	r2, #12
 8001aee:	d153      	bne.n	8001b98 <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001af0:	6820      	ldr	r0, [r4, #0]
 8001af2:	f7ff fe6f 	bl	80017d4 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001af6:	6823      	ldr	r3, [r4, #0]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8001af8:	6929      	ldr	r1, [r5, #16]
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001afa:	69da      	ldr	r2, [r3, #28]
 8001afc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b00:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001b02:	69da      	ldr	r2, [r3, #28]
 8001b04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8001b0a:	69da      	ldr	r2, [r3, #28]
 8001b0c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001b10:	e01f      	b.n	8001b52 <HAL_TIM_PWM_ConfigChannel+0xb6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001b12:	6820      	ldr	r0, [r4, #0]
 8001b14:	f7ff fdca 	bl	80016ac <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001b18:	6823      	ldr	r3, [r4, #0]
 8001b1a:	699a      	ldr	r2, [r3, #24]
 8001b1c:	f042 0208 	orr.w	r2, r2, #8
 8001b20:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001b22:	699a      	ldr	r2, [r3, #24]
 8001b24:	f022 0204 	bic.w	r2, r2, #4
 8001b28:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001b2a:	692a      	ldr	r2, [r5, #16]
 8001b2c:	6999      	ldr	r1, [r3, #24]
 8001b2e:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001b30:	619a      	str	r2, [r3, #24]
    }
    break;
 8001b32:	e031      	b.n	8001b98 <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001b34:	6820      	ldr	r0, [r4, #0]
 8001b36:	f7ff fe1b 	bl	8001770 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001b3a:	6823      	ldr	r3, [r4, #0]
 8001b3c:	69da      	ldr	r2, [r3, #28]
 8001b3e:	f042 0208 	orr.w	r2, r2, #8
 8001b42:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001b44:	69da      	ldr	r2, [r3, #28]
 8001b46:	f022 0204 	bic.w	r2, r2, #4
 8001b4a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001b4c:	692a      	ldr	r2, [r5, #16]
 8001b4e:	69d9      	ldr	r1, [r3, #28]
 8001b50:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8001b52:	61da      	str	r2, [r3, #28]
    }
    break;
 8001b54:	e020      	b.n	8001b98 <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001b56:	6820      	ldr	r0, [r4, #0]
 8001b58:	f7ff ff50 	bl	80019fc <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001b5c:	6823      	ldr	r3, [r4, #0]
 8001b5e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b60:	f042 0208 	orr.w	r2, r2, #8
 8001b64:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001b66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b68:	f022 0204 	bic.w	r2, r2, #4
 8001b6c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8001b6e:	692a      	ldr	r2, [r5, #16]
 8001b70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001b72:	430a      	orrs	r2, r1
 8001b74:	e00f      	b.n	8001b96 <HAL_TIM_PWM_ConfigChannel+0xfa>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001b76:	6820      	ldr	r0, [r4, #0]
 8001b78:	f7ff ff68 	bl	8001a4c <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001b7c:	6823      	ldr	r3, [r4, #0]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8001b7e:	6909      	ldr	r1, [r1, #16]
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001b80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b86:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001b88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b8e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8001b90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b92:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001b96:	655a      	str	r2, [r3, #84]	; 0x54
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8001b98:	2301      	movs	r3, #1
    
  __HAL_UNLOCK(htim);
 8001b9a:	2000      	movs	r0, #0
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8001b9c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 8001ba0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 8001ba4:	bd38      	pop	{r3, r4, r5, pc}
	...

08001ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001ba8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001bac:	2b01      	cmp	r3, #1
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001bae:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001bb0:	d01c      	beq.n	8001bec <HAL_TIMEx_MasterConfigSynchronization+0x44>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001bb2:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001bb4:	4c0e      	ldr	r4, [pc, #56]	; (8001bf0 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  
  /* Check input state */
  __HAL_LOCK(htim);

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001bb6:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001bb8:	42a2      	cmp	r2, r4

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001bba:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001bbc:	d003      	beq.n	8001bc6 <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 8001bbe:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001bc2:	42a2      	cmp	r2, r4
 8001bc4:	d103      	bne.n	8001bce <HAL_TIMEx_MasterConfigSynchronization+0x26>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001bc6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001bca:	684c      	ldr	r4, [r1, #4]
 8001bcc:	4323      	orrs	r3, r4
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001bce:	680c      	ldr	r4, [r1, #0]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001bd4:	6889      	ldr	r1, [r1, #8]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001bd6:	4323      	orrs	r3, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001bd8:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001bdc:	6053      	str	r3, [r2, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001bde:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8001be0:	2300      	movs	r3, #0
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001be2:	6091      	str	r1, [r2, #8]

  __HAL_UNLOCK(htim);
 8001be4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 8001be8:	4618      	mov	r0, r3
 8001bea:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001bec:	2002      	movs	r0, #2
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
  
  return HAL_OK;
} 
 8001bee:	bd30      	pop	{r4, r5, pc}
 8001bf0:	40010000 	.word	0x40010000

08001bf4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bf8:	9d06      	ldr	r5, [sp, #24]
 8001bfa:	4604      	mov	r4, r0
 8001bfc:	460f      	mov	r7, r1
 8001bfe:	4616      	mov	r6, r2
 8001c00:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c02:	6821      	ldr	r1, [r4, #0]
 8001c04:	69ca      	ldr	r2, [r1, #28]
 8001c06:	ea37 0302 	bics.w	r3, r7, r2
 8001c0a:	bf0c      	ite	eq
 8001c0c:	2201      	moveq	r2, #1
 8001c0e:	2200      	movne	r2, #0
 8001c10:	42b2      	cmp	r2, r6
 8001c12:	d11d      	bne.n	8001c50 <UART_WaitOnFlagUntilTimeout+0x5c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001c14:	1c6b      	adds	r3, r5, #1
 8001c16:	d0f5      	beq.n	8001c04 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8001c18:	b99d      	cbnz	r5, 8001c42 <UART_WaitOnFlagUntilTimeout+0x4e>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c1a:	6823      	ldr	r3, [r4, #0]

        huart->gState = HAL_UART_STATE_READY;
        huart->RxState = HAL_UART_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c1c:	2003      	movs	r0, #3
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001c24:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	f022 0201 	bic.w	r2, r2, #1
 8001c2c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8001c2e:	2320      	movs	r3, #32
 8001c30:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001c34:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8001c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8001c42:	f7fe fb33 	bl	80002ac <HAL_GetTick>
 8001c46:	ebc8 0000 	rsb	r0, r8, r0
 8001c4a:	4285      	cmp	r5, r0
 8001c4c:	d8d9      	bhi.n	8001c02 <UART_WaitOnFlagUntilTimeout+0xe>
 8001c4e:	e7e4      	b.n	8001c1a <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001c50:	2000      	movs	r0, #0
}
 8001c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001c58 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart: uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c58:	b538      	push	{r3, r4, r5, lr}
 8001c5a:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001c5c:	6805      	ldr	r5, [r0, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c5e:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001c60:	6922      	ldr	r2, [r4, #16]
 8001c62:	68a1      	ldr	r1, [r4, #8]
 8001c64:	6828      	ldr	r0, [r5, #0]
 8001c66:	4311      	orrs	r1, r2
 8001c68:	6962      	ldr	r2, [r4, #20]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	ea42 0103 	orr.w	r1, r2, r3
 8001c70:	4a88      	ldr	r2, [pc, #544]	; (8001e94 <UART_SetConfig+0x23c>)
 8001c72:	4002      	ands	r2, r0
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001c74:	69a0      	ldr	r0, [r4, #24]
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001c76:	430a      	orrs	r2, r1
 8001c78:	602a      	str	r2, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c7a:	686a      	ldr	r2, [r5, #4]
 8001c7c:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8001c80:	68e2      	ldr	r2, [r4, #12]
 8001c82:	430a      	orrs	r2, r1
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001c84:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c86:	606a      	str	r2, [r5, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001c88:	4301      	orrs	r1, r0
 8001c8a:	68aa      	ldr	r2, [r5, #8]
 8001c8c:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8001c90:	430a      	orrs	r2, r1
 8001c92:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c94:	4a80      	ldr	r2, [pc, #512]	; (8001e98 <UART_SetConfig+0x240>)
 8001c96:	4295      	cmp	r5, r2
 8001c98:	d107      	bne.n	8001caa <UART_SetConfig+0x52>
 8001c9a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8001c9e:	497f      	ldr	r1, [pc, #508]	; (8001e9c <UART_SetConfig+0x244>)
 8001ca0:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001ca4:	f002 0203 	and.w	r2, r2, #3
 8001ca8:	e009      	b.n	8001cbe <UART_SetConfig+0x66>
 8001caa:	4a7d      	ldr	r2, [pc, #500]	; (8001ea0 <UART_SetConfig+0x248>)
 8001cac:	4295      	cmp	r5, r2
 8001cae:	d10b      	bne.n	8001cc8 <UART_SetConfig+0x70>
 8001cb0:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8001cb4:	497b      	ldr	r1, [pc, #492]	; (8001ea4 <UART_SetConfig+0x24c>)
 8001cb6:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001cba:	f002 020c 	and.w	r2, r2, #12

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cc2:	5c8a      	ldrb	r2, [r1, r2]
 8001cc4:	d073      	beq.n	8001dae <UART_SetConfig+0x156>
 8001cc6:	e0b6      	b.n	8001e36 <UART_SetConfig+0x1de>
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001cc8:	4a77      	ldr	r2, [pc, #476]	; (8001ea8 <UART_SetConfig+0x250>)
 8001cca:	4295      	cmp	r5, r2
 8001ccc:	d10d      	bne.n	8001cea <UART_SetConfig+0x92>
 8001cce:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8001cd2:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001cd6:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8001cda:	2a10      	cmp	r2, #16
 8001cdc:	f000 8086 	beq.w	8001dec <UART_SetConfig+0x194>
 8001ce0:	d95d      	bls.n	8001d9e <UART_SetConfig+0x146>
 8001ce2:	2a20      	cmp	r2, #32
 8001ce4:	d078      	beq.n	8001dd8 <UART_SetConfig+0x180>
 8001ce6:	2a30      	cmp	r2, #48	; 0x30
 8001ce8:	e00e      	b.n	8001d08 <UART_SetConfig+0xb0>
 8001cea:	4a70      	ldr	r2, [pc, #448]	; (8001eac <UART_SetConfig+0x254>)
 8001cec:	4295      	cmp	r5, r2
 8001cee:	d10d      	bne.n	8001d0c <UART_SetConfig+0xb4>
 8001cf0:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 8001cf4:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001cf8:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8001cfc:	2a40      	cmp	r2, #64	; 0x40
 8001cfe:	d075      	beq.n	8001dec <UART_SetConfig+0x194>
 8001d00:	d94d      	bls.n	8001d9e <UART_SetConfig+0x146>
 8001d02:	2a80      	cmp	r2, #128	; 0x80
 8001d04:	d068      	beq.n	8001dd8 <UART_SetConfig+0x180>
 8001d06:	2ac0      	cmp	r2, #192	; 0xc0
 8001d08:	d07c      	beq.n	8001e04 <UART_SetConfig+0x1ac>
 8001d0a:	e087      	b.n	8001e1c <UART_SetConfig+0x1c4>
 8001d0c:	4a68      	ldr	r2, [pc, #416]	; (8001eb0 <UART_SetConfig+0x258>)
 8001d0e:	4295      	cmp	r5, r2
 8001d10:	d10f      	bne.n	8001d32 <UART_SetConfig+0xda>
 8001d12:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 8001d16:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001d1a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001d1e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001d22:	d063      	beq.n	8001dec <UART_SetConfig+0x194>
 8001d24:	d93b      	bls.n	8001d9e <UART_SetConfig+0x146>
 8001d26:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001d2a:	d055      	beq.n	8001dd8 <UART_SetConfig+0x180>
 8001d2c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001d30:	e7ea      	b.n	8001d08 <UART_SetConfig+0xb0>
 8001d32:	4a60      	ldr	r2, [pc, #384]	; (8001eb4 <UART_SetConfig+0x25c>)
 8001d34:	4295      	cmp	r5, r2
 8001d36:	d112      	bne.n	8001d5e <UART_SetConfig+0x106>
 8001d38:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 8001d3c:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001d40:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8001d44:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001d48:	d050      	beq.n	8001dec <UART_SetConfig+0x194>
 8001d4a:	d802      	bhi.n	8001d52 <UART_SetConfig+0xfa>
 8001d4c:	2a00      	cmp	r2, #0
 8001d4e:	d03d      	beq.n	8001dcc <UART_SetConfig+0x174>
 8001d50:	e064      	b.n	8001e1c <UART_SetConfig+0x1c4>
 8001d52:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001d56:	d03f      	beq.n	8001dd8 <UART_SetConfig+0x180>
 8001d58:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8001d5c:	e7d4      	b.n	8001d08 <UART_SetConfig+0xb0>
 8001d5e:	4a56      	ldr	r2, [pc, #344]	; (8001eb8 <UART_SetConfig+0x260>)
 8001d60:	4295      	cmp	r5, r2
 8001d62:	d10f      	bne.n	8001d84 <UART_SetConfig+0x12c>
 8001d64:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8001d68:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001d6c:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8001d70:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001d74:	d03a      	beq.n	8001dec <UART_SetConfig+0x194>
 8001d76:	d912      	bls.n	8001d9e <UART_SetConfig+0x146>
 8001d78:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001d7c:	d02c      	beq.n	8001dd8 <UART_SetConfig+0x180>
 8001d7e:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8001d82:	e7c1      	b.n	8001d08 <UART_SetConfig+0xb0>
 8001d84:	4a4d      	ldr	r2, [pc, #308]	; (8001ebc <UART_SetConfig+0x264>)
 8001d86:	4295      	cmp	r5, r2
 8001d88:	d148      	bne.n	8001e1c <UART_SetConfig+0x1c4>
 8001d8a:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 8001d8e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001d92:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8001d96:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8001d9a:	d027      	beq.n	8001dec <UART_SetConfig+0x194>
 8001d9c:	d801      	bhi.n	8001da2 <UART_SetConfig+0x14a>
 8001d9e:	b17a      	cbz	r2, 8001dc0 <UART_SetConfig+0x168>
 8001da0:	e03c      	b.n	8001e1c <UART_SetConfig+0x1c4>
 8001da2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001da6:	d017      	beq.n	8001dd8 <UART_SetConfig+0x180>
 8001da8:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8001dac:	e7ac      	b.n	8001d08 <UART_SetConfig+0xb0>

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  {
    switch (clocksource)
 8001dae:	2a08      	cmp	r2, #8
 8001db0:	d837      	bhi.n	8001e22 <UART_SetConfig+0x1ca>
 8001db2:	e8df f002 	tbb	[pc, r2]
 8001db6:	0e08      	.short	0x0e08
 8001db8:	361e3614 	.word	0x361e3614
 8001dbc:	3636      	.short	0x3636
 8001dbe:	2a          	.byte	0x2a
 8001dbf:	00          	.byte	0x00

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dc4:	d140      	bne.n	8001e48 <UART_SetConfig+0x1f0>
  {
    switch (clocksource)
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001dc6:	f7fe ffad 	bl	8000d24 <HAL_RCC_GetPCLK1Freq>
 8001dca:	e014      	b.n	8001df6 <UART_SetConfig+0x19e>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dd0:	d13d      	bne.n	8001e4e <UART_SetConfig+0x1f6>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001dd2:	f7fe ffbf 	bl	8000d54 <HAL_RCC_GetPCLK2Freq>
 8001dd6:	e00e      	b.n	8001df6 <UART_SetConfig+0x19e>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ddc:	d13a      	bne.n	8001e54 <UART_SetConfig+0x1fc>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001dde:	6860      	ldr	r0, [r4, #4]
 8001de0:	0842      	lsrs	r2, r0, #1
 8001de2:	f102 73f4 	add.w	r3, r2, #31981568	; 0x1e80000
 8001de6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8001dea:	e012      	b.n	8001e12 <UART_SetConfig+0x1ba>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001df0:	d139      	bne.n	8001e66 <UART_SetConfig+0x20e>
      break;
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001df2:	f7fe fea9 	bl	8000b48 <HAL_RCC_GetSysClockFreq>
 8001df6:	6863      	ldr	r3, [r4, #4]
 8001df8:	085a      	lsrs	r2, r3, #1
 8001dfa:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8001dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e02:	e008      	b.n	8001e16 <UART_SetConfig+0x1be>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e08:	d137      	bne.n	8001e7a <UART_SetConfig+0x222>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001e0a:	6860      	ldr	r0, [r4, #4]
 8001e0c:	0843      	lsrs	r3, r0, #1
 8001e0e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001e12:	fbb3 f3f0 	udiv	r3, r3, r0
 8001e16:	b29b      	uxth	r3, r3
{
  uint32_t tmpreg                     = 0x00000000U;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000U;
  uint16_t usartdiv                   = 0x0000U;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e18:	2000      	movs	r0, #0
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
 8001e1a:	e004      	b.n	8001e26 <UART_SetConfig+0x1ce>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e20:	d135      	bne.n	8001e8e <UART_SetConfig+0x236>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8001e22:	2001      	movs	r0, #1
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg                     = 0x00000000U;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000U;
  uint16_t usartdiv                   = 0x0000U;
 8001e24:	2300      	movs	r3, #0
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001e26:	f3c3 0142 	ubfx	r1, r3, #1, #3
 8001e2a:	f023 030f 	bic.w	r3, r3, #15
    huart->Instance->BRR = brrtemp;
 8001e2e:	6822      	ldr	r2, [r4, #0]
 8001e30:	430b      	orrs	r3, r1
 8001e32:	60d3      	str	r3, [r2, #12]
 8001e34:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    switch (clocksource)
 8001e36:	2a08      	cmp	r2, #8
 8001e38:	d829      	bhi.n	8001e8e <UART_SetConfig+0x236>
 8001e3a:	e8df f002 	tbb	[pc, r2]
 8001e3e:	0805      	.short	0x0805
 8001e40:	2814280b 	.word	0x2814280b
 8001e44:	2828      	.short	0x2828
 8001e46:	1e          	.byte	0x1e
 8001e47:	00          	.byte	0x00
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001e48:	f7fe ff6c 	bl	8000d24 <HAL_RCC_GetPCLK1Freq>
 8001e4c:	e00d      	b.n	8001e6a <UART_SetConfig+0x212>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001e4e:	f7fe ff81 	bl	8000d54 <HAL_RCC_GetPCLK2Freq>
 8001e52:	e00a      	b.n	8001e6a <UART_SetConfig+0x212>
      break;
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001e54:	6861      	ldr	r1, [r4, #4]
 8001e56:	084a      	lsrs	r2, r1, #1
 8001e58:	f502 0374 	add.w	r3, r2, #15990784	; 0xf40000
 8001e5c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001e60:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e64:	e00f      	b.n	8001e86 <UART_SetConfig+0x22e>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001e66:	f7fe fe6f 	bl	8000b48 <HAL_RCC_GetSysClockFreq>
 8001e6a:	6863      	ldr	r3, [r4, #4]
 8001e6c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001e70:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e74:	b280      	uxth	r0, r0
 8001e76:	60e8      	str	r0, [r5, #12]
 8001e78:	e007      	b.n	8001e8a <UART_SetConfig+0x232>
      break;
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001e7a:	6862      	ldr	r2, [r4, #4]
 8001e7c:	0853      	lsrs	r3, r2, #1
 8001e7e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001e82:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	60eb      	str	r3, [r5, #12]
{
  uint32_t tmpreg                     = 0x00000000U;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000U;
  uint16_t usartdiv                   = 0x0000U;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e8a:	2000      	movs	r0, #0
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
 8001e8c:	bd38      	pop	{r3, r4, r5, pc}
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8001e8e:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 8001e90:	bd38      	pop	{r3, r4, r5, pc}
 8001e92:	bf00      	nop
 8001e94:	efff69f3 	.word	0xefff69f3
 8001e98:	40011000 	.word	0x40011000
 8001e9c:	080026f0 	.word	0x080026f0
 8001ea0:	40004400 	.word	0x40004400
 8001ea4:	080026f4 	.word	0x080026f4
 8001ea8:	40004800 	.word	0x40004800
 8001eac:	40004c00 	.word	0x40004c00
 8001eb0:	40005000 	.word	0x40005000
 8001eb4:	40011400 	.word	0x40011400
 8001eb8:	40007800 	.word	0x40007800
 8001ebc:	40007c00 	.word	0x40007c00

08001ec0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001ec0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ec2:	07da      	lsls	r2, r3, #31
  * @brief Configure the UART peripheral advanced features
  * @param huart: uart handle
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001ec4:	b510      	push	{r4, lr}
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001ec6:	d506      	bpl.n	8001ed6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001ec8:	6804      	ldr	r4, [r0, #0]
 8001eca:	6862      	ldr	r2, [r4, #4]
 8001ecc:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8001ed0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001ed6:	079c      	lsls	r4, r3, #30
 8001ed8:	d506      	bpl.n	8001ee8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001eda:	6804      	ldr	r4, [r0, #0]
 8001edc:	6862      	ldr	r2, [r4, #4]
 8001ede:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8001ee2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001ee8:	0759      	lsls	r1, r3, #29
 8001eea:	d506      	bpl.n	8001efa <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001eec:	6804      	ldr	r4, [r0, #0]
 8001eee:	6862      	ldr	r2, [r4, #4]
 8001ef0:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8001ef4:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001efa:	071a      	lsls	r2, r3, #28
 8001efc:	d506      	bpl.n	8001f0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001efe:	6804      	ldr	r4, [r0, #0]
 8001f00:	6862      	ldr	r2, [r4, #4]
 8001f02:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8001f06:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001f0c:	06dc      	lsls	r4, r3, #27
 8001f0e:	d506      	bpl.n	8001f1e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001f10:	6804      	ldr	r4, [r0, #0]
 8001f12:	68a2      	ldr	r2, [r4, #8]
 8001f14:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8001f18:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001f1e:	0699      	lsls	r1, r3, #26
 8001f20:	d506      	bpl.n	8001f30 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001f22:	6804      	ldr	r4, [r0, #0]
 8001f24:	68a2      	ldr	r2, [r4, #8]
 8001f26:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8001f2a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001f30:	065a      	lsls	r2, r3, #25
 8001f32:	d510      	bpl.n	8001f56 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001f34:	6801      	ldr	r1, [r0, #0]
 8001f36:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001f38:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001f3a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001f3e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001f42:	ea42 0204 	orr.w	r2, r2, r4
 8001f46:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001f48:	d105      	bne.n	8001f56 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001f4a:	684a      	ldr	r2, [r1, #4]
 8001f4c:	f422 04c0 	bic.w	r4, r2, #6291456	; 0x600000
 8001f50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001f52:	4322      	orrs	r2, r4
 8001f54:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001f56:	061b      	lsls	r3, r3, #24
 8001f58:	d506      	bpl.n	8001f68 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001f5a:	6801      	ldr	r1, [r0, #0]
 8001f5c:	684b      	ldr	r3, [r1, #4]
 8001f5e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8001f62:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001f64:	4313      	orrs	r3, r2
 8001f66:	604b      	str	r3, [r1, #4]
 8001f68:	bd10      	pop	{r4, pc}

08001f6a <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001f6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f6c:	2600      	movs	r6, #0
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001f6e:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f70:	66c6      	str	r6, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8001f72:	f7fe f99b 	bl	80002ac <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001f76:	6823      	ldr	r3, [r4, #0]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8001f78:	4605      	mov	r5, r0

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	071a      	lsls	r2, r3, #28
 8001f7e:	d404      	bmi.n	8001f8a <UART_CheckIdleState+0x20>
      /* Timeout Occurred */
      return HAL_TIMEOUT;
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001f80:	6823      	ldr	r3, [r4, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	075b      	lsls	r3, r3, #29
 8001f86:	d51a      	bpl.n	8001fbe <UART_CheckIdleState+0x54>
 8001f88:	e00d      	b.n	8001fa6 <UART_CheckIdleState+0x3c>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001f8a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001f8e:	4632      	mov	r2, r6
 8001f90:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	4603      	mov	r3, r0
 8001f98:	4620      	mov	r0, r4
 8001f9a:	f7ff fe2b 	bl	8001bf4 <UART_WaitOnFlagUntilTimeout>
 8001f9e:	2800      	cmp	r0, #0
 8001fa0:	d0ee      	beq.n	8001f80 <UART_CheckIdleState+0x16>
    {
      /* Timeout Occurred */
      return HAL_TIMEOUT;
 8001fa2:	2003      	movs	r0, #3
 8001fa4:	e013      	b.n	8001fce <UART_CheckIdleState+0x64>
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001fa6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001faa:	2200      	movs	r2, #0
 8001fac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001fb0:	4620      	mov	r0, r4
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	462b      	mov	r3, r5
 8001fb6:	f7ff fe1d 	bl	8001bf4 <UART_WaitOnFlagUntilTimeout>
 8001fba:	2800      	cmp	r0, #0
 8001fbc:	d1f1      	bne.n	8001fa2 <UART_CheckIdleState+0x38>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8001fbe:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001fc0:	2000      	movs	r0, #0
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8001fc2:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001fc6:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
 8001fca:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
}
 8001fce:	b002      	add	sp, #8
 8001fd0:	bd70      	pop	{r4, r5, r6, pc}

08001fd2 <HAL_UART_Init>:
  *         parameters in the UART_InitTypeDef and creates the associated handle .
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fd2:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001fd4:	4604      	mov	r4, r0
 8001fd6:	b360      	cbz	r0, 8002032 <HAL_UART_Init+0x60>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8001fd8:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001fdc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001fe0:	b91b      	cbnz	r3, 8001fea <HAL_UART_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fe2:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fe6:	f000 faf5 	bl	80025d4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001fea:	6822      	ldr	r2, [r4, #0]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fec:	2324      	movs	r3, #36	; 0x24

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001fee:	4620      	mov	r0, r4

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ff0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001ff4:	6813      	ldr	r3, [r2, #0]
 8001ff6:	f023 0301 	bic.w	r3, r3, #1
 8001ffa:	6013      	str	r3, [r2, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ffc:	f7ff fe2c 	bl	8001c58 <UART_SetConfig>
 8002000:	2801      	cmp	r0, #1
 8002002:	d016      	beq.n	8002032 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002004:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002006:	b113      	cbz	r3, 800200e <HAL_UART_Init+0x3c>
  {
    UART_AdvFeatureConfig(huart);
 8002008:	4620      	mov	r0, r4
 800200a:	f7ff ff59 	bl	8001ec0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800200e:	6823      	ldr	r3, [r4, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002010:	4620      	mov	r0, r4
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002018:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002020:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	f042 0201 	orr.w	r2, r2, #1

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 8002028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800202c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800202e:	f7ff bf9c 	b.w	8001f6a <UART_CheckIdleState>
}
 8002032:	2001      	movs	r0, #1
 8002034:	bd10      	pop	{r4, pc}
	...

08002038 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002038:	4b26      	ldr	r3, [pc, #152]	; (80020d4 <SystemClock_Config+0x9c>)
 800203a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800203c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002040:	b510      	push	{r4, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002042:	641a      	str	r2, [r3, #64]	; 0x40
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002044:	b0b4      	sub	sp, #208	; 0xd0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002048:	4a23      	ldr	r2, [pc, #140]	; (80020d8 <SystemClock_Config+0xa0>)
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800204a:	a807      	add	r0, sp, #28
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 800204c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002050:	9300      	str	r3, [sp, #0]
 8002052:	9b00      	ldr	r3, [sp, #0]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002054:	6813      	ldr	r3, [r2, #0]
 8002056:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800205a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	6813      	ldr	r3, [r2, #0]
 8002062:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002066:	9301      	str	r3, [sp, #4]
 8002068:	9b01      	ldr	r3, [sp, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800206a:	2302      	movs	r3, #2
 800206c:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800206e:	2301      	movs	r3, #1
 8002070:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002072:	2310      	movs	r3, #16
 8002074:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002076:	2300      	movs	r3, #0
 8002078:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800207a:	f7fe fbc9 	bl	8000810 <HAL_RCC_OscConfig>
 800207e:	4601      	mov	r1, r0
 8002080:	b100      	cbz	r0, 8002084 <SystemClock_Config+0x4c>
 8002082:	e7fe      	b.n	8002082 <SystemClock_Config+0x4a>
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002084:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002086:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002088:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800208a:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800208c:	9006      	str	r0, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800208e:	a802      	add	r0, sp, #8
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002090:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002092:	f7fe fd97 	bl	8000bc4 <HAL_RCC_ClockConfig>
 8002096:	b100      	cbz	r0, 800209a <SystemClock_Config+0x62>
 8002098:	e7fe      	b.n	8002098 <SystemClock_Config+0x60>
  {
    Error_Handler();
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800209a:	2340      	movs	r3, #64	; 0x40
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800209c:	9024      	str	r0, [sp, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800209e:	a813      	add	r0, sp, #76	; 0x4c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80020a0:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020a2:	f7fe fe6f 	bl	8000d84 <HAL_RCCEx_PeriphCLKConfig>
 80020a6:	4604      	mov	r4, r0
 80020a8:	b100      	cbz	r0, 80020ac <SystemClock_Config+0x74>
 80020aa:	e7fe      	b.n	80020aa <SystemClock_Config+0x72>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80020ac:	f7fe fe34 	bl	8000d18 <HAL_RCC_GetHCLKFreq>
 80020b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80020b8:	f7fe fa92 	bl	80005e0 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80020bc:	2004      	movs	r0, #4
 80020be:	f7fe faa5 	bl	800060c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80020c2:	4622      	mov	r2, r4
 80020c4:	4621      	mov	r1, r4
 80020c6:	f04f 30ff 	mov.w	r0, #4294967295
 80020ca:	f7fe fa51 	bl	8000570 <HAL_NVIC_SetPriority>
}
 80020ce:	b034      	add	sp, #208	; 0xd0
 80020d0:	bd10      	pop	{r4, pc}
 80020d2:	bf00      	nop
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40007000 	.word	0x40007000

080020dc <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b090      	sub	sp, #64	; 0x40
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : RDIC_Pin LDIC_Pin GYRO_CS_Pin */
  GPIO_InitStruct.Pin = RDIC_Pin|LDIC_Pin|GYRO_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2400      	movs	r4, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020e2:	f7fe f8cf 	bl	8000284 <HAL_Init>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : RDIC_Pin LDIC_Pin GYRO_CS_Pin */
  GPIO_InitStruct.Pin = RDIC_Pin|LDIC_Pin|GYRO_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e6:	2601      	movs	r6, #1

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* Configure the system clock */
  SystemClock_Config();
 80020e8:	f7ff ffa6 	bl	8002038 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ec:	4b93      	ldr	r3, [pc, #588]	; (800233c <main+0x260>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RDIC_Pin|LDIC_Pin|GYRO_CS_Pin, GPIO_PIN_RESET);
 80020ee:	2116      	movs	r1, #22
 80020f0:	4893      	ldr	r0, [pc, #588]	; (8002340 <main+0x264>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020f4:	f44f 7740 	mov.w	r7, #768	; 0x300
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020f8:	4d92      	ldr	r5, [pc, #584]	; (8002344 <main+0x268>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fa:	f042 0201 	orr.w	r2, r2, #1
 80020fe:	631a      	str	r2, [r3, #48]	; 0x30
 8002100:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002102:	f002 0201 	and.w	r2, r2, #1
 8002106:	9201      	str	r2, [sp, #4]
 8002108:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800210a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800210c:	f042 0204 	orr.w	r2, r2, #4
 8002110:	631a      	str	r2, [r3, #48]	; 0x30
 8002112:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002114:	f002 0204 	and.w	r2, r2, #4
 8002118:	9202      	str	r2, [sp, #8]
 800211a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800211c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800211e:	f042 0202 	orr.w	r2, r2, #2
 8002122:	631a      	str	r2, [r3, #48]	; 0x30
 8002124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002126:	f002 0202 	and.w	r2, r2, #2
 800212a:	9203      	str	r2, [sp, #12]
 800212c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800212e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002130:	f042 0210 	orr.w	r2, r2, #16
 8002134:	631a      	str	r2, [r3, #48]	; 0x30
 8002136:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002138:	f002 0210 	and.w	r2, r2, #16
 800213c:	9204      	str	r2, [sp, #16]
 800213e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002140:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002142:	f042 0208 	orr.w	r2, r2, #8
 8002146:	631a      	str	r2, [r3, #48]	; 0x30

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RDIC_Pin|LDIC_Pin|GYRO_CS_Pin, GPIO_PIN_RESET);
 8002148:	2200      	movs	r2, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800214a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214c:	f003 0308 	and.w	r3, r3, #8
 8002150:	9305      	str	r3, [sp, #20]
 8002152:	9b05      	ldr	r3, [sp, #20]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RDIC_Pin|LDIC_Pin|GYRO_CS_Pin, GPIO_PIN_RESET);
 8002154:	f7fe fb58 	bl	8000808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002158:	2200      	movs	r2, #0
 800215a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800215e:	487a      	ldr	r0, [pc, #488]	; (8002348 <main+0x26c>)
 8002160:	f7fe fb52 	bl	8000808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED5_Pin|LED4_Pin|LED3_Pin|LED2_Pin 
 8002164:	2201      	movs	r2, #1
 8002166:	213e      	movs	r1, #62	; 0x3e
 8002168:	4878      	ldr	r0, [pc, #480]	; (800234c <main+0x270>)
 800216a:	f7fe fb4d 	bl	8000808 <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800216e:	2200      	movs	r2, #0
 8002170:	2130      	movs	r1, #48	; 0x30
 8002172:	4877      	ldr	r0, [pc, #476]	; (8002350 <main+0x274>)
 8002174:	f7fe fb48 	bl	8000808 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RDIC_Pin LDIC_Pin GYRO_CS_Pin */
  GPIO_InitStruct.Pin = RDIC_Pin|LDIC_Pin|GYRO_CS_Pin;
 8002178:	2316      	movs	r3, #22
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217a:	a909      	add	r1, sp, #36	; 0x24
 800217c:	4870      	ldr	r0, [pc, #448]	; (8002340 <main+0x264>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : RDIC_Pin LDIC_Pin GYRO_CS_Pin */
  GPIO_InitStruct.Pin = RDIC_Pin|LDIC_Pin|GYRO_CS_Pin;
 800217e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002180:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002184:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002186:	f7fe fa53 	bl	8000630 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
 800218a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 800218e:	a909      	add	r1, sp, #36	; 0x24
 8002190:	486e      	ldr	r0, [pc, #440]	; (800234c <main+0x270>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
 8002192:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002194:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 8002198:	f7fe fa4a 	bl	8000630 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin;
 800219c:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);
 800219e:	a909      	add	r1, sp, #36	; 0x24
 80021a0:	4869      	ldr	r0, [pc, #420]	; (8002348 <main+0x26c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin;
 80021a2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021a4:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);
 80021a8:	f7fe fa42 	bl	8000630 <HAL_GPIO_Init>
  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ac:	a909      	add	r1, sp, #36	; 0x24
 80021ae:	4866      	ldr	r0, [pc, #408]	; (8002348 <main+0x26c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021b0:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b2:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b6:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021b8:	f7fe fa3a 	bl	8000630 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED5_Pin LED4_Pin LED3_Pin LED2_Pin 
                           LED1_Pin */
  GPIO_InitStruct.Pin = LED5_Pin|LED4_Pin|LED3_Pin|LED2_Pin 
 80021bc:	233e      	movs	r3, #62	; 0x3e
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021be:	a909      	add	r1, sp, #36	; 0x24
 80021c0:	4862      	ldr	r0, [pc, #392]	; (800234c <main+0x270>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : LED5_Pin LED4_Pin LED3_Pin LED2_Pin 
                           LED1_Pin */
  GPIO_InitStruct.Pin = LED5_Pin|LED4_Pin|LED3_Pin|LED2_Pin 
 80021c2:	9309      	str	r3, [sp, #36]	; 0x24
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c4:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c8:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021ca:	f7fe fa31 	bl	8000630 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80021ce:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d0:	485f      	ldr	r0, [pc, #380]	; (8002350 <main+0x274>)
 80021d2:	a909      	add	r1, sp, #36	; 0x24

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 80021d4:	4d5f      	ldr	r5, [pc, #380]	; (8002354 <main+0x278>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80021d6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d8:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021de:	f7fe fa27 	bl	8000630 <HAL_GPIO_Init>

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 80021e2:	4b5d      	ldr	r3, [pc, #372]	; (8002358 <main+0x27c>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80021e4:	4628      	mov	r0, r5

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80021e6:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80021e8:	612c      	str	r4, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80021ea:	61ac      	str	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80021ec:	622c      	str	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021ee:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80021f0:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 1;
 80021f2:	61ee      	str	r6, [r5, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80021f4:	632c      	str	r4, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021f6:	616e      	str	r6, [r5, #20]
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80021f8:	e885 0018 	stmia.w	r5, {r3, r4}
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021fc:	4b57      	ldr	r3, [pc, #348]	; (800235c <main+0x280>)
 80021fe:	62ab      	str	r3, [r5, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002200:	f7fe f85a 	bl	80002b8 <HAL_ADC_Init>
 8002204:	b100      	cbz	r0, 8002208 <main+0x12c>
 8002206:	e7fe      	b.n	8002206 <main+0x12a>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */

  sConfig.Channel = ADC_CHANNEL_14;
 8002208:	230e      	movs	r3, #14
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800220a:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800220c:	a909      	add	r1, sp, #36	; 0x24
 800220e:	4628      	mov	r0, r5
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */

  sConfig.Channel = ADC_CHANNEL_14;
 8002210:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.Rank = 1;
 8002212:	960a      	str	r6, [sp, #40]	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002214:	f7fe f8fa 	bl	800040c <HAL_ADC_ConfigChannel>
 8002218:	b100      	cbz	r0, 800221c <main+0x140>
 800221a:	e7fe      	b.n	800221a <main+0x13e>

/* SPI1 init function */
static void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 800221c:	4b50      	ldr	r3, [pc, #320]	; (8002360 <main+0x284>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800221e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002222:	4950      	ldr	r1, [pc, #320]	; (8002364 <main+0x288>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002224:	6098      	str	r0, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002226:	6118      	str	r0, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002228:	6158      	str	r0, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800222a:	61d8      	str	r0, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800222c:	6218      	str	r0, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800222e:	6258      	str	r0, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002230:	6298      	str	r0, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002232:	6318      	str	r0, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002234:	4618      	mov	r0, r3
{

  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002236:	60df      	str	r7, [r3, #12]
/* SPI1 init function */
static void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002238:	e883 0006 	stmia.w	r3, {r1, r2}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800223c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002240:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8002242:	2207      	movs	r2, #7
 8002244:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002246:	2208      	movs	r2, #8
 8002248:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800224a:	f7ff f941 	bl	80014d0 <HAL_SPI_Init>
 800224e:	b100      	cbz	r0, 8002252 <main+0x176>
 8002250:	e7fe      	b.n	8002250 <main+0x174>
{

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_IC_InitTypeDef sConfigIC;

  htim1.Instance = TIM1;
 8002252:	4c45      	ldr	r4, [pc, #276]	; (8002368 <main+0x28c>)
 8002254:	4b45      	ldr	r3, [pc, #276]	; (800236c <main+0x290>)
  htim1.Init.Prescaler = 0;
 8002256:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002258:	60a0      	str	r0, [r4, #8]
  htim1.Init.Period = 0;
 800225a:	60e0      	str	r0, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800225c:	6120      	str	r0, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 800225e:	6160      	str	r0, [r4, #20]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002260:	4620      	mov	r0, r4
{

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_IC_InitTypeDef sConfigIC;

  htim1.Instance = TIM1;
 8002262:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 0;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002264:	f7ff fa08 	bl	8001678 <HAL_TIM_IC_Init>
 8002268:	b100      	cbz	r0, 800226c <main+0x190>
 800226a:	e7fe      	b.n	800226a <main+0x18e>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800226c:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800226e:	a906      	add	r1, sp, #24
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002270:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002272:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002274:	4620      	mov	r0, r4
 8002276:	f7ff fc97 	bl	8001ba8 <HAL_TIMEx_MasterConfigSynchronization>
 800227a:	4602      	mov	r2, r0
 800227c:	b100      	cbz	r0, 8002280 <main+0x1a4>
 800227e:	e7fe      	b.n	800227e <main+0x1a2>
  {
    Error_Handler();
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002280:	9009      	str	r0, [sp, #36]	; 0x24
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002282:	a909      	add	r1, sp, #36	; 0x24
    Error_Handler();
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002284:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigIC.ICFilter = 0;
 8002286:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002288:	4620      	mov	r0, r4
  {
    Error_Handler();
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800228a:	960a      	str	r6, [sp, #40]	; 0x28
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800228c:	f7ff fb06 	bl	800189c <HAL_TIM_IC_ConfigChannel>
 8002290:	b100      	cbz	r0, 8002294 <main+0x1b8>
 8002292:	e7fe      	b.n	8002292 <main+0x1b6>
  {
    Error_Handler();
  }

  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002294:	2204      	movs	r2, #4
 8002296:	a909      	add	r1, sp, #36	; 0x24
 8002298:	4620      	mov	r0, r4
 800229a:	f7ff faff 	bl	800189c <HAL_TIM_IC_ConfigChannel>
 800229e:	b100      	cbz	r0, 80022a2 <main+0x1c6>
 80022a0:	e7fe      	b.n	80022a0 <main+0x1c4>


  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  uhPrescalerValue = (uint32_t)((SystemCoreClock /2) / 18000000) - 1;
 80022a2:	4b33      	ldr	r3, [pc, #204]	; (8002370 <main+0x294>)
 80022a4:	4a33      	ldr	r2, [pc, #204]	; (8002374 <main+0x298>)
 80022a6:	681b      	ldr	r3, [r3, #0]

  htim2.Instance = TIM2;
 80022a8:	4c33      	ldr	r4, [pc, #204]	; (8002378 <main+0x29c>)


  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  uhPrescalerValue = (uint32_t)((SystemCoreClock /2) / 18000000) - 1;
 80022aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80022ae:	4a33      	ldr	r2, [pc, #204]	; (800237c <main+0x2a0>)
 80022b0:	3b01      	subs	r3, #1

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = uhPrescalerValue;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b2:	60a0      	str	r0, [r4, #8]


  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  uhPrescalerValue = (uint32_t)((SystemCoreClock /2) / 18000000) - 1;
 80022b4:	6013      	str	r3, [r2, #0]

  htim2.Instance = TIM2;
 80022b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Init.Prescaler = uhPrescalerValue;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 665;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ba:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80022bc:	4620      	mov	r0, r4
  TIM_OC_InitTypeDef sConfigOC;

  uhPrescalerValue = (uint32_t)((SystemCoreClock /2) / 18000000) - 1;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = uhPrescalerValue;
 80022be:	e884 000c 	stmia.w	r4, {r2, r3}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 665;
 80022c2:	f240 2399 	movw	r3, #665	; 0x299
 80022c6:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80022c8:	f7ff f9bc 	bl	8001644 <HAL_TIM_PWM_Init>
 80022cc:	b100      	cbz	r0, 80022d0 <main+0x1f4>
 80022ce:	e7fe      	b.n	80022ce <main+0x1f2>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022d0:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022d2:	a906      	add	r1, sp, #24
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022d4:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022d6:	4620      	mov	r0, r4
 80022d8:	f7ff fc66 	bl	8001ba8 <HAL_TIMEx_MasterConfigSynchronization>
 80022dc:	4602      	mov	r2, r0
 80022de:	b100      	cbz	r0, 80022e2 <main+0x206>
 80022e0:	e7fe      	b.n	80022e0 <main+0x204>
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022e2:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 500;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022e4:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022e6:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022e8:	a909      	add	r1, sp, #36	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022ea:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.Pulse = 500;
 80022ec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022f0:	4620      	mov	r0, r4
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 500;
 80022f2:	930a      	str	r3, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022f4:	f7ff fbd2 	bl	8001a9c <HAL_TIM_PWM_ConfigChannel>
 80022f8:	b100      	cbz	r0, 80022fc <main+0x220>
 80022fa:	e7fe      	b.n	80022fa <main+0x21e>
  }


 // sConfigOC.Pulse = 0;

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022fc:	220c      	movs	r2, #12
 80022fe:	a909      	add	r1, sp, #36	; 0x24
 8002300:	481d      	ldr	r0, [pc, #116]	; (8002378 <main+0x29c>)
 8002302:	f7ff fbcb 	bl	8001a9c <HAL_TIM_PWM_ConfigChannel>
 8002306:	4605      	mov	r5, r0
 8002308:	b100      	cbz	r0, 800230c <main+0x230>
 800230a:	e7fe      	b.n	800230a <main+0x22e>
{

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim4.Instance = TIM4;
 800230c:	4c1c      	ldr	r4, [pc, #112]	; (8002380 <main+0x2a4>)
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    Error_Handler();
  }

  HAL_TIM_MspPostInit(&htim2);
 800230e:	481a      	ldr	r0, [pc, #104]	; (8002378 <main+0x29c>)
 8002310:	f000 f936 	bl	8002580 <HAL_TIM_MspPostInit>
{

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim4.Instance = TIM4;
 8002314:	4b1b      	ldr	r3, [pc, #108]	; (8002384 <main+0x2a8>)
  htim4.Init.Prescaler = 0;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 0;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002316:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 0;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002318:	60a5      	str	r5, [r4, #8]
  htim4.Init.Period = 0;
 800231a:	60e5      	str	r5, [r4, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800231c:	6125      	str	r5, [r4, #16]

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 0;
 800231e:	e884 0028 	stmia.w	r4, {r3, r5}
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 0;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002322:	f7ff f98f 	bl	8001644 <HAL_TIM_PWM_Init>
 8002326:	b100      	cbz	r0, 800232a <main+0x24e>
 8002328:	e7fe      	b.n	8002328 <main+0x24c>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800232a:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800232c:	a906      	add	r1, sp, #24
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800232e:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002330:	4620      	mov	r0, r4
 8002332:	f7ff fc39 	bl	8001ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8002336:	4602      	mov	r2, r0
 8002338:	b330      	cbz	r0, 8002388 <main+0x2ac>
 800233a:	e7fe      	b.n	800233a <main+0x25e>
 800233c:	40023800 	.word	0x40023800
 8002340:	40020000 	.word	0x40020000
 8002344:	10110000 	.word	0x10110000
 8002348:	40020800 	.word	0x40020800
 800234c:	40020c00 	.word	0x40020c00
 8002350:	40020400 	.word	0x40020400
 8002354:	20000064 	.word	0x20000064
 8002358:	40012000 	.word	0x40012000
 800235c:	0f000001 	.word	0x0f000001
 8002360:	20000158 	.word	0x20000158
 8002364:	40013000 	.word	0x40013000
 8002368:	2000011c 	.word	0x2000011c
 800236c:	40010000 	.word	0x40010000
 8002370:	20000000 	.word	0x20000000
 8002374:	02255100 	.word	0x02255100
 8002378:	200001bc 	.word	0x200001bc
 800237c:	20000020 	.word	0x20000020
 8002380:	20000028 	.word	0x20000028
 8002384:	40000800 	.word	0x40000800
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002388:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 800238a:	900a      	str	r0, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800238c:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800238e:	a909      	add	r1, sp, #36	; 0x24
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002390:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002392:	4620      	mov	r0, r4
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002394:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002396:	f7ff fb81 	bl	8001a9c <HAL_TIM_PWM_ConfigChannel>
 800239a:	4605      	mov	r5, r0
 800239c:	b100      	cbz	r0, 80023a0 <main+0x2c4>
 800239e:	e7fe      	b.n	800239e <main+0x2c2>
  {
    Error_Handler();
  }

  HAL_TIM_MspPostInit(&htim4);
 80023a0:	4620      	mov	r0, r4
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023a2:	240c      	movs	r4, #12
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }

  HAL_TIM_MspPostInit(&htim4);
 80023a4:	f000 f8ec 	bl	8002580 <HAL_TIM_MspPostInit>

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 80023a8:	480d      	ldr	r0, [pc, #52]	; (80023e0 <main+0x304>)
  huart1.Init.BaudRate = 115200;
 80023aa:	4a0e      	ldr	r2, [pc, #56]	; (80023e4 <main+0x308>)
 80023ac:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023b0:	6085      	str	r5, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023b2:	60c5      	str	r5, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023b4:	6105      	str	r5, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023b6:	6144      	str	r4, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023b8:	6185      	str	r5, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023ba:	61c5      	str	r5, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023bc:	6205      	str	r5, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023be:	6245      	str	r5, [r0, #36]	; 0x24
/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 80023c0:	e880 000c 	stmia.w	r0, {r2, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023c4:	f7ff fe05 	bl	8001fd2 <HAL_UART_Init>
 80023c8:	4601      	mov	r1, r0
 80023ca:	b100      	cbz	r0, 80023ce <main+0x2f2>
 80023cc:	e7fe      	b.n	80023cc <main+0x2f0>
  MX_TIM1_Init();
  MX_TIM2_Init();
  MX_TIM4_Init();
  MX_USART1_UART_Init();

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80023ce:	4806      	ldr	r0, [pc, #24]	; (80023e8 <main+0x30c>)
 80023d0:	f7ff fafa 	bl	80019c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80023d4:	4621      	mov	r1, r4
 80023d6:	4804      	ldr	r0, [pc, #16]	; (80023e8 <main+0x30c>)
 80023d8:	f7ff faf6 	bl	80019c8 <HAL_TIM_PWM_Start>
 80023dc:	e7fe      	b.n	80023dc <main+0x300>
 80023de:	bf00      	nop
 80023e0:	200000ac 	.word	0x200000ac
 80023e4:	40011000 	.word	0x40011000
 80023e8:	200001bc 	.word	0x200001bc

080023ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023ee:	2003      	movs	r0, #3
 80023f0:	f7fe f8ac 	bl	800054c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80023f4:	2200      	movs	r2, #0
 80023f6:	f06f 000b 	mvn.w	r0, #11
 80023fa:	4611      	mov	r1, r2
 80023fc:	f7fe f8b8 	bl	8000570 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002400:	2200      	movs	r2, #0
 8002402:	f06f 000a 	mvn.w	r0, #10
 8002406:	4611      	mov	r1, r2
 8002408:	f7fe f8b2 	bl	8000570 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800240c:	2200      	movs	r2, #0
 800240e:	f06f 0009 	mvn.w	r0, #9
 8002412:	4611      	mov	r1, r2
 8002414:	f7fe f8ac 	bl	8000570 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002418:	2200      	movs	r2, #0
 800241a:	f06f 0004 	mvn.w	r0, #4
 800241e:	4611      	mov	r1, r2
 8002420:	f7fe f8a6 	bl	8000570 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002424:	2200      	movs	r2, #0
 8002426:	f06f 0003 	mvn.w	r0, #3
 800242a:	4611      	mov	r1, r2
 800242c:	f7fe f8a0 	bl	8000570 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002430:	2200      	movs	r2, #0
 8002432:	f06f 0001 	mvn.w	r0, #1
 8002436:	4611      	mov	r1, r2
 8002438:	f7fe f89a 	bl	8000570 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800243c:	2200      	movs	r2, #0
 800243e:	f04f 30ff 	mov.w	r0, #4294967295
 8002442:	4611      	mov	r1, r2

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002444:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002448:	f7fe b892 	b.w	8000570 <HAL_NVIC_SetPriority>

0800244c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 800244c:	6802      	ldr	r2, [r0, #0]
 800244e:	4b11      	ldr	r3, [pc, #68]	; (8002494 <HAL_ADC_MspInit+0x48>)
 8002450:	429a      	cmp	r2, r3

  /* USER CODE END MspInit 1 */
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002452:	b530      	push	{r4, r5, lr}
 8002454:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8002456:	d11b      	bne.n	8002490 <HAL_ADC_MspInit+0x44>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002458:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800245c:	2403      	movs	r4, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	2500      	movs	r5, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002460:	a901      	add	r1, sp, #4
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002462:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002464:	480c      	ldr	r0, [pc, #48]	; (8002498 <HAL_ADC_MspInit+0x4c>)
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002466:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800246a:	645a      	str	r2, [r3, #68]	; 0x44
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800246e:	9402      	str	r4, [sp, #8]
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002470:	f403 7380 	and.w	r3, r3, #256	; 0x100
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	9503      	str	r5, [sp, #12]
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	9b00      	ldr	r3, [sp, #0]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
 800247a:	2330      	movs	r3, #48	; 0x30
 800247c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800247e:	f7fe f8d7 	bl	8000630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RF_REC_Pin|R_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002482:	a901      	add	r1, sp, #4
 8002484:	4805      	ldr	r0, [pc, #20]	; (800249c <HAL_ADC_MspInit+0x50>)
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = RF_REC_Pin|R_REC_Pin;
 8002486:	9401      	str	r4, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002488:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248c:	f7fe f8d0 	bl	8000630 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002490:	b007      	add	sp, #28
 8002492:	bd30      	pop	{r4, r5, pc}
 8002494:	40012000 	.word	0x40012000
 8002498:	40020800 	.word	0x40020800
 800249c:	40020400 	.word	0x40020400

080024a0 <HAL_SPI_MspInit>:
  /* USER CODE END ADC1_MspDeInit 1 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 80024a2:	6802      	ldr	r2, [r0, #0]
 80024a4:	4b0f      	ldr	r3, [pc, #60]	; (80024e4 <HAL_SPI_MspInit+0x44>)
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d118      	bne.n	80024dc <HAL_SPI_MspInit+0x3c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024aa:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
    GPIO_InitStruct.Pin = GYRO_SCLK_Pin|GYRO_MISO_Pin|GYRO_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ae:	a901      	add	r1, sp, #4
 80024b0:	480d      	ldr	r0, [pc, #52]	; (80024e8 <HAL_SPI_MspInit+0x48>)
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024b8:	645a      	str	r2, [r3, #68]	; 0x44
 80024ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	9b00      	ldr	r3, [sp, #0]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GYRO_SCLK_Pin|GYRO_MISO_Pin|GYRO_MOSI_Pin;
 80024c4:	23e0      	movs	r3, #224	; 0xe0
 80024c6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c8:	2302      	movs	r3, #2
 80024ca:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d0:	2303      	movs	r3, #3
 80024d2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024d4:	2305      	movs	r3, #5
 80024d6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d8:	f7fe f8aa 	bl	8000630 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80024dc:	b007      	add	sp, #28
 80024de:	f85d fb04 	ldr.w	pc, [sp], #4
 80024e2:	bf00      	nop
 80024e4:	40013000 	.word	0x40013000
 80024e8:	40020000 	.word	0x40020000

080024ec <HAL_TIM_IC_MspInit>:
  /* USER CODE END SPI1_MspDeInit 1 */

}

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80024ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_ic->Instance==TIM1)
 80024ee:	6802      	ldr	r2, [r0, #0]
 80024f0:	4b0f      	ldr	r3, [pc, #60]	; (8002530 <HAL_TIM_IC_MspInit+0x44>)
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d118      	bne.n	8002528 <HAL_TIM_IC_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024f6:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
    GPIO_InitStruct.Pin = LENC_CHB_Pin|LENC_CHA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024fa:	a901      	add	r1, sp, #4
 80024fc:	480d      	ldr	r0, [pc, #52]	; (8002534 <HAL_TIM_IC_MspInit+0x48>)
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002500:	f042 0201 	orr.w	r2, r2, #1
 8002504:	645a      	str	r2, [r3, #68]	; 0x44
 8002506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	9b00      	ldr	r3, [sp, #0]
  
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = LENC_CHB_Pin|LENC_CHA_Pin;
 8002510:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002514:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002516:	2302      	movs	r3, #2
 8002518:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251a:	2300      	movs	r3, #0
 800251c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002520:	2301      	movs	r3, #1
 8002522:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002524:	f7fe f884 	bl	8000630 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002528:	b007      	add	sp, #28
 800252a:	f85d fb04 	ldr.w	pc, [sp], #4
 800252e:	bf00      	nop
 8002530:	40010000 	.word	0x40010000
 8002534:	40021000 	.word	0x40021000

08002538 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM2)
 8002538:	6803      	ldr	r3, [r0, #0]
  }

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800253a:	b082      	sub	sp, #8

  if(htim_pwm->Instance==TIM2)
 800253c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002540:	d10b      	bne.n	800255a <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002542:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8002546:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002548:	f042 0201 	orr.w	r2, r2, #1
 800254c:	641a      	str	r2, [r3, #64]	; 0x40
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	9b00      	ldr	r3, [sp, #0]
 8002558:	e00c      	b.n	8002574 <HAL_TIM_PWM_MspInit+0x3c>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM4)
 800255a:	4a07      	ldr	r2, [pc, #28]	; (8002578 <HAL_TIM_PWM_MspInit+0x40>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d109      	bne.n	8002574 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <HAL_TIM_PWM_MspInit+0x44>)
 8002562:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002564:	f042 0204 	orr.w	r2, r2, #4
 8002568:	641a      	str	r2, [r3, #64]	; 0x40
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	9301      	str	r3, [sp, #4]
 8002572:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002574:	b002      	add	sp, #8
 8002576:	4770      	bx	lr
 8002578:	40000800 	.word	0x40000800
 800257c:	40023800 	.word	0x40023800

08002580 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002580:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM2)
 8002582:	6803      	ldr	r3, [r0, #0]
 8002584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002588:	d10b      	bne.n	80025a2 <HAL_TIM_MspPostInit+0x22>
  /* USER CODE END TIM2_MspPostInit 0 */
    /**TIM2 GPIO Configuration    
    PA0/WKUP     ------> TIM2_CH1
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = RPWMA_Pin|LPWMA_Pin;
 800258a:	2309      	movs	r3, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258c:	a901      	add	r1, sp, #4
 800258e:	480e      	ldr	r0, [pc, #56]	; (80025c8 <HAL_TIM_MspPostInit+0x48>)
  /* USER CODE END TIM2_MspPostInit 0 */
    /**TIM2 GPIO Configuration    
    PA0/WKUP     ------> TIM2_CH1
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = RPWMA_Pin|LPWMA_Pin;
 8002590:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002592:	2302      	movs	r3, #2
 8002594:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800259c:	2301      	movs	r3, #1
 800259e:	9305      	str	r3, [sp, #20]
 80025a0:	e00d      	b.n	80025be <HAL_TIM_MspPostInit+0x3e>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM4)
 80025a2:	4a0a      	ldr	r2, [pc, #40]	; (80025cc <HAL_TIM_MspPostInit+0x4c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d10c      	bne.n	80025c2 <HAL_TIM_MspPostInit+0x42>
  /* USER CODE END TIM4_MspPostInit 0 */
  
    /**TIM4 GPIO Configuration    
    PD12     ------> TIM4_CH1 
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 80025a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2200      	movs	r2, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80025ae:	a901      	add	r1, sp, #4
 80025b0:	4807      	ldr	r0, [pc, #28]	; (80025d0 <HAL_TIM_MspPostInit+0x50>)
  /* USER CODE END TIM4_MspPostInit 0 */
  
    /**TIM4 GPIO Configuration    
    PD12     ------> TIM4_CH1 
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 80025b2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b4:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	9203      	str	r2, [sp, #12]
  
    /**TIM4 GPIO Configuration    
    PD12     ------> TIM4_CH1 
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ba:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80025bc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80025be:	f7fe f837 	bl	8000630 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80025c2:	b007      	add	sp, #28
 80025c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80025c8:	40020000 	.word	0x40020000
 80025cc:	40000800 	.word	0x40000800
 80025d0:	40020c00 	.word	0x40020c00

080025d4 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80025d6:	6802      	ldr	r2, [r0, #0]
 80025d8:	4b0f      	ldr	r3, [pc, #60]	; (8002618 <HAL_UART_MspInit+0x44>)
 80025da:	429a      	cmp	r2, r3
 80025dc:	d119      	bne.n	8002612 <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025de:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e2:	a901      	add	r1, sp, #4
 80025e4:	480d      	ldr	r0, [pc, #52]	; (800261c <HAL_UART_MspInit+0x48>)
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025e8:	f042 0210 	orr.w	r2, r2, #16
 80025ec:	645a      	str	r2, [r3, #68]	; 0x44
 80025ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f0:	f003 0310 	and.w	r3, r3, #16
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	9b00      	ldr	r3, [sp, #0]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025f8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025fc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fe:	2302      	movs	r3, #2
 8002600:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002602:	2301      	movs	r3, #1
 8002604:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002606:	2303      	movs	r3, #3
 8002608:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800260a:	2307      	movs	r3, #7
 800260c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260e:	f7fe f80f 	bl	8000630 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002612:	b007      	add	sp, #28
 8002614:	f85d fb04 	ldr.w	pc, [sp], #4
 8002618:	40011000 	.word	0x40011000
 800261c:	40020000 	.word	0x40020000

08002620 <NMI_Handler>:
 8002620:	4770      	bx	lr

08002622 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002622:	e7fe      	b.n	8002622 <HardFault_Handler>

08002624 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002624:	e7fe      	b.n	8002624 <MemManage_Handler>

08002626 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002626:	e7fe      	b.n	8002626 <BusFault_Handler>

08002628 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002628:	e7fe      	b.n	8002628 <UsageFault_Handler>

0800262a <SVC_Handler>:
 800262a:	4770      	bx	lr

0800262c <DebugMon_Handler>:
 800262c:	4770      	bx	lr

0800262e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800262e:	4770      	bx	lr

08002630 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002630:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002632:	f7fd fe33 	bl	800029c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002636:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 800263a:	f7fd bff4 	b.w	8000626 <HAL_SYSTICK_IRQHandler>
	...

08002640 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002640:	490f      	ldr	r1, [pc, #60]	; (8002680 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002642:	2000      	movs	r0, #0
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002644:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002648:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800264c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002650:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <SystemInit+0x44>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	f042 0201 	orr.w	r2, r2, #1
 8002658:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800265a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002662:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002666:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002668:	4a07      	ldr	r2, [pc, #28]	; (8002688 <SystemInit+0x48>)
 800266a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002672:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002674:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002676:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800267a:	608b      	str	r3, [r1, #8]
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	e000ed00 	.word	0xe000ed00
 8002684:	40023800 	.word	0x40023800
 8002688:	24003010 	.word	0x24003010

0800268c <__libc_init_array>:
 800268c:	b570      	push	{r4, r5, r6, lr}
 800268e:	4b0e      	ldr	r3, [pc, #56]	; (80026c8 <__libc_init_array+0x3c>)
 8002690:	4c0e      	ldr	r4, [pc, #56]	; (80026cc <__libc_init_array+0x40>)
 8002692:	1ae4      	subs	r4, r4, r3
 8002694:	10a4      	asrs	r4, r4, #2
 8002696:	2500      	movs	r5, #0
 8002698:	461e      	mov	r6, r3
 800269a:	42a5      	cmp	r5, r4
 800269c:	d004      	beq.n	80026a8 <__libc_init_array+0x1c>
 800269e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026a2:	4798      	blx	r3
 80026a4:	3501      	adds	r5, #1
 80026a6:	e7f8      	b.n	800269a <__libc_init_array+0xe>
 80026a8:	f000 f816 	bl	80026d8 <_init>
 80026ac:	4c08      	ldr	r4, [pc, #32]	; (80026d0 <__libc_init_array+0x44>)
 80026ae:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <__libc_init_array+0x48>)
 80026b0:	1ae4      	subs	r4, r4, r3
 80026b2:	10a4      	asrs	r4, r4, #2
 80026b4:	2500      	movs	r5, #0
 80026b6:	461e      	mov	r6, r3
 80026b8:	42a5      	cmp	r5, r4
 80026ba:	d004      	beq.n	80026c6 <__libc_init_array+0x3a>
 80026bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026c0:	4798      	blx	r3
 80026c2:	3501      	adds	r5, #1
 80026c4:	e7f8      	b.n	80026b8 <__libc_init_array+0x2c>
 80026c6:	bd70      	pop	{r4, r5, r6, pc}
 80026c8:	0800271c 	.word	0x0800271c
 80026cc:	0800271c 	.word	0x0800271c
 80026d0:	08002720 	.word	0x08002720
 80026d4:	0800271c 	.word	0x0800271c

080026d8 <_init>:
 80026d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026da:	bf00      	nop
 80026dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026de:	bc08      	pop	{r3}
 80026e0:	469e      	mov	lr, r3
 80026e2:	4770      	bx	lr

080026e4 <_fini>:
 80026e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026e6:	bf00      	nop
 80026e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ea:	bc08      	pop	{r3}
 80026ec:	469e      	mov	lr, r3
 80026ee:	4770      	bx	lr

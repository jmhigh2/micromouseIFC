
C:\Users\Jonathan\Desktop\micromouse\mm747\Debug\mm747.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c28  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000708  08006df8  08006df8  00016df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007500  08007500  00017500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007504  08007504  00017504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  20000000  08007508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003364  20000080  08007588  00020080  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200033e4  08007588  000233e4  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  9 .debug_line   00008633  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00018155  00000000  00000000  000286e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002e44  00000000  00000000  00040838  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000f60  00000000  00000000  00043680  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001b58  00000000  00000000  000445e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000bc9c  00000000  00000000  00046138  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000053fb  00000000  00000000  00051dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  000571cf  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003334  00000000  00000000  00057250  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006de0 	.word	0x08006de0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08006de0 	.word	0x08006de0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80002c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80002c6:	e003      	b.n	80002d0 <LoopCopyDataInit>

080002c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80002c8:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80002ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80002cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80002ce:	3104      	adds	r1, #4

080002d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80002d0:	480b      	ldr	r0, [pc, #44]	; (8000300 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80002d2:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80002d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80002d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80002d8:	d3f6      	bcc.n	80002c8 <CopyDataInit>
  ldr  r2, =_sbss
 80002da:	4a0b      	ldr	r2, [pc, #44]	; (8000308 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80002dc:	e002      	b.n	80002e4 <LoopFillZerobss>

080002de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80002de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80002e0:	f842 3b04 	str.w	r3, [r2], #4

080002e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80002e4:	4b09      	ldr	r3, [pc, #36]	; (800030c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80002e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80002e8:	d3f9      	bcc.n	80002de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80002ea:	f006 f8f5 	bl	80064d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002ee:	f006 f919 	bl	8006524 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002f2:	f005 fc53 	bl	8005b9c <main>
  bx  lr    
 80002f6:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002f8:	20050000 	.word	0x20050000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80002fc:	08007508 	.word	0x08007508
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000300:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000304:	20000080 	.word	0x20000080
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000308:	20000080 	.word	0x20000080
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800030c:	200033e4 	.word	0x200033e4

08000310 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000310:	e7fe      	b.n	8000310 <ADC_IRQHandler>
	...

08000314 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000314:	4b08      	ldr	r3, [pc, #32]	; (8000338 <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000316:	b510      	push	{r4, lr}
 8000318:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 800031a:	6818      	ldr	r0, [r3, #0]
 800031c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000320:	fbb0 f0f3 	udiv	r0, r0, r3
 8000324:	f000 fac2 	bl	80008ac <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000328:	2200      	movs	r2, #0
 800032a:	4621      	mov	r1, r4
 800032c:	f04f 30ff 	mov.w	r0, #4294967295
 8000330:	f000 fa78 	bl	8000824 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000334:	2000      	movs	r0, #0
 8000336:	bd10      	pop	{r4, pc}
 8000338:	20000018 	.word	0x20000018

0800033c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800033c:	b508      	push	{r3, lr}
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800033e:	2003      	movs	r0, #3
 8000340:	f000 fa5e 	bl	8000800 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000344:	2000      	movs	r0, #0
 8000346:	f7ff ffe5 	bl	8000314 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800034a:	f005 feee 	bl	800612a <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 800034e:	2000      	movs	r0, #0
 8000350:	bd08      	pop	{r3, pc}
	...

08000354 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000354:	4a02      	ldr	r2, [pc, #8]	; (8000360 <HAL_IncTick+0xc>)
 8000356:	6813      	ldr	r3, [r2, #0]
 8000358:	3301      	adds	r3, #1
 800035a:	6013      	str	r3, [r2, #0]
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	20002490 	.word	0x20002490

08000364 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000364:	4b01      	ldr	r3, [pc, #4]	; (800036c <HAL_GetTick+0x8>)
 8000366:	6818      	ldr	r0, [r3, #0]
}
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	20002490 	.word	0x20002490

08000370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000370:	b513      	push	{r0, r1, r4, lr}
 8000372:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8000374:	f7ff fff6 	bl	8000364 <HAL_GetTick>
 8000378:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800037a:	f7ff fff3 	bl	8000364 <HAL_GetTick>
 800037e:	9b01      	ldr	r3, [sp, #4]
 8000380:	1b00      	subs	r0, r0, r4
 8000382:	4298      	cmp	r0, r3
 8000384:	d3f9      	bcc.n	800037a <HAL_Delay+0xa>
  {
  }
}
 8000386:	b002      	add	sp, #8
 8000388:	bd10      	pop	{r4, pc}
	...

0800038c <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800038c:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800038e:	4604      	mov	r4, r0
 8000390:	2800      	cmp	r0, #0
 8000392:	f000 809e 	beq.w	80004d2 <HAL_ADC_Init+0x146>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000396:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000398:	b923      	cbnz	r3, 80003a4 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800039a:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800039c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80003a0:	f005 fef4 	bl	800618c <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80003a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80003a6:	06db      	lsls	r3, r3, #27
 80003a8:	f100 808e 	bmi.w	80004c8 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80003ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80003ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80003b2:	f023 0302 	bic.w	r3, r3, #2
 80003b6:	f043 0302 	orr.w	r3, r3, #2
 80003ba:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80003bc:	4b46      	ldr	r3, [pc, #280]	; (80004d8 <HAL_ADC_Init+0x14c>)
 80003be:	685a      	ldr	r2, [r3, #4]
 80003c0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80003c4:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80003c6:	6859      	ldr	r1, [r3, #4]
 80003c8:	6862      	ldr	r2, [r4, #4]
 80003ca:	430a      	orrs	r2, r1
 80003cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80003ce:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80003d0:	6921      	ldr	r1, [r4, #16]
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80003d2:	685a      	ldr	r2, [r3, #4]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80003d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80003d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80003da:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80003dc:	685a      	ldr	r2, [r3, #4]
 80003de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80003e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80003e4:	685a      	ldr	r2, [r3, #4]
 80003e6:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80003ea:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80003ec:	68a2      	ldr	r2, [r4, #8]
 80003ee:	6859      	ldr	r1, [r3, #4]
 80003f0:	430a      	orrs	r2, r1
 80003f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80003f4:	689a      	ldr	r2, [r3, #8]
 80003f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80003fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80003fc:	68e2      	ldr	r2, [r4, #12]
 80003fe:	6899      	ldr	r1, [r3, #8]
 8000400:	430a      	orrs	r2, r1
 8000402:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000404:	4a35      	ldr	r2, [pc, #212]	; (80004dc <HAL_ADC_Init+0x150>)
 8000406:	4290      	cmp	r0, r2
 8000408:	d00e      	beq.n	8000428 <HAL_ADC_Init+0x9c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800040a:	6899      	ldr	r1, [r3, #8]
 800040c:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000410:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000412:	689a      	ldr	r2, [r3, #8]
 8000414:	4302      	orrs	r2, r0
 8000416:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000418:	689a      	ldr	r2, [r3, #8]
 800041a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800041e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000420:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000422:	6899      	ldr	r1, [r3, #8]
 8000424:	430a      	orrs	r2, r1
 8000426:	e006      	b.n	8000436 <HAL_ADC_Init+0xaa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000428:	689a      	ldr	r2, [r3, #8]
 800042a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800042e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000430:	689a      	ldr	r2, [r3, #8]
 8000432:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000436:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000438:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800043a:	69a1      	ldr	r1, [r4, #24]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800043c:	f022 0202 	bic.w	r2, r2, #2
 8000440:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000442:	689a      	ldr	r2, [r3, #8]
 8000444:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000448:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800044a:	6a22      	ldr	r2, [r4, #32]
 800044c:	b19a      	cbz	r2, 8000476 <HAL_ADC_Init+0xea>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800044e:	685a      	ldr	r2, [r3, #4]
 8000450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000454:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000456:	685a      	ldr	r2, [r3, #4]
 8000458:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800045c:	605a      	str	r2, [r3, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800045e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000462:	fa92 f2a2 	rbit	r2, r2
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000466:	fab2 f182 	clz	r1, r2
 800046a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800046c:	6858      	ldr	r0, [r3, #4]
 800046e:	3a01      	subs	r2, #1
 8000470:	408a      	lsls	r2, r1
 8000472:	4302      	orrs	r2, r0
 8000474:	e002      	b.n	800047c <HAL_ADC_Init+0xf0>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000476:	685a      	ldr	r2, [r3, #4]
 8000478:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800047c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC parameters */
    ADC_Init(hadc);
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800047e:	2000      	movs	r0, #0
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000482:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000486:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000488:	69e2      	ldr	r2, [r4, #28]
 800048a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800048c:	3a01      	subs	r2, #1
 800048e:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000492:	6b21      	ldr	r1, [r4, #48]	; 0x30
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000494:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000496:	689a      	ldr	r2, [r3, #8]
 8000498:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800049c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800049e:	689a      	ldr	r2, [r3, #8]
 80004a0:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80004a4:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80004a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80004a8:	689a      	ldr	r2, [r3, #8]
 80004aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80004ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80004b0:	689a      	ldr	r2, [r3, #8]
 80004b2:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80004b6:	609a      	str	r2, [r3, #8]
    
    /* Set ADC parameters */
    ADC_Init(hadc);
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80004b8:	6460      	str	r0, [r4, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80004ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80004bc:	f023 0303 	bic.w	r3, r3, #3
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	6423      	str	r3, [r4, #64]	; 0x40
 80004c6:	e000      	b.n	80004ca <HAL_ADC_Init+0x13e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80004c8:	2001      	movs	r0, #1
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80004ca:	2300      	movs	r3, #0
 80004cc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80004d0:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 80004d2:	2001      	movs	r0, #1
  /* Release Lock */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	bf00      	nop
 80004d8:	40012300 	.word	0x40012300
 80004dc:	0f000001 	.word	0x0f000001

080004e0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80004e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80004e2:	4613      	mov	r3, r2
  __IO uint32_t counter = 0;
 80004e4:	2200      	movs	r2, #0
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80004e6:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 80004e8:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80004ea:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80004ee:	2a01      	cmp	r2, #1
 80004f0:	d064      	beq.n	80005bc <HAL_ADC_Start_DMA+0xdc>
 80004f2:	2201      	movs	r2, #1
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80004f4:	6805      	ldr	r5, [r0, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80004f6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80004fa:	68aa      	ldr	r2, [r5, #8]
 80004fc:	07d2      	lsls	r2, r2, #31
 80004fe:	d503      	bpl.n	8000508 <HAL_ADC_Start_DMA+0x28>
      counter--;
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000500:	68aa      	ldr	r2, [r5, #8]
 8000502:	07d0      	lsls	r0, r2, #31
 8000504:	d413      	bmi.n	800052e <HAL_ADC_Start_DMA+0x4e>
 8000506:	e04e      	b.n	80005a6 <HAL_ADC_Start_DMA+0xc6>
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000508:	68aa      	ldr	r2, [r5, #8]
 800050a:	f042 0201 	orr.w	r2, r2, #1
 800050e:	60aa      	str	r2, [r5, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000510:	4a2c      	ldr	r2, [pc, #176]	; (80005c4 <HAL_ADC_Start_DMA+0xe4>)
 8000512:	6810      	ldr	r0, [r2, #0]
 8000514:	4a2c      	ldr	r2, [pc, #176]	; (80005c8 <HAL_ADC_Start_DMA+0xe8>)
 8000516:	fbb0 f0f2 	udiv	r0, r0, r2
 800051a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800051e:	9001      	str	r0, [sp, #4]
    while(counter != 0)
 8000520:	9a01      	ldr	r2, [sp, #4]
 8000522:	2a00      	cmp	r2, #0
 8000524:	d0ec      	beq.n	8000500 <HAL_ADC_Start_DMA+0x20>
    {
      counter--;
 8000526:	9a01      	ldr	r2, [sp, #4]
 8000528:	3a01      	subs	r2, #1
 800052a:	9201      	str	r2, [sp, #4]
 800052c:	e7f8      	b.n	8000520 <HAL_ADC_Start_DMA+0x40>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800052e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000530:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8000534:	f020 0001 	bic.w	r0, r0, #1
 8000538:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800053c:	6420      	str	r0, [r4, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800053e:	686a      	ldr	r2, [r5, #4]
 8000540:	0552      	lsls	r2, r2, #21
 8000542:	d505      	bpl.n	8000550 <HAL_ADC_Start_DMA+0x70>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000544:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000546:	f420 5040 	bic.w	r0, r0, #12288	; 0x3000
 800054a:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800054e:	6420      	str	r0, [r4, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000550:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000552:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000556:	d002      	beq.n	800055e <HAL_ADC_Start_DMA+0x7e>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000558:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800055a:	f022 0206 	bic.w	r2, r2, #6
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800055e:	6462      	str	r2, [r4, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000560:	2200      	movs	r2, #0

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000562:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000564:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000568:	4a18      	ldr	r2, [pc, #96]	; (80005cc <HAL_ADC_Start_DMA+0xec>)
 800056a:	63c2      	str	r2, [r0, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800056c:	4a18      	ldr	r2, [pc, #96]	; (80005d0 <HAL_ADC_Start_DMA+0xf0>)
 800056e:	6402      	str	r2, [r0, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000570:	4a18      	ldr	r2, [pc, #96]	; (80005d4 <HAL_ADC_Start_DMA+0xf4>)
 8000572:	64c2      	str	r2, [r0, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000574:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000578:	602a      	str	r2, [r5, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800057a:	686a      	ldr	r2, [r5, #4]
 800057c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000580:	606a      	str	r2, [r5, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000582:	68aa      	ldr	r2, [r5, #8]
 8000584:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000588:	60aa      	str	r2, [r5, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800058a:	460a      	mov	r2, r1
 800058c:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 8000590:	f000 fa3e 	bl	8000a10 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8000594:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <HAL_ADC_Start_DMA+0xf8>)
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	f013 0f1f 	tst.w	r3, #31
 800059c:	6823      	ldr	r3, [r4, #0]
 800059e:	d004      	beq.n	80005aa <HAL_ADC_Start_DMA+0xca>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80005a0:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <HAL_ADC_Start_DMA+0xfc>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d001      	beq.n	80005aa <HAL_ADC_Start_DMA+0xca>
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80005a6:	2000      	movs	r0, #0
 80005a8:	e009      	b.n	80005be <HAL_ADC_Start_DMA+0xde>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80005aa:	6898      	ldr	r0, [r3, #8]
 80005ac:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80005b0:	d1f9      	bne.n	80005a6 <HAL_ADC_Start_DMA+0xc6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80005b2:	689a      	ldr	r2, [r3, #8]
 80005b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	e000      	b.n	80005be <HAL_ADC_Start_DMA+0xde>
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80005bc:	2002      	movs	r0, #2
    }
  }
  
  /* Return function status */
  return HAL_OK;
}
 80005be:	b003      	add	sp, #12
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop
 80005c4:	20000018 	.word	0x20000018
 80005c8:	000f4240 	.word	0x000f4240
 80005cc:	0800063b 	.word	0x0800063b
 80005d0:	0800069d 	.word	0x0800069d
 80005d4:	080006a9 	.word	0x080006a9
 80005d8:	40012300 	.word	0x40012300
 80005dc:	40012000 	.word	0x40012000

080005e0 <HAL_ADC_Stop_DMA>:
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80005e0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80005e4:	2b01      	cmp	r3, #1
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80005e6:	b510      	push	{r4, lr}
 80005e8:	4604      	mov	r4, r0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80005ea:	d024      	beq.n	8000636 <HAL_ADC_Stop_DMA+0x56>
 80005ec:	2301      	movs	r3, #1
 80005ee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80005f2:	6803      	ldr	r3, [r0, #0]
 80005f4:	689a      	ldr	r2, [r3, #8]
 80005f6:	f022 0201 	bic.w	r2, r2, #1
 80005fa:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80005fc:	689a      	ldr	r2, [r3, #8]
 80005fe:	07d2      	lsls	r2, r2, #31
 8000600:	d414      	bmi.n	800062c <HAL_ADC_Stop_DMA+0x4c>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8000602:	689a      	ldr	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8000604:	6b80      	ldr	r0, [r0, #56]	; 0x38
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8000606:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800060a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800060c:	f000 fa3f 	bl	8000a8e <HAL_DMA_Abort>
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8000610:	6822      	ldr	r2, [r4, #0]
 8000612:	6853      	ldr	r3, [r2, #4]
 8000614:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000618:	6053      	str	r3, [r2, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800061a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800061c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000620:	f023 0301 	bic.w	r3, r3, #1
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6423      	str	r3, [r4, #64]	; 0x40
 800062a:	e000      	b.n	800062e <HAL_ADC_Stop_DMA+0x4e>
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800062c:	2000      	movs	r0, #0
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800062e:	2300      	movs	r3, #0
 8000630:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8000634:	bd10      	pop	{r4, pc}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000636:	2002      	movs	r0, #2
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
}
 8000638:	bd10      	pop	{r4, pc}

0800063a <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800063a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800063c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800063e:	f012 0f50 	tst.w	r2, #80	; 0x50
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000642:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000644:	d124      	bne.n	8000690 <ADC_DMAConvCplt+0x56>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000646:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800064c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	6891      	ldr	r1, [r2, #8]
 8000652:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8000656:	d117      	bne.n	8000688 <ADC_DMAConvCplt+0x4e>
 8000658:	6999      	ldr	r1, [r3, #24]
 800065a:	b9a9      	cbnz	r1, 8000688 <ADC_DMAConvCplt+0x4e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800065c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800065e:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 8000662:	d002      	beq.n	800066a <ADC_DMAConvCplt+0x30>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000664:	6891      	ldr	r1, [r2, #8]
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000666:	0549      	lsls	r1, r1, #21
 8000668:	d40e      	bmi.n	8000688 <ADC_DMAConvCplt+0x4e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800066a:	6851      	ldr	r1, [r2, #4]
 800066c:	f021 0120 	bic.w	r1, r1, #32
 8000670:	6051      	str	r1, [r2, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000672:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000674:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000678:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800067a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800067c:	04d2      	lsls	r2, r2, #19
 800067e:	d403      	bmi.n	8000688 <ADC_DMAConvCplt+0x4e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000680:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000682:	f042 0201 	orr.w	r2, r2, #1
 8000686:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 8000688:	4618      	mov	r0, r3
 800068a:	f004 f885 	bl	8004798 <HAL_ADC_ConvCpltCallback>
 800068e:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  }
}
 8000692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_ADC_ConvCpltCallback(hadc);
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000698:	4718      	bx	r3

0800069a <HAL_ADC_ConvHalfCpltCallback>:
 800069a:	4770      	bx	lr

0800069c <ADC_DMAHalfConvCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800069c:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* Conversion complete callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800069e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80006a0:	f7ff fffb 	bl	800069a <HAL_ADC_ConvHalfCpltCallback>
 80006a4:	bd08      	pop	{r3, pc}

080006a6 <HAL_ADC_ErrorCallback>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80006a6:	4770      	bx	lr

080006a8 <ADC_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80006a8:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80006aa:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80006ac:	2340      	movs	r3, #64	; 0x40
 80006ae:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80006b0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80006b2:	f043 0304 	orr.w	r3, r3, #4
 80006b6:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_ADC_ErrorCallback(hadc); 
 80006b8:	f7ff fff5 	bl	80006a6 <HAL_ADC_ErrorCallback>
 80006bc:	bd08      	pop	{r3, pc}
	...

080006c0 <HAL_ADC_ConfigChannel>:
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  __IO uint32_t counter = 0;
 80006c0:	2300      	movs	r3, #0
  *         the configuration information for the specified ADC.
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80006c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 80006c4:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006c6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d070      	beq.n	80007b0 <HAL_ADC_ConfigChannel+0xf0>
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 80006ce:	680d      	ldr	r5, [r1, #0]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006d0:	2301      	movs	r3, #1
 80006d2:	6804      	ldr	r4, [r0, #0]
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 80006d4:	2d09      	cmp	r5, #9
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006d6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80006da:	b2ae      	uxth	r6, r5
 80006dc:	688f      	ldr	r7, [r1, #8]
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 80006de:	d917      	bls.n	8000710 <HAL_ADC_ConfigChannel+0x50>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80006e0:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 80006e4:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 80006e8:	f1a2 031e 	sub.w	r3, r2, #30
 80006ec:	2207      	movs	r2, #7
 80006ee:	409a      	lsls	r2, r3
 80006f0:	ea2e 0202 	bic.w	r2, lr, r2
 80006f4:	60e2      	str	r2, [r4, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80006f6:	4a3d      	ldr	r2, [pc, #244]	; (80007ec <HAL_ADC_ConfigChannel+0x12c>)
 80006f8:	4295      	cmp	r5, r2
 80006fa:	d103      	bne.n	8000704 <HAL_ADC_ConfigChannel+0x44>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80006fc:	68e3      	ldr	r3, [r4, #12]
 80006fe:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 8000702:	e003      	b.n	800070c <HAL_ADC_ConfigChannel+0x4c>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000704:	68e2      	ldr	r2, [r4, #12]
 8000706:	fa07 f303 	lsl.w	r3, r7, r3
 800070a:	4313      	orrs	r3, r2
 800070c:	60e3      	str	r3, [r4, #12]
 800070e:	e00e      	b.n	800072e <HAL_ADC_ConfigChannel+0x6e>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000710:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000714:	f04f 0e07 	mov.w	lr, #7
 8000718:	6922      	ldr	r2, [r4, #16]
 800071a:	fa0e fe03 	lsl.w	lr, lr, r3
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800071e:	fa07 f303 	lsl.w	r3, r7, r3
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000722:	ea22 020e 	bic.w	r2, r2, lr
 8000726:	6122      	str	r2, [r4, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000728:	6922      	ldr	r2, [r4, #16]
 800072a:	4313      	orrs	r3, r2
 800072c:	6123      	str	r3, [r4, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800072e:	684b      	ldr	r3, [r1, #4]
 8000730:	2b06      	cmp	r3, #6
 8000732:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8000736:	d80d      	bhi.n	8000754 <HAL_ADC_ConfigChannel+0x94>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000738:	4413      	add	r3, r2
 800073a:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800073c:	1f59      	subs	r1, r3, #5
 800073e:	231f      	movs	r3, #31
 8000740:	408b      	lsls	r3, r1
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000742:	fa06 f101 	lsl.w	r1, r6, r1
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000746:	ea27 0303 	bic.w	r3, r7, r3
 800074a:	6363      	str	r3, [r4, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800074c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800074e:	4311      	orrs	r1, r2
 8000750:	6361      	str	r1, [r4, #52]	; 0x34
 8000752:	e01d      	b.n	8000790 <HAL_ADC_ConfigChannel+0xd0>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000754:	2b0c      	cmp	r3, #12
 8000756:	d80e      	bhi.n	8000776 <HAL_ADC_ConfigChannel+0xb6>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000758:	4413      	add	r3, r2
 800075a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800075c:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000760:	231f      	movs	r3, #31
 8000762:	4093      	lsls	r3, r2
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000764:	fa06 f202 	lsl.w	r2, r6, r2
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000768:	ea21 0303 	bic.w	r3, r1, r3
 800076c:	6323      	str	r3, [r4, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800076e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000770:	431a      	orrs	r2, r3
 8000772:	6322      	str	r2, [r4, #48]	; 0x30
 8000774:	e00c      	b.n	8000790 <HAL_ADC_ConfigChannel+0xd0>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000776:	4413      	add	r3, r2
 8000778:	221f      	movs	r2, #31
 800077a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800077c:	3b41      	subs	r3, #65	; 0x41
 800077e:	409a      	lsls	r2, r3
 8000780:	ea27 0202 	bic.w	r2, r7, r2
 8000784:	62e2      	str	r2, [r4, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000786:	fa06 f203 	lsl.w	r2, r6, r3
 800078a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800078c:	430a      	orrs	r2, r1
 800078e:	62e2      	str	r2, [r4, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000790:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <HAL_ADC_ConfigChannel+0x130>)
 8000792:	429c      	cmp	r4, r3
 8000794:	d004      	beq.n	80007a0 <HAL_ADC_ConfigChannel+0xe0>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000796:	2300      	movs	r3, #0
 8000798:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800079c:	4618      	mov	r0, r3
 800079e:	e023      	b.n	80007e8 <HAL_ADC_ConfigChannel+0x128>
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80007a0:	2d12      	cmp	r5, #18
 80007a2:	d107      	bne.n	80007b4 <HAL_ADC_ConfigChannel+0xf4>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80007a4:	4a13      	ldr	r2, [pc, #76]	; (80007f4 <HAL_ADC_ConfigChannel+0x134>)
 80007a6:	6853      	ldr	r3, [r2, #4]
 80007a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007ac:	6053      	str	r3, [r2, #4]
 80007ae:	e7f2      	b.n	8000796 <HAL_ADC_ConfigChannel+0xd6>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80007b0:	2002      	movs	r0, #2
 80007b2:	e019      	b.n	80007e8 <HAL_ADC_ConfigChannel+0x128>
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80007b4:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <HAL_ADC_ConfigChannel+0x12c>)
 80007b6:	429d      	cmp	r5, r3
 80007b8:	d001      	beq.n	80007be <HAL_ADC_ConfigChannel+0xfe>
 80007ba:	2d11      	cmp	r5, #17
 80007bc:	d1eb      	bne.n	8000796 <HAL_ADC_ConfigChannel+0xd6>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80007be:	490d      	ldr	r1, [pc, #52]	; (80007f4 <HAL_ADC_ConfigChannel+0x134>)

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80007c0:	429d      	cmp	r5, r3
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80007c2:	684a      	ldr	r2, [r1, #4]
 80007c4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80007c8:	604a      	str	r2, [r1, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80007ca:	d1e4      	bne.n	8000796 <HAL_ADC_ConfigChannel+0xd6>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <HAL_ADC_ConfigChannel+0x138>)
 80007ce:	4a0b      	ldr	r2, [pc, #44]	; (80007fc <HAL_ADC_ConfigChannel+0x13c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80007d6:	230a      	movs	r3, #10
 80007d8:	4353      	muls	r3, r2
      while(counter != 0)
      {
        counter--;
 80007da:	9301      	str	r3, [sp, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
      while(counter != 0)
 80007dc:	9b01      	ldr	r3, [sp, #4]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d0d9      	beq.n	8000796 <HAL_ADC_ConfigChannel+0xd6>
      {
        counter--;
 80007e2:	9b01      	ldr	r3, [sp, #4]
 80007e4:	3b01      	subs	r3, #1
 80007e6:	e7f8      	b.n	80007da <HAL_ADC_ConfigChannel+0x11a>
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return HAL_OK;
}
 80007e8:	b003      	add	sp, #12
 80007ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ec:	10000012 	.word	0x10000012
 80007f0:	40012000 	.word	0x40012000
 80007f4:	40012300 	.word	0x40012300
 80007f8:	20000018 	.word	0x20000018
 80007fc:	000f4240 	.word	0x000f4240

08000800 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000800:	4a07      	ldr	r2, [pc, #28]	; (8000820 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000802:	0200      	lsls	r0, r0, #8
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000804:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000806:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800080a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800080e:	041b      	lsls	r3, r3, #16
 8000810:	0c1b      	lsrs	r3, r3, #16
 8000812:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800081a:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800081c:	60d3      	str	r3, [r2, #12]
 800081e:	4770      	bx	lr
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000824:	4b19      	ldr	r3, [pc, #100]	; (800088c <HAL_NVIC_SetPriority+0x68>)
 8000826:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000828:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800082c:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800082e:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000832:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000834:	2c04      	cmp	r4, #4
 8000836:	bf28      	it	cs
 8000838:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800083a:	2d06      	cmp	r5, #6

  return (
 800083c:	f04f 0501 	mov.w	r5, #1
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000840:	bf8c      	ite	hi
 8000842:	3b03      	subhi	r3, #3
 8000844:	2300      	movls	r3, #0

  return (
 8000846:	fa05 f404 	lsl.w	r4, r5, r4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800084a:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800084c:	f104 34ff 	add.w	r4, r4, #4294967295
 8000850:	ea04 0401 	and.w	r4, r4, r1
 8000854:	fa04 f403 	lsl.w	r4, r4, r3
 8000858:	fa05 f303 	lsl.w	r3, r5, r3
 800085c:	f103 33ff 	add.w	r3, r3, #4294967295
 8000860:	ea02 0203 	and.w	r2, r2, r3
 8000864:	ea42 0204 	orr.w	r2, r2, r4
 8000868:	ea4f 1202 	mov.w	r2, r2, lsl #4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800086c:	da05      	bge.n	800087a <HAL_NVIC_SetPriority+0x56>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800086e:	f000 000f 	and.w	r0, r0, #15
 8000872:	b2d2      	uxtb	r2, r2
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_NVIC_SetPriority+0x6c>)
 8000876:	541a      	strb	r2, [r3, r0]
 8000878:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800087a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800087e:	b2d2      	uxtb	r2, r2
 8000880:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000884:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000888:	bd30      	pop	{r4, r5, pc}
 800088a:	bf00      	nop
 800088c:	e000ed00 	.word	0xe000ed00
 8000890:	e000ed14 	.word	0xe000ed14

08000894 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000894:	0942      	lsrs	r2, r0, #5
 8000896:	2301      	movs	r3, #1
 8000898:	f000 001f 	and.w	r0, r0, #31
 800089c:	fa03 f000 	lsl.w	r0, r3, r0
 80008a0:	4b01      	ldr	r3, [pc, #4]	; (80008a8 <HAL_NVIC_EnableIRQ+0x14>)
 80008a2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80008a6:	4770      	bx	lr
 80008a8:	e000e100 	.word	0xe000e100

080008ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008ac:	3801      	subs	r0, #1
 80008ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80008b2:	d20a      	bcs.n	80008ca <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b6:	21f0      	movs	r1, #240	; 0xf0
 80008b8:	4a06      	ldr	r2, [pc, #24]	; (80008d4 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ba:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008bc:	2000      	movs	r0, #0
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008be:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008c2:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008c4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000e010 	.word	0xe000e010
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80008d8:	4b04      	ldr	r3, [pc, #16]	; (80008ec <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80008da:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	bf0c      	ite	eq
 80008e0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80008e4:	f022 0204 	bicne.w	r2, r2, #4
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	4770      	bx	lr
 80008ec:	e000e010 	.word	0xe000e010

080008f0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80008f0:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80008f2:	f005 fc19 	bl	8006128 <HAL_SYSTICK_Callback>
 80008f6:	bd08      	pop	{r3, pc}

080008f8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80008f8:	6803      	ldr	r3, [r0, #0]
 80008fa:	2118      	movs	r1, #24
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000902:	3a10      	subs	r2, #16
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000904:	f023 0303 	bic.w	r3, r3, #3
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000908:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800090c:	4904      	ldr	r1, [pc, #16]	; (8000920 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 800090e:	2a03      	cmp	r2, #3
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000910:	5c89      	ldrb	r1, [r1, r2]
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000912:	bf88      	it	hi
 8000914:	3304      	addhi	r3, #4
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000916:	65c1      	str	r1, [r0, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000918:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 800091a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	08006e1c 	.word	0x08006e1c

08000924 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000924:	b570      	push	{r4, r5, r6, lr}
 8000926:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8000928:	f7ff fd1c 	bl	8000364 <HAL_GetTick>
 800092c:	4605      	mov	r5, r0
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800092e:	2c00      	cmp	r4, #0
 8000930:	d064      	beq.n	80009fc <HAL_DMA_Init+0xd8>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000932:	2300      	movs	r3, #0

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000934:	6822      	ldr	r2, [r4, #0]
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000936:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800093a:	2302      	movs	r3, #2
 800093c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000940:	6813      	ldr	r3, [r2, #0]
 8000942:	f023 0301 	bic.w	r3, r3, #1
 8000946:	6013      	str	r3, [r2, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000948:	6821      	ldr	r1, [r4, #0]
 800094a:	680b      	ldr	r3, [r1, #0]
 800094c:	07d8      	lsls	r0, r3, #31
 800094e:	d508      	bpl.n	8000962 <HAL_DMA_Init+0x3e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000950:	f7ff fd08 	bl	8000364 <HAL_GetTick>
 8000954:	1b40      	subs	r0, r0, r5
 8000956:	2805      	cmp	r0, #5
 8000958:	d9f6      	bls.n	8000948 <HAL_DMA_Init+0x24>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800095a:	2320      	movs	r3, #32
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800095c:	2003      	movs	r0, #3
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800095e:	6563      	str	r3, [r4, #84]	; 0x54
 8000960:	e051      	b.n	8000a06 <HAL_DMA_Init+0xe2>
      return HAL_TIMEOUT;
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000962:	680b      	ldr	r3, [r1, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000964:	4a29      	ldr	r2, [pc, #164]	; (8000a0c <HAL_DMA_Init+0xe8>)
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000966:	6865      	ldr	r5, [r4, #4]
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000968:	401a      	ands	r2, r3
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800096a:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800096c:	69a0      	ldr	r0, [r4, #24]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800096e:	431d      	orrs	r5, r3
 8000970:	68e3      	ldr	r3, [r4, #12]
 8000972:	431d      	orrs	r5, r3
 8000974:	6923      	ldr	r3, [r4, #16]
 8000976:	431d      	orrs	r5, r3
 8000978:	6963      	ldr	r3, [r4, #20]
 800097a:	432b      	orrs	r3, r5
 800097c:	69e5      	ldr	r5, [r4, #28]
 800097e:	4303      	orrs	r3, r0
 8000980:	432b      	orrs	r3, r5
 8000982:	6a25      	ldr	r5, [r4, #32]
 8000984:	432b      	orrs	r3, r5
 8000986:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000988:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800098a:	2a04      	cmp	r2, #4
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800098c:	bf01      	itttt	eq
 800098e:	6b25      	ldreq	r5, [r4, #48]	; 0x30
 8000990:	6ae6      	ldreq	r6, [r4, #44]	; 0x2c
 8000992:	4335      	orreq	r5, r6
 8000994:	432b      	orreq	r3, r5

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000996:	2a04      	cmp	r2, #4
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000998:	600b      	str	r3, [r1, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800099a:	694b      	ldr	r3, [r1, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800099c:	f023 0307 	bic.w	r3, r3, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80009a0:	ea43 0302 	orr.w	r3, r3, r2

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80009a4:	d11c      	bne.n	80009e0 <HAL_DMA_Init+0xbc>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80009a6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80009a8:	4313      	orrs	r3, r2
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80009aa:	b920      	cbnz	r0, 80009b6 <HAL_DMA_Init+0x92>
  {
    switch (tmp)
 80009ac:	2a01      	cmp	r2, #1
 80009ae:	d00b      	beq.n	80009c8 <HAL_DMA_Init+0xa4>
 80009b0:	d313      	bcc.n	80009da <HAL_DMA_Init+0xb6>
 80009b2:	2a02      	cmp	r2, #2
 80009b4:	e010      	b.n	80009d8 <HAL_DMA_Init+0xb4>
        break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80009b6:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80009ba:	d10a      	bne.n	80009d2 <HAL_DMA_Init+0xae>
  {
    switch (tmp)
 80009bc:	2a03      	cmp	r2, #3
 80009be:	d80f      	bhi.n	80009e0 <HAL_DMA_Init+0xbc>
 80009c0:	e8df f002 	tbb	[pc, r2]
 80009c4:	021e0b1e 	.word	0x021e0b1e
        break;
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80009c8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80009ca:	f1b2 7fc0 	cmp.w	r2, #25165824	; 0x1800000
 80009ce:	d107      	bne.n	80009e0 <HAL_DMA_Init+0xbc>
 80009d0:	e016      	b.n	8000a00 <HAL_DMA_Init+0xdc>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80009d2:	2a02      	cmp	r2, #2
 80009d4:	d914      	bls.n	8000a00 <HAL_DMA_Init+0xdc>
 80009d6:	2a03      	cmp	r2, #3
 80009d8:	d102      	bne.n	80009e0 <HAL_DMA_Init+0xbc>
      case DMA_FIFO_THRESHOLD_HALFFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80009da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80009dc:	01d2      	lsls	r2, r2, #7
 80009de:	d40f      	bmi.n	8000a00 <HAL_DMA_Init+0xdc>
      return HAL_ERROR; 
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80009e0:	614b      	str	r3, [r1, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80009e2:	4620      	mov	r0, r4
 80009e4:	f7ff ff88 	bl	80008f8 <DMA_CalcBaseAndBitshift>
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009e8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80009ea:	233f      	movs	r3, #63	; 0x3f
 80009ec:	4093      	lsls	r3, r2
 80009ee:	6083      	str	r3, [r0, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009f0:	2000      	movs	r0, #0
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009f2:	2301      	movs	r3, #1
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009f4:	6560      	str	r0, [r4, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009f6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 80009fa:	bd70      	pop	{r4, r5, r6, pc}
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 80009fc:	2001      	movs	r0, #1
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
    tmp |= hdma->Init.FIFOThreshold;
    
    if (DMA_CheckFifoParam(hdma) != HAL_OK)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000a00:	2340      	movs	r3, #64	; 0x40
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000a02:	2001      	movs	r0, #1
    tmp |= hdma->Init.FIFOThreshold;
    
    if (DMA_CheckFifoParam(hdma) != HAL_OK)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000a04:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000a06:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 8000a0a:	bd70      	pop	{r4, r5, r6, pc}
 8000a0c:	f010803f 	.word	0xf010803f

08000a10 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a10:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a12:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000a16:	2c01      	cmp	r4, #1
 8000a18:	d037      	beq.n	8000a8a <HAL_DMA_Start_IT+0x7a>
 8000a1a:	2401      	movs	r4, #1
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a1c:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8000a1e:	2500      	movs	r5, #0
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a20:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a24:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8000a28:	2c01      	cmp	r4, #1
 8000a2a:	f04f 0402 	mov.w	r4, #2
 8000a2e:	d128      	bne.n	8000a82 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a30:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000a34:	6804      	ldr	r4, [r0, #0]
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a36:	6545      	str	r5, [r0, #84]	; 0x54
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000a38:	6825      	ldr	r5, [r4, #0]
 8000a3a:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000a3e:	6025      	str	r5, [r4, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000a40:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000a42:	6883      	ldr	r3, [r0, #8]
 8000a44:	2b40      	cmp	r3, #64	; 0x40
 8000a46:	d102      	bne.n	8000a4e <HAL_DMA_Start_IT+0x3e>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000a48:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000a4a:	60e1      	str	r1, [r4, #12]
 8000a4c:	e001      	b.n	8000a52 <HAL_DMA_Start_IT+0x42>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8000a4e:	60a1      	str	r1, [r4, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000a50:	60e2      	str	r2, [r4, #12]
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a52:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000a54:	233f      	movs	r3, #63	; 0x3f
 8000a56:	4093      	lsls	r3, r2
 8000a58:	60b3      	str	r3, [r6, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000a5a:	6823      	ldr	r3, [r4, #0]
 8000a5c:	f043 0316 	orr.w	r3, r3, #22
 8000a60:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000a62:	6963      	ldr	r3, [r4, #20]
 8000a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a68:	6163      	str	r3, [r4, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000a6a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000a6c:	b11b      	cbz	r3, 8000a76 <HAL_DMA_Start_IT+0x66>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000a6e:	6823      	ldr	r3, [r4, #0]
 8000a70:	f043 0308 	orr.w	r3, r3, #8
 8000a74:	6023      	str	r3, [r4, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000a76:	6823      	ldr	r3, [r4, #0]
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;
 8000a78:	2000      	movs	r0, #0
    {
      hdma->Instance->CR  |= DMA_IT_HT;
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	6023      	str	r3, [r4, #0]
 8000a80:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000a82:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000a86:	4620      	mov	r0, r4
 8000a88:	bd70      	pop	{r4, r5, r6, pc}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a8a:	2002      	movs	r0, #2
    /* Return error status */
    status = HAL_BUSY;
  }
  
  return status;
}
 8000a8c:	bd70      	pop	{r4, r5, r6, pc}

08000a8e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a8e:	b570      	push	{r4, r5, r6, lr}
 8000a90:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a92:	6d85      	ldr	r5, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8000a94:	f7ff fc66 	bl	8000364 <HAL_GetTick>
 8000a98:	4606      	mov	r6, r0
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a9a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8000a9e:	2b02      	cmp	r3, #2
 8000aa0:	d006      	beq.n	8000ab0 <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000aa2:	2380      	movs	r3, #128	; 0x80
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    return HAL_ERROR;
 8000aa4:	2001      	movs	r0, #1
  
  uint32_t tickstart = HAL_GetTick();
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000aa6:	6563      	str	r3, [r4, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    return HAL_ERROR;
 8000aae:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ab0:	6823      	ldr	r3, [r4, #0]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	f022 0216 	bic.w	r2, r2, #22
 8000ab8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000aba:	695a      	ldr	r2, [r3, #20]
 8000abc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ac0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ac2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000ac4:	b90a      	cbnz	r2, 8000aca <HAL_DMA_Abort+0x3c>
 8000ac6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000ac8:	b11a      	cbz	r2, 8000ad2 <HAL_DMA_Abort+0x44>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	f022 0208 	bic.w	r2, r2, #8
 8000ad0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	f022 0201 	bic.w	r2, r2, #1
 8000ad8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ada:	6823      	ldr	r3, [r4, #0]
 8000adc:	6818      	ldr	r0, [r3, #0]
 8000ade:	f010 0001 	ands.w	r0, r0, #1
 8000ae2:	d00d      	beq.n	8000b00 <HAL_DMA_Abort+0x72>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ae4:	f7ff fc3e 	bl	8000364 <HAL_GetTick>
 8000ae8:	1b80      	subs	r0, r0, r6
 8000aea:	2805      	cmp	r0, #5
 8000aec:	d9f5      	bls.n	8000ada <HAL_DMA_Abort+0x4c>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000aee:	2320      	movs	r3, #32
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000af0:	2003      	movs	r0, #3
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000af2:	6563      	str	r3, [r4, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000af4:	2300      	movs	r3, #0
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000af6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000afa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
        
        return HAL_TIMEOUT;
 8000afe:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b00:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000b02:	233f      	movs	r3, #63	; 0x3f
 8000b04:	4093      	lsls	r3, r2
 8000b06:	60ab      	str	r3, [r5, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000b08:	2301      	movs	r3, #1
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b0a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000b0e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  }
  return HAL_OK;
}
 8000b12:	bd70      	pop	{r4, r5, r6, pc}

08000b14 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b14:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	d003      	beq.n	8000b24 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b1c:	2380      	movs	r3, #128	; 0x80
 8000b1e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000b20:	2001      	movs	r0, #1
 8000b22:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000b24:	6802      	ldr	r2, [r0, #0]
    return HAL_ERROR;
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000b26:	2305      	movs	r3, #5
 8000b28:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
  }

  return HAL_OK;
 8000b2c:	2000      	movs	r0, #0
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000b2e:	6813      	ldr	r3, [r2, #0]
 8000b30:	f023 0301 	bic.w	r3, r3, #1
 8000b34:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
}
 8000b36:	4770      	bx	lr

08000b38 <HAL_DMA_IRQHandler>:
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8000b38:	2300      	movs	r3, #0
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8000b3c:	9301      	str	r3, [sp, #4]
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b3e:	4604      	mov	r4, r0
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8000b40:	4b59      	ldr	r3, [pc, #356]	; (8000ca8 <HAL_DMA_IRQHandler+0x170>)

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000b42:	6d85      	ldr	r5, [r0, #88]	; 0x58
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8000b44:	681f      	ldr	r7, [r3, #0]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b46:	2308      	movs	r3, #8
 8000b48:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  uint32_t timeout = SystemCoreClock / 9600;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;
 8000b4a:	682e      	ldr	r6, [r5, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b4c:	4093      	lsls	r3, r2
 8000b4e:	421e      	tst	r6, r3
 8000b50:	d00c      	beq.n	8000b6c <HAL_DMA_IRQHandler+0x34>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000b52:	6801      	ldr	r1, [r0, #0]
 8000b54:	6808      	ldr	r0, [r1, #0]
 8000b56:	0740      	lsls	r0, r0, #29
 8000b58:	d508      	bpl.n	8000b6c <HAL_DMA_IRQHandler+0x34>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000b5a:	6808      	ldr	r0, [r1, #0]
 8000b5c:	f020 0004 	bic.w	r0, r0, #4
 8000b60:	6008      	str	r0, [r1, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000b62:	60ab      	str	r3, [r5, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000b64:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b66:	f043 0301 	orr.w	r3, r3, #1
 8000b6a:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b6c:	4b4f      	ldr	r3, [pc, #316]	; (8000cac <HAL_DMA_IRQHandler+0x174>)
 8000b6e:	4093      	lsls	r3, r2
 8000b70:	421e      	tst	r6, r3
 8000b72:	d008      	beq.n	8000b86 <HAL_DMA_IRQHandler+0x4e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000b74:	6821      	ldr	r1, [r4, #0]
 8000b76:	6949      	ldr	r1, [r1, #20]
 8000b78:	0609      	lsls	r1, r1, #24
 8000b7a:	d504      	bpl.n	8000b86 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000b7c:	60ab      	str	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000b7e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b86:	4b4a      	ldr	r3, [pc, #296]	; (8000cb0 <HAL_DMA_IRQHandler+0x178>)
 8000b88:	4093      	lsls	r3, r2
 8000b8a:	421e      	tst	r6, r3
 8000b8c:	d008      	beq.n	8000ba0 <HAL_DMA_IRQHandler+0x68>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000b8e:	6821      	ldr	r1, [r4, #0]
 8000b90:	6809      	ldr	r1, [r1, #0]
 8000b92:	0788      	lsls	r0, r1, #30
 8000b94:	d504      	bpl.n	8000ba0 <HAL_DMA_IRQHandler+0x68>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000b96:	60ab      	str	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000b98:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b9a:	f043 0304 	orr.w	r3, r3, #4
 8000b9e:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000ba0:	2310      	movs	r3, #16
 8000ba2:	fa03 f202 	lsl.w	r2, r3, r2
 8000ba6:	4216      	tst	r6, r2
 8000ba8:	d017      	beq.n	8000bda <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000baa:	6823      	ldr	r3, [r4, #0]
 8000bac:	6819      	ldr	r1, [r3, #0]
 8000bae:	0709      	lsls	r1, r1, #28
 8000bb0:	d513      	bpl.n	8000bda <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000bb2:	60aa      	str	r2, [r5, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	0350      	lsls	r0, r2, #13
 8000bb8:	d504      	bpl.n	8000bc4 <HAL_DMA_IRQHandler+0x8c>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	0319      	lsls	r1, r3, #12
 8000bbe:	d508      	bpl.n	8000bd2 <HAL_DMA_IRQHandler+0x9a>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000bc0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000bc2:	e007      	b.n	8000bd4 <HAL_DMA_IRQHandler+0x9c>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	05d2      	lsls	r2, r2, #23
 8000bc8:	d403      	bmi.n	8000bd2 <HAL_DMA_IRQHandler+0x9a>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	f022 0208 	bic.w	r2, r2, #8
 8000bd0:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000bd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000bd4:	b10b      	cbz	r3, 8000bda <HAL_DMA_IRQHandler+0xa2>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000bd6:	4620      	mov	r0, r4
 8000bd8:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000bda:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000bdc:	2220      	movs	r2, #32
 8000bde:	408a      	lsls	r2, r1
 8000be0:	4216      	tst	r6, r2
 8000be2:	d03b      	beq.n	8000c5c <HAL_DMA_IRQHandler+0x124>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000be4:	6823      	ldr	r3, [r4, #0]
 8000be6:	6818      	ldr	r0, [r3, #0]
 8000be8:	06c6      	lsls	r6, r0, #27
 8000bea:	d537      	bpl.n	8000c5c <HAL_DMA_IRQHandler+0x124>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000bec:	60aa      	str	r2, [r5, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000bee:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000bf2:	2a05      	cmp	r2, #5
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000bf4:	681a      	ldr	r2, [r3, #0]
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000bf6:	d119      	bne.n	8000c2c <HAL_DMA_IRQHandler+0xf4>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000bf8:	f022 0216 	bic.w	r2, r2, #22
 8000bfc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000bfe:	695a      	ldr	r2, [r3, #20]
 8000c00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c06:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000c08:	b90a      	cbnz	r2, 8000c0e <HAL_DMA_IRQHandler+0xd6>
 8000c0a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000c0c:	b11a      	cbz	r2, 8000c16 <HAL_DMA_IRQHandler+0xde>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	f022 0208 	bic.w	r2, r2, #8
 8000c14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c16:	233f      	movs	r3, #63	; 0x3f
 8000c18:	408b      	lsls	r3, r1
 8000c1a:	60ab      	str	r3, [r5, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
         
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000c22:	2301      	movs	r3, #1
 8000c24:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	
        if(hdma->XferAbortCallback != NULL)
 8000c28:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000c2a:	e037      	b.n	8000c9c <HAL_DMA_IRQHandler+0x164>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }
      
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c2c:	0350      	lsls	r0, r2, #13
 8000c2e:	d504      	bpl.n	8000c3a <HAL_DMA_IRQHandler+0x102>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	0319      	lsls	r1, r3, #12
 8000c34:	d40e      	bmi.n	8000c54 <HAL_DMA_IRQHandler+0x11c>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000c36:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c38:	e00d      	b.n	8000c56 <HAL_DMA_IRQHandler+0x11e>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000c40:	d108      	bne.n	8000c54 <HAL_DMA_IRQHandler+0x11c>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000c42:	6819      	ldr	r1, [r3, #0]
 8000c44:	f021 0110 	bic.w	r1, r1, #16
 8000c48:	6019      	str	r1, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
          
          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c4a:	2301      	movs	r3, #1
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000c4c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          
          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c50:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        }
        
        if(hdma->XferCpltCallback != NULL)
 8000c54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000c56:	b10b      	cbz	r3, 8000c5c <HAL_DMA_IRQHandler+0x124>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000c58:	4620      	mov	r0, r4
 8000c5a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000c5c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000c5e:	b303      	cbz	r3, 8000ca2 <HAL_DMA_IRQHandler+0x16a>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000c60:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000c62:	07da      	lsls	r2, r3, #31
 8000c64:	d519      	bpl.n	8000c9a <HAL_DMA_IRQHandler+0x162>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000c66:	2305      	movs	r3, #5
      
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000c68:	6822      	ldr	r2, [r4, #0]
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000c6a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000c6e:	6813      	ldr	r3, [r2, #0]
 8000c70:	f023 0301 	bic.w	r3, r3, #1
 8000c74:	6013      	str	r3, [r2, #0]
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8000c76:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000c7a:	fbb7 f7f3 	udiv	r7, r7, r3
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
      
      do
      {
        if (++count > timeout)
 8000c7e:	9b01      	ldr	r3, [sp, #4]
 8000c80:	3301      	adds	r3, #1
 8000c82:	429f      	cmp	r7, r3
 8000c84:	9301      	str	r3, [sp, #4]
 8000c86:	d302      	bcc.n	8000c8e <HAL_DMA_IRQHandler+0x156>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000c88:	6813      	ldr	r3, [r2, #0]
 8000c8a:	07db      	lsls	r3, r3, #31
 8000c8c:	d4f7      	bmi.n	8000c7e <HAL_DMA_IRQHandler+0x146>

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000c8e:	2300      	movs	r3, #0
 8000c90:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000c94:	2301      	movs	r3, #1
 8000c96:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    }
    
    if(hdma->XferErrorCallback != NULL)
 8000c9a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000c9c:	b10b      	cbz	r3, 8000ca2 <HAL_DMA_IRQHandler+0x16a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000c9e:	4620      	mov	r0, r4
 8000ca0:	4798      	blx	r3
    }
  }
}
 8000ca2:	b003      	add	sp, #12
 8000ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000018 	.word	0x20000018
 8000cac:	00800001 	.word	0x00800001
 8000cb0:	00800004 	.word	0x00800004

08000cb4 <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000cb4:	4909      	ldr	r1, [pc, #36]	; (8000cdc <FLASH_Program_DoubleWord+0x28>)
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000cb6:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000cb8:	690c      	ldr	r4, [r1, #16]
 8000cba:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8000cbe:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8000cc0:	690c      	ldr	r4, [r1, #16]
 8000cc2:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8000cc6:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000cc8:	690c      	ldr	r4, [r1, #16]
 8000cca:	f044 0401 	orr.w	r4, r4, #1
 8000cce:	610c      	str	r4, [r1, #16]
  
  *(__IO uint64_t*)Address = Data;
 8000cd0:	e9c0 2300 	strd	r2, r3, [r0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000cd4:	f3bf 8f4f 	dsb	sy
 8000cd8:	bd10      	pop	{r4, pc}
 8000cda:	bf00      	nop
 8000cdc:	40023c00 	.word	0x40023c00

08000ce0 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <FLASH_Program_Word+0x24>)
 8000ce2:	691a      	ldr	r2, [r3, #16]
 8000ce4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000ce8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8000cea:	691a      	ldr	r2, [r3, #16]
 8000cec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cf0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000cf2:	691a      	ldr	r2, [r3, #16]
 8000cf4:	f042 0201 	orr.w	r2, r2, #1
 8000cf8:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 8000cfa:	6001      	str	r1, [r0, #0]
 8000cfc:	f3bf 8f4f 	dsb	sy
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	40023c00 	.word	0x40023c00

08000d08 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <FLASH_Program_HalfWord+0x24>)
 8000d0a:	691a      	ldr	r2, [r3, #16]
 8000d0c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000d10:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8000d12:	691a      	ldr	r2, [r3, #16]
 8000d14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d18:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000d1a:	691a      	ldr	r2, [r3, #16]
 8000d1c:	f042 0201 	orr.w	r2, r2, #1
 8000d20:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 8000d22:	8001      	strh	r1, [r0, #0]
 8000d24:	f3bf 8f4f 	dsb	sy
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	40023c00 	.word	0x40023c00

08000d30 <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <FLASH_Program_Byte+0x20>)
 8000d32:	691a      	ldr	r2, [r3, #16]
 8000d34:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000d38:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8000d3a:	691a      	ldr	r2, [r3, #16]
 8000d3c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000d3e:	691a      	ldr	r2, [r3, #16]
 8000d40:	f042 0201 	orr.w	r2, r2, #1
 8000d44:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t*)Address = Data;
 8000d46:	7001      	strb	r1, [r0, #0]
 8000d48:	f3bf 8f4f 	dsb	sy
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	40023c00 	.word	0x40023c00

08000d54 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8000d54:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <FLASH_SetErrorCode+0x5c>)
 8000d56:	68da      	ldr	r2, [r3, #12]
 8000d58:	0792      	lsls	r2, r2, #30
 8000d5a:	d504      	bpl.n	8000d66 <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8000d5c:	4915      	ldr	r1, [pc, #84]	; (8000db4 <FLASH_SetErrorCode+0x60>)
 8000d5e:	698a      	ldr	r2, [r1, #24]
 8000d60:	f042 0220 	orr.w	r2, r2, #32
 8000d64:	618a      	str	r2, [r1, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	06db      	lsls	r3, r3, #27
 8000d6a:	d504      	bpl.n	8000d76 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000d6c:	4a11      	ldr	r2, [pc, #68]	; (8000db4 <FLASH_SetErrorCode+0x60>)
 8000d6e:	6993      	ldr	r3, [r2, #24]
 8000d70:	f043 0310 	orr.w	r3, r3, #16
 8000d74:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <FLASH_SetErrorCode+0x5c>)
 8000d78:	68da      	ldr	r2, [r3, #12]
 8000d7a:	0690      	lsls	r0, r2, #26
 8000d7c:	d504      	bpl.n	8000d88 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000d7e:	490d      	ldr	r1, [pc, #52]	; (8000db4 <FLASH_SetErrorCode+0x60>)
 8000d80:	698a      	ldr	r2, [r1, #24]
 8000d82:	f042 0208 	orr.w	r2, r2, #8
 8000d86:	618a      	str	r2, [r1, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8000d88:	68db      	ldr	r3, [r3, #12]
 8000d8a:	0659      	lsls	r1, r3, #25
 8000d8c:	d504      	bpl.n	8000d98 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8000d8e:	4a09      	ldr	r2, [pc, #36]	; (8000db4 <FLASH_SetErrorCode+0x60>)
 8000d90:	6993      	ldr	r3, [r2, #24]
 8000d92:	f043 0304 	orr.w	r3, r3, #4
 8000d96:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <FLASH_SetErrorCode+0x5c>)
 8000d9a:	68da      	ldr	r2, [r3, #12]
 8000d9c:	0612      	lsls	r2, r2, #24
 8000d9e:	d504      	bpl.n	8000daa <FLASH_SetErrorCode+0x56>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8000da0:	4904      	ldr	r1, [pc, #16]	; (8000db4 <FLASH_SetErrorCode+0x60>)
 8000da2:	698a      	ldr	r2, [r1, #24]
 8000da4:	f042 0202 	orr.w	r2, r2, #2
 8000da8:	618a      	str	r2, [r1, #24]
  }
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8000daa:	22f2      	movs	r2, #242	; 0xf2
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	4770      	bx	lr
 8000db0:	40023c00 	.word	0x40023c00
 8000db4:	20002494 	.word	0x20002494

08000db8 <HAL_FLASH_Unlock>:
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_FLASH_Unlock+0x1c>)
 8000dba:	691a      	ldr	r2, [r3, #16]
 8000dbc:	2a00      	cmp	r2, #0
 8000dbe:	da06      	bge.n	8000dce <HAL_FLASH_Unlock+0x16>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8000dc0:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <HAL_FLASH_Unlock+0x20>)
  else
  {
    return HAL_ERROR;
  }
  
  return HAL_OK; 
 8000dc2:	2000      	movs	r0, #0
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8000dc4:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8000dc6:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8000dca:	605a      	str	r2, [r3, #4]
  else
  {
    return HAL_ERROR;
  }
  
  return HAL_OK; 
 8000dcc:	4770      	bx	lr
    FLASH->KEYR = FLASH_KEY1;
    FLASH->KEYR = FLASH_KEY2;
  }
  else
  {
    return HAL_ERROR;
 8000dce:	2001      	movs	r0, #1
  }
  
  return HAL_OK; 
}
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40023c00 	.word	0x40023c00
 8000dd8:	45670123 	.word	0x45670123

08000ddc <HAL_FLASH_Lock>:
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000ddc:	4a03      	ldr	r2, [pc, #12]	; (8000dec <HAL_FLASH_Lock+0x10>)
  
  return HAL_OK;  
}
 8000dde:	2000      	movs	r0, #0
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000de0:	6913      	ldr	r3, [r2, #16]
 8000de2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000de6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
}
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40023c00 	.word	0x40023c00

08000df0 <FLASH_WaitForLastOperation>:
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
  uint32_t tickstart = 0;
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000df0:	2200      	movs	r2, #0
 8000df2:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <FLASH_WaitForLastOperation+0x54>)
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout: maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8000df4:	b570      	push	{r4, r5, r6, lr}
 8000df6:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000df8:	619a      	str	r2, [r3, #24]
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000dfa:	4d13      	ldr	r5, [pc, #76]	; (8000e48 <FLASH_WaitForLastOperation+0x58>)
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8000dfc:	f7ff fab2 	bl	8000364 <HAL_GetTick>
 8000e00:	4606      	mov	r6, r0

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000e02:	68eb      	ldr	r3, [r5, #12]
 8000e04:	4a10      	ldr	r2, [pc, #64]	; (8000e48 <FLASH_WaitForLastOperation+0x58>)
 8000e06:	03db      	lsls	r3, r3, #15
 8000e08:	d50a      	bpl.n	8000e20 <FLASH_WaitForLastOperation+0x30>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8000e0a:	1c62      	adds	r2, r4, #1
 8000e0c:	d0f9      	beq.n	8000e02 <FLASH_WaitForLastOperation+0x12>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8000e0e:	b90c      	cbnz	r4, 8000e14 <FLASH_WaitForLastOperation+0x24>
      {
        return HAL_TIMEOUT;
 8000e10:	2003      	movs	r0, #3
 8000e12:	bd70      	pop	{r4, r5, r6, pc}

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
  { 
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8000e14:	f7ff faa6 	bl	8000364 <HAL_GetTick>
 8000e18:	1b80      	subs	r0, r0, r6
 8000e1a:	4284      	cmp	r4, r0
 8000e1c:	d2f1      	bcs.n	8000e02 <FLASH_WaitForLastOperation+0x12>
 8000e1e:	e7f7      	b.n	8000e10 <FLASH_WaitForLastOperation+0x20>
        return HAL_TIMEOUT;
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8000e20:	68d0      	ldr	r0, [r2, #12]
 8000e22:	f010 00f2 	ands.w	r0, r0, #242	; 0xf2
 8000e26:	d003      	beq.n	8000e30 <FLASH_WaitForLastOperation+0x40>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000e28:	f7ff ff94 	bl	8000d54 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000e30:	68d3      	ldr	r3, [r2, #12]
 8000e32:	f013 0301 	ands.w	r3, r3, #1
 8000e36:	d002      	beq.n	8000e3e <FLASH_WaitForLastOperation+0x4e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000e38:	2301      	movs	r3, #1
 8000e3a:	60d3      	str	r3, [r2, #12]
 8000e3c:	bd70      	pop	{r4, r5, r6, pc}
  }

  /* If there is an error flag set */
  return HAL_OK;
 8000e3e:	4618      	mov	r0, r3
  
}  
 8000e40:	bd70      	pop	{r4, r5, r6, pc}
 8000e42:	bf00      	nop
 8000e44:	20002494 	.word	0x20002494
 8000e48:	40023c00 	.word	0x40023c00

08000e4c <HAL_FLASH_Program>:
  * @param  Data: specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000e50:	4c1c      	ldr	r4, [pc, #112]	; (8000ec4 <HAL_FLASH_Program+0x78>)
  * @param  Data: specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000e52:	4698      	mov	r8, r3
 8000e54:	4607      	mov	r7, r0
 8000e56:	460d      	mov	r5, r1
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000e58:	7d23      	ldrb	r3, [r4, #20]
  * @param  Data: specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000e5a:	4616      	mov	r6, r2
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d02d      	beq.n	8000ebc <HAL_FLASH_Program+0x70>
 8000e60:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e62:	f24c 3050 	movw	r0, #50000	; 0xc350
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000e66:	7523      	strb	r3, [r4, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e68:	f7ff ffc2 	bl	8000df0 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 8000e6c:	bb10      	cbnz	r0, 8000eb4 <HAL_FLASH_Program+0x68>
  {
    switch(TypeProgram)
 8000e6e:	2f03      	cmp	r7, #3
 8000e70:	d817      	bhi.n	8000ea2 <HAL_FLASH_Program+0x56>
 8000e72:	e8df f007 	tbb	[pc, r7]
 8000e76:	0702      	.short	0x0702
 8000e78:	110c      	.short	0x110c
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8000e7a:	b2f1      	uxtb	r1, r6
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	f7ff ff57 	bl	8000d30 <FLASH_Program_Byte>
        break;
 8000e82:	e00e      	b.n	8000ea2 <HAL_FLASH_Program+0x56>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000e84:	b2b1      	uxth	r1, r6
 8000e86:	4628      	mov	r0, r5
 8000e88:	f7ff ff3e 	bl	8000d08 <FLASH_Program_HalfWord>
        break;
 8000e8c:	e009      	b.n	8000ea2 <HAL_FLASH_Program+0x56>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8000e8e:	4631      	mov	r1, r6
 8000e90:	4628      	mov	r0, r5
 8000e92:	f7ff ff25 	bl	8000ce0 <FLASH_Program_Word>
        break;
 8000e96:	e004      	b.n	8000ea2 <HAL_FLASH_Program+0x56>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 8000e98:	4632      	mov	r2, r6
 8000e9a:	4643      	mov	r3, r8
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	f7ff ff09 	bl	8000cb4 <FLASH_Program_DoubleWord>
      }
      default :
        break;
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ea2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ea6:	f7ff ffa3 	bl	8000df0 <FLASH_WaitForLastOperation>
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8000eaa:	4a07      	ldr	r2, [pc, #28]	; (8000ec8 <HAL_FLASH_Program+0x7c>)
 8000eac:	6913      	ldr	r3, [r2, #16]
 8000eae:	f023 0301 	bic.w	r3, r3, #1
 8000eb2:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	7523      	strb	r3, [r4, #20]

  return status;
 8000eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000ebc:	2002      	movs	r0, #2

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);

  return status;
}
 8000ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20002494 	.word	0x20002494
 8000ec8:	40023c00 	.word	0x40023c00

08000ecc <FLASH_MassErase>:
{
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <FLASH_MassErase+0x24>)
 8000ece:	691a      	ldr	r2, [r3, #16]
 8000ed0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000ed4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 8000ed6:	691a      	ldr	r2, [r3, #16]
 8000ed8:	f042 0204 	orr.w	r2, r2, #4
 8000edc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 8000ede:	691a      	ldr	r2, [r3, #16]
 8000ee0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000ee4:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8000ee8:	6118      	str	r0, [r3, #16]
 8000eea:	f3bf 8f4f 	dsb	sy
 8000eee:	4770      	bx	lr
 8000ef0:	40023c00 	.word	0x40023c00

08000ef4 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8000ef4:	b151      	cbz	r1, 8000f0c <FLASH_Erase_Sector+0x18>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8000ef6:	2901      	cmp	r1, #1
 8000ef8:	d006      	beq.n	8000f08 <FLASH_Erase_Sector+0x14>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8000efa:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8000efc:	bf0c      	ite	eq
 8000efe:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8000f02:	f44f 7140 	movne.w	r1, #768	; 0x300
 8000f06:	e001      	b.n	8000f0c <FLASH_Erase_Sector+0x18>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8000f08:	f44f 7180 	mov.w	r1, #256	; 0x100
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
  }

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <FLASH_Erase_Sector+0x54>)
 8000f0e:	691a      	ldr	r2, [r3, #16]
 8000f10:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000f14:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8000f16:	691a      	ldr	r2, [r3, #16]
 8000f18:	4311      	orrs	r1, r2
 8000f1a:	6119      	str	r1, [r3, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f1c:	2178      	movs	r1, #120	; 0x78
  FLASH->CR &= SECTOR_MASK;
 8000f1e:	691a      	ldr	r2, [r3, #16]
 8000f20:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000f24:	611a      	str	r2, [r3, #16]
 8000f26:	fa91 f1a1 	rbit	r1, r1
  FLASH->CR |= FLASH_CR_SER | (Sector << POSITION_VAL(FLASH_CR_SNB));
 8000f2a:	691a      	ldr	r2, [r3, #16]
 8000f2c:	fab1 f181 	clz	r1, r1
 8000f30:	f042 0202 	orr.w	r2, r2, #2
 8000f34:	4088      	lsls	r0, r1
 8000f36:	4310      	orrs	r0, r2
 8000f38:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8000f3a:	691a      	ldr	r2, [r3, #16]
 8000f3c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f40:	611a      	str	r2, [r3, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f42:	f3bf 8f4f 	dsb	sy
 8000f46:	4770      	bx	lr
 8000f48:	40023c00 	.word	0x40023c00

08000f4c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8000f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t index = 0;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f50:	4e23      	ldr	r6, [pc, #140]	; (8000fe0 <HAL_FLASHEx_Erase+0x94>)
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8000f52:	4605      	mov	r5, r0
 8000f54:	4688      	mov	r8, r1
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t index = 0;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f56:	7d33      	ldrb	r3, [r6, #20]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d03e      	beq.n	8000fda <HAL_FLASHEx_Erase+0x8e>
 8000f5c:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f5e:	f24c 3050 	movw	r0, #50000	; 0xc350
{
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t index = 0;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f62:	7533      	strb	r3, [r6, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f64:	f7ff ff44 	bl	8000df0 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 8000f68:	4604      	mov	r4, r0
 8000f6a:	bb88      	cbnz	r0, 8000fd0 <HAL_FLASHEx_Erase+0x84>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8000f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f70:	f8c8 3000 	str.w	r3, [r8]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000f74:	682b      	ldr	r3, [r5, #0]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d10d      	bne.n	8000f96 <HAL_FLASHEx_Erase+0x4a>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
 8000f7a:	7b28      	ldrb	r0, [r5, #12]
 8000f7c:	f7ff ffa6 	bl	8000ecc <FLASH_MassErase>
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f84:	f7ff ff34 	bl	8000df0 <FLASH_WaitForLastOperation>
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8000f88:	4a16      	ldr	r2, [pc, #88]	; (8000fe4 <HAL_FLASHEx_Erase+0x98>)
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f8a:	4604      	mov	r4, r0
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8000f8c:	6913      	ldr	r3, [r2, #16]
 8000f8e:	f023 0304 	bic.w	r3, r3, #4
 8000f92:	6113      	str	r3, [r2, #16]
 8000f94:	e01c      	b.n	8000fd0 <HAL_FLASHEx_Erase+0x84>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000f96:	686f      	ldr	r7, [r5, #4]

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8000f98:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8000fe4 <HAL_FLASHEx_Erase+0x98>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000f9c:	68aa      	ldr	r2, [r5, #8]
 8000f9e:	686b      	ldr	r3, [r5, #4]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	429f      	cmp	r7, r3
 8000fa4:	d214      	bcs.n	8000fd0 <HAL_FLASHEx_Erase+0x84>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8000fa6:	7b29      	ldrb	r1, [r5, #12]
 8000fa8:	4638      	mov	r0, r7
 8000faa:	f7ff ffa3 	bl	8000ef4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fae:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fb2:	f7ff ff1d 	bl	8000df0 <FLASH_WaitForLastOperation>
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8000fb6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8000fba:	f023 037a 	bic.w	r3, r3, #122	; 0x7a
 8000fbe:	f8c9 3010 	str.w	r3, [r9, #16]

        if(status != HAL_OK) 
 8000fc2:	b118      	cbz	r0, 8000fcc <HAL_FLASHEx_Erase+0x80>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8000fc4:	f8c8 7000 	str.w	r7, [r8]
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fc8:	4604      	mov	r4, r0

        if(status != HAL_OK) 
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
          break;
 8000fca:	e001      	b.n	8000fd0 <HAL_FLASHEx_Erase+0x84>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000fcc:	3701      	adds	r7, #1
 8000fce:	e7e5      	b.n	8000f9c <HAL_FLASHEx_Erase+0x50>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000fd0:	2300      	movs	r3, #0

  return status;
 8000fd2:	4620      	mov	r0, r4
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000fd4:	7533      	strb	r3, [r6, #20]

  return status;
 8000fd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
{
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t index = 0;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000fda:	2002      	movs	r0, #2

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);

  return status;
}
 8000fdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000fe0:	20002494 	.word	0x20002494
 8000fe4:	40023c00 	.word	0x40023c00

08000fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fec:	680b      	ldr	r3, [r1, #0]
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fee:	b085      	sub	sp, #20
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ff0:	4e6f      	ldr	r6, [pc, #444]	; (80011b0 <HAL_GPIO_Init+0x1c8>)
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff2:	9301      	str	r3, [sp, #4]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ff4:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 80011b8 <HAL_GPIO_Init+0x1d0>
 8000ffa:	46b6      	mov	lr, r6

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ffc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80011bc <HAL_GPIO_Init+0x1d4>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001000:	2201      	movs	r2, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8001002:	9c01      	ldr	r4, [sp, #4]

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001004:	409a      	lsls	r2, r3
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8001006:	ea32 0404 	bics.w	r4, r2, r4
 800100a:	f040 80c9 	bne.w	80011a0 <HAL_GPIO_Init+0x1b8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800100e:	684c      	ldr	r4, [r1, #4]
 8001010:	f024 0910 	bic.w	r9, r4, #16
 8001014:	f1b9 0f02 	cmp.w	r9, #2
 8001018:	d114      	bne.n	8001044 <HAL_GPIO_Init+0x5c>
 800101a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800101e:	f003 0b07 	and.w	fp, r3, #7
 8001022:	250f      	movs	r5, #15
 8001024:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8001028:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800102c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001030:	fa05 f50b 	lsl.w	r5, r5, fp
 8001034:	ea27 0505 	bic.w	r5, r7, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001038:	690f      	ldr	r7, [r1, #16]
 800103a:	fa07 f70b 	lsl.w	r7, r7, fp
 800103e:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3] = temp;
 8001040:	f8ca 7020 	str.w	r7, [sl, #32]
 8001044:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001048:	2503      	movs	r5, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800104a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800104c:	f004 0b03 	and.w	fp, r4, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001050:	fa05 f50a 	lsl.w	r5, r5, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001054:	f109 39ff 	add.w	r9, r9, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001058:	fa0b fb0a 	lsl.w	fp, fp, sl
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800105c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800105e:	f1b9 0f01 	cmp.w	r9, #1
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001062:	ea07 0705 	and.w	r7, r7, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001066:	ea4b 0707 	orr.w	r7, fp, r7
      GPIOx->MODER = temp;
 800106a:	6007      	str	r7, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800106c:	d812      	bhi.n	8001094 <HAL_GPIO_Init+0xac>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800106e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001070:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8001074:	68cf      	ldr	r7, [r1, #12]
 8001076:	fa07 f70a 	lsl.w	r7, r7, sl
 800107a:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800107e:	f3c4 1900 	ubfx	r9, r4, #4, #1
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
        GPIOx->OSPEEDR = temp;
 8001082:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001084:	fa09 f903 	lsl.w	r9, r9, r3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001088:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800108a:	ea27 0702 	bic.w	r7, r7, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800108e:	ea49 0707 	orr.w	r7, r9, r7
        GPIOx->OTYPER = temp;
 8001092:	6047      	str	r7, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001094:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001096:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001098:	688f      	ldr	r7, [r1, #8]
 800109a:	fa07 f70a 	lsl.w	r7, r7, sl
 800109e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80010a0:	60c5      	str	r5, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010a2:	00e5      	lsls	r5, r4, #3
 80010a4:	d57c      	bpl.n	80011a0 <HAL_GPIO_Init+0x1b8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a6:	f8dc 5044 	ldr.w	r5, [ip, #68]	; 0x44
 80010aa:	f023 0703 	bic.w	r7, r3, #3

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010ae:	f003 0a03 	and.w	sl, r3, #3
 80010b2:	f04f 090f 	mov.w	r9, #15
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 80010ba:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010be:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c2:	f8cc 5044 	str.w	r5, [ip, #68]	; 0x44
 80010c6:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 80010ca:	f8dc 5044 	ldr.w	r5, [ip, #68]	; 0x44
 80010ce:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 80010d2:	9503      	str	r5, [sp, #12]
 80010d4:	9d03      	ldr	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010d6:	fa09 f50a 	lsl.w	r5, r9, sl
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
 80010da:	f8d7 b008 	ldr.w	fp, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010de:	ea2b 0905 	bic.w	r9, fp, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80010e2:	4d34      	ldr	r5, [pc, #208]	; (80011b4 <HAL_GPIO_Init+0x1cc>)
 80010e4:	42a8      	cmp	r0, r5
 80010e6:	d024      	beq.n	8001132 <HAL_GPIO_Init+0x14a>
 80010e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010ec:	42a8      	cmp	r0, r5
 80010ee:	d022      	beq.n	8001136 <HAL_GPIO_Init+0x14e>
 80010f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010f4:	42a8      	cmp	r0, r5
 80010f6:	d020      	beq.n	800113a <HAL_GPIO_Init+0x152>
 80010f8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010fc:	42a8      	cmp	r0, r5
 80010fe:	d01e      	beq.n	800113e <HAL_GPIO_Init+0x156>
 8001100:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001104:	42a8      	cmp	r0, r5
 8001106:	d01c      	beq.n	8001142 <HAL_GPIO_Init+0x15a>
 8001108:	4540      	cmp	r0, r8
 800110a:	d01c      	beq.n	8001146 <HAL_GPIO_Init+0x15e>
 800110c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001110:	42a8      	cmp	r0, r5
 8001112:	d01a      	beq.n	800114a <HAL_GPIO_Init+0x162>
 8001114:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001118:	42a8      	cmp	r0, r5
 800111a:	d018      	beq.n	800114e <HAL_GPIO_Init+0x166>
 800111c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001120:	42a8      	cmp	r0, r5
 8001122:	d016      	beq.n	8001152 <HAL_GPIO_Init+0x16a>
 8001124:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001128:	42a8      	cmp	r0, r5
 800112a:	bf14      	ite	ne
 800112c:	250a      	movne	r5, #10
 800112e:	2509      	moveq	r5, #9
 8001130:	e010      	b.n	8001154 <HAL_GPIO_Init+0x16c>
 8001132:	2500      	movs	r5, #0
 8001134:	e00e      	b.n	8001154 <HAL_GPIO_Init+0x16c>
 8001136:	2501      	movs	r5, #1
 8001138:	e00c      	b.n	8001154 <HAL_GPIO_Init+0x16c>
 800113a:	2502      	movs	r5, #2
 800113c:	e00a      	b.n	8001154 <HAL_GPIO_Init+0x16c>
 800113e:	2503      	movs	r5, #3
 8001140:	e008      	b.n	8001154 <HAL_GPIO_Init+0x16c>
 8001142:	2504      	movs	r5, #4
 8001144:	e006      	b.n	8001154 <HAL_GPIO_Init+0x16c>
 8001146:	2505      	movs	r5, #5
 8001148:	e004      	b.n	8001154 <HAL_GPIO_Init+0x16c>
 800114a:	2506      	movs	r5, #6
 800114c:	e002      	b.n	8001154 <HAL_GPIO_Init+0x16c>
 800114e:	2507      	movs	r5, #7
 8001150:	e000      	b.n	8001154 <HAL_GPIO_Init+0x16c>
 8001152:	2508      	movs	r5, #8
 8001154:	fa05 f50a 	lsl.w	r5, r5, sl
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001158:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800115c:	ea45 0509 	orr.w	r5, r5, r9
        SYSCFG->EXTICR[position >> 2] = temp;
 8001160:	60bd      	str	r5, [r7, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8001162:	ea6f 0702 	mvn.w	r7, r2
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001166:	6835      	ldr	r5, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 8001168:	bf0c      	ite	eq
 800116a:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 800116c:	4315      	orrne	r5, r2
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800116e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8001172:	f8ce 5000 	str.w	r5, [lr]

        temp = EXTI->EMR;
 8001176:	f8de 5004 	ldr.w	r5, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 800117a:	bf0c      	ite	eq
 800117c:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 800117e:	4315      	orrne	r5, r2
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001180:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8001184:	6075      	str	r5, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001186:	68b5      	ldr	r5, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8001188:	bf0c      	ite	eq
 800118a:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 800118c:	4315      	orrne	r5, r2
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800118e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8001190:	f8ce 5008 	str.w	r5, [lr, #8]

        temp = EXTI->FTSR;
 8001194:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 8001198:	bf54      	ite	pl
 800119a:	403d      	andpl	r5, r7
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 800119c:	4315      	orrmi	r5, r2
        }
        EXTI->FTSR = temp;
 800119e:	60f5      	str	r5, [r6, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80011a0:	3301      	adds	r3, #1
 80011a2:	2b10      	cmp	r3, #16
 80011a4:	f47f af2c 	bne.w	8001000 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 80011a8:	b005      	add	sp, #20
 80011aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011ae:	bf00      	nop
 80011b0:	40013c00 	.word	0x40013c00
 80011b4:	40020000 	.word	0x40020000
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40021400 	.word	0x40021400

080011c0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011c0:	b902      	cbnz	r2, 80011c4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80011c2:	0409      	lsls	r1, r1, #16
 80011c4:	6181      	str	r1, [r0, #24]
 80011c6:	4770      	bx	lr

080011c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011c8:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80011ca:	4b04      	ldr	r3, [pc, #16]	; (80011dc <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80011cc:	6959      	ldr	r1, [r3, #20]
 80011ce:	4201      	tst	r1, r0
 80011d0:	d002      	beq.n	80011d8 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011d2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011d4:	f002 fe72 	bl	8003ebc <HAL_GPIO_EXTI_Callback>
 80011d8:	bd08      	pop	{r3, pc}
 80011da:	bf00      	nop
 80011dc:	40013c00 	.word	0x40013c00

080011e0 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80011e0:	4b19      	ldr	r3, [pc, #100]	; (8001248 <HAL_PWREx_EnableOverDrive+0x68>)
 80011e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011e4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80011e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	641a      	str	r2, [r3, #64]	; 0x40
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80011ee:	4c17      	ldr	r4, [pc, #92]	; (800124c <HAL_PWREx_EnableOverDrive+0x6c>)
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80011f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011f4:	4625      	mov	r5, r4
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80011fa:	6823      	ldr	r3, [r4, #0]
 80011fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001200:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001202:	f7ff f8af 	bl	8000364 <HAL_GetTick>
 8001206:	4606      	mov	r6, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001208:	686b      	ldr	r3, [r5, #4]
 800120a:	4c10      	ldr	r4, [pc, #64]	; (800124c <HAL_PWREx_EnableOverDrive+0x6c>)
 800120c:	03da      	lsls	r2, r3, #15
 800120e:	d407      	bmi.n	8001220 <HAL_PWREx_EnableOverDrive+0x40>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001210:	f7ff f8a8 	bl	8000364 <HAL_GetTick>
 8001214:	1b80      	subs	r0, r0, r6
 8001216:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800121a:	d9f5      	bls.n	8001208 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 800121c:	2003      	movs	r0, #3
 800121e:	e011      	b.n	8001244 <HAL_PWREx_EnableOverDrive+0x64>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001220:	6823      	ldr	r3, [r4, #0]
 8001222:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001226:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001228:	f7ff f89c 	bl	8000364 <HAL_GetTick>
 800122c:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800122e:	6863      	ldr	r3, [r4, #4]
 8001230:	039b      	lsls	r3, r3, #14
 8001232:	d406      	bmi.n	8001242 <HAL_PWREx_EnableOverDrive+0x62>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001234:	f7ff f896 	bl	8000364 <HAL_GetTick>
 8001238:	1b40      	subs	r0, r0, r5
 800123a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800123e:	d9f6      	bls.n	800122e <HAL_PWREx_EnableOverDrive+0x4e>
 8001240:	e7ec      	b.n	800121c <HAL_PWREx_EnableOverDrive+0x3c>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001242:	2000      	movs	r0, #0
}
 8001244:	b002      	add	sp, #8
 8001246:	bd70      	pop	{r4, r5, r6, pc}
 8001248:	40023800 	.word	0x40023800
 800124c:	40007000 	.word	0x40007000

08001250 <HAL_RCC_OscConfig>:
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001250:	6803      	ldr	r3, [r0, #0]
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001252:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001254:	4604      	mov	r4, r0
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001256:	07d8      	lsls	r0, r3, #31
 8001258:	d403      	bmi.n	8001262 <HAL_RCC_OscConfig+0x12>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800125a:	6823      	ldr	r3, [r4, #0]
 800125c:	0799      	lsls	r1, r3, #30
 800125e:	d452      	bmi.n	8001306 <HAL_RCC_OscConfig+0xb6>
 8001260:	e0a5      	b.n	80013ae <HAL_RCC_OscConfig+0x15e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001262:	4b96      	ldr	r3, [pc, #600]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	f002 020c 	and.w	r2, r2, #12
 800126a:	2a04      	cmp	r2, #4
 800126c:	d007      	beq.n	800127e <HAL_RCC_OscConfig+0x2e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	f002 020c 	and.w	r2, r2, #12
 8001274:	2a08      	cmp	r2, #8
 8001276:	d10b      	bne.n	8001290 <HAL_RCC_OscConfig+0x40>
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	025a      	lsls	r2, r3, #9
 800127c:	d508      	bpl.n	8001290 <HAL_RCC_OscConfig+0x40>
    {
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800127e:	4b8f      	ldr	r3, [pc, #572]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	039b      	lsls	r3, r3, #14
 8001284:	d5e9      	bpl.n	800125a <HAL_RCC_OscConfig+0xa>
 8001286:	6863      	ldr	r3, [r4, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1e6      	bne.n	800125a <HAL_RCC_OscConfig+0xa>
      {
        return HAL_ERROR;
 800128c:	2001      	movs	r0, #1
 800128e:	e176      	b.n	800157e <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001290:	6863      	ldr	r3, [r4, #4]
 8001292:	4d8a      	ldr	r5, [pc, #552]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001298:	d013      	beq.n	80012c2 <HAL_RCC_OscConfig+0x72>
 800129a:	b95b      	cbnz	r3, 80012b4 <HAL_RCC_OscConfig+0x64>
 800129c:	682b      	ldr	r3, [r5, #0]
 800129e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012a2:	602b      	str	r3, [r5, #0]
 80012a4:	682b      	ldr	r3, [r5, #0]
 80012a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012aa:	602b      	str	r3, [r5, #0]
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ac:	f7ff f85a 	bl	8000364 <HAL_GetTick>
 80012b0:	4606      	mov	r6, r0
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b2:	e024      	b.n	80012fe <HAL_RCC_OscConfig+0xae>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012b8:	682b      	ldr	r3, [r5, #0]
 80012ba:	d106      	bne.n	80012ca <HAL_RCC_OscConfig+0x7a>
 80012bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c0:	602b      	str	r3, [r5, #0]
 80012c2:	682b      	ldr	r3, [r5, #0]
 80012c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c8:	e005      	b.n	80012d6 <HAL_RCC_OscConfig+0x86>
 80012ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ce:	602b      	str	r3, [r5, #0]
 80012d0:	682b      	ldr	r3, [r5, #0]
 80012d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012d6:	602b      	str	r3, [r5, #0]
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d8:	f7ff f844 	bl	8000364 <HAL_GetTick>
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012dc:	4d77      	ldr	r5, [pc, #476]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012de:	4606      	mov	r6, r0
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e0:	682b      	ldr	r3, [r5, #0]
 80012e2:	039f      	lsls	r7, r3, #14
 80012e4:	d4b9      	bmi.n	800125a <HAL_RCC_OscConfig+0xa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012e6:	f7ff f83d 	bl	8000364 <HAL_GetTick>
 80012ea:	1b80      	subs	r0, r0, r6
 80012ec:	2864      	cmp	r0, #100	; 0x64
 80012ee:	d9f7      	bls.n	80012e0 <HAL_RCC_OscConfig+0x90>
          {
            return HAL_TIMEOUT;
 80012f0:	2003      	movs	r0, #3
 80012f2:	e144      	b.n	800157e <HAL_RCC_OscConfig+0x32e>
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f4:	f7ff f836 	bl	8000364 <HAL_GetTick>
 80012f8:	1b80      	subs	r0, r0, r6
 80012fa:	2864      	cmp	r0, #100	; 0x64
 80012fc:	d8f8      	bhi.n	80012f0 <HAL_RCC_OscConfig+0xa0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012fe:	682b      	ldr	r3, [r5, #0]
 8001300:	0398      	lsls	r0, r3, #14
 8001302:	d4f7      	bmi.n	80012f4 <HAL_RCC_OscConfig+0xa4>
 8001304:	e7a9      	b.n	800125a <HAL_RCC_OscConfig+0xa>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001306:	4b6d      	ldr	r3, [pc, #436]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	f012 0f0c 	tst.w	r2, #12
 800130e:	d007      	beq.n	8001320 <HAL_RCC_OscConfig+0xd0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001310:	689a      	ldr	r2, [r3, #8]
 8001312:	f002 020c 	and.w	r2, r2, #12
 8001316:	2a08      	cmp	r2, #8
 8001318:	d117      	bne.n	800134a <HAL_RCC_OscConfig+0xfa>
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	0259      	lsls	r1, r3, #9
 800131e:	d414      	bmi.n	800134a <HAL_RCC_OscConfig+0xfa>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001320:	4b66      	ldr	r3, [pc, #408]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	0792      	lsls	r2, r2, #30
 8001326:	d502      	bpl.n	800132e <HAL_RCC_OscConfig+0xde>
 8001328:	68e2      	ldr	r2, [r4, #12]
 800132a:	2a01      	cmp	r2, #1
 800132c:	d1ae      	bne.n	800128c <HAL_RCC_OscConfig+0x3c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132e:	681a      	ldr	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001330:	21f8      	movs	r1, #248	; 0xf8
 8001332:	fa91 f1a1 	rbit	r1, r1
 8001336:	6920      	ldr	r0, [r4, #16]
 8001338:	fab1 f181 	clz	r1, r1
 800133c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001340:	fa00 f101 	lsl.w	r1, r0, r1
 8001344:	430a      	orrs	r2, r1
 8001346:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001348:	e031      	b.n	80013ae <HAL_RCC_OscConfig+0x15e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800134a:	68e3      	ldr	r3, [r4, #12]
 800134c:	4d5b      	ldr	r5, [pc, #364]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 800134e:	b1f3      	cbz	r3, 800138e <HAL_RCC_OscConfig+0x13e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001350:	682b      	ldr	r3, [r5, #0]
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001358:	f7ff f804 	bl	8000364 <HAL_GetTick>
 800135c:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800135e:	682b      	ldr	r3, [r5, #0]
 8001360:	4856      	ldr	r0, [pc, #344]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001362:	079b      	lsls	r3, r3, #30
 8001364:	d405      	bmi.n	8001372 <HAL_RCC_OscConfig+0x122>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001366:	f7fe fffd 	bl	8000364 <HAL_GetTick>
 800136a:	1b80      	subs	r0, r0, r6
 800136c:	2802      	cmp	r0, #2
 800136e:	d9f6      	bls.n	800135e <HAL_RCC_OscConfig+0x10e>
 8001370:	e7be      	b.n	80012f0 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001372:	6803      	ldr	r3, [r0, #0]
 8001374:	22f8      	movs	r2, #248	; 0xf8
 8001376:	fa92 f2a2 	rbit	r2, r2
 800137a:	6921      	ldr	r1, [r4, #16]
 800137c:	fab2 f282 	clz	r2, r2
 8001380:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001384:	fa01 f202 	lsl.w	r2, r1, r2
 8001388:	4313      	orrs	r3, r2
 800138a:	6003      	str	r3, [r0, #0]
 800138c:	e00f      	b.n	80013ae <HAL_RCC_OscConfig+0x15e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800138e:	682b      	ldr	r3, [r5, #0]
 8001390:	f023 0301 	bic.w	r3, r3, #1
 8001394:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001396:	f7fe ffe5 	bl	8000364 <HAL_GetTick>
 800139a:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800139c:	682b      	ldr	r3, [r5, #0]
 800139e:	079f      	lsls	r7, r3, #30
 80013a0:	d505      	bpl.n	80013ae <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013a2:	f7fe ffdf 	bl	8000364 <HAL_GetTick>
 80013a6:	1b80      	subs	r0, r0, r6
 80013a8:	2802      	cmp	r0, #2
 80013aa:	d9f7      	bls.n	800139c <HAL_RCC_OscConfig+0x14c>
 80013ac:	e7a0      	b.n	80012f0 <HAL_RCC_OscConfig+0xa0>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ae:	6823      	ldr	r3, [r4, #0]
 80013b0:	071e      	lsls	r6, r3, #28
 80013b2:	d403      	bmi.n	80013bc <HAL_RCC_OscConfig+0x16c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013b4:	6823      	ldr	r3, [r4, #0]
 80013b6:	075d      	lsls	r5, r3, #29
 80013b8:	d549      	bpl.n	800144e <HAL_RCC_OscConfig+0x1fe>
 80013ba:	e022      	b.n	8001402 <HAL_RCC_OscConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013bc:	6963      	ldr	r3, [r4, #20]
 80013be:	4d3f      	ldr	r5, [pc, #252]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 80013c0:	b17b      	cbz	r3, 80013e2 <HAL_RCC_OscConfig+0x192>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013c2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	676b      	str	r3, [r5, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ca:	f7fe ffcb 	bl	8000364 <HAL_GetTick>
 80013ce:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80013d2:	0798      	lsls	r0, r3, #30
 80013d4:	d4ee      	bmi.n	80013b4 <HAL_RCC_OscConfig+0x164>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013d6:	f7fe ffc5 	bl	8000364 <HAL_GetTick>
 80013da:	1b80      	subs	r0, r0, r6
 80013dc:	2802      	cmp	r0, #2
 80013de:	d9f7      	bls.n	80013d0 <HAL_RCC_OscConfig+0x180>
 80013e0:	e786      	b.n	80012f0 <HAL_RCC_OscConfig+0xa0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013e2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80013e4:	f023 0301 	bic.w	r3, r3, #1
 80013e8:	676b      	str	r3, [r5, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ea:	f7fe ffbb 	bl	8000364 <HAL_GetTick>
 80013ee:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80013f2:	0799      	lsls	r1, r3, #30
 80013f4:	d5de      	bpl.n	80013b4 <HAL_RCC_OscConfig+0x164>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013f6:	f7fe ffb5 	bl	8000364 <HAL_GetTick>
 80013fa:	1b80      	subs	r0, r0, r6
 80013fc:	2802      	cmp	r0, #2
 80013fe:	d9f7      	bls.n	80013f0 <HAL_RCC_OscConfig+0x1a0>
 8001400:	e776      	b.n	80012f0 <HAL_RCC_OscConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001402:	4b2e      	ldr	r3, [pc, #184]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001404:	4d2e      	ldr	r5, [pc, #184]	; (80014c0 <HAL_RCC_OscConfig+0x270>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001406:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001408:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800140c:	641a      	str	r2, [r3, #64]	; 0x40
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001414:	9301      	str	r3, [sp, #4]
 8001416:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001418:	682b      	ldr	r3, [r5, #0]
 800141a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141e:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001420:	f7fe ffa0 	bl	8000364 <HAL_GetTick>
 8001424:	4606      	mov	r6, r0
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001426:	682b      	ldr	r3, [r5, #0]
 8001428:	05da      	lsls	r2, r3, #23
 800142a:	d514      	bpl.n	8001456 <HAL_RCC_OscConfig+0x206>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800142c:	68a3      	ldr	r3, [r4, #8]
 800142e:	4d23      	ldr	r5, [pc, #140]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001430:	2b01      	cmp	r3, #1
 8001432:	d116      	bne.n	8001462 <HAL_RCC_OscConfig+0x212>
 8001434:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800143c:	f241 3588 	movw	r5, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001440:	f7fe ff90 	bl	8000364 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001444:	4e1d      	ldr	r6, [pc, #116]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001446:	4607      	mov	r7, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001448:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800144a:	079b      	lsls	r3, r3, #30
 800144c:	d526      	bpl.n	800149c <HAL_RCC_OscConfig+0x24c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800144e:	69a2      	ldr	r2, [r4, #24]
 8001450:	2a00      	cmp	r2, #0
 8001452:	d137      	bne.n	80014c4 <HAL_RCC_OscConfig+0x274>
 8001454:	e079      	b.n	800154a <HAL_RCC_OscConfig+0x2fa>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001456:	f7fe ff85 	bl	8000364 <HAL_GetTick>
 800145a:	1b80      	subs	r0, r0, r6
 800145c:	2864      	cmp	r0, #100	; 0x64
 800145e:	d9e2      	bls.n	8001426 <HAL_RCC_OscConfig+0x1d6>
 8001460:	e746      	b.n	80012f0 <HAL_RCC_OscConfig+0xa0>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001462:	b96b      	cbnz	r3, 8001480 <HAL_RCC_OscConfig+0x230>
 8001464:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001466:	f241 3788 	movw	r7, #5000	; 0x1388
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800146a:	f023 0301 	bic.w	r3, r3, #1
 800146e:	672b      	str	r3, [r5, #112]	; 0x70
 8001470:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001472:	f023 0304 	bic.w	r3, r3, #4
 8001476:	672b      	str	r3, [r5, #112]	; 0x70
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001478:	f7fe ff74 	bl	8000364 <HAL_GetTick>
 800147c:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800147e:	e019      	b.n	80014b4 <HAL_RCC_OscConfig+0x264>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001480:	2b05      	cmp	r3, #5
 8001482:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001484:	d103      	bne.n	800148e <HAL_RCC_OscConfig+0x23e>
 8001486:	f043 0304 	orr.w	r3, r3, #4
 800148a:	672b      	str	r3, [r5, #112]	; 0x70
 800148c:	e7d2      	b.n	8001434 <HAL_RCC_OscConfig+0x1e4>
 800148e:	f023 0301 	bic.w	r3, r3, #1
 8001492:	672b      	str	r3, [r5, #112]	; 0x70
 8001494:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001496:	f023 0304 	bic.w	r3, r3, #4
 800149a:	e7ce      	b.n	800143a <HAL_RCC_OscConfig+0x1ea>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800149c:	f7fe ff62 	bl	8000364 <HAL_GetTick>
 80014a0:	1bc0      	subs	r0, r0, r7
 80014a2:	42a8      	cmp	r0, r5
 80014a4:	d9d0      	bls.n	8001448 <HAL_RCC_OscConfig+0x1f8>
 80014a6:	e723      	b.n	80012f0 <HAL_RCC_OscConfig+0xa0>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a8:	f7fe ff5c 	bl	8000364 <HAL_GetTick>
 80014ac:	1b80      	subs	r0, r0, r6
 80014ae:	42b8      	cmp	r0, r7
 80014b0:	f63f af1e 	bhi.w	80012f0 <HAL_RCC_OscConfig+0xa0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014b4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014b6:	0798      	lsls	r0, r3, #30
 80014b8:	d4f6      	bmi.n	80014a8 <HAL_RCC_OscConfig+0x258>
 80014ba:	e7c8      	b.n	800144e <HAL_RCC_OscConfig+0x1fe>
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40007000 	.word	0x40007000
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014c4:	4d2f      	ldr	r5, [pc, #188]	; (8001584 <HAL_RCC_OscConfig+0x334>)
 80014c6:	68ab      	ldr	r3, [r5, #8]
 80014c8:	f003 030c 	and.w	r3, r3, #12
 80014cc:	2b08      	cmp	r3, #8
 80014ce:	f43f aedd 	beq.w	800128c <HAL_RCC_OscConfig+0x3c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d2:	682b      	ldr	r3, [r5, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014d4:	2a02      	cmp	r2, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014da:	602b      	str	r3, [r5, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014dc:	d143      	bne.n	8001566 <HAL_RCC_OscConfig+0x316>
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014de:	f7fe ff41 	bl	8000364 <HAL_GetTick>
 80014e2:	4607      	mov	r7, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e4:	682b      	ldr	r3, [r5, #0]
 80014e6:	4e27      	ldr	r6, [pc, #156]	; (8001584 <HAL_RCC_OscConfig+0x334>)
 80014e8:	0199      	lsls	r1, r3, #6
 80014ea:	d430      	bmi.n	800154e <HAL_RCC_OscConfig+0x2fe>
 80014ec:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80014f0:	fa92 f2a2 	rbit	r2, r2
 80014f4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014f8:	fab2 f082 	clz	r0, r2
 80014fc:	fa93 f3a3 	rbit	r3, r3
 8001500:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8001504:	fab3 f583 	clz	r5, r3
 8001508:	fa92 f2a2 	rbit	r2, r2
 800150c:	69e3      	ldr	r3, [r4, #28]
 800150e:	fab2 f182 	clz	r1, r2
 8001512:	6a27      	ldr	r7, [r4, #32]
 8001514:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001516:	431f      	orrs	r7, r3
 8001518:	4082      	lsls	r2, r0
 800151a:	f047 5300 	orr.w	r3, r7, #536870912	; 0x20000000
 800151e:	ea43 0002 	orr.w	r0, r3, r2
 8001522:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001524:	085a      	lsrs	r2, r3, #1
 8001526:	3a01      	subs	r2, #1
 8001528:	fa02 f305 	lsl.w	r3, r2, r5
 800152c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800152e:	4303      	orrs	r3, r0
 8001530:	408a      	lsls	r2, r1
 8001532:	4313      	orrs	r3, r2
 8001534:	6073      	str	r3, [r6, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001536:	6833      	ldr	r3, [r6, #0]
 8001538:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800153c:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153e:	f7fe ff11 	bl	8000364 <HAL_GetTick>
 8001542:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001544:	6833      	ldr	r3, [r6, #0]
 8001546:	019a      	lsls	r2, r3, #6
 8001548:	d507      	bpl.n	800155a <HAL_RCC_OscConfig+0x30a>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800154a:	2000      	movs	r0, #0
 800154c:	e017      	b.n	800157e <HAL_RCC_OscConfig+0x32e>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800154e:	f7fe ff09 	bl	8000364 <HAL_GetTick>
 8001552:	1bc0      	subs	r0, r0, r7
 8001554:	2802      	cmp	r0, #2
 8001556:	d9c5      	bls.n	80014e4 <HAL_RCC_OscConfig+0x294>
 8001558:	e6ca      	b.n	80012f0 <HAL_RCC_OscConfig+0xa0>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800155a:	f7fe ff03 	bl	8000364 <HAL_GetTick>
 800155e:	1b00      	subs	r0, r0, r4
 8001560:	2802      	cmp	r0, #2
 8001562:	d9ef      	bls.n	8001544 <HAL_RCC_OscConfig+0x2f4>
 8001564:	e6c4      	b.n	80012f0 <HAL_RCC_OscConfig+0xa0>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001566:	f7fe fefd 	bl	8000364 <HAL_GetTick>
 800156a:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800156c:	682b      	ldr	r3, [r5, #0]
 800156e:	019b      	lsls	r3, r3, #6
 8001570:	d5eb      	bpl.n	800154a <HAL_RCC_OscConfig+0x2fa>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001572:	f7fe fef7 	bl	8000364 <HAL_GetTick>
 8001576:	1b00      	subs	r0, r0, r4
 8001578:	2802      	cmp	r0, #2
 800157a:	d9f7      	bls.n	800156c <HAL_RCC_OscConfig+0x31c>
 800157c:	e6b8      	b.n	80012f0 <HAL_RCC_OscConfig+0xa0>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800157e:	b003      	add	sp, #12
 8001580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001582:	bf00      	nop
 8001584:	40023800 	.word	0x40023800

08001588 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001588:	491b      	ldr	r1, [pc, #108]	; (80015f8 <HAL_RCC_GetSysClockFreq+0x70>)
 800158a:	688b      	ldr	r3, [r1, #8]
 800158c:	f003 030c 	and.w	r3, r3, #12
 8001590:	2b04      	cmp	r3, #4
 8001592:	d02c      	beq.n	80015ee <HAL_RCC_GetSysClockFreq+0x66>
 8001594:	2b08      	cmp	r3, #8
 8001596:	d12c      	bne.n	80015f2 <HAL_RCC_GetSysClockFreq+0x6a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001598:	6848      	ldr	r0, [r1, #4]
 800159a:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800159e:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015a0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80015a4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80015a8:	684b      	ldr	r3, [r1, #4]
 80015aa:	fa92 f2a2 	rbit	r2, r2
 80015ae:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80015b2:	fab2 f282 	clz	r2, r2
 80015b6:	ea01 0103 	and.w	r1, r1, r3
 80015ba:	fa21 f102 	lsr.w	r1, r1, r2
 80015be:	bf14      	ite	ne
 80015c0:	4a0e      	ldrne	r2, [pc, #56]	; (80015fc <HAL_RCC_GetSysClockFreq+0x74>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80015c2:	4a0f      	ldreq	r2, [pc, #60]	; (8001600 <HAL_RCC_GetSysClockFreq+0x78>)
 80015c4:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 80015c8:	4a0b      	ldr	r2, [pc, #44]	; (80015f8 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80015ca:	fb00 f301 	mul.w	r3, r0, r1
 80015ce:	f44f 3040 	mov.w	r0, #196608	; 0x30000
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 80015d2:	6852      	ldr	r2, [r2, #4]
 80015d4:	fa90 f0a0 	rbit	r0, r0
      
      sysclockfreq = pllvco/pllp;
 80015d8:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 80015dc:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 80015e0:	fa22 f000 	lsr.w	r0, r2, r0
 80015e4:	3001      	adds	r0, #1
 80015e6:	0040      	lsls	r0, r0, #1
 80015e8:	fbb3 f0f0 	udiv	r0, r3, r0
 80015ec:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015ee:	4803      	ldr	r0, [pc, #12]	; (80015fc <HAL_RCC_GetSysClockFreq+0x74>)
 80015f0:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015f2:	4803      	ldr	r0, [pc, #12]	; (8001600 <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800
 80015fc:	017d7840 	.word	0x017d7840
 8001600:	00f42400 	.word	0x00f42400

08001604 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001604:	4a50      	ldr	r2, [pc, #320]	; (8001748 <HAL_RCC_ClockConfig+0x144>)
 8001606:	6813      	ldr	r3, [r2, #0]
 8001608:	f003 030f 	and.w	r3, r3, #15
 800160c:	428b      	cmp	r3, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800160e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001612:	4604      	mov	r4, r0
 8001614:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001616:	d30a      	bcc.n	800162e <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
  
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001618:	6821      	ldr	r1, [r4, #0]
 800161a:	0788      	lsls	r0, r1, #30
 800161c:	d514      	bpl.n	8001648 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800161e:	484b      	ldr	r0, [pc, #300]	; (800174c <HAL_RCC_ClockConfig+0x148>)
 8001620:	6883      	ldr	r3, [r0, #8]
 8001622:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001626:	68a3      	ldr	r3, [r4, #8]
 8001628:	4313      	orrs	r3, r2
 800162a:	6083      	str	r3, [r0, #8]
 800162c:	e00c      	b.n	8001648 <HAL_RCC_ClockConfig+0x44>
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800162e:	6813      	ldr	r3, [r2, #0]
 8001630:	f023 030f 	bic.w	r3, r3, #15
 8001634:	430b      	orrs	r3, r1
 8001636:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001638:	6813      	ldr	r3, [r2, #0]
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	4299      	cmp	r1, r3
 8001640:	d0ea      	beq.n	8001618 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8001642:	2001      	movs	r0, #1
 8001644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001648:	07c9      	lsls	r1, r1, #31
 800164a:	d406      	bmi.n	800165a <HAL_RCC_ClockConfig+0x56>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800164c:	4a3e      	ldr	r2, [pc, #248]	; (8001748 <HAL_RCC_ClockConfig+0x144>)
 800164e:	6813      	ldr	r3, [r2, #0]
 8001650:	f003 030f 	and.w	r3, r3, #15
 8001654:	429d      	cmp	r5, r3
 8001656:	d342      	bcc.n	80016de <HAL_RCC_ClockConfig+0xda>
 8001658:	e04b      	b.n	80016f2 <HAL_RCC_ClockConfig+0xee>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800165a:	6862      	ldr	r2, [r4, #4]
 800165c:	4b3b      	ldr	r3, [pc, #236]	; (800174c <HAL_RCC_ClockConfig+0x148>)
 800165e:	2a01      	cmp	r2, #1
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001660:	6819      	ldr	r1, [r3, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001662:	d102      	bne.n	800166a <HAL_RCC_ClockConfig+0x66>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001664:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 8001668:	e006      	b.n	8001678 <HAL_RCC_ClockConfig+0x74>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800166a:	2a02      	cmp	r2, #2
 800166c:	d102      	bne.n	8001674 <HAL_RCC_ClockConfig+0x70>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166e:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 8001672:	e001      	b.n	8001678 <HAL_RCC_ClockConfig+0x74>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001674:	f011 0f02 	tst.w	r1, #2
 8001678:	d0e3      	beq.n	8001642 <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800167a:	6899      	ldr	r1, [r3, #8]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800167c:	f241 3888 	movw	r8, #5000	; 0x1388
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001680:	4f32      	ldr	r7, [pc, #200]	; (800174c <HAL_RCC_ClockConfig+0x148>)
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001682:	f021 0103 	bic.w	r1, r1, #3
 8001686:	430a      	orrs	r2, r1
 8001688:	609a      	str	r2, [r3, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800168a:	f7fe fe6b 	bl	8000364 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800168e:	6863      	ldr	r3, [r4, #4]
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001690:	4606      	mov	r6, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001692:	2b01      	cmp	r3, #1
 8001694:	d10c      	bne.n	80016b0 <HAL_RCC_ClockConfig+0xac>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	f003 030c 	and.w	r3, r3, #12
 800169c:	2b04      	cmp	r3, #4
 800169e:	d0d5      	beq.n	800164c <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a0:	f7fe fe60 	bl	8000364 <HAL_GetTick>
 80016a4:	1b80      	subs	r0, r0, r6
 80016a6:	4540      	cmp	r0, r8
 80016a8:	d9f5      	bls.n	8001696 <HAL_RCC_ClockConfig+0x92>
        {
          return HAL_TIMEOUT;
 80016aa:	2003      	movs	r0, #3
 80016ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d10f      	bne.n	80016d4 <HAL_RCC_ClockConfig+0xd0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	f003 030c 	and.w	r3, r3, #12
 80016ba:	2b08      	cmp	r3, #8
 80016bc:	d0c6      	beq.n	800164c <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016be:	f7fe fe51 	bl	8000364 <HAL_GetTick>
 80016c2:	1b80      	subs	r0, r0, r6
 80016c4:	4540      	cmp	r0, r8
 80016c6:	d9f5      	bls.n	80016b4 <HAL_RCC_ClockConfig+0xb0>
 80016c8:	e7ef      	b.n	80016aa <HAL_RCC_ClockConfig+0xa6>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ca:	f7fe fe4b 	bl	8000364 <HAL_GetTick>
 80016ce:	1b80      	subs	r0, r0, r6
 80016d0:	4540      	cmp	r0, r8
 80016d2:	d8ea      	bhi.n	80016aa <HAL_RCC_ClockConfig+0xa6>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	f013 0f0c 	tst.w	r3, #12
 80016da:	d1f6      	bne.n	80016ca <HAL_RCC_ClockConfig+0xc6>
 80016dc:	e7b6      	b.n	800164c <HAL_RCC_ClockConfig+0x48>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016de:	6813      	ldr	r3, [r2, #0]
 80016e0:	f023 030f 	bic.w	r3, r3, #15
 80016e4:	432b      	orrs	r3, r5
 80016e6:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016e8:	6813      	ldr	r3, [r2, #0]
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	429d      	cmp	r5, r3
 80016f0:	d1a7      	bne.n	8001642 <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f2:	6821      	ldr	r1, [r4, #0]
 80016f4:	074a      	lsls	r2, r1, #29
 80016f6:	d506      	bpl.n	8001706 <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016f8:	4814      	ldr	r0, [pc, #80]	; (800174c <HAL_RCC_ClockConfig+0x148>)
 80016fa:	6883      	ldr	r3, [r0, #8]
 80016fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001700:	68e3      	ldr	r3, [r4, #12]
 8001702:	4313      	orrs	r3, r2
 8001704:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001706:	070b      	lsls	r3, r1, #28
 8001708:	d507      	bpl.n	800171a <HAL_RCC_ClockConfig+0x116>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800170a:	4a10      	ldr	r2, [pc, #64]	; (800174c <HAL_RCC_ClockConfig+0x148>)
 800170c:	6921      	ldr	r1, [r4, #16]
 800170e:	6893      	ldr	r3, [r2, #8]
 8001710:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001714:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001718:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800171a:	f7ff ff35 	bl	8001588 <HAL_RCC_GetSysClockFreq>
 800171e:	4b0b      	ldr	r3, [pc, #44]	; (800174c <HAL_RCC_ClockConfig+0x148>)
 8001720:	22f0      	movs	r2, #240	; 0xf0
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	fa92 f2a2 	rbit	r2, r2
 8001728:	fab2 f282 	clz	r2, r2
 800172c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001730:	40d3      	lsrs	r3, r2
 8001732:	4a07      	ldr	r2, [pc, #28]	; (8001750 <HAL_RCC_ClockConfig+0x14c>)
 8001734:	5cd3      	ldrb	r3, [r2, r3]
 8001736:	40d8      	lsrs	r0, r3
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_RCC_ClockConfig+0x150>)
 800173a:	6018      	str	r0, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800173c:	2000      	movs	r0, #0
 800173e:	f7fe fde9 	bl	8000314 <HAL_InitTick>
  
  return HAL_OK;
 8001742:	2000      	movs	r0, #0
}
 8001744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001748:	40023c00 	.word	0x40023c00
 800174c:	40023800 	.word	0x40023800
 8001750:	080074b0 	.word	0x080074b0
 8001754:	20000018 	.word	0x20000018

08001758 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001758:	4b01      	ldr	r3, [pc, #4]	; (8001760 <HAL_RCC_GetHCLKFreq+0x8>)
 800175a:	6818      	ldr	r0, [r3, #0]
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000018 	.word	0x20000018

08001764 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001766:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	fa92 f2a2 	rbit	r2, r2
 8001770:	fab2 f282 	clz	r2, r2
 8001774:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001778:	40d3      	lsrs	r3, r2
 800177a:	4a04      	ldr	r2, [pc, #16]	; (800178c <HAL_RCC_GetPCLK1Freq+0x28>)
 800177c:	5cd3      	ldrb	r3, [r2, r3]
 800177e:	4a04      	ldr	r2, [pc, #16]	; (8001790 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001780:	6810      	ldr	r0, [r2, #0]
}
 8001782:	40d8      	lsrs	r0, r3
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	40023800 	.word	0x40023800
 800178c:	080074c0 	.word	0x080074c0
 8001790:	20000018 	.word	0x20000018

08001794 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001796:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	fa92 f2a2 	rbit	r2, r2
 80017a0:	fab2 f282 	clz	r2, r2
 80017a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80017a8:	40d3      	lsrs	r3, r2
 80017aa:	4a04      	ldr	r2, [pc, #16]	; (80017bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80017ac:	5cd3      	ldrb	r3, [r2, r3]
 80017ae:	4a04      	ldr	r2, [pc, #16]	; (80017c0 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80017b0:	6810      	ldr	r0, [r2, #0]
} 
 80017b2:	40d8      	lsrs	r0, r3
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
 80017bc:	080074c0 	.word	0x080074c0
 80017c0:	20000018 	.word	0x20000018

080017c4 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80017c4:	6803      	ldr	r3, [r0, #0]
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80017c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80017ca:	f013 0601 	ands.w	r6, r3, #1
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80017ce:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80017d0:	d00b      	beq.n	80017ea <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80017d2:	4ab6      	ldr	r2, [pc, #728]	; (8001aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80017d4:	6891      	ldr	r1, [r2, #8]
 80017d6:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80017da:	6091      	str	r1, [r2, #8]
 80017dc:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80017de:	6891      	ldr	r1, [r2, #8]
 80017e0:	4331      	orrs	r1, r6
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tickstart = 0;
  uint32_t tmpreg0 = 0;
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
 80017e2:	fab6 f686 	clz	r6, r6
 80017e6:	0976      	lsrs	r6, r6, #5
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80017e8:	6091      	str	r1, [r2, #8]
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80017ea:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 80017ee:	d012      	beq.n	8001816 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80017f0:	49ae      	ldr	r1, [pc, #696]	; (8001aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80017f2:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80017f4:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80017f8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80017fc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
    {
      plli2sused = 1; 
 8001800:	bf08      	it	eq
 8001802:	2601      	moveq	r6, #1
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001804:	ea42 0205 	orr.w	r2, r2, r5
{
  uint32_t tickstart = 0;
  uint32_t tmpreg0 = 0;
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;
 8001808:	bf16      	itet	ne
 800180a:	fab5 f585 	clzne	r5, r5
 800180e:	2500      	moveq	r5, #0
 8001810:	096d      	lsrne	r5, r5, #5
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001812:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001816:	02d8      	lsls	r0, r3, #11
 8001818:	d511      	bpl.n	800183e <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800181a:	48a4      	ldr	r0, [pc, #656]	; (8001aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800181c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800181e:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001822:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001826:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800182a:	ea42 0201 	orr.w	r2, r2, r1
 800182e:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001832:	d003      	beq.n	800183c <HAL_RCCEx_PeriphCLKConfig+0x78>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 8001834:	2900      	cmp	r1, #0
 8001836:	bf08      	it	eq
 8001838:	2501      	moveq	r5, #1
 800183a:	e000      	b.n	800183e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1; 
 800183c:	2601      	movs	r6, #1
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {    
      plli2sused = 1; 
 800183e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001842:	bf18      	it	ne
 8001844:	2601      	movne	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001846:	0699      	lsls	r1, r3, #26
 8001848:	d55d      	bpl.n	8001906 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800184a:	4b98      	ldr	r3, [pc, #608]	; (8001aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800184c:	4f98      	ldr	r7, [pc, #608]	; (8001ab0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800184e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001850:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001854:	641a      	str	r2, [r3, #64]	; 0x40
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185c:	9301      	str	r3, [sp, #4]
 800185e:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001866:	603b      	str	r3, [r7, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001868:	f7fe fd7c 	bl	8000364 <HAL_GetTick>
 800186c:	4680      	mov	r8, r0
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	05da      	lsls	r2, r3, #23
 8001872:	d407      	bmi.n	8001884 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001874:	f7fe fd76 	bl	8000364 <HAL_GetTick>
 8001878:	ebc8 0000 	rsb	r0, r8, r0
 800187c:	2864      	cmp	r0, #100	; 0x64
 800187e:	d9f6      	bls.n	800186e <HAL_RCCEx_PeriphCLKConfig+0xaa>
      {
        return HAL_TIMEOUT;
 8001880:	2003      	movs	r0, #3
 8001882:	e340      	b.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x742>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001884:	4f89      	ldr	r7, [pc, #548]	; (8001aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001886:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001888:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800188c:	d10f      	bne.n	80018ae <HAL_RCCEx_PeriphCLKConfig+0xea>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800188e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001890:	f402 7340 	and.w	r3, r2, #768	; 0x300
 8001894:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001898:	4b84      	ldr	r3, [pc, #528]	; (8001aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800189a:	d12b      	bne.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
 800189c:	6899      	ldr	r1, [r3, #8]
 800189e:	f421 10f8 	bic.w	r0, r1, #2031616	; 0x1f0000
 80018a2:	f022 4170 	bic.w	r1, r2, #4026531840	; 0xf0000000
 80018a6:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80018aa:	4301      	orrs	r1, r0
 80018ac:	e025      	b.n	80018fa <HAL_RCCEx_PeriphCLKConfig+0x136>
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018ae:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80018b0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d0ea      	beq.n	800188e <HAL_RCCEx_PeriphCLKConfig+0xca>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80018ba:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80018c0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80018c4:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80018c6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80018c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80018cc:	673a      	str	r2, [r7, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80018ce:	673b      	str	r3, [r7, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80018d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018d2:	07db      	lsls	r3, r3, #31
 80018d4:	d5db      	bpl.n	800188e <HAL_RCCEx_PeriphCLKConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d6:	f7fe fd45 	bl	8000364 <HAL_GetTick>
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018da:	f241 3988 	movw	r9, #5000	; 0x1388

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018de:	4680      	mov	r8, r0
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018e2:	0798      	lsls	r0, r3, #30
 80018e4:	d4d3      	bmi.n	800188e <HAL_RCCEx_PeriphCLKConfig+0xca>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e6:	f7fe fd3d 	bl	8000364 <HAL_GetTick>
 80018ea:	ebc8 0000 	rsb	r0, r8, r0
 80018ee:	4548      	cmp	r0, r9
 80018f0:	d9f6      	bls.n	80018e0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80018f2:	e7c5      	b.n	8001880 <HAL_RCCEx_PeriphCLKConfig+0xbc>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80018f4:	6899      	ldr	r1, [r3, #8]
 80018f6:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80018fa:	6099      	str	r1, [r3, #8]
 80018fc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001900:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001902:	430a      	orrs	r2, r1
 8001904:	671a      	str	r2, [r3, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001906:	6823      	ldr	r3, [r4, #0]
 8001908:	06d9      	lsls	r1, r3, #27
 800190a:	d50c      	bpl.n	8001926 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800190c:	4a67      	ldr	r2, [pc, #412]	; (8001aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800190e:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001912:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001916:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 800191a:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 800191e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001920:	4301      	orrs	r1, r0
 8001922:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001926:	045a      	lsls	r2, r3, #17
 8001928:	d508      	bpl.n	800193c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800192a:	4860      	ldr	r0, [pc, #384]	; (8001aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800192c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001930:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8001934:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001936:	430a      	orrs	r2, r1
 8001938:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800193c:	041f      	lsls	r7, r3, #16
 800193e:	d508      	bpl.n	8001952 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001940:	485a      	ldr	r0, [pc, #360]	; (8001aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001942:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001946:	f422 2140 	bic.w	r1, r2, #786432	; 0xc0000
 800194a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800194c:	430a      	orrs	r2, r1
 800194e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001952:	03d8      	lsls	r0, r3, #15
 8001954:	d508      	bpl.n	8001968 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001956:	4855      	ldr	r0, [pc, #340]	; (8001aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001958:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800195c:	f422 1140 	bic.w	r1, r2, #3145728	; 0x300000
 8001960:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001962:	430a      	orrs	r2, r1
 8001964:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001968:	0399      	lsls	r1, r3, #14
 800196a:	d508      	bpl.n	800197e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800196c:	484f      	ldr	r0, [pc, #316]	; (8001aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800196e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001972:	f422 0140 	bic.w	r1, r2, #12582912	; 0xc00000
 8001976:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8001978:	430a      	orrs	r2, r1
 800197a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800197e:	065a      	lsls	r2, r3, #25
 8001980:	d508      	bpl.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001982:	484a      	ldr	r0, [pc, #296]	; (8001aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001984:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001988:	f022 0103 	bic.w	r1, r2, #3
 800198c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800198e:	430a      	orrs	r2, r1
 8001990:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001994:	061f      	lsls	r7, r3, #24
 8001996:	d508      	bpl.n	80019aa <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001998:	4844      	ldr	r0, [pc, #272]	; (8001aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800199a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800199e:	f022 010c 	bic.w	r1, r2, #12
 80019a2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80019a4:	430a      	orrs	r2, r1
 80019a6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80019aa:	05d8      	lsls	r0, r3, #23
 80019ac:	d508      	bpl.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80019ae:	483f      	ldr	r0, [pc, #252]	; (8001aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80019b0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80019b4:	f022 0130 	bic.w	r1, r2, #48	; 0x30
 80019b8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80019ba:	430a      	orrs	r2, r1
 80019bc:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80019c0:	0599      	lsls	r1, r3, #22
 80019c2:	d508      	bpl.n	80019d6 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80019c4:	4839      	ldr	r0, [pc, #228]	; (8001aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80019c6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80019ca:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 80019ce:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80019d0:	430a      	orrs	r2, r1
 80019d2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80019d6:	055a      	lsls	r2, r3, #21
 80019d8:	d508      	bpl.n	80019ec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80019da:	4834      	ldr	r0, [pc, #208]	; (8001aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80019dc:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80019e0:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 80019e4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80019e6:	430a      	orrs	r2, r1
 80019e8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80019ec:	051f      	lsls	r7, r3, #20
 80019ee:	d508      	bpl.n	8001a02 <HAL_RCCEx_PeriphCLKConfig+0x23e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80019f0:	482e      	ldr	r0, [pc, #184]	; (8001aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80019f2:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80019f6:	f422 6140 	bic.w	r1, r2, #3072	; 0xc00
 80019fa:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80019fc:	430a      	orrs	r2, r1
 80019fe:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001a02:	04d8      	lsls	r0, r3, #19
 8001a04:	d508      	bpl.n	8001a18 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001a06:	4829      	ldr	r0, [pc, #164]	; (8001aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001a08:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001a0c:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8001a10:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001a12:	430a      	orrs	r2, r1
 8001a14:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001a18:	0499      	lsls	r1, r3, #18
 8001a1a:	d508      	bpl.n	8001a2e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001a1c:	4823      	ldr	r0, [pc, #140]	; (8001aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001a1e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001a22:	f422 4140 	bic.w	r1, r2, #49152	; 0xc000
 8001a26:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001a2e:	025a      	lsls	r2, r3, #9
 8001a30:	d508      	bpl.n	8001a44 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001a32:	481e      	ldr	r0, [pc, #120]	; (8001aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001a34:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001a38:	f022 6180 	bic.w	r1, r2, #67108864	; 0x4000000
 8001a3c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001a44:	029f      	lsls	r7, r3, #10
 8001a46:	d50c      	bpl.n	8001a62 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001a48:	4818      	ldr	r0, [pc, #96]	; (8001aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001a4a:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001a4c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 8001a50:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001a54:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 8001a58:	bf08      	it	eq
 8001a5a:	2501      	moveq	r5, #1
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1; 
 8001a62:	f013 0f08 	tst.w	r3, #8
 8001a66:	bf18      	it	ne
 8001a68:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001a6a:	0358      	lsls	r0, r3, #13
 8001a6c:	d508      	bpl.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001a6e:	480f      	ldr	r0, [pc, #60]	; (8001aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001a70:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001a74:	f022 7140 	bic.w	r1, r2, #50331648	; 0x3000000
 8001a78:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001a80:	0219      	lsls	r1, r3, #8
 8001a82:	d509      	bpl.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001a84:	4809      	ldr	r0, [pc, #36]	; (8001aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001a86:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001a8a:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8001a8e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8001a92:	430a      	orrs	r2, r1
 8001a94:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001a98:	2e01      	cmp	r6, #1
 8001a9a:	d00b      	beq.n	8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8001a9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001aa0:	d008      	beq.n	8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001aa2:	2d01      	cmp	r5, #1
 8001aa4:	f040 818c 	bne.w	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8001aa8:	e123      	b.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40007000 	.word	0x40007000
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();  
 8001ab4:	4ec8      	ldr	r6, [pc, #800]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8001ab6:	6833      	ldr	r3, [r6, #0]
 8001ab8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001abc:	6033      	str	r3, [r6, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001abe:	f7fe fc51 	bl	8000364 <HAL_GetTick>
 8001ac2:	4607      	mov	r7, r0
    
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ac4:	6833      	ldr	r3, [r6, #0]
 8001ac6:	f8df e310 	ldr.w	lr, [pc, #784]	; 8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8001aca:	011a      	lsls	r2, r3, #4
 8001acc:	d505      	bpl.n	8001ada <HAL_RCCEx_PeriphCLKConfig+0x316>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001ace:	f7fe fc49 	bl	8000364 <HAL_GetTick>
 8001ad2:	1bc0      	subs	r0, r0, r7
 8001ad4:	2864      	cmp	r0, #100	; 0x64
 8001ad6:	d9f5      	bls.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8001ad8:	e6d2      	b.n	8001880 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001ada:	6827      	ldr	r7, [r4, #0]
 8001adc:	07fb      	lsls	r3, r7, #31
 8001ade:	d53c      	bpl.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x396>
 8001ae0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001ae2:	bbd3      	cbnz	r3, 8001b5a <HAL_RCCEx_PeriphCLKConfig+0x396>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8001ae4:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 8001ae8:	f44f 3840 	mov.w	r8, #196608	; 0x30000
 8001aec:	fa98 f9a8 	rbit	r9, r8
 8001af0:	f04f 6670 	mov.w	r6, #251658240	; 0xf000000
 8001af4:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8001af8:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 8001afc:	fa96 fca6 	rbit	ip, r6
 8001b00:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 8001b04:	fabc fc8c 	clz	ip, ip
 8001b08:	fa9a faaa 	rbit	sl, sl
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001b0c:	faba fa8a 	clz	sl, sl
 8001b10:	fa98 f8a8 	rbit	r8, r8
 8001b14:	fab8 f888 	clz	r8, r8
 8001b18:	fa96 f6a6 	rbit	r6, r6
 8001b1c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8001b20:	fab6 f686 	clz	r6, r6
 8001b24:	fa93 f3a3 	rbit	r3, r3
 8001b28:	fab3 fb83 	clz	fp, r3
 8001b2c:	6861      	ldr	r1, [r4, #4]
 8001b2e:	68a3      	ldr	r3, [r4, #8]
 8001b30:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8001b34:	fa01 f10a 	lsl.w	r1, r1, sl
 8001b38:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001b3c:	fa03 f30b 	lsl.w	r3, r3, fp
 8001b40:	fa20 f009 	lsr.w	r0, r0, r9
 8001b44:	fa22 f20c 	lsr.w	r2, r2, ip
 8001b48:	430b      	orrs	r3, r1
 8001b4a:	fa00 f108 	lsl.w	r1, r0, r8
 8001b4e:	4319      	orrs	r1, r3
 8001b50:	fa02 f306 	lsl.w	r3, r2, r6
 8001b54:	430b      	orrs	r3, r1
 8001b56:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
    }
        
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001b5a:	033e      	lsls	r6, r7, #12
 8001b5c:	d503      	bpl.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8001b5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b64:	d005      	beq.n	8001b72 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8001b66:	02f8      	lsls	r0, r7, #11
 8001b68:	d549      	bpl.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x43a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8001b6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b70:	d145      	bne.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x43a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8001b72:	f8df e264 	ldr.w	lr, [pc, #612]	; 8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8001b76:	f44f 3840 	mov.w	r8, #196608	; 0x30000
 8001b7a:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 8001b7e:	fa98 f9a8 	rbit	r9, r8
 8001b82:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8001b86:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8001b8a:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 8001b8e:	fa96 fca6 	rbit	ip, r6
 8001b92:	f647 7bc0 	movw	fp, #32704	; 0x7fc0
 8001b96:	fabc fc8c 	clz	ip, ip
 8001b9a:	fa9b fbab 	rbit	fp, fp
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001b9e:	fabb fb8b 	clz	fp, fp
 8001ba2:	fa98 f8a8 	rbit	r8, r8
 8001ba6:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8001baa:	fab8 f888 	clz	r8, r8
 8001bae:	fa93 f3a3 	rbit	r3, r3
 8001bb2:	fab3 fa83 	clz	sl, r3
 8001bb6:	fa96 f6a6 	rbit	r6, r6
 8001bba:	6863      	ldr	r3, [r4, #4]
 8001bbc:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8001bc0:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8001bc4:	fab6 f686 	clz	r6, r6
 8001bc8:	fa03 f10b 	lsl.w	r1, r3, fp
 8001bcc:	68e3      	ldr	r3, [r4, #12]
 8001bce:	fa20 f009 	lsr.w	r0, r0, r9
 8001bd2:	fa22 f20c 	lsr.w	r2, r2, ip
 8001bd6:	fa03 f30a 	lsl.w	r3, r3, sl
 8001bda:	430b      	orrs	r3, r1
 8001bdc:	fa00 f108 	lsl.w	r1, r0, r8
 8001be0:	4319      	orrs	r1, r3
 8001be2:	fa02 f306 	lsl.w	r3, r2, r6
 8001be6:	430b      	orrs	r3, r1
 8001be8:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8001bec:	f8de 308c 	ldr.w	r3, [lr, #140]	; 0x8c
 8001bf0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001bf2:	f023 031f 	bic.w	r3, r3, #31
 8001bf6:	3a01      	subs	r2, #1
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	f8ce 308c 	str.w	r3, [lr, #140]	; 0x8c
    }          

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001bfe:	01f9      	lsls	r1, r7, #7
 8001c00:	d53c      	bpl.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8001c02:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8001c06:	f04f 6870 	mov.w	r8, #251658240	; 0xf000000
 8001c0a:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 8001c0e:	fa98 f9a8 	rbit	r9, r8
 8001c12:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8001c16:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8001c1a:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 8001c1e:	fa96 fca6 	rbit	ip, r6
 8001c22:	f647 7bc0 	movw	fp, #32704	; 0x7fc0
 8001c26:	fabc fc8c 	clz	ip, ip
 8001c2a:	fa9b fbab 	rbit	fp, fp
 8001c2e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001c32:	fabb fb8b 	clz	fp, fp
 8001c36:	fa93 f3a3 	rbit	r3, r3
 8001c3a:	fab3 fa83 	clz	sl, r3
 8001c3e:	fa98 f8a8 	rbit	r8, r8
 8001c42:	fab8 f888 	clz	r8, r8
 8001c46:	fa96 f6a6 	rbit	r6, r6
 8001c4a:	6863      	ldr	r3, [r4, #4]
 8001c4c:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8001c50:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8001c54:	fab6 f686 	clz	r6, r6
 8001c58:	fa03 f10b 	lsl.w	r1, r3, fp
 8001c5c:	6923      	ldr	r3, [r4, #16]
 8001c5e:	fa20 f009 	lsr.w	r0, r0, r9
 8001c62:	fa22 f20c 	lsr.w	r2, r2, ip
 8001c66:	fa03 f30a 	lsl.w	r3, r3, sl
 8001c6a:	430b      	orrs	r3, r1
 8001c6c:	fa00 f108 	lsl.w	r1, r0, r8
 8001c70:	4319      	orrs	r1, r3
 8001c72:	fa02 f306 	lsl.w	r3, r2, r6
 8001c76:	430b      	orrs	r3, r1
 8001c78:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
    }  
         
    /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001c7c:	01ba      	lsls	r2, r7, #6
 8001c7e:	d526      	bpl.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8001c80:	f647 7ec0 	movw	lr, #32704	; 0x7fc0
 8001c84:	fa9e feae 	rbit	lr, lr
 8001c88:	f44f 3040 	mov.w	r0, #196608	; 0x30000
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c8c:	fabe fe8e 	clz	lr, lr
 8001c90:	fa90 f0a0 	rbit	r0, r0
 8001c94:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8001c98:	fab0 f780 	clz	r7, r0
 8001c9c:	fa92 f2a2 	rbit	r2, r2
 8001ca0:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8001ca4:	fab2 f682 	clz	r6, r2
 8001ca8:	fa93 f3a3 	rbit	r3, r3
 8001cac:	fab3 f183 	clz	r1, r3
 8001cb0:	6920      	ldr	r0, [r4, #16]
 8001cb2:	6863      	ldr	r3, [r4, #4]
 8001cb4:	68e2      	ldr	r2, [r4, #12]
 8001cb6:	40b8      	lsls	r0, r7
 8001cb8:	fa03 f30e 	lsl.w	r3, r3, lr
 8001cbc:	40b2      	lsls	r2, r6
 8001cbe:	4303      	orrs	r3, r0
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	68a3      	ldr	r3, [r4, #8]
 8001cc4:	408b      	lsls	r3, r1
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	4a43      	ldr	r2, [pc, #268]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8001cca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    } 
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001cce:	4e42      	ldr	r6, [pc, #264]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8001cd0:	6833      	ldr	r3, [r6, #0]
 8001cd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001cd6:	6033      	str	r3, [r6, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cd8:	f7fe fb44 	bl	8000364 <HAL_GetTick>
 8001cdc:	4607      	mov	r7, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001cde:	6833      	ldr	r3, [r6, #0]
 8001ce0:	011b      	lsls	r3, r3, #4
 8001ce2:	f53f aede 	bmi.w	8001aa2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001ce6:	f7fe fb3d 	bl	8000364 <HAL_GetTick>
 8001cea:	1bc0      	subs	r0, r0, r7
 8001cec:	2864      	cmp	r0, #100	; 0x64
 8001cee:	d9f6      	bls.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8001cf0:	e5c6      	b.n	8001880 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8001cf2:	4d39      	ldr	r5, [pc, #228]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8001cf4:	682b      	ldr	r3, [r5, #0]
 8001cf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	602b      	str	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cfc:	f7fe fb32 	bl	8000364 <HAL_GetTick>
 8001d00:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001d02:	682b      	ldr	r3, [r5, #0]
 8001d04:	009f      	lsls	r7, r3, #2
 8001d06:	d45d      	bmi.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x600>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001d08:	6825      	ldr	r5, [r4, #0]
 8001d0a:	032e      	lsls	r6, r5, #12
 8001d0c:	d460      	bmi.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8001d0e:	02e8      	lsls	r0, r5, #11
 8001d10:	d464      	bmi.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x618>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001d12:	02a9      	lsls	r1, r5, #10
 8001d14:	f100 80ad 	bmi.w	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001d18:	072a      	lsls	r2, r5, #28
 8001d1a:	d545      	bpl.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8001d1c:	4f2e      	ldr	r7, [pc, #184]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8001d1e:	f04f 6570 	mov.w	r5, #251658240	; 0xf000000
 8001d22:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001d26:	fa95 fca5 	rbit	ip, r5
 8001d2a:	f44f 3640 	mov.w	r6, #196608	; 0x30000
 8001d2e:	fabc fc8c 	clz	ip, ip
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8001d32:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001d36:	fa96 f8a6 	rbit	r8, r6
 8001d3a:	f647 79c0 	movw	r9, #32704	; 0x7fc0
 8001d3e:	fab8 f888 	clz	r8, r8
 8001d42:	fa99 f9a9 	rbit	r9, r9
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001d46:	fab9 f989 	clz	r9, r9
 8001d4a:	fa96 f6a6 	rbit	r6, r6
 8001d4e:	fab6 f686 	clz	r6, r6
 8001d52:	fa95 f5a5 	rbit	r5, r5
 8001d56:	f04f 4ee0 	mov.w	lr, #1879048192	; 0x70000000
 8001d5a:	fab5 f585 	clz	r5, r5
 8001d5e:	fa9e feae 	rbit	lr, lr
 8001d62:	6963      	ldr	r3, [r4, #20]
 8001d64:	fabe fe8e 	clz	lr, lr
 8001d68:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8001d6c:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001d70:	fa03 f109 	lsl.w	r1, r3, r9
 8001d74:	69e3      	ldr	r3, [r4, #28]
 8001d76:	fa20 f008 	lsr.w	r0, r0, r8
 8001d7a:	fa22 f20c 	lsr.w	r2, r2, ip
 8001d7e:	fa03 fe0e 	lsl.w	lr, r3, lr
 8001d82:	fa02 f305 	lsl.w	r3, r2, r5
 8001d86:	ea41 0e0e 	orr.w	lr, r1, lr
 8001d8a:	fa00 f106 	lsl.w	r1, r0, r6
 8001d8e:	ea4e 0101 	orr.w	r1, lr, r1
 8001d92:	430b      	orrs	r3, r1
 8001d94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001d98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001da0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001da2:	4313      	orrs	r3, r2
 8001da4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001da8:	4c0b      	ldr	r4, [pc, #44]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8001daa:	6823      	ldr	r3, [r4, #0]
 8001dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db0:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001db2:	f7fe fad7 	bl	8000364 <HAL_GetTick>
 8001db6:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001db8:	6823      	ldr	r3, [r4, #0]
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	f140 809c 	bpl.w	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x734>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	e0a0      	b.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x742>
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001dc4:	f7fe face 	bl	8000364 <HAL_GetTick>
 8001dc8:	1b80      	subs	r0, r0, r6
 8001dca:	2864      	cmp	r0, #100	; 0x64
 8001dcc:	d999      	bls.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x53e>
 8001dce:	e557      	b.n	8001880 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001dd0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001dd2:	b133      	cbz	r3, 8001de2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
 8001dd4:	e79b      	b.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8001dd6:	bf00      	nop
 8001dd8:	40023800 	.word	0x40023800
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001ddc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d197      	bne.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x54e>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8001de2:	4f4a      	ldr	r7, [pc, #296]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x748>)
 8001de4:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
 8001de8:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001dec:	fa9c f9ac 	rbit	r9, ip
 8001df0:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8001df4:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8001df8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001dfc:	fa96 fea6 	rbit	lr, r6
 8001e00:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 8001e04:	fabe fe8e 	clz	lr, lr
 8001e08:	fa9a faaa 	rbit	sl, sl
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001e0c:	faba fa8a 	clz	sl, sl
 8001e10:	fa9c fcac 	rbit	ip, ip
 8001e14:	f04f 6870 	mov.w	r8, #251658240	; 0xf000000
 8001e18:	fabc fc8c 	clz	ip, ip
 8001e1c:	fa98 f8a8 	rbit	r8, r8
 8001e20:	fab8 f888 	clz	r8, r8
 8001e24:	fa96 f6a6 	rbit	r6, r6
 8001e28:	69a1      	ldr	r1, [r4, #24]
 8001e2a:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8001e2e:	6963      	ldr	r3, [r4, #20]
 8001e30:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8001e34:	fa01 f808 	lsl.w	r8, r1, r8
 8001e38:	fa20 f009 	lsr.w	r0, r0, r9
 8001e3c:	fa03 f30a 	lsl.w	r3, r3, sl
 8001e40:	fa22 f20e 	lsr.w	r2, r2, lr
 8001e44:	fab6 f686 	clz	r6, r6
 8001e48:	fa00 f10c 	lsl.w	r1, r0, ip
 8001e4c:	ea43 0308 	orr.w	r3, r3, r8
 8001e50:	4319      	orrs	r1, r3
 8001e52:	fa02 f306 	lsl.w	r3, r2, r6
 8001e56:	430b      	orrs	r3, r1
 8001e58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001e5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e60:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001e62:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001e66:	3a01      	subs	r2, #1
 8001e68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001e70:	e74f      	b.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001e72:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001e74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e78:	f47f af4e 	bne.w	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8001e7c:	4f23      	ldr	r7, [pc, #140]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x748>)
 8001e7e:	f04f 6c70 	mov.w	ip, #251658240	; 0xf000000
 8001e82:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001e86:	fa9c f9ac 	rbit	r9, ip
 8001e8a:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8001e8e:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8001e92:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001e96:	fa96 fea6 	rbit	lr, r6
 8001e9a:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 8001e9e:	fabe fe8e 	clz	lr, lr
 8001ea2:	fa9a faaa 	rbit	sl, sl
 8001ea6:	f44f 3840 	mov.w	r8, #196608	; 0x30000
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001eaa:	faba fa8a 	clz	sl, sl
 8001eae:	fa98 f8a8 	rbit	r8, r8
 8001eb2:	fab8 f888 	clz	r8, r8
 8001eb6:	fa9c fcac 	rbit	ip, ip
 8001eba:	fabc fc8c 	clz	ip, ip
 8001ebe:	fa96 f6a6 	rbit	r6, r6
 8001ec2:	6a21      	ldr	r1, [r4, #32]
 8001ec4:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8001ec8:	6963      	ldr	r3, [r4, #20]
 8001eca:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8001ece:	fa01 f808 	lsl.w	r8, r1, r8
 8001ed2:	fa20 f009 	lsr.w	r0, r0, r9
 8001ed6:	fa03 f30a 	lsl.w	r3, r3, sl
 8001eda:	fab6 f686 	clz	r6, r6
 8001ede:	fa00 f10c 	lsl.w	r1, r0, ip
 8001ee2:	fa22 f20e 	lsr.w	r2, r2, lr
 8001ee6:	ea43 0308 	orr.w	r3, r3, r8
 8001eea:	4319      	orrs	r1, r3
 8001eec:	fa02 f306 	lsl.w	r3, r2, r6
 8001ef0:	430b      	orrs	r3, r1
 8001ef2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001ef6:	e70f      	b.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x554>
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001ef8:	f7fe fa34 	bl	8000364 <HAL_GetTick>
 8001efc:	1b40      	subs	r0, r0, r5
 8001efe:	2864      	cmp	r0, #100	; 0x64
 8001f00:	f67f af5a 	bls.w	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8001f04:	e4bc      	b.n	8001880 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 8001f06:	b003      	add	sp, #12
 8001f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f0c:	40023800 	.word	0x40023800

08001f10 <HAL_SPI_IRQHandler>:
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
  uint32_t itsource = hspi->Instance->CR2;
 8001f10:	6803      	ldr	r3, [r0, #0]
 8001f12:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8001f14:	689a      	ldr	r2, [r3, #8]
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001f16:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
  uint32_t itflag   = hspi->Instance->SR;

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8001f18:	f002 0541 	and.w	r5, r2, #65	; 0x41
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001f1c:	b085      	sub	sp, #20
 8001f1e:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
  uint32_t itflag   = hspi->Instance->SR;

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8001f20:	2d01      	cmp	r5, #1
 8001f22:	d103      	bne.n	8001f2c <HAL_SPI_IRQHandler+0x1c>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8001f24:	064d      	lsls	r5, r1, #25
 8001f26:	d501      	bpl.n	8001f2c <HAL_SPI_IRQHandler+0x1c>
  {
    hspi->RxISR(hspi);
 8001f28:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001f2a:	e005      	b.n	8001f38 <HAL_SPI_IRQHandler+0x28>
    return;
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8001f2c:	0795      	lsls	r5, r2, #30
 8001f2e:	d505      	bpl.n	8001f3c <HAL_SPI_IRQHandler+0x2c>
 8001f30:	0608      	lsls	r0, r1, #24
 8001f32:	d503      	bpl.n	8001f3c <HAL_SPI_IRQHandler+0x2c>
  {
    hspi->TxISR(hspi);
 8001f34:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001f36:	4620      	mov	r0, r4
 8001f38:	4798      	blx	r3
    return;
 8001f3a:	e056      	b.n	8001fea <HAL_SPI_IRQHandler+0xda>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8001f3c:	f412 7fb0 	tst.w	r2, #352	; 0x160
 8001f40:	d053      	beq.n	8001fea <HAL_SPI_IRQHandler+0xda>
 8001f42:	068d      	lsls	r5, r1, #26
 8001f44:	d551      	bpl.n	8001fea <HAL_SPI_IRQHandler+0xda>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((itflag & SPI_FLAG_OVR) != RESET)
 8001f46:	0650      	lsls	r0, r2, #25
 8001f48:	d516      	bpl.n	8001f78 <HAL_SPI_IRQHandler+0x68>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001f4a:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8001f4e:	2500      	movs	r5, #0
 8001f50:	2803      	cmp	r0, #3
 8001f52:	d00a      	beq.n	8001f6a <HAL_SPI_IRQHandler+0x5a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001f54:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001f56:	f040 0004 	orr.w	r0, r0, #4
 8001f5a:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f5c:	9500      	str	r5, [sp, #0]
 8001f5e:	68d8      	ldr	r0, [r3, #12]
 8001f60:	9000      	str	r0, [sp, #0]
 8001f62:	6898      	ldr	r0, [r3, #8]
 8001f64:	9000      	str	r0, [sp, #0]
 8001f66:	9800      	ldr	r0, [sp, #0]
 8001f68:	e006      	b.n	8001f78 <HAL_SPI_IRQHandler+0x68>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f6a:	9501      	str	r5, [sp, #4]
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	9201      	str	r2, [sp, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	9301      	str	r3, [sp, #4]
 8001f74:	9b01      	ldr	r3, [sp, #4]
        return;
 8001f76:	e038      	b.n	8001fea <HAL_SPI_IRQHandler+0xda>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((itflag & SPI_FLAG_MODF) != RESET)
 8001f78:	0695      	lsls	r5, r2, #26
 8001f7a:	d50c      	bpl.n	8001f96 <HAL_SPI_IRQHandler+0x86>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001f7c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001f7e:	f040 0001 	orr.w	r0, r0, #1
 8001f82:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001f84:	2000      	movs	r0, #0
 8001f86:	9002      	str	r0, [sp, #8]
 8001f88:	6898      	ldr	r0, [r3, #8]
 8001f8a:	9002      	str	r0, [sp, #8]
 8001f8c:	6818      	ldr	r0, [r3, #0]
 8001f8e:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8001f92:	6018      	str	r0, [r3, #0]
 8001f94:	9802      	ldr	r0, [sp, #8]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((itflag & SPI_FLAG_FRE) != RESET)
 8001f96:	05d0      	lsls	r0, r2, #23
 8001f98:	d508      	bpl.n	8001fac <HAL_SPI_IRQHandler+0x9c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001f9a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001f9c:	f042 0208 	orr.w	r2, r2, #8
 8001fa0:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	9203      	str	r2, [sp, #12]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	9203      	str	r2, [sp, #12]
 8001faa:	9a03      	ldr	r2, [sp, #12]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fac:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001fae:	b1e2      	cbz	r2, 8001fea <HAL_SPI_IRQHandler+0xda>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001fb6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001fbe:	078a      	lsls	r2, r1, #30
 8001fc0:	d010      	beq.n	8001fe4 <HAL_SPI_IRQHandler+0xd4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001fc2:	685a      	ldr	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001fc4:	6da0      	ldr	r0, [r4, #88]	; 0x58

      hspi->State = HAL_SPI_STATE_READY;
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001fc6:	f022 0203 	bic.w	r2, r2, #3
 8001fca:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001fcc:	b118      	cbz	r0, 8001fd6 <HAL_SPI_IRQHandler+0xc6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001fce:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <HAL_SPI_IRQHandler+0xe0>)
 8001fd0:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8001fd2:	f7fe fd9f 	bl	8000b14 <HAL_DMA_Abort_IT>
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001fd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001fd8:	b138      	cbz	r0, 8001fea <HAL_SPI_IRQHandler+0xda>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001fda:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <HAL_SPI_IRQHandler+0xe0>)
 8001fdc:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8001fde:	f7fe fd99 	bl	8000b14 <HAL_DMA_Abort_IT>
 8001fe2:	e002      	b.n	8001fea <HAL_SPI_IRQHandler+0xda>
        }
      }
      else
      {
        /* Call user error callback */
        HAL_SPI_ErrorCallback(hspi);
 8001fe4:	4620      	mov	r0, r4
 8001fe6:	f002 f87b 	bl	80040e0 <HAL_SPI_ErrorCallback>
      }
    }
    return;
  }
}
 8001fea:	b005      	add	sp, #20
 8001fec:	bd30      	pop	{r4, r5, pc}
 8001fee:	bf00      	nop
 8001ff0:	08001ff5 	.word	0x08001ff5

08001ff4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001ff4:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ff6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8001ffe:	87c3      	strh	r3, [r0, #62]	; 0x3e

  HAL_SPI_ErrorCallback(hspi);
 8002000:	f002 f86e 	bl	80040e0 <HAL_SPI_ErrorCallback>
 8002004:	bd08      	pop	{r3, pc}

08002006 <TIM_TI1_ConfigInputStage>:
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002006:	6a03      	ldr	r3, [r0, #32]
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002008:	b510      	push	{r4, lr}
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800200a:	6a04      	ldr	r4, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800200c:	f023 030a 	bic.w	r3, r3, #10
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002010:	f024 0401 	bic.w	r4, r4, #1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8002014:	4319      	orrs	r1, r3
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002016:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002018:	6984      	ldr	r4, [r0, #24]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800201a:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 800201e:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002022:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002024:	6201      	str	r1, [r0, #32]
 8002026:	bd10      	pop	{r4, pc}

08002028 <TIM_TI2_ConfigInputStage>:
{
uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002028:	6a03      	ldr	r3, [r0, #32]
 800202a:	f023 0310 	bic.w	r3, r3, #16
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800202e:	b510      	push	{r4, lr}
uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002030:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002032:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002034:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002036:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800203a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12);
 800203e:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4);
 8002042:	ea43 1101 	orr.w	r1, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002046:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002048:	6201      	str	r1, [r0, #32]
 800204a:	bd10      	pop	{r4, pc}

0800204c <HAL_TIM_Base_Start>:
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800204c:	6802      	ldr	r2, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800204e:	2302      	movs	r3, #2
 8002050:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002054:	6813      	ldr	r3, [r2, #0]
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	6013      	str	r3, [r2, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800205c:	2301      	movs	r3, #1
 800205e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
}
 8002062:	2000      	movs	r0, #0
 8002064:	4770      	bx	lr

08002066 <HAL_TIM_Base_Stop>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002066:	2302      	movs	r3, #2
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002068:	f241 1211 	movw	r2, #4369	; 0x1111
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800206c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002070:	6803      	ldr	r3, [r0, #0]
 8002072:	6a19      	ldr	r1, [r3, #32]
 8002074:	400a      	ands	r2, r1
 8002076:	b942      	cbnz	r2, 800208a <HAL_TIM_Base_Stop+0x24>
 8002078:	6a19      	ldr	r1, [r3, #32]
 800207a:	f240 4244 	movw	r2, #1092	; 0x444
 800207e:	400a      	ands	r2, r1
 8002080:	b91a      	cbnz	r2, 800208a <HAL_TIM_Base_Stop+0x24>
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	f022 0201 	bic.w	r2, r2, #1
 8002088:	601a      	str	r2, [r3, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800208a:	2301      	movs	r3, #1
 800208c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
}
 8002090:	2000      	movs	r0, #0
 8002092:	4770      	bx	lr

08002094 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002094:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
  
  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8002096:	b151      	cbz	r1, 80020ae <HAL_TIM_Encoder_Start_IT+0x1a>
 8002098:	2904      	cmp	r1, #4
 800209a:	d114      	bne.n	80020c6 <HAL_TIM_Encoder_Start_IT+0x32>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800209c:	6a1a      	ldr	r2, [r3, #32]
 800209e:	f022 0210 	bic.w	r2, r2, #16
 80020a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80020a4:	6a1a      	ldr	r2, [r3, #32]
 80020a6:	f042 0210 	orr.w	r2, r2, #16
 80020aa:	621a      	str	r2, [r3, #32]
 80020ac:	e01f      	b.n	80020ee <HAL_TIM_Encoder_Start_IT+0x5a>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80020ae:	6a1a      	ldr	r2, [r3, #32]
 80020b0:	f022 0201 	bic.w	r2, r2, #1
 80020b4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80020b6:	6a1a      	ldr	r2, [r3, #32]
 80020b8:	f042 0201 	orr.w	r2, r2, #1
 80020bc:	621a      	str	r2, [r3, #32]
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	f042 0202 	orr.w	r2, r2, #2
 80020c4:	e016      	b.n	80020f4 <HAL_TIM_Encoder_Start_IT+0x60>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80020c6:	6a1a      	ldr	r2, [r3, #32]
 80020c8:	f022 0201 	bic.w	r2, r2, #1
 80020cc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80020ce:	6a1a      	ldr	r2, [r3, #32]
 80020d0:	f042 0201 	orr.w	r2, r2, #1
 80020d4:	621a      	str	r2, [r3, #32]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80020d6:	6a1a      	ldr	r2, [r3, #32]
 80020d8:	f022 0210 	bic.w	r2, r2, #16
 80020dc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80020de:	6a1a      	ldr	r2, [r3, #32]
 80020e0:	f042 0210 	orr.w	r2, r2, #16
 80020e4:	621a      	str	r2, [r3, #32]
    }  
    default :
    {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80020e6:	68da      	ldr	r2, [r3, #12]
 80020e8:	f042 0202 	orr.w	r2, r2, #2
 80020ec:	60da      	str	r2, [r3, #12]
     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80020ee:	68da      	ldr	r2, [r3, #12]
 80020f0:	f042 0204 	orr.w	r2, r2, #4
 80020f4:	60da      	str	r2, [r3, #12]
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
  
  /* Return function status */
  return HAL_OK;
}
 80020f6:	2000      	movs	r0, #0
     break; 
    }
  }
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	f042 0201 	orr.w	r2, r2, #1
 80020fe:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
}
 8002100:	4770      	bx	lr

08002102 <HAL_TIM_PeriodElapsedCallback>:
 8002102:	4770      	bx	lr

08002104 <HAL_TIM_OC_DelayElapsedCallback>:
 8002104:	4770      	bx	lr

08002106 <HAL_TIM_IC_CaptureCallback>:
 8002106:	4770      	bx	lr

08002108 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002108:	4770      	bx	lr

0800210a <HAL_TIM_TriggerCallback>:
 800210a:	4770      	bx	lr

0800210c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800210c:	6803      	ldr	r3, [r0, #0]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	0791      	lsls	r1, r2, #30
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002112:	b510      	push	{r4, lr}
 8002114:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002116:	d514      	bpl.n	8002142 <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	0792      	lsls	r2, r2, #30
 800211c:	d511      	bpl.n	8002142 <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800211e:	f06f 0202 	mvn.w	r2, #2
 8002122:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002124:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002126:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002128:	7602      	strb	r2, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800212a:	0799      	lsls	r1, r3, #30
 800212c:	d002      	beq.n	8002134 <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800212e:	f7ff ffea 	bl	8002106 <HAL_TIM_IC_CaptureCallback>
 8002132:	e004      	b.n	800213e <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002134:	f7ff ffe6 	bl	8002104 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002138:	4620      	mov	r0, r4
 800213a:	f7ff ffe5 	bl	8002108 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800213e:	2300      	movs	r3, #0
 8002140:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002142:	6823      	ldr	r3, [r4, #0]
 8002144:	691a      	ldr	r2, [r3, #16]
 8002146:	0752      	lsls	r2, r2, #29
 8002148:	d516      	bpl.n	8002178 <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	0750      	lsls	r0, r2, #29
 800214e:	d513      	bpl.n	8002178 <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002150:	f06f 0204 	mvn.w	r2, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002154:	4620      	mov	r0, r4
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002156:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002158:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 800215a:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800215c:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 800215e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002162:	d002      	beq.n	800216a <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002164:	f7ff ffcf 	bl	8002106 <HAL_TIM_IC_CaptureCallback>
 8002168:	e004      	b.n	8002174 <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800216a:	f7ff ffcb 	bl	8002104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800216e:	4620      	mov	r0, r4
 8002170:	f7ff ffca 	bl	8002108 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002174:	2300      	movs	r3, #0
 8002176:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002178:	6823      	ldr	r3, [r4, #0]
 800217a:	691a      	ldr	r2, [r3, #16]
 800217c:	0711      	lsls	r1, r2, #28
 800217e:	d515      	bpl.n	80021ac <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	0712      	lsls	r2, r2, #28
 8002184:	d512      	bpl.n	80021ac <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002186:	f06f 0208 	mvn.w	r2, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800218a:	4620      	mov	r0, r4
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800218c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800218e:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002190:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002192:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002194:	079b      	lsls	r3, r3, #30
 8002196:	d002      	beq.n	800219e <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002198:	f7ff ffb5 	bl	8002106 <HAL_TIM_IC_CaptureCallback>
 800219c:	e004      	b.n	80021a8 <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800219e:	f7ff ffb1 	bl	8002104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80021a2:	4620      	mov	r0, r4
 80021a4:	f7ff ffb0 	bl	8002108 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a8:	2300      	movs	r3, #0
 80021aa:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021ac:	6823      	ldr	r3, [r4, #0]
 80021ae:	691a      	ldr	r2, [r3, #16]
 80021b0:	06d0      	lsls	r0, r2, #27
 80021b2:	d516      	bpl.n	80021e2 <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	06d1      	lsls	r1, r2, #27
 80021b8:	d513      	bpl.n	80021e2 <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021ba:	f06f 0210 	mvn.w	r2, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80021be:	4620      	mov	r0, r4
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021c2:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80021c4:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021c6:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80021c8:	f413 7f40 	tst.w	r3, #768	; 0x300
 80021cc:	d002      	beq.n	80021d4 <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80021ce:	f7ff ff9a 	bl	8002106 <HAL_TIM_IC_CaptureCallback>
 80021d2:	e004      	b.n	80021de <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d4:	f7ff ff96 	bl	8002104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d8:	4620      	mov	r0, r4
 80021da:	f7ff ff95 	bl	8002108 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021de:	2300      	movs	r3, #0
 80021e0:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021e2:	6823      	ldr	r3, [r4, #0]
 80021e4:	691a      	ldr	r2, [r3, #16]
 80021e6:	07d2      	lsls	r2, r2, #31
 80021e8:	d508      	bpl.n	80021fc <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	07d0      	lsls	r0, r2, #31
 80021ee:	d505      	bpl.n	80021fc <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021f0:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80021f4:	4620      	mov	r0, r4
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021f6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80021f8:	f7ff ff83 	bl	8002102 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021fc:	6823      	ldr	r3, [r4, #0]
 80021fe:	691a      	ldr	r2, [r3, #16]
 8002200:	0611      	lsls	r1, r2, #24
 8002202:	d508      	bpl.n	8002216 <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	0612      	lsls	r2, r2, #24
 8002208:	d505      	bpl.n	8002216 <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800220a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800220e:	4620      	mov	r0, r4
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002210:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002212:	f000 fb86 	bl	8002922 <HAL_TIMEx_BreakCallback>
    }
  }
  
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002216:	6823      	ldr	r3, [r4, #0]
 8002218:	691a      	ldr	r2, [r3, #16]
 800221a:	05d0      	lsls	r0, r2, #23
 800221c:	d508      	bpl.n	8002230 <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	0611      	lsls	r1, r2, #24
 8002222:	d505      	bpl.n	8002230 <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002224:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002228:	4620      	mov	r0, r4
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800222a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800222c:	f000 fb79 	bl	8002922 <HAL_TIMEx_BreakCallback>
    }
  }

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002230:	6823      	ldr	r3, [r4, #0]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	0652      	lsls	r2, r2, #25
 8002236:	d508      	bpl.n	800224a <HAL_TIM_IRQHandler+0x13e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	0650      	lsls	r0, r2, #25
 800223c:	d505      	bpl.n	800224a <HAL_TIM_IRQHandler+0x13e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800223e:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002242:	4620      	mov	r0, r4
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002244:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002246:	f7ff ff60 	bl	800210a <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800224a:	6823      	ldr	r3, [r4, #0]
 800224c:	691a      	ldr	r2, [r3, #16]
 800224e:	0691      	lsls	r1, r2, #26
 8002250:	d50a      	bpl.n	8002268 <HAL_TIM_IRQHandler+0x15c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002252:	68da      	ldr	r2, [r3, #12]
 8002254:	0692      	lsls	r2, r2, #26
 8002256:	d507      	bpl.n	8002268 <HAL_TIM_IRQHandler+0x15c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002258:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800225c:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800225e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 8002260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 8002264:	f000 bb5c 	b.w	8002920 <HAL_TIMEx_CommutationCallback>
 8002268:	bd10      	pop	{r4, pc}
	...

0800226c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800226c:	4a2e      	ldr	r2, [pc, #184]	; (8002328 <TIM_Base_SetConfig+0xbc>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 800226e:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002270:	4290      	cmp	r0, r2
 8002272:	d012      	beq.n	800229a <TIM_Base_SetConfig+0x2e>
 8002274:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002278:	d00f      	beq.n	800229a <TIM_Base_SetConfig+0x2e>
 800227a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800227e:	4290      	cmp	r0, r2
 8002280:	d00b      	beq.n	800229a <TIM_Base_SetConfig+0x2e>
 8002282:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002286:	4290      	cmp	r0, r2
 8002288:	d007      	beq.n	800229a <TIM_Base_SetConfig+0x2e>
 800228a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800228e:	4290      	cmp	r0, r2
 8002290:	d003      	beq.n	800229a <TIM_Base_SetConfig+0x2e>
 8002292:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002296:	4290      	cmp	r0, r2
 8002298:	d118      	bne.n	80022cc <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800229a:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800229c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80022a0:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80022a2:	4a21      	ldr	r2, [pc, #132]	; (8002328 <TIM_Base_SetConfig+0xbc>)
 80022a4:	4290      	cmp	r0, r2
 80022a6:	d037      	beq.n	8002318 <TIM_Base_SetConfig+0xac>
 80022a8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80022ac:	d034      	beq.n	8002318 <TIM_Base_SetConfig+0xac>
 80022ae:	4a1f      	ldr	r2, [pc, #124]	; (800232c <TIM_Base_SetConfig+0xc0>)
 80022b0:	4290      	cmp	r0, r2
 80022b2:	d031      	beq.n	8002318 <TIM_Base_SetConfig+0xac>
 80022b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022b8:	4290      	cmp	r0, r2
 80022ba:	d02d      	beq.n	8002318 <TIM_Base_SetConfig+0xac>
 80022bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022c0:	4290      	cmp	r0, r2
 80022c2:	d029      	beq.n	8002318 <TIM_Base_SetConfig+0xac>
 80022c4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80022c8:	4290      	cmp	r0, r2
 80022ca:	d025      	beq.n	8002318 <TIM_Base_SetConfig+0xac>
 80022cc:	4a18      	ldr	r2, [pc, #96]	; (8002330 <TIM_Base_SetConfig+0xc4>)
 80022ce:	4290      	cmp	r0, r2
 80022d0:	d022      	beq.n	8002318 <TIM_Base_SetConfig+0xac>
 80022d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022d6:	4290      	cmp	r0, r2
 80022d8:	d01e      	beq.n	8002318 <TIM_Base_SetConfig+0xac>
 80022da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022de:	4290      	cmp	r0, r2
 80022e0:	d01a      	beq.n	8002318 <TIM_Base_SetConfig+0xac>
 80022e2:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80022e6:	4290      	cmp	r0, r2
 80022e8:	d016      	beq.n	8002318 <TIM_Base_SetConfig+0xac>
 80022ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022ee:	4290      	cmp	r0, r2
 80022f0:	d012      	beq.n	8002318 <TIM_Base_SetConfig+0xac>
 80022f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022f6:	4290      	cmp	r0, r2
 80022f8:	d00e      	beq.n	8002318 <TIM_Base_SetConfig+0xac>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 80022fa:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022fc:	688b      	ldr	r3, [r1, #8]
 80022fe:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002300:	680b      	ldr	r3, [r1, #0]
 8002302:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002304:	4b08      	ldr	r3, [pc, #32]	; (8002328 <TIM_Base_SetConfig+0xbc>)
 8002306:	4298      	cmp	r0, r3
 8002308:	d00b      	beq.n	8002322 <TIM_Base_SetConfig+0xb6>
 800230a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800230e:	4298      	cmp	r0, r3
 8002310:	d007      	beq.n	8002322 <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002312:	2301      	movs	r3, #1
 8002314:	6143      	str	r3, [r0, #20]
}
 8002316:	4770      	bx	lr
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800231c:	68ca      	ldr	r2, [r1, #12]
 800231e:	4313      	orrs	r3, r2
 8002320:	e7eb      	b.n	80022fa <TIM_Base_SetConfig+0x8e>
  TIMx->PSC = (uint32_t)Structure->Prescaler;
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002322:	690b      	ldr	r3, [r1, #16]
 8002324:	6303      	str	r3, [r0, #48]	; 0x30
 8002326:	e7f4      	b.n	8002312 <TIM_Base_SetConfig+0xa6>
 8002328:	40010000 	.word	0x40010000
 800232c:	40000400 	.word	0x40000400
 8002330:	40014000 	.word	0x40014000

08002334 <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8002334:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002336:	4604      	mov	r4, r0
 8002338:	b180      	cbz	r0, 800235c <HAL_TIM_Base_Init+0x28>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 800233a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800233e:	b90b      	cbnz	r3, 8002344 <HAL_TIM_Base_Init+0x10>
  {  
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002340:	f003 ffe4 	bl	800630c <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002344:	2302      	movs	r3, #2
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002346:	6820      	ldr	r0, [r4, #0]
 8002348:	1d21      	adds	r1, r4, #4
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800234a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800234e:	f7ff ff8d 	bl	800226c <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002352:	2301      	movs	r3, #1
  
  return HAL_OK;
 8002354:	2000      	movs	r0, #0
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002356:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 800235a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 800235c:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 800235e:	bd10      	pop	{r4, pc}

08002360 <HAL_TIM_PWM_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002360:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002362:	4604      	mov	r4, r0
 8002364:	b1a0      	cbz	r0, 8002390 <HAL_TIM_PWM_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002366:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800236a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800236e:	b91b      	cbnz	r3, 8002378 <HAL_TIM_PWM_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;  
 8002370:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002374:	f003 ffde 	bl	8006334 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 8002378:	2302      	movs	r3, #2
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800237a:	6820      	ldr	r0, [r4, #0]
 800237c:	1d21      	adds	r1, r4, #4
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 800237e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002382:	f7ff ff73 	bl	800226c <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002386:	2301      	movs	r3, #1
  
  return HAL_OK;
 8002388:	2000      	movs	r0, #0
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800238a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 800238e:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002390:	2001      	movs	r0, #1
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}  
 8002392:	bd10      	pop	{r4, pc}

08002394 <HAL_TIM_Encoder_Init>:
  *                the configuration information for TIM module.
  * @param  sConfig: TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 8002394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002396:	460c      	mov	r4, r1
  uint32_t tmpsmcr = 0;
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002398:	4605      	mov	r5, r0
 800239a:	2800      	cmp	r0, #0
 800239c:	d043      	beq.n	8002426 <HAL_TIM_Encoder_Init+0x92>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 800239e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80023a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023a6:	b91b      	cbnz	r3, 80023b0 <HAL_TIM_Encoder_Init+0x1c>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;  
 80023a8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80023ac:	f003 ff4e 	bl	800624c <HAL_TIM_Encoder_MspInit>
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80023b0:	4629      	mov	r1, r5
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 80023b2:	2302      	movs	r3, #2
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80023b4:	f851 0b04 	ldr.w	r0, [r1], #4
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 80023b8:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80023bc:	6883      	ldr	r3, [r0, #8]
 80023be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023c2:	f023 0307 	bic.w	r3, r3, #7
 80023c6:	6083      	str	r3, [r0, #8]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 80023c8:	f7ff ff50 	bl	800226c <TIM_Base_SetConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023cc:	6828      	ldr	r0, [r5, #0]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80023ce:	6823      	ldr	r3, [r4, #0]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023d0:	6887      	ldr	r7, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80023d2:	6981      	ldr	r1, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80023d4:	431f      	orrs	r7, r3
 80023d6:	69a2      	ldr	r2, [r4, #24]
 80023d8:	f421 7340 	bic.w	r3, r1, #768	; 0x300
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 80023dc:	6921      	ldr	r1, [r4, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80023de:	6a06      	ldr	r6, [r0, #32]
 80023e0:	f023 0303 	bic.w	r3, r3, #3
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 80023e4:	0109      	lsls	r1, r1, #4
 80023e6:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
 80023ea:	68a3      	ldr	r3, [r4, #8]
 80023ec:	4313      	orrs	r3, r2
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 80023ee:	69e2      	ldr	r2, [r4, #28]
 80023f0:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 80023f4:	68e2      	ldr	r2, [r4, #12]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80023f6:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 80023fa:	430a      	orrs	r2, r1
 80023fc:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80023fe:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 8002402:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8002406:	6961      	ldr	r1, [r4, #20]
 8002408:	4313      	orrs	r3, r2
 800240a:	f026 02aa 	bic.w	r2, r6, #170	; 0xaa
 800240e:	ea42 1201 	orr.w	r2, r2, r1, lsl #4

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 8002412:	6861      	ldr	r1, [r4, #4]
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002414:	6087      	str	r7, [r0, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 8002416:	430a      	orrs	r2, r1
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002418:	6183      	str	r3, [r0, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800241a:	2301      	movs	r3, #1

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800241c:	6202      	str	r2, [r0, #32]
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
 800241e:	2000      	movs	r0, #0

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002420:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  
  return HAL_OK;
 8002424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t tmpccer = 0;
  
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002426:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8002428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800242c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800242c:	6a03      	ldr	r3, [r0, #32]
 800242e:	f023 0301 	bic.w	r3, r3, #1
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002432:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002434:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002436:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002438:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800243a:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800243c:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800243e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8002442:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002446:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002448:	f023 0502 	bic.w	r5, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800244c:	688b      	ldr	r3, [r1, #8]
 800244e:	432b      	orrs	r3, r5

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002450:	4d0c      	ldr	r5, [pc, #48]	; (8002484 <TIM_OC1_SetConfig+0x58>)
 8002452:	42a8      	cmp	r0, r5
 8002454:	d009      	beq.n	800246a <TIM_OC1_SetConfig+0x3e>
 8002456:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800245a:	42a8      	cmp	r0, r5
 800245c:	d005      	beq.n	800246a <TIM_OC1_SetConfig+0x3e>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800245e:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002460:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002462:	6184      	str	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002464:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002466:	6203      	str	r3, [r0, #32]
} 
 8002468:	bd70      	pop	{r4, r5, r6, pc}
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800246a:	68cd      	ldr	r5, [r1, #12]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800246c:	f023 0308 	bic.w	r3, r3, #8
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002470:	694e      	ldr	r6, [r1, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002472:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002476:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002478:	698d      	ldr	r5, [r1, #24]
 800247a:	4335      	orrs	r5, r6
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800247c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002480:	432a      	orrs	r2, r5
 8002482:	e7ec      	b.n	800245e <TIM_OC1_SetConfig+0x32>
 8002484:	40010000 	.word	0x40010000

08002488 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002488:	6a03      	ldr	r3, [r0, #32]
 800248a:	f023 0310 	bic.w	r3, r3, #16
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800248e:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002490:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8002492:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002494:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002496:	6984      	ldr	r4, [r0, #24]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002498:	f023 0320 	bic.w	r3, r3, #32
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800249c:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800249e:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 80024a2:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80024a6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 80024aa:	688d      	ldr	r5, [r1, #8]
 80024ac:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80024b0:	4d0e      	ldr	r5, [pc, #56]	; (80024ec <TIM_OC2_SetConfig+0x64>)
 80024b2:	42a8      	cmp	r0, r5
 80024b4:	d009      	beq.n	80024ca <TIM_OC2_SetConfig+0x42>
 80024b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80024ba:	42a8      	cmp	r0, r5
 80024bc:	d005      	beq.n	80024ca <TIM_OC2_SetConfig+0x42>
    tmpcr2 |= (OC_Config->OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024be:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80024c0:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024c2:	6184      	str	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80024c4:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024c6:	6203      	str	r3, [r0, #32]
}
 80024c8:	bd30      	pop	{r4, r5, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 80024ca:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80024cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80024d0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 80024d4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80024d8:	694d      	ldr	r5, [r1, #20]
 80024da:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80024de:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80024e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80024e4:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 80024e8:	e7e9      	b.n	80024be <TIM_OC2_SetConfig+0x36>
 80024ea:	bf00      	nop
 80024ec:	40010000 	.word	0x40010000

080024f0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024f0:	6a03      	ldr	r3, [r0, #32]
 80024f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024f6:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024f8:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024fa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80024fc:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024fe:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002500:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002504:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002506:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800250a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800250e:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8002510:	688d      	ldr	r5, [r1, #8]
 8002512:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002516:	4d0e      	ldr	r5, [pc, #56]	; (8002550 <TIM_OC3_SetConfig+0x60>)
 8002518:	42a8      	cmp	r0, r5
 800251a:	d009      	beq.n	8002530 <TIM_OC3_SetConfig+0x40>
 800251c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002520:	42a8      	cmp	r0, r5
 8002522:	d005      	beq.n	8002530 <TIM_OC3_SetConfig+0x40>
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002524:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002526:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002528:	61c4      	str	r4, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800252a:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800252c:	6203      	str	r3, [r0, #32]
}
 800252e:	bd30      	pop	{r4, r5, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8002530:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002532:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002536:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 800253a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 800253e:	694d      	ldr	r5, [r1, #20]
 8002540:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8002544:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002546:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 800254a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 800254e:	e7e9      	b.n	8002524 <TIM_OC3_SetConfig+0x34>
 8002550:	40010000 	.word	0x40010000

08002554 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002554:	6a03      	ldr	r3, [r0, #32]
 8002556:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800255a:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800255c:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800255e:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002560:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002562:	69c3      	ldr	r3, [r0, #28]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002564:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002568:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800256a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800256e:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002572:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8002576:	688d      	ldr	r5, [r1, #8]
 8002578:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800257c:	4d09      	ldr	r5, [pc, #36]	; (80025a4 <TIM_OC4_SetConfig+0x50>)
 800257e:	42a8      	cmp	r0, r5
 8002580:	d009      	beq.n	8002596 <TIM_OC4_SetConfig+0x42>
 8002582:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002586:	42a8      	cmp	r0, r5
 8002588:	d005      	beq.n	8002596 <TIM_OC4_SetConfig+0x42>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800258a:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800258c:	61c3      	str	r3, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800258e:	684b      	ldr	r3, [r1, #4]
 8002590:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002592:	6204      	str	r4, [r0, #32]
}
 8002594:	bd30      	pop	{r4, r5, pc}
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002596:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 800259a:	694d      	ldr	r5, [r1, #20]
 800259c:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 80025a0:	e7f3      	b.n	800258a <TIM_OC4_SetConfig+0x36>
 80025a2:	bf00      	nop
 80025a4:	40010000 	.word	0x40010000

080025a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025a8:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 80025aa:	6884      	ldr	r4, [r0, #8]
 80025ac:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 80025b0:	4321      	orrs	r1, r4
 80025b2:	430a      	orrs	r2, r1

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80025b4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025b8:	6083      	str	r3, [r0, #8]
 80025ba:	bd10      	pop	{r4, pc}

080025bc <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 80025bc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80025c0:	2b01      	cmp	r3, #1
  * @param  sClockSourceConfig: pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 80025c2:	b510      	push	{r4, lr}
 80025c4:	4604      	mov	r4, r0
 80025c6:	f04f 0002 	mov.w	r0, #2
  uint32_t tmpsmcr = 0;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 80025ca:	f000 8082 	beq.w	80026d2 <HAL_TIM_ConfigClockSource+0x116>
  
  htim->State = HAL_TIM_STATE_BUSY;
 80025ce:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 80025d2:	2301      	movs	r3, #1
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025d4:	6820      	ldr	r0, [r4, #0]
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 80025d6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025da:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025dc:	4b3d      	ldr	r3, [pc, #244]	; (80026d4 <HAL_TIM_ConfigClockSource+0x118>)
 80025de:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80025e0:	6083      	str	r3, [r0, #8]
  
  switch (sClockSourceConfig->ClockSource)
 80025e2:	680b      	ldr	r3, [r1, #0]
 80025e4:	2b40      	cmp	r3, #64	; 0x40
 80025e6:	d057      	beq.n	8002698 <HAL_TIM_ConfigClockSource+0xdc>
 80025e8:	d814      	bhi.n	8002614 <HAL_TIM_ConfigClockSource+0x58>
 80025ea:	2b10      	cmp	r3, #16
 80025ec:	d05f      	beq.n	80026ae <HAL_TIM_ConfigClockSource+0xf2>
 80025ee:	d807      	bhi.n	8002600 <HAL_TIM_ConfigClockSource+0x44>
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d168      	bne.n	80026c6 <HAL_TIM_ConfigClockSource+0x10a>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80025f4:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80025f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80025fa:	f043 0307 	orr.w	r3, r3, #7
 80025fe:	e061      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x108>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8002600:	2b20      	cmp	r3, #32
 8002602:	d05a      	beq.n	80026ba <HAL_TIM_ConfigClockSource+0xfe>
 8002604:	2b30      	cmp	r3, #48	; 0x30
 8002606:	d15e      	bne.n	80026c6 <HAL_TIM_ConfigClockSource+0x10a>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002608:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800260a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800260e:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8002612:	e057      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x108>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8002614:	2b70      	cmp	r3, #112	; 0x70
 8002616:	d025      	beq.n	8002664 <HAL_TIM_ConfigClockSource+0xa8>
 8002618:	d80e      	bhi.n	8002638 <HAL_TIM_ConfigClockSource+0x7c>
 800261a:	2b50      	cmp	r3, #80	; 0x50
 800261c:	d030      	beq.n	8002680 <HAL_TIM_ConfigClockSource+0xc4>
 800261e:	2b60      	cmp	r3, #96	; 0x60
 8002620:	d151      	bne.n	80026c6 <HAL_TIM_ConfigClockSource+0x10a>
      
      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance, 
 8002622:	68ca      	ldr	r2, [r1, #12]
 8002624:	6849      	ldr	r1, [r1, #4]
 8002626:	f7ff fcff 	bl	8002028 <TIM_TI2_ConfigInputStage>
                        sClockSourceConfig->ClockPolarity, 
                        sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800262a:	6822      	ldr	r2, [r4, #0]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800262c:	6893      	ldr	r3, [r2, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800262e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002632:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8002636:	e02d      	b.n	8002694 <HAL_TIM_ConfigClockSource+0xd8>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8002638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800263c:	d00c      	beq.n	8002658 <HAL_TIM_ConfigClockSource+0x9c>
 800263e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002642:	d140      	bne.n	80026c6 <HAL_TIM_ConfigClockSource+0x10a>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance, 
 8002644:	68cb      	ldr	r3, [r1, #12]
 8002646:	684a      	ldr	r2, [r1, #4]
 8002648:	6889      	ldr	r1, [r1, #8]
 800264a:	f7ff ffad 	bl	80025a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800264e:	6822      	ldr	r2, [r4, #0]
 8002650:	6893      	ldr	r3, [r2, #8]
 8002652:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002656:	e01d      	b.n	8002694 <HAL_TIM_ConfigClockSource+0xd8>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    { 
      assert_param(IS_TIM_INSTANCE(htim->Instance));      
      /* Disable slave mode to clock the prescaler directly with the internal clock */
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002658:	6883      	ldr	r3, [r0, #8]
 800265a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800265e:	f023 0307 	bic.w	r3, r3, #7
 8002662:	e02f      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x108>
      assert_param(IS_TIM_ETR_INSTANCE(htim->Instance));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance, 
 8002664:	68cb      	ldr	r3, [r1, #12]
 8002666:	684a      	ldr	r2, [r1, #4]
 8002668:	6889      	ldr	r1, [r1, #8]
 800266a:	f7ff ff9d 	bl	80025a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity, 
                        sClockSourceConfig->ClockFilter);
      /* Get the TIMx SMCR register value */
      tmpsmcr = htim->Instance->SMCR;
 800266e:	6822      	ldr	r2, [r4, #0]
 8002670:	6893      	ldr	r3, [r2, #8]
      /* Reset the SMS and TS Bits */
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002676:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800267a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800267e:	e009      	b.n	8002694 <HAL_TIM_ConfigClockSource+0xd8>
  
      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002680:	68ca      	ldr	r2, [r1, #12]
 8002682:	6849      	ldr	r1, [r1, #4]
 8002684:	f7ff fcbf 	bl	8002006 <TIM_TI1_ConfigInputStage>
                        sClockSourceConfig->ClockPolarity, 
                        sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002688:	6822      	ldr	r2, [r4, #0]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800268a:	6893      	ldr	r3, [r2, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800268c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002690:	f043 0357 	orr.w	r3, r3, #87	; 0x57
      TIM_ETR_SetConfig(htim->Instance, 
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002694:	6093      	str	r3, [r2, #8]
    }
    break;
 8002696:	e016      	b.n	80026c6 <HAL_TIM_ConfigClockSource+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
  
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002698:	68ca      	ldr	r2, [r1, #12]
 800269a:	6849      	ldr	r1, [r1, #4]
 800269c:	f7ff fcb3 	bl	8002006 <TIM_TI1_ConfigInputStage>
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026a0:	6822      	ldr	r2, [r4, #0]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80026a2:	6893      	ldr	r3, [r2, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80026a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80026a8:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80026ac:	e7f2      	b.n	8002694 <HAL_TIM_ConfigClockSource+0xd8>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80026ae:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80026b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80026b4:	f043 0317 	orr.w	r3, r3, #23
 80026b8:	e004      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x108>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80026ba:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80026bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80026c0:	f043 0327 	orr.w	r3, r3, #39	; 0x27
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80026c4:	6083      	str	r3, [r0, #8]
    break;
    
    default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 80026c6:	2301      	movs	r3, #1
  
  __HAL_UNLOCK(htim);
 80026c8:	2000      	movs	r0, #0
    break;
    
    default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 80026ca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80026ce:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 80026d2:	bd10      	pop	{r4, pc}
 80026d4:	fffe0088 	.word	0xfffe0088

080026d8 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80026d8:	2301      	movs	r3, #1

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80026da:	408a      	lsls	r2, r1
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80026dc:	408b      	lsls	r3, r1
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80026de:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80026e0:	6a04      	ldr	r4, [r0, #32]
 80026e2:	ea24 0303 	bic.w	r3, r4, r3
 80026e6:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80026e8:	6a03      	ldr	r3, [r0, #32]
 80026ea:	ea42 0103 	orr.w	r1, r2, r3
 80026ee:	6201      	str	r1, [r0, #32]
 80026f0:	bd10      	pop	{r4, pc}
	...

080026f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026f4:	b510      	push	{r4, lr}
 80026f6:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026f8:	2201      	movs	r2, #1
 80026fa:	6800      	ldr	r0, [r0, #0]
 80026fc:	f7ff ffec 	bl	80026d8 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8002700:	6823      	ldr	r3, [r4, #0]
 8002702:	4a08      	ldr	r2, [pc, #32]	; (8002724 <HAL_TIM_PWM_Start+0x30>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d003      	beq.n	8002710 <HAL_TIM_PWM_Start+0x1c>
 8002708:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800270c:	4293      	cmp	r3, r2
 800270e:	d103      	bne.n	8002718 <HAL_TIM_PWM_Start+0x24>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002710:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002712:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002716:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002718:	681a      	ldr	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
} 
 800271a:	2000      	movs	r0, #0
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800271c:	f042 0201 	orr.w	r2, r2, #1
 8002720:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
} 
 8002722:	bd10      	pop	{r4, pc}
 8002724:	40010000 	.word	0x40010000

08002728 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002728:	6a03      	ldr	r3, [r0, #32]
 800272a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800272e:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002730:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002732:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002734:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002736:	6d44      	ldr	r4, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002738:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800273c:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2; 
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800273e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8002742:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002746:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8002748:	688d      	ldr	r5, [r1, #8]
 800274a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800274e:	4d09      	ldr	r5, [pc, #36]	; (8002774 <TIM_OC5_SetConfig+0x4c>)
 8002750:	42a8      	cmp	r0, r5
 8002752:	d003      	beq.n	800275c <TIM_OC5_SetConfig+0x34>
 8002754:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002758:	42a8      	cmp	r0, r5
 800275a:	d104      	bne.n	8002766 <TIM_OC5_SetConfig+0x3e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800275c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8002760:	694d      	ldr	r5, [r1, #20]
 8002762:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002766:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002768:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800276a:	6544      	str	r4, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800276c:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800276e:	6203      	str	r3, [r0, #32]
 8002770:	bd30      	pop	{r4, r5, pc}
 8002772:	bf00      	nop
 8002774:	40010000 	.word	0x40010000

08002778 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002778:	6a03      	ldr	r3, [r0, #32]
 800277a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800277e:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002780:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002782:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002784:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002786:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002788:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx = TIMx->CCMR3;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800278c:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2; 
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800278e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002796:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 800279a:	688d      	ldr	r5, [r1, #8]
 800279c:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80027a0:	4d08      	ldr	r5, [pc, #32]	; (80027c4 <TIM_OC6_SetConfig+0x4c>)
 80027a2:	42a8      	cmp	r0, r5
 80027a4:	d003      	beq.n	80027ae <TIM_OC6_SetConfig+0x36>
 80027a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80027aa:	42a8      	cmp	r0, r5
 80027ac:	d104      	bne.n	80027b8 <TIM_OC6_SetConfig+0x40>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80027ae:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 80027b2:	694d      	ldr	r5, [r1, #20]
 80027b4:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027b8:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80027ba:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80027bc:	684b      	ldr	r3, [r1, #4]
 80027be:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80027c0:	6202      	str	r2, [r0, #32]
 80027c2:	bd30      	pop	{r4, r5, pc}
 80027c4:	40010000 	.word	0x40010000

080027c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 80027c8:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80027ca:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 80027ce:	4604      	mov	r4, r0
 80027d0:	460d      	mov	r5, r1
 80027d2:	2002      	movs	r0, #2
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d07b      	beq.n	80028d0 <HAL_TIM_PWM_ConfigChannel+0x108>
 80027d8:	2301      	movs	r3, #1
  
  htim->State = HAL_TIM_STATE_BUSY;
    
  switch (Channel)
 80027da:	2a08      	cmp	r2, #8
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
  
  htim->State = HAL_TIM_STATE_BUSY;
 80027dc:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80027e0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
    
  switch (Channel)
 80027e4:	d03c      	beq.n	8002860 <HAL_TIM_PWM_ConfigChannel+0x98>
 80027e6:	d813      	bhi.n	8002810 <HAL_TIM_PWM_ConfigChannel+0x48>
 80027e8:	b34a      	cbz	r2, 800283e <HAL_TIM_PWM_ConfigChannel+0x76>
 80027ea:	2a04      	cmp	r2, #4
 80027ec:	d16a      	bne.n	80028c4 <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027ee:	6820      	ldr	r0, [r4, #0]
 80027f0:	f7ff fe4a 	bl	8002488 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027f4:	6823      	ldr	r3, [r4, #0]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80027f6:	6929      	ldr	r1, [r5, #16]
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027f8:	699a      	ldr	r2, [r3, #24]
 80027fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027fe:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002800:	699a      	ldr	r2, [r3, #24]
 8002802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002806:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002808:	699a      	ldr	r2, [r3, #24]
 800280a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800280e:	e025      	b.n	800285c <HAL_TIM_PWM_ConfigChannel+0x94>
  /* Check input state */
  __HAL_LOCK(htim);
  
  htim->State = HAL_TIM_STATE_BUSY;
    
  switch (Channel)
 8002810:	2a10      	cmp	r2, #16
 8002812:	d036      	beq.n	8002882 <HAL_TIM_PWM_ConfigChannel+0xba>
 8002814:	2a14      	cmp	r2, #20
 8002816:	d044      	beq.n	80028a2 <HAL_TIM_PWM_ConfigChannel+0xda>
 8002818:	2a0c      	cmp	r2, #12
 800281a:	d153      	bne.n	80028c4 <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800281c:	6820      	ldr	r0, [r4, #0]
 800281e:	f7ff fe99 	bl	8002554 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002822:	6823      	ldr	r3, [r4, #0]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8002824:	6929      	ldr	r1, [r5, #16]
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002826:	69da      	ldr	r2, [r3, #28]
 8002828:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800282c:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800282e:	69da      	ldr	r2, [r3, #28]
 8002830:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002834:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8002836:	69da      	ldr	r2, [r3, #28]
 8002838:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800283c:	e01f      	b.n	800287e <HAL_TIM_PWM_ConfigChannel+0xb6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800283e:	6820      	ldr	r0, [r4, #0]
 8002840:	f7ff fdf4 	bl	800242c <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002844:	6823      	ldr	r3, [r4, #0]
 8002846:	699a      	ldr	r2, [r3, #24]
 8002848:	f042 0208 	orr.w	r2, r2, #8
 800284c:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800284e:	699a      	ldr	r2, [r3, #24]
 8002850:	f022 0204 	bic.w	r2, r2, #4
 8002854:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002856:	692a      	ldr	r2, [r5, #16]
 8002858:	6999      	ldr	r1, [r3, #24]
 800285a:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800285c:	619a      	str	r2, [r3, #24]
    }
    break;
 800285e:	e031      	b.n	80028c4 <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002860:	6820      	ldr	r0, [r4, #0]
 8002862:	f7ff fe45 	bl	80024f0 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002866:	6823      	ldr	r3, [r4, #0]
 8002868:	69da      	ldr	r2, [r3, #28]
 800286a:	f042 0208 	orr.w	r2, r2, #8
 800286e:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002870:	69da      	ldr	r2, [r3, #28]
 8002872:	f022 0204 	bic.w	r2, r2, #4
 8002876:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002878:	692a      	ldr	r2, [r5, #16]
 800287a:	69d9      	ldr	r1, [r3, #28]
 800287c:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 800287e:	61da      	str	r2, [r3, #28]
    }
    break;
 8002880:	e020      	b.n	80028c4 <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002882:	6820      	ldr	r0, [r4, #0]
 8002884:	f7ff ff50 	bl	8002728 <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002888:	6823      	ldr	r3, [r4, #0]
 800288a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800288c:	f042 0208 	orr.w	r2, r2, #8
 8002890:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002892:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002894:	f022 0204 	bic.w	r2, r2, #4
 8002898:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 800289a:	692a      	ldr	r2, [r5, #16]
 800289c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800289e:	430a      	orrs	r2, r1
 80028a0:	e00f      	b.n	80028c2 <HAL_TIM_PWM_ConfigChannel+0xfa>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80028a2:	6820      	ldr	r0, [r4, #0]
 80028a4:	f7ff ff68 	bl	8002778 <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80028a8:	6823      	ldr	r3, [r4, #0]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 80028aa:	6909      	ldr	r1, [r1, #16]
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80028ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028b2:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80028b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 80028bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028be:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80028c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 80028c4:	2301      	movs	r3, #1
    
  __HAL_UNLOCK(htim);
 80028c6:	2000      	movs	r0, #0
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 80028c8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 80028cc:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 80028d0:	bd38      	pop	{r3, r4, r5, pc}
	...

080028d4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80028d4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80028d8:	2b01      	cmp	r3, #1
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80028da:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80028dc:	d01c      	beq.n	8002918 <HAL_TIMEx_MasterConfigSynchronization+0x44>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028de:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80028e0:	4c0e      	ldr	r4, [pc, #56]	; (800291c <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  
  /* Check input state */
  __HAL_LOCK(htim);

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028e2:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80028e4:	42a2      	cmp	r2, r4

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028e6:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80028e8:	d003      	beq.n	80028f2 <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 80028ea:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80028ee:	42a2      	cmp	r2, r4
 80028f0:	d103      	bne.n	80028fa <HAL_TIMEx_MasterConfigSynchronization+0x26>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80028f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80028f6:	684c      	ldr	r4, [r1, #4]
 80028f8:	4323      	orrs	r3, r4
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028fa:	680c      	ldr	r4, [r1, #0]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002900:	6889      	ldr	r1, [r1, #8]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002902:	4323      	orrs	r3, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002904:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002908:	6053      	str	r3, [r2, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800290a:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 800290c:	2300      	movs	r3, #0
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800290e:	6091      	str	r1, [r2, #8]

  __HAL_UNLOCK(htim);
 8002910:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 8002914:	4618      	mov	r0, r3
 8002916:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002918:	2002      	movs	r0, #2
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
  
  return HAL_OK;
} 
 800291a:	bd30      	pop	{r4, r5, pc}
 800291c:	40010000 	.word	0x40010000

08002920 <HAL_TIMEx_CommutationCallback>:
 8002920:	4770      	bx	lr

08002922 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002922:	4770      	bx	lr

08002924 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002928:	9d06      	ldr	r5, [sp, #24]
 800292a:	4604      	mov	r4, r0
 800292c:	460f      	mov	r7, r1
 800292e:	4616      	mov	r6, r2
 8002930:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002932:	6821      	ldr	r1, [r4, #0]
 8002934:	69ca      	ldr	r2, [r1, #28]
 8002936:	ea37 0302 	bics.w	r3, r7, r2
 800293a:	bf0c      	ite	eq
 800293c:	2201      	moveq	r2, #1
 800293e:	2200      	movne	r2, #0
 8002940:	42b2      	cmp	r2, r6
 8002942:	d11d      	bne.n	8002980 <UART_WaitOnFlagUntilTimeout+0x5c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002944:	1c6b      	adds	r3, r5, #1
 8002946:	d0f5      	beq.n	8002934 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8002948:	b99d      	cbnz	r5, 8002972 <UART_WaitOnFlagUntilTimeout+0x4e>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800294a:	6823      	ldr	r3, [r4, #0]

        huart->gState = HAL_UART_STATE_READY;
        huart->RxState = HAL_UART_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800294c:	2003      	movs	r0, #3
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002954:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	f022 0201 	bic.w	r2, r2, #1
 800295c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800295e:	2320      	movs	r3, #32
 8002960:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002964:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002968:	2300      	movs	r3, #0
 800296a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800296e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8002972:	f7fd fcf7 	bl	8000364 <HAL_GetTick>
 8002976:	ebc8 0000 	rsb	r0, r8, r0
 800297a:	4285      	cmp	r5, r0
 800297c:	d8d9      	bhi.n	8002932 <UART_WaitOnFlagUntilTimeout+0xe>
 800297e:	e7e4      	b.n	800294a <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002980:	2000      	movs	r0, #0
}
 8002982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002986 <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002986:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800298a:	461f      	mov	r7, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800298c:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002990:	4604      	mov	r4, r0
 8002992:	460d      	mov	r5, r1
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002994:	2b20      	cmp	r3, #32
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002996:	4690      	mov	r8, r2
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002998:	d14b      	bne.n	8002a32 <HAL_UART_Transmit+0xac>
  {
    if((pData == NULL ) || (Size == 0U))
 800299a:	2900      	cmp	r1, #0
 800299c:	d047      	beq.n	8002a2e <HAL_UART_Transmit+0xa8>
 800299e:	2a00      	cmp	r2, #0
 80029a0:	d045      	beq.n	8002a2e <HAL_UART_Transmit+0xa8>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029a2:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d043      	beq.n	8002a32 <HAL_UART_Transmit+0xac>
 80029aa:	2301      	movs	r3, #1
 80029ac:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029b0:	2300      	movs	r3, #0
 80029b2:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029b4:	2321      	movs	r3, #33	; 0x21
 80029b6:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80029ba:	f7fd fcd3 	bl	8000364 <HAL_GetTick>
 80029be:	4606      	mov	r6, r0

    huart->TxXferSize = Size;
 80029c0:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 80029c4:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80029c8:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80029cc:	b292      	uxth	r2, r2
 80029ce:	b302      	cbz	r2, 8002a12 <HAL_UART_Transmit+0x8c>
    {
      huart->TxXferCount--;
 80029d0:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029d4:	2200      	movs	r2, #0
 80029d6:	9700      	str	r7, [sp, #0]
 80029d8:	2180      	movs	r1, #128	; 0x80

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0U)
    {
      huart->TxXferCount--;
 80029da:	3b01      	subs	r3, #1
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029dc:	4620      	mov	r0, r4

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0U)
    {
      huart->TxXferCount--;
 80029de:	b29b      	uxth	r3, r3
 80029e0:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029e4:	4633      	mov	r3, r6
 80029e6:	f7ff ff9d 	bl	8002924 <UART_WaitOnFlagUntilTimeout>
 80029ea:	b108      	cbz	r0, 80029f0 <HAL_UART_Transmit+0x6a>
      {
        return HAL_TIMEOUT;
 80029ec:	2003      	movs	r0, #3
 80029ee:	e021      	b.n	8002a34 <HAL_UART_Transmit+0xae>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029f0:	68a3      	ldr	r3, [r4, #8]
 80029f2:	6822      	ldr	r2, [r4, #0]
 80029f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029f8:	d107      	bne.n	8002a0a <HAL_UART_Transmit+0x84>
 80029fa:	6923      	ldr	r3, [r4, #16]
 80029fc:	b92b      	cbnz	r3, 8002a0a <HAL_UART_Transmit+0x84>
      {
        tmp = (uint16_t*) pData;
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80029fe:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a06:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2;
 8002a08:	e7de      	b.n	80029c8 <HAL_UART_Transmit+0x42>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002a0a:	782b      	ldrb	r3, [r5, #0]
 8002a0c:	3501      	adds	r5, #1
 8002a0e:	6293      	str	r3, [r2, #40]	; 0x28
 8002a10:	e7da      	b.n	80029c8 <HAL_UART_Transmit+0x42>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a12:	9700      	str	r7, [sp, #0]
 8002a14:	4633      	mov	r3, r6
 8002a16:	2140      	movs	r1, #64	; 0x40
 8002a18:	4620      	mov	r0, r4
 8002a1a:	f7ff ff83 	bl	8002924 <UART_WaitOnFlagUntilTimeout>
 8002a1e:	2800      	cmp	r0, #0
 8002a20:	d1e4      	bne.n	80029ec <HAL_UART_Transmit+0x66>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a22:	2320      	movs	r3, #32

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a24:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a28:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    return HAL_OK;
 8002a2c:	e002      	b.n	8002a34 <HAL_UART_Transmit+0xae>
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0U))
    {
      return  HAL_ERROR;
 8002a2e:	2001      	movs	r0, #1
 8002a30:	e000      	b.n	8002a34 <HAL_UART_Transmit+0xae>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002a32:	2002      	movs	r0, #2
  }
}
 8002a34:	b002      	add	sp, #8
 8002a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002a3c <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart: uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a3c:	b538      	push	{r3, r4, r5, lr}
 8002a3e:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002a40:	6805      	ldr	r5, [r0, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a42:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002a44:	6922      	ldr	r2, [r4, #16]
 8002a46:	68a1      	ldr	r1, [r4, #8]
 8002a48:	6828      	ldr	r0, [r5, #0]
 8002a4a:	4311      	orrs	r1, r2
 8002a4c:	6962      	ldr	r2, [r4, #20]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	ea42 0103 	orr.w	r1, r2, r3
 8002a54:	4a88      	ldr	r2, [pc, #544]	; (8002c78 <UART_SetConfig+0x23c>)
 8002a56:	4002      	ands	r2, r0
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002a58:	69a0      	ldr	r0, [r4, #24]
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	602a      	str	r2, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a5e:	686a      	ldr	r2, [r5, #4]
 8002a60:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8002a64:	68e2      	ldr	r2, [r4, #12]
 8002a66:	430a      	orrs	r2, r1
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002a68:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a6a:	606a      	str	r2, [r5, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002a6c:	4301      	orrs	r1, r0
 8002a6e:	68aa      	ldr	r2, [r5, #8]
 8002a70:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002a74:	430a      	orrs	r2, r1
 8002a76:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a78:	4a80      	ldr	r2, [pc, #512]	; (8002c7c <UART_SetConfig+0x240>)
 8002a7a:	4295      	cmp	r5, r2
 8002a7c:	d107      	bne.n	8002a8e <UART_SetConfig+0x52>
 8002a7e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8002a82:	497f      	ldr	r1, [pc, #508]	; (8002c80 <UART_SetConfig+0x244>)
 8002a84:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002a88:	f002 0203 	and.w	r2, r2, #3
 8002a8c:	e009      	b.n	8002aa2 <UART_SetConfig+0x66>
 8002a8e:	4a7d      	ldr	r2, [pc, #500]	; (8002c84 <UART_SetConfig+0x248>)
 8002a90:	4295      	cmp	r5, r2
 8002a92:	d10b      	bne.n	8002aac <UART_SetConfig+0x70>
 8002a94:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8002a98:	497b      	ldr	r1, [pc, #492]	; (8002c88 <UART_SetConfig+0x24c>)
 8002a9a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002a9e:	f002 020c 	and.w	r2, r2, #12

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aa6:	5c8a      	ldrb	r2, [r1, r2]
 8002aa8:	d073      	beq.n	8002b92 <UART_SetConfig+0x156>
 8002aaa:	e0b6      	b.n	8002c1a <UART_SetConfig+0x1de>
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002aac:	4a77      	ldr	r2, [pc, #476]	; (8002c8c <UART_SetConfig+0x250>)
 8002aae:	4295      	cmp	r5, r2
 8002ab0:	d10d      	bne.n	8002ace <UART_SetConfig+0x92>
 8002ab2:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8002ab6:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002aba:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8002abe:	2a10      	cmp	r2, #16
 8002ac0:	f000 8086 	beq.w	8002bd0 <UART_SetConfig+0x194>
 8002ac4:	d95d      	bls.n	8002b82 <UART_SetConfig+0x146>
 8002ac6:	2a20      	cmp	r2, #32
 8002ac8:	d078      	beq.n	8002bbc <UART_SetConfig+0x180>
 8002aca:	2a30      	cmp	r2, #48	; 0x30
 8002acc:	e00e      	b.n	8002aec <UART_SetConfig+0xb0>
 8002ace:	4a70      	ldr	r2, [pc, #448]	; (8002c90 <UART_SetConfig+0x254>)
 8002ad0:	4295      	cmp	r5, r2
 8002ad2:	d10d      	bne.n	8002af0 <UART_SetConfig+0xb4>
 8002ad4:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 8002ad8:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002adc:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8002ae0:	2a40      	cmp	r2, #64	; 0x40
 8002ae2:	d075      	beq.n	8002bd0 <UART_SetConfig+0x194>
 8002ae4:	d94d      	bls.n	8002b82 <UART_SetConfig+0x146>
 8002ae6:	2a80      	cmp	r2, #128	; 0x80
 8002ae8:	d068      	beq.n	8002bbc <UART_SetConfig+0x180>
 8002aea:	2ac0      	cmp	r2, #192	; 0xc0
 8002aec:	d07c      	beq.n	8002be8 <UART_SetConfig+0x1ac>
 8002aee:	e087      	b.n	8002c00 <UART_SetConfig+0x1c4>
 8002af0:	4a68      	ldr	r2, [pc, #416]	; (8002c94 <UART_SetConfig+0x258>)
 8002af2:	4295      	cmp	r5, r2
 8002af4:	d10f      	bne.n	8002b16 <UART_SetConfig+0xda>
 8002af6:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 8002afa:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002afe:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002b02:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002b06:	d063      	beq.n	8002bd0 <UART_SetConfig+0x194>
 8002b08:	d93b      	bls.n	8002b82 <UART_SetConfig+0x146>
 8002b0a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002b0e:	d055      	beq.n	8002bbc <UART_SetConfig+0x180>
 8002b10:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002b14:	e7ea      	b.n	8002aec <UART_SetConfig+0xb0>
 8002b16:	4a60      	ldr	r2, [pc, #384]	; (8002c98 <UART_SetConfig+0x25c>)
 8002b18:	4295      	cmp	r5, r2
 8002b1a:	d112      	bne.n	8002b42 <UART_SetConfig+0x106>
 8002b1c:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 8002b20:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002b24:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8002b28:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002b2c:	d050      	beq.n	8002bd0 <UART_SetConfig+0x194>
 8002b2e:	d802      	bhi.n	8002b36 <UART_SetConfig+0xfa>
 8002b30:	2a00      	cmp	r2, #0
 8002b32:	d03d      	beq.n	8002bb0 <UART_SetConfig+0x174>
 8002b34:	e064      	b.n	8002c00 <UART_SetConfig+0x1c4>
 8002b36:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002b3a:	d03f      	beq.n	8002bbc <UART_SetConfig+0x180>
 8002b3c:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8002b40:	e7d4      	b.n	8002aec <UART_SetConfig+0xb0>
 8002b42:	4a56      	ldr	r2, [pc, #344]	; (8002c9c <UART_SetConfig+0x260>)
 8002b44:	4295      	cmp	r5, r2
 8002b46:	d10f      	bne.n	8002b68 <UART_SetConfig+0x12c>
 8002b48:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8002b4c:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002b50:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8002b54:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002b58:	d03a      	beq.n	8002bd0 <UART_SetConfig+0x194>
 8002b5a:	d912      	bls.n	8002b82 <UART_SetConfig+0x146>
 8002b5c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002b60:	d02c      	beq.n	8002bbc <UART_SetConfig+0x180>
 8002b62:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8002b66:	e7c1      	b.n	8002aec <UART_SetConfig+0xb0>
 8002b68:	4a4d      	ldr	r2, [pc, #308]	; (8002ca0 <UART_SetConfig+0x264>)
 8002b6a:	4295      	cmp	r5, r2
 8002b6c:	d148      	bne.n	8002c00 <UART_SetConfig+0x1c4>
 8002b6e:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 8002b72:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002b76:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8002b7a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002b7e:	d027      	beq.n	8002bd0 <UART_SetConfig+0x194>
 8002b80:	d801      	bhi.n	8002b86 <UART_SetConfig+0x14a>
 8002b82:	b17a      	cbz	r2, 8002ba4 <UART_SetConfig+0x168>
 8002b84:	e03c      	b.n	8002c00 <UART_SetConfig+0x1c4>
 8002b86:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002b8a:	d017      	beq.n	8002bbc <UART_SetConfig+0x180>
 8002b8c:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8002b90:	e7ac      	b.n	8002aec <UART_SetConfig+0xb0>

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  {
    switch (clocksource)
 8002b92:	2a08      	cmp	r2, #8
 8002b94:	d837      	bhi.n	8002c06 <UART_SetConfig+0x1ca>
 8002b96:	e8df f002 	tbb	[pc, r2]
 8002b9a:	0e08      	.short	0x0e08
 8002b9c:	361e3614 	.word	0x361e3614
 8002ba0:	3636      	.short	0x3636
 8002ba2:	2a          	.byte	0x2a
 8002ba3:	00          	.byte	0x00

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ba4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ba8:	d140      	bne.n	8002c2c <UART_SetConfig+0x1f0>
  {
    switch (clocksource)
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002baa:	f7fe fddb 	bl	8001764 <HAL_RCC_GetPCLK1Freq>
 8002bae:	e014      	b.n	8002bda <UART_SetConfig+0x19e>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bb4:	d13d      	bne.n	8002c32 <UART_SetConfig+0x1f6>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002bb6:	f7fe fded 	bl	8001794 <HAL_RCC_GetPCLK2Freq>
 8002bba:	e00e      	b.n	8002bda <UART_SetConfig+0x19e>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bc0:	d13a      	bne.n	8002c38 <UART_SetConfig+0x1fc>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002bc2:	6860      	ldr	r0, [r4, #4]
 8002bc4:	0842      	lsrs	r2, r0, #1
 8002bc6:	f102 73f4 	add.w	r3, r2, #31981568	; 0x1e80000
 8002bca:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002bce:	e012      	b.n	8002bf6 <UART_SetConfig+0x1ba>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bd4:	d139      	bne.n	8002c4a <UART_SetConfig+0x20e>
      break;
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002bd6:	f7fe fcd7 	bl	8001588 <HAL_RCC_GetSysClockFreq>
 8002bda:	6863      	ldr	r3, [r4, #4]
 8002bdc:	085a      	lsrs	r2, r3, #1
 8002bde:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8002be2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002be6:	e008      	b.n	8002bfa <UART_SetConfig+0x1be>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002be8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bec:	d137      	bne.n	8002c5e <UART_SetConfig+0x222>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002bee:	6860      	ldr	r0, [r4, #4]
 8002bf0:	0843      	lsrs	r3, r0, #1
 8002bf2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002bf6:	fbb3 f3f0 	udiv	r3, r3, r0
 8002bfa:	b29b      	uxth	r3, r3
{
  uint32_t tmpreg                     = 0x00000000U;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000U;
  uint16_t usartdiv                   = 0x0000U;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bfc:	2000      	movs	r0, #0
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
 8002bfe:	e004      	b.n	8002c0a <UART_SetConfig+0x1ce>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c04:	d135      	bne.n	8002c72 <UART_SetConfig+0x236>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002c06:	2001      	movs	r0, #1
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg                     = 0x00000000U;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000U;
  uint16_t usartdiv                   = 0x0000U;
 8002c08:	2300      	movs	r3, #0
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c0a:	f3c3 0142 	ubfx	r1, r3, #1, #3
 8002c0e:	f023 030f 	bic.w	r3, r3, #15
    huart->Instance->BRR = brrtemp;
 8002c12:	6822      	ldr	r2, [r4, #0]
 8002c14:	430b      	orrs	r3, r1
 8002c16:	60d3      	str	r3, [r2, #12]
 8002c18:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    switch (clocksource)
 8002c1a:	2a08      	cmp	r2, #8
 8002c1c:	d829      	bhi.n	8002c72 <UART_SetConfig+0x236>
 8002c1e:	e8df f002 	tbb	[pc, r2]
 8002c22:	0805      	.short	0x0805
 8002c24:	2814280b 	.word	0x2814280b
 8002c28:	2828      	.short	0x2828
 8002c2a:	1e          	.byte	0x1e
 8002c2b:	00          	.byte	0x00
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002c2c:	f7fe fd9a 	bl	8001764 <HAL_RCC_GetPCLK1Freq>
 8002c30:	e00d      	b.n	8002c4e <UART_SetConfig+0x212>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002c32:	f7fe fdaf 	bl	8001794 <HAL_RCC_GetPCLK2Freq>
 8002c36:	e00a      	b.n	8002c4e <UART_SetConfig+0x212>
      break;
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002c38:	6861      	ldr	r1, [r4, #4]
 8002c3a:	084a      	lsrs	r2, r1, #1
 8002c3c:	f502 0374 	add.w	r3, r2, #15990784	; 0xf40000
 8002c40:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002c44:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c48:	e00f      	b.n	8002c6a <UART_SetConfig+0x22e>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002c4a:	f7fe fc9d 	bl	8001588 <HAL_RCC_GetSysClockFreq>
 8002c4e:	6863      	ldr	r3, [r4, #4]
 8002c50:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002c54:	fbb0 f0f3 	udiv	r0, r0, r3
 8002c58:	b280      	uxth	r0, r0
 8002c5a:	60e8      	str	r0, [r5, #12]
 8002c5c:	e007      	b.n	8002c6e <UART_SetConfig+0x232>
      break;
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002c5e:	6862      	ldr	r2, [r4, #4]
 8002c60:	0853      	lsrs	r3, r2, #1
 8002c62:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002c66:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	60eb      	str	r3, [r5, #12]
{
  uint32_t tmpreg                     = 0x00000000U;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000U;
  uint16_t usartdiv                   = 0x0000U;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c6e:	2000      	movs	r0, #0
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
 8002c70:	bd38      	pop	{r3, r4, r5, pc}
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002c72:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 8002c74:	bd38      	pop	{r3, r4, r5, pc}
 8002c76:	bf00      	nop
 8002c78:	efff69f3 	.word	0xefff69f3
 8002c7c:	40011000 	.word	0x40011000
 8002c80:	08006e24 	.word	0x08006e24
 8002c84:	40004400 	.word	0x40004400
 8002c88:	08006e28 	.word	0x08006e28
 8002c8c:	40004800 	.word	0x40004800
 8002c90:	40004c00 	.word	0x40004c00
 8002c94:	40005000 	.word	0x40005000
 8002c98:	40011400 	.word	0x40011400
 8002c9c:	40007800 	.word	0x40007800
 8002ca0:	40007c00 	.word	0x40007c00

08002ca4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ca4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002ca6:	07da      	lsls	r2, r3, #31
  * @brief Configure the UART peripheral advanced features
  * @param huart: uart handle
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ca8:	b510      	push	{r4, lr}
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002caa:	d506      	bpl.n	8002cba <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002cac:	6804      	ldr	r4, [r0, #0]
 8002cae:	6862      	ldr	r2, [r4, #4]
 8002cb0:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8002cb4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cba:	079c      	lsls	r4, r3, #30
 8002cbc:	d506      	bpl.n	8002ccc <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cbe:	6804      	ldr	r4, [r0, #0]
 8002cc0:	6862      	ldr	r2, [r4, #4]
 8002cc2:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8002cc6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ccc:	0759      	lsls	r1, r3, #29
 8002cce:	d506      	bpl.n	8002cde <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002cd0:	6804      	ldr	r4, [r0, #0]
 8002cd2:	6862      	ldr	r2, [r4, #4]
 8002cd4:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8002cd8:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cde:	071a      	lsls	r2, r3, #28
 8002ce0:	d506      	bpl.n	8002cf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ce2:	6804      	ldr	r4, [r0, #0]
 8002ce4:	6862      	ldr	r2, [r4, #4]
 8002ce6:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8002cea:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002cec:	430a      	orrs	r2, r1
 8002cee:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002cf0:	06dc      	lsls	r4, r3, #27
 8002cf2:	d506      	bpl.n	8002d02 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cf4:	6804      	ldr	r4, [r0, #0]
 8002cf6:	68a2      	ldr	r2, [r4, #8]
 8002cf8:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8002cfc:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d02:	0699      	lsls	r1, r3, #26
 8002d04:	d506      	bpl.n	8002d14 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d06:	6804      	ldr	r4, [r0, #0]
 8002d08:	68a2      	ldr	r2, [r4, #8]
 8002d0a:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8002d0e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002d10:	430a      	orrs	r2, r1
 8002d12:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d14:	065a      	lsls	r2, r3, #25
 8002d16:	d510      	bpl.n	8002d3a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d18:	6801      	ldr	r1, [r0, #0]
 8002d1a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002d1c:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d1e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d22:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002d26:	ea42 0204 	orr.w	r2, r2, r4
 8002d2a:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d2c:	d105      	bne.n	8002d3a <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d2e:	684a      	ldr	r2, [r1, #4]
 8002d30:	f422 04c0 	bic.w	r4, r2, #6291456	; 0x600000
 8002d34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002d36:	4322      	orrs	r2, r4
 8002d38:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d3a:	061b      	lsls	r3, r3, #24
 8002d3c:	d506      	bpl.n	8002d4c <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d3e:	6801      	ldr	r1, [r0, #0]
 8002d40:	684b      	ldr	r3, [r1, #4]
 8002d42:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002d46:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	604b      	str	r3, [r1, #4]
 8002d4c:	bd10      	pop	{r4, pc}

08002d4e <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d50:	2600      	movs	r6, #0
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d52:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d54:	66c6      	str	r6, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002d56:	f7fd fb05 	bl	8000364 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d5a:	6823      	ldr	r3, [r4, #0]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002d5c:	4605      	mov	r5, r0

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	071a      	lsls	r2, r3, #28
 8002d62:	d404      	bmi.n	8002d6e <UART_CheckIdleState+0x20>
      /* Timeout Occurred */
      return HAL_TIMEOUT;
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d64:	6823      	ldr	r3, [r4, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	075b      	lsls	r3, r3, #29
 8002d6a:	d51a      	bpl.n	8002da2 <UART_CheckIdleState+0x54>
 8002d6c:	e00d      	b.n	8002d8a <UART_CheckIdleState+0x3c>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d6e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d72:	4632      	mov	r2, r6
 8002d74:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	4620      	mov	r0, r4
 8002d7e:	f7ff fdd1 	bl	8002924 <UART_WaitOnFlagUntilTimeout>
 8002d82:	2800      	cmp	r0, #0
 8002d84:	d0ee      	beq.n	8002d64 <UART_CheckIdleState+0x16>
    {
      /* Timeout Occurred */
      return HAL_TIMEOUT;
 8002d86:	2003      	movs	r0, #3
 8002d88:	e013      	b.n	8002db2 <UART_CheckIdleState+0x64>
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d8a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002d94:	4620      	mov	r0, r4
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	462b      	mov	r3, r5
 8002d9a:	f7ff fdc3 	bl	8002924 <UART_WaitOnFlagUntilTimeout>
 8002d9e:	2800      	cmp	r0, #0
 8002da0:	d1f1      	bne.n	8002d86 <UART_CheckIdleState+0x38>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8002da2:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002da4:	2000      	movs	r0, #0
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8002da6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002daa:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
 8002dae:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
}
 8002db2:	b002      	add	sp, #8
 8002db4:	bd70      	pop	{r4, r5, r6, pc}

08002db6 <HAL_UART_Init>:
  *         parameters in the UART_InitTypeDef and creates the associated handle .
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002db6:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002db8:	4604      	mov	r4, r0
 8002dba:	b360      	cbz	r0, 8002e16 <HAL_UART_Init+0x60>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002dbc:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002dc0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002dc4:	b91b      	cbnz	r3, 8002dce <HAL_UART_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dc6:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dca:	f003 fb31 	bl	8006430 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002dce:	6822      	ldr	r2, [r4, #0]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dd0:	2324      	movs	r3, #36	; 0x24

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dd2:	4620      	mov	r0, r4

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dd4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002dd8:	6813      	ldr	r3, [r2, #0]
 8002dda:	f023 0301 	bic.w	r3, r3, #1
 8002dde:	6013      	str	r3, [r2, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002de0:	f7ff fe2c 	bl	8002a3c <UART_SetConfig>
 8002de4:	2801      	cmp	r0, #1
 8002de6:	d016      	beq.n	8002e16 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002de8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002dea:	b113      	cbz	r3, 8002df2 <HAL_UART_Init+0x3c>
  {
    UART_AdvFeatureConfig(huart);
 8002dec:	4620      	mov	r0, r4
 8002dee:	f7ff ff59 	bl	8002ca4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002df2:	6823      	ldr	r3, [r4, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002df4:	4620      	mov	r0, r4
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dfc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e04:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	f042 0201 	orr.w	r2, r2, #1

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 8002e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002e10:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e12:	f7ff bf9c 	b.w	8002d4e <UART_CheckIdleState>
}
 8002e16:	2001      	movs	r0, #1
 8002e18:	bd10      	pop	{r4, pc}
	...

08002e1c <Motor_Correction>:
	//int errorD = 0;
	//int oldErrorP = 0;

	int correction = 0;

	if (ir_disable == TRUE) {
 8002e1c:	2801      	cmp	r0, #1
 8002e1e:	d111      	bne.n	8002e44 <Motor_Correction+0x28>
		errorP = ((r_count - prev_r_count) - (l_count - prev_l_count))*10;
 8002e20:	4b2a      	ldr	r3, [pc, #168]	; (8002ecc <Motor_Correction+0xb0>)
		return errorP/P_speed;
 8002e22:	6818      	ldr	r0, [r3, #0]
 8002e24:	4b2a      	ldr	r3, [pc, #168]	; (8002ed0 <Motor_Correction+0xb4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4418      	add	r0, r3
	//int oldErrorP = 0;

	int correction = 0;

	if (ir_disable == TRUE) {
		errorP = ((r_count - prev_r_count) - (l_count - prev_l_count))*10;
 8002e2a:	4b2a      	ldr	r3, [pc, #168]	; (8002ed4 <Motor_Correction+0xb8>)
		return errorP/P_speed;
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	1ac0      	subs	r0, r0, r3
	//int oldErrorP = 0;

	int correction = 0;

	if (ir_disable == TRUE) {
		errorP = ((r_count - prev_r_count) - (l_count - prev_l_count))*10;
 8002e30:	4b29      	ldr	r3, [pc, #164]	; (8002ed8 <Motor_Correction+0xbc>)
		return errorP/P_speed;
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	1ac0      	subs	r0, r0, r3
 8002e36:	230a      	movs	r3, #10
 8002e38:	4358      	muls	r0, r3
 8002e3a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002e3e:	fb90 f0f3 	sdiv	r0, r0, r3
 8002e42:	4770      	bx	lr
	}

	else {
		if (dif_lf > LEFT_THRESHOLD && dif_rf > RIGHT_THRESHOLD && r_transition_flag == FALSE && l_transition_flag == FALSE) { //both walls available
 8002e44:	4b25      	ldr	r3, [pc, #148]	; (8002edc <Motor_Correction+0xc0>)
 8002e46:	4926      	ldr	r1, [pc, #152]	; (8002ee0 <Motor_Correction+0xc4>)
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	f5b2 7f61 	cmp.w	r2, #900	; 0x384
 8002e4e:	dd0d      	ble.n	8002e6c <Motor_Correction+0x50>
 8002e50:	6808      	ldr	r0, [r1, #0]
 8002e52:	f5b0 7f61 	cmp.w	r0, #900	; 0x384
 8002e56:	dd0a      	ble.n	8002e6e <Motor_Correction+0x52>
 8002e58:	4b22      	ldr	r3, [pc, #136]	; (8002ee4 <Motor_Correction+0xc8>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	b93b      	cbnz	r3, 8002e6e <Motor_Correction+0x52>
 8002e5e:	4b22      	ldr	r3, [pc, #136]	; (8002ee8 <Motor_Correction+0xcc>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	b923      	cbnz	r3, 8002e6e <Motor_Correction+0x52>
			errorP = (dif_lf - (dif_rf + offsets[2])); //dif_rf + 500 for primary
 8002e64:	4b21      	ldr	r3, [pc, #132]	; (8002eec <Motor_Correction+0xd0>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	4403      	add	r3, r0
 8002e6a:	e006      	b.n	8002e7a <Motor_Correction+0x5e>
			//errorD = errorP - oldErrorP;
		}
		else if (dif_lf >= LEFT_THRESHOLD && dif_rf <= RIGHT_THRESHOLD) { //only left wall to correct. Optimal reading should be 1600
 8002e6c:	d107      	bne.n	8002e7e <Motor_Correction+0x62>
 8002e6e:	680b      	ldr	r3, [r1, #0]
 8002e70:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002e74:	dc03      	bgt.n	8002e7e <Motor_Correction+0x62>
			errorP = (dif_lf - offsets[0]); //75 is correction factor. Left side needs more corrections for some reason
 8002e76:	4b1d      	ldr	r3, [pc, #116]	; (8002eec <Motor_Correction+0xd0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	e01c      	b.n	8002eb8 <Motor_Correction+0x9c>
			//errorD = errorP - oldErrorP;
		}
		else if (dif_rf >= RIGHT_THRESHOLD && dif_lf <= LEFT_THRESHOLD ) {//only right wall to correct. Optimal reading should be 1500. (200 is offset)
 8002e7e:	6808      	ldr	r0, [r1, #0]
 8002e80:	f5b0 7f61 	cmp.w	r0, #900	; 0x384
 8002e84:	db06      	blt.n	8002e94 <Motor_Correction+0x78>
 8002e86:	f5b2 7f61 	cmp.w	r2, #900	; 0x384
 8002e8a:	dc14      	bgt.n	8002eb6 <Motor_Correction+0x9a>
			errorP = (offsets[1] - dif_rf); //100 is correction factor. Right side needs less correction
 8002e8c:	4b17      	ldr	r3, [pc, #92]	; (8002eec <Motor_Correction+0xd0>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	1a1b      	subs	r3, r3, r0
 8002e92:	e011      	b.n	8002eb8 <Motor_Correction+0x9c>
			//errorD = errorP - oldErrorP;
		}
		else if (dif_lf <= LEFT_THRESHOLD && dif_rf <= RIGHT_THRESHOLD) { //use encoders when there's no walls available
 8002e94:	f5b2 7f61 	cmp.w	r2, #900	; 0x384
 8002e98:	dc0d      	bgt.n	8002eb6 <Motor_Correction+0x9a>
			errorP = ((r_count - prev_r_count) - (l_count - prev_l_count))*7;
 8002e9a:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <Motor_Correction+0xb0>)
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <Motor_Correction+0xb4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	4a0b      	ldr	r2, [pc, #44]	; (8002ed4 <Motor_Correction+0xb8>)
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	1a9b      	subs	r3, r3, r2
 8002eaa:	4a0b      	ldr	r2, [pc, #44]	; (8002ed8 <Motor_Correction+0xbc>)
 8002eac:	6810      	ldr	r0, [r2, #0]
 8002eae:	1a1b      	subs	r3, r3, r0
 8002eb0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8002eb4:	e000      	b.n	8002eb8 <Motor_Correction+0x9c>

	//int D = 100; //parameters
	int P_norm = 70;
	int P_speed = 300;

	int errorP = 0;
 8002eb6:	2300      	movs	r3, #0
		else if (dif_lf <= LEFT_THRESHOLD && dif_rf <= RIGHT_THRESHOLD) { //use encoders when there's no walls available
			errorP = ((r_count - prev_r_count) - (l_count - prev_l_count))*7;
		}	//when right side has moved more, add more to left side
	}
	//motor correction adds to left motor
	correction = errorP/P_norm; //+ errorD/D; //P and D are tuning parameters
 8002eb8:	2046      	movs	r0, #70	; 0x46
 8002eba:	fb93 f0f0 	sdiv	r0, r3, r0
	//oldErrorP = errorP;
	if (abs(correction) < FWD_R) {
 8002ebe:	f100 03c7 	add.w	r3, r0, #199	; 0xc7
 8002ec2:	f5b3 7fc7 	cmp.w	r3, #398	; 0x18e
 8002ec6:	bf88      	it	hi
 8002ec8:	2000      	movhi	r0, #0
	else
	{
		return 0;
	}

}
 8002eca:	4770      	bx	lr
 8002ecc:	20000acc 	.word	0x20000acc
 8002ed0:	2000251c 	.word	0x2000251c
 8002ed4:	200024b0 	.word	0x200024b0
 8002ed8:	20001b10 	.word	0x20001b10
 8002edc:	20000ac4 	.word	0x20000ac4
 8002ee0:	20000874 	.word	0x20000874
 8002ee4:	200008d8 	.word	0x200008d8
 8002ee8:	20001bd0 	.word	0x20001bd0
 8002eec:	20000000 	.word	0x20000000

08002ef0 <Reset_Counters>:
*/
}

void Reset_Counters() {

__HAL_TIM_SET_COUNTER(&htim1, 0); //reset counters --left encoder
 8002ef0:	4b12      	ldr	r3, [pc, #72]	; (8002f3c <Reset_Counters+0x4c>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	6253      	str	r3, [r2, #36]	; 0x24
__HAL_TIM_SET_COUNTER(&htim4, 0); //right encdoer
 8002ef8:	4a11      	ldr	r2, [pc, #68]	; (8002f40 <Reset_Counters+0x50>)
 8002efa:	6812      	ldr	r2, [r2, #0]
 8002efc:	6253      	str	r3, [r2, #36]	; 0x24
__HAL_TIM_SET_COUNTER(&htim5, 0); //time base
 8002efe:	4a11      	ldr	r2, [pc, #68]	; (8002f44 <Reset_Counters+0x54>)
 8002f00:	6812      	ldr	r2, [r2, #0]
 8002f02:	6253      	str	r3, [r2, #36]	; 0x24

temp_l = 0;
 8002f04:	4a10      	ldr	r2, [pc, #64]	; (8002f48 <Reset_Counters+0x58>)
 8002f06:	6013      	str	r3, [r2, #0]
temp_r = 0;
 8002f08:	4a10      	ldr	r2, [pc, #64]	; (8002f4c <Reset_Counters+0x5c>)
 8002f0a:	6013      	str	r3, [r2, #0]
prev_time_count = 0;
 8002f0c:	4a10      	ldr	r2, [pc, #64]	; (8002f50 <Reset_Counters+0x60>)
 8002f0e:	6013      	str	r3, [r2, #0]

prev_l_count = 0;
 8002f10:	4a10      	ldr	r2, [pc, #64]	; (8002f54 <Reset_Counters+0x64>)
 8002f12:	6013      	str	r3, [r2, #0]
prev_r_count = 0;
 8002f14:	4a10      	ldr	r2, [pc, #64]	; (8002f58 <Reset_Counters+0x68>)
 8002f16:	6013      	str	r3, [r2, #0]
lenc_diff = 0;
 8002f18:	4a10      	ldr	r2, [pc, #64]	; (8002f5c <Reset_Counters+0x6c>)
 8002f1a:	6013      	str	r3, [r2, #0]
renc_diff = 0;
 8002f1c:	4a10      	ldr	r2, [pc, #64]	; (8002f60 <Reset_Counters+0x70>)
 8002f1e:	6013      	str	r3, [r2, #0]

l_count = 0;
 8002f20:	4a10      	ldr	r2, [pc, #64]	; (8002f64 <Reset_Counters+0x74>)
 8002f22:	6013      	str	r3, [r2, #0]
r_count = 0;
 8002f24:	4a10      	ldr	r2, [pc, #64]	; (8002f68 <Reset_Counters+0x78>)
 8002f26:	6013      	str	r3, [r2, #0]
l_count_corr = 0;
 8002f28:	4a10      	ldr	r2, [pc, #64]	; (8002f6c <Reset_Counters+0x7c>)
 8002f2a:	6013      	str	r3, [r2, #0]
r_count_corr = 0;
 8002f2c:	4a10      	ldr	r2, [pc, #64]	; (8002f70 <Reset_Counters+0x80>)
 8002f2e:	6013      	str	r3, [r2, #0]

lenc_diff_corr = 0;
 8002f30:	4a10      	ldr	r2, [pc, #64]	; (8002f74 <Reset_Counters+0x84>)
 8002f32:	6013      	str	r3, [r2, #0]
renc_diff_corr = 0;
 8002f34:	4a10      	ldr	r2, [pc, #64]	; (8002f78 <Reset_Counters+0x88>)
 8002f36:	6013      	str	r3, [r2, #0]
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	20003258 	.word	0x20003258
 8002f40:	20002520 	.word	0x20002520
 8002f44:	2000256c 	.word	0x2000256c
 8002f48:	20001b78 	.word	0x20001b78
 8002f4c:	20001bd4 	.word	0x20001bd4
 8002f50:	2000255c 	.word	0x2000255c
 8002f54:	2000251c 	.word	0x2000251c
 8002f58:	200024b0 	.word	0x200024b0
 8002f5c:	200008d4 	.word	0x200008d4
 8002f60:	20000aa4 	.word	0x20000aa4
 8002f64:	20001b10 	.word	0x20001b10
 8002f68:	20000acc 	.word	0x20000acc
 8002f6c:	20001b0c 	.word	0x20001b0c
 8002f70:	20001be0 	.word	0x20001be0
 8002f74:	200009a0 	.word	0x200009a0
 8002f78:	20001b1c 	.word	0x20001b1c

08002f7c <Clear_Buffers>:

}

void Clear_Buffers() {

	for (int i = 0; i < IR_BUFFER; i++) { //clear the transition buffers, gets rid of potential glitches
 8002f7c:	2300      	movs	r3, #0
		lf_buffer[i] = 0;
		rf_buffer[i] = 0;
		r_buffer[i] = 0;
 8002f7e:	480b      	ldr	r0, [pc, #44]	; (8002fac <Clear_Buffers+0x30>)
		l_buffer[i] = 0;
 8002f80:	490b      	ldr	r1, [pc, #44]	; (8002fb0 <Clear_Buffers+0x34>)
}

void Clear_Buffers() {

	for (int i = 0; i < IR_BUFFER; i++) { //clear the transition buffers, gets rid of potential glitches
		lf_buffer[i] = 0;
 8002f82:	461a      	mov	r2, r3
	}
	*/

}

void Clear_Buffers() {
 8002f84:	b530      	push	{r4, r5, lr}

	for (int i = 0; i < IR_BUFFER; i++) { //clear the transition buffers, gets rid of potential glitches
		lf_buffer[i] = 0;
 8002f86:	4d0b      	ldr	r5, [pc, #44]	; (8002fb4 <Clear_Buffers+0x38>)
		rf_buffer[i] = 0;
 8002f88:	4c0b      	ldr	r4, [pc, #44]	; (8002fb8 <Clear_Buffers+0x3c>)
}

void Clear_Buffers() {

	for (int i = 0; i < IR_BUFFER; i++) { //clear the transition buffers, gets rid of potential glitches
		lf_buffer[i] = 0;
 8002f8a:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
		rf_buffer[i] = 0;
 8002f8e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		r_buffer[i] = 0;
 8002f92:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		l_buffer[i] = 0;
 8002f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

}

void Clear_Buffers() {

	for (int i = 0; i < IR_BUFFER; i++) { //clear the transition buffers, gets rid of potential glitches
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002fa0:	d1f3      	bne.n	8002f8a <Clear_Buffers+0xe>
		lf_buffer[i] = 0;
		rf_buffer[i] = 0;
		r_buffer[i] = 0;
		l_buffer[i] = 0;
	}
	buff_count = 0;
 8002fa2:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <Clear_Buffers+0x40>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	bd30      	pop	{r4, r5, pc}
 8002faa:	bf00      	nop
 8002fac:	20000b44 	.word	0x20000b44
 8002fb0:	200000a4 	.word	0x200000a4
 8002fb4:	20001338 	.word	0x20001338
 8002fb8:	20001be8 	.word	0x20001be8
 8002fbc:	20002418 	.word	0x20002418

08002fc0 <Reset_Flags>:
}

void Reset_Flags() {

	if (reverse_flag == FALSE) { //if just starting out
 8002fc0:	4b21      	ldr	r3, [pc, #132]	; (8003048 <Reset_Flags+0x88>)
 8002fc2:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 8003080 <Reset_Flags+0xc0>
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4820      	ldr	r0, [pc, #128]	; (800304c <Reset_Flags+0x8c>)
 8002fca:	4921      	ldr	r1, [pc, #132]	; (8003050 <Reset_Flags+0x90>)
 8002fcc:	4a21      	ldr	r2, [pc, #132]	; (8003054 <Reset_Flags+0x94>)
		l_buffer[i] = 0;
	}
	buff_count = 0;
}

void Reset_Flags() {
 8002fce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002fd2:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8003084 <Reset_Flags+0xc4>
 8002fd6:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8003088 <Reset_Flags+0xc8>
 8002fda:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 800308c <Reset_Flags+0xcc>
 8002fde:	4f1e      	ldr	r7, [pc, #120]	; (8003058 <Reset_Flags+0x98>)
 8002fe0:	4e1e      	ldr	r6, [pc, #120]	; (800305c <Reset_Flags+0x9c>)
 8002fe2:	4d1f      	ldr	r5, [pc, #124]	; (8003060 <Reset_Flags+0xa0>)
 8002fe4:	4c1f      	ldr	r4, [pc, #124]	; (8003064 <Reset_Flags+0xa4>)

	if (reverse_flag == FALSE) { //if just starting out
 8002fe6:	b9eb      	cbnz	r3, 8003024 <Reset_Flags+0x64>
		search_flag = FALSE;
		stop_flag = FALSE;

		cur_dir = START_DIR;
		cur_move = FWD; //reset to default direction
		next_move = FWD;
 8002fe8:	6013      	str	r3, [r2, #0]
		x_coord = X_START;
 8002fea:	4a1f      	ldr	r2, [pc, #124]	; (8003068 <Reset_Flags+0xa8>)
		dead_flag = ARRIVE;
		fwd_flag = FALSE;
		l_transition_flag = FALSE;
		r_transition_flag = FALSE;
		transition_flag = FALSE;
		done_flag = FALSE;
 8002fec:	6003      	str	r3, [r0, #0]

		search_flag = FALSE;
		stop_flag = FALSE;

		cur_dir = START_DIR;
		cur_move = FWD; //reset to default direction
 8002fee:	600b      	str	r3, [r1, #0]
		l_transition_flag = FALSE;
		r_transition_flag = FALSE;
		transition_flag = FALSE;
		done_flag = FALSE;

		search_flag = FALSE;
 8002ff0:	481e      	ldr	r0, [pc, #120]	; (800306c <Reset_Flags+0xac>)
		stop_flag = FALSE;

		cur_dir = START_DIR;
		cur_move = FWD; //reset to default direction
		next_move = FWD;
		x_coord = X_START;
 8002ff2:	6013      	str	r3, [r2, #0]
		y_coord = Y_START;
 8002ff4:	2204      	movs	r2, #4
 8002ff6:	491e      	ldr	r1, [pc, #120]	; (8003070 <Reset_Flags+0xb0>)
		l_transition_flag = FALSE;
		r_transition_flag = FALSE;
		transition_flag = FALSE;
		done_flag = FALSE;

		search_flag = FALSE;
 8002ff8:	6003      	str	r3, [r0, #0]

		cur_dir = START_DIR;
		cur_move = FWD; //reset to default direction
		next_move = FWD;
		x_coord = X_START;
		y_coord = Y_START;
 8002ffa:	600a      	str	r2, [r1, #0]
		done_flag = FALSE;

		search_flag = FALSE;
		stop_flag = FALSE;

		cur_dir = START_DIR;
 8002ffc:	481d      	ldr	r0, [pc, #116]	; (8003074 <Reset_Flags+0xb4>)
		cur_move = FWD; //reset to default direction
		next_move = FWD;
		x_coord = X_START;
		y_coord = Y_START;
		prevx = X_START;
 8002ffe:	491e      	ldr	r1, [pc, #120]	; (8003078 <Reset_Flags+0xb8>)
}

void Reset_Flags() {

	if (reverse_flag == FALSE) { //if just starting out
		r_turnflag = FALSE; //reset turn flags
 8003000:	f8c9 3000 	str.w	r3, [r9]
		l_turnflag = FALSE;
 8003004:	f8c8 3000 	str.w	r3, [r8]
		dead_flag = ARRIVE;
 8003008:	f8cc 3000 	str.w	r3, [ip]
		fwd_flag = FALSE;
 800300c:	f8ce 3000 	str.w	r3, [lr]
		l_transition_flag = FALSE;
 8003010:	603b      	str	r3, [r7, #0]
		r_transition_flag = FALSE;
 8003012:	6033      	str	r3, [r6, #0]
		transition_flag = FALSE;
 8003014:	602b      	str	r3, [r5, #0]
		done_flag = FALSE;

		search_flag = FALSE;
		stop_flag = FALSE;
 8003016:	6023      	str	r3, [r4, #0]

		cur_dir = START_DIR;
 8003018:	6003      	str	r3, [r0, #0]
		cur_move = FWD; //reset to default direction
		next_move = FWD;
		x_coord = X_START;
		y_coord = Y_START;
		prevx = X_START;
 800301a:	600b      	str	r3, [r1, #0]
		prevy = Y_START;
 800301c:	4b17      	ldr	r3, [pc, #92]	; (800307c <Reset_Flags+0xbc>)
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	}
	else //if in the middle
	{
		r_turnflag = FALSE; //reset turn flags
 8003024:	2300      	movs	r3, #0
 8003026:	f8c9 3000 	str.w	r3, [r9]
		l_turnflag = FALSE;
 800302a:	f8c8 3000 	str.w	r3, [r8]
		dead_flag = ARRIVE;
 800302e:	f8cc 3000 	str.w	r3, [ip]
		fwd_flag = FALSE;
 8003032:	f8ce 3000 	str.w	r3, [lr]
		l_transition_flag = FALSE;
 8003036:	603b      	str	r3, [r7, #0]
		r_transition_flag = FALSE;
 8003038:	6033      	str	r3, [r6, #0]
		transition_flag = FALSE;
 800303a:	602b      	str	r3, [r5, #0]
		stop_flag = FALSE;
 800303c:	6023      	str	r3, [r4, #0]
		done_flag = FALSE;
 800303e:	6003      	str	r3, [r0, #0]
		cur_move = FWD; //reset to default direction
 8003040:	600b      	str	r3, [r1, #0]
		next_move = FWD;
 8003042:	6013      	str	r3, [r2, #0]
 8003044:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003048:	20001324 	.word	0x20001324
 800304c:	20000b3c 	.word	0x20000b3c
 8003050:	20001b70 	.word	0x20001b70
 8003054:	20001be4 	.word	0x20001be4
 8003058:	20001bd0 	.word	0x20001bd0
 800305c:	200008d8 	.word	0x200008d8
 8003060:	20001b18 	.word	0x20001b18
 8003064:	20000014 	.word	0x20000014
 8003068:	20000ab8 	.word	0x20000ab8
 800306c:	20001bdc 	.word	0x20001bdc
 8003070:	20000010 	.word	0x20000010
 8003074:	20001b08 	.word	0x20001b08
 8003078:	20000ab0 	.word	0x20000ab0
 800307c:	20000ab4 	.word	0x20000ab4
 8003080:	20000b40 	.word	0x20000b40
 8003084:	20000abc 	.word	0x20000abc
 8003088:	20000b34 	.word	0x20000b34
 800308c:	2000009c 	.word	0x2000009c

08003090 <Transmit>:

Transmit("\r\n");
}

//takes char array
void Transmit(char message[]) {
 8003090:	b510      	push	{r4, lr}
 8003092:	4604      	mov	r4, r0

	int len;
	len=strlen(message);
 8003094:	f7fd f8bc 	bl	8000210 <strlen>
	HAL_UART_Transmit(&huart1, message, len, 1000);
 8003098:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800309c:	b282      	uxth	r2, r0
 800309e:	4621      	mov	r1, r4
 80030a0:	4802      	ldr	r0, [pc, #8]	; (80030ac <Transmit+0x1c>)
}
 80030a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//takes char array
void Transmit(char message[]) {

	int len;
	len=strlen(message);
	HAL_UART_Transmit(&huart1, message, len, 1000);
 80030a6:	f7ff bc6e 	b.w	8002986 <HAL_UART_Transmit>
 80030aa:	bf00      	nop
 80030ac:	20002c94 	.word	0x20002c94

080030b0 <Read_Walls_Flash>:
Transmit("Done! \r\n");
#endif
HAL_FLASH_Lock();
}

void Read_Walls_Flash() {
 80030b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

#if DEBUG == TRUE
Transmit("Reading Walls from Flash...... \r\n");
 80030b2:	4825      	ldr	r0, [pc, #148]	; (8003148 <Read_Walls_Flash+0x98>)
 80030b4:	f7ff ffec 	bl	8003090 <Transmit>
#endif
Address = WALLS_ADDR;

for (int i = 0; i < X_MAZE_SIZE; i++) { //read horizontal walls
	for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
		horiz_walls[i][j] = *(__IO uint32_t *)Address;
 80030b8:	4c24      	ldr	r4, [pc, #144]	; (800314c <Read_Walls_Flash+0x9c>)
void Read_Walls_Flash() {

#if DEBUG == TRUE
Transmit("Reading Walls from Flash...... \r\n");
#endif
Address = WALLS_ADDR;
 80030ba:	4b25      	ldr	r3, [pc, #148]	; (8003150 <Read_Walls_Flash+0xa0>)
 80030bc:	2100      	movs	r1, #0
 80030be:	4a25      	ldr	r2, [pc, #148]	; (8003154 <Read_Walls_Flash+0xa4>)
 80030c0:	601a      	str	r2, [r3, #0]
Transmit("Done! \r\n");
#endif
HAL_FLASH_Lock();
}

void Read_Walls_Flash() {
 80030c2:	2200      	movs	r2, #0
#endif
Address = WALLS_ADDR;

for (int i = 0; i < X_MAZE_SIZE; i++) { //read horizontal walls
	for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
		horiz_walls[i][j] = *(__IO uint32_t *)Address;
 80030c4:	6818      	ldr	r0, [r3, #0]
 80030c6:	18a5      	adds	r5, r4, r2
Transmit("Reading Walls from Flash...... \r\n");
#endif
Address = WALLS_ADDR;

for (int i = 0; i < X_MAZE_SIZE; i++) { //read horizontal walls
	for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
 80030c8:	3201      	adds	r2, #1
		horiz_walls[i][j] = *(__IO uint32_t *)Address;
 80030ca:	f850 6b04 	ldr.w	r6, [r0], #4
Transmit("Reading Walls from Flash...... \r\n");
#endif
Address = WALLS_ADDR;

for (int i = 0; i < X_MAZE_SIZE; i++) { //read horizontal walls
	for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
 80030ce:	2a04      	cmp	r2, #4
		horiz_walls[i][j] = *(__IO uint32_t *)Address;
 80030d0:	546e      	strb	r6, [r5, r1]
		Address = Address + 4;
 80030d2:	6018      	str	r0, [r3, #0]
Transmit("Reading Walls from Flash...... \r\n");
#endif
Address = WALLS_ADDR;

for (int i = 0; i < X_MAZE_SIZE; i++) { //read horizontal walls
	for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
 80030d4:	d1f6      	bne.n	80030c4 <Read_Walls_Flash+0x14>
 80030d6:	3104      	adds	r1, #4
#if DEBUG == TRUE
Transmit("Reading Walls from Flash...... \r\n");
#endif
Address = WALLS_ADDR;

for (int i = 0; i < X_MAZE_SIZE; i++) { //read horizontal walls
 80030d8:	2914      	cmp	r1, #20
 80030da:	d1f2      	bne.n	80030c2 <Read_Walls_Flash+0x12>
 80030dc:	2200      	movs	r2, #0
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) { //read vertical walls
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
		vert_walls[i][j] = *(__IO uint32_t *)Address; //type conversion
 80030de:	4d1e      	ldr	r5, [pc, #120]	; (8003158 <Read_Walls_Flash+0xa8>)
void Read_Walls_Flash() {

#if DEBUG == TRUE
Transmit("Reading Walls from Flash...... \r\n");
#endif
Address = WALLS_ADDR;
 80030e0:	2100      	movs	r1, #0
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) { //read vertical walls
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
		vert_walls[i][j] = *(__IO uint32_t *)Address; //type conversion
 80030e2:	18ac      	adds	r4, r5, r2
 80030e4:	6818      	ldr	r0, [r3, #0]
 80030e6:	f850 6b04 	ldr.w	r6, [r0], #4
 80030ea:	5466      	strb	r6, [r4, r1]
		Address = Address + 4;
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) { //read vertical walls
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
 80030ec:	3101      	adds	r1, #1
		vert_walls[i][j] = *(__IO uint32_t *)Address; //type conversion
		Address = Address + 4;
 80030ee:	6018      	str	r0, [r3, #0]
		Address = Address + 4;
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) { //read vertical walls
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
 80030f0:	2905      	cmp	r1, #5
 80030f2:	d1f7      	bne.n	80030e4 <Read_Walls_Flash+0x34>
 80030f4:	3205      	adds	r2, #5
		horiz_walls[i][j] = *(__IO uint32_t *)Address;
		Address = Address + 4;
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) { //read vertical walls
 80030f6:	2a14      	cmp	r2, #20
 80030f8:	d1f2      	bne.n	80030e0 <Read_Walls_Flash+0x30>
 80030fa:	2000      	movs	r0, #0
	}
}

for (int i = 0; i < X_MAZE_SIZE; i++) { //read visited squares array
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
		visited_squares[i][j] = *(__IO uint32_t *)Address; //type conversion
 80030fc:	4f17      	ldr	r7, [pc, #92]	; (800315c <Read_Walls_Flash+0xac>)
 80030fe:	2400      	movs	r4, #0
 8003100:	19c6      	adds	r6, r0, r7
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	4d12      	ldr	r5, [pc, #72]	; (8003150 <Read_Walls_Flash+0xa0>)
 8003106:	4611      	mov	r1, r2
 8003108:	f851 eb04 	ldr.w	lr, [r1], #4
 800310c:	f846 e024 	str.w	lr, [r6, r4, lsl #2]
		Address = Address + 4;
	}
}

for (int i = 0; i < X_MAZE_SIZE; i++) { //read visited squares array
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
 8003110:	3401      	adds	r4, #1
		visited_squares[i][j] = *(__IO uint32_t *)Address; //type conversion
		Address = Address + 4;
 8003112:	6019      	str	r1, [r3, #0]
		Address = Address + 4;
	}
}

for (int i = 0; i < X_MAZE_SIZE; i++) { //read visited squares array
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
 8003114:	2c05      	cmp	r4, #5
 8003116:	d1f4      	bne.n	8003102 <Read_Walls_Flash+0x52>
 8003118:	3014      	adds	r0, #20
		vert_walls[i][j] = *(__IO uint32_t *)Address; //type conversion
		Address = Address + 4;
	}
}

for (int i = 0; i < X_MAZE_SIZE; i++) { //read visited squares array
 800311a:	2864      	cmp	r0, #100	; 0x64
 800311c:	d1ef      	bne.n	80030fe <Read_Walls_Flash+0x4e>
		visited_squares[i][j] = *(__IO uint32_t *)Address; //type conversion
		Address = Address + 4;
	}
}

final_x = *(__IO uint32_t *)Address; //read final x
 800311e:	6809      	ldr	r1, [r1, #0]
 8003120:	4b0f      	ldr	r3, [pc, #60]	; (8003160 <Read_Walls_Flash+0xb0>)
final_y = *(__IO uint32_t *)Address; //read final y
Address = Address + 4;
final_dir = *(__IO int *)Address; //read final direction

#if DEBUG == TRUE
Transmit("Done! \r\n");
 8003122:	4810      	ldr	r0, [pc, #64]	; (8003164 <Read_Walls_Flash+0xb4>)
		visited_squares[i][j] = *(__IO uint32_t *)Address; //type conversion
		Address = Address + 4;
	}
}

final_x = *(__IO uint32_t *)Address; //read final x
 8003124:	6019      	str	r1, [r3, #0]
Address = Address + 4;
 8003126:	f102 0308 	add.w	r3, r2, #8
 800312a:	602b      	str	r3, [r5, #0]
final_y = *(__IO uint32_t *)Address; //read final y
 800312c:	4b0e      	ldr	r3, [pc, #56]	; (8003168 <Read_Walls_Flash+0xb8>)
 800312e:	6891      	ldr	r1, [r2, #8]
 8003130:	6019      	str	r1, [r3, #0]
Address = Address + 4;
 8003132:	f102 030c 	add.w	r3, r2, #12
final_dir = *(__IO int *)Address; //read final direction
 8003136:	68d2      	ldr	r2, [r2, #12]
}

final_x = *(__IO uint32_t *)Address; //read final x
Address = Address + 4;
final_y = *(__IO uint32_t *)Address; //read final y
Address = Address + 4;
 8003138:	602b      	str	r3, [r5, #0]
final_dir = *(__IO int *)Address; //read final direction
 800313a:	4b0c      	ldr	r3, [pc, #48]	; (800316c <Read_Walls_Flash+0xbc>)
 800313c:	601a      	str	r2, [r3, #0]

#if DEBUG == TRUE
Transmit("Done! \r\n");
#endif
}
 800313e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
final_y = *(__IO uint32_t *)Address; //read final y
Address = Address + 4;
final_dir = *(__IO int *)Address; //read final direction

#if DEBUG == TRUE
Transmit("Done! \r\n");
 8003142:	f7ff bfa5 	b.w	8003090 <Transmit>
 8003146:	bf00      	nop
 8003148:	08006e35 	.word	0x08006e35
 800314c:	200008dc 	.word	0x200008dc
 8003150:	20001320 	.word	0x20001320
 8003154:	08040000 	.word	0x08040000
 8003158:	20000b20 	.word	0x20000b20
 800315c:	200031f4 	.word	0x200031f4
 8003160:	20000940 	.word	0x20000940
 8003164:	08006e57 	.word	0x08006e57
 8003168:	20000944 	.word	0x20000944
 800316c:	20000ac8 	.word	0x20000ac8

08003170 <Send_Debug>:

}

void Send_Debug(void) {

	sprintf(tx_buffer, "L Value: %d  LF Value: %d \r\nRF Value: %d R Value: %d \r\n--------------------- \r\n", dif_l, dif_lf, dif_rf, dif_r); //lf, rf, r);
 8003170:	4b25      	ldr	r3, [pc, #148]	; (8003208 <Send_Debug+0x98>)
 8003172:	4a26      	ldr	r2, [pc, #152]	; (800320c <Send_Debug+0x9c>)
 8003174:	681b      	ldr	r3, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, RDIC_Pin, !direction);
#endif

}

void Send_Debug(void) {
 8003176:	b513      	push	{r0, r1, r4, lr}

	sprintf(tx_buffer, "L Value: %d  LF Value: %d \r\nRF Value: %d R Value: %d \r\n--------------------- \r\n", dif_l, dif_lf, dif_rf, dif_r); //lf, rf, r);
 8003178:	9301      	str	r3, [sp, #4]
 800317a:	4b25      	ldr	r3, [pc, #148]	; (8003210 <Send_Debug+0xa0>)
 800317c:	4c25      	ldr	r4, [pc, #148]	; (8003214 <Send_Debug+0xa4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4925      	ldr	r1, [pc, #148]	; (8003218 <Send_Debug+0xa8>)
 8003182:	4620      	mov	r0, r4
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	4b25      	ldr	r3, [pc, #148]	; (800321c <Send_Debug+0xac>)
 8003188:	6812      	ldr	r2, [r2, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 f9f0 	bl	8006570 <siprintf>
	Transmit(tx_buffer); //transmitm the message above
 8003190:	4620      	mov	r0, r4
 8003192:	f7ff ff7d 	bl	8003090 <Transmit>
	sprintf(tx_buffer, "Left Count Value: %d \r\nRight Count Value %d \r\n-----------------\r\n", l_count, r_count);
 8003196:	4b22      	ldr	r3, [pc, #136]	; (8003220 <Send_Debug+0xb0>)
 8003198:	4a22      	ldr	r2, [pc, #136]	; (8003224 <Send_Debug+0xb4>)
 800319a:	4620      	mov	r0, r4
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6812      	ldr	r2, [r2, #0]
 80031a0:	4921      	ldr	r1, [pc, #132]	; (8003228 <Send_Debug+0xb8>)
 80031a2:	f003 f9e5 	bl	8006570 <siprintf>
	Transmit(tx_buffer); //transmit the message above
 80031a6:	4620      	mov	r0, r4
 80031a8:	f7ff ff72 	bl	8003090 <Transmit>
	sprintf(tx_buffer, "Prev_L: %d \r\nPrev R %d \r\n-----------------\r\n", prev_l_count, prev_r_count);
 80031ac:	4b1f      	ldr	r3, [pc, #124]	; (800322c <Send_Debug+0xbc>)
 80031ae:	4a20      	ldr	r2, [pc, #128]	; (8003230 <Send_Debug+0xc0>)
 80031b0:	4620      	mov	r0, r4
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6812      	ldr	r2, [r2, #0]
 80031b6:	491f      	ldr	r1, [pc, #124]	; (8003234 <Send_Debug+0xc4>)
 80031b8:	f003 f9da 	bl	8006570 <siprintf>
	Transmit(tx_buffer); //transmit the message above
 80031bc:	4620      	mov	r0, r4
 80031be:	f7ff ff67 	bl	8003090 <Transmit>
	sprintf(tx_buffer, "cur_move: %d \r\nnext_move: %d\r\n-----------------\r\n", cur_move, next_move);
 80031c2:	4b1d      	ldr	r3, [pc, #116]	; (8003238 <Send_Debug+0xc8>)
 80031c4:	4a1d      	ldr	r2, [pc, #116]	; (800323c <Send_Debug+0xcc>)
 80031c6:	4620      	mov	r0, r4
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6812      	ldr	r2, [r2, #0]
 80031cc:	491c      	ldr	r1, [pc, #112]	; (8003240 <Send_Debug+0xd0>)
 80031ce:	f003 f9cf 	bl	8006570 <siprintf>
	Transmit(tx_buffer);
 80031d2:	4620      	mov	r0, r4
 80031d4:	f7ff ff5c 	bl	8003090 <Transmit>
	sprintf(tx_buffer, "Current Direction: %d \r\n--------------------- \r\n", cur_dir);
 80031d8:	4b1a      	ldr	r3, [pc, #104]	; (8003244 <Send_Debug+0xd4>)
 80031da:	491b      	ldr	r1, [pc, #108]	; (8003248 <Send_Debug+0xd8>)
 80031dc:	4620      	mov	r0, r4
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	f003 f9c6 	bl	8006570 <siprintf>
	Transmit(tx_buffer);
 80031e4:	4620      	mov	r0, r4
 80031e6:	f7ff ff53 	bl	8003090 <Transmit>
	sprintf(tx_buffer, "X COORD: %d    Y COORD: %d \r\n--------------------- \r\n", x_coord, y_coord);
 80031ea:	4b18      	ldr	r3, [pc, #96]	; (800324c <Send_Debug+0xdc>)
 80031ec:	4a18      	ldr	r2, [pc, #96]	; (8003250 <Send_Debug+0xe0>)
 80031ee:	4620      	mov	r0, r4
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6812      	ldr	r2, [r2, #0]
 80031f4:	4917      	ldr	r1, [pc, #92]	; (8003254 <Send_Debug+0xe4>)
 80031f6:	f003 f9bb 	bl	8006570 <siprintf>
	Transmit(tx_buffer);
 80031fa:	4620      	mov	r0, r4
	//sprintf(tx_buffer, "RIGHT Turn Flag: %d \r\nLEFT Turn Flag: %d \r\n-----------------------", r_turnflag, l_turnflag);
}
 80031fc:	b002      	add	sp, #8
 80031fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	sprintf(tx_buffer, "cur_move: %d \r\nnext_move: %d\r\n-----------------\r\n", cur_move, next_move);
	Transmit(tx_buffer);
	sprintf(tx_buffer, "Current Direction: %d \r\n--------------------- \r\n", cur_dir);
	Transmit(tx_buffer);
	sprintf(tx_buffer, "X COORD: %d    Y COORD: %d \r\n--------------------- \r\n", x_coord, y_coord);
	Transmit(tx_buffer);
 8003202:	f7ff bf45 	b.w	8003090 <Transmit>
 8003206:	bf00      	nop
 8003208:	200008d0 	.word	0x200008d0
 800320c:	20000878 	.word	0x20000878
 8003210:	20000874 	.word	0x20000874
 8003214:	20002b84 	.word	0x20002b84
 8003218:	08006e85 	.word	0x08006e85
 800321c:	20000ac4 	.word	0x20000ac4
 8003220:	20000acc 	.word	0x20000acc
 8003224:	20001b10 	.word	0x20001b10
 8003228:	08006ed5 	.word	0x08006ed5
 800322c:	200024b0 	.word	0x200024b0
 8003230:	2000251c 	.word	0x2000251c
 8003234:	08006f17 	.word	0x08006f17
 8003238:	20001be4 	.word	0x20001be4
 800323c:	20001b70 	.word	0x20001b70
 8003240:	08006f44 	.word	0x08006f44
 8003244:	20001b08 	.word	0x20001b08
 8003248:	08006f76 	.word	0x08006f76
 800324c:	20000010 	.word	0x20000010
 8003250:	20000ab8 	.word	0x20000ab8
 8003254:	08006fa7 	.word	0x08006fa7

08003258 <Save_State>:
	dbg_count = 0;
}

void Save_State(void) {

	l_debug[dbg_count] = front_l;
 8003258:	491d      	ldr	r1, [pc, #116]	; (80032d0 <Save_State+0x78>)
 800325a:	4a1e      	ldr	r2, [pc, #120]	; (80032d4 <Save_State+0x7c>)
 800325c:	680b      	ldr	r3, [r1, #0]
 800325e:	6810      	ldr	r0, [r2, #0]
 8003260:	4a1d      	ldr	r2, [pc, #116]	; (80032d8 <Save_State+0x80>)
 8003262:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	r_debug[dbg_count] = front_r;
 8003266:	4a1d      	ldr	r2, [pc, #116]	; (80032dc <Save_State+0x84>)
 8003268:	6810      	ldr	r0, [r2, #0]
 800326a:	4a1d      	ldr	r2, [pc, #116]	; (80032e0 <Save_State+0x88>)
 800326c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	rf_debug[dbg_count] = rf_side;
 8003270:	4a1c      	ldr	r2, [pc, #112]	; (80032e4 <Save_State+0x8c>)
 8003272:	6810      	ldr	r0, [r2, #0]
 8003274:	4a1c      	ldr	r2, [pc, #112]	; (80032e8 <Save_State+0x90>)
 8003276:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	lf_debug[dbg_count] = lf_side;
 800327a:	4a1c      	ldr	r2, [pc, #112]	; (80032ec <Save_State+0x94>)
 800327c:	6810      	ldr	r0, [r2, #0]
 800327e:	4a1c      	ldr	r2, [pc, #112]	; (80032f0 <Save_State+0x98>)
 8003280:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	cur_debug[dbg_count] = cur_move;
 8003284:	4a1b      	ldr	r2, [pc, #108]	; (80032f4 <Save_State+0x9c>)
 8003286:	6810      	ldr	r0, [r2, #0]
 8003288:	4a1b      	ldr	r2, [pc, #108]	; (80032f8 <Save_State+0xa0>)
 800328a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	turn_debug[dbg_count] = next_move;
 800328e:	4a1b      	ldr	r2, [pc, #108]	; (80032fc <Save_State+0xa4>)
 8003290:	6810      	ldr	r0, [r2, #0]
 8003292:	4a1b      	ldr	r2, [pc, #108]	; (8003300 <Save_State+0xa8>)
 8003294:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	l_count_debug[dbg_count] = l_count;
 8003298:	4a1a      	ldr	r2, [pc, #104]	; (8003304 <Save_State+0xac>)
 800329a:	6810      	ldr	r0, [r2, #0]
 800329c:	4a1a      	ldr	r2, [pc, #104]	; (8003308 <Save_State+0xb0>)
 800329e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	r_count_debug[dbg_count] = r_count;
 80032a2:	4a1a      	ldr	r2, [pc, #104]	; (800330c <Save_State+0xb4>)
 80032a4:	6810      	ldr	r0, [r2, #0]
 80032a6:	4a1a      	ldr	r2, [pc, #104]	; (8003310 <Save_State+0xb8>)
 80032a8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	prev_l_debug[dbg_count] = prev_l_count;
 80032ac:	4a19      	ldr	r2, [pc, #100]	; (8003314 <Save_State+0xbc>)
 80032ae:	6810      	ldr	r0, [r2, #0]
 80032b0:	4a19      	ldr	r2, [pc, #100]	; (8003318 <Save_State+0xc0>)
 80032b2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	prev_r_debug[dbg_count] = prev_r_count;
 80032b6:	4a19      	ldr	r2, [pc, #100]	; (800331c <Save_State+0xc4>)
 80032b8:	6810      	ldr	r0, [r2, #0]
 80032ba:	4a19      	ldr	r2, [pc, #100]	; (8003320 <Save_State+0xc8>)
 80032bc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]

	dbg_count = (dbg_count+1) % DBG_BUFFER;
 80032c0:	3301      	adds	r3, #1
 80032c2:	2014      	movs	r0, #20
 80032c4:	fb93 f2f0 	sdiv	r2, r3, r0
 80032c8:	fb00 3312 	mls	r3, r0, r2, r3
 80032cc:	600b      	str	r3, [r1, #0]
 80032ce:	4770      	bx	lr
 80032d0:	200008cc 	.word	0x200008cc
 80032d4:	20001bcc 	.word	0x20001bcc
 80032d8:	20000ad0 	.word	0x20000ad0
 80032dc:	20001bd8 	.word	0x20001bd8
 80032e0:	200009a8 	.word	0x200009a8
 80032e4:	20000998 	.word	0x20000998
 80032e8:	20001b7c 	.word	0x20001b7c
 80032ec:	20000ac0 	.word	0x20000ac0
 80032f0:	200008f0 	.word	0x200008f0
 80032f4:	20001b70 	.word	0x20001b70
 80032f8:	20001b20 	.word	0x20001b20
 80032fc:	20001be4 	.word	0x20001be4
 8003300:	200023b8 	.word	0x200023b8
 8003304:	20001b10 	.word	0x20001b10
 8003308:	20000948 	.word	0x20000948
 800330c:	20000acc 	.word	0x20000acc
 8003310:	20000a00 	.word	0x20000a00
 8003314:	2000251c 	.word	0x2000251c
 8003318:	2000087c 	.word	0x2000087c
 800331c:	200024b0 	.word	0x200024b0
 8003320:	20000a54 	.word	0x20000a54

08003324 <Print_Maze>:
	gyro_reading = *aRxBuffer;
	sprintf(tx_buffer, "Gyro Reading: %X \r\n", gyro_reading);
	Transmit(tx_buffer);
}

void Print_Maze() {
 8003324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

sprintf(tx_buffer, "Floodfill Values: \r\n");
 8003326:	4931      	ldr	r1, [pc, #196]	; (80033ec <Print_Maze+0xc8>)
Transmit(tx_buffer);
 8003328:	2500      	movs	r5, #0
	Transmit(tx_buffer);
}

void Print_Maze() {

sprintf(tx_buffer, "Floodfill Values: \r\n");
 800332a:	4831      	ldr	r0, [pc, #196]	; (80033f0 <Print_Maze+0xcc>)
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //floodfill values
	for (int j = 0; j < X_MAZE_SIZE; j++) {  //go row by row, that's why y is looped first
		sprintf(tx_buffer, "%d ", maze[j][i]);
 800332c:	4e31      	ldr	r6, [pc, #196]	; (80033f4 <Print_Maze+0xd0>)
	Transmit(tx_buffer);
}

void Print_Maze() {

sprintf(tx_buffer, "Floodfill Values: \r\n");
 800332e:	f003 f943 	bl	80065b8 <strcpy>
Transmit(tx_buffer);
 8003332:	482f      	ldr	r0, [pc, #188]	; (80033f0 <Print_Maze+0xcc>)
 8003334:	f7ff feac 	bl	8003090 <Transmit>
	gyro_reading = *aRxBuffer;
	sprintf(tx_buffer, "Gyro Reading: %X \r\n", gyro_reading);
	Transmit(tx_buffer);
}

void Print_Maze() {
 8003338:	2400      	movs	r4, #0

sprintf(tx_buffer, "Floodfill Values: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //floodfill values
	for (int j = 0; j < X_MAZE_SIZE; j++) {  //go row by row, that's why y is looped first
		sprintf(tx_buffer, "%d ", maze[j][i]);
 800333a:	19a3      	adds	r3, r4, r6
 800333c:	492e      	ldr	r1, [pc, #184]	; (80033f8 <Print_Maze+0xd4>)
 800333e:	482c      	ldr	r0, [pc, #176]	; (80033f0 <Print_Maze+0xcc>)
 8003340:	3414      	adds	r4, #20
 8003342:	595a      	ldr	r2, [r3, r5]
 8003344:	f003 f914 	bl	8006570 <siprintf>
		Transmit(tx_buffer);
 8003348:	4829      	ldr	r0, [pc, #164]	; (80033f0 <Print_Maze+0xcc>)
 800334a:	f7ff fea1 	bl	8003090 <Transmit>
void Print_Maze() {

sprintf(tx_buffer, "Floodfill Values: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //floodfill values
	for (int j = 0; j < X_MAZE_SIZE; j++) {  //go row by row, that's why y is looped first
 800334e:	2c64      	cmp	r4, #100	; 0x64
 8003350:	d1f3      	bne.n	800333a <Print_Maze+0x16>
		sprintf(tx_buffer, "%d ", maze[j][i]);
		Transmit(tx_buffer);
	}
	sprintf(tx_buffer, "\r\n \r\n");
 8003352:	492a      	ldr	r1, [pc, #168]	; (80033fc <Print_Maze+0xd8>)
 8003354:	3504      	adds	r5, #4
 8003356:	4826      	ldr	r0, [pc, #152]	; (80033f0 <Print_Maze+0xcc>)
 8003358:	f003 f92e 	bl	80065b8 <strcpy>
	Transmit(tx_buffer);
 800335c:	4824      	ldr	r0, [pc, #144]	; (80033f0 <Print_Maze+0xcc>)
 800335e:	f7ff fe97 	bl	8003090 <Transmit>

void Print_Maze() {

sprintf(tx_buffer, "Floodfill Values: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //floodfill values
 8003362:	2d14      	cmp	r5, #20
 8003364:	d1e8      	bne.n	8003338 <Print_Maze+0x14>
	}
	sprintf(tx_buffer, "\r\n \r\n");
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Horizontal Walls: \r\n");
 8003366:	4926      	ldr	r1, [pc, #152]	; (8003400 <Print_Maze+0xdc>)
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE - 1; i++) { //horizontal walls
 8003368:	2400      	movs	r4, #0
	}
	sprintf(tx_buffer, "\r\n \r\n");
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Horizontal Walls: \r\n");
 800336a:	4821      	ldr	r0, [pc, #132]	; (80033f0 <Print_Maze+0xcc>)
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE - 1; i++) { //horizontal walls
	for (int j = 0; j < X_MAZE_SIZE; j++) {
		sprintf(tx_buffer, "%d ", horiz_walls[j][i]);
 800336c:	4f25      	ldr	r7, [pc, #148]	; (8003404 <Print_Maze+0xe0>)
	}
	sprintf(tx_buffer, "\r\n \r\n");
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Horizontal Walls: \r\n");
 800336e:	f003 f923 	bl	80065b8 <strcpy>
Transmit(tx_buffer);
 8003372:	481f      	ldr	r0, [pc, #124]	; (80033f0 <Print_Maze+0xcc>)
 8003374:	f7ff fe8c 	bl	8003090 <Transmit>
}

void Print_Maze() {

sprintf(tx_buffer, "Floodfill Values: \r\n");
Transmit(tx_buffer);
 8003378:	2500      	movs	r5, #0

sprintf(tx_buffer, "Horizontal Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE - 1; i++) { //horizontal walls
	for (int j = 0; j < X_MAZE_SIZE; j++) {
		sprintf(tx_buffer, "%d ", horiz_walls[j][i]);
 800337a:	193e      	adds	r6, r7, r4
 800337c:	f816 2025 	ldrb.w	r2, [r6, r5, lsl #2]
}

sprintf(tx_buffer, "Horizontal Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE - 1; i++) { //horizontal walls
	for (int j = 0; j < X_MAZE_SIZE; j++) {
 8003380:	3501      	adds	r5, #1
		sprintf(tx_buffer, "%d ", horiz_walls[j][i]);
 8003382:	491d      	ldr	r1, [pc, #116]	; (80033f8 <Print_Maze+0xd4>)
 8003384:	481a      	ldr	r0, [pc, #104]	; (80033f0 <Print_Maze+0xcc>)
 8003386:	f003 f8f3 	bl	8006570 <siprintf>
		Transmit(tx_buffer);
 800338a:	4819      	ldr	r0, [pc, #100]	; (80033f0 <Print_Maze+0xcc>)
 800338c:	f7ff fe80 	bl	8003090 <Transmit>
}

sprintf(tx_buffer, "Horizontal Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE - 1; i++) { //horizontal walls
	for (int j = 0; j < X_MAZE_SIZE; j++) {
 8003390:	2d05      	cmp	r5, #5
 8003392:	d1f3      	bne.n	800337c <Print_Maze+0x58>
		sprintf(tx_buffer, "%d ", horiz_walls[j][i]);
		Transmit(tx_buffer);
	}
	sprintf(tx_buffer, "\r\n \r\n");
 8003394:	4919      	ldr	r1, [pc, #100]	; (80033fc <Print_Maze+0xd8>)
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Horizontal Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE - 1; i++) { //horizontal walls
 8003396:	3401      	adds	r4, #1
	for (int j = 0; j < X_MAZE_SIZE; j++) {
		sprintf(tx_buffer, "%d ", horiz_walls[j][i]);
		Transmit(tx_buffer);
	}
	sprintf(tx_buffer, "\r\n \r\n");
 8003398:	4815      	ldr	r0, [pc, #84]	; (80033f0 <Print_Maze+0xcc>)
 800339a:	f003 f90d 	bl	80065b8 <strcpy>
	Transmit(tx_buffer);
 800339e:	4814      	ldr	r0, [pc, #80]	; (80033f0 <Print_Maze+0xcc>)
 80033a0:	f7ff fe76 	bl	8003090 <Transmit>
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Horizontal Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE - 1; i++) { //horizontal walls
 80033a4:	2c04      	cmp	r4, #4
 80033a6:	d1e7      	bne.n	8003378 <Print_Maze+0x54>
	}
	sprintf(tx_buffer, "\r\n \r\n");
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Vertical Walls: \r\n");
 80033a8:	4917      	ldr	r1, [pc, #92]	; (8003408 <Print_Maze+0xe4>)
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //vertical walls
 80033aa:	2400      	movs	r4, #0
	}
	sprintf(tx_buffer, "\r\n \r\n");
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Vertical Walls: \r\n");
 80033ac:	4810      	ldr	r0, [pc, #64]	; (80033f0 <Print_Maze+0xcc>)
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //vertical walls
	for (int j = 0; j < X_MAZE_SIZE - 1; j++) {
		sprintf(tx_buffer, "%d ", vert_walls[j][i]);
 80033ae:	4f17      	ldr	r7, [pc, #92]	; (800340c <Print_Maze+0xe8>)
	}
	sprintf(tx_buffer, "\r\n \r\n");
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Vertical Walls: \r\n");
 80033b0:	f003 f902 	bl	80065b8 <strcpy>
Transmit(tx_buffer);
 80033b4:	480e      	ldr	r0, [pc, #56]	; (80033f0 <Print_Maze+0xcc>)
 80033b6:	f7ff fe6b 	bl	8003090 <Transmit>
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Horizontal Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE - 1; i++) { //horizontal walls
 80033ba:	2500      	movs	r5, #0

sprintf(tx_buffer, "Vertical Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //vertical walls
	for (int j = 0; j < X_MAZE_SIZE - 1; j++) {
		sprintf(tx_buffer, "%d ", vert_walls[j][i]);
 80033bc:	193e      	adds	r6, r7, r4
 80033be:	5d72      	ldrb	r2, [r6, r5]
 80033c0:	3505      	adds	r5, #5
 80033c2:	490d      	ldr	r1, [pc, #52]	; (80033f8 <Print_Maze+0xd4>)
 80033c4:	480a      	ldr	r0, [pc, #40]	; (80033f0 <Print_Maze+0xcc>)
 80033c6:	f003 f8d3 	bl	8006570 <siprintf>
		Transmit(tx_buffer);
 80033ca:	4809      	ldr	r0, [pc, #36]	; (80033f0 <Print_Maze+0xcc>)
 80033cc:	f7ff fe60 	bl	8003090 <Transmit>
}

sprintf(tx_buffer, "Vertical Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //vertical walls
	for (int j = 0; j < X_MAZE_SIZE - 1; j++) {
 80033d0:	2d14      	cmp	r5, #20
 80033d2:	d1f4      	bne.n	80033be <Print_Maze+0x9a>
		sprintf(tx_buffer, "%d ", vert_walls[j][i]);
		Transmit(tx_buffer);
	}
	sprintf(tx_buffer, "\r\n \r\n");
 80033d4:	4909      	ldr	r1, [pc, #36]	; (80033fc <Print_Maze+0xd8>)
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Vertical Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //vertical walls
 80033d6:	3401      	adds	r4, #1
	for (int j = 0; j < X_MAZE_SIZE - 1; j++) {
		sprintf(tx_buffer, "%d ", vert_walls[j][i]);
		Transmit(tx_buffer);
	}
	sprintf(tx_buffer, "\r\n \r\n");
 80033d8:	4805      	ldr	r0, [pc, #20]	; (80033f0 <Print_Maze+0xcc>)
 80033da:	f003 f8ed 	bl	80065b8 <strcpy>
	Transmit(tx_buffer);
 80033de:	4804      	ldr	r0, [pc, #16]	; (80033f0 <Print_Maze+0xcc>)
 80033e0:	f7ff fe56 	bl	8003090 <Transmit>
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Vertical Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //vertical walls
 80033e4:	2c05      	cmp	r4, #5
 80033e6:	d1e8      	bne.n	80033ba <Print_Maze+0x96>
 80033e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033ea:	bf00      	nop
 80033ec:	080070d2 	.word	0x080070d2
 80033f0:	20002b84 	.word	0x20002b84
 80033f4:	200025a8 	.word	0x200025a8
 80033f8:	0800700d 	.word	0x0800700d
 80033fc:	080070e7 	.word	0x080070e7
 8003400:	080070ed 	.word	0x080070ed
 8003404:	200008dc 	.word	0x200008dc
 8003408:	08007102 	.word	0x08007102
 800340c:	20000b20 	.word	0x20000b20

08003410 <Get_Lowest_Square>:
*/

return;
}

int Get_Lowest_Square(int x, int y) { //gets lowest square
 8003410:	b5f0      	push	{r4, r5, r6, r7, lr}

int values[5] = {127, 127, 127, 127, 127}; //first value is default 127. Then it goes: up, down, left, right
 8003412:	4f2e      	ldr	r7, [pc, #184]	; (80034cc <Get_Lowest_Square+0xbc>)
*/

return;
}

int Get_Lowest_Square(int x, int y) { //gets lowest square
 8003414:	b087      	sub	sp, #28
 8003416:	4604      	mov	r4, r0
 8003418:	460d      	mov	r5, r1

int values[5] = {127, 127, 127, 127, 127}; //first value is default 127. Then it goes: up, down, left, right
 800341a:	ae01      	add	r6, sp, #4
int min = 0; //make sure there is default value

if (y > 0 && horiz_walls[x][y-1] != TRUE) { //if row is greater than zero
 800341c:	2d00      	cmp	r5, #0
return;
}

int Get_Lowest_Square(int x, int y) { //gets lowest square

int values[5] = {127, 127, 127, 127, 127}; //first value is default 127. Then it goes: up, down, left, right
 800341e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003420:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	a901      	add	r1, sp, #4
 8003426:	4a2a      	ldr	r2, [pc, #168]	; (80034d0 <Get_Lowest_Square+0xc0>)
 8003428:	6033      	str	r3, [r6, #0]
 800342a:	ea4f 0384 	mov.w	r3, r4, lsl #2
int min = 0; //make sure there is default value

if (y > 0 && horiz_walls[x][y-1] != TRUE) { //if row is greater than zero
 800342e:	dc0b      	bgt.n	8003448 <Get_Lowest_Square+0x38>
	values[1] = maze[x][y - 1]; //up square
}

if (y < Y_MAZE_SIZE - 1 && horiz_walls[x][y] != TRUE) {
 8003430:	441a      	add	r2, r3
 8003432:	5d52      	ldrb	r2, [r2, r5]
 8003434:	2a01      	cmp	r2, #1
 8003436:	d014      	beq.n	8003462 <Get_Lowest_Square+0x52>
	values[2] = maze[x][y + 1]; //down square
 8003438:	1c68      	adds	r0, r5, #1
 800343a:	191a      	adds	r2, r3, r4
 800343c:	4402      	add	r2, r0
 800343e:	4825      	ldr	r0, [pc, #148]	; (80034d4 <Get_Lowest_Square+0xc4>)
 8003440:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8003444:	9203      	str	r2, [sp, #12]
 8003446:	e00c      	b.n	8003462 <Get_Lowest_Square+0x52>
int Get_Lowest_Square(int x, int y) { //gets lowest square

int values[5] = {127, 127, 127, 127, 127}; //first value is default 127. Then it goes: up, down, left, right
int min = 0; //make sure there is default value

if (y > 0 && horiz_walls[x][y-1] != TRUE) { //if row is greater than zero
 8003448:	1e68      	subs	r0, r5, #1
 800344a:	18d6      	adds	r6, r2, r3
 800344c:	5c36      	ldrb	r6, [r6, r0]
 800344e:	2e01      	cmp	r6, #1
 8003450:	d005      	beq.n	800345e <Get_Lowest_Square+0x4e>
	values[1] = maze[x][y - 1]; //up square
 8003452:	191e      	adds	r6, r3, r4
 8003454:	4430      	add	r0, r6
 8003456:	4e1f      	ldr	r6, [pc, #124]	; (80034d4 <Get_Lowest_Square+0xc4>)
 8003458:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 800345c:	9002      	str	r0, [sp, #8]
}

if (y < Y_MAZE_SIZE - 1 && horiz_walls[x][y] != TRUE) {
 800345e:	2d03      	cmp	r5, #3
 8003460:	dde6      	ble.n	8003430 <Get_Lowest_Square+0x20>
	values[2] = maze[x][y + 1]; //down square
}

if (x > 0 && vert_walls[x - 1][y] != TRUE) {
 8003462:	2c00      	cmp	r4, #0
 8003464:	481c      	ldr	r0, [pc, #112]	; (80034d8 <Get_Lowest_Square+0xc8>)
 8003466:	dc0d      	bgt.n	8003484 <Get_Lowest_Square+0x74>
	values[3] = maze[x - 1][y]; //left square
}

if (x < X_MAZE_SIZE - 1 && vert_walls[x][y] != TRUE) {
 8003468:	4423      	add	r3, r4
 800346a:	4403      	add	r3, r0
 800346c:	5d5b      	ldrb	r3, [r3, r5]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d016      	beq.n	80034a0 <Get_Lowest_Square+0x90>
	values[4] = maze[x + 1][y]; //right square
 8003472:	3401      	adds	r4, #1
 8003474:	4b17      	ldr	r3, [pc, #92]	; (80034d4 <Get_Lowest_Square+0xc4>)
 8003476:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800347a:	442c      	add	r4, r5
 800347c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003480:	9305      	str	r3, [sp, #20]
 8003482:	e00d      	b.n	80034a0 <Get_Lowest_Square+0x90>

if (y < Y_MAZE_SIZE - 1 && horiz_walls[x][y] != TRUE) {
	values[2] = maze[x][y + 1]; //down square
}

if (x > 0 && vert_walls[x - 1][y] != TRUE) {
 8003484:	1e62      	subs	r2, r4, #1
 8003486:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800348a:	1886      	adds	r6, r0, r2
 800348c:	5d76      	ldrb	r6, [r6, r5]
 800348e:	2e01      	cmp	r6, #1
	values[3] = maze[x - 1][y]; //left square
 8003490:	bf1f      	itttt	ne
 8003492:	1952      	addne	r2, r2, r5
 8003494:	4e0f      	ldrne	r6, [pc, #60]	; (80034d4 <Get_Lowest_Square+0xc4>)
 8003496:	f856 2022 	ldrne.w	r2, [r6, r2, lsl #2]
 800349a:	9204      	strne	r2, [sp, #16]
}

if (x < X_MAZE_SIZE - 1 && vert_walls[x][y] != TRUE) {
 800349c:	2c03      	cmp	r4, #3
 800349e:	dde3      	ble.n	8003468 <Get_Lowest_Square+0x58>
	values[4] = maze[x + 1][y]; //right square
}

for (int i = 1; i < 5; i++) { //get the index of the lowest square. Should be 127 by default
 80034a0:	2201      	movs	r2, #1
}

int Get_Lowest_Square(int x, int y) { //gets lowest square

int values[5] = {127, 127, 127, 127, 127}; //first value is default 127. Then it goes: up, down, left, right
int min = 0; //make sure there is default value
 80034a2:	2300      	movs	r3, #0
if (x < X_MAZE_SIZE - 1 && vert_walls[x][y] != TRUE) {
	values[4] = maze[x + 1][y]; //right square
}

for (int i = 1; i < 5; i++) { //get the index of the lowest square. Should be 127 by default
if(values[i] < values[min]) {
 80034a4:	a806      	add	r0, sp, #24
 80034a6:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
 80034aa:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80034ae:	f850 0c14 	ldr.w	r0, [r0, #-20]
 80034b2:	4284      	cmp	r4, r0
 80034b4:	bfb8      	it	lt
 80034b6:	4613      	movlt	r3, r2

if (x < X_MAZE_SIZE - 1 && vert_walls[x][y] != TRUE) {
	values[4] = maze[x + 1][y]; //right square
}

for (int i = 1; i < 5; i++) { //get the index of the lowest square. Should be 127 by default
 80034b8:	3201      	adds	r2, #1
 80034ba:	2a05      	cmp	r2, #5
 80034bc:	d1f2      	bne.n	80034a4 <Get_Lowest_Square+0x94>
if(values[i] < values[min]) {
	min = i;
}
}

return values[min];
 80034be:	aa06      	add	r2, sp, #24
 80034c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
}
 80034c4:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80034c8:	b007      	add	sp, #28
 80034ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034cc:	08006df8 	.word	0x08006df8
 80034d0:	200008dc 	.word	0x200008dc
 80034d4:	200025a8 	.word	0x200025a8
 80034d8:	20000b20 	.word	0x20000b20

080034dc <Floodfill>:

void Floodfill(int reverse, int path_search, int full) { //reverse chooses to set the start or the end as the target. path_search sets the next coordinate on the list as the target
 80034dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034e0:	4b40      	ldr	r3, [pc, #256]	; (80035e4 <Floodfill+0x108>)
 80034e2:	f5ad 7d4b 	sub.w	sp, sp, #812	; 0x32c
	int buffer_counter = 0; //counter to loop through x_buffer and y_buffer
	int pathdist = 1; //floodfill values

	for (int i = 0; i < X_MAZE_SIZE; i++) { //initialize all values to 127
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
			maze[i][j] = 127;
 80034e6:	247f      	movs	r4, #127	; 0x7f
}

return values[min];
}

void Floodfill(int reverse, int path_search, int full) { //reverse chooses to set the start or the end as the target. path_search sets the next coordinate on the list as the target
 80034e8:	9200      	str	r2, [sp, #0]
 80034ea:	f103 0264 	add.w	r2, r3, #100	; 0x64
	int buffer_counter = 0; //counter to loop through x_buffer and y_buffer
	int pathdist = 1; //floodfill values

	for (int i = 0; i < X_MAZE_SIZE; i++) { //initialize all values to 127
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
			maze[i][j] = 127;
 80034ee:	f843 4c04 	str.w	r4, [r3, #-4]
 80034f2:	3314      	adds	r3, #20
 80034f4:	f843 4c14 	str.w	r4, [r3, #-20]
 80034f8:	f843 4c10 	str.w	r4, [r3, #-16]
 80034fc:	f843 4c0c 	str.w	r4, [r3, #-12]
 8003500:	f843 4c08 	str.w	r4, [r3, #-8]
	int temp_y = 0;

	int buffer_counter = 0; //counter to loop through x_buffer and y_buffer
	int pathdist = 1; //floodfill values

	for (int i = 0; i < X_MAZE_SIZE; i++) { //initialize all values to 127
 8003504:	4293      	cmp	r3, r2
 8003506:	d1f2      	bne.n	80034ee <Floodfill+0x12>
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
			maze[i][j] = 127;
		}
	}

	if (path_search == TRUE) {
 8003508:	2901      	cmp	r1, #1
 800350a:	4c37      	ldr	r4, [pc, #220]	; (80035e8 <Floodfill+0x10c>)
 800350c:	d10a      	bne.n	8003524 <Floodfill+0x48>
		maze[search_x][search_y] = 0;
 800350e:	4b37      	ldr	r3, [pc, #220]	; (80035ec <Floodfill+0x110>)
 8003510:	4a37      	ldr	r2, [pc, #220]	; (80035f0 <Floodfill+0x114>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6812      	ldr	r2, [r2, #0]
 8003516:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800351a:	4413      	add	r3, r2
 800351c:	2200      	movs	r2, #0
 800351e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 8003522:	e005      	b.n	8003530 <Floodfill+0x54>
	}

	else {
		if (reverse == TRUE) {
 8003524:	2801      	cmp	r0, #1
 8003526:	f04f 0300 	mov.w	r3, #0
			maze[X_START][Y_START] = 0;
 800352a:	bf0c      	ite	eq
 800352c:	6123      	streq	r3, [r4, #16]
		}

		else
		{
			maze[X_FINAL][Y_FINAL] = 0;
 800352e:	6323      	strne	r3, [r4, #48]	; 0x30
			temp_y = y_buffer[i];
			maze[temp_x][temp_y] = pathdist;
		}

		if (full == FALSE) {
			if (maze[x_coord][y_coord] != 127) { //if the algorithm has reached the desired position
 8003530:	4b30      	ldr	r3, [pc, #192]	; (80035f4 <Floodfill+0x118>)
 8003532:	2701      	movs	r7, #1
 8003534:	4a30      	ldr	r2, [pc, #192]	; (80035f8 <Floodfill+0x11c>)
 8003536:	f04f 0a14 	mov.w	sl, #20
 800353a:	681b      	ldr	r3, [r3, #0]
				if (maze[i][j] != 127) {
					continue; //if cell has already been updated skip it
				}
				if (Get_Lowest_Square(i, j) != 127) { //if reached, add to buffer
					x_buffer[buffer_counter] = i; //x_ coordinate buffer
					y_buffer[buffer_counter] = j; //y coordinate buffer
 800353c:	f50d 7bcc 	add.w	fp, sp, #408	; 0x198
			temp_y = y_buffer[i];
			maze[temp_x][temp_y] = pathdist;
		}

		if (full == FALSE) {
			if (maze[x_coord][y_coord] != 127) { //if the algorithm has reached the desired position
 8003540:	6811      	ldr	r1, [r2, #0]
 8003542:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003546:	eb03 0901 	add.w	r9, r3, r1

	while(1) {

		buffer_counter = 0;

		for (int i = 0; i < X_MAZE_SIZE; i++) { //loop through all values to see if square has been reached
 800354a:	2500      	movs	r5, #0
		}
	}

	while(1) {

		buffer_counter = 0;
 800354c:	46a8      	mov	r8, r5
 800354e:	fb0a 4305 	mla	r3, sl, r5, r4
			temp_y = y_buffer[i];
			maze[temp_x][temp_y] = pathdist;
		}

		if (full == FALSE) {
			if (maze[x_coord][y_coord] != 127) { //if the algorithm has reached the desired position
 8003552:	2600      	movs	r6, #0

		buffer_counter = 0;

		for (int i = 0; i < X_MAZE_SIZE; i++) { //loop through all values to see if square has been reached
			for (int j = 0; j < Y_MAZE_SIZE; j++) {
				if (maze[i][j] != 127) {
 8003554:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8003558:	297f      	cmp	r1, #127	; 0x7f
 800355a:	d10e      	bne.n	800357a <Floodfill+0x9e>
					continue; //if cell has already been updated skip it
				}
				if (Get_Lowest_Square(i, j) != 127) { //if reached, add to buffer
 800355c:	4631      	mov	r1, r6
 800355e:	4628      	mov	r0, r5
 8003560:	9301      	str	r3, [sp, #4]
 8003562:	f7ff ff55 	bl	8003410 <Get_Lowest_Square>
 8003566:	287f      	cmp	r0, #127	; 0x7f
 8003568:	9b01      	ldr	r3, [sp, #4]
					x_buffer[buffer_counter] = i; //x_ coordinate buffer
 800356a:	bf1f      	itttt	ne
 800356c:	aa02      	addne	r2, sp, #8
					y_buffer[buffer_counter] = j; //y coordinate buffer
 800356e:	f84b 6028 	strne.w	r6, [fp, r8, lsl #2]
			for (int j = 0; j < Y_MAZE_SIZE; j++) {
				if (maze[i][j] != 127) {
					continue; //if cell has already been updated skip it
				}
				if (Get_Lowest_Square(i, j) != 127) { //if reached, add to buffer
					x_buffer[buffer_counter] = i; //x_ coordinate buffer
 8003572:	f842 5028 	strne.w	r5, [r2, r8, lsl #2]
					y_buffer[buffer_counter] = j; //y coordinate buffer
					buffer_counter++;
 8003576:	f108 0801 	addne.w	r8, r8, #1
	while(1) {

		buffer_counter = 0;

		for (int i = 0; i < X_MAZE_SIZE; i++) { //loop through all values to see if square has been reached
			for (int j = 0; j < Y_MAZE_SIZE; j++) {
 800357a:	3601      	adds	r6, #1
 800357c:	2e05      	cmp	r6, #5
 800357e:	d1e9      	bne.n	8003554 <Floodfill+0x78>

	while(1) {

		buffer_counter = 0;

		for (int i = 0; i < X_MAZE_SIZE; i++) { //loop through all values to see if square has been reached
 8003580:	3501      	adds	r5, #1
 8003582:	2d05      	cmp	r5, #5
 8003584:	d1e3      	bne.n	800354e <Floodfill+0x72>
 8003586:	2300      	movs	r3, #0
					buffer_counter++;
				}
			}
		}

		for (int i = 0; i < buffer_counter; i++) { //write all buffer coordinates with the path distance
 8003588:	4598      	cmp	r8, r3
 800358a:	d00b      	beq.n	80035a4 <Floodfill+0xc8>
			temp_x = x_buffer[i];
			temp_y = y_buffer[i];
			maze[temp_x][temp_y] = pathdist;
 800358c:	aa02      	add	r2, sp, #8
 800358e:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
 8003592:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
					buffer_counter++;
				}
			}
		}

		for (int i = 0; i < buffer_counter; i++) { //write all buffer coordinates with the path distance
 8003596:	3301      	adds	r3, #1
			temp_x = x_buffer[i];
			temp_y = y_buffer[i];
			maze[temp_x][temp_y] = pathdist;
 8003598:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800359c:	4401      	add	r1, r0
 800359e:	f844 7021 	str.w	r7, [r4, r1, lsl #2]
 80035a2:	e7f1      	b.n	8003588 <Floodfill+0xac>
		}

		if (full == FALSE) {
 80035a4:	9b00      	ldr	r3, [sp, #0]
 80035a6:	b913      	cbnz	r3, 80035ae <Floodfill+0xd2>
			if (maze[x_coord][y_coord] != 127) { //if the algorithm has reached the desired position
 80035a8:	f854 3029 	ldr.w	r3, [r4, r9, lsl #2]
 80035ac:	e000      	b.n	80035b0 <Floodfill+0xd4>
				break;
			}
		}
		else {

			if (maze[X_START][Y_START] != 127) {
 80035ae:	6923      	ldr	r3, [r4, #16]
 80035b0:	2b7f      	cmp	r3, #127	; 0x7f
 80035b2:	d113      	bne.n	80035dc <Floodfill+0x100>
				break;
			}
		}


		pathdist++;
 80035b4:	3701      	adds	r7, #1

		if (pathdist > 200) { //prevent infinite loops
 80035b6:	2fc9      	cmp	r7, #201	; 0xc9
 80035b8:	d1c7      	bne.n	800354a <Floodfill+0x6e>
			stop_flag = TRUE;
 80035ba:	4b10      	ldr	r3, [pc, #64]	; (80035fc <Floodfill+0x120>)
 80035bc:	2201      	movs	r2, #1
#if DEBUG == TRUE
			sprintf(tx_buffer, "Floodfill Error pathdist: %d \r\n", pathdist);
 80035be:	4910      	ldr	r1, [pc, #64]	; (8003600 <Floodfill+0x124>)


		pathdist++;

		if (pathdist > 200) { //prevent infinite loops
			stop_flag = TRUE;
 80035c0:	601a      	str	r2, [r3, #0]
#if DEBUG == TRUE
			sprintf(tx_buffer, "Floodfill Error pathdist: %d \r\n", pathdist);
 80035c2:	463a      	mov	r2, r7
 80035c4:	480f      	ldr	r0, [pc, #60]	; (8003604 <Floodfill+0x128>)
 80035c6:	f002 ffd3 	bl	8006570 <siprintf>
			Print_Maze();
 80035ca:	f7ff feab 	bl	8003324 <Print_Maze>
			Transmit(tx_buffer);
 80035ce:	480d      	ldr	r0, [pc, #52]	; (8003604 <Floodfill+0x128>)
			break;
		}

	}
//end algorithm while
}
 80035d0:	f50d 7d4b 	add.w	sp, sp, #812	; 0x32c
 80035d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (pathdist > 200) { //prevent infinite loops
			stop_flag = TRUE;
#if DEBUG == TRUE
			sprintf(tx_buffer, "Floodfill Error pathdist: %d \r\n", pathdist);
			Print_Maze();
			Transmit(tx_buffer);
 80035d8:	f7ff bd5a 	b.w	8003090 <Transmit>
			break;
		}

	}
//end algorithm while
}
 80035dc:	f50d 7d4b 	add.w	sp, sp, #812	; 0x32c
 80035e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035e4:	200025ac 	.word	0x200025ac
 80035e8:	200025a8 	.word	0x200025a8
 80035ec:	20002560 	.word	0x20002560
 80035f0:	20002564 	.word	0x20002564
 80035f4:	20000ab8 	.word	0x20000ab8
 80035f8:	20000010 	.word	0x20000010
 80035fc:	20000014 	.word	0x20000014
 8003600:	08007115 	.word	0x08007115
 8003604:	20002b84 	.word	0x20002b84

08003608 <Reset_Maze>:

void Reset_Maze() { ///resets the entire maze to blank, and floodfills the value
 8003608:	4b1c      	ldr	r3, [pc, #112]	; (800367c <Reset_Maze+0x74>)

	for (int i = 0; i < X_MAZE_SIZE; i++) { //horizontal walls
		for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
			horiz_walls[i][j] = 0;
 800360a:	2200      	movs	r2, #0
 800360c:	f103 0114 	add.w	r1, r3, #20
 8003610:	f803 2c01 	strb.w	r2, [r3, #-1]
 8003614:	3304      	adds	r3, #4
 8003616:	f803 2c04 	strb.w	r2, [r3, #-4]
 800361a:	f803 2c03 	strb.w	r2, [r3, #-3]
 800361e:	f803 2c02 	strb.w	r2, [r3, #-2]
//end algorithm while
}

void Reset_Maze() { ///resets the entire maze to blank, and floodfills the value

	for (int i = 0; i < X_MAZE_SIZE; i++) { //horizontal walls
 8003622:	428b      	cmp	r3, r1
 8003624:	d1f4      	bne.n	8003610 <Reset_Maze+0x8>
 8003626:	4b16      	ldr	r3, [pc, #88]	; (8003680 <Reset_Maze+0x78>)
		}
	}

	for (int i = 0; i < X_MAZE_SIZE - 1; i++) { //vertical walls
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
			vert_walls[i][j] = 0;
 8003628:	2200      	movs	r2, #0
 800362a:	f103 0114 	add.w	r1, r3, #20
 800362e:	f803 2c01 	strb.w	r2, [r3, #-1]
 8003632:	3305      	adds	r3, #5
 8003634:	f803 2c05 	strb.w	r2, [r3, #-5]
 8003638:	f803 2c04 	strb.w	r2, [r3, #-4]
 800363c:	f803 2c03 	strb.w	r2, [r3, #-3]
 8003640:	f803 2c02 	strb.w	r2, [r3, #-2]
		for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
			horiz_walls[i][j] = 0;
		}
	}

	for (int i = 0; i < X_MAZE_SIZE - 1; i++) { //vertical walls
 8003644:	4299      	cmp	r1, r3
 8003646:	d1f2      	bne.n	800362e <Reset_Maze+0x26>
 8003648:	4b0e      	ldr	r3, [pc, #56]	; (8003684 <Reset_Maze+0x7c>)
		}
	}

	for (int i = 0; i < X_MAZE_SIZE; i++) { //set all squares to be unvisited
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
			visited_squares[i][j] = FALSE;
 800364a:	2200      	movs	r2, #0
 800364c:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8003650:	f843 2c04 	str.w	r2, [r3, #-4]
 8003654:	3314      	adds	r3, #20
 8003656:	f843 2c14 	str.w	r2, [r3, #-20]
 800365a:	2100      	movs	r1, #0
 800365c:	f843 2c10 	str.w	r2, [r3, #-16]
 8003660:	f843 2c0c 	str.w	r2, [r3, #-12]
 8003664:	f843 2c08 	str.w	r2, [r3, #-8]
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
			vert_walls[i][j] = 0;
		}
	}

	for (int i = 0; i < X_MAZE_SIZE; i++) { //set all squares to be unvisited
 8003668:	4283      	cmp	r3, r0
 800366a:	d1f1      	bne.n	8003650 <Reset_Maze+0x48>
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
			visited_squares[i][j] = FALSE;
		}
	}

	final_x = 0;
 800366c:	4b06      	ldr	r3, [pc, #24]	; (8003688 <Reset_Maze+0x80>)
 800366e:	6019      	str	r1, [r3, #0]
	final_y = 0;
 8003670:	4b06      	ldr	r3, [pc, #24]	; (800368c <Reset_Maze+0x84>)
 8003672:	6019      	str	r1, [r3, #0]
	final_dir = 0;
 8003674:	4b06      	ldr	r3, [pc, #24]	; (8003690 <Reset_Maze+0x88>)
 8003676:	6019      	str	r1, [r3, #0]
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	200008dd 	.word	0x200008dd
 8003680:	20000b21 	.word	0x20000b21
 8003684:	200031f8 	.word	0x200031f8
 8003688:	20000940 	.word	0x20000940
 800368c:	20000944 	.word	0x20000944
 8003690:	20000ac8 	.word	0x20000ac8

08003694 <Switch_Direction>:
}
}

void Switch_Direction() { //used at the end of searching to update position

	switch (cur_dir) {
 8003694:	4b08      	ldr	r3, [pc, #32]	; (80036b8 <Switch_Direction+0x24>)
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	2a03      	cmp	r2, #3
 800369a:	d80b      	bhi.n	80036b4 <Switch_Direction+0x20>
 800369c:	e8df f002 	tbb	[pc, r2]
 80036a0:	08060402 	.word	0x08060402

	case NORTH: cur_dir = SOUTH; break; //update the direction that the mouse is pointing
 80036a4:	2201      	movs	r2, #1
 80036a6:	e004      	b.n	80036b2 <Switch_Direction+0x1e>
	case SOUTH: cur_dir = NORTH; break;
 80036a8:	2200      	movs	r2, #0
 80036aa:	e002      	b.n	80036b2 <Switch_Direction+0x1e>
	case WEST: cur_dir = EAST; break;
 80036ac:	2203      	movs	r2, #3
 80036ae:	e000      	b.n	80036b2 <Switch_Direction+0x1e>
	case EAST: cur_dir = WEST; break;
 80036b0:	2202      	movs	r2, #2
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	20001b08 	.word	0x20001b08

080036bc <Update_Position>:
		sprintf(tx_buffer, "|||DECISION  %d||| X VALUE: %d  Y VALUE: %d  DIRECTION: %d  NEXT: %d \r\n", dbg_count + 1, x_coord, y_coord, cur_dir, next_move);
		Transmit(tx_buffer);

}

void Update_Position() { //updates position and direction so read walls is good
 80036bc:	b5f0      	push	{r4, r5, r6, r7, lr}

	visited_squares[x_coord][y_coord] = TRUE; //set previous value to be visited
 80036be:	4d4c      	ldr	r5, [pc, #304]	; (80037f0 <Update_Position+0x134>)
 80036c0:	2401      	movs	r4, #1
 80036c2:	4e4c      	ldr	r6, [pc, #304]	; (80037f4 <Update_Position+0x138>)
		sprintf(tx_buffer, "|||DECISION  %d||| X VALUE: %d  Y VALUE: %d  DIRECTION: %d  NEXT: %d \r\n", dbg_count + 1, x_coord, y_coord, cur_dir, next_move);
		Transmit(tx_buffer);

}

void Update_Position() { //updates position and direction so read walls is good
 80036c4:	b085      	sub	sp, #20

	visited_squares[x_coord][y_coord] = TRUE; //set previous value to be visited
 80036c6:	682a      	ldr	r2, [r5, #0]
 80036c8:	6833      	ldr	r3, [r6, #0]
 80036ca:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80036ce:	484a      	ldr	r0, [pc, #296]	; (80037f8 <Update_Position+0x13c>)

	if (next_move != DEAD) {
 80036d0:	4f4a      	ldr	r7, [pc, #296]	; (80037fc <Update_Position+0x140>)

}

void Update_Position() { //updates position and direction so read walls is good

	visited_squares[x_coord][y_coord] = TRUE; //set previous value to be visited
 80036d2:	4419      	add	r1, r3
 80036d4:	f840 4021 	str.w	r4, [r0, r1, lsl #2]

	if (next_move != DEAD) {
 80036d8:	6839      	ldr	r1, [r7, #0]
		prevx = x_coord; //save previous values. Used for dead end
		prevy = y_coord;
	}

	switch (cur_dir) { //update position based on direction and next move calculate by floodfill
 80036da:	4c49      	ldr	r4, [pc, #292]	; (8003800 <Update_Position+0x144>)

void Update_Position() { //updates position and direction so read walls is good

	visited_squares[x_coord][y_coord] = TRUE; //set previous value to be visited

	if (next_move != DEAD) {
 80036dc:	2903      	cmp	r1, #3
		prevx = x_coord; //save previous values. Used for dead end
 80036de:	bf1f      	itttt	ne
 80036e0:	4848      	ldrne	r0, [pc, #288]	; (8003804 <Update_Position+0x148>)
 80036e2:	6002      	strne	r2, [r0, #0]
		prevy = y_coord;
 80036e4:	4848      	ldrne	r0, [pc, #288]	; (8003808 <Update_Position+0x14c>)
 80036e6:	6003      	strne	r3, [r0, #0]
	}

	switch (cur_dir) { //update position based on direction and next move calculate by floodfill
 80036e8:	6820      	ldr	r0, [r4, #0]
 80036ea:	2803      	cmp	r0, #3
 80036ec:	d837      	bhi.n	800375e <Update_Position+0xa2>
 80036ee:	e8df f000 	tbb	[pc, r0]
 80036f2:	0d02      	.short	0x0d02
 80036f4:	2418      	.short	0x2418
	case NORTH: //facing top of maze
		switch(next_move) {
 80036f6:	2901      	cmp	r1, #1
 80036f8:	d004      	beq.n	8003704 <Update_Position+0x48>
 80036fa:	2902      	cmp	r1, #2
 80036fc:	d022      	beq.n	8003744 <Update_Position+0x88>
 80036fe:	bb71      	cbnz	r1, 800375e <Update_Position+0xa2>
		case FWD:
			x_coord = x_coord + NORTH_X;
			y_coord = y_coord + NORTH_Y;
 8003700:	3b01      	subs	r3, #1
 8003702:	e009      	b.n	8003718 <Update_Position+0x5c>
			break;
		case LEFT:
			x_coord = x_coord + WEST_X;
 8003704:	3a01      	subs	r2, #1
			y_coord = y_coord + WEST_Y;
			cur_dir = WEST;
 8003706:	2302      	movs	r3, #2
		case FWD:
			x_coord = x_coord + NORTH_X;
			y_coord = y_coord + NORTH_Y;
			break;
		case LEFT:
			x_coord = x_coord + WEST_X;
 8003708:	602a      	str	r2, [r5, #0]
 800370a:	e022      	b.n	8003752 <Update_Position+0x96>
			break;
		}
		break;

	case SOUTH: //facing bottom of maze
		switch(next_move) {
 800370c:	2901      	cmp	r1, #1
 800370e:	d019      	beq.n	8003744 <Update_Position+0x88>
 8003710:	2902      	cmp	r1, #2
 8003712:	d003      	beq.n	800371c <Update_Position+0x60>
 8003714:	bb19      	cbnz	r1, 800375e <Update_Position+0xa2>
		case FWD:
			x_coord = x_coord + SOUTH_X;
			y_coord = y_coord + SOUTH_Y;
 8003716:	3301      	adds	r3, #1
 8003718:	6033      	str	r3, [r6, #0]
			break;
 800371a:	e033      	b.n	8003784 <Update_Position+0xc8>
			x_coord = x_coord + EAST_X;
			y_coord = y_coord + EAST_Y;
			cur_dir = EAST;
			break;
		case RIGHT:
			x_coord = x_coord + WEST_X;
 800371c:	3a01      	subs	r2, #1
 800371e:	602a      	str	r2, [r5, #0]
 8003720:	e009      	b.n	8003736 <Update_Position+0x7a>
			break;
		}
		break;

	case WEST: //facing left side of maze
		switch(next_move) {
 8003722:	2901      	cmp	r1, #1
 8003724:	d005      	beq.n	8003732 <Update_Position+0x76>
 8003726:	2902      	cmp	r1, #2
 8003728:	d010      	beq.n	800374c <Update_Position+0x90>
 800372a:	b9c1      	cbnz	r1, 800375e <Update_Position+0xa2>
		case FWD:
			x_coord = x_coord + WEST_X;
 800372c:	3a01      	subs	r2, #1
 800372e:	602a      	str	r2, [r5, #0]
			y_coord = y_coord + WEST_Y;
			break;
 8003730:	e028      	b.n	8003784 <Update_Position+0xc8>
		case LEFT:
			x_coord = x_coord + SOUTH_X;
			y_coord = y_coord + SOUTH_Y;
 8003732:	3301      	adds	r3, #1
 8003734:	6033      	str	r3, [r6, #0]
			cur_dir = SOUTH;
 8003736:	6021      	str	r1, [r4, #0]
			break;
 8003738:	e024      	b.n	8003784 <Update_Position+0xc8>
			break;
		}
		break;

	case EAST: //facing right side of maze
		switch(next_move) {
 800373a:	2901      	cmp	r1, #1
 800373c:	d006      	beq.n	800374c <Update_Position+0x90>
 800373e:	2902      	cmp	r1, #2
 8003740:	d009      	beq.n	8003756 <Update_Position+0x9a>
 8003742:	b961      	cbnz	r1, 800375e <Update_Position+0xa2>
		case FWD:
			x_coord = x_coord + EAST_X;
 8003744:	3201      	adds	r2, #1
			y_coord = y_coord + EAST_Y;
			cur_dir = EAST;
 8003746:	2303      	movs	r3, #3
		break;

	case EAST: //facing right side of maze
		switch(next_move) {
		case FWD:
			x_coord = x_coord + EAST_X;
 8003748:	602a      	str	r2, [r5, #0]
 800374a:	e002      	b.n	8003752 <Update_Position+0x96>
			y_coord = y_coord + EAST_Y;
			cur_dir = EAST;
			break;
		case LEFT:
			x_coord = x_coord + NORTH_X;
			y_coord = y_coord + NORTH_Y;
 800374c:	3b01      	subs	r3, #1
 800374e:	6033      	str	r3, [r6, #0]
			cur_dir = NORTH;
 8003750:	2300      	movs	r3, #0
 8003752:	6023      	str	r3, [r4, #0]
			break;
 8003754:	e016      	b.n	8003784 <Update_Position+0xc8>
		case RIGHT:
			x_coord = x_coord + SOUTH_X;
			y_coord = y_coord + SOUTH_Y;
 8003756:	3301      	adds	r3, #1
 8003758:	6033      	str	r3, [r6, #0]
			cur_dir = SOUTH;
 800375a:	2301      	movs	r3, #1
 800375c:	e7f9      	b.n	8003752 <Update_Position+0x96>
			break;
		}
		break;
	}

	if (next_move == DEAD) { //announce dead ends. Set position to old value
 800375e:	2903      	cmp	r1, #3
 8003760:	d110      	bne.n	8003784 <Update_Position+0xc8>
#if DEBUG == TRUE
		sprintf(tx_buffer, "|||DEAD END||| X VALUE: %d  Y VALUE: %d \r\n", x_coord, y_coord);
 8003762:	492a      	ldr	r1, [pc, #168]	; (800380c <Update_Position+0x150>)
 8003764:	482a      	ldr	r0, [pc, #168]	; (8003810 <Update_Position+0x154>)
 8003766:	f002 ff03 	bl	8006570 <siprintf>
		Transmit(tx_buffer);
 800376a:	4829      	ldr	r0, [pc, #164]	; (8003810 <Update_Position+0x154>)
 800376c:	f7ff fc90 	bl	8003090 <Transmit>
#endif
		Switch_Direction();
 8003770:	f7ff ff90 	bl	8003694 <Switch_Direction>
		x_coord = prevx;
 8003774:	4b23      	ldr	r3, [pc, #140]	; (8003804 <Update_Position+0x148>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	602b      	str	r3, [r5, #0]
		y_coord = prevy;
 800377a:	4b23      	ldr	r3, [pc, #140]	; (8003808 <Update_Position+0x14c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6033      	str	r3, [r6, #0]
#if DEBUG == TRUE  //announce new position
	sprintf(tx_buffer, "|||DECISION  %d||| X VALUE: %d  Y VALUE: %d  DIRECTION: %d  NEXT: %d \r\n", dbg_count + 1, x_coord, y_coord, cur_dir, next_move);
	Transmit(tx_buffer);
#endif

}
 8003780:	b005      	add	sp, #20
 8003782:	bdf0      	pop	{r4, r5, r6, r7, pc}
		x_coord = prevx;
		y_coord = prevy;
		return;
	}

	if (maze[x_coord][y_coord] == 0) { //reached target square
 8003784:	682a      	ldr	r2, [r5, #0]
 8003786:	6833      	ldr	r3, [r6, #0]
 8003788:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800378c:	4821      	ldr	r0, [pc, #132]	; (8003814 <Update_Position+0x158>)
 800378e:	4419      	add	r1, r3
 8003790:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8003794:	b951      	cbnz	r1, 80037ac <Update_Position+0xf0>
		if (search_flag == FALSE) { //reached center
 8003796:	4920      	ldr	r1, [pc, #128]	; (8003818 <Update_Position+0x15c>)
 8003798:	6809      	ldr	r1, [r1, #0]
 800379a:	b911      	cbnz	r1, 80037a2 <Update_Position+0xe6>
			done_flag = TRUE; //tell loop to stop
 800379c:	2001      	movs	r0, #1
 800379e:	491f      	ldr	r1, [pc, #124]	; (800381c <Update_Position+0x160>)
 80037a0:	6008      	str	r0, [r1, #0]
			}
			Floodfill(reverse_flag, search_flag, FALSE); // go back to center
		}
		*/
#if DEBUG == TRUE
		sprintf(tx_buffer, "|||FINAL||| X VALUE: %d  Y VALUE: %d \r\n", x_coord, y_coord);
 80037a2:	491f      	ldr	r1, [pc, #124]	; (8003820 <Update_Position+0x164>)
 80037a4:	481a      	ldr	r0, [pc, #104]	; (8003810 <Update_Position+0x154>)
 80037a6:	f002 fee3 	bl	8006570 <siprintf>
 80037aa:	e01b      	b.n	80037e4 <Update_Position+0x128>
#endif
		//visited_squares[x_coord][y_coord] = TRUE;
		return;
	}

	else if (x_coord < 0 || y_coord < 0 || x_coord >= X_MAZE_SIZE || y_coord >= Y_MAZE_SIZE) {
 80037ac:	2a04      	cmp	r2, #4
 80037ae:	d801      	bhi.n	80037b4 <Update_Position+0xf8>
 80037b0:	2b04      	cmp	r3, #4
 80037b2:	d909      	bls.n	80037c8 <Update_Position+0x10c>
		stop_flag = TRUE; //if position is out of maze, stop mouse
 80037b4:	2001      	movs	r0, #1
 80037b6:	491b      	ldr	r1, [pc, #108]	; (8003824 <Update_Position+0x168>)
 80037b8:	6008      	str	r0, [r1, #0]
#if DEBUG == TRUE
		sprintf(tx_buffer, "Position out of Boundary! X VALUE: %d  Y VALUE %d  \r\n", x_coord, y_coord);
 80037ba:	491b      	ldr	r1, [pc, #108]	; (8003828 <Update_Position+0x16c>)
 80037bc:	4814      	ldr	r0, [pc, #80]	; (8003810 <Update_Position+0x154>)
 80037be:	f002 fed7 	bl	8006570 <siprintf>
		Transmit(tx_buffer);
 80037c2:	4813      	ldr	r0, [pc, #76]	; (8003810 <Update_Position+0x154>)
 80037c4:	f7ff fc64 	bl	8003090 <Transmit>
#endif
	}
#if DEBUG == TRUE  //announce new position
	sprintf(tx_buffer, "|||DECISION  %d||| X VALUE: %d  Y VALUE: %d  DIRECTION: %d  NEXT: %d \r\n", dbg_count + 1, x_coord, y_coord, cur_dir, next_move);
 80037c8:	4b18      	ldr	r3, [pc, #96]	; (800382c <Update_Position+0x170>)
 80037ca:	4919      	ldr	r1, [pc, #100]	; (8003830 <Update_Position+0x174>)
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	3201      	adds	r2, #1
 80037d2:	480f      	ldr	r0, [pc, #60]	; (8003810 <Update_Position+0x154>)
 80037d4:	9302      	str	r3, [sp, #8]
 80037d6:	6823      	ldr	r3, [r4, #0]
 80037d8:	9301      	str	r3, [sp, #4]
 80037da:	6833      	ldr	r3, [r6, #0]
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	682b      	ldr	r3, [r5, #0]
 80037e0:	f002 fec6 	bl	8006570 <siprintf>
	Transmit(tx_buffer);
 80037e4:	480a      	ldr	r0, [pc, #40]	; (8003810 <Update_Position+0x154>)
#endif

}
 80037e6:	b005      	add	sp, #20
 80037e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		Transmit(tx_buffer);
#endif
	}
#if DEBUG == TRUE  //announce new position
	sprintf(tx_buffer, "|||DECISION  %d||| X VALUE: %d  Y VALUE: %d  DIRECTION: %d  NEXT: %d \r\n", dbg_count + 1, x_coord, y_coord, cur_dir, next_move);
	Transmit(tx_buffer);
 80037ec:	f7ff bc50 	b.w	8003090 <Transmit>
 80037f0:	20000ab8 	.word	0x20000ab8
 80037f4:	20000010 	.word	0x20000010
 80037f8:	200031f4 	.word	0x200031f4
 80037fc:	20001be4 	.word	0x20001be4
 8003800:	20001b08 	.word	0x20001b08
 8003804:	20000ab0 	.word	0x20000ab0
 8003808:	20000ab4 	.word	0x20000ab4
 800380c:	080071b3 	.word	0x080071b3
 8003810:	20002b84 	.word	0x20002b84
 8003814:	200025a8 	.word	0x200025a8
 8003818:	20001bdc 	.word	0x20001bdc
 800381c:	20000b3c 	.word	0x20000b3c
 8003820:	080071de 	.word	0x080071de
 8003824:	20000014 	.word	0x20000014
 8003828:	08007135 	.word	0x08007135
 800382c:	200008cc 	.word	0x200008cc
 8003830:	0800716b 	.word	0x0800716b

08003834 <Calc_Optimal>:
int counter = 0; //counter for counting the number of squares

int x = X_START; //initialize cursor to start square
int y = Y_START;

Floodfill(FALSE, FALSE, TRUE);  //floodfill from final value to start value
 8003834:	2100      	movs	r1, #0
 8003836:	2201      	movs	r2, #1
	}
	//HAL_TIM_Base_Stop(&htim5);

}

void Calc_Optimal() { //calculate optimal path based on known walls
 8003838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
int counter = 0; //counter for counting the number of squares

int x = X_START; //initialize cursor to start square
int y = Y_START;

Floodfill(FALSE, FALSE, TRUE);  //floodfill from final value to start value
 800383c:	4608      	mov	r0, r1
	}
	//HAL_TIM_Base_Stop(&htim5);

}

void Calc_Optimal() { //calculate optimal path based on known walls
 800383e:	b089      	sub	sp, #36	; 0x24
int counter = 0; //counter for counting the number of squares

int x = X_START; //initialize cursor to start square
int y = Y_START;

Floodfill(FALSE, FALSE, TRUE);  //floodfill from final value to start value
 8003840:	f7ff fe4c 	bl	80034dc <Floodfill>

int val = maze[x][y]; //get start maze value
int next_values[4] = {-1, -1, -1, -1}; //array to hold the next values {up, down , left, right}
 8003844:	4b80      	ldr	r3, [pc, #512]	; (8003a48 <Calc_Optimal+0x214>)
 8003846:	f10d 0b10 	add.w	fp, sp, #16
//int temp_index[3] = {-1,  -1,  -1}; //array to hold next values, if there's a choice
//int temp_counter = 0;
int index = 0;

optimal_x[counter] = x; //optimal path buffers
 800384a:	4f80      	ldr	r7, [pc, #512]	; (8003a4c <Calc_Optimal+0x218>)
optimal_y[counter] = y;
 800384c:	4c80      	ldr	r4, [pc, #512]	; (8003a50 <Calc_Optimal+0x21c>)

while(maze[x][y] != 0) {

	next_values[0] = 127;
 800384e:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
		case(0):
				optimal_path[counter] = RIGH;
				cur_dir = NORTH;
		break;
		case(1):
				optimal_path[counter] = LEF;
 8003852:	f04f 0c6c 	mov.w	ip, #108	; 0x6c
				cur_dir = SOUTH;
		break;
		case(2):
				optimal_path[counter] = FOR;
 8003856:	f04f 0866 	mov.w	r8, #102	; 0x66
 800385a:	9702      	str	r7, [sp, #8]
 800385c:	9403      	str	r4, [sp, #12]
int y = Y_START;

Floodfill(FALSE, FALSE, TRUE);  //floodfill from final value to start value

int val = maze[x][y]; //get start maze value
int next_values[4] = {-1, -1, -1, -1}; //array to hold the next values {up, down , left, right}
 800385e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003860:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
//int temp_index[3] = {-1,  -1,  -1}; //array to hold next values, if there's a choice
//int temp_counter = 0;
int index = 0;

optimal_x[counter] = x; //optimal path buffers
 8003864:	2300      	movs	r3, #0
optimal_y[counter] = y;
 8003866:	2204      	movs	r2, #4
 8003868:	487a      	ldr	r0, [pc, #488]	; (8003a54 <Calc_Optimal+0x220>)
const int E[2] = {1, 0};

int cur_dir = START_DIR; //start direction
int counter = 0; //counter for counting the number of squares

int x = X_START; //initialize cursor to start square
 800386a:	4619      	mov	r1, r3
const int S[2] = {0, 1};
const int W[2] = {-1, 0};
const int E[2] = {1, 0};

int cur_dir = START_DIR; //start direction
int counter = 0; //counter for counting the number of squares
 800386c:	461e      	mov	r6, r3
const int N[2] = {0, -1}; //directions in maze
const int S[2] = {0, 1};
const int W[2] = {-1, 0};
const int E[2] = {1, 0};

int cur_dir = START_DIR; //start direction
 800386e:	461d      	mov	r5, r3
int next_values[4] = {-1, -1, -1, -1}; //array to hold the next values {up, down , left, right}
//int temp_index[3] = {-1,  -1,  -1}; //array to hold next values, if there's a choice
//int temp_counter = 0;
int index = 0;

optimal_x[counter] = x; //optimal path buffers
 8003870:	603b      	str	r3, [r7, #0]
optimal_y[counter] = y;
 8003872:	6022      	str	r2, [r4, #0]

while(maze[x][y] != 0) {
 8003874:	ea4f 0981 	mov.w	r9, r1, lsl #2
 8003878:	4f77      	ldr	r7, [pc, #476]	; (8003a58 <Calc_Optimal+0x224>)
 800387a:	eb09 0401 	add.w	r4, r9, r1
 800387e:	9401      	str	r4, [sp, #4]
 8003880:	4414      	add	r4, r2
 8003882:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 8003886:	2c00      	cmp	r4, #0
 8003888:	f000 80a6 	beq.w	80039d8 <Calc_Optimal+0x1a4>
	next_values[2] = 127;
	next_values[3] = 127;

	val = maze[x][y];

	if (y > 0 && horiz_walls[x][y-1] != TRUE) { //if row is greater than zero
 800388c:	2a00      	cmp	r2, #0
optimal_x[counter] = x; //optimal path buffers
optimal_y[counter] = y;

while(maze[x][y] != 0) {

	next_values[0] = 127;
 800388e:	f8cd e010 	str.w	lr, [sp, #16]
	next_values[1] = 127;
 8003892:	f8cd e014 	str.w	lr, [sp, #20]
	next_values[2] = 127;
 8003896:	f8cd e018 	str.w	lr, [sp, #24]
	next_values[3] = 127;
 800389a:	f8cd e01c 	str.w	lr, [sp, #28]

	val = maze[x][y];

	if (y > 0 && horiz_walls[x][y-1] != TRUE) { //if row is greater than zero
 800389e:	dc12      	bgt.n	80038c6 <Calc_Optimal+0x92>
		next_values[0] = maze[x][y-1]; //up square
	}

	if (y < Y_MAZE_SIZE - 1 && horiz_walls[x][y] != TRUE) {
 80038a0:	ea4f 0981 	mov.w	r9, r1, lsl #2
 80038a4:	4f6d      	ldr	r7, [pc, #436]	; (8003a5c <Calc_Optimal+0x228>)
 80038a6:	eb07 0a09 	add.w	sl, r7, r9
 80038aa:	f81a a002 	ldrb.w	sl, [sl, r2]
 80038ae:	f1ba 0f01 	cmp.w	sl, #1
 80038b2:	d01a      	beq.n	80038ea <Calc_Optimal+0xb6>
		next_values[1] = maze[x][y+1]; //down square
 80038b4:	4489      	add	r9, r1
 80038b6:	f102 0a01 	add.w	sl, r2, #1
 80038ba:	4f67      	ldr	r7, [pc, #412]	; (8003a58 <Calc_Optimal+0x224>)
 80038bc:	44d1      	add	r9, sl
 80038be:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
 80038c2:	9705      	str	r7, [sp, #20]
 80038c4:	e011      	b.n	80038ea <Calc_Optimal+0xb6>
	next_values[2] = 127;
	next_values[3] = 127;

	val = maze[x][y];

	if (y > 0 && horiz_walls[x][y-1] != TRUE) { //if row is greater than zero
 80038c6:	4f65      	ldr	r7, [pc, #404]	; (8003a5c <Calc_Optimal+0x228>)
 80038c8:	f102 3aff 	add.w	sl, r2, #4294967295
 80038cc:	44b9      	add	r9, r7
 80038ce:	f819 900a 	ldrb.w	r9, [r9, sl]
 80038d2:	f1b9 0f01 	cmp.w	r9, #1
 80038d6:	d006      	beq.n	80038e6 <Calc_Optimal+0xb2>
		next_values[0] = maze[x][y-1]; //up square
 80038d8:	9f01      	ldr	r7, [sp, #4]
 80038da:	4457      	add	r7, sl
 80038dc:	46ba      	mov	sl, r7
 80038de:	4f5e      	ldr	r7, [pc, #376]	; (8003a58 <Calc_Optimal+0x224>)
 80038e0:	f857 702a 	ldr.w	r7, [r7, sl, lsl #2]
 80038e4:	9704      	str	r7, [sp, #16]
	}

	if (y < Y_MAZE_SIZE - 1 && horiz_walls[x][y] != TRUE) {
 80038e6:	2a03      	cmp	r2, #3
 80038e8:	ddda      	ble.n	80038a0 <Calc_Optimal+0x6c>
		next_values[1] = maze[x][y+1]; //down square
	}

	if (x > 0 && vert_walls[x - 1][y] != TRUE) {
 80038ea:	2900      	cmp	r1, #0
 80038ec:	dc12      	bgt.n	8003914 <Calc_Optimal+0xe0>
		next_values[2] = maze[x - 1][y]; //left square
	}

	if (x < X_MAZE_SIZE - 1 && vert_walls[x][y] != TRUE) {
 80038ee:	eb01 0981 	add.w	r9, r1, r1, lsl #2
 80038f2:	4f5b      	ldr	r7, [pc, #364]	; (8003a60 <Calc_Optimal+0x22c>)
 80038f4:	44b9      	add	r9, r7
 80038f6:	f819 9002 	ldrb.w	r9, [r9, r2]
 80038fa:	f1b9 0f01 	cmp.w	r9, #1
 80038fe:	d01c      	beq.n	800393a <Calc_Optimal+0x106>
		next_values[3] = maze[x+1][y]; //right square
 8003900:	f101 0901 	add.w	r9, r1, #1
 8003904:	4f54      	ldr	r7, [pc, #336]	; (8003a58 <Calc_Optimal+0x224>)
 8003906:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 800390a:	4491      	add	r9, r2
 800390c:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
 8003910:	9707      	str	r7, [sp, #28]
 8003912:	e012      	b.n	800393a <Calc_Optimal+0x106>

	if (y < Y_MAZE_SIZE - 1 && horiz_walls[x][y] != TRUE) {
		next_values[1] = maze[x][y+1]; //down square
	}

	if (x > 0 && vert_walls[x - 1][y] != TRUE) {
 8003914:	f101 39ff 	add.w	r9, r1, #4294967295
 8003918:	4f51      	ldr	r7, [pc, #324]	; (8003a60 <Calc_Optimal+0x22c>)
 800391a:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 800391e:	eb07 0a09 	add.w	sl, r7, r9
 8003922:	f81a a002 	ldrb.w	sl, [sl, r2]
 8003926:	f1ba 0f01 	cmp.w	sl, #1
		next_values[2] = maze[x - 1][y]; //left square
 800392a:	bf1f      	itttt	ne
 800392c:	4f4a      	ldrne	r7, [pc, #296]	; (8003a58 <Calc_Optimal+0x224>)
 800392e:	4491      	addne	r9, r2
 8003930:	f857 7029 	ldrne.w	r7, [r7, r9, lsl #2]
 8003934:	9706      	strne	r7, [sp, #24]
	}

	if (x < X_MAZE_SIZE - 1 && vert_walls[x][y] != TRUE) {
 8003936:	2903      	cmp	r1, #3
 8003938:	ddd9      	ble.n	80038ee <Calc_Optimal+0xba>
		next_values[3] = maze[x+1][y]; //right square
	}

	for (int i = 0; i < 4; i++) { //need to modify to favor straight lines
 800393a:	f04f 0900 	mov.w	r9, #0
		if (next_values[i] == val - 1) {
 800393e:	3c01      	subs	r4, #1
 8003940:	f85b 7029 	ldr.w	r7, [fp, r9, lsl #2]
 8003944:	42a7      	cmp	r7, r4
 8003946:	bf08      	it	eq
 8003948:	464b      	moveq	r3, r9

	if (x < X_MAZE_SIZE - 1 && vert_walls[x][y] != TRUE) {
		next_values[3] = maze[x+1][y]; //right square
	}

	for (int i = 0; i < 4; i++) { //need to modify to favor straight lines
 800394a:	f109 0901 	add.w	r9, r9, #1
 800394e:	f1b9 0f04 	cmp.w	r9, #4
 8003952:	d1f5      	bne.n	8003940 <Calc_Optimal+0x10c>
		}
		break;
	}
	*/

	switch (cur_dir) {
 8003954:	2d02      	cmp	r5, #2
 8003956:	d021      	beq.n	800399c <Calc_Optimal+0x168>
 8003958:	2d03      	cmp	r5, #3
 800395a:	d02e      	beq.n	80039ba <Calc_Optimal+0x186>
 800395c:	2d01      	cmp	r5, #1
 800395e:	d00e      	beq.n	800397e <Calc_Optimal+0x14a>

	case NORTH:
		switch(index) {
 8003960:	2b02      	cmp	r3, #2
 8003962:	d006      	beq.n	8003972 <Calc_Optimal+0x13e>
 8003964:	2b03      	cmp	r3, #3
 8003966:	d007      	beq.n	8003978 <Calc_Optimal+0x144>
 8003968:	2b00      	cmp	r3, #0
 800396a:	d158      	bne.n	8003a1e <Calc_Optimal+0x1ea>
		case(0):
			optimal_path[counter] = FOR;
 800396c:	f880 8000 	strb.w	r8, [r0]
		break;
 8003970:	e055      	b.n	8003a1e <Calc_Optimal+0x1ea>
		case(1):
		//NO
		break;
		case(2):
			optimal_path[counter] = LEF;
 8003972:	f880 c000 	strb.w	ip, [r0]
			cur_dir = WEST;
		break;
 8003976:	e060      	b.n	8003a3a <Calc_Optimal+0x206>
		case(3):
				optimal_path[counter] = RIGH;
 8003978:	2472      	movs	r4, #114	; 0x72
 800397a:	7004      	strb	r4, [r0, #0]
				cur_dir = EAST;
		break;
 800397c:	e060      	b.n	8003a40 <Calc_Optimal+0x20c>
		}
	break;

	case SOUTH:
		switch(index) {
 800397e:	2b02      	cmp	r3, #2
 8003980:	d006      	beq.n	8003990 <Calc_Optimal+0x15c>
 8003982:	2b03      	cmp	r3, #3
 8003984:	d007      	beq.n	8003996 <Calc_Optimal+0x162>
 8003986:	2b01      	cmp	r3, #1
 8003988:	d154      	bne.n	8003a34 <Calc_Optimal+0x200>
		case(0):
				//NO
		break;
		case(1):
				optimal_path[counter] = FOR;
 800398a:	f880 8000 	strb.w	r8, [r0]
		break;
 800398e:	e051      	b.n	8003a34 <Calc_Optimal+0x200>
		case(2):
				optimal_path[counter] = RIGH;
 8003990:	2472      	movs	r4, #114	; 0x72
 8003992:	7004      	strb	r4, [r0, #0]
				cur_dir = WEST;
		break;
 8003994:	e051      	b.n	8003a3a <Calc_Optimal+0x206>
		case(3):
				optimal_path[counter] = LEF;
 8003996:	f880 c000 	strb.w	ip, [r0]
				cur_dir = EAST;
		break;
 800399a:	e051      	b.n	8003a40 <Calc_Optimal+0x20c>
		}
	break;

	case WEST:
		switch(index) {
 800399c:	2b01      	cmp	r3, #1
 800399e:	d006      	beq.n	80039ae <Calc_Optimal+0x17a>
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d007      	beq.n	80039b4 <Calc_Optimal+0x180>
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d148      	bne.n	8003a3a <Calc_Optimal+0x206>
		case(0):
				optimal_path[counter] = RIGH;
 80039a8:	2472      	movs	r4, #114	; 0x72
 80039aa:	7004      	strb	r4, [r0, #0]
				cur_dir = NORTH;
		break;
 80039ac:	e037      	b.n	8003a1e <Calc_Optimal+0x1ea>
		case(1):
				optimal_path[counter] = LEF;
 80039ae:	f880 c000 	strb.w	ip, [r0]
				cur_dir = SOUTH;
		break;
 80039b2:	e03f      	b.n	8003a34 <Calc_Optimal+0x200>
		case(2):
				optimal_path[counter] = FOR;
 80039b4:	f880 8000 	strb.w	r8, [r0]
		break;
 80039b8:	e03f      	b.n	8003a3a <Calc_Optimal+0x206>
		break;
		}
	break;

	case EAST:
		switch(index) {
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d006      	beq.n	80039cc <Calc_Optimal+0x198>
 80039be:	2b03      	cmp	r3, #3
 80039c0:	d007      	beq.n	80039d2 <Calc_Optimal+0x19e>
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d13c      	bne.n	8003a40 <Calc_Optimal+0x20c>
		case(0):
				optimal_path[counter] = LEF;
 80039c6:	f880 c000 	strb.w	ip, [r0]
				cur_dir = NORTH;
		break;
 80039ca:	e028      	b.n	8003a1e <Calc_Optimal+0x1ea>
		case(1):
				optimal_path[counter] = RIGH;
 80039cc:	2472      	movs	r4, #114	; 0x72
 80039ce:	7004      	strb	r4, [r0, #0]
				cur_dir = SOUTH;
		break;
 80039d0:	e030      	b.n	8003a34 <Calc_Optimal+0x200>
		case(2):
				//NO
		break;
		case(3):
				optimal_path[counter] = FOR;
 80039d2:	f880 8000 	strb.w	r8, [r0]
		break;
 80039d6:	e033      	b.n	8003a40 <Calc_Optimal+0x20c>
optimal_y[counter] = y;

}

optimal_count = counter; //DEBUG
optimal_path[counter] = 's';
 80039d8:	2373      	movs	r3, #115	; 0x73
 80039da:	4a1e      	ldr	r2, [pc, #120]	; (8003a54 <Calc_Optimal+0x220>)
optimal_x[counter] = x;
optimal_y[counter] = y;

}

optimal_count = counter; //DEBUG
 80039dc:	4d21      	ldr	r5, [pc, #132]	; (8003a64 <Calc_Optimal+0x230>)
optimal_path[counter] = 's';

#if DEBUG == TRUE
Transmit("Optimal Path: ");
 80039de:	4822      	ldr	r0, [pc, #136]	; (8003a68 <Calc_Optimal+0x234>)
optimal_x[counter] = x;
optimal_y[counter] = y;

}

optimal_count = counter; //DEBUG
 80039e0:	602e      	str	r6, [r5, #0]
optimal_path[counter] = 's';
 80039e2:	5593      	strb	r3, [r2, r6]

#if DEBUG == TRUE
Transmit("Optimal Path: ");
 80039e4:	f7ff fb54 	bl	8003090 <Transmit>
Transmit(optimal_path);
 80039e8:	481a      	ldr	r0, [pc, #104]	; (8003a54 <Calc_Optimal+0x220>)
 80039ea:	f7ff fb51 	bl	8003090 <Transmit>
for (int i = 0; i <= optimal_count; i++) {
 80039ee:	682b      	ldr	r3, [r5, #0]
 80039f0:	429c      	cmp	r4, r3
 80039f2:	d80e      	bhi.n	8003a12 <Calc_Optimal+0x1de>
	sprintf(tx_buffer, "(%d, %d) \r\n", optimal_x[i], optimal_y[i]);
 80039f4:	9b03      	ldr	r3, [sp, #12]
 80039f6:	9a02      	ldr	r2, [sp, #8]
 80039f8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80039fc:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
optimal_path[counter] = 's';

#if DEBUG == TRUE
Transmit("Optimal Path: ");
Transmit(optimal_path);
for (int i = 0; i <= optimal_count; i++) {
 8003a00:	3401      	adds	r4, #1
	sprintf(tx_buffer, "(%d, %d) \r\n", optimal_x[i], optimal_y[i]);
 8003a02:	491a      	ldr	r1, [pc, #104]	; (8003a6c <Calc_Optimal+0x238>)
 8003a04:	481a      	ldr	r0, [pc, #104]	; (8003a70 <Calc_Optimal+0x23c>)
 8003a06:	f002 fdb3 	bl	8006570 <siprintf>
	Transmit(tx_buffer);
 8003a0a:	4819      	ldr	r0, [pc, #100]	; (8003a70 <Calc_Optimal+0x23c>)
 8003a0c:	f7ff fb40 	bl	8003090 <Transmit>
 8003a10:	e7ed      	b.n	80039ee <Calc_Optimal+0x1ba>
}
Transmit("\r\n");
 8003a12:	4818      	ldr	r0, [pc, #96]	; (8003a74 <Calc_Optimal+0x240>)
#endif

}
 8003a14:	b009      	add	sp, #36	; 0x24
 8003a16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
Transmit(optimal_path);
for (int i = 0; i <= optimal_count; i++) {
	sprintf(tx_buffer, "(%d, %d) \r\n", optimal_x[i], optimal_y[i]);
	Transmit(tx_buffer);
}
Transmit("\r\n");
 8003a1a:	f7ff bb39 	b.w	8003090 <Transmit>
	}

	switch (cur_dir) { //update the cursor
	case NORTH:
		x = x + N[0];
		y = y + N[1];
 8003a1e:	3a01      	subs	r2, #1
	break;
 8003a20:	2500      	movs	r5, #0
	case EAST:
		x = x + E[0];
		y = y + E[1];
	break;
	}
counter++;
 8003a22:	3601      	adds	r6, #1
//temp_counter = 0;
//temp_index[0] = -1; temp_index[1] = -1; temp_index[2] = -1;
optimal_x[counter] = x;
 8003a24:	9c02      	ldr	r4, [sp, #8]
 8003a26:	3001      	adds	r0, #1
 8003a28:	f844 1026 	str.w	r1, [r4, r6, lsl #2]
optimal_y[counter] = y;
 8003a2c:	9c03      	ldr	r4, [sp, #12]
 8003a2e:	f844 2026 	str.w	r2, [r4, r6, lsl #2]
 8003a32:	e71f      	b.n	8003874 <Calc_Optimal+0x40>
		x = x + N[0];
		y = y + N[1];
	break;
	case SOUTH:
		x = x + S[0];
		y = y + S[1];
 8003a34:	3201      	adds	r2, #1
	break;
 8003a36:	2501      	movs	r5, #1
 8003a38:	e7f3      	b.n	8003a22 <Calc_Optimal+0x1ee>
	case WEST:
		x = x + W[0];
 8003a3a:	3901      	subs	r1, #1
		y = y + W[1];
	break;
 8003a3c:	2502      	movs	r5, #2
 8003a3e:	e7f0      	b.n	8003a22 <Calc_Optimal+0x1ee>
	case EAST:
		x = x + E[0];
 8003a40:	3101      	adds	r1, #1
		y = y + E[1];
	break;
 8003a42:	2503      	movs	r5, #3
 8003a44:	e7ed      	b.n	8003a22 <Calc_Optimal+0x1ee>
 8003a46:	bf00      	nop
 8003a48:	08006e0c 	.word	0x08006e0c
 8003a4c:	20002d04 	.word	0x20002d04
 8003a50:	2000260c 	.word	0x2000260c
 8003a54:	200032d0 	.word	0x200032d0
 8003a58:	200025a8 	.word	0x200025a8
 8003a5c:	200008dc 	.word	0x200008dc
 8003a60:	20000b20 	.word	0x20000b20
 8003a64:	20001318 	.word	0x20001318
 8003a68:	08007214 	.word	0x08007214
 8003a6c:	08007223 	.word	0x08007223
 8003a70:	20002b84 	.word	0x20002b84
 8003a74:	080070ea 	.word	0x080070ea

08003a78 <Mark_Center>:
#endif

}

void Mark_Center() { //mark the center of the maze as visited
	visited_squares[X_FINAL][Y_FINAL] = TRUE;
 8003a78:	2201      	movs	r2, #1
 8003a7a:	4b03      	ldr	r3, [pc, #12]	; (8003a88 <Mark_Center+0x10>)
 8003a7c:	631a      	str	r2, [r3, #48]	; 0x30
	final_dir = cur_dir;
 8003a7e:	4b03      	ldr	r3, [pc, #12]	; (8003a8c <Mark_Center+0x14>)
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	4b03      	ldr	r3, [pc, #12]	; (8003a90 <Mark_Center+0x18>)
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	4770      	bx	lr
 8003a88:	200031f4 	.word	0x200031f4
 8003a8c:	20001b08 	.word	0x20001b08
 8003a90:	20000ac8 	.word	0x20000ac8

08003a94 <Fill_Center>:

}

void Fill_Center() { //fill the center walls. run after getting to center

	final_x = x_coord;
 8003a94:	4b04      	ldr	r3, [pc, #16]	; (8003aa8 <Fill_Center+0x14>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	4b04      	ldr	r3, [pc, #16]	; (8003aac <Fill_Center+0x18>)
 8003a9a:	601a      	str	r2, [r3, #0]
	final_y = y_coord;
 8003a9c:	4b04      	ldr	r3, [pc, #16]	; (8003ab0 <Fill_Center+0x1c>)
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	4b04      	ldr	r3, [pc, #16]	; (8003ab4 <Fill_Center+0x20>)
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	20000ab8 	.word	0x20000ab8
 8003aac:	20000940 	.word	0x20000940
 8003ab0:	20000010 	.word	0x20000010
 8003ab4:	20000944 	.word	0x20000944

08003ab8 <Get_Coordinate>:
	}
#endif
}

void Get_Coordinate() { //gets next coordinate to visit
	coordinate_count = 0;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	4a11      	ldr	r2, [pc, #68]	; (8003b00 <Get_Coordinate+0x48>)
	break;
	}
#endif
}

void Get_Coordinate() { //gets next coordinate to visit
 8003abc:	b4f0      	push	{r4, r5, r6, r7}
	coordinate_count = 0;
 8003abe:	6013      	str	r3, [r2, #0]
	for (int i = optimal_count; i > 0; i--) {
 8003ac0:	4b10      	ldr	r3, [pc, #64]	; (8003b04 <Get_Coordinate+0x4c>)

		if (visited_squares[optimal_x[i]][optimal_y[i]] == FALSE) {
 8003ac2:	4d11      	ldr	r5, [pc, #68]	; (8003b08 <Get_Coordinate+0x50>)
#endif
}

void Get_Coordinate() { //gets next coordinate to visit
	coordinate_count = 0;
	for (int i = optimal_count; i > 0; i--) {
 8003ac4:	681b      	ldr	r3, [r3, #0]

		if (visited_squares[optimal_x[i]][optimal_y[i]] == FALSE) {
 8003ac6:	4e11      	ldr	r6, [pc, #68]	; (8003b0c <Get_Coordinate+0x54>)
 8003ac8:	4f11      	ldr	r7, [pc, #68]	; (8003b10 <Get_Coordinate+0x58>)
#endif
}

void Get_Coordinate() { //gets next coordinate to visit
	coordinate_count = 0;
	for (int i = optimal_count; i > 0; i--) {
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	dd13      	ble.n	8003af6 <Get_Coordinate+0x3e>

		if (visited_squares[optimal_x[i]][optimal_y[i]] == FALSE) {
 8003ace:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8003ad2:	f856 4023 	ldr.w	r4, [r6, r3, lsl #2]
 8003ad6:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8003ada:	4420      	add	r0, r4
 8003adc:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8003ae0:	b938      	cbnz	r0, 8003af2 <Get_Coordinate+0x3a>
			search_x = optimal_x[i];
 8003ae2:	4b0c      	ldr	r3, [pc, #48]	; (8003b14 <Get_Coordinate+0x5c>)
 8003ae4:	6019      	str	r1, [r3, #0]
			search_y = optimal_y[i];
 8003ae6:	4b0c      	ldr	r3, [pc, #48]	; (8003b18 <Get_Coordinate+0x60>)
 8003ae8:	601c      	str	r4, [r3, #0]
			coordinate_count++;
 8003aea:	2301      	movs	r3, #1
		}
	}
#if DEBUG == TRUE
	Transmit("All coordinates on optimal path found! \r\n");
#endif
}
 8003aec:	bcf0      	pop	{r4, r5, r6, r7}
	for (int i = optimal_count; i > 0; i--) {

		if (visited_squares[optimal_x[i]][optimal_y[i]] == FALSE) {
			search_x = optimal_x[i];
			search_y = optimal_y[i];
			coordinate_count++;
 8003aee:	6013      	str	r3, [r2, #0]
		}
	}
#if DEBUG == TRUE
	Transmit("All coordinates on optimal path found! \r\n");
#endif
}
 8003af0:	4770      	bx	lr
#endif
}

void Get_Coordinate() { //gets next coordinate to visit
	coordinate_count = 0;
	for (int i = optimal_count; i > 0; i--) {
 8003af2:	3b01      	subs	r3, #1
 8003af4:	e7e9      	b.n	8003aca <Get_Coordinate+0x12>
#endif
			return;
		}
	}
#if DEBUG == TRUE
	Transmit("All coordinates on optimal path found! \r\n");
 8003af6:	4809      	ldr	r0, [pc, #36]	; (8003b1c <Get_Coordinate+0x64>)
#endif
}
 8003af8:	bcf0      	pop	{r4, r5, r6, r7}
#endif
			return;
		}
	}
#if DEBUG == TRUE
	Transmit("All coordinates on optimal path found! \r\n");
 8003afa:	f7ff bac9 	b.w	8003090 <Transmit>
 8003afe:	bf00      	nop
 8003b00:	20002420 	.word	0x20002420
 8003b04:	20001318 	.word	0x20001318
 8003b08:	20002d04 	.word	0x20002d04
 8003b0c:	2000260c 	.word	0x2000260c
 8003b10:	200031f4 	.word	0x200031f4
 8003b14:	20002560 	.word	0x20002560
 8003b18:	20002564 	.word	0x20002564
 8003b1c:	0800722f 	.word	0x0800722f

08003b20 <Fast_Straights>:
char command; //command to be processed
int counter = 0; //counter to cycle through generated path
int new_count = 0; //counter to cycle through NEW generated path
int fwd_count = 0; //count how many straights there are in a row
int right_count = 0; //count how many right turns there are in a row
int left_count = 0; //count left turns
 8003b20:	2200      	movs	r2, #0
char cmd_buff = FOR; //command buffer for appending to new path
 8003b22:	2066      	movs	r0, #102	; 0x66
		if (command == LEF) {
			switch(left_count) {
			case(0):
				left_count++;
				if (right_count > 0) {
					fast_path[new_count] = R90;
 8003b24:	f04f 0c72 	mov.w	ip, #114	; 0x72

char command; //command to be processed
int counter = 0; //counter to cycle through generated path
int new_count = 0; //counter to cycle through NEW generated path
int fwd_count = 0; //count how many straights there are in a row
int right_count = 0; //count how many right turns there are in a row
 8003b28:	4611      	mov	r1, r2

void Fast_Straights() { //function to create state machine for quick straightawyas

char command; //command to be processed
int counter = 0; //counter to cycle through generated path
int new_count = 0; //counter to cycle through NEW generated path
 8003b2a:	4613      	mov	r3, r2
#if DEBUG == TRUE
	Transmit("All coordinates on optimal path found! \r\n");
#endif
}

void Fast_Straights() { //function to create state machine for quick straightawyas
 8003b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b30:	4f43      	ldr	r7, [pc, #268]	; (8003c40 <Fast_Straights+0x120>)

char command; //command to be processed
int counter = 0; //counter to cycle through generated path
int new_count = 0; //counter to cycle through NEW generated path
int fwd_count = 0; //count how many straights there are in a row
 8003b32:	4614      	mov	r4, r2
			switch(right_count) {
			case(0):
				right_count++;
				if (left_count > 0) {

					fast_path[new_count] = L90;
 8003b34:	4d43      	ldr	r5, [pc, #268]	; (8003c44 <Fast_Straights+0x124>)
 8003b36:	f04f 0e6c 	mov.w	lr, #108	; 0x6c
					left_count = 0;
					new_count++;
				}
			break;
			case(1):
					fast_path[new_count] = R180;
 8003b3a:	f04f 0875 	mov.w	r8, #117	; 0x75
					right_count = 0;
					new_count++;
				}
			break;
			case(1):
				fast_path[new_count] = L180;
 8003b3e:	f04f 0974 	mov.w	r9, #116	; 0x74
int right_count = 0; //count how many right turns there are in a row
int left_count = 0; //count left turns
char cmd_buff = FOR; //command buffer for appending to new path

do {
	command = optimal_path[counter]; //read command
 8003b42:	f817 6f01 	ldrb.w	r6, [r7, #1]!
	if (command == FOR) { //forward
 8003b46:	2e66      	cmp	r6, #102	; 0x66
 8003b48:	d10c      	bne.n	8003b64 <Fast_Straights+0x44>
		fwd_count++; //increase count
 8003b4a:	3401      	adds	r4, #1

		if (right_count > 0) { //if previous was left or right, then this is the first fwd
 8003b4c:	b121      	cbz	r1, 8003b58 <Fast_Straights+0x38>
			fast_path[new_count] = R90; //previous was right
 8003b4e:	f805 c003 	strb.w	ip, [r5, r3]
			right_count = 0;
 8003b52:	2100      	movs	r1, #0
			new_count++;
 8003b54:	3301      	adds	r3, #1
 8003b56:	e7f4      	b.n	8003b42 <Fast_Straights+0x22>
		}
		else if (left_count > 0) {
 8003b58:	2a01      	cmp	r2, #1
 8003b5a:	d169      	bne.n	8003c30 <Fast_Straights+0x110>
			fast_path[new_count] = L90; //previous was left
 8003b5c:	f805 e003 	strb.w	lr, [r5, r3]
			left_count = 0;
			new_count++;
 8003b60:	3301      	adds	r3, #1
 8003b62:	e065      	b.n	8003c30 <Fast_Straights+0x110>
		}
	}
	else {
		if (fwd_count > 0) { //check to see if there was fwd count
 8003b64:	b35c      	cbz	r4, 8003bbe <Fast_Straights+0x9e>
			switch(fwd_count) {
 8003b66:	3c01      	subs	r4, #1
 8003b68:	2c0e      	cmp	r4, #14
 8003b6a:	d826      	bhi.n	8003bba <Fast_Straights+0x9a>
 8003b6c:	e8df f004 	tbb	[pc, r4]
 8003b70:	0e0c0a08 	.word	0x0e0c0a08
 8003b74:	16141210 	.word	0x16141210
 8003b78:	1e1c1a18 	.word	0x1e1c1a18
 8003b7c:	2220      	.short	0x2220
 8003b7e:	24          	.byte	0x24
 8003b7f:	00          	.byte	0x00
			case 1: cmd_buff = FWD1; break;
 8003b80:	2062      	movs	r0, #98	; 0x62
 8003b82:	e01a      	b.n	8003bba <Fast_Straights+0x9a>
			case 2:	cmd_buff = FWD2; break;
 8003b84:	2063      	movs	r0, #99	; 0x63
 8003b86:	e018      	b.n	8003bba <Fast_Straights+0x9a>
			case 3: cmd_buff = FWD3; break;
 8003b88:	2064      	movs	r0, #100	; 0x64
 8003b8a:	e016      	b.n	8003bba <Fast_Straights+0x9a>
			case 4: cmd_buff = FWD4; break;
 8003b8c:	2065      	movs	r0, #101	; 0x65
 8003b8e:	e014      	b.n	8003bba <Fast_Straights+0x9a>
			case 5: cmd_buff = FWD5; break;
 8003b90:	2076      	movs	r0, #118	; 0x76
 8003b92:	e012      	b.n	8003bba <Fast_Straights+0x9a>
			case 6:	cmd_buff = FWD6; break;
 8003b94:	2067      	movs	r0, #103	; 0x67
 8003b96:	e010      	b.n	8003bba <Fast_Straights+0x9a>
			case 7:	cmd_buff = FWD7; break;
 8003b98:	2068      	movs	r0, #104	; 0x68
 8003b9a:	e00e      	b.n	8003bba <Fast_Straights+0x9a>
			case 8: cmd_buff = FWD8; break;
 8003b9c:	2069      	movs	r0, #105	; 0x69
 8003b9e:	e00c      	b.n	8003bba <Fast_Straights+0x9a>
			case 9:	cmd_buff = FWD9; break;
 8003ba0:	206a      	movs	r0, #106	; 0x6a
 8003ba2:	e00a      	b.n	8003bba <Fast_Straights+0x9a>
			case 10: cmd_buff = FWD10; break;
 8003ba4:	206b      	movs	r0, #107	; 0x6b
 8003ba6:	e008      	b.n	8003bba <Fast_Straights+0x9a>
			case 11: cmd_buff = FWD11; break;
 8003ba8:	206d      	movs	r0, #109	; 0x6d
 8003baa:	e006      	b.n	8003bba <Fast_Straights+0x9a>
			case 12: cmd_buff = FWD12; break;
 8003bac:	206e      	movs	r0, #110	; 0x6e
 8003bae:	e004      	b.n	8003bba <Fast_Straights+0x9a>
			case 13: cmd_buff = FWD13; break;
 8003bb0:	206f      	movs	r0, #111	; 0x6f
 8003bb2:	e002      	b.n	8003bba <Fast_Straights+0x9a>
			case 14: cmd_buff = FWD14; break;
 8003bb4:	2070      	movs	r0, #112	; 0x70
 8003bb6:	e000      	b.n	8003bba <Fast_Straights+0x9a>
			case 15: cmd_buff = FWD15; break;
 8003bb8:	2071      	movs	r0, #113	; 0x71
			}
			fast_path[new_count] = cmd_buff;
 8003bba:	54e8      	strb	r0, [r5, r3]
			fwd_count = 0;
			new_count++;
 8003bbc:	3301      	adds	r3, #1

		}
		if (command == LEF) {
 8003bbe:	2e6c      	cmp	r6, #108	; 0x6c
 8003bc0:	d10d      	bne.n	8003bde <Fast_Straights+0xbe>
			switch(left_count) {
 8003bc2:	2a01      	cmp	r2, #1
 8003bc4:	d005      	beq.n	8003bd2 <Fast_Straights+0xb2>
			case(0):
				left_count++;
				if (right_count > 0) {
 8003bc6:	b3a9      	cbz	r1, 8003c34 <Fast_Straights+0x114>
					fast_path[new_count] = R90;
 8003bc8:	f805 c003 	strb.w	ip, [r5, r3]

		}
		if (command == LEF) {
			switch(left_count) {
			case(0):
				left_count++;
 8003bcc:	2201      	movs	r2, #1
				if (right_count > 0) {
					fast_path[new_count] = R90;
					right_count = 0;
					new_count++;
 8003bce:	3301      	adds	r3, #1
 8003bd0:	e014      	b.n	8003bfc <Fast_Straights+0xdc>
				}
			break;
			case(1):
				fast_path[new_count] = L180;
 8003bd2:	f805 9003 	strb.w	r9, [r5, r3]
				left_count = 0;
 8003bd6:	2200      	movs	r2, #0
				new_count++;
 8003bd8:	3301      	adds	r3, #1
 8003bda:	2400      	movs	r4, #0
 8003bdc:	e7b1      	b.n	8003b42 <Fast_Straights+0x22>
				break;
			}
		}
		else if (command == RIGH) {
 8003bde:	2e72      	cmp	r6, #114	; 0x72
 8003be0:	d10e      	bne.n	8003c00 <Fast_Straights+0xe0>
			switch(right_count) {
 8003be2:	b129      	cbz	r1, 8003bf0 <Fast_Straights+0xd0>
 8003be4:	2900      	cmp	r1, #0
 8003be6:	d0f8      	beq.n	8003bda <Fast_Straights+0xba>
					left_count = 0;
					new_count++;
				}
			break;
			case(1):
					fast_path[new_count] = R180;
 8003be8:	f805 8003 	strb.w	r8, [r5, r3]
					right_count = 0;
					new_count++;
 8003bec:	3301      	adds	r3, #1
 8003bee:	e005      	b.n	8003bfc <Fast_Straights+0xdc>
		}
		else if (command == RIGH) {
			switch(right_count) {
			case(0):
				right_count++;
				if (left_count > 0) {
 8003bf0:	2a01      	cmp	r2, #1
 8003bf2:	d121      	bne.n	8003c38 <Fast_Straights+0x118>

					fast_path[new_count] = L90;
 8003bf4:	f805 e003 	strb.w	lr, [r5, r3]
					left_count = 0;
					new_count++;
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	e01d      	b.n	8003c38 <Fast_Straights+0x118>
				}
			break;
			case(1):
					fast_path[new_count] = R180;
					right_count = 0;
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	e7ec      	b.n	8003bda <Fast_Straights+0xba>
			}
		}
	fwd_count = 0;
	}
counter++;
} while (command != STOP);
 8003c00:	2e73      	cmp	r6, #115	; 0x73
 8003c02:	d1ea      	bne.n	8003bda <Fast_Straights+0xba>
 8003c04:	480f      	ldr	r0, [pc, #60]	; (8003c44 <Fast_Straights+0x124>)


if (right_count > 0) {
 8003c06:	b109      	cbz	r1, 8003c0c <Fast_Straights+0xec>
	cmd_buff = R90;
	fast_path[new_count] = cmd_buff;
 8003c08:	2272      	movs	r2, #114	; 0x72
 8003c0a:	e002      	b.n	8003c12 <Fast_Straights+0xf2>
}

else if (left_count > 0) {
 8003c0c:	2a01      	cmp	r2, #1
 8003c0e:	d101      	bne.n	8003c14 <Fast_Straights+0xf4>
	cmd_buff = L90;
	fast_path[new_count] = cmd_buff;
 8003c10:	226c      	movs	r2, #108	; 0x6c
 8003c12:	54c2      	strb	r2, [r0, r3]
	case 15: cmd_buff = FWD15; break;
	fast_path[new_count] = cmd_buff;
	}
}

fast_path[new_count+1] = STOP;
 8003c14:	4403      	add	r3, r0
 8003c16:	2273      	movs	r2, #115	; 0x73

#if DEBUG == TRUE
Transmit("Fast Path: ");
 8003c18:	480b      	ldr	r0, [pc, #44]	; (8003c48 <Fast_Straights+0x128>)
	case 15: cmd_buff = FWD15; break;
	fast_path[new_count] = cmd_buff;
	}
}

fast_path[new_count+1] = STOP;
 8003c1a:	705a      	strb	r2, [r3, #1]

#if DEBUG == TRUE
Transmit("Fast Path: ");
 8003c1c:	f7ff fa38 	bl	8003090 <Transmit>
Transmit(fast_path);
 8003c20:	4808      	ldr	r0, [pc, #32]	; (8003c44 <Fast_Straights+0x124>)
 8003c22:	f7ff fa35 	bl	8003090 <Transmit>
Transmit("\r\n");
 8003c26:	4809      	ldr	r0, [pc, #36]	; (8003c4c <Fast_Straights+0x12c>)
#endif
}
 8003c28:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
fast_path[new_count+1] = STOP;

#if DEBUG == TRUE
Transmit("Fast Path: ");
Transmit(fast_path);
Transmit("\r\n");
 8003c2c:	f7ff ba30 	b.w	8003090 <Transmit>
 8003c30:	460a      	mov	r2, r1
 8003c32:	e786      	b.n	8003b42 <Fast_Straights+0x22>

		}
		if (command == LEF) {
			switch(left_count) {
			case(0):
				left_count++;
 8003c34:	2201      	movs	r2, #1
 8003c36:	e7d0      	b.n	8003bda <Fast_Straights+0xba>
 8003c38:	460a      	mov	r2, r1
			}
		}
		else if (command == RIGH) {
			switch(right_count) {
			case(0):
				right_count++;
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	e7cd      	b.n	8003bda <Fast_Straights+0xba>
 8003c3e:	bf00      	nop
 8003c40:	200032cf 	.word	0x200032cf
 8003c44:	200024b4 	.word	0x200024b4
 8003c48:	08007259 	.word	0x08007259
 8003c4c:	080070ea 	.word	0x080070ea

08003c50 <Turn_On_Lights>:
}

return next;
}

void Turn_On_Lights() { //turn on the top lights
 8003c50:	b510      	push	{r4, lr}

	HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, ON);
 8003c52:	4c1a      	ldr	r4, [pc, #104]	; (8003cbc <Turn_On_Lights+0x6c>)
 8003c54:	2201      	movs	r2, #1
 8003c56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003c5a:	4620      	mov	r0, r4
 8003c5c:	f7fd fab0 	bl	80011c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, ON);
 8003c60:	4620      	mov	r0, r4
 8003c62:	2201      	movs	r2, #1
 8003c64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c68:	f7fd faaa 	bl	80011c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, ON);
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c74:	f7fd faa4 	bl	80011c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, ON);
 8003c78:	2201      	movs	r2, #1
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, ON);
 8003c7a:	f5a4 6480 	sub.w	r4, r4, #1024	; 0x400
void Turn_On_Lights() { //turn on the top lights

	HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, ON);
	HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, ON);
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, ON);
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, ON);
 8003c7e:	4810      	ldr	r0, [pc, #64]	; (8003cc0 <Turn_On_Lights+0x70>)
 8003c80:	4611      	mov	r1, r2
 8003c82:	f7fd fa9d 	bl	80011c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, ON);
 8003c86:	4620      	mov	r0, r4
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c8e:	f7fd fa97 	bl	80011c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, ON);
 8003c92:	4620      	mov	r0, r4
 8003c94:	2201      	movs	r2, #1
 8003c96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c9a:	f7fd fa91 	bl	80011c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, ON);
 8003c9e:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	4620      	mov	r0, r4
 8003ca6:	4611      	mov	r1, r2
 8003ca8:	f7fd fa8a 	bl	80011c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, ON);
 8003cac:	4620      	mov	r0, r4
 8003cae:	2201      	movs	r2, #1
 8003cb0:	2102      	movs	r1, #2
}
 8003cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, ON);
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, ON);
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, ON);
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, ON);
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, ON);
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, ON);
 8003cb6:	f7fd ba83 	b.w	80011c0 <HAL_GPIO_WritePin>
 8003cba:	bf00      	nop
 8003cbc:	40020800 	.word	0x40020800
 8003cc0:	40020c00 	.word	0x40020c00

08003cc4 <Turn_Off_Lights>:
}

void Turn_Off_Lights() { //turn off the top lights
 8003cc4:	b510      	push	{r4, lr}

	HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, OFF);
 8003cc6:	4c1a      	ldr	r4, [pc, #104]	; (8003d30 <Turn_Off_Lights+0x6c>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003cce:	4620      	mov	r0, r4
 8003cd0:	f7fd fa76 	bl	80011c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, OFF);
 8003cd4:	4620      	mov	r0, r4
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003cdc:	f7fd fa70 	bl	80011c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, OFF);
 8003ce0:	4620      	mov	r0, r4
 8003ce2:	2200      	movs	r2, #0
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, OFF);
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, OFF);
 8003ce4:	f5a4 6480 	sub.w	r4, r4, #1024	; 0x400

void Turn_Off_Lights() { //turn off the top lights

	HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, OFF);
	HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, OFF);
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, OFF);
 8003ce8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003cec:	f7fd fa68 	bl	80011c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, OFF);
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	480f      	ldr	r0, [pc, #60]	; (8003d34 <Turn_Off_Lights+0x70>)
 8003cf6:	f7fd fa63 	bl	80011c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, OFF);
 8003cfa:	4620      	mov	r0, r4
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d02:	f7fd fa5d 	bl	80011c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, OFF);
 8003d06:	4620      	mov	r0, r4
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, OFF);
 8003d08:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
	HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, OFF);
	HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, OFF);
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, OFF);
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, OFF);
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, OFF);
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, OFF);
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d12:	f7fd fa55 	bl	80011c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, OFF);
 8003d16:	4620      	mov	r0, r4
 8003d18:	2200      	movs	r2, #0
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	f7fd fa50 	bl	80011c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8003d20:	4620      	mov	r0, r4
 8003d22:	2200      	movs	r2, #0
 8003d24:	2102      	movs	r1, #2

}
 8003d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, OFF);
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, OFF);
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, OFF);
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, OFF);
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, OFF);
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8003d2a:	f7fd ba49 	b.w	80011c0 <HAL_GPIO_WritePin>
 8003d2e:	bf00      	nop
 8003d30:	40020800 	.word	0x40020800
 8003d34:	40020c00 	.word	0x40020c00

08003d38 <Get_Next_Move>:
	}

	return count;
}

int Get_Next_Move() { //floodfill get next move
 8003d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 //index of lowest move
int next = FWD;
int min = 0;
int values[5] = {127, 127, 127, 127, 127};

if (y_coord > 0 && horiz_walls[x_coord][y_coord-1] != TRUE) { //if row is greater than zero
 8003d3c:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8003eb4 <Get_Next_Move+0x17c>
	}

	return count;
}

int Get_Next_Move() { //floodfill get next move
 8003d40:	b086      	sub	sp, #24
 8003d42:	4d55      	ldr	r5, [pc, #340]	; (8003e98 <Get_Next_Move+0x160>)
int next = FWD;
int min = 0;
int values[5] = {127, 127, 127, 127, 127};

if (y_coord > 0 && horiz_walls[x_coord][y_coord-1] != TRUE) { //if row is greater than zero
	values[1] = maze[x_coord][y_coord-1]; //up square
 8003d44:	4c55      	ldr	r4, [pc, #340]	; (8003e9c <Get_Next_Move+0x164>)


 //index of lowest move
int next = FWD;
int min = 0;
int values[5] = {127, 127, 127, 127, 127};
 8003d46:	f8df e170 	ldr.w	lr, [pc, #368]	; 8003eb8 <Get_Next_Move+0x180>
 8003d4a:	af01      	add	r7, sp, #4
 8003d4c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003d50:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003d52:	f8de 3000 	ldr.w	r3, [lr]

if (y_coord > 0 && horiz_walls[x_coord][y_coord-1] != TRUE) { //if row is greater than zero
 8003d56:	f8d8 2000 	ldr.w	r2, [r8]


 //index of lowest move
int next = FWD;
int min = 0;
int values[5] = {127, 127, 127, 127, 127};
 8003d5a:	603b      	str	r3, [r7, #0]
 8003d5c:	af01      	add	r7, sp, #4
 8003d5e:	4950      	ldr	r1, [pc, #320]	; (8003ea0 <Get_Next_Move+0x168>)

if (y_coord > 0 && horiz_walls[x_coord][y_coord-1] != TRUE) { //if row is greater than zero
 8003d60:	b962      	cbnz	r2, 8003d7c <Get_Next_Move+0x44>
	values[1] = maze[x_coord][y_coord-1]; //up square
}

if (y_coord < Y_MAZE_SIZE - 1 && horiz_walls[x_coord][y_coord] != TRUE) {
 8003d62:	682b      	ldr	r3, [r5, #0]
 8003d64:	0098      	lsls	r0, r3, #2
 8003d66:	4401      	add	r1, r0
 8003d68:	5c89      	ldrb	r1, [r1, r2]
 8003d6a:	2901      	cmp	r1, #1
 8003d6c:	d018      	beq.n	8003da0 <Get_Next_Move+0x68>
	values[2] = maze[x_coord][y_coord+1]; //down square
 8003d6e:	4403      	add	r3, r0
 8003d70:	1c51      	adds	r1, r2, #1
 8003d72:	440b      	add	r3, r1
 8003d74:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003d78:	9303      	str	r3, [sp, #12]
 8003d7a:	e011      	b.n	8003da0 <Get_Next_Move+0x68>
 //index of lowest move
int next = FWD;
int min = 0;
int values[5] = {127, 127, 127, 127, 127};

if (y_coord > 0 && horiz_walls[x_coord][y_coord-1] != TRUE) { //if row is greater than zero
 8003d7c:	6828      	ldr	r0, [r5, #0]
 8003d7e:	1e53      	subs	r3, r2, #1
 8003d80:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 8003d84:	eb01 0c0e 	add.w	ip, r1, lr
 8003d88:	f81c c003 	ldrb.w	ip, [ip, r3]
 8003d8c:	f1bc 0f01 	cmp.w	ip, #1
	values[1] = maze[x_coord][y_coord-1]; //up square
 8003d90:	bf1f      	itttt	ne
 8003d92:	4470      	addne	r0, lr
 8003d94:	181b      	addne	r3, r3, r0
 8003d96:	f854 3023 	ldrne.w	r3, [r4, r3, lsl #2]
 8003d9a:	9302      	strne	r3, [sp, #8]
}

if (y_coord < Y_MAZE_SIZE - 1 && horiz_walls[x_coord][y_coord] != TRUE) {
 8003d9c:	2a03      	cmp	r2, #3
 8003d9e:	d9e0      	bls.n	8003d62 <Get_Next_Move+0x2a>
	values[2] = maze[x_coord][y_coord+1]; //down square
}

if (x_coord > 0 && vert_walls[x_coord - 1][y_coord] != TRUE) {
 8003da0:	6829      	ldr	r1, [r5, #0]
 8003da2:	4840      	ldr	r0, [pc, #256]	; (8003ea4 <Get_Next_Move+0x16c>)
 8003da4:	b969      	cbnz	r1, 8003dc2 <Get_Next_Move+0x8a>
	values[3] = maze[x_coord - 1][y_coord]; //left square
}

if (x_coord < X_MAZE_SIZE - 1 && vert_walls[x_coord][y_coord] != TRUE) {
 8003da6:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8003daa:	4403      	add	r3, r0
 8003dac:	5c9b      	ldrb	r3, [r3, r2]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d017      	beq.n	8003de2 <Get_Next_Move+0xaa>
	values[4] = maze[x_coord+1][y_coord]; //right square
 8003db2:	1c4b      	adds	r3, r1, #1
 8003db4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003db8:	4413      	add	r3, r2
 8003dba:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003dbe:	9305      	str	r3, [sp, #20]
 8003dc0:	e00f      	b.n	8003de2 <Get_Next_Move+0xaa>

if (y_coord < Y_MAZE_SIZE - 1 && horiz_walls[x_coord][y_coord] != TRUE) {
	values[2] = maze[x_coord][y_coord+1]; //down square
}

if (x_coord > 0 && vert_walls[x_coord - 1][y_coord] != TRUE) {
 8003dc2:	1e4b      	subs	r3, r1, #1
 8003dc4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003dc8:	eb00 0e03 	add.w	lr, r0, r3
 8003dcc:	f81e e002 	ldrb.w	lr, [lr, r2]
 8003dd0:	f1be 0f01 	cmp.w	lr, #1
	values[3] = maze[x_coord - 1][y_coord]; //left square
 8003dd4:	bf1e      	ittt	ne
 8003dd6:	189b      	addne	r3, r3, r2
 8003dd8:	f854 3023 	ldrne.w	r3, [r4, r3, lsl #2]
 8003ddc:	9304      	strne	r3, [sp, #16]
}

if (x_coord < X_MAZE_SIZE - 1 && vert_walls[x_coord][y_coord] != TRUE) {
 8003dde:	2903      	cmp	r1, #3
 8003de0:	d9e1      	bls.n	8003da6 <Get_Next_Move+0x6e>
	values[4] = maze[x_coord+1][y_coord]; //right square
}

for (int i = 1; i < 5; i++) {
 8003de2:	f04f 0e01 	mov.w	lr, #1
int Get_Next_Move() { //floodfill get next move


 //index of lowest move
int next = FWD;
int min = 0;
 8003de6:	2300      	movs	r3, #0
if (x_coord < X_MAZE_SIZE - 1 && vert_walls[x_coord][y_coord] != TRUE) {
	values[4] = maze[x_coord+1][y_coord]; //right square
}

for (int i = 1; i < 5; i++) {
	if(values[i] < values[min]) {
 8003de8:	a806      	add	r0, sp, #24
 8003dea:	f857 602e 	ldr.w	r6, [r7, lr, lsl #2]
 8003dee:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
 8003df2:	f85c 0c14 	ldr.w	r0, [ip, #-20]
 8003df6:	4286      	cmp	r6, r0
 8003df8:	bfb8      	it	lt
 8003dfa:	4673      	movlt	r3, lr

if (x_coord < X_MAZE_SIZE - 1 && vert_walls[x_coord][y_coord] != TRUE) {
	values[4] = maze[x_coord+1][y_coord]; //right square
}

for (int i = 1; i < 5; i++) {
 8003dfc:	f10e 0e01 	add.w	lr, lr, #1
 8003e00:	f1be 0f05 	cmp.w	lr, #5
 8003e04:	d1f0      	bne.n	8003de8 <Get_Next_Move+0xb0>
	if(values[i] < values[min]) {
		min = i;
	}
}

if (values[min] >= maze[x_coord][y_coord]) { //if lowest available square is higher than current
 8003e06:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003e0a:	440a      	add	r2, r1
 8003e0c:	a906      	add	r1, sp, #24
 8003e0e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8003e12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003e16:	f851 1c14 	ldr.w	r1, [r1, #-20]
 8003e1a:	4291      	cmp	r1, r2
 8003e1c:	d307      	bcc.n	8003e2e <Get_Next_Move+0xf6>
	//floodfill and recursive call
	Floodfill(reverse_flag, search_flag, FALSE);
 8003e1e:	4b22      	ldr	r3, [pc, #136]	; (8003ea8 <Get_Next_Move+0x170>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	6819      	ldr	r1, [r3, #0]
 8003e24:	4b21      	ldr	r3, [pc, #132]	; (8003eac <Get_Next_Move+0x174>)
 8003e26:	6818      	ldr	r0, [r3, #0]
 8003e28:	f7ff fb58 	bl	80034dc <Floodfill>
	next = Get_Next_Move();
	//Print_Maze();
	return next;
 8003e2c:	e78b      	b.n	8003d46 <Get_Next_Move+0xe>
}

switch(cur_dir) {  //based on current direction, get next move to execute
 8003e2e:	4a20      	ldr	r2, [pc, #128]	; (8003eb0 <Get_Next_Move+0x178>)
 8003e30:	6810      	ldr	r0, [r2, #0]
 8003e32:	2803      	cmp	r0, #3
 8003e34:	d82b      	bhi.n	8003e8e <Get_Next_Move+0x156>
 8003e36:	e8df f000 	tbb	[pc, r0]
 8003e3a:	0a02      	.short	0x0a02
 8003e3c:	141e      	.short	0x141e

case NORTH:
	switch(min) {
 8003e3e:	2b03      	cmp	r3, #3
 8003e40:	d021      	beq.n	8003e86 <Get_Next_Move+0x14e>
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d00b      	beq.n	8003e5e <Get_Next_Move+0x126>
	case 1:
		next = FWD;
		break;
	case 2:
		next = DEAD;
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	bf08      	it	eq
 8003e4a:	2003      	moveq	r0, #3
 8003e4c:	e020      	b.n	8003e90 <Get_Next_Move+0x158>
		break;
	}
break;

case SOUTH:
	switch(min) {
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	d005      	beq.n	8003e5e <Get_Next_Move+0x126>
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d01c      	beq.n	8003e90 <Get_Next_Move+0x158>

int Get_Next_Move() { //floodfill get next move


 //index of lowest move
int next = FWD;
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	bf08      	it	eq
 8003e5a:	2003      	moveq	r0, #3
 8003e5c:	e010      	b.n	8003e80 <Get_Next_Move+0x148>
		break;
	case 2:
		next = FWD;
		break;
	case 3:
		next = RIGHT;
 8003e5e:	2002      	movs	r0, #2
		break;
 8003e60:	e016      	b.n	8003e90 <Get_Next_Move+0x158>
		break;
	}
break;

case EAST:
	switch(min) {
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d005      	beq.n	8003e72 <Get_Next_Move+0x13a>
 8003e66:	2b03      	cmp	r3, #3
 8003e68:	d012      	beq.n	8003e90 <Get_Next_Move+0x158>

int Get_Next_Move() { //floodfill get next move


 //index of lowest move
int next = FWD;
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	4258      	negs	r0, r3
 8003e6e:	4158      	adcs	r0, r3
 8003e70:	e00e      	b.n	8003e90 <Get_Next_Move+0x158>
	switch(min) {
	case 1:
		next = LEFT;
		break;
	case 2:
		next = RIGHT;
 8003e72:	4618      	mov	r0, r3
		break;
 8003e74:	e00c      	b.n	8003e90 <Get_Next_Move+0x158>
	}
break;


case WEST:
	switch(min) {
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d005      	beq.n	8003e86 <Get_Next_Move+0x14e>
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d005      	beq.n	8003e8a <Get_Next_Move+0x152>

int Get_Next_Move() { //floodfill get next move


 //index of lowest move
int next = FWD;
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	bf18      	it	ne
 8003e82:	2000      	movne	r0, #0
 8003e84:	e004      	b.n	8003e90 <Get_Next_Move+0x158>
	switch(min) {
	case 1:
		next = RIGHT;
		break;
	case 2:
		next = LEFT;
 8003e86:	2001      	movs	r0, #1
		break;
 8003e88:	e002      	b.n	8003e90 <Get_Next_Move+0x158>
	case 3:
		next = FWD;
		break;
	case 4:
		next = DEAD;
 8003e8a:	2003      	movs	r0, #3
		break;
 8003e8c:	e000      	b.n	8003e90 <Get_Next_Move+0x158>

int Get_Next_Move() { //floodfill get next move


 //index of lowest move
int next = FWD;
 8003e8e:	2000      	movs	r0, #0
		}
	}
*/

return next;
}
 8003e90:	b006      	add	sp, #24
 8003e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e96:	bf00      	nop
 8003e98:	20000ab8 	.word	0x20000ab8
 8003e9c:	200025a8 	.word	0x200025a8
 8003ea0:	200008dc 	.word	0x200008dc
 8003ea4:	20000b20 	.word	0x20000b20
 8003ea8:	20001bdc 	.word	0x20001bdc
 8003eac:	20001324 	.word	0x20001324
 8003eb0:	20001b08 	.word	0x20001b08
 8003eb4:	20000010 	.word	0x20000010
 8003eb8:	08006df8 	.word	0x08006df8

08003ebc <HAL_GPIO_EXTI_Callback>:
	 __HAL_TIM_SET_COUNTER(&htim1, 0);
	 __HAL_TIM_SET_COUNTER(&htim4, 0);
	 debug_flag = !debug_flag;
  }
#elif MOUSE_REV == 69 //button state machine
  if (GPIO_Pin == GPIO_PIN_5)
 8003ebc:	2820      	cmp	r0, #32
		  }
}
#endif
//button interrupt routine (THIS IS RUN WHEN BUTTONS ARE PRESSED)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ebe:	b570      	push	{r4, r5, r6, lr}
	 __HAL_TIM_SET_COUNTER(&htim1, 0);
	 __HAL_TIM_SET_COUNTER(&htim4, 0);
	 debug_flag = !debug_flag;
  }
#elif MOUSE_REV == 69 //button state machine
  if (GPIO_Pin == GPIO_PIN_5)
 8003ec0:	f040 80fb 	bne.w	80040ba <HAL_GPIO_EXTI_Callback+0x1fe>
  {
	  switch(button_state) {
 8003ec4:	4d7d      	ldr	r5, [pc, #500]	; (80040bc <HAL_GPIO_EXTI_Callback+0x200>)
 8003ec6:	682b      	ldr	r3, [r5, #0]
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	f200 80f6 	bhi.w	80040ba <HAL_GPIO_EXTI_Callback+0x1fe>
 8003ece:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003ed2:	0005      	.short	0x0005
 8003ed4:	00640035 	.word	0x00640035
 8003ed8:	00c50094 	.word	0x00c50094
	  case 0: //LED2 , SEND DEBUG
		  send_debug = 1;
 8003edc:	2601      	movs	r6, #1
 8003ede:	4b78      	ldr	r3, [pc, #480]	; (80040c0 <HAL_GPIO_EXTI_Callback+0x204>)
		  stop_flag = 1;
		  dem1 = 0;
 8003ee0:	2400      	movs	r4, #0
		  dem2 = 0;
		  dem3 = 0;
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8003ee2:	2102      	movs	r1, #2
#elif MOUSE_REV == 69 //button state machine
  if (GPIO_Pin == GPIO_PIN_5)
  {
	  switch(button_state) {
	  case 0: //LED2 , SEND DEBUG
		  send_debug = 1;
 8003ee4:	601e      	str	r6, [r3, #0]
		  stop_flag = 1;
 8003ee6:	4b77      	ldr	r3, [pc, #476]	; (80040c4 <HAL_GPIO_EXTI_Callback+0x208>)
		  dem1 = 0;
		  dem2 = 0;
		  dem3 = 0;
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8003ee8:	4622      	mov	r2, r4
 8003eea:	4877      	ldr	r0, [pc, #476]	; (80040c8 <HAL_GPIO_EXTI_Callback+0x20c>)
  if (GPIO_Pin == GPIO_PIN_5)
  {
	  switch(button_state) {
	  case 0: //LED2 , SEND DEBUG
		  send_debug = 1;
		  stop_flag = 1;
 8003eec:	601e      	str	r6, [r3, #0]
		  dem1 = 0;
 8003eee:	4b77      	ldr	r3, [pc, #476]	; (80040cc <HAL_GPIO_EXTI_Callback+0x210>)
 8003ef0:	601c      	str	r4, [r3, #0]
		  dem2 = 0;
 8003ef2:	4b77      	ldr	r3, [pc, #476]	; (80040d0 <HAL_GPIO_EXTI_Callback+0x214>)
 8003ef4:	601c      	str	r4, [r3, #0]
		  dem3 = 0;
 8003ef6:	4b77      	ldr	r3, [pc, #476]	; (80040d4 <HAL_GPIO_EXTI_Callback+0x218>)
 8003ef8:	601c      	str	r4, [r3, #0]
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8003efa:	f7fd f961 	bl	80011c0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, ON);
 8003efe:	4632      	mov	r2, r6
 8003f00:	4631      	mov	r1, r6
 8003f02:	4871      	ldr	r0, [pc, #452]	; (80040c8 <HAL_GPIO_EXTI_Callback+0x20c>)
 8003f04:	f7fd f95c 	bl	80011c0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, OFF);
 8003f08:	4622      	mov	r2, r4
 8003f0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f0e:	4872      	ldr	r0, [pc, #456]	; (80040d8 <HAL_GPIO_EXTI_Callback+0x21c>)
 8003f10:	f7fd f956 	bl	80011c0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, OFF);
 8003f14:	4622      	mov	r2, r4
 8003f16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f1a:	486f      	ldr	r0, [pc, #444]	; (80040d8 <HAL_GPIO_EXTI_Callback+0x21c>)
 8003f1c:	f7fd f950 	bl	80011c0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, OFF);
 8003f20:	4622      	mov	r2, r4
 8003f22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f26:	486d      	ldr	r0, [pc, #436]	; (80040dc <HAL_GPIO_EXTI_Callback+0x220>)
 8003f28:	f7fd f94a 	bl	80011c0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, OFF);
 8003f2c:	4622      	mov	r2, r4
 8003f2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f32:	486a      	ldr	r0, [pc, #424]	; (80040dc <HAL_GPIO_EXTI_Callback+0x220>)
 8003f34:	f7fd f944 	bl	80011c0 <HAL_GPIO_WritePin>
		  button_state = 1;
 8003f38:	602e      	str	r6, [r5, #0]
		  break;
 8003f3a:	bd70      	pop	{r4, r5, r6, pc}
	  case 1: //LED3 , SEARCH AND SPEED RUN
		  stop_flag = 0;
 8003f3c:	2400      	movs	r4, #0
 8003f3e:	4b61      	ldr	r3, [pc, #388]	; (80040c4 <HAL_GPIO_EXTI_Callback+0x208>)
		  send_debug = 0;
		  dem1 = 0;
		  dem2 = 0;
		  dem3 = 0;
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8003f40:	2102      	movs	r1, #2
 8003f42:	4861      	ldr	r0, [pc, #388]	; (80040c8 <HAL_GPIO_EXTI_Callback+0x20c>)
		  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, OFF);
		  HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, OFF);
		  button_state = 1;
		  break;
	  case 1: //LED3 , SEARCH AND SPEED RUN
		  stop_flag = 0;
 8003f44:	601c      	str	r4, [r3, #0]
		  send_debug = 0;
		  dem1 = 0;
		  dem2 = 0;
		  dem3 = 0;
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8003f46:	4622      	mov	r2, r4
		  HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, OFF);
		  button_state = 1;
		  break;
	  case 1: //LED3 , SEARCH AND SPEED RUN
		  stop_flag = 0;
		  send_debug = 0;
 8003f48:	4b5d      	ldr	r3, [pc, #372]	; (80040c0 <HAL_GPIO_EXTI_Callback+0x204>)
 8003f4a:	601c      	str	r4, [r3, #0]
		  dem1 = 0;
 8003f4c:	4b5f      	ldr	r3, [pc, #380]	; (80040cc <HAL_GPIO_EXTI_Callback+0x210>)
 8003f4e:	601c      	str	r4, [r3, #0]
		  dem2 = 0;
 8003f50:	4b5f      	ldr	r3, [pc, #380]	; (80040d0 <HAL_GPIO_EXTI_Callback+0x214>)
 8003f52:	601c      	str	r4, [r3, #0]
		  dem3 = 0;
 8003f54:	4b5f      	ldr	r3, [pc, #380]	; (80040d4 <HAL_GPIO_EXTI_Callback+0x218>)
 8003f56:	601c      	str	r4, [r3, #0]
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8003f58:	f7fd f932 	bl	80011c0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, OFF);
 8003f5c:	4622      	mov	r2, r4
 8003f5e:	2101      	movs	r1, #1
 8003f60:	4859      	ldr	r0, [pc, #356]	; (80040c8 <HAL_GPIO_EXTI_Callback+0x20c>)
 8003f62:	f7fd f92d 	bl	80011c0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, ON);
 8003f66:	2201      	movs	r2, #1
 8003f68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f6c:	485a      	ldr	r0, [pc, #360]	; (80040d8 <HAL_GPIO_EXTI_Callback+0x21c>)
 8003f6e:	f7fd f927 	bl	80011c0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, OFF);
 8003f72:	4622      	mov	r2, r4
 8003f74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f78:	4857      	ldr	r0, [pc, #348]	; (80040d8 <HAL_GPIO_EXTI_Callback+0x21c>)
 8003f7a:	f7fd f921 	bl	80011c0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, OFF);
 8003f7e:	4622      	mov	r2, r4
 8003f80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f84:	4855      	ldr	r0, [pc, #340]	; (80040dc <HAL_GPIO_EXTI_Callback+0x220>)
 8003f86:	f7fd f91b 	bl	80011c0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, OFF);
 8003f8a:	4622      	mov	r2, r4
 8003f8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f90:	4852      	ldr	r0, [pc, #328]	; (80040dc <HAL_GPIO_EXTI_Callback+0x220>)
 8003f92:	f7fd f915 	bl	80011c0 <HAL_GPIO_WritePin>

		  button_state = 2;
 8003f96:	2302      	movs	r3, #2
 8003f98:	e05e      	b.n	8004058 <HAL_GPIO_EXTI_Callback+0x19c>
		  break;

	  case 2: //LED4 , DEM1
		  send_debug = 0;
 8003f9a:	2400      	movs	r4, #0
 8003f9c:	4b48      	ldr	r3, [pc, #288]	; (80040c0 <HAL_GPIO_EXTI_Callback+0x204>)
		  stop_flag = 1;
 8003f9e:	2601      	movs	r6, #1
		  dem1 = 1;
		  dem2 = 0;
		  dem3 = 0;
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8003fa0:	2102      	movs	r1, #2

		  button_state = 2;
		  break;

	  case 2: //LED4 , DEM1
		  send_debug = 0;
 8003fa2:	601c      	str	r4, [r3, #0]
		  stop_flag = 1;
		  dem1 = 1;
		  dem2 = 0;
		  dem3 = 0;
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8003fa4:	4622      	mov	r2, r4
		  button_state = 2;
		  break;

	  case 2: //LED4 , DEM1
		  send_debug = 0;
		  stop_flag = 1;
 8003fa6:	4b47      	ldr	r3, [pc, #284]	; (80040c4 <HAL_GPIO_EXTI_Callback+0x208>)
		  dem1 = 1;
		  dem2 = 0;
		  dem3 = 0;
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8003fa8:	4847      	ldr	r0, [pc, #284]	; (80040c8 <HAL_GPIO_EXTI_Callback+0x20c>)
		  button_state = 2;
		  break;

	  case 2: //LED4 , DEM1
		  send_debug = 0;
		  stop_flag = 1;
 8003faa:	601e      	str	r6, [r3, #0]
		  dem1 = 1;
 8003fac:	4b47      	ldr	r3, [pc, #284]	; (80040cc <HAL_GPIO_EXTI_Callback+0x210>)
 8003fae:	601e      	str	r6, [r3, #0]
		  dem2 = 0;
 8003fb0:	4b47      	ldr	r3, [pc, #284]	; (80040d0 <HAL_GPIO_EXTI_Callback+0x214>)
 8003fb2:	601c      	str	r4, [r3, #0]
		  dem3 = 0;
 8003fb4:	4b47      	ldr	r3, [pc, #284]	; (80040d4 <HAL_GPIO_EXTI_Callback+0x218>)
 8003fb6:	601c      	str	r4, [r3, #0]
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8003fb8:	f7fd f902 	bl	80011c0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, OFF);
 8003fbc:	4622      	mov	r2, r4
 8003fbe:	4631      	mov	r1, r6
 8003fc0:	4841      	ldr	r0, [pc, #260]	; (80040c8 <HAL_GPIO_EXTI_Callback+0x20c>)
 8003fc2:	f7fd f8fd 	bl	80011c0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, OFF);
 8003fc6:	4622      	mov	r2, r4
 8003fc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003fcc:	4842      	ldr	r0, [pc, #264]	; (80040d8 <HAL_GPIO_EXTI_Callback+0x21c>)
 8003fce:	f7fd f8f7 	bl	80011c0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, ON);
 8003fd2:	4632      	mov	r2, r6
 8003fd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003fd8:	483f      	ldr	r0, [pc, #252]	; (80040d8 <HAL_GPIO_EXTI_Callback+0x21c>)
 8003fda:	f7fd f8f1 	bl	80011c0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, OFF);
 8003fde:	4622      	mov	r2, r4
 8003fe0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fe4:	483d      	ldr	r0, [pc, #244]	; (80040dc <HAL_GPIO_EXTI_Callback+0x220>)
 8003fe6:	f7fd f8eb 	bl	80011c0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, OFF);
 8003fea:	4622      	mov	r2, r4
 8003fec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003ff0:	483a      	ldr	r0, [pc, #232]	; (80040dc <HAL_GPIO_EXTI_Callback+0x220>)
 8003ff2:	f7fd f8e5 	bl	80011c0 <HAL_GPIO_WritePin>
		  button_state = 3;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e02e      	b.n	8004058 <HAL_GPIO_EXTI_Callback+0x19c>
		  break;
	  case 3: //LED6 , DEM2
		  send_debug = 0;
 8003ffa:	2400      	movs	r4, #0
 8003ffc:	4b30      	ldr	r3, [pc, #192]	; (80040c0 <HAL_GPIO_EXTI_Callback+0x204>)
		  stop_flag = 1;
 8003ffe:	2601      	movs	r6, #1
		  dem1 = 0;
		  dem2 = 1;
		  dem3 = 0;
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8004000:	2102      	movs	r1, #2
		  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, OFF);
		  HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, OFF);
		  button_state = 3;
		  break;
	  case 3: //LED6 , DEM2
		  send_debug = 0;
 8004002:	601c      	str	r4, [r3, #0]
		  stop_flag = 1;
		  dem1 = 0;
		  dem2 = 1;
		  dem3 = 0;
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8004004:	4622      	mov	r2, r4
		  HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, OFF);
		  button_state = 3;
		  break;
	  case 3: //LED6 , DEM2
		  send_debug = 0;
		  stop_flag = 1;
 8004006:	4b2f      	ldr	r3, [pc, #188]	; (80040c4 <HAL_GPIO_EXTI_Callback+0x208>)
		  dem1 = 0;
		  dem2 = 1;
		  dem3 = 0;
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8004008:	482f      	ldr	r0, [pc, #188]	; (80040c8 <HAL_GPIO_EXTI_Callback+0x20c>)
		  HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, OFF);
		  button_state = 3;
		  break;
	  case 3: //LED6 , DEM2
		  send_debug = 0;
		  stop_flag = 1;
 800400a:	601e      	str	r6, [r3, #0]
		  dem1 = 0;
 800400c:	4b2f      	ldr	r3, [pc, #188]	; (80040cc <HAL_GPIO_EXTI_Callback+0x210>)
 800400e:	601c      	str	r4, [r3, #0]
		  dem2 = 1;
 8004010:	4b2f      	ldr	r3, [pc, #188]	; (80040d0 <HAL_GPIO_EXTI_Callback+0x214>)
 8004012:	601e      	str	r6, [r3, #0]
		  dem3 = 0;
 8004014:	4b2f      	ldr	r3, [pc, #188]	; (80040d4 <HAL_GPIO_EXTI_Callback+0x218>)
 8004016:	601c      	str	r4, [r3, #0]
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8004018:	f7fd f8d2 	bl	80011c0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, OFF);
 800401c:	4622      	mov	r2, r4
 800401e:	4631      	mov	r1, r6
 8004020:	4829      	ldr	r0, [pc, #164]	; (80040c8 <HAL_GPIO_EXTI_Callback+0x20c>)
 8004022:	f7fd f8cd 	bl	80011c0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, OFF);
 8004026:	4622      	mov	r2, r4
 8004028:	f44f 7100 	mov.w	r1, #512	; 0x200
 800402c:	482a      	ldr	r0, [pc, #168]	; (80040d8 <HAL_GPIO_EXTI_Callback+0x21c>)
 800402e:	f7fd f8c7 	bl	80011c0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, OFF);
 8004032:	4622      	mov	r2, r4
 8004034:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004038:	4827      	ldr	r0, [pc, #156]	; (80040d8 <HAL_GPIO_EXTI_Callback+0x21c>)
 800403a:	f7fd f8c1 	bl	80011c0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, ON);
 800403e:	4632      	mov	r2, r6
 8004040:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004044:	4825      	ldr	r0, [pc, #148]	; (80040dc <HAL_GPIO_EXTI_Callback+0x220>)
 8004046:	f7fd f8bb 	bl	80011c0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, OFF);
 800404a:	4622      	mov	r2, r4
 800404c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004050:	4822      	ldr	r0, [pc, #136]	; (80040dc <HAL_GPIO_EXTI_Callback+0x220>)
 8004052:	f7fd f8b5 	bl	80011c0 <HAL_GPIO_WritePin>
		  button_state = 4;
 8004056:	2304      	movs	r3, #4
 8004058:	602b      	str	r3, [r5, #0]
		  break;
 800405a:	bd70      	pop	{r4, r5, r6, pc}

	  case 4: //LED7 , DEM3
		  send_debug = 0;
 800405c:	2400      	movs	r4, #0
 800405e:	4b18      	ldr	r3, [pc, #96]	; (80040c0 <HAL_GPIO_EXTI_Callback+0x204>)
		  stop_flag = 1;
 8004060:	2601      	movs	r6, #1
		  dem1 = 0;
		  dem2 = 0;
		  dem3 = 1;
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8004062:	2102      	movs	r1, #2
		  HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, OFF);
		  button_state = 4;
		  break;

	  case 4: //LED7 , DEM3
		  send_debug = 0;
 8004064:	601c      	str	r4, [r3, #0]
		  stop_flag = 1;
		  dem1 = 0;
		  dem2 = 0;
		  dem3 = 1;
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8004066:	4622      	mov	r2, r4
		  button_state = 4;
		  break;

	  case 4: //LED7 , DEM3
		  send_debug = 0;
		  stop_flag = 1;
 8004068:	4b16      	ldr	r3, [pc, #88]	; (80040c4 <HAL_GPIO_EXTI_Callback+0x208>)
		  dem1 = 0;
		  dem2 = 0;
		  dem3 = 1;
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 800406a:	4817      	ldr	r0, [pc, #92]	; (80040c8 <HAL_GPIO_EXTI_Callback+0x20c>)
		  button_state = 4;
		  break;

	  case 4: //LED7 , DEM3
		  send_debug = 0;
		  stop_flag = 1;
 800406c:	601e      	str	r6, [r3, #0]
		  dem1 = 0;
 800406e:	4b17      	ldr	r3, [pc, #92]	; (80040cc <HAL_GPIO_EXTI_Callback+0x210>)
 8004070:	601c      	str	r4, [r3, #0]
		  dem2 = 0;
 8004072:	4b17      	ldr	r3, [pc, #92]	; (80040d0 <HAL_GPIO_EXTI_Callback+0x214>)
 8004074:	601c      	str	r4, [r3, #0]
		  dem3 = 1;
 8004076:	4b17      	ldr	r3, [pc, #92]	; (80040d4 <HAL_GPIO_EXTI_Callback+0x218>)
 8004078:	601e      	str	r6, [r3, #0]
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 800407a:	f7fd f8a1 	bl	80011c0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, OFF);
 800407e:	4622      	mov	r2, r4
 8004080:	4631      	mov	r1, r6
 8004082:	4811      	ldr	r0, [pc, #68]	; (80040c8 <HAL_GPIO_EXTI_Callback+0x20c>)
 8004084:	f7fd f89c 	bl	80011c0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, OFF);
 8004088:	4622      	mov	r2, r4
 800408a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800408e:	4812      	ldr	r0, [pc, #72]	; (80040d8 <HAL_GPIO_EXTI_Callback+0x21c>)
 8004090:	f7fd f896 	bl	80011c0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, OFF);
 8004094:	4622      	mov	r2, r4
 8004096:	f44f 7180 	mov.w	r1, #256	; 0x100
 800409a:	480f      	ldr	r0, [pc, #60]	; (80040d8 <HAL_GPIO_EXTI_Callback+0x21c>)
 800409c:	f7fd f890 	bl	80011c0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, OFF);
 80040a0:	4622      	mov	r2, r4
 80040a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040a6:	480d      	ldr	r0, [pc, #52]	; (80040dc <HAL_GPIO_EXTI_Callback+0x220>)
 80040a8:	f7fd f88a 	bl	80011c0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, ON);
 80040ac:	4632      	mov	r2, r6
 80040ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80040b2:	480a      	ldr	r0, [pc, #40]	; (80040dc <HAL_GPIO_EXTI_Callback+0x220>)
 80040b4:	f7fd f884 	bl	80011c0 <HAL_GPIO_WritePin>
		  button_state = 0;
 80040b8:	602c      	str	r4, [r5, #0]
 80040ba:	bd70      	pop	{r4, r5, r6, pc}
 80040bc:	20000aa8 	.word	0x20000aa8
 80040c0:	20001314 	.word	0x20001314
 80040c4:	20000014 	.word	0x20000014
 80040c8:	40021000 	.word	0x40021000
 80040cc:	2000132c 	.word	0x2000132c
 80040d0:	20001330 	.word	0x20001330
 80040d4:	20001334 	.word	0x20001334
 80040d8:	40020400 	.word	0x40020400
 80040dc:	40020800 	.word	0x40020800

080040e0 <HAL_SPI_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80040e0:	4770      	bx	lr
	...

080040e4 <Error_Handler>:

void Error_Handler(void)
{
  while(1) 
  {
	  sprintf(tx_buffer, "State: %d", HAL_state);
 80040e4:	4c05      	ldr	r4, [pc, #20]	; (80040fc <Error_Handler+0x18>)
  //wTransferState = TRANSFER_ERROR;
  //HAL_GPIO_TogglePin(GPIOD, LED5_Pin);
}

void Error_Handler(void)
{
 80040e6:	b508      	push	{r3, lr}
  while(1) 
  {
	  sprintf(tx_buffer, "State: %d", HAL_state);
 80040e8:	6822      	ldr	r2, [r4, #0]
 80040ea:	4905      	ldr	r1, [pc, #20]	; (8004100 <Error_Handler+0x1c>)
 80040ec:	4805      	ldr	r0, [pc, #20]	; (8004104 <Error_Handler+0x20>)
 80040ee:	f002 fa3f 	bl	8006570 <siprintf>
	  Transmit(tx_buffer);
 80040f2:	4804      	ldr	r0, [pc, #16]	; (8004104 <Error_Handler+0x20>)
 80040f4:	f7fe ffcc 	bl	8003090 <Transmit>
 80040f8:	e7f6      	b.n	80040e8 <Error_Handler+0x4>
 80040fa:	bf00      	nop
 80040fc:	20001b74 	.word	0x20001b74
 8004100:	08007265 	.word	0x08007265
 8004104:	20002b84 	.word	0x20002b84

08004108 <Program_Walls_Flash>:

HAL_Delay(150);

}

void Program_Walls_Flash() {
 8004108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

#if DEBUG == TRUE
Transmit("Programming Walls in Flash.....\r\n");
 800410c:	484f      	ldr	r0, [pc, #316]	; (800424c <Program_Walls_Flash+0x144>)
HAL_FLASH_Unlock();

EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
EraseInitStruct.Sector        = FLASH_SECTOR_5;
EraseInitStruct.NbSectors     = 1;
 800410e:	2402      	movs	r4, #2
}

void Program_Walls_Flash() {

#if DEBUG == TRUE
Transmit("Programming Walls in Flash.....\r\n");
 8004110:	f7fe ffbe 	bl	8003090 <Transmit>
#endif
HAL_FLASH_Unlock();
 8004114:	f7fc fe50 	bl	8000db8 <HAL_FLASH_Unlock>

EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
EraseInitStruct.Sector        = FLASH_SECTOR_5;
EraseInitStruct.NbSectors     = 1;
 8004118:	2100      	movs	r1, #0
#if DEBUG == TRUE
Transmit("Programming Walls in Flash.....\r\n");
#endif
HAL_FLASH_Unlock();

EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800411a:	484d      	ldr	r0, [pc, #308]	; (8004250 <Program_Walls_Flash+0x148>)
EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
EraseInitStruct.Sector        = FLASH_SECTOR_5;
EraseInitStruct.NbSectors     = 1;
 800411c:	2205      	movs	r2, #5
 800411e:	2301      	movs	r3, #1
 8004120:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}

if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8004124:	494b      	ldr	r1, [pc, #300]	; (8004254 <Program_Walls_Flash+0x14c>)
 8004126:	f7fc ff11 	bl	8000f4c <HAL_FLASHEx_Erase>
 800412a:	b178      	cbz	r0, 800414c <Program_Walls_Flash+0x44>
  {
    while (1)
    {
#if DEBUG == TRUE
      Transmit("Programming Error! \r\n");
 800412c:	484a      	ldr	r0, [pc, #296]	; (8004258 <Program_Walls_Flash+0x150>)
 800412e:	f7fe ffaf 	bl	8003090 <Transmit>
#endif
      Turn_On_Lights();
 8004132:	f7ff fd8d 	bl	8003c50 <Turn_On_Lights>
      HAL_Delay(1000);
 8004136:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800413a:	f7fc f919 	bl	8000370 <HAL_Delay>
      Turn_Off_Lights();
 800413e:	f7ff fdc1 	bl	8003cc4 <Turn_Off_Lights>
      HAL_Delay(1000);
 8004142:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004146:	f7fc f913 	bl	8000370 <HAL_Delay>
 800414a:	e7ef      	b.n	800412c <Program_Walls_Flash+0x24>
    }
  }

Address = WALLS_ADDR;
 800414c:	4c43      	ldr	r4, [pc, #268]	; (800425c <Program_Walls_Flash+0x154>)
 800414e:	4605      	mov	r5, r0
 8004150:	4b43      	ldr	r3, [pc, #268]	; (8004260 <Program_Walls_Flash+0x158>)

for (int i = 0; i < X_MAZE_SIZE; i++) { //program horizontal walls byte by byte
	for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, horiz_walls[i][j]) == HAL_OK) {
 8004152:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8004278 <Program_Walls_Flash+0x170>
 8004156:	4626      	mov	r6, r4
      Turn_Off_Lights();
      HAL_Delay(1000);
    }
  }

Address = WALLS_ADDR;
 8004158:	6023      	str	r3, [r4, #0]

HAL_Delay(150);

}

void Program_Walls_Flash() {
 800415a:	2700      	movs	r7, #0
Address = WALLS_ADDR;

for (int i = 0; i < X_MAZE_SIZE; i++) { //program horizontal walls byte by byte
	for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, horiz_walls[i][j]) == HAL_OK) {
 800415c:	eb08 0307 	add.w	r3, r8, r7
 8004160:	6821      	ldr	r1, [r4, #0]
 8004162:	2000      	movs	r0, #0
 8004164:	5d5a      	ldrb	r2, [r3, r5]
 8004166:	2300      	movs	r3, #0
 8004168:	f7fc fe70 	bl	8000e4c <HAL_FLASH_Program>
 800416c:	b9a8      	cbnz	r0, 800419a <Program_Walls_Flash+0x92>
			Address = Address + 4;
 800416e:	6833      	ldr	r3, [r6, #0]
  }

Address = WALLS_ADDR;

for (int i = 0; i < X_MAZE_SIZE; i++) { //program horizontal walls byte by byte
	for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
 8004170:	3701      	adds	r7, #1

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, horiz_walls[i][j]) == HAL_OK) {
			Address = Address + 4;
 8004172:	3304      	adds	r3, #4
  }

Address = WALLS_ADDR;

for (int i = 0; i < X_MAZE_SIZE; i++) { //program horizontal walls byte by byte
	for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
 8004174:	2f04      	cmp	r7, #4

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, horiz_walls[i][j]) == HAL_OK) {
			Address = Address + 4;
 8004176:	6033      	str	r3, [r6, #0]
  }

Address = WALLS_ADDR;

for (int i = 0; i < X_MAZE_SIZE; i++) { //program horizontal walls byte by byte
	for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
 8004178:	d1f0      	bne.n	800415c <Program_Walls_Flash+0x54>
 800417a:	e013      	b.n	80041a4 <Program_Walls_Flash+0x9c>
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) { //program vertical walls
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, vert_walls[i][j]) == HAL_OK) {
			Address = Address + 4;
 800417c:	682b      	ldr	r3, [r5, #0]
		}
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) { //program vertical walls
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
 800417e:	3701      	adds	r7, #1
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, vert_walls[i][j]) == HAL_OK) {
			Address = Address + 4;
 8004180:	3304      	adds	r3, #4
		}
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) { //program vertical walls
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
 8004182:	2f05      	cmp	r7, #5
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, vert_walls[i][j]) == HAL_OK) {
			Address = Address + 4;
 8004184:	602b      	str	r3, [r5, #0]
		}
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) { //program vertical walls
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
 8004186:	d018      	beq.n	80041ba <Program_Walls_Flash+0xb2>
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, vert_walls[i][j]) == HAL_OK) {
 8004188:	f818 2007 	ldrb.w	r2, [r8, r7]
 800418c:	2300      	movs	r3, #0
 800418e:	6821      	ldr	r1, [r4, #0]
 8004190:	2000      	movs	r0, #0
 8004192:	f7fc fe5b 	bl	8000e4c <HAL_FLASH_Program>
 8004196:	2800      	cmp	r0, #0
 8004198:	d0f0      	beq.n	800417c <Program_Walls_Flash+0x74>

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, horiz_walls[i][j]) == HAL_OK) {
			Address = Address + 4;
		}
		else {
			HAL_state = FUCKEDUP;
 800419a:	2245      	movs	r2, #69	; 0x45
 800419c:	4b31      	ldr	r3, [pc, #196]	; (8004264 <Program_Walls_Flash+0x15c>)
 800419e:	601a      	str	r2, [r3, #0]
			Error_Handler();
 80041a0:	f7ff ffa0 	bl	80040e4 <Error_Handler>
 80041a4:	3504      	adds	r5, #4
    }
  }

Address = WALLS_ADDR;

for (int i = 0; i < X_MAZE_SIZE; i++) { //program horizontal walls byte by byte
 80041a6:	2d14      	cmp	r5, #20
 80041a8:	d1d7      	bne.n	800415a <Program_Walls_Flash+0x52>
 80041aa:	4606      	mov	r6, r0
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) { //program vertical walls
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, vert_walls[i][j]) == HAL_OK) {
 80041ac:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 800427c <Program_Walls_Flash+0x174>
 80041b0:	4d2a      	ldr	r5, [pc, #168]	; (800425c <Program_Walls_Flash+0x154>)
      Turn_Off_Lights();
      HAL_Delay(1000);
    }
  }

Address = WALLS_ADDR;
 80041b2:	2700      	movs	r7, #0
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) { //program vertical walls
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, vert_walls[i][j]) == HAL_OK) {
 80041b4:	eb09 0806 	add.w	r8, r9, r6
 80041b8:	e7e6      	b.n	8004188 <Program_Walls_Flash+0x80>
 80041ba:	3605      	adds	r6, #5
			Error_Handler();
		}
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) { //program vertical walls
 80041bc:	2e14      	cmp	r6, #20
 80041be:	d1f8      	bne.n	80041b2 <Program_Walls_Flash+0xaa>
 80041c0:	4605      	mov	r5, r0
	}
}

for (int i = 0; i < X_MAZE_SIZE; i++) { //program visited array
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, visited_squares[i][j]) == HAL_OK) {
 80041c2:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004280 <Program_Walls_Flash+0x178>
 80041c6:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800425c <Program_Walls_Flash+0x154>
    }
  }

Address = WALLS_ADDR;

for (int i = 0; i < X_MAZE_SIZE; i++) { //program horizontal walls byte by byte
 80041ca:	2600      	movs	r6, #0
	}
}

for (int i = 0; i < X_MAZE_SIZE; i++) { //program visited array
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, visited_squares[i][j]) == HAL_OK) {
 80041cc:	eb05 090a 	add.w	r9, r5, sl
 80041d0:	2300      	movs	r3, #0
 80041d2:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 80041d6:	6821      	ldr	r1, [r4, #0]
 80041d8:	4618      	mov	r0, r3
 80041da:	4f20      	ldr	r7, [pc, #128]	; (800425c <Program_Walls_Flash+0x154>)
 80041dc:	f7fc fe36 	bl	8000e4c <HAL_FLASH_Program>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2800      	cmp	r0, #0
 80041e4:	d1d9      	bne.n	800419a <Program_Walls_Flash+0x92>
			Address = Address + 4;
 80041e6:	f8d8 1000 	ldr.w	r1, [r8]
		}
	}
}

for (int i = 0; i < X_MAZE_SIZE; i++) { //program visited array
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
 80041ea:	3601      	adds	r6, #1
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, visited_squares[i][j]) == HAL_OK) {
			Address = Address + 4;
 80041ec:	3104      	adds	r1, #4
		}
	}
}

for (int i = 0; i < X_MAZE_SIZE; i++) { //program visited array
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
 80041ee:	2e05      	cmp	r6, #5
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, visited_squares[i][j]) == HAL_OK) {
			Address = Address + 4;
 80041f0:	f8c8 1000 	str.w	r1, [r8]
		}
	}
}

for (int i = 0; i < X_MAZE_SIZE; i++) { //program visited array
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
 80041f4:	d1ec      	bne.n	80041d0 <Program_Walls_Flash+0xc8>
 80041f6:	3514      	adds	r5, #20
			Error_Handler();
		}
	}
}

for (int i = 0; i < X_MAZE_SIZE; i++) { //program visited array
 80041f8:	2d64      	cmp	r5, #100	; 0x64
 80041fa:	d1e6      	bne.n	80041ca <Program_Walls_Flash+0xc2>
}

/*
 * for returning after floodfill
 */
if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, final_x) == HAL_OK) { //program final x
 80041fc:	4a1a      	ldr	r2, [pc, #104]	; (8004268 <Program_Walls_Flash+0x160>)
 80041fe:	2002      	movs	r0, #2
 8004200:	6812      	ldr	r2, [r2, #0]
 8004202:	f7fc fe23 	bl	8000e4c <HAL_FLASH_Program>
 8004206:	b910      	cbnz	r0, 800420e <Program_Walls_Flash+0x106>
	Address = Address + 4;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	3304      	adds	r3, #4
 800420c:	603b      	str	r3, [r7, #0]
}

if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, final_y) == HAL_OK) { //program final y
 800420e:	4b17      	ldr	r3, [pc, #92]	; (800426c <Program_Walls_Flash+0x164>)
 8004210:	2002      	movs	r0, #2
 8004212:	6821      	ldr	r1, [r4, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	2300      	movs	r3, #0
 8004218:	4d10      	ldr	r5, [pc, #64]	; (800425c <Program_Walls_Flash+0x154>)
 800421a:	f7fc fe17 	bl	8000e4c <HAL_FLASH_Program>
 800421e:	b910      	cbnz	r0, 8004226 <Program_Walls_Flash+0x11e>
	Address = Address + 4;
 8004220:	682b      	ldr	r3, [r5, #0]
 8004222:	3304      	adds	r3, #4
 8004224:	602b      	str	r3, [r5, #0]
}

if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, final_dir) == HAL_OK) { //program final direction
 8004226:	4b12      	ldr	r3, [pc, #72]	; (8004270 <Program_Walls_Flash+0x168>)
 8004228:	2002      	movs	r0, #2
 800422a:	6821      	ldr	r1, [r4, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	4d0b      	ldr	r5, [pc, #44]	; (800425c <Program_Walls_Flash+0x154>)
 8004230:	17d3      	asrs	r3, r2, #31
 8004232:	f7fc fe0b 	bl	8000e4c <HAL_FLASH_Program>
 8004236:	b910      	cbnz	r0, 800423e <Program_Walls_Flash+0x136>
	Address = Address + 4;
 8004238:	682b      	ldr	r3, [r5, #0]
 800423a:	3304      	adds	r3, #4
 800423c:	602b      	str	r3, [r5, #0]
}


#if DEBUG == TRUE
Transmit("Done! \r\n");
 800423e:	480d      	ldr	r0, [pc, #52]	; (8004274 <Program_Walls_Flash+0x16c>)
 8004240:	f7fe ff26 	bl	8003090 <Transmit>
#endif
HAL_FLASH_Lock();
}
 8004244:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}


#if DEBUG == TRUE
Transmit("Done! \r\n");
#endif
HAL_FLASH_Lock();
 8004248:	f7fc bdc8 	b.w	8000ddc <HAL_FLASH_Lock>
 800424c:	0800726f 	.word	0x0800726f
 8004250:	20002408 	.word	0x20002408
 8004254:	200009a4 	.word	0x200009a4
 8004258:	08007291 	.word	0x08007291
 800425c:	20001320 	.word	0x20001320
 8004260:	08040000 	.word	0x08040000
 8004264:	20001b74 	.word	0x20001b74
 8004268:	20000940 	.word	0x20000940
 800426c:	20000944 	.word	0x20000944
 8004270:	20000ac8 	.word	0x20000ac8
 8004274:	08006e57 	.word	0x08006e57
 8004278:	200008dc 	.word	0x200008dc
 800427c:	20000b20 	.word	0x20000b20
 8004280:	200031f4 	.word	0x200031f4

08004284 <Start_IR>:
void Reset_Encoders() {
	__HAL_TIM_SET_COUNTER(&htim1, 0); //reset counters --left encoder
	__HAL_TIM_SET_COUNTER(&htim4, 0); //right encdoer
}

void Start_IR() {
 8004284:	b508      	push	{r3, lr}

adc_conv = FALSE;
 8004286:	2200      	movs	r2, #0
 8004288:	4b05      	ldr	r3, [pc, #20]	; (80042a0 <Start_IR+0x1c>)
if(HAL_ADC_Start_DMA(&hadc1, ADC_valbuffer, ADC_VAL_BUFFER_LENGTH) != HAL_OK)
 800428a:	4906      	ldr	r1, [pc, #24]	; (80042a4 <Start_IR+0x20>)
	__HAL_TIM_SET_COUNTER(&htim4, 0); //right encdoer
}

void Start_IR() {

adc_conv = FALSE;
 800428c:	601a      	str	r2, [r3, #0]
if(HAL_ADC_Start_DMA(&hadc1, ADC_valbuffer, ADC_VAL_BUFFER_LENGTH) != HAL_OK)
 800428e:	2210      	movs	r2, #16
 8004290:	4805      	ldr	r0, [pc, #20]	; (80042a8 <Start_IR+0x24>)
 8004292:	f7fc f925 	bl	80004e0 <HAL_ADC_Start_DMA>
 8004296:	b108      	cbz	r0, 800429c <Start_IR+0x18>
  {
     Error_Handler();
 8004298:	f7ff ff24 	bl	80040e4 <Error_Handler>
 800429c:	bd08      	pop	{r3, pc}
 800429e:	bf00      	nop
 80042a0:	20000b38 	.word	0x20000b38
 80042a4:	200031b4 	.word	0x200031b4
 80042a8:	20002c4c 	.word	0x20002c4c

080042ac <Get_IR>:
     Error_Handler();
  }

}

void Get_IR(int front_save, int side_save, int front_disable, int side_disable) { //front and side variables used to save values in a buffer
 80042ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042b0:	460d      	mov	r5, r1
 80042b2:	461f      	mov	r7, r3
	int off_lf = 0;

	int comp_lf = 0;
	int comp_rf = 0;

	if (front_disable == FALSE) {
 80042b4:	4616      	mov	r6, r2
 80042b6:	bb22      	cbnz	r2, 8004302 <Get_IR+0x56>
		//left sensor
		Start_IR();
 80042b8:	f7ff ffe4 	bl	8004284 <Start_IR>
		while (adc_conv == FALSE);
 80042bc:	4a5c      	ldr	r2, [pc, #368]	; (8004430 <Get_IR+0x184>)
 80042be:	6813      	ldr	r3, [r2, #0]
 80042c0:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8004430 <Get_IR+0x184>
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0fa      	beq.n	80042be <Get_IR+0x12>
		off_l = l;
 80042c8:	4c5a      	ldr	r4, [pc, #360]	; (8004434 <Get_IR+0x188>)
		HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, ON);
 80042ca:	2201      	movs	r2, #1
 80042cc:	2110      	movs	r1, #16
 80042ce:	485a      	ldr	r0, [pc, #360]	; (8004438 <Get_IR+0x18c>)

	if (front_disable == FALSE) {
		//left sensor
		Start_IR();
		while (adc_conv == FALSE);
		off_l = l;
 80042d0:	f8d4 8000 	ldr.w	r8, [r4]
		HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, ON);
 80042d4:	f7fc ff74 	bl	80011c0 <HAL_GPIO_WritePin>
		Start_IR();
 80042d8:	f7ff ffd4 	bl	8004284 <Start_IR>
		while (adc_conv == FALSE);
 80042dc:	f8d9 3000 	ldr.w	r3, [r9]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d0fb      	beq.n	80042dc <Get_IR+0x30>
		on_l = l;
 80042e4:	6824      	ldr	r4, [r4, #0]
		HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, OFF);
 80042e6:	2200      	movs	r2, #0
 80042e8:	2110      	movs	r1, #16
 80042ea:	4853      	ldr	r0, [pc, #332]	; (8004438 <Get_IR+0x18c>)
 80042ec:	f7fc ff68 	bl	80011c0 <HAL_GPIO_WritePin>
		dif_l = on_l - off_l; //val_array[0]
 80042f0:	ebc8 0404 	rsb	r4, r8, r4
 80042f4:	4b51      	ldr	r3, [pc, #324]	; (800443c <Get_IR+0x190>)
 80042f6:	601c      	str	r4, [r3, #0]
	}

	//right front
	if (side_disable == FALSE) {
 80042f8:	b12f      	cbz	r7, 8004306 <Get_IR+0x5a>
		dif_lf = on_lf - off_lf; //val_array[3]
	}

	//right sensor
	if (front_disable == FALSE) {
		Start_IR();
 80042fa:	f7ff ffc3 	bl	8004284 <Start_IR>
		while (adc_conv == FALSE);
 80042fe:	4a4c      	ldr	r2, [pc, #304]	; (8004430 <Get_IR+0x184>)
 8004300:	e03d      	b.n	800437e <Get_IR+0xd2>
		HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, OFF);
		dif_l = on_l - off_l; //val_array[0]
	}

	//right front
	if (side_disable == FALSE) {
 8004302:	2b00      	cmp	r3, #0
 8004304:	d154      	bne.n	80043b0 <Get_IR+0x104>
		Start_IR();
 8004306:	f7ff ffbd 	bl	8004284 <Start_IR>
		while (adc_conv == FALSE);
 800430a:	4a49      	ldr	r2, [pc, #292]	; (8004430 <Get_IR+0x184>)
 800430c:	6813      	ldr	r3, [r2, #0]
 800430e:	4f48      	ldr	r7, [pc, #288]	; (8004430 <Get_IR+0x184>)
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0fb      	beq.n	800430c <Get_IR+0x60>
		off_rf = rf;
 8004314:	4c4a      	ldr	r4, [pc, #296]	; (8004440 <Get_IR+0x194>)
		HAL_GPIO_WritePin(RF_EMIT_PORT, RF_EMIT_PIN, ON);
 8004316:	2201      	movs	r2, #1
 8004318:	2104      	movs	r1, #4
 800431a:	4847      	ldr	r0, [pc, #284]	; (8004438 <Get_IR+0x18c>)

	//right front
	if (side_disable == FALSE) {
		Start_IR();
		while (adc_conv == FALSE);
		off_rf = rf;
 800431c:	f8d4 8000 	ldr.w	r8, [r4]
		HAL_GPIO_WritePin(RF_EMIT_PORT, RF_EMIT_PIN, ON);
 8004320:	f7fc ff4e 	bl	80011c0 <HAL_GPIO_WritePin>
		Start_IR();
 8004324:	f7ff ffae 	bl	8004284 <Start_IR>
		while (adc_conv == FALSE);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0fc      	beq.n	8004328 <Get_IR+0x7c>
		on_rf = rf;
 800432e:	6824      	ldr	r4, [r4, #0]
		HAL_GPIO_WritePin(RF_EMIT_PORT, RF_EMIT_PIN, OFF);
 8004330:	2200      	movs	r2, #0
 8004332:	2104      	movs	r1, #4
 8004334:	4840      	ldr	r0, [pc, #256]	; (8004438 <Get_IR+0x18c>)
 8004336:	f7fc ff43 	bl	80011c0 <HAL_GPIO_WritePin>
		dif_rf = on_rf - off_rf; //val_array[2]
 800433a:	ebc8 0404 	rsb	r4, r8, r4
 800433e:	4b41      	ldr	r3, [pc, #260]	; (8004444 <Get_IR+0x198>)
 8004340:	601c      	str	r4, [r3, #0]
	}

	//left front
	if (side_disable == FALSE) {
		Start_IR();
 8004342:	f7ff ff9f 	bl	8004284 <Start_IR>
		while (adc_conv == FALSE);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d0fc      	beq.n	8004346 <Get_IR+0x9a>
		off_lf = lf;
 800434c:	4c3e      	ldr	r4, [pc, #248]	; (8004448 <Get_IR+0x19c>)
		HAL_GPIO_WritePin(LF_EMIT_PORT, LF_EMIT_PIN, ON);
 800434e:	2201      	movs	r2, #1
 8004350:	2108      	movs	r1, #8
 8004352:	4839      	ldr	r0, [pc, #228]	; (8004438 <Get_IR+0x18c>)

	//left front
	if (side_disable == FALSE) {
		Start_IR();
		while (adc_conv == FALSE);
		off_lf = lf;
 8004354:	f8d4 8000 	ldr.w	r8, [r4]
		HAL_GPIO_WritePin(LF_EMIT_PORT, LF_EMIT_PIN, ON);
 8004358:	f7fc ff32 	bl	80011c0 <HAL_GPIO_WritePin>
		Start_IR();
 800435c:	f7ff ff92 	bl	8004284 <Start_IR>
		while (adc_conv == FALSE);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0fc      	beq.n	8004360 <Get_IR+0xb4>
		on_lf = lf;
 8004366:	6824      	ldr	r4, [r4, #0]
		HAL_GPIO_WritePin(LF_EMIT_PORT, LF_EMIT_PIN, OFF);
 8004368:	2200      	movs	r2, #0
 800436a:	2108      	movs	r1, #8
 800436c:	4832      	ldr	r0, [pc, #200]	; (8004438 <Get_IR+0x18c>)
 800436e:	f7fc ff27 	bl	80011c0 <HAL_GPIO_WritePin>
		dif_lf = on_lf - off_lf; //val_array[3]
 8004372:	ebc8 0404 	rsb	r4, r8, r4
 8004376:	4b35      	ldr	r3, [pc, #212]	; (800444c <Get_IR+0x1a0>)
 8004378:	601c      	str	r4, [r3, #0]
	}

	//right sensor
	if (front_disable == FALSE) {
 800437a:	b9ce      	cbnz	r6, 80043b0 <Get_IR+0x104>
 800437c:	e7bd      	b.n	80042fa <Get_IR+0x4e>
		Start_IR();
		while (adc_conv == FALSE);
 800437e:	6813      	ldr	r3, [r2, #0]
 8004380:	4f2b      	ldr	r7, [pc, #172]	; (8004430 <Get_IR+0x184>)
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0fb      	beq.n	800437e <Get_IR+0xd2>
		off_r = r;
 8004386:	4c32      	ldr	r4, [pc, #200]	; (8004450 <Get_IR+0x1a4>)
		HAL_GPIO_WritePin(R_EMIT_PORT, R_EMIT_PIN, ON);
 8004388:	2201      	movs	r2, #1
 800438a:	2102      	movs	r1, #2
 800438c:	482a      	ldr	r0, [pc, #168]	; (8004438 <Get_IR+0x18c>)

	//right sensor
	if (front_disable == FALSE) {
		Start_IR();
		while (adc_conv == FALSE);
		off_r = r;
 800438e:	6826      	ldr	r6, [r4, #0]
		HAL_GPIO_WritePin(R_EMIT_PORT, R_EMIT_PIN, ON);
 8004390:	f7fc ff16 	bl	80011c0 <HAL_GPIO_WritePin>
		Start_IR();
 8004394:	f7ff ff76 	bl	8004284 <Start_IR>
		while (adc_conv == FALSE);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0fc      	beq.n	8004398 <Get_IR+0xec>
		on_r = r;
 800439e:	6824      	ldr	r4, [r4, #0]
		HAL_GPIO_WritePin(R_EMIT_PORT, R_EMIT_PIN, OFF);
 80043a0:	2200      	movs	r2, #0
 80043a2:	2102      	movs	r1, #2
 80043a4:	4824      	ldr	r0, [pc, #144]	; (8004438 <Get_IR+0x18c>)
 80043a6:	f7fc ff0b 	bl	80011c0 <HAL_GPIO_WritePin>
		dif_r = on_r - off_r; //val_array[1]
 80043aa:	1ba4      	subs	r4, r4, r6
 80043ac:	4b29      	ldr	r3, [pc, #164]	; (8004454 <Get_IR+0x1a8>)
 80043ae:	601c      	str	r4, [r3, #0]
	}

	//lf and rf transitions
	if (side_save == TRUE) {
 80043b0:	2d01      	cmp	r5, #1
 80043b2:	d13b      	bne.n	800442c <Get_IR+0x180>
		lf_buffer[buff_count] = dif_lf;
 80043b4:	4828      	ldr	r0, [pc, #160]	; (8004458 <Get_IR+0x1ac>)
		rf_buffer[buff_count] = dif_rf;

		comp_lf = lf_buffer[((buff_count - IR_DIFF) + IR_BUFFER) % IR_BUFFER];
 80043b6:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
		dif_r = on_r - off_r; //val_array[1]
	}

	//lf and rf transitions
	if (side_save == TRUE) {
		lf_buffer[buff_count] = dif_lf;
 80043ba:	4a24      	ldr	r2, [pc, #144]	; (800444c <Get_IR+0x1a0>)
 80043bc:	6803      	ldr	r3, [r0, #0]
 80043be:	6811      	ldr	r1, [r2, #0]
		rf_buffer[buff_count] = dif_rf;

		comp_lf = lf_buffer[((buff_count - IR_DIFF) + IR_BUFFER) % IR_BUFFER];
 80043c0:	f103 0c64 	add.w	ip, r3, #100	; 0x64
		dif_r = on_r - off_r; //val_array[1]
	}

	//lf and rf transitions
	if (side_save == TRUE) {
		lf_buffer[buff_count] = dif_lf;
 80043c4:	f8df e0a0 	ldr.w	lr, [pc, #160]	; 8004468 <Get_IR+0x1bc>
		rf_buffer[buff_count] = dif_rf;
 80043c8:	4a1e      	ldr	r2, [pc, #120]	; (8004444 <Get_IR+0x198>)
		dif_r = on_r - off_r; //val_array[1]
	}

	//lf and rf transitions
	if (side_save == TRUE) {
		lf_buffer[buff_count] = dif_lf;
 80043ca:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
		rf_buffer[buff_count] = dif_rf;
 80043ce:	4f23      	ldr	r7, [pc, #140]	; (800445c <Get_IR+0x1b0>)
 80043d0:	6812      	ldr	r2, [r2, #0]

		comp_lf = lf_buffer[((buff_count - IR_DIFF) + IR_BUFFER) % IR_BUFFER];
 80043d2:	fb9c f6f4 	sdiv	r6, ip, r4
 80043d6:	fb04 c416 	mls	r4, r4, r6, ip
	}

	//lf and rf transitions
	if (side_save == TRUE) {
		lf_buffer[buff_count] = dif_lf;
		rf_buffer[buff_count] = dif_rf;
 80043da:	f847 2023 	str.w	r2, [r7, r3, lsl #2]

		comp_lf = lf_buffer[((buff_count - IR_DIFF) + IR_BUFFER) % IR_BUFFER];
 80043de:	f85e 6024 	ldr.w	r6, [lr, r4, lsl #2]
		comp_rf = rf_buffer[((buff_count - IR_DIFF) + IR_BUFFER) % IR_BUFFER];
 80043e2:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]

		if (comp_lf > 10 && abs(dif_lf  - comp_lf) > L_IR_CHANGE) { //send flag for left transition detected
 80043e6:	2e0a      	cmp	r6, #10
 80043e8:	dd09      	ble.n	80043fe <Get_IR+0x152>
 80043ea:	1b89      	subs	r1, r1, r6
 80043ec:	f240 46e2 	movw	r6, #1250	; 0x4e2
 80043f0:	2900      	cmp	r1, #0
 80043f2:	bfb8      	it	lt
 80043f4:	4249      	neglt	r1, r1
 80043f6:	42b1      	cmp	r1, r6
			l_transition_flag = TRUE;
 80043f8:	bfc4      	itt	gt
 80043fa:	4919      	ldrgt	r1, [pc, #100]	; (8004460 <Get_IR+0x1b4>)
 80043fc:	600d      	strgt	r5, [r1, #0]
		}
		if (comp_rf > 10 && abs(dif_rf - comp_rf) > R_IR_CHANGE) { //send flag for right transition detected
 80043fe:	2c0a      	cmp	r4, #10
 8004400:	dd0a      	ble.n	8004418 <Get_IR+0x16c>
 8004402:	1b12      	subs	r2, r2, r4
 8004404:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8004408:	2a00      	cmp	r2, #0
 800440a:	bfb8      	it	lt
 800440c:	4252      	neglt	r2, r2
 800440e:	428a      	cmp	r2, r1
			r_transition_flag = TRUE;
 8004410:	bfc2      	ittt	gt
 8004412:	2101      	movgt	r1, #1
 8004414:	4a13      	ldrgt	r2, [pc, #76]	; (8004464 <Get_IR+0x1b8>)
 8004416:	6011      	strgt	r1, [r2, #0]
		}
		buff_count = (buff_count+1) % IR_BUFFER;  //increase buffer count
 8004418:	3301      	adds	r3, #1
 800441a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800441e:	fb93 f2f1 	sdiv	r2, r3, r1
 8004422:	fb01 3312 	mls	r3, r1, r2, r3
 8004426:	6003      	str	r3, [r0, #0]
		r_buffer[buff_count] = dif_r;
		buff_count = (buff_count + 1) % IR_BUFFER;
	}
	*/

}
 8004428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800442c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004430:	20000b38 	.word	0x20000b38
 8004434:	200000a0 	.word	0x200000a0
 8004438:	40020c00 	.word	0x40020c00
 800443c:	20000878 	.word	0x20000878
 8004440:	2000099c 	.word	0x2000099c
 8004444:	20000874 	.word	0x20000874
 8004448:	20000a50 	.word	0x20000a50
 800444c:	20000ac4 	.word	0x20000ac4
 8004450:	20001328 	.word	0x20001328
 8004454:	200008d0 	.word	0x200008d0
 8004458:	20002418 	.word	0x20002418
 800445c:	20001be8 	.word	0x20001be8
 8004460:	20001bd0 	.word	0x20001bd0
 8004464:	200008d8 	.word	0x200008d8
 8004468:	20001338 	.word	0x20001338

0800446c <Update_Sensors>:
	return TRUE;
}
return FALSE;
}

void Update_Sensors(int state) {
 800446c:	b508      	push	{r3, lr}

	switch(state) {
 800446e:	2806      	cmp	r0, #6
 8004470:	d81d      	bhi.n	80044ae <Update_Sensors+0x42>
 8004472:	e8df f000 	tbb	[pc, r0]
 8004476:	1604      	.short	0x1604
 8004478:	1c1c0b07 	.word	0x1c1c0b07
 800447c:	11          	.byte	0x11
 800447d:	00          	.byte	0x00
	case BARE: //disable nothing, save nothing, only correction
		Get_IR(FALSE, FALSE, FALSE, FALSE); //
 800447e:	2300      	movs	r3, #0
 8004480:	461a      	mov	r2, r3
 8004482:	e010      	b.n	80044a6 <Update_Sensors+0x3a>
	break;
	case TURN_SEARCH: //disable front, only detect sides
		Get_IR(FALSE, FALSE, TRUE, FALSE);
	break;
	case FWD_SEARCH: //forward searching, detect transitions, disable front
		Get_IR(FALSE, TRUE, TRUE, FALSE);
 8004484:	2201      	movs	r2, #1
 8004486:	2300      	movs	r3, #0
 8004488:	4611      	mov	r1, r2
 800448a:	e00d      	b.n	80044a8 <Update_Sensors+0x3c>
	break;
	case TIME:
		time_count = __HAL_TIM_GET_COUNTER(&htim5);
 800448c:	4b12      	ldr	r3, [pc, #72]	; (80044d8 <Update_Sensors+0x6c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004492:	4b12      	ldr	r3, [pc, #72]	; (80044dc <Update_Sensors+0x70>)
 8004494:	601a      	str	r2, [r3, #0]
	break;
 8004496:	e00a      	b.n	80044ae <Update_Sensors+0x42>
	case TEST:
		time_count = __HAL_TIM_GET_COUNTER(&htim5);
 8004498:	4b0f      	ldr	r3, [pc, #60]	; (80044d8 <Update_Sensors+0x6c>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800449e:	4b0f      	ldr	r3, [pc, #60]	; (80044dc <Update_Sensors+0x70>)
 80044a0:	601a      	str	r2, [r3, #0]
		Get_IR(FALSE, FALSE, TRUE, FALSE);
 80044a2:	2300      	movs	r3, #0
 80044a4:	2201      	movs	r2, #1
 80044a6:	4619      	mov	r1, r3
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff feff 	bl	80042ac <Get_IR>
	}

	l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
 80044ae:	4b0c      	ldr	r3, [pc, #48]	; (80044e0 <Update_Sensors+0x74>)
	r_count = __HAL_TIM_GET_COUNTER(&htim4);
 80044b0:	490c      	ldr	r1, [pc, #48]	; (80044e4 <Update_Sensors+0x78>)
	case TEST:
		time_count = __HAL_TIM_GET_COUNTER(&htim5);
		Get_IR(FALSE, FALSE, TRUE, FALSE);
	}

	l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044b6:	4b0c      	ldr	r3, [pc, #48]	; (80044e8 <Update_Sensors+0x7c>)
 80044b8:	601a      	str	r2, [r3, #0]
	r_count = __HAL_TIM_GET_COUNTER(&htim4);
 80044ba:	4b0c      	ldr	r3, [pc, #48]	; (80044ec <Update_Sensors+0x80>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	600b      	str	r3, [r1, #0]
	lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
 80044c2:	490b      	ldr	r1, [pc, #44]	; (80044f0 <Update_Sensors+0x84>)
 80044c4:	6809      	ldr	r1, [r1, #0]
 80044c6:	1a52      	subs	r2, r2, r1
 80044c8:	490a      	ldr	r1, [pc, #40]	; (80044f4 <Update_Sensors+0x88>)
 80044ca:	600a      	str	r2, [r1, #0]
	renc_diff = r_count - prev_r_count;
 80044cc:	4a0a      	ldr	r2, [pc, #40]	; (80044f8 <Update_Sensors+0x8c>)
 80044ce:	6812      	ldr	r2, [r2, #0]
 80044d0:	1a9b      	subs	r3, r3, r2
 80044d2:	4a0a      	ldr	r2, [pc, #40]	; (80044fc <Update_Sensors+0x90>)
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	bd08      	pop	{r3, pc}
 80044d8:	2000256c 	.word	0x2000256c
 80044dc:	20002518 	.word	0x20002518
 80044e0:	20003258 	.word	0x20003258
 80044e4:	20000acc 	.word	0x20000acc
 80044e8:	20001b10 	.word	0x20001b10
 80044ec:	20002520 	.word	0x20002520
 80044f0:	2000251c 	.word	0x2000251c
 80044f4:	200008d4 	.word	0x200008d4
 80044f8:	200024b0 	.word	0x200024b0
 80044fc:	20000aa4 	.word	0x20000aa4

08004500 <Read_Walls>:
	final_x = 0;
	final_y = 0;
	final_dir = 0;
}

void Read_Walls() {
 8004500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

#define DIFFERENTIAL 900

if (visited_squares[x_coord][y_coord] == TRUE) { //if mouse has already visited square, return
 8004504:	4d8e      	ldr	r5, [pc, #568]	; (8004740 <Read_Walls+0x240>)
 8004506:	4c8f      	ldr	r4, [pc, #572]	; (8004744 <Read_Walls+0x244>)
 8004508:	682b      	ldr	r3, [r5, #0]
 800450a:	6822      	ldr	r2, [r4, #0]
 800450c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004510:	4413      	add	r3, r2
 8004512:	4a8d      	ldr	r2, [pc, #564]	; (8004748 <Read_Walls+0x248>)
 8004514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004518:	2b01      	cmp	r3, #1
 800451a:	f000 810f 	beq.w	800473c <Read_Walls+0x23c>
	return;
}

front_l = 0;
 800451e:	2300      	movs	r3, #0
front_r = 0;
lf_side = 0;
 8004520:	4a8a      	ldr	r2, [pc, #552]	; (800474c <Read_Walls+0x24c>)

if (visited_squares[x_coord][y_coord] == TRUE) { //if mouse has already visited square, return
	return;
}

front_l = 0;
 8004522:	4f8b      	ldr	r7, [pc, #556]	; (8004750 <Read_Walls+0x250>)
front_r = 0;
lf_side = 0;
rf_side = 0;
 8004524:	f04f 0805 	mov.w	r8, #5
	return;
}

front_l = 0;
front_r = 0;
lf_side = 0;
 8004528:	6013      	str	r3, [r2, #0]
if (visited_squares[x_coord][y_coord] == TRUE) { //if mouse has already visited square, return
	return;
}

front_l = 0;
front_r = 0;
 800452a:	4e8a      	ldr	r6, [pc, #552]	; (8004754 <Read_Walls+0x254>)
lf_side = 0;
rf_side = 0;
 800452c:	4a8a      	ldr	r2, [pc, #552]	; (8004758 <Read_Walls+0x258>)

for (int i = 0; i < WALL_SAMPLES; i++) { //sample infrared values multiple times
	Get_IR(FALSE, FALSE, FALSE, FALSE);
	front_l = front_l + dif_l;
 800452e:	f8df 9244 	ldr.w	r9, [pc, #580]	; 8004774 <Read_Walls+0x274>

if (visited_squares[x_coord][y_coord] == TRUE) { //if mouse has already visited square, return
	return;
}

front_l = 0;
 8004532:	603b      	str	r3, [r7, #0]
front_r = 0;
 8004534:	6033      	str	r3, [r6, #0]
lf_side = 0;
rf_side = 0;
 8004536:	6013      	str	r3, [r2, #0]

for (int i = 0; i < WALL_SAMPLES; i++) { //sample infrared values multiple times
	Get_IR(FALSE, FALSE, FALSE, FALSE);
 8004538:	2300      	movs	r3, #0
	front_l = front_l + dif_l;
	front_r = front_r + dif_r;
	lf_side = lf_side + dif_lf;
 800453a:	f8df a210 	ldr.w	sl, [pc, #528]	; 800474c <Read_Walls+0x24c>
front_r = 0;
lf_side = 0;
rf_side = 0;

for (int i = 0; i < WALL_SAMPLES; i++) { //sample infrared values multiple times
	Get_IR(FALSE, FALSE, FALSE, FALSE);
 800453e:	461a      	mov	r2, r3
 8004540:	4619      	mov	r1, r3
 8004542:	4618      	mov	r0, r3
 8004544:	f7ff feb2 	bl	80042ac <Get_IR>
	front_l = front_l + dif_l;
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	f8d9 3000 	ldr.w	r3, [r9]
front_l = 0;
front_r = 0;
lf_side = 0;
rf_side = 0;

for (int i = 0; i < WALL_SAMPLES; i++) { //sample infrared values multiple times
 800454e:	f1b8 0801 	subs.w	r8, r8, #1
	Get_IR(FALSE, FALSE, FALSE, FALSE);
	front_l = front_l + dif_l;
	front_r = front_r + dif_r;
 8004552:	6831      	ldr	r1, [r6, #0]
lf_side = 0;
rf_side = 0;

for (int i = 0; i < WALL_SAMPLES; i++) { //sample infrared values multiple times
	Get_IR(FALSE, FALSE, FALSE, FALSE);
	front_l = front_l + dif_l;
 8004554:	441a      	add	r2, r3
	front_r = front_r + dif_r;
 8004556:	4b81      	ldr	r3, [pc, #516]	; (800475c <Read_Walls+0x25c>)
	lf_side = lf_side + dif_lf;
 8004558:	4881      	ldr	r0, [pc, #516]	; (8004760 <Read_Walls+0x260>)
rf_side = 0;

for (int i = 0; i < WALL_SAMPLES; i++) { //sample infrared values multiple times
	Get_IR(FALSE, FALSE, FALSE, FALSE);
	front_l = front_l + dif_l;
	front_r = front_r + dif_r;
 800455a:	681b      	ldr	r3, [r3, #0]
	lf_side = lf_side + dif_lf;
 800455c:	6800      	ldr	r0, [r0, #0]
rf_side = 0;

for (int i = 0; i < WALL_SAMPLES; i++) { //sample infrared values multiple times
	Get_IR(FALSE, FALSE, FALSE, FALSE);
	front_l = front_l + dif_l;
	front_r = front_r + dif_r;
 800455e:	440b      	add	r3, r1
	lf_side = lf_side + dif_lf;
 8004560:	f8da 1000 	ldr.w	r1, [sl]
	rf_side = rf_side + dif_rf;
 8004564:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 8004758 <Read_Walls+0x258>

for (int i = 0; i < WALL_SAMPLES; i++) { //sample infrared values multiple times
	Get_IR(FALSE, FALSE, FALSE, FALSE);
	front_l = front_l + dif_l;
	front_r = front_r + dif_r;
	lf_side = lf_side + dif_lf;
 8004568:	4401      	add	r1, r0
	rf_side = rf_side + dif_rf;
 800456a:	487e      	ldr	r0, [pc, #504]	; (8004764 <Read_Walls+0x264>)
lf_side = 0;
rf_side = 0;

for (int i = 0; i < WALL_SAMPLES; i++) { //sample infrared values multiple times
	Get_IR(FALSE, FALSE, FALSE, FALSE);
	front_l = front_l + dif_l;
 800456c:	603a      	str	r2, [r7, #0]
	front_r = front_r + dif_r;
	lf_side = lf_side + dif_lf;
	rf_side = rf_side + dif_rf;
 800456e:	f8d0 e000 	ldr.w	lr, [r0]
 8004572:	f8dc 0000 	ldr.w	r0, [ip]
rf_side = 0;

for (int i = 0; i < WALL_SAMPLES; i++) { //sample infrared values multiple times
	Get_IR(FALSE, FALSE, FALSE, FALSE);
	front_l = front_l + dif_l;
	front_r = front_r + dif_r;
 8004576:	6033      	str	r3, [r6, #0]
	lf_side = lf_side + dif_lf;
	rf_side = rf_side + dif_rf;
 8004578:	4486      	add	lr, r0

for (int i = 0; i < WALL_SAMPLES; i++) { //sample infrared values multiple times
	Get_IR(FALSE, FALSE, FALSE, FALSE);
	front_l = front_l + dif_l;
	front_r = front_r + dif_r;
	lf_side = lf_side + dif_lf;
 800457a:	f8ca 1000 	str.w	r1, [sl]
	rf_side = rf_side + dif_rf;
 800457e:	f8cc e000 	str.w	lr, [ip]
front_l = 0;
front_r = 0;
lf_side = 0;
rf_side = 0;

for (int i = 0; i < WALL_SAMPLES; i++) { //sample infrared values multiple times
 8004582:	d1d9      	bne.n	8004538 <Read_Walls+0x38>
	front_r = front_r + dif_r;
	lf_side = lf_side + dif_lf;
	rf_side = rf_side + dif_rf;
}

front_l = front_l/WALL_SAMPLES;
 8004584:	2005      	movs	r0, #5
 8004586:	4e72      	ldr	r6, [pc, #456]	; (8004750 <Read_Walls+0x250>)
 8004588:	fb92 f2f0 	sdiv	r2, r2, r0
front_r = front_r/WALL_SAMPLES;
 800458c:	fb93 f3f0 	sdiv	r3, r3, r0
	front_r = front_r + dif_r;
	lf_side = lf_side + dif_lf;
	rf_side = rf_side + dif_rf;
}

front_l = front_l/WALL_SAMPLES;
 8004590:	6032      	str	r2, [r6, #0]
front_r = front_r/WALL_SAMPLES;
 8004592:	4e70      	ldr	r6, [pc, #448]	; (8004754 <Read_Walls+0x254>)
lf_side = lf_side/WALL_SAMPLES;
 8004594:	fb91 f1f0 	sdiv	r1, r1, r0
	lf_side = lf_side + dif_lf;
	rf_side = rf_side + dif_rf;
}

front_l = front_l/WALL_SAMPLES;
front_r = front_r/WALL_SAMPLES;
 8004598:	6033      	str	r3, [r6, #0]
lf_side = lf_side/WALL_SAMPLES;
rf_side = rf_side/WALL_SAMPLES;

switch(cur_dir) {
 800459a:	4e73      	ldr	r6, [pc, #460]	; (8004768 <Read_Walls+0x268>)
	rf_side = rf_side + dif_rf;
}

front_l = front_l/WALL_SAMPLES;
front_r = front_r/WALL_SAMPLES;
lf_side = lf_side/WALL_SAMPLES;
 800459c:	f8ca 1000 	str.w	r1, [sl]
rf_side = rf_side/WALL_SAMPLES;

switch(cur_dir) {
 80045a0:	6836      	ldr	r6, [r6, #0]
}

front_l = front_l/WALL_SAMPLES;
front_r = front_r/WALL_SAMPLES;
lf_side = lf_side/WALL_SAMPLES;
rf_side = rf_side/WALL_SAMPLES;
 80045a2:	fb9e f0f0 	sdiv	r0, lr, r0
 80045a6:	f8cc 0000 	str.w	r0, [ip]

switch(cur_dir) {
 80045aa:	2e03      	cmp	r6, #3
 80045ac:	f200 80c6 	bhi.w	800473c <Read_Walls+0x23c>
 80045b0:	e8df f006 	tbb	[pc, r6]
 80045b4:	94623002 	.word	0x94623002

case NORTH: //facing up
	if (y_coord > 0 && (front_l >= FRONT_THRESHOLD || front_r >= FRONT_THRESHOLD) && abs(front_l - front_r) < DIFFERENTIAL) { //front sensor
 80045b8:	6824      	ldr	r4, [r4, #0]
 80045ba:	b1a4      	cbz	r4, 80045e6 <Read_Walls+0xe6>
 80045bc:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 80045c0:	da02      	bge.n	80045c8 <Read_Walls+0xc8>
 80045c2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80045c6:	db0e      	blt.n	80045e6 <Read_Walls+0xe6>
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	f240 7206 	movw	r2, #1798	; 0x706
 80045ce:	f203 3383 	addw	r3, r3, #899	; 0x383
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d807      	bhi.n	80045e6 <Read_Walls+0xe6>
		horiz_walls[x_coord][y_coord - 1] = 1; //up wall
 80045d6:	682a      	ldr	r2, [r5, #0]
 80045d8:	4b64      	ldr	r3, [pc, #400]	; (800476c <Read_Walls+0x26c>)
 80045da:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80045de:	2201      	movs	r2, #1
 80045e0:	4423      	add	r3, r4
 80045e2:	f803 2c01 	strb.w	r2, [r3, #-1]
	}
	if (x_coord < X_MAZE_SIZE - 1 && rf_side >= RIGHT_THRESHOLD) { //right sensor
 80045e6:	682b      	ldr	r3, [r5, #0]
 80045e8:	2b03      	cmp	r3, #3
 80045ea:	d904      	bls.n	80045f6 <Read_Walls+0xf6>
		vert_walls[x_coord][y_coord] = 1; //right wall
	}
	if (x_coord > 0 && lf_side >= LEFT_THRESHOLD) {  //left sensor
 80045ec:	f5b1 7f61 	cmp.w	r1, #900	; 0x384
 80045f0:	da0e      	bge.n	8004610 <Read_Walls+0x110>
 80045f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

case NORTH: //facing up
	if (y_coord > 0 && (front_l >= FRONT_THRESHOLD || front_r >= FRONT_THRESHOLD) && abs(front_l - front_r) < DIFFERENTIAL) { //front sensor
		horiz_walls[x_coord][y_coord - 1] = 1; //up wall
	}
	if (x_coord < X_MAZE_SIZE - 1 && rf_side >= RIGHT_THRESHOLD) { //right sensor
 80045f6:	f5b0 7f61 	cmp.w	r0, #900	; 0x384
 80045fa:	db05      	blt.n	8004608 <Read_Walls+0x108>
		vert_walls[x_coord][y_coord] = 1; //right wall
 80045fc:	485c      	ldr	r0, [pc, #368]	; (8004770 <Read_Walls+0x270>)
 80045fe:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004602:	4402      	add	r2, r0
 8004604:	2001      	movs	r0, #1
 8004606:	5510      	strb	r0, [r2, r4]
	}
	if (x_coord > 0 && lf_side >= LEFT_THRESHOLD) {  //left sensor
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 8097 	beq.w	800473c <Read_Walls+0x23c>
 800460e:	e7ed      	b.n	80045ec <Read_Walls+0xec>
		vert_walls[x_coord - 1][y_coord] = 1; //left wall
 8004610:	3b01      	subs	r3, #1
 8004612:	e029      	b.n	8004668 <Read_Walls+0x168>
	}
	break;

case SOUTH: //facing down
	if (y_coord < Y_MAZE_SIZE - 1 && (front_l >= FRONT_THRESHOLD || front_r >= FRONT_THRESHOLD) && abs(front_l - front_r) < DIFFERENTIAL) {  //front sensor
 8004614:	6824      	ldr	r4, [r4, #0]
 8004616:	2c03      	cmp	r4, #3
 8004618:	d812      	bhi.n	8004640 <Read_Walls+0x140>
 800461a:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 800461e:	da02      	bge.n	8004626 <Read_Walls+0x126>
 8004620:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004624:	db0c      	blt.n	8004640 <Read_Walls+0x140>
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	f240 7206 	movw	r2, #1798	; 0x706
 800462c:	f203 3383 	addw	r3, r3, #899	; 0x383
 8004630:	4293      	cmp	r3, r2
 8004632:	d805      	bhi.n	8004640 <Read_Walls+0x140>
		horiz_walls[x_coord][y_coord] = 1; //down_wall
 8004634:	682a      	ldr	r2, [r5, #0]
 8004636:	4b4d      	ldr	r3, [pc, #308]	; (800476c <Read_Walls+0x26c>)
 8004638:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800463c:	2201      	movs	r2, #1
 800463e:	551a      	strb	r2, [r3, r4]
		}
	if (x_coord > 0 && rf_side >= RIGHT_THRESHOLD) {  //right sensor
 8004640:	682b      	ldr	r3, [r5, #0]
 8004642:	b923      	cbnz	r3, 800464e <Read_Walls+0x14e>
		vert_walls[x_coord - 1][y_coord] = 1; //left wall
	}
	if (x_coord < X_MAZE_SIZE - 1 && lf_side >= LEFT_THRESHOLD) { //left sensor
 8004644:	f5b1 7f61 	cmp.w	r1, #900	; 0x384
 8004648:	da0e      	bge.n	8004668 <Read_Walls+0x168>
 800464a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

case SOUTH: //facing down
	if (y_coord < Y_MAZE_SIZE - 1 && (front_l >= FRONT_THRESHOLD || front_r >= FRONT_THRESHOLD) && abs(front_l - front_r) < DIFFERENTIAL) {  //front sensor
		horiz_walls[x_coord][y_coord] = 1; //down_wall
		}
	if (x_coord > 0 && rf_side >= RIGHT_THRESHOLD) {  //right sensor
 800464e:	f5b0 7f61 	cmp.w	r0, #900	; 0x384
 8004652:	db06      	blt.n	8004662 <Read_Walls+0x162>
		vert_walls[x_coord - 1][y_coord] = 1; //left wall
 8004654:	1e5a      	subs	r2, r3, #1
 8004656:	4846      	ldr	r0, [pc, #280]	; (8004770 <Read_Walls+0x270>)
 8004658:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800465c:	4402      	add	r2, r0
 800465e:	2001      	movs	r0, #1
 8004660:	5510      	strb	r0, [r2, r4]
	}
	if (x_coord < X_MAZE_SIZE - 1 && lf_side >= LEFT_THRESHOLD) { //left sensor
 8004662:	2b03      	cmp	r3, #3
 8004664:	d86a      	bhi.n	800473c <Read_Walls+0x23c>
 8004666:	e7ed      	b.n	8004644 <Read_Walls+0x144>
		vert_walls[x_coord][y_coord] = 1; //right wall
 8004668:	4a41      	ldr	r2, [pc, #260]	; (8004770 <Read_Walls+0x270>)
 800466a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800466e:	4413      	add	r3, r2
 8004670:	2201      	movs	r2, #1
 8004672:	551a      	strb	r2, [r3, r4]
 8004674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}
	break;

case WEST: //facing left
	if (x_coord > 0 && (front_l >= FRONT_THRESHOLD || front_r >= FRONT_THRESHOLD) && abs(front_l - front_r) < DIFFERENTIAL) { //front sensor
 8004678:	682d      	ldr	r5, [r5, #0]
 800467a:	b1a5      	cbz	r5, 80046a6 <Read_Walls+0x1a6>
 800467c:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 8004680:	da02      	bge.n	8004688 <Read_Walls+0x188>
 8004682:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004686:	db0e      	blt.n	80046a6 <Read_Walls+0x1a6>
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	f240 7206 	movw	r2, #1798	; 0x706
 800468e:	f203 3383 	addw	r3, r3, #899	; 0x383
 8004692:	4293      	cmp	r3, r2
 8004694:	d807      	bhi.n	80046a6 <Read_Walls+0x1a6>
		vert_walls[x_coord - 1][y_coord] = 1; //left wall
 8004696:	1e6b      	subs	r3, r5, #1
 8004698:	4e35      	ldr	r6, [pc, #212]	; (8004770 <Read_Walls+0x270>)
 800469a:	6822      	ldr	r2, [r4, #0]
 800469c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80046a0:	4433      	add	r3, r6
 80046a2:	2601      	movs	r6, #1
 80046a4:	549e      	strb	r6, [r3, r2]
	}
	if (y_coord > 0 && rf_side >= RIGHT_THRESHOLD) {  //right sensor
 80046a6:	6822      	ldr	r2, [r4, #0]
 80046a8:	b922      	cbnz	r2, 80046b4 <Read_Walls+0x1b4>
		horiz_walls[x_coord][y_coord - 1] = 1; //up wall
	}
	if (y_coord < Y_MAZE_SIZE - 1 && lf_side >= LEFT_THRESHOLD) {//left sensor
 80046aa:	f5b1 7f61 	cmp.w	r1, #900	; 0x384
 80046ae:	da0e      	bge.n	80046ce <Read_Walls+0x1ce>
 80046b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

case WEST: //facing left
	if (x_coord > 0 && (front_l >= FRONT_THRESHOLD || front_r >= FRONT_THRESHOLD) && abs(front_l - front_r) < DIFFERENTIAL) { //front sensor
		vert_walls[x_coord - 1][y_coord] = 1; //left wall
	}
	if (y_coord > 0 && rf_side >= RIGHT_THRESHOLD) {  //right sensor
 80046b4:	f5b0 7f61 	cmp.w	r0, #900	; 0x384
 80046b8:	db06      	blt.n	80046c8 <Read_Walls+0x1c8>
		horiz_walls[x_coord][y_coord - 1] = 1; //up wall
 80046ba:	4b2c      	ldr	r3, [pc, #176]	; (800476c <Read_Walls+0x26c>)
 80046bc:	2001      	movs	r0, #1
 80046be:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80046c2:	4413      	add	r3, r2
 80046c4:	f803 0c01 	strb.w	r0, [r3, #-1]
	}
	if (y_coord < Y_MAZE_SIZE - 1 && lf_side >= LEFT_THRESHOLD) {//left sensor
 80046c8:	2a03      	cmp	r2, #3
 80046ca:	d837      	bhi.n	800473c <Read_Walls+0x23c>
 80046cc:	e7ed      	b.n	80046aa <Read_Walls+0x1aa>
		horiz_walls[x_coord][y_coord] = 1; //down wall
 80046ce:	4b27      	ldr	r3, [pc, #156]	; (800476c <Read_Walls+0x26c>)
 80046d0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80046d4:	2301      	movs	r3, #1
 80046d6:	54ab      	strb	r3, [r5, r2]
 80046d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}
	break;

case EAST: //facing right
	if (x_coord < X_MAZE_SIZE - 1 && (front_l >= FRONT_THRESHOLD || front_r >= FRONT_THRESHOLD) && abs(front_l - front_r) < DIFFERENTIAL) { //front sensor
 80046dc:	682d      	ldr	r5, [r5, #0]
 80046de:	2d03      	cmp	r5, #3
 80046e0:	d813      	bhi.n	800470a <Read_Walls+0x20a>
 80046e2:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 80046e6:	da02      	bge.n	80046ee <Read_Walls+0x1ee>
 80046e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80046ec:	db0d      	blt.n	800470a <Read_Walls+0x20a>
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	f240 7206 	movw	r2, #1798	; 0x706
 80046f4:	f203 3383 	addw	r3, r3, #899	; 0x383
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d806      	bhi.n	800470a <Read_Walls+0x20a>
		vert_walls[x_coord][y_coord] = 1; //right wall
 80046fc:	4e1c      	ldr	r6, [pc, #112]	; (8004770 <Read_Walls+0x270>)
 80046fe:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8004702:	6822      	ldr	r2, [r4, #0]
 8004704:	4433      	add	r3, r6
 8004706:	2601      	movs	r6, #1
 8004708:	549e      	strb	r6, [r3, r2]
		}
	if (y_coord < Y_MAZE_SIZE - 1 && rf_side >= RIGHT_THRESHOLD) { //right sensor
 800470a:	6823      	ldr	r3, [r4, #0]
 800470c:	2b03      	cmp	r3, #3
 800470e:	d904      	bls.n	800471a <Read_Walls+0x21a>
		horiz_walls[x_coord][y_coord] = 1; //down wall
	}
	if (y_coord > 0 && lf_side >= LEFT_THRESHOLD) {  //left sensor
 8004710:	f5b1 7f61 	cmp.w	r1, #900	; 0x384
 8004714:	da0b      	bge.n	800472e <Read_Walls+0x22e>
 8004716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

case EAST: //facing right
	if (x_coord < X_MAZE_SIZE - 1 && (front_l >= FRONT_THRESHOLD || front_r >= FRONT_THRESHOLD) && abs(front_l - front_r) < DIFFERENTIAL) { //front sensor
		vert_walls[x_coord][y_coord] = 1; //right wall
		}
	if (y_coord < Y_MAZE_SIZE - 1 && rf_side >= RIGHT_THRESHOLD) { //right sensor
 800471a:	f5b0 7f61 	cmp.w	r0, #900	; 0x384
		horiz_walls[x_coord][y_coord] = 1; //down wall
 800471e:	bfa1      	itttt	ge
 8004720:	4a12      	ldrge	r2, [pc, #72]	; (800476c <Read_Walls+0x26c>)
 8004722:	2001      	movge	r0, #1
 8004724:	eb02 0285 	addge.w	r2, r2, r5, lsl #2
 8004728:	54d0      	strbge	r0, [r2, r3]
	}
	if (y_coord > 0 && lf_side >= LEFT_THRESHOLD) {  //left sensor
 800472a:	b13b      	cbz	r3, 800473c <Read_Walls+0x23c>
 800472c:	e7f0      	b.n	8004710 <Read_Walls+0x210>
		horiz_walls[x_coord][y_coord - 1] = 1; //up wall
 800472e:	4a0f      	ldr	r2, [pc, #60]	; (800476c <Read_Walls+0x26c>)
 8004730:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8004734:	2201      	movs	r2, #1
 8004736:	442b      	add	r3, r5
 8004738:	f803 2c01 	strb.w	r2, [r3, #-1]
 800473c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004740:	20000ab8 	.word	0x20000ab8
 8004744:	20000010 	.word	0x20000010
 8004748:	200031f4 	.word	0x200031f4
 800474c:	20000ac0 	.word	0x20000ac0
 8004750:	20001bcc 	.word	0x20001bcc
 8004754:	20001bd8 	.word	0x20001bd8
 8004758:	20000998 	.word	0x20000998
 800475c:	200008d0 	.word	0x200008d0
 8004760:	20000ac4 	.word	0x20000ac4
 8004764:	20000874 	.word	0x20000874
 8004768:	20001b08 	.word	0x20001b08
 800476c:	200008dc 	.word	0x200008dc
 8004770:	20000b20 	.word	0x20000b20
 8004774:	20000878 	.word	0x20000878

08004778 <Stop_IR>:
     Error_Handler();
  }

}

void Stop_IR() {
 8004778:	b508      	push	{r3, lr}

adc_conv = TRUE;
 800477a:	2201      	movs	r2, #1
 800477c:	4b04      	ldr	r3, [pc, #16]	; (8004790 <Stop_IR+0x18>)
if(HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 800477e:	4805      	ldr	r0, [pc, #20]	; (8004794 <Stop_IR+0x1c>)

}

void Stop_IR() {

adc_conv = TRUE;
 8004780:	601a      	str	r2, [r3, #0]
if(HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 8004782:	f7fb ff2d 	bl	80005e0 <HAL_ADC_Stop_DMA>
 8004786:	b108      	cbz	r0, 800478c <Stop_IR+0x14>
  {
     Error_Handler();
 8004788:	f7ff fcac 	bl	80040e4 <Error_Handler>
 800478c:	bd08      	pop	{r3, pc}
 800478e:	bf00      	nop
 8004790:	20000b38 	.word	0x20000b38
 8004794:	20002c4c 	.word	0x20002c4c

08004798 <HAL_ADC_ConvCpltCallback>:

}

//ADC interrupt handler. Runs when all four channels have been converted
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* handle)
{
 8004798:	b508      	push	{r3, lr}
	Stop_IR();
 800479a:	f7ff ffed 	bl	8004778 <Stop_IR>
	l = ADC_valbuffer[ADC_VAL_BUFFER_LENGTH - 4];
 800479e:	4b07      	ldr	r3, [pc, #28]	; (80047bc <HAL_ADC_ConvCpltCallback+0x24>)
 80047a0:	4a07      	ldr	r2, [pc, #28]	; (80047c0 <HAL_ADC_ConvCpltCallback+0x28>)
 80047a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047a4:	6011      	str	r1, [r2, #0]
	lf = ADC_valbuffer[ADC_VAL_BUFFER_LENGTH - 3];
 80047a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80047a8:	4a06      	ldr	r2, [pc, #24]	; (80047c4 <HAL_ADC_ConvCpltCallback+0x2c>)
 80047aa:	6011      	str	r1, [r2, #0]
	rf = ADC_valbuffer[ADC_VAL_BUFFER_LENGTH - 2];
 80047ac:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80047ae:	4a06      	ldr	r2, [pc, #24]	; (80047c8 <HAL_ADC_ConvCpltCallback+0x30>)
 80047b0:	6011      	str	r1, [r2, #0]
	r = ADC_valbuffer[ADC_VAL_BUFFER_LENGTH - 1];
 80047b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047b4:	4b05      	ldr	r3, [pc, #20]	; (80047cc <HAL_ADC_ConvCpltCallback+0x34>)
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	bd08      	pop	{r3, pc}
 80047ba:	bf00      	nop
 80047bc:	200031b4 	.word	0x200031b4
 80047c0:	200000a0 	.word	0x200000a0
 80047c4:	20000a50 	.word	0x20000a50
 80047c8:	2000099c 	.word	0x2000099c
 80047cc:	20001328 	.word	0x20001328

080047d0 <Set_Left>:
}

void Set_Left(int speed, int direction) {

	//when switching directions, PWM polarity switches
	if (direction == FORWARD) {
 80047d0:	2901      	cmp	r1, #1
	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	TIM_OC_InitTypeDef tim2config;

	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047d2:	f04f 0200 	mov.w	r2, #0

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	TIM_OC_InitTypeDef tim2config;

	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
 80047d6:	f04f 0360 	mov.w	r3, #96	; 0x60

void Set_Left(int speed, int direction) {

	//when switching directions, PWM polarity switches
	if (direction == FORWARD) {
		speed = 665 - speed;
 80047da:	bf08      	it	eq
 80047dc:	f5c0 7026 	rsbeq	r0, r0, #664	; 0x298
		cur_move = FWD; //reset to default direction
		next_move = FWD;
	}
}

void Set_Left(int speed, int direction) {
 80047e0:	b510      	push	{r4, lr}

	//when switching directions, PWM polarity switches
	if (direction == FORWARD) {
		speed = 665 - speed;
 80047e2:	bf08      	it	eq
 80047e4:	3001      	addeq	r0, #1
		cur_move = FWD; //reset to default direction
		next_move = FWD;
	}
}

void Set_Left(int speed, int direction) {
 80047e6:	b088      	sub	sp, #32
 80047e8:	460c      	mov	r4, r1
	}

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	TIM_OC_InitTypeDef tim2config;

	tim2config.Pulse = speed;
 80047ea:	9002      	str	r0, [sp, #8]
	tim2config.OCMode = TIM_OCMODE_PWM1;
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
	tim2config.OCFastMode = TIM_OCFAST_DISABLE;
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &tim2config, TIM_CHANNEL_1) != HAL_OK)
 80047ec:	a901      	add	r1, sp, #4
 80047ee:	480a      	ldr	r0, [pc, #40]	; (8004818 <Set_Left+0x48>)

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	TIM_OC_InitTypeDef tim2config;

	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
 80047f0:	9301      	str	r3, [sp, #4]
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047f2:	9203      	str	r2, [sp, #12]
	tim2config.OCFastMode = TIM_OCFAST_DISABLE;
 80047f4:	9205      	str	r2, [sp, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &tim2config, TIM_CHANNEL_1) != HAL_OK)
 80047f6:	f7fd ffe7 	bl	80027c8 <HAL_TIM_PWM_ConfigChannel>
 80047fa:	4601      	mov	r1, r0
 80047fc:	b108      	cbz	r0, 8004802 <Set_Left+0x32>
	  {
	     Error_Handler();
 80047fe:	f7ff fc71 	bl	80040e4 <Error_Handler>
	  }

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8004802:	4805      	ldr	r0, [pc, #20]	; (8004818 <Set_Left+0x48>)
 8004804:	f7fd ff76 	bl	80026f4 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, LDIC_Pin, direction);
 8004808:	2102      	movs	r1, #2
 800480a:	b2e2      	uxtb	r2, r4
 800480c:	4803      	ldr	r0, [pc, #12]	; (800481c <Set_Left+0x4c>)
 800480e:	f7fc fcd7 	bl	80011c0 <HAL_GPIO_WritePin>

}
 8004812:	b008      	add	sp, #32
 8004814:	bd10      	pop	{r4, pc}
 8004816:	bf00      	nop
 8004818:	200033a4 	.word	0x200033a4
 800481c:	40020000 	.word	0x40020000

08004820 <Set_Right>:

//when switching directions, PWM polarity switches
void Set_Right(int speed, int direction) {

	if (direction == FORWARD) {
 8004820:	2901      	cmp	r1, #1
	}

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
	TIM_OC_InitTypeDef tim2config;
	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
 8004822:	f04f 0360 	mov.w	r3, #96	; 0x60
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
	tim2config.OCFastMode = TIM_OCFAST_DISABLE;

	if (HAL_TIM_PWM_ConfigChannel(&htim2, &tim2config, TIM_CHANNEL_3) != HAL_OK)
 8004826:	f04f 0208 	mov.w	r2, #8

//when switching directions, PWM polarity switches
void Set_Right(int speed, int direction) {

	if (direction == FORWARD) {
			speed = 665 - speed;
 800482a:	bf08      	it	eq
 800482c:	f5c0 7026 	rsbeq	r0, r0, #664	; 0x298
	HAL_GPIO_WritePin(GPIOA, LDIC_Pin, direction);

}

//when switching directions, PWM polarity switches
void Set_Right(int speed, int direction) {
 8004830:	b510      	push	{r4, lr}
 8004832:	b088      	sub	sp, #32

	if (direction == FORWARD) {
			speed = 665 - speed;
 8004834:	bf08      	it	eq
 8004836:	3001      	addeq	r0, #1
	HAL_GPIO_WritePin(GPIOA, LDIC_Pin, direction);

}

//when switching directions, PWM polarity switches
void Set_Right(int speed, int direction) {
 8004838:	460c      	mov	r4, r1
	}

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
	TIM_OC_InitTypeDef tim2config;
	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
 800483a:	9301      	str	r3, [sp, #4]
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800483c:	2300      	movs	r3, #0
			speed = 665 - speed;
	}

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
	TIM_OC_InitTypeDef tim2config;
	tim2config.Pulse = speed;
 800483e:	9002      	str	r0, [sp, #8]
	tim2config.OCMode = TIM_OCMODE_PWM1;
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
	tim2config.OCFastMode = TIM_OCFAST_DISABLE;

	if (HAL_TIM_PWM_ConfigChannel(&htim2, &tim2config, TIM_CHANNEL_3) != HAL_OK)
 8004840:	a901      	add	r1, sp, #4
 8004842:	4809      	ldr	r0, [pc, #36]	; (8004868 <Set_Right+0x48>)

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
	TIM_OC_InitTypeDef tim2config;
	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004844:	9303      	str	r3, [sp, #12]
	tim2config.OCFastMode = TIM_OCFAST_DISABLE;
 8004846:	9305      	str	r3, [sp, #20]

	if (HAL_TIM_PWM_ConfigChannel(&htim2, &tim2config, TIM_CHANNEL_3) != HAL_OK)
 8004848:	f7fd ffbe 	bl	80027c8 <HAL_TIM_PWM_ConfigChannel>
 800484c:	b108      	cbz	r0, 8004852 <Set_Right+0x32>
	{
	   Error_Handler();
 800484e:	f7ff fc49 	bl	80040e4 <Error_Handler>
	}

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8004852:	2108      	movs	r1, #8
 8004854:	4804      	ldr	r0, [pc, #16]	; (8004868 <Set_Right+0x48>)
 8004856:	f7fd ff4d 	bl	80026f4 <HAL_TIM_PWM_Start>

#if MOUSE_REV == 69
	HAL_GPIO_WritePin(GPIOA, RDIC_Pin, direction);
 800485a:	2108      	movs	r1, #8
 800485c:	b2e2      	uxtb	r2, r4
 800485e:	4803      	ldr	r0, [pc, #12]	; (800486c <Set_Right+0x4c>)
 8004860:	f7fc fcae 	bl	80011c0 <HAL_GPIO_WritePin>
#else
	HAL_GPIO_WritePin(GPIOA, RDIC_Pin, !direction);
#endif

}
 8004864:	b008      	add	sp, #32
 8004866:	bd10      	pop	{r4, pc}
 8004868:	200033a4 	.word	0x200033a4
 800486c:	40020000 	.word	0x40020000

08004870 <Forward_Search>:

}

void Forward_Search() {

	if (transition_flag == TRUE) { //if theres a transition sense use this position instead
 8004870:	4a46      	ldr	r2, [pc, #280]	; (800498c <Forward_Search+0x11c>)
 8004872:	6813      	ldr	r3, [r2, #0]
 8004874:	2b01      	cmp	r3, #1
 8004876:	4b46      	ldr	r3, [pc, #280]	; (8004990 <Forward_Search+0x120>)
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, OFF);


}

void Forward_Search() {
 8004878:	b570      	push	{r4, r5, r6, lr}

	if (transition_flag == TRUE) { //if theres a transition sense use this position instead
		if (fwd_flag == FALSE && (lenc_diff_corr >= l_dist*3/4 || renc_diff_corr >= r_dist*3/4)) { //330
 800487a:	6819      	ldr	r1, [r3, #0]

}

void Forward_Search() {

	if (transition_flag == TRUE) { //if theres a transition sense use this position instead
 800487c:	d146      	bne.n	800490c <Forward_Search+0x9c>
		if (fwd_flag == FALSE && (lenc_diff_corr >= l_dist*3/4 || renc_diff_corr >= r_dist*3/4)) { //330
 800487e:	bb39      	cbnz	r1, 80048d0 <Forward_Search+0x60>
 8004880:	4a44      	ldr	r2, [pc, #272]	; (8004994 <Forward_Search+0x124>)
 8004882:	4945      	ldr	r1, [pc, #276]	; (8004998 <Forward_Search+0x128>)
 8004884:	6812      	ldr	r2, [r2, #0]
 8004886:	6809      	ldr	r1, [r1, #0]
 8004888:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800488c:	ebb1 0f92 	cmp.w	r1, r2, lsr #2
 8004890:	d208      	bcs.n	80048a4 <Forward_Search+0x34>
 8004892:	4a42      	ldr	r2, [pc, #264]	; (800499c <Forward_Search+0x12c>)
 8004894:	4942      	ldr	r1, [pc, #264]	; (80049a0 <Forward_Search+0x130>)
 8004896:	6812      	ldr	r2, [r2, #0]
 8004898:	6809      	ldr	r1, [r1, #0]
 800489a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800489e:	ebb1 0f92 	cmp.w	r1, r2, lsr #2
 80048a2:	d371      	bcc.n	8004988 <Forward_Search+0x118>
			fwd_flag = TRUE;
 80048a4:	2201      	movs	r2, #1
 80048a6:	601a      	str	r2, [r3, #0]
			if (done_flag == TRUE) {
 80048a8:	4b3e      	ldr	r3, [pc, #248]	; (80049a4 <Forward_Search+0x134>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d103      	bne.n	80048b8 <Forward_Search+0x48>
				next_move = DEAD;
 80048b0:	2203      	movs	r2, #3
 80048b2:	4b3d      	ldr	r3, [pc, #244]	; (80049a8 <Forward_Search+0x138>)
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	e007      	b.n	80048c8 <Forward_Search+0x58>
			}
			else {
			Read_Walls();
 80048b8:	f7ff fe22 	bl	8004500 <Read_Walls>
			next_move = Get_Next_Move();
 80048bc:	f7ff fa3c 	bl	8003d38 <Get_Next_Move>
 80048c0:	4b39      	ldr	r3, [pc, #228]	; (80049a8 <Forward_Search+0x138>)
 80048c2:	6018      	str	r0, [r3, #0]
			Update_Position();
 80048c4:	f7fe fefa 	bl	80036bc <Update_Position>
		    break;
		}
		cur_move = next_move; //execute next move
	}
	}
}
 80048c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			Read_Walls();
			next_move = Get_Next_Move();
			Update_Position();
			}
#if DEBUG == TRUE
		Save_State();
 80048cc:	f7fe bcc4 	b.w	8003258 <Save_State>
#endif
		}

		else if (fwd_flag == TRUE && (lenc_diff_corr >= l_dist || renc_diff_corr >= r_dist)) { //620
 80048d0:	2901      	cmp	r1, #1
 80048d2:	d159      	bne.n	8004988 <Forward_Search+0x118>
 80048d4:	4930      	ldr	r1, [pc, #192]	; (8004998 <Forward_Search+0x128>)
 80048d6:	6808      	ldr	r0, [r1, #0]
 80048d8:	492e      	ldr	r1, [pc, #184]	; (8004994 <Forward_Search+0x124>)
 80048da:	6809      	ldr	r1, [r1, #0]
 80048dc:	4288      	cmp	r0, r1
 80048de:	d205      	bcs.n	80048ec <Forward_Search+0x7c>
 80048e0:	492f      	ldr	r1, [pc, #188]	; (80049a0 <Forward_Search+0x130>)
 80048e2:	6808      	ldr	r0, [r1, #0]
 80048e4:	492d      	ldr	r1, [pc, #180]	; (800499c <Forward_Search+0x12c>)
 80048e6:	6809      	ldr	r1, [r1, #0]
 80048e8:	4288      	cmp	r0, r1
 80048ea:	d34d      	bcc.n	8004988 <Forward_Search+0x118>

			prev_l_count = l_count; // Save encoder values
 80048ec:	492f      	ldr	r1, [pc, #188]	; (80049ac <Forward_Search+0x13c>)
			prev_r_count = r_count;
			fwd_flag = FALSE;
 80048ee:	2600      	movs	r6, #0
#endif
		}

		else if (fwd_flag == TRUE && (lenc_diff_corr >= l_dist || renc_diff_corr >= r_dist)) { //620

			prev_l_count = l_count; // Save encoder values
 80048f0:	6808      	ldr	r0, [r1, #0]
 80048f2:	492f      	ldr	r1, [pc, #188]	; (80049b0 <Forward_Search+0x140>)
			prev_r_count = r_count;
			fwd_flag = FALSE;
 80048f4:	601e      	str	r6, [r3, #0]
#endif
		}

		else if (fwd_flag == TRUE && (lenc_diff_corr >= l_dist || renc_diff_corr >= r_dist)) { //620

			prev_l_count = l_count; // Save encoder values
 80048f6:	6008      	str	r0, [r1, #0]
			prev_r_count = r_count;
 80048f8:	492e      	ldr	r1, [pc, #184]	; (80049b4 <Forward_Search+0x144>)
			fwd_flag = FALSE;
			transition_flag = FALSE;
 80048fa:	6016      	str	r6, [r2, #0]
		}

		else if (fwd_flag == TRUE && (lenc_diff_corr >= l_dist || renc_diff_corr >= r_dist)) { //620

			prev_l_count = l_count; // Save encoder values
			prev_r_count = r_count;
 80048fc:	6808      	ldr	r0, [r1, #0]
 80048fe:	492e      	ldr	r1, [pc, #184]	; (80049b8 <Forward_Search+0x148>)
 8004900:	6008      	str	r0, [r1, #0]
			fwd_flag = FALSE;
			transition_flag = FALSE;
			Clear_Buffers();
 8004902:	f7fe fb3b 	bl	8002f7c <Clear_Buffers>
			Turn_Off_Lights();
 8004906:	f7ff f9dd 	bl	8003cc4 <Turn_Off_Lights>
 800490a:	e024      	b.n	8004956 <Forward_Search+0xe6>
		}
	}

	else { //if theres no transition sensed, then just use absolute position

	if (fwd_flag == FALSE && (lenc_diff >= F_ENC1 || renc_diff >= F_ENC1))
 800490c:	b951      	cbnz	r1, 8004924 <Forward_Search+0xb4>
 800490e:	4a2b      	ldr	r2, [pc, #172]	; (80049bc <Forward_Search+0x14c>)
 8004910:	6812      	ldr	r2, [r2, #0]
 8004912:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
 8004916:	d2c5      	bcs.n	80048a4 <Forward_Search+0x34>
 8004918:	4a29      	ldr	r2, [pc, #164]	; (80049c0 <Forward_Search+0x150>)
 800491a:	6812      	ldr	r2, [r2, #0]
 800491c:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
 8004920:	d332      	bcc.n	8004988 <Forward_Search+0x118>
 8004922:	e7bf      	b.n	80048a4 <Forward_Search+0x34>
#if DEBUG == TRUE
		Save_State();
#endif
	}

	else if (fwd_flag == TRUE && (lenc_diff >= F_ENC2 || renc_diff >= F_ENC2))
 8004924:	2901      	cmp	r1, #1
 8004926:	d12f      	bne.n	8004988 <Forward_Search+0x118>
 8004928:	4924      	ldr	r1, [pc, #144]	; (80049bc <Forward_Search+0x14c>)
 800492a:	6809      	ldr	r1, [r1, #0]
 800492c:	f5b1 7f2e 	cmp.w	r1, #696	; 0x2b8
 8004930:	d204      	bcs.n	800493c <Forward_Search+0xcc>
 8004932:	4923      	ldr	r1, [pc, #140]	; (80049c0 <Forward_Search+0x150>)
 8004934:	6809      	ldr	r1, [r1, #0]
 8004936:	f5b1 7f2e 	cmp.w	r1, #696	; 0x2b8
 800493a:	d325      	bcc.n	8004988 <Forward_Search+0x118>
	{ //left and right wheel moving at same speed. If statement checks if distance has been covered

		//HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);

		prev_l_count = l_count; //no change. keep going straight. Save encoder values
 800493c:	491b      	ldr	r1, [pc, #108]	; (80049ac <Forward_Search+0x13c>)
		prev_r_count = r_count;
		fwd_flag = FALSE;
 800493e:	2600      	movs	r6, #0
	else if (fwd_flag == TRUE && (lenc_diff >= F_ENC2 || renc_diff >= F_ENC2))
	{ //left and right wheel moving at same speed. If statement checks if distance has been covered

		//HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);

		prev_l_count = l_count; //no change. keep going straight. Save encoder values
 8004940:	6808      	ldr	r0, [r1, #0]
 8004942:	491b      	ldr	r1, [pc, #108]	; (80049b0 <Forward_Search+0x140>)
		prev_r_count = r_count;
		fwd_flag = FALSE;
 8004944:	601e      	str	r6, [r3, #0]
	else if (fwd_flag == TRUE && (lenc_diff >= F_ENC2 || renc_diff >= F_ENC2))
	{ //left and right wheel moving at same speed. If statement checks if distance has been covered

		//HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);

		prev_l_count = l_count; //no change. keep going straight. Save encoder values
 8004946:	6008      	str	r0, [r1, #0]
		prev_r_count = r_count;
 8004948:	491a      	ldr	r1, [pc, #104]	; (80049b4 <Forward_Search+0x144>)
		fwd_flag = FALSE;
		transition_flag = FALSE;
 800494a:	6016      	str	r6, [r2, #0]
	{ //left and right wheel moving at same speed. If statement checks if distance has been covered

		//HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);

		prev_l_count = l_count; //no change. keep going straight. Save encoder values
		prev_r_count = r_count;
 800494c:	6808      	ldr	r0, [r1, #0]
 800494e:	491a      	ldr	r1, [pc, #104]	; (80049b8 <Forward_Search+0x148>)
 8004950:	6008      	str	r0, [r1, #0]
		fwd_flag = FALSE;
		transition_flag = FALSE;
		Clear_Buffers();
 8004952:	f7fe fb13 	bl	8002f7c <Clear_Buffers>

		switch (next_move) { //check if motor speeds have to change with next move
 8004956:	4b14      	ldr	r3, [pc, #80]	; (80049a8 <Forward_Search+0x138>)
 8004958:	681d      	ldr	r5, [r3, #0]
 800495a:	461c      	mov	r4, r3
 800495c:	2d01      	cmp	r5, #1
 800495e:	d008      	beq.n	8004972 <Forward_Search+0x102>
 8004960:	2d02      	cmp	r5, #2
 8004962:	d10e      	bne.n	8004982 <Forward_Search+0x112>
		case FWD:
			break;

		case RIGHT:
			Set_Left(RIGHT_L, FORWARD); //need to make right pivot
 8004964:	2101      	movs	r1, #1
 8004966:	20c8      	movs	r0, #200	; 0xc8
 8004968:	f7ff ff32 	bl	80047d0 <Set_Left>
			Set_Right(RIGHT_R, FORWARD);
 800496c:	2101      	movs	r1, #1
 800496e:	4630      	mov	r0, r6
 8004970:	e005      	b.n	800497e <Forward_Search+0x10e>
			break;

		case LEFT:
		    Set_Left(LEFT_L, FORWARD); //need to make left pivot
 8004972:	4629      	mov	r1, r5
 8004974:	4630      	mov	r0, r6
 8004976:	f7ff ff2b 	bl	80047d0 <Set_Left>
		    Set_Right(LEFT_R, FORWARD);
 800497a:	4629      	mov	r1, r5
 800497c:	20c8      	movs	r0, #200	; 0xc8
 800497e:	f7ff ff4f 	bl	8004820 <Set_Right>
		    break;

		case DEAD:
		    break;
		}
		cur_move = next_move; //execute next move
 8004982:	6822      	ldr	r2, [r4, #0]
 8004984:	4b0f      	ldr	r3, [pc, #60]	; (80049c4 <Forward_Search+0x154>)
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	bd70      	pop	{r4, r5, r6, pc}
 800498a:	bf00      	nop
 800498c:	20001b18 	.word	0x20001b18
 8004990:	2000009c 	.word	0x2000009c
 8004994:	20003334 	.word	0x20003334
 8004998:	200009a0 	.word	0x200009a0
 800499c:	20002568 	.word	0x20002568
 80049a0:	20001b1c 	.word	0x20001b1c
 80049a4:	20000b3c 	.word	0x20000b3c
 80049a8:	20001be4 	.word	0x20001be4
 80049ac:	20001b10 	.word	0x20001b10
 80049b0:	2000251c 	.word	0x2000251c
 80049b4:	20000acc 	.word	0x20000acc
 80049b8:	200024b0 	.word	0x200024b0
 80049bc:	200008d4 	.word	0x200008d4
 80049c0:	20000aa4 	.word	0x20000aa4
 80049c4:	20001b70 	.word	0x20001b70

080049c8 <Forward_Speed>:
	}
}

void Forward_Speed() {

	if (transition_flag == TRUE) { //if theres a transition sense use this position instead
 80049c8:	4a4a      	ldr	r2, [pc, #296]	; (8004af4 <Forward_Speed+0x12c>)
 80049ca:	6813      	ldr	r3, [r2, #0]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	4b4a      	ldr	r3, [pc, #296]	; (8004af8 <Forward_Speed+0x130>)
		cur_move = next_move; //execute next move
	}
	}
}

void Forward_Speed() {
 80049d0:	b570      	push	{r4, r5, r6, lr}

	if (transition_flag == TRUE) { //if theres a transition sense use this position instead
		if (fwd_flag == FALSE && (lenc_diff_corr >= l_dist*3/4 || renc_diff_corr >= r_dist*3/4)) { //330
 80049d2:	6819      	ldr	r1, [r3, #0]
	}
}

void Forward_Speed() {

	if (transition_flag == TRUE) { //if theres a transition sense use this position instead
 80049d4:	d11d      	bne.n	8004a12 <Forward_Speed+0x4a>
		if (fwd_flag == FALSE && (lenc_diff_corr >= l_dist*3/4 || renc_diff_corr >= r_dist*3/4)) { //330
 80049d6:	2900      	cmp	r1, #0
 80049d8:	d134      	bne.n	8004a44 <Forward_Speed+0x7c>
 80049da:	4a48      	ldr	r2, [pc, #288]	; (8004afc <Forward_Speed+0x134>)
 80049dc:	4948      	ldr	r1, [pc, #288]	; (8004b00 <Forward_Speed+0x138>)
 80049de:	6812      	ldr	r2, [r2, #0]
 80049e0:	6809      	ldr	r1, [r1, #0]
 80049e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80049e6:	ebb1 0f92 	cmp.w	r1, r2, lsr #2
 80049ea:	d208      	bcs.n	80049fe <Forward_Speed+0x36>
 80049ec:	4a45      	ldr	r2, [pc, #276]	; (8004b04 <Forward_Speed+0x13c>)
 80049ee:	4946      	ldr	r1, [pc, #280]	; (8004b08 <Forward_Speed+0x140>)
 80049f0:	6812      	ldr	r2, [r2, #0]
 80049f2:	6809      	ldr	r1, [r1, #0]
 80049f4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80049f8:	ebb1 0f92 	cmp.w	r1, r2, lsr #2
 80049fc:	d378      	bcc.n	8004af0 <Forward_Speed+0x128>
			fwd_flag = TRUE;
 80049fe:	2201      	movs	r2, #1
 8004a00:	601a      	str	r2, [r3, #0]
			if (done_flag == TRUE) {
 8004a02:	4b42      	ldr	r3, [pc, #264]	; (8004b0c <Forward_Speed+0x144>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d112      	bne.n	8004a30 <Forward_Speed+0x68>
				next_move = DEAD;
 8004a0a:	2203      	movs	r2, #3
 8004a0c:	4b40      	ldr	r3, [pc, #256]	; (8004b10 <Forward_Speed+0x148>)
 8004a0e:	601a      	str	r2, [r3, #0]
 8004a10:	e014      	b.n	8004a3c <Forward_Speed+0x74>
		}
	}

	else { //if theres no transition sensed, then just use absolute position

	if (fwd_flag == FALSE && (lenc_diff >= F_ENC1 || renc_diff >= F_ENC1))
 8004a12:	2900      	cmp	r1, #0
 8004a14:	d13a      	bne.n	8004a8c <Forward_Speed+0xc4>
 8004a16:	4a3f      	ldr	r2, [pc, #252]	; (8004b14 <Forward_Speed+0x14c>)
 8004a18:	6812      	ldr	r2, [r2, #0]
 8004a1a:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
 8004a1e:	d32f      	bcc.n	8004a80 <Forward_Speed+0xb8>
	{
		fwd_flag = TRUE;
 8004a20:	2201      	movs	r2, #1
 8004a22:	601a      	str	r2, [r3, #0]
		if (done_flag == TRUE) {
 8004a24:	4b39      	ldr	r3, [pc, #228]	; (8004b0c <Forward_Speed+0x144>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d0ee      	beq.n	8004a0a <Forward_Speed+0x42>
			next_move = DEAD;
		}
		else {
			Read_Walls();
 8004a2c:	f7ff fd68 	bl	8004500 <Read_Walls>
			fwd_flag = TRUE;
			if (done_flag == TRUE) {
				next_move = DEAD;
			}
			else {
			next_move = Get_Next_Move();
 8004a30:	f7ff f982 	bl	8003d38 <Get_Next_Move>
 8004a34:	4b36      	ldr	r3, [pc, #216]	; (8004b10 <Forward_Speed+0x148>)
 8004a36:	6018      	str	r0, [r3, #0]
			Update_Position();
 8004a38:	f7fe fe40 	bl	80036bc <Update_Position>
		    break;
		}
		cur_move = next_move; //execute next move
	}
	}
}
 8004a3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			else {
			next_move = Get_Next_Move();
			Update_Position();
			}
#if DEBUG == TRUE
		Save_State();
 8004a40:	f7fe bc0a 	b.w	8003258 <Save_State>
#endif
		}

		else if (fwd_flag == TRUE && (lenc_diff_corr >= l_dist || renc_diff_corr >= r_dist)) { //620
 8004a44:	2901      	cmp	r1, #1
 8004a46:	d153      	bne.n	8004af0 <Forward_Speed+0x128>
 8004a48:	492d      	ldr	r1, [pc, #180]	; (8004b00 <Forward_Speed+0x138>)
 8004a4a:	6808      	ldr	r0, [r1, #0]
 8004a4c:	492b      	ldr	r1, [pc, #172]	; (8004afc <Forward_Speed+0x134>)
 8004a4e:	6809      	ldr	r1, [r1, #0]
 8004a50:	4288      	cmp	r0, r1
 8004a52:	d205      	bcs.n	8004a60 <Forward_Speed+0x98>
 8004a54:	492c      	ldr	r1, [pc, #176]	; (8004b08 <Forward_Speed+0x140>)
 8004a56:	6808      	ldr	r0, [r1, #0]
 8004a58:	492a      	ldr	r1, [pc, #168]	; (8004b04 <Forward_Speed+0x13c>)
 8004a5a:	6809      	ldr	r1, [r1, #0]
 8004a5c:	4288      	cmp	r0, r1
 8004a5e:	d347      	bcc.n	8004af0 <Forward_Speed+0x128>

			prev_l_count = l_count; // Save encoder values
 8004a60:	492d      	ldr	r1, [pc, #180]	; (8004b18 <Forward_Speed+0x150>)
			prev_r_count = r_count;
			fwd_flag = FALSE;
 8004a62:	2600      	movs	r6, #0
#endif
		}

		else if (fwd_flag == TRUE && (lenc_diff_corr >= l_dist || renc_diff_corr >= r_dist)) { //620

			prev_l_count = l_count; // Save encoder values
 8004a64:	6808      	ldr	r0, [r1, #0]
 8004a66:	492d      	ldr	r1, [pc, #180]	; (8004b1c <Forward_Speed+0x154>)
			prev_r_count = r_count;
			fwd_flag = FALSE;
 8004a68:	601e      	str	r6, [r3, #0]
#endif
		}

		else if (fwd_flag == TRUE && (lenc_diff_corr >= l_dist || renc_diff_corr >= r_dist)) { //620

			prev_l_count = l_count; // Save encoder values
 8004a6a:	6008      	str	r0, [r1, #0]
			prev_r_count = r_count;
 8004a6c:	492c      	ldr	r1, [pc, #176]	; (8004b20 <Forward_Speed+0x158>)
			fwd_flag = FALSE;
			transition_flag = FALSE;
 8004a6e:	6016      	str	r6, [r2, #0]
		}

		else if (fwd_flag == TRUE && (lenc_diff_corr >= l_dist || renc_diff_corr >= r_dist)) { //620

			prev_l_count = l_count; // Save encoder values
			prev_r_count = r_count;
 8004a70:	6808      	ldr	r0, [r1, #0]
 8004a72:	492c      	ldr	r1, [pc, #176]	; (8004b24 <Forward_Speed+0x15c>)
 8004a74:	6008      	str	r0, [r1, #0]
			fwd_flag = FALSE;
			transition_flag = FALSE;
			Clear_Buffers();
 8004a76:	f7fe fa81 	bl	8002f7c <Clear_Buffers>
			Turn_Off_Lights();
 8004a7a:	f7ff f923 	bl	8003cc4 <Turn_Off_Lights>
 8004a7e:	e01e      	b.n	8004abe <Forward_Speed+0xf6>
		}
	}

	else { //if theres no transition sensed, then just use absolute position

	if (fwd_flag == FALSE && (lenc_diff >= F_ENC1 || renc_diff >= F_ENC1))
 8004a80:	4a29      	ldr	r2, [pc, #164]	; (8004b28 <Forward_Speed+0x160>)
 8004a82:	6812      	ldr	r2, [r2, #0]
 8004a84:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
 8004a88:	d332      	bcc.n	8004af0 <Forward_Speed+0x128>
 8004a8a:	e7c9      	b.n	8004a20 <Forward_Speed+0x58>
#if DEBUG == TRUE
		Save_State();
#endif
	}

	else if (fwd_flag == TRUE && (lenc_diff >= F_ENC2 || renc_diff >= F_ENC2))
 8004a8c:	2901      	cmp	r1, #1
 8004a8e:	d12f      	bne.n	8004af0 <Forward_Speed+0x128>
 8004a90:	4920      	ldr	r1, [pc, #128]	; (8004b14 <Forward_Speed+0x14c>)
 8004a92:	6809      	ldr	r1, [r1, #0]
 8004a94:	f5b1 7f2e 	cmp.w	r1, #696	; 0x2b8
 8004a98:	d204      	bcs.n	8004aa4 <Forward_Speed+0xdc>
 8004a9a:	4923      	ldr	r1, [pc, #140]	; (8004b28 <Forward_Speed+0x160>)
 8004a9c:	6809      	ldr	r1, [r1, #0]
 8004a9e:	f5b1 7f2e 	cmp.w	r1, #696	; 0x2b8
 8004aa2:	d325      	bcc.n	8004af0 <Forward_Speed+0x128>
	{ //left and right wheel moving at same speed. If statement checks if distance has been covered

		//HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);

		prev_l_count = l_count; //no change. keep going straight. Save encoder values
 8004aa4:	491c      	ldr	r1, [pc, #112]	; (8004b18 <Forward_Speed+0x150>)
		prev_r_count = r_count;
		fwd_flag = FALSE;
 8004aa6:	2600      	movs	r6, #0
	else if (fwd_flag == TRUE && (lenc_diff >= F_ENC2 || renc_diff >= F_ENC2))
	{ //left and right wheel moving at same speed. If statement checks if distance has been covered

		//HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);

		prev_l_count = l_count; //no change. keep going straight. Save encoder values
 8004aa8:	6808      	ldr	r0, [r1, #0]
 8004aaa:	491c      	ldr	r1, [pc, #112]	; (8004b1c <Forward_Speed+0x154>)
		prev_r_count = r_count;
		fwd_flag = FALSE;
 8004aac:	601e      	str	r6, [r3, #0]
	else if (fwd_flag == TRUE && (lenc_diff >= F_ENC2 || renc_diff >= F_ENC2))
	{ //left and right wheel moving at same speed. If statement checks if distance has been covered

		//HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);

		prev_l_count = l_count; //no change. keep going straight. Save encoder values
 8004aae:	6008      	str	r0, [r1, #0]
		prev_r_count = r_count;
 8004ab0:	491b      	ldr	r1, [pc, #108]	; (8004b20 <Forward_Speed+0x158>)
		fwd_flag = FALSE;
		transition_flag = FALSE;
 8004ab2:	6016      	str	r6, [r2, #0]
	{ //left and right wheel moving at same speed. If statement checks if distance has been covered

		//HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);

		prev_l_count = l_count; //no change. keep going straight. Save encoder values
		prev_r_count = r_count;
 8004ab4:	6808      	ldr	r0, [r1, #0]
 8004ab6:	491b      	ldr	r1, [pc, #108]	; (8004b24 <Forward_Speed+0x15c>)
 8004ab8:	6008      	str	r0, [r1, #0]
		fwd_flag = FALSE;
		transition_flag = FALSE;
		Clear_Buffers();
 8004aba:	f7fe fa5f 	bl	8002f7c <Clear_Buffers>

		switch (next_move) { //check if motor speeds have to change with next move
 8004abe:	4b14      	ldr	r3, [pc, #80]	; (8004b10 <Forward_Speed+0x148>)
 8004ac0:	681d      	ldr	r5, [r3, #0]
 8004ac2:	461c      	mov	r4, r3
 8004ac4:	2d01      	cmp	r5, #1
 8004ac6:	d008      	beq.n	8004ada <Forward_Speed+0x112>
 8004ac8:	2d02      	cmp	r5, #2
 8004aca:	d10e      	bne.n	8004aea <Forward_Speed+0x122>
		case FWD:
			break;

		case RIGHT:
			Set_Left(RIGHT_L, FORWARD); //need to make right pivot
 8004acc:	2101      	movs	r1, #1
 8004ace:	20c8      	movs	r0, #200	; 0xc8
 8004ad0:	f7ff fe7e 	bl	80047d0 <Set_Left>
			Set_Right(RIGHT_R, FORWARD);
 8004ad4:	2101      	movs	r1, #1
 8004ad6:	4630      	mov	r0, r6
 8004ad8:	e005      	b.n	8004ae6 <Forward_Speed+0x11e>
			break;

		case LEFT:
		    Set_Left(LEFT_L, FORWARD); //need to make left pivot
 8004ada:	4629      	mov	r1, r5
 8004adc:	4630      	mov	r0, r6
 8004ade:	f7ff fe77 	bl	80047d0 <Set_Left>
		    Set_Right(LEFT_R, FORWARD);
 8004ae2:	4629      	mov	r1, r5
 8004ae4:	20c8      	movs	r0, #200	; 0xc8
 8004ae6:	f7ff fe9b 	bl	8004820 <Set_Right>
		    break;

		case DEAD:
		    break;
		}
		cur_move = next_move; //execute next move
 8004aea:	6822      	ldr	r2, [r4, #0]
 8004aec:	4b0f      	ldr	r3, [pc, #60]	; (8004b2c <Forward_Speed+0x164>)
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	bd70      	pop	{r4, r5, r6, pc}
 8004af2:	bf00      	nop
 8004af4:	20001b18 	.word	0x20001b18
 8004af8:	2000009c 	.word	0x2000009c
 8004afc:	20003334 	.word	0x20003334
 8004b00:	200009a0 	.word	0x200009a0
 8004b04:	20002568 	.word	0x20002568
 8004b08:	20001b1c 	.word	0x20001b1c
 8004b0c:	20000b3c 	.word	0x20000b3c
 8004b10:	20001be4 	.word	0x20001be4
 8004b14:	200008d4 	.word	0x200008d4
 8004b18:	20001b10 	.word	0x20001b10
 8004b1c:	2000251c 	.word	0x2000251c
 8004b20:	20000acc 	.word	0x20000acc
 8004b24:	200024b0 	.word	0x200024b0
 8004b28:	20000aa4 	.word	0x20000aa4
 8004b2c:	20001b70 	.word	0x20001b70

08004b30 <Left_Search>:

	Set_Left(0, FORWARD);
	Set_Right(0, FORWARD);
}

void Left_Search() {
 8004b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	if (l_turnflag == ARRIVE && renc_diff >= LT_RENC_1) { //finished making turn. left and right wheel don't travel at same speeds
 8004b32:	4d3a      	ldr	r5, [pc, #232]	; (8004c1c <Left_Search+0xec>)
 8004b34:	682c      	ldr	r4, [r5, #0]
 8004b36:	462f      	mov	r7, r5
 8004b38:	b9fc      	cbnz	r4, 8004b7a <Left_Search+0x4a>
 8004b3a:	4e39      	ldr	r6, [pc, #228]	; (8004c20 <Left_Search+0xf0>)
 8004b3c:	6833      	ldr	r3, [r6, #0]
 8004b3e:	f5b3 7fed 	cmp.w	r3, #474	; 0x1da
 8004b42:	d969      	bls.n	8004c18 <Left_Search+0xe8>

		Clear_Buffers();
 8004b44:	f7fe fa1a 	bl	8002f7c <Clear_Buffers>
		Set_Left(FWD_L, FORWARD); //finish turn by accelerating forward
 8004b48:	2101      	movs	r1, #1
 8004b4a:	20c8      	movs	r0, #200	; 0xc8
 8004b4c:	f7ff fe40 	bl	80047d0 <Set_Left>
		Set_Right(FWD_R, FORWARD);
 8004b50:	2101      	movs	r1, #1
 8004b52:	20c8      	movs	r0, #200	; 0xc8
 8004b54:	f7ff fe64 	bl	8004820 <Set_Right>
		l_turnflag = PEEK;
 8004b58:	2301      	movs	r3, #1
		prev_l_count = l_count; //save current counters
		prev_r_count = r_count;
		lenc_diff = 0;
		renc_diff = 0;
 8004b5a:	6034      	str	r4, [r6, #0]
	if (l_turnflag == ARRIVE && renc_diff >= LT_RENC_1) { //finished making turn. left and right wheel don't travel at same speeds

		Clear_Buffers();
		Set_Left(FWD_L, FORWARD); //finish turn by accelerating forward
		Set_Right(FWD_R, FORWARD);
		l_turnflag = PEEK;
 8004b5c:	602b      	str	r3, [r5, #0]
		prev_l_count = l_count; //save current counters
 8004b5e:	4b31      	ldr	r3, [pc, #196]	; (8004c24 <Left_Search+0xf4>)
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	4b31      	ldr	r3, [pc, #196]	; (8004c28 <Left_Search+0xf8>)
 8004b64:	601a      	str	r2, [r3, #0]
		prev_r_count = r_count;
 8004b66:	4b31      	ldr	r3, [pc, #196]	; (8004c2c <Left_Search+0xfc>)
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	4b31      	ldr	r3, [pc, #196]	; (8004c30 <Left_Search+0x100>)
 8004b6c:	601a      	str	r2, [r3, #0]
		lenc_diff = 0;
 8004b6e:	4b31      	ldr	r3, [pc, #196]	; (8004c34 <Left_Search+0x104>)
 8004b70:	601c      	str	r4, [r3, #0]
			break;

		}
		cur_move = next_move;
	} //case LEFT
}
 8004b72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		prev_r_count = r_count;
		lenc_diff = 0;
		renc_diff = 0;

#if DEBUG == TRUE
		Save_State();
 8004b76:	f7fe bb6f 	b.w	8003258 <Save_State>
#endif
	}

	else if ((l_turnflag == PEEK) && (lenc_diff >= LT_ENC_2*3/4 || renc_diff >= LT_ENC_2*3/4)) {
 8004b7a:	2c01      	cmp	r4, #1
 8004b7c:	d11b      	bne.n	8004bb6 <Left_Search+0x86>
 8004b7e:	4b2d      	ldr	r3, [pc, #180]	; (8004c34 <Left_Search+0x104>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8004b86:	d804      	bhi.n	8004b92 <Left_Search+0x62>
 8004b88:	4b25      	ldr	r3, [pc, #148]	; (8004c20 <Left_Search+0xf0>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8004b90:	d942      	bls.n	8004c18 <Left_Search+0xe8>

		if (done_flag == TRUE) {
 8004b92:	4b29      	ldr	r3, [pc, #164]	; (8004c38 <Left_Search+0x108>)
 8004b94:	4c29      	ldr	r4, [pc, #164]	; (8004c3c <Left_Search+0x10c>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d102      	bne.n	8004ba2 <Left_Search+0x72>
			next_move = DEAD;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	6023      	str	r3, [r4, #0]
 8004ba0:	e006      	b.n	8004bb0 <Left_Search+0x80>
		}

		else {
			Read_Walls();
 8004ba2:	f7ff fcad 	bl	8004500 <Read_Walls>
			next_move = Get_Next_Move();
 8004ba6:	f7ff f8c7 	bl	8003d38 <Get_Next_Move>
 8004baa:	6020      	str	r0, [r4, #0]
			Update_Position();
 8004bac:	f7fe fd86 	bl	80036bc <Update_Position>
		}
		l_turnflag = EXECUTE;
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	603b      	str	r3, [r7, #0]
 8004bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	else if ((l_turnflag == EXECUTE) && (lenc_diff >= LT_ENC_2 || renc_diff >= LT_ENC_2)) { //made it to same point
 8004bb6:	2c02      	cmp	r4, #2
 8004bb8:	d12e      	bne.n	8004c18 <Left_Search+0xe8>
 8004bba:	4b1e      	ldr	r3, [pc, #120]	; (8004c34 <Left_Search+0x104>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 8004bc2:	d804      	bhi.n	8004bce <Left_Search+0x9e>
 8004bc4:	4b16      	ldr	r3, [pc, #88]	; (8004c20 <Left_Search+0xf0>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 8004bcc:	d924      	bls.n	8004c18 <Left_Search+0xe8>

		l_turnflag = ARRIVE;
 8004bce:	2600      	movs	r6, #0
 8004bd0:	603e      	str	r6, [r7, #0]
#if DEBUG == TRUE
		Save_State();
 8004bd2:	f7fe fb41 	bl	8003258 <Save_State>
#endif
		prev_l_count = l_count; //save current counters
 8004bd6:	4b13      	ldr	r3, [pc, #76]	; (8004c24 <Left_Search+0xf4>)
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	4b13      	ldr	r3, [pc, #76]	; (8004c28 <Left_Search+0xf8>)
 8004bdc:	601a      	str	r2, [r3, #0]
		prev_r_count = r_count;
 8004bde:	4b13      	ldr	r3, [pc, #76]	; (8004c2c <Left_Search+0xfc>)
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	4b13      	ldr	r3, [pc, #76]	; (8004c30 <Left_Search+0x100>)
 8004be4:	601a      	str	r2, [r3, #0]

		switch (next_move) { //need to change direction or nah
 8004be6:	4b15      	ldr	r3, [pc, #84]	; (8004c3c <Left_Search+0x10c>)
 8004be8:	681d      	ldr	r5, [r3, #0]
 8004bea:	461c      	mov	r4, r3
 8004bec:	2d01      	cmp	r5, #1
 8004bee:	d008      	beq.n	8004c02 <Left_Search+0xd2>
 8004bf0:	2d02      	cmp	r5, #2
 8004bf2:	d10e      	bne.n	8004c12 <Left_Search+0xe2>
			Set_Left(LEFT_L, FORWARD); //need to make right turn again
			Set_Right(LEFT_R, FORWARD);
			break;

		case RIGHT:
			Set_Left(RIGHT_L, FORWARD); //need to make right turn again
 8004bf4:	2101      	movs	r1, #1
 8004bf6:	20c8      	movs	r0, #200	; 0xc8
 8004bf8:	f7ff fdea 	bl	80047d0 <Set_Left>
			Set_Right(RIGHT_R, FORWARD);
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	4630      	mov	r0, r6
 8004c00:	e005      	b.n	8004c0e <Left_Search+0xde>
		prev_r_count = r_count;

		switch (next_move) { //need to change direction or nah

		case LEFT:
			Set_Left(LEFT_L, FORWARD); //need to make right turn again
 8004c02:	4629      	mov	r1, r5
 8004c04:	4630      	mov	r0, r6
 8004c06:	f7ff fde3 	bl	80047d0 <Set_Left>
			Set_Right(LEFT_R, FORWARD);
 8004c0a:	4629      	mov	r1, r5
 8004c0c:	20c8      	movs	r0, #200	; 0xc8
			break;

		case RIGHT:
			Set_Left(RIGHT_L, FORWARD); //need to make right turn again
			Set_Right(RIGHT_R, FORWARD);
 8004c0e:	f7ff fe07 	bl	8004820 <Set_Right>
			break;

		}
		cur_move = next_move;
 8004c12:	6822      	ldr	r2, [r4, #0]
 8004c14:	4b0a      	ldr	r3, [pc, #40]	; (8004c40 <Left_Search+0x110>)
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	20000b34 	.word	0x20000b34
 8004c20:	20000aa4 	.word	0x20000aa4
 8004c24:	20001b10 	.word	0x20001b10
 8004c28:	2000251c 	.word	0x2000251c
 8004c2c:	20000acc 	.word	0x20000acc
 8004c30:	200024b0 	.word	0x200024b0
 8004c34:	200008d4 	.word	0x200008d4
 8004c38:	20000b3c 	.word	0x20000b3c
 8004c3c:	20001be4 	.word	0x20001be4
 8004c40:	20001b70 	.word	0x20001b70

08004c44 <Right_Search>:

}



void Right_Search() {
 8004c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	if (r_turnflag == ARRIVE && lenc_diff >= RT_LENC_1) { //finished making turn. left and right wheel don't travel at same speeds
 8004c46:	4d39      	ldr	r5, [pc, #228]	; (8004d2c <Right_Search+0xe8>)
 8004c48:	682c      	ldr	r4, [r5, #0]
 8004c4a:	462f      	mov	r7, r5
 8004c4c:	b9fc      	cbnz	r4, 8004c8e <Right_Search+0x4a>
 8004c4e:	4e38      	ldr	r6, [pc, #224]	; (8004d30 <Right_Search+0xec>)
 8004c50:	6833      	ldr	r3, [r6, #0]
 8004c52:	f5b3 7ff1 	cmp.w	r3, #482	; 0x1e2
 8004c56:	d367      	bcc.n	8004d28 <Right_Search+0xe4>

		Clear_Buffers();
 8004c58:	f7fe f990 	bl	8002f7c <Clear_Buffers>
		Set_Left(FWD_L, FORWARD); //finish turn by accelerating forward
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	20c8      	movs	r0, #200	; 0xc8
 8004c60:	f7ff fdb6 	bl	80047d0 <Set_Left>
		Set_Right(FWD_R, FORWARD);
 8004c64:	2101      	movs	r1, #1
 8004c66:	20c8      	movs	r0, #200	; 0xc8
 8004c68:	f7ff fdda 	bl	8004820 <Set_Right>
		r_turnflag = PEEK;
 8004c6c:	2301      	movs	r3, #1
		prev_l_count = l_count; //save current counters
		prev_r_count = r_count;
		lenc_diff = 0;
 8004c6e:	6034      	str	r4, [r6, #0]
	if (r_turnflag == ARRIVE && lenc_diff >= RT_LENC_1) { //finished making turn. left and right wheel don't travel at same speeds

		Clear_Buffers();
		Set_Left(FWD_L, FORWARD); //finish turn by accelerating forward
		Set_Right(FWD_R, FORWARD);
		r_turnflag = PEEK;
 8004c70:	602b      	str	r3, [r5, #0]
		prev_l_count = l_count; //save current counters
 8004c72:	4b30      	ldr	r3, [pc, #192]	; (8004d34 <Right_Search+0xf0>)
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	4b30      	ldr	r3, [pc, #192]	; (8004d38 <Right_Search+0xf4>)
 8004c78:	601a      	str	r2, [r3, #0]
		prev_r_count = r_count;
 8004c7a:	4b30      	ldr	r3, [pc, #192]	; (8004d3c <Right_Search+0xf8>)
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	4b30      	ldr	r3, [pc, #192]	; (8004d40 <Right_Search+0xfc>)
 8004c80:	601a      	str	r2, [r3, #0]
		lenc_diff = 0;
		renc_diff = 0;
 8004c82:	4b30      	ldr	r3, [pc, #192]	; (8004d44 <Right_Search+0x100>)
 8004c84:	601c      	str	r4, [r3, #0]
			break;

		}
		cur_move = next_move;
	} //case RIGHT
}
 8004c86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		prev_l_count = l_count; //save current counters
		prev_r_count = r_count;
		lenc_diff = 0;
		renc_diff = 0;
#if DEBUG == TRUE
		Save_State();
 8004c8a:	f7fe bae5 	b.w	8003258 <Save_State>
#endif
	}

	else if ((r_turnflag == PEEK) && (lenc_diff >= RT_ENC_2*3/4 || renc_diff >= RT_ENC_2*3/4)) {
 8004c8e:	2c01      	cmp	r4, #1
 8004c90:	d11b      	bne.n	8004cca <Right_Search+0x86>
 8004c92:	4b27      	ldr	r3, [pc, #156]	; (8004d30 <Right_Search+0xec>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8004c9a:	d804      	bhi.n	8004ca6 <Right_Search+0x62>
 8004c9c:	4b29      	ldr	r3, [pc, #164]	; (8004d44 <Right_Search+0x100>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8004ca4:	d940      	bls.n	8004d28 <Right_Search+0xe4>
		if (done_flag == TRUE) {
 8004ca6:	4b28      	ldr	r3, [pc, #160]	; (8004d48 <Right_Search+0x104>)
 8004ca8:	4c28      	ldr	r4, [pc, #160]	; (8004d4c <Right_Search+0x108>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d102      	bne.n	8004cb6 <Right_Search+0x72>
			next_move = DEAD;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	6023      	str	r3, [r4, #0]
 8004cb4:	e006      	b.n	8004cc4 <Right_Search+0x80>
		}
		else {
			Read_Walls();
 8004cb6:	f7ff fc23 	bl	8004500 <Read_Walls>
			next_move = Get_Next_Move();
 8004cba:	f7ff f83d 	bl	8003d38 <Get_Next_Move>
 8004cbe:	6020      	str	r0, [r4, #0]
			Update_Position();
 8004cc0:	f7fe fcfc 	bl	80036bc <Update_Position>
		}
		r_turnflag = EXECUTE;
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	603b      	str	r3, [r7, #0]
 8004cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	}

	else if ((r_turnflag == EXECUTE) && (lenc_diff >= RT_ENC_2 || renc_diff >= RT_ENC_2)) { //made it to same point. execute next direction
 8004cca:	2c02      	cmp	r4, #2
 8004ccc:	d12c      	bne.n	8004d28 <Right_Search+0xe4>
 8004cce:	4b18      	ldr	r3, [pc, #96]	; (8004d30 <Right_Search+0xec>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 8004cd6:	d804      	bhi.n	8004ce2 <Right_Search+0x9e>
 8004cd8:	4b1a      	ldr	r3, [pc, #104]	; (8004d44 <Right_Search+0x100>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 8004ce0:	d922      	bls.n	8004d28 <Right_Search+0xe4>

		r_turnflag = ARRIVE;
		prev_l_count = l_count; //save current counters
 8004ce2:	4b14      	ldr	r3, [pc, #80]	; (8004d34 <Right_Search+0xf0>)

	}

	else if ((r_turnflag == EXECUTE) && (lenc_diff >= RT_ENC_2 || renc_diff >= RT_ENC_2)) { //made it to same point. execute next direction

		r_turnflag = ARRIVE;
 8004ce4:	2600      	movs	r6, #0
		prev_l_count = l_count; //save current counters
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	4b13      	ldr	r3, [pc, #76]	; (8004d38 <Right_Search+0xf4>)

	}

	else if ((r_turnflag == EXECUTE) && (lenc_diff >= RT_ENC_2 || renc_diff >= RT_ENC_2)) { //made it to same point. execute next direction

		r_turnflag = ARRIVE;
 8004cea:	603e      	str	r6, [r7, #0]
		prev_l_count = l_count; //save current counters
 8004cec:	601a      	str	r2, [r3, #0]
		prev_r_count = r_count;
 8004cee:	4b13      	ldr	r3, [pc, #76]	; (8004d3c <Right_Search+0xf8>)
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	4b13      	ldr	r3, [pc, #76]	; (8004d40 <Right_Search+0xfc>)
 8004cf4:	601a      	str	r2, [r3, #0]

		switch (next_move) { //need to change direction or nah
 8004cf6:	4b15      	ldr	r3, [pc, #84]	; (8004d4c <Right_Search+0x108>)
 8004cf8:	681d      	ldr	r5, [r3, #0]
 8004cfa:	461c      	mov	r4, r3
 8004cfc:	2d01      	cmp	r5, #1
 8004cfe:	d008      	beq.n	8004d12 <Right_Search+0xce>
 8004d00:	2d02      	cmp	r5, #2
 8004d02:	d10e      	bne.n	8004d22 <Right_Search+0xde>

		case RIGHT:
			Set_Left(RIGHT_L, FORWARD); //need to make right turn again
 8004d04:	2101      	movs	r1, #1
 8004d06:	20c8      	movs	r0, #200	; 0xc8
 8004d08:	f7ff fd62 	bl	80047d0 <Set_Left>
			Set_Right(RIGHT_R, FORWARD);
 8004d0c:	2101      	movs	r1, #1
 8004d0e:	4630      	mov	r0, r6
 8004d10:	e005      	b.n	8004d1e <Right_Search+0xda>
			break;

		case LEFT:
			Set_Left(LEFT_L, FORWARD); //need to make right turn again
 8004d12:	4629      	mov	r1, r5
 8004d14:	4630      	mov	r0, r6
 8004d16:	f7ff fd5b 	bl	80047d0 <Set_Left>
			Set_Right(LEFT_R, FORWARD);
 8004d1a:	4629      	mov	r1, r5
 8004d1c:	20c8      	movs	r0, #200	; 0xc8
 8004d1e:	f7ff fd7f 	bl	8004820 <Set_Right>
			break;

		}
		cur_move = next_move;
 8004d22:	6822      	ldr	r2, [r4, #0]
 8004d24:	4b0a      	ldr	r3, [pc, #40]	; (8004d50 <Right_Search+0x10c>)
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	20000abc 	.word	0x20000abc
 8004d30:	200008d4 	.word	0x200008d4
 8004d34:	20001b10 	.word	0x20001b10
 8004d38:	2000251c 	.word	0x2000251c
 8004d3c:	20000acc 	.word	0x20000acc
 8004d40:	200024b0 	.word	0x200024b0
 8004d44:	20000aa4 	.word	0x20000aa4
 8004d48:	20000b3c 	.word	0x20000b3c
 8004d4c:	20001be4 	.word	0x20001be4
 8004d50:	20001b70 	.word	0x20001b70

08004d54 <Search_Correction>:
	lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
	renc_diff = r_count - prev_r_count;

}

void Search_Correction() {
 8004d54:	b510      	push	{r4, lr}

	m_correction = Motor_Correction(FALSE);
 8004d56:	4c08      	ldr	r4, [pc, #32]	; (8004d78 <Search_Correction+0x24>)
 8004d58:	2000      	movs	r0, #0
 8004d5a:	f7fe f85f 	bl	8002e1c <Motor_Correction>
	Set_Left(FWD_L + m_correction, FORWARD);
 8004d5e:	2101      	movs	r1, #1

}

void Search_Correction() {

	m_correction = Motor_Correction(FALSE);
 8004d60:	6020      	str	r0, [r4, #0]
	Set_Left(FWD_L + m_correction, FORWARD);
 8004d62:	30c8      	adds	r0, #200	; 0xc8
 8004d64:	f7ff fd34 	bl	80047d0 <Set_Left>
	Set_Right(FWD_R - m_correction, FORWARD);
 8004d68:	6820      	ldr	r0, [r4, #0]
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	f1c0 00c8 	rsb	r0, r0, #200	; 0xc8

}
 8004d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void Search_Correction() {

	m_correction = Motor_Correction(FALSE);
	Set_Left(FWD_L + m_correction, FORWARD);
	Set_Right(FWD_R - m_correction, FORWARD);
 8004d74:	f7ff bd54 	b.w	8004820 <Set_Right>
 8004d78:	2000131c 	.word	0x2000131c

08004d7c <Left_Spd>:
		}
		cur_move = next_move;
	} //case LEFT
}

void Left_Spd(int num, char n_state) {
 8004d7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//Reset_Encoders();

	Set_Left(FWD_L, FORWARD); //accelerate
	Set_Right(FWD_R, FORWARD);

	if ((n_state == FWD1 || n_state == FWD2 || n_state == FWD3 || n_state == FWD4
 8004d80:	3962      	subs	r1, #98	; 0x62
 8004d82:	4c36      	ldr	r4, [pc, #216]	; (8004e5c <Left_Spd+0xe0>)
	Set_Left(LEFT_L, FORWARD); //accelerate
	Set_Right(LEFT_R, FORWARD);

	do {
	Update_Sensors(NONE);
	} while (renc_diff < 490);// + angular_error/3); //error after a straightaway
 8004d84:	4f36      	ldr	r7, [pc, #216]	; (8004e60 <Left_Spd+0xe4>)
		}
		cur_move = next_move;
	} //case LEFT
}

void Left_Spd(int num, char n_state) {
 8004d86:	4606      	mov	r6, r0
	//Reset_Encoders();

	Set_Left(FWD_L, FORWARD); //accelerate
	Set_Right(FWD_R, FORWARD);

	if ((n_state == FWD1 || n_state == FWD2 || n_state == FWD3 || n_state == FWD4
 8004d88:	b2c9      	uxtb	r1, r1
	} //case LEFT
}

void Left_Spd(int num, char n_state) {

for (int i = 0; i < num; i++) {
 8004d8a:	2500      	movs	r5, #0
 8004d8c:	46bb      	mov	fp, r7
 8004d8e:	40cc      	lsrs	r4, r1
 8004d90:	2914      	cmp	r1, #20
 8004d92:	f004 0401 	and.w	r4, r4, #1
 8004d96:	bf88      	it	hi
 8004d98:	2301      	movhi	r3, #1
 8004d9a:	f084 0401 	eor.w	r4, r4, #1
 8004d9e:	bf98      	it	ls
 8004da0:	4623      	movls	r3, r4
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	42b5      	cmp	r5, r6
 8004da6:	da4d      	bge.n	8004e44 <Left_Spd+0xc8>

	Set_Left(LEFT_L, FORWARD); //accelerate
 8004da8:	2101      	movs	r1, #1
 8004daa:	2000      	movs	r0, #0
 8004dac:	f7ff fd10 	bl	80047d0 <Set_Left>
	Set_Right(LEFT_R, FORWARD);
 8004db0:	2101      	movs	r1, #1
 8004db2:	20c8      	movs	r0, #200	; 0xc8
 8004db4:	f7ff fd34 	bl	8004820 <Set_Right>

	do {
	Update_Sensors(NONE);
 8004db8:	2005      	movs	r0, #5
 8004dba:	f7ff fb57 	bl	800446c <Update_Sensors>
	} while (renc_diff < 490);// + angular_error/3); //error after a straightaway
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 8004dc4:	d3f8      	bcc.n	8004db8 <Left_Spd+0x3c>

	prev_l_count = l_count;
 8004dc6:	4c27      	ldr	r4, [pc, #156]	; (8004e64 <Left_Spd+0xe8>)
	prev_r_count = r_count;

	//Reset_Encoders();

	Set_Left(FWD_L, FORWARD); //accelerate
 8004dc8:	2101      	movs	r1, #1

	do {
	Update_Sensors(NONE);
	} while (renc_diff < 490);// + angular_error/3); //error after a straightaway

	prev_l_count = l_count;
 8004dca:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8004e7c <Left_Spd+0x100>
	prev_r_count = r_count;

	//Reset_Encoders();

	Set_Left(FWD_L, FORWARD); //accelerate
 8004dce:	20c8      	movs	r0, #200	; 0xc8

	do {
	Update_Sensors(NONE);
	} while (renc_diff < 490);// + angular_error/3); //error after a straightaway

	prev_l_count = l_count;
 8004dd0:	6822      	ldr	r2, [r4, #0]
	prev_r_count = r_count;
 8004dd2:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8004e80 <Left_Spd+0x104>

	do {
	Update_Sensors(NONE);
	} while (renc_diff < 490);// + angular_error/3); //error after a straightaway

	prev_l_count = l_count;
 8004dd6:	f8ca 2000 	str.w	r2, [sl]
	prev_r_count = r_count;
 8004dda:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8004e84 <Left_Spd+0x108>
 8004dde:	f8d9 2000 	ldr.w	r2, [r9]
 8004de2:	f8c8 2000 	str.w	r2, [r8]

	//Reset_Encoders();

	Set_Left(FWD_L, FORWARD); //accelerate
 8004de6:	f7ff fcf3 	bl	80047d0 <Set_Left>
	Set_Right(FWD_R, FORWARD);
 8004dea:	2101      	movs	r1, #1
 8004dec:	20c8      	movs	r0, #200	; 0xc8
 8004dee:	f7ff fd17 	bl	8004820 <Set_Right>

	if ((n_state == FWD1 || n_state == FWD2 || n_state == FWD3 || n_state == FWD4
 8004df2:	9b00      	ldr	r3, [sp, #0]
 8004df4:	b94b      	cbnz	r3, 8004e0a <Left_Spd+0x8e>
		 ||	n_state == FWD5 || n_state == FWD6 || n_state == FWD7 || n_state == FWD8 || n_state == FWD9
		 ||	n_state == FWD10 || n_state == FWD11 || n_state == FWD12 || n_state == FWD13 || n_state == FWD14
		 || n_state == FWD15) && (num < 2 || i > 0) ) { //if the next forward state needs to add distance off turn
 8004df6:	2e01      	cmp	r6, #1
 8004df8:	dd01      	ble.n	8004dfe <Left_Spd+0x82>
 8004dfa:	2d00      	cmp	r5, #0
 8004dfc:	dd05      	ble.n	8004e0a <Left_Spd+0x8e>
			speedrunturn = TRUE;
 8004dfe:	2201      	movs	r2, #1
 8004e00:	4b19      	ldr	r3, [pc, #100]	; (8004e68 <Left_Spd+0xec>)
 8004e02:	601a      	str	r2, [r3, #0]
	sprintf(tx_buffer, "Angular Error: %d \r\n---------------\r\n", angular_error);
	Transmit(tx_buffer);
	#endif


}
 8004e04:	b003      	add	sp, #12
 8004e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}


	do {
	Update_Sensors(TURN_SEARCH); //only get left and right values
	Search_Correction(); //perform correction
	} while (lenc_diff < LT_ENC_2 && renc_diff < LT_ENC_2);
 8004e0a:	4918      	ldr	r1, [pc, #96]	; (8004e6c <Left_Spd+0xf0>)
			return;
	} //if next state is forward, go directly to FORWARD Speed


	do {
	Update_Sensors(TURN_SEARCH); //only get left and right values
 8004e0c:	2001      	movs	r0, #1
 8004e0e:	9101      	str	r1, [sp, #4]
 8004e10:	f7ff fb2c 	bl	800446c <Update_Sensors>
	Search_Correction(); //perform correction
 8004e14:	f7ff ff9e 	bl	8004d54 <Search_Correction>
	} while (lenc_diff < LT_ENC_2 && renc_diff < LT_ENC_2);
 8004e18:	9901      	ldr	r1, [sp, #4]
 8004e1a:	680a      	ldr	r2, [r1, #0]
 8004e1c:	f5b2 7fcf 	cmp.w	r2, #414	; 0x19e
 8004e20:	d804      	bhi.n	8004e2c <Left_Spd+0xb0>
 8004e22:	f8db 2000 	ldr.w	r2, [fp]
 8004e26:	f5b2 7fcf 	cmp.w	r2, #414	; 0x19e
 8004e2a:	d9ef      	bls.n	8004e0c <Left_Spd+0x90>

	//angular_error = (l_count - prev_l_count) - (r_count - prev_r_count);
	angular_error = 0;
	prev_l_count = l_count;
 8004e2c:	6823      	ldr	r3, [r4, #0]
	Update_Sensors(TURN_SEARCH); //only get left and right values
	Search_Correction(); //perform correction
	} while (lenc_diff < LT_ENC_2 && renc_diff < LT_ENC_2);

	//angular_error = (l_count - prev_l_count) - (r_count - prev_r_count);
	angular_error = 0;
 8004e2e:	2100      	movs	r1, #0
 8004e30:	4a0f      	ldr	r2, [pc, #60]	; (8004e70 <Left_Spd+0xf4>)
	} //case LEFT
}

void Left_Spd(int num, char n_state) {

for (int i = 0; i < num; i++) {
 8004e32:	3501      	adds	r5, #1
	Search_Correction(); //perform correction
	} while (lenc_diff < LT_ENC_2 && renc_diff < LT_ENC_2);

	//angular_error = (l_count - prev_l_count) - (r_count - prev_r_count);
	angular_error = 0;
	prev_l_count = l_count;
 8004e34:	f8ca 3000 	str.w	r3, [sl]
	prev_r_count = r_count;
 8004e38:	f8d9 3000 	ldr.w	r3, [r9]
	Update_Sensors(TURN_SEARCH); //only get left and right values
	Search_Correction(); //perform correction
	} while (lenc_diff < LT_ENC_2 && renc_diff < LT_ENC_2);

	//angular_error = (l_count - prev_l_count) - (r_count - prev_r_count);
	angular_error = 0;
 8004e3c:	6011      	str	r1, [r2, #0]
	prev_l_count = l_count;
	prev_r_count = r_count;
 8004e3e:	f8c8 3000 	str.w	r3, [r8]
 8004e42:	e7af      	b.n	8004da4 <Left_Spd+0x28>

}

#if DEBUG == TRUE
	sprintf(tx_buffer, "Angular Error: %d \r\n---------------\r\n", angular_error);
 8004e44:	4b0a      	ldr	r3, [pc, #40]	; (8004e70 <Left_Spd+0xf4>)
 8004e46:	490b      	ldr	r1, [pc, #44]	; (8004e74 <Left_Spd+0xf8>)
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	480b      	ldr	r0, [pc, #44]	; (8004e78 <Left_Spd+0xfc>)
 8004e4c:	f001 fb90 	bl	8006570 <siprintf>
	Transmit(tx_buffer);
 8004e50:	4809      	ldr	r0, [pc, #36]	; (8004e78 <Left_Spd+0xfc>)
	#endif


}
 8004e52:	b003      	add	sp, #12
 8004e54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

}

#if DEBUG == TRUE
	sprintf(tx_buffer, "Angular Error: %d \r\n---------------\r\n", angular_error);
	Transmit(tx_buffer);
 8004e58:	f7fe b91a 	b.w	8003090 <Transmit>
 8004e5c:	0010fbef 	.word	0x0010fbef
 8004e60:	20000aa4 	.word	0x20000aa4
 8004e64:	20001b10 	.word	0x20001b10
 8004e68:	20000aac 	.word	0x20000aac
 8004e6c:	200008d4 	.word	0x200008d4
 8004e70:	20001b14 	.word	0x20001b14
 8004e74:	08007362 	.word	0x08007362
 8004e78:	20002b84 	.word	0x20002b84
 8004e7c:	2000251c 	.word	0x2000251c
 8004e80:	20000acc 	.word	0x20000acc
 8004e84:	200024b0 	.word	0x200024b0

08004e88 <Right_Spd>:
		}
		cur_move = next_move;
	} //case RIGHT
}

void Right_Spd(int num, char n_state) {
 8004e88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	prev_r_count = r_count;

	Set_Left(FWD_L, FORWARD); //accelerate
	Set_Right(FWD_R, FORWARD);

	if ((n_state == FWD1 || n_state == FWD2 || n_state == FWD3 || n_state == FWD4
 8004e8c:	3962      	subs	r1, #98	; 0x62
 8004e8e:	4c36      	ldr	r4, [pc, #216]	; (8004f68 <Right_Spd+0xe0>)
	Set_Left(RIGHT_L, FORWARD); //accelerate
	Set_Right(RIGHT_R, FORWARD);

	do {
		Update_Sensors(NONE); //only update encoder counts
	} while (lenc_diff < 490); //- angular_error);
 8004e90:	4f36      	ldr	r7, [pc, #216]	; (8004f6c <Right_Spd+0xe4>)
		}
		cur_move = next_move;
	} //case RIGHT
}

void Right_Spd(int num, char n_state) {
 8004e92:	4606      	mov	r6, r0
	prev_r_count = r_count;

	Set_Left(FWD_L, FORWARD); //accelerate
	Set_Right(FWD_R, FORWARD);

	if ((n_state == FWD1 || n_state == FWD2 || n_state == FWD3 || n_state == FWD4
 8004e94:	b2c9      	uxtb	r1, r1
	} //case RIGHT
}

void Right_Spd(int num, char n_state) {

for (int i = 0; i < num; i++) { //maximum of two 90 degree turns in a row
 8004e96:	2500      	movs	r5, #0
 8004e98:	46bb      	mov	fp, r7
 8004e9a:	40cc      	lsrs	r4, r1
 8004e9c:	2914      	cmp	r1, #20
 8004e9e:	f004 0401 	and.w	r4, r4, #1
 8004ea2:	bf88      	it	hi
 8004ea4:	2301      	movhi	r3, #1
 8004ea6:	f084 0401 	eor.w	r4, r4, #1
 8004eaa:	bf98      	it	ls
 8004eac:	4623      	movls	r3, r4
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	42b5      	cmp	r5, r6
 8004eb2:	da4d      	bge.n	8004f50 <Right_Spd+0xc8>

	Set_Left(RIGHT_L, FORWARD); //accelerate
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	20c8      	movs	r0, #200	; 0xc8
 8004eb8:	f7ff fc8a 	bl	80047d0 <Set_Left>
	Set_Right(RIGHT_R, FORWARD);
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	2000      	movs	r0, #0
 8004ec0:	f7ff fcae 	bl	8004820 <Set_Right>

	do {
		Update_Sensors(NONE); //only update encoder counts
 8004ec4:	2005      	movs	r0, #5
 8004ec6:	f7ff fad1 	bl	800446c <Update_Sensors>
	} while (lenc_diff < 490); //- angular_error);
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 8004ed0:	d3f8      	bcc.n	8004ec4 <Right_Spd+0x3c>

	prev_l_count = l_count; //save encoder counts out of turn
 8004ed2:	4c27      	ldr	r4, [pc, #156]	; (8004f70 <Right_Spd+0xe8>)
	prev_r_count = r_count;

	Set_Left(FWD_L, FORWARD); //accelerate
 8004ed4:	2101      	movs	r1, #1

	do {
		Update_Sensors(NONE); //only update encoder counts
	} while (lenc_diff < 490); //- angular_error);

	prev_l_count = l_count; //save encoder counts out of turn
 8004ed6:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8004f88 <Right_Spd+0x100>
	prev_r_count = r_count;

	Set_Left(FWD_L, FORWARD); //accelerate
 8004eda:	20c8      	movs	r0, #200	; 0xc8

	do {
		Update_Sensors(NONE); //only update encoder counts
	} while (lenc_diff < 490); //- angular_error);

	prev_l_count = l_count; //save encoder counts out of turn
 8004edc:	6822      	ldr	r2, [r4, #0]
	prev_r_count = r_count;
 8004ede:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8004f8c <Right_Spd+0x104>

	do {
		Update_Sensors(NONE); //only update encoder counts
	} while (lenc_diff < 490); //- angular_error);

	prev_l_count = l_count; //save encoder counts out of turn
 8004ee2:	f8ca 2000 	str.w	r2, [sl]
	prev_r_count = r_count;
 8004ee6:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8004f90 <Right_Spd+0x108>
 8004eea:	f8d9 2000 	ldr.w	r2, [r9]
 8004eee:	f8c8 2000 	str.w	r2, [r8]

	Set_Left(FWD_L, FORWARD); //accelerate
 8004ef2:	f7ff fc6d 	bl	80047d0 <Set_Left>
	Set_Right(FWD_R, FORWARD);
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	20c8      	movs	r0, #200	; 0xc8
 8004efa:	f7ff fc91 	bl	8004820 <Set_Right>

	if ((n_state == FWD1 || n_state == FWD2 || n_state == FWD3 || n_state == FWD4
 8004efe:	9b00      	ldr	r3, [sp, #0]
 8004f00:	b94b      	cbnz	r3, 8004f16 <Right_Spd+0x8e>
	 ||	n_state == FWD5 || n_state == FWD6 || n_state == FWD7 || n_state == FWD8 || n_state == FWD9
	 ||	n_state == FWD10 || n_state == FWD11 || n_state == FWD12 || n_state == FWD13 || n_state == FWD14
	 || n_state == FWD15) && (num < 2 || i > 0) ) { //if the next forward state needs to add distance off turn
 8004f02:	2e01      	cmp	r6, #1
 8004f04:	dd01      	ble.n	8004f0a <Right_Spd+0x82>
 8004f06:	2d00      	cmp	r5, #0
 8004f08:	dd05      	ble.n	8004f16 <Right_Spd+0x8e>
		speedrunturn = TRUE;
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	4b19      	ldr	r3, [pc, #100]	; (8004f74 <Right_Spd+0xec>)
 8004f0e:	601a      	str	r2, [r3, #0]
#if DEBUG == TRUE
	sprintf(tx_buffer, "Angular Error: %d \r\n---------------\r\n", angular_error);
	Transmit(tx_buffer);
	#endif

}
 8004f10:	b003      	add	sp, #12
 8004f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	do { //go straight out of turn. will run if there's a left turn next
	Update_Sensors(TURN_SEARCH);
	Search_Correction();
	} while (lenc_diff < RT_ENC_2 && renc_diff < RT_ENC_2);
 8004f16:	4918      	ldr	r1, [pc, #96]	; (8004f78 <Right_Spd+0xf0>)
		speedrunturn = TRUE;
		return;
	}

	do { //go straight out of turn. will run if there's a left turn next
	Update_Sensors(TURN_SEARCH);
 8004f18:	2001      	movs	r0, #1
 8004f1a:	9101      	str	r1, [sp, #4]
 8004f1c:	f7ff faa6 	bl	800446c <Update_Sensors>
	Search_Correction();
 8004f20:	f7ff ff18 	bl	8004d54 <Search_Correction>
	} while (lenc_diff < RT_ENC_2 && renc_diff < RT_ENC_2);
 8004f24:	f8db 2000 	ldr.w	r2, [fp]
 8004f28:	f5b2 7fcf 	cmp.w	r2, #414	; 0x19e
 8004f2c:	d804      	bhi.n	8004f38 <Right_Spd+0xb0>
 8004f2e:	9901      	ldr	r1, [sp, #4]
 8004f30:	680a      	ldr	r2, [r1, #0]
 8004f32:	f5b2 7fcf 	cmp.w	r2, #414	; 0x19e
 8004f36:	d9ef      	bls.n	8004f18 <Right_Spd+0x90>
	//angular_error = (l_count - prev_l_count) - (r_count - prev_r_count);
	angular_error = 0;

	prev_l_count = l_count;
 8004f38:	6823      	ldr	r3, [r4, #0]
	do { //go straight out of turn. will run if there's a left turn next
	Update_Sensors(TURN_SEARCH);
	Search_Correction();
	} while (lenc_diff < RT_ENC_2 && renc_diff < RT_ENC_2);
	//angular_error = (l_count - prev_l_count) - (r_count - prev_r_count);
	angular_error = 0;
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	4a0f      	ldr	r2, [pc, #60]	; (8004f7c <Right_Spd+0xf4>)
	} //case RIGHT
}

void Right_Spd(int num, char n_state) {

for (int i = 0; i < num; i++) { //maximum of two 90 degree turns in a row
 8004f3e:	3501      	adds	r5, #1
	Search_Correction();
	} while (lenc_diff < RT_ENC_2 && renc_diff < RT_ENC_2);
	//angular_error = (l_count - prev_l_count) - (r_count - prev_r_count);
	angular_error = 0;

	prev_l_count = l_count;
 8004f40:	f8ca 3000 	str.w	r3, [sl]
	prev_r_count = r_count;
 8004f44:	f8d9 3000 	ldr.w	r3, [r9]
	do { //go straight out of turn. will run if there's a left turn next
	Update_Sensors(TURN_SEARCH);
	Search_Correction();
	} while (lenc_diff < RT_ENC_2 && renc_diff < RT_ENC_2);
	//angular_error = (l_count - prev_l_count) - (r_count - prev_r_count);
	angular_error = 0;
 8004f48:	6011      	str	r1, [r2, #0]

	prev_l_count = l_count;
	prev_r_count = r_count;
 8004f4a:	f8c8 3000 	str.w	r3, [r8]
 8004f4e:	e7af      	b.n	8004eb0 <Right_Spd+0x28>

} //end for loop
#if DEBUG == TRUE
	sprintf(tx_buffer, "Angular Error: %d \r\n---------------\r\n", angular_error);
 8004f50:	4b0a      	ldr	r3, [pc, #40]	; (8004f7c <Right_Spd+0xf4>)
 8004f52:	490b      	ldr	r1, [pc, #44]	; (8004f80 <Right_Spd+0xf8>)
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	480b      	ldr	r0, [pc, #44]	; (8004f84 <Right_Spd+0xfc>)
 8004f58:	f001 fb0a 	bl	8006570 <siprintf>
	Transmit(tx_buffer);
 8004f5c:	4809      	ldr	r0, [pc, #36]	; (8004f84 <Right_Spd+0xfc>)
	#endif

}
 8004f5e:	b003      	add	sp, #12
 8004f60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	prev_r_count = r_count;

} //end for loop
#if DEBUG == TRUE
	sprintf(tx_buffer, "Angular Error: %d \r\n---------------\r\n", angular_error);
	Transmit(tx_buffer);
 8004f64:	f7fe b894 	b.w	8003090 <Transmit>
 8004f68:	0010fbef 	.word	0x0010fbef
 8004f6c:	200008d4 	.word	0x200008d4
 8004f70:	20001b10 	.word	0x20001b10
 8004f74:	20000aac 	.word	0x20000aac
 8004f78:	20000aa4 	.word	0x20000aa4
 8004f7c:	20001b14 	.word	0x20001b14
 8004f80:	08007362 	.word	0x08007362
 8004f84:	20002b84 	.word	0x20002b84
 8004f88:	2000251c 	.word	0x2000251c
 8004f8c:	20000acc 	.word	0x20000acc
 8004f90:	200024b0 	.word	0x200024b0

08004f94 <Dead_End_Correct>:
	}

}

#define EQUAL_VAL 200
void Dead_End_Correct(void) {
 8004f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

 //align while going into square
Get_IR(FALSE, FALSE, FALSE, FALSE);
 8004f96:	2300      	movs	r3, #0
 8004f98:	4e4b      	ldr	r6, [pc, #300]	; (80050c8 <Dead_End_Correct+0x134>)
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7ff f984 	bl	80042ac <Get_IR>

if (dif_l > FRONT_THRESHOLD || dif_r > FRONT_THRESHOLD) { //if there's a front wall
 8004fa4:	4b49      	ldr	r3, [pc, #292]	; (80050cc <Dead_End_Correct+0x138>)
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	461c      	mov	r4, r3
 8004faa:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 8004fae:	dc03      	bgt.n	8004fb8 <Dead_End_Correct+0x24>
 8004fb0:	6833      	ldr	r3, [r6, #0]
 8004fb2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004fb6:	dd29      	ble.n	800500c <Dead_End_Correct+0x78>

	do {  //align while going into square
		Get_IR(FALSE, FALSE, FALSE, FALSE);
		Search_Correction();
	} while (dif_r < STOP_CONDITION && dif_l < STOP_CONDITION);
 8004fb8:	f640 45e3 	movw	r5, #3299	; 0xce3
Get_IR(FALSE, FALSE, FALSE, FALSE);

if (dif_l > FRONT_THRESHOLD || dif_r > FRONT_THRESHOLD) { //if there's a front wall

	do {  //align while going into square
		Get_IR(FALSE, FALSE, FALSE, FALSE);
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7ff f972 	bl	80042ac <Get_IR>
		Search_Correction();
 8004fc8:	f7ff fec4 	bl	8004d54 <Search_Correction>
	} while (dif_r < STOP_CONDITION && dif_l < STOP_CONDITION);
 8004fcc:	6833      	ldr	r3, [r6, #0]
 8004fce:	42ab      	cmp	r3, r5
 8004fd0:	dd18      	ble.n	8005004 <Dead_End_Correct+0x70>

	} while (l_count < 200 && r_count < 200);

}

Set_Left(0, FORWARD); //pause to settle weight
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	2000      	movs	r0, #0
 8004fd6:	f7ff fbfb 	bl	80047d0 <Set_Left>
Set_Right(0, FORWARD);
 8004fda:	2101      	movs	r1, #1
 8004fdc:	2000      	movs	r0, #0

int p_correction = 0;

do {
	Update_Sensors(TURN_SEARCH);
	p_correction = (r_count + (int) (l_count - 65536))/5;
 8004fde:	4d3c      	ldr	r5, [pc, #240]	; (80050d0 <Dead_End_Correct+0x13c>)
	} while (l_count < 200 && r_count < 200);

}

Set_Left(0, FORWARD); //pause to settle weight
Set_Right(0, FORWARD);
 8004fe0:	f7ff fc1e 	bl	8004820 <Set_Right>

HAL_Delay(200);
 8004fe4:	20c8      	movs	r0, #200	; 0xc8
 8004fe6:	f7fb f9c3 	bl	8000370 <HAL_Delay>

int p_correction = 0;

do {
	Update_Sensors(TURN_SEARCH);
	p_correction = (r_count + (int) (l_count - 65536))/5;
 8004fea:	4f3a      	ldr	r7, [pc, #232]	; (80050d4 <Dead_End_Correct+0x140>)

Set_Left(0, FORWARD); //pause to settle weight
Set_Right(0, FORWARD);

HAL_Delay(200);
Reset_Counters();
 8004fec:	f7fd ff80 	bl	8002ef0 <Reset_Counters>

//rotate left do 180 degree turn
Set_Left(FWD_L, BACKWARD);
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	20c8      	movs	r0, #200	; 0xc8
 8004ff4:	462e      	mov	r6, r5
 8004ff6:	f7ff fbeb 	bl	80047d0 <Set_Left>
Set_Right(FWD_R, FORWARD);
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	20c8      	movs	r0, #200	; 0xc8
 8004ffe:	f7ff fc0f 	bl	8004820 <Set_Right>
 8005002:	e017      	b.n	8005034 <Dead_End_Correct+0xa0>
if (dif_l > FRONT_THRESHOLD || dif_r > FRONT_THRESHOLD) { //if there's a front wall

	do {  //align while going into square
		Get_IR(FALSE, FALSE, FALSE, FALSE);
		Search_Correction();
	} while (dif_r < STOP_CONDITION && dif_l < STOP_CONDITION);
 8005004:	6823      	ldr	r3, [r4, #0]
 8005006:	42ab      	cmp	r3, r5
 8005008:	ddd8      	ble.n	8004fbc <Dead_End_Correct+0x28>
 800500a:	e7e2      	b.n	8004fd2 <Dead_End_Correct+0x3e>
	Reset_Counters();
	do {
		Update_Sensors(BARE);
		Search_Correction();

	} while (l_count < 200 && r_count < 200);
 800500c:	4d31      	ldr	r5, [pc, #196]	; (80050d4 <Dead_End_Correct+0x140>)

}

else { //no front wall

	Reset_Counters();
 800500e:	f7fd ff6f 	bl	8002ef0 <Reset_Counters>
	do {
		Update_Sensors(BARE);
		Search_Correction();

	} while (l_count < 200 && r_count < 200);
 8005012:	4c2f      	ldr	r4, [pc, #188]	; (80050d0 <Dead_End_Correct+0x13c>)

else { //no front wall

	Reset_Counters();
	do {
		Update_Sensors(BARE);
 8005014:	2000      	movs	r0, #0
 8005016:	f7ff fa29 	bl	800446c <Update_Sensors>
		Search_Correction();
 800501a:	f7ff fe9b 	bl	8004d54 <Search_Correction>

	} while (l_count < 200 && r_count < 200);
 800501e:	682b      	ldr	r3, [r5, #0]
 8005020:	2bc7      	cmp	r3, #199	; 0xc7
 8005022:	d8d6      	bhi.n	8004fd2 <Dead_End_Correct+0x3e>
 8005024:	6823      	ldr	r3, [r4, #0]
 8005026:	2bc7      	cmp	r3, #199	; 0xc7
 8005028:	d9f4      	bls.n	8005014 <Dead_End_Correct+0x80>
 800502a:	e7d2      	b.n	8004fd2 <Dead_End_Correct+0x3e>
	p_correction = (r_count + (int) (l_count - 65536))/5;
	if (abs(p_correction) < 135) {
	Set_Left(100 + p_correction, BACKWARD);
	Set_Right(110 - p_correction, FORWARD);
	}
} while (r_count < PIVOT_ENC);// || abs(dif_lf - dif_rf) > 120);
 800502c:	6833      	ldr	r3, [r6, #0]
 800502e:	f5b3 7ff2 	cmp.w	r3, #484	; 0x1e4
 8005032:	d81a      	bhi.n	800506a <Dead_End_Correct+0xd6>
Set_Right(FWD_R, FORWARD);

int p_correction = 0;

do {
	Update_Sensors(TURN_SEARCH);
 8005034:	2001      	movs	r0, #1
 8005036:	f7ff fa19 	bl	800446c <Update_Sensors>
	p_correction = (r_count + (int) (l_count - 65536))/5;
 800503a:	683c      	ldr	r4, [r7, #0]
 800503c:	682b      	ldr	r3, [r5, #0]
 800503e:	4423      	add	r3, r4
 8005040:	2405      	movs	r4, #5
 8005042:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8005046:	fbb3 f4f4 	udiv	r4, r3, r4
	if (abs(p_correction) < 135) {
 800504a:	f104 0386 	add.w	r3, r4, #134	; 0x86
 800504e:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8005052:	d8eb      	bhi.n	800502c <Dead_End_Correct+0x98>
	Set_Left(100 + p_correction, BACKWARD);
 8005054:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8005058:	2100      	movs	r1, #0
 800505a:	f7ff fbb9 	bl	80047d0 <Set_Left>
	Set_Right(110 - p_correction, FORWARD);
 800505e:	2101      	movs	r1, #1
 8005060:	f1c4 006e 	rsb	r0, r4, #110	; 0x6e
 8005064:	f7ff fbdc 	bl	8004820 <Set_Right>
 8005068:	e7e0      	b.n	800502c <Dead_End_Correct+0x98>
	}
} while (r_count < PIVOT_ENC);// || abs(dif_lf - dif_rf) > 120);

//pause after rotating
Set_Left(0, FORWARD);
 800506a:	2101      	movs	r1, #1
 800506c:	2000      	movs	r0, #0
 800506e:	f7ff fbaf 	bl	80047d0 <Set_Left>
Set_Right(0, FORWARD);
 8005072:	2101      	movs	r1, #1
 8005074:	2000      	movs	r0, #0
 8005076:	f7ff fbd3 	bl	8004820 <Set_Right>
Reset_Counters();
 800507a:	f7fd ff39 	bl	8002ef0 <Reset_Counters>

//go backward a tad if done
int temp  = 0;
if (done_flag == TRUE) {
 800507e:	4b16      	ldr	r3, [pc, #88]	; (80050d8 <Dead_End_Correct+0x144>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d11b      	bne.n	80050be <Dead_End_Correct+0x12a>
	HAL_Delay(100);
 8005086:	2064      	movs	r0, #100	; 0x64
 8005088:	f7fb f972 	bl	8000370 <HAL_Delay>
	Set_Left(FWD_L, BACKWARD);
 800508c:	2100      	movs	r1, #0
 800508e:	20c8      	movs	r0, #200	; 0xc8
 8005090:	f7ff fb9e 	bl	80047d0 <Set_Left>
	Set_Right(FWD_R, BACKWARD);
 8005094:	2100      	movs	r1, #0
 8005096:	20c8      	movs	r0, #200	; 0xc8
 8005098:	f7ff fbc2 	bl	8004820 <Set_Right>
	do {
		temp++;
		if (temp > 4000000) {
			temp = 0;
		}
		r_count = __HAL_TIM_GET_COUNTER(&htim4);
 800509c:	4b0f      	ldr	r3, [pc, #60]	; (80050dc <Dead_End_Correct+0x148>)
 800509e:	6819      	ldr	r1, [r3, #0]
	} while ((r_count - 65471) > 0); //65536
 80050a0:	f64f 73bf 	movw	r3, #65471	; 0xffbf
	do {
		temp++;
		if (temp > 4000000) {
			temp = 0;
		}
		r_count = __HAL_TIM_GET_COUNTER(&htim4);
 80050a4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	} while ((r_count - 65471) > 0); //65536
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d1fc      	bne.n	80050a4 <Dead_End_Correct+0x110>
 80050aa:	4a09      	ldr	r2, [pc, #36]	; (80050d0 <Dead_End_Correct+0x13c>)
	Set_Left(0, FORWARD); //settle weight
 80050ac:	2101      	movs	r1, #1
 80050ae:	2000      	movs	r0, #0
 80050b0:	6013      	str	r3, [r2, #0]
 80050b2:	f7ff fb8d 	bl	80047d0 <Set_Left>
	Set_Right(0, FORWARD);
 80050b6:	2101      	movs	r1, #1
 80050b8:	2000      	movs	r0, #0
 80050ba:	f7ff fbb1 	bl	8004820 <Set_Right>
}

HAL_Delay(150);
 80050be:	2096      	movs	r0, #150	; 0x96

}
 80050c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	} while ((r_count - 65471) > 0); //65536
	Set_Left(0, FORWARD); //settle weight
	Set_Right(0, FORWARD);
}

HAL_Delay(150);
 80050c4:	f7fb b954 	b.w	8000370 <HAL_Delay>
 80050c8:	200008d0 	.word	0x200008d0
 80050cc:	20000878 	.word	0x20000878
 80050d0:	20000acc 	.word	0x20000acc
 80050d4:	20001b10 	.word	0x20001b10
 80050d8:	20000b3c 	.word	0x20000b3c
 80050dc:	20002520 	.word	0x20002520

080050e0 <Dead_End>:
		Search_Correction();
	} while (lenc_diff >= 650 || renc_diff >= 650);

}

void Dead_End() {
 80050e0:	b570      	push	{r4, r5, r6, lr}

	if (dead_flag == ARRIVE) {
 80050e2:	4c3c      	ldr	r4, [pc, #240]	; (80051d4 <Dead_End+0xf4>)
 80050e4:	6823      	ldr	r3, [r4, #0]
 80050e6:	bb2b      	cbnz	r3, 8005134 <Dead_End+0x54>

		if (done_flag == TRUE) {
 80050e8:	4b3b      	ldr	r3, [pc, #236]	; (80051d8 <Dead_End+0xf8>)
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	461d      	mov	r5, r3
 80050ee:	2a01      	cmp	r2, #1
 80050f0:	d103      	bne.n	80050fa <Dead_End+0x1a>
			Read_Walls();
 80050f2:	f7ff fa05 	bl	8004500 <Read_Walls>
			Switch_Direction();
 80050f6:	f7fe facd 	bl	8003694 <Switch_Direction>
		}

		Dead_End_Correct(); //should be aligned in middle of square
 80050fa:	f7ff ff4b 	bl	8004f94 <Dead_End_Correct>

		Floodfill(reverse_flag, search_flag, FALSE);
 80050fe:	4b37      	ldr	r3, [pc, #220]	; (80051dc <Dead_End+0xfc>)
 8005100:	2200      	movs	r2, #0
 8005102:	6819      	ldr	r1, [r3, #0]
 8005104:	4b36      	ldr	r3, [pc, #216]	; (80051e0 <Dead_End+0x100>)
 8005106:	6818      	ldr	r0, [r3, #0]
 8005108:	f7fe f9e8 	bl	80034dc <Floodfill>
		Reset_Counters();
 800510c:	f7fd fef0 	bl	8002ef0 <Reset_Counters>
		Clear_Buffers();
 8005110:	f7fd ff34 	bl	8002f7c <Clear_Buffers>
		if (done_flag == TRUE) {
 8005114:	682b      	ldr	r3, [r5, #0]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d101      	bne.n	800511e <Dead_End+0x3e>
			cur_move = PAUSE;
 800511a:	2204      	movs	r2, #4
 800511c:	e056      	b.n	80051cc <Dead_End+0xec>
		}

		else {
		Set_Left(FWD_L, FORWARD);
 800511e:	2101      	movs	r1, #1
 8005120:	20c8      	movs	r0, #200	; 0xc8
 8005122:	f7ff fb55 	bl	80047d0 <Set_Left>
		Set_Right(FWD_R, FORWARD); //move forward to next square
 8005126:	2101      	movs	r1, #1
 8005128:	20c8      	movs	r0, #200	; 0xc8
 800512a:	f7ff fb79 	bl	8004820 <Set_Right>
		dead_flag = PEEK;
 800512e:	2301      	movs	r3, #1
 8005130:	6023      	str	r3, [r4, #0]
 8005132:	bd70      	pop	{r4, r5, r6, pc}
		}
	}

	else if (dead_flag == PEEK && (lenc_diff >= DEAD_ENC1 || renc_diff >= DEAD_ENC1)) { //get next state
 8005134:	2b01      	cmp	r3, #1
 8005136:	d11c      	bne.n	8005172 <Dead_End+0x92>
 8005138:	4b2a      	ldr	r3, [pc, #168]	; (80051e4 <Dead_End+0x104>)
 800513a:	4d2b      	ldr	r5, [pc, #172]	; (80051e8 <Dead_End+0x108>)
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	461e      	mov	r6, r3
 8005140:	2a8b      	cmp	r2, #139	; 0x8b
 8005142:	d802      	bhi.n	800514a <Dead_End+0x6a>
 8005144:	682b      	ldr	r3, [r5, #0]
 8005146:	2b8b      	cmp	r3, #139	; 0x8b
 8005148:	d942      	bls.n	80051d0 <Dead_End+0xf0>

		dead_flag = EXECUTE;
 800514a:	2302      	movs	r3, #2
 800514c:	6023      	str	r3, [r4, #0]
		next_move = Get_Next_Move();
 800514e:	f7fe fdf3 	bl	8003d38 <Get_Next_Move>
 8005152:	4b26      	ldr	r3, [pc, #152]	; (80051ec <Dead_End+0x10c>)
 8005154:	6018      	str	r0, [r3, #0]
		Update_Position();
 8005156:	f7fe fab1 	bl	80036bc <Update_Position>

		prev_l_count = l_count; //save current counters
 800515a:	4b25      	ldr	r3, [pc, #148]	; (80051f0 <Dead_End+0x110>)
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	4b25      	ldr	r3, [pc, #148]	; (80051f4 <Dead_End+0x114>)
 8005160:	601a      	str	r2, [r3, #0]
		prev_r_count = r_count;
 8005162:	4b25      	ldr	r3, [pc, #148]	; (80051f8 <Dead_End+0x118>)
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	4b25      	ldr	r3, [pc, #148]	; (80051fc <Dead_End+0x11c>)
 8005168:	601a      	str	r2, [r3, #0]
		lenc_diff = 0;
 800516a:	2300      	movs	r3, #0
 800516c:	6033      	str	r3, [r6, #0]
		renc_diff = 0;
 800516e:	602b      	str	r3, [r5, #0]
 8005170:	bd70      	pop	{r4, r5, r6, pc}
	}
	//after correction
	else if (dead_flag == EXECUTE && (lenc_diff > DEAD_ENC2 || renc_diff >= DEAD_ENC2)) {
 8005172:	2b02      	cmp	r3, #2
 8005174:	d12c      	bne.n	80051d0 <Dead_End+0xf0>
 8005176:	4b1b      	ldr	r3, [pc, #108]	; (80051e4 <Dead_End+0x104>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
 800517e:	d204      	bcs.n	800518a <Dead_End+0xaa>
 8005180:	4b19      	ldr	r3, [pc, #100]	; (80051e8 <Dead_End+0x108>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f5b3 7fd4 	cmp.w	r3, #424	; 0x1a8
 8005188:	d922      	bls.n	80051d0 <Dead_End+0xf0>
		dead_flag = ARRIVE;
		prev_l_count = l_count;
 800518a:	4b19      	ldr	r3, [pc, #100]	; (80051f0 <Dead_End+0x110>)
		lenc_diff = 0;
		renc_diff = 0;
	}
	//after correction
	else if (dead_flag == EXECUTE && (lenc_diff > DEAD_ENC2 || renc_diff >= DEAD_ENC2)) {
		dead_flag = ARRIVE;
 800518c:	2600      	movs	r6, #0
		prev_l_count = l_count;
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	4b18      	ldr	r3, [pc, #96]	; (80051f4 <Dead_End+0x114>)
		lenc_diff = 0;
		renc_diff = 0;
	}
	//after correction
	else if (dead_flag == EXECUTE && (lenc_diff > DEAD_ENC2 || renc_diff >= DEAD_ENC2)) {
		dead_flag = ARRIVE;
 8005192:	6026      	str	r6, [r4, #0]
		prev_l_count = l_count;
 8005194:	601a      	str	r2, [r3, #0]
		prev_r_count = r_count;
 8005196:	4b18      	ldr	r3, [pc, #96]	; (80051f8 <Dead_End+0x118>)
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	4b18      	ldr	r3, [pc, #96]	; (80051fc <Dead_End+0x11c>)
 800519c:	601a      	str	r2, [r3, #0]

		switch (next_move) { //need to change direction or nah
 800519e:	4b13      	ldr	r3, [pc, #76]	; (80051ec <Dead_End+0x10c>)
 80051a0:	681d      	ldr	r5, [r3, #0]
 80051a2:	461c      	mov	r4, r3
 80051a4:	2d01      	cmp	r5, #1
 80051a6:	d008      	beq.n	80051ba <Dead_End+0xda>
 80051a8:	2d02      	cmp	r5, #2
 80051aa:	d10e      	bne.n	80051ca <Dead_End+0xea>
		case LEFT:
			Set_Left(LEFT_L, FORWARD); //need to make right turn again
			Set_Right(LEFT_R, FORWARD);
			break;
		case RIGHT:
			Set_Left(RIGHT_L, FORWARD); //need to make right turn again
 80051ac:	2101      	movs	r1, #1
 80051ae:	20c8      	movs	r0, #200	; 0xc8
 80051b0:	f7ff fb0e 	bl	80047d0 <Set_Left>
			Set_Right(RIGHT_R, FORWARD);
 80051b4:	2101      	movs	r1, #1
 80051b6:	4630      	mov	r0, r6
 80051b8:	e005      	b.n	80051c6 <Dead_End+0xe6>
		prev_r_count = r_count;

		switch (next_move) { //need to change direction or nah

		case LEFT:
			Set_Left(LEFT_L, FORWARD); //need to make right turn again
 80051ba:	4629      	mov	r1, r5
 80051bc:	4630      	mov	r0, r6
 80051be:	f7ff fb07 	bl	80047d0 <Set_Left>
			Set_Right(LEFT_R, FORWARD);
 80051c2:	4629      	mov	r1, r5
 80051c4:	20c8      	movs	r0, #200	; 0xc8
			break;
		case RIGHT:
			Set_Left(RIGHT_L, FORWARD); //need to make right turn again
			Set_Right(RIGHT_R, FORWARD);
 80051c6:	f7ff fb2b 	bl	8004820 <Set_Right>
			break;
		}
		cur_move = next_move;
 80051ca:	6822      	ldr	r2, [r4, #0]
 80051cc:	4b0c      	ldr	r3, [pc, #48]	; (8005200 <Dead_End+0x120>)
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	bd70      	pop	{r4, r5, r6, pc}
 80051d2:	bf00      	nop
 80051d4:	20000b40 	.word	0x20000b40
 80051d8:	20000b3c 	.word	0x20000b3c
 80051dc:	20001bdc 	.word	0x20001bdc
 80051e0:	20001324 	.word	0x20001324
 80051e4:	200008d4 	.word	0x200008d4
 80051e8:	20000aa4 	.word	0x20000aa4
 80051ec:	20001be4 	.word	0x20001be4
 80051f0:	20001b10 	.word	0x20001b10
 80051f4:	2000251c 	.word	0x2000251c
 80051f8:	20000acc 	.word	0x20000acc
 80051fc:	200024b0 	.word	0x200024b0
 8005200:	20001b70 	.word	0x20001b70

08005204 <Stop>:
	HAL_UART_Receive(&huart1, rx_buffer, len, 5000);
	Transmit("HAHA");
}
*/

void Stop(void) {
 8005204:	b570      	push	{r4, r5, r6, lr}

	Set_Left(0, FORWARD);
 8005206:	2101      	movs	r1, #1
 8005208:	2000      	movs	r0, #0
 800520a:	f7ff fae1 	bl	80047d0 <Set_Left>
	Set_Right(0, FORWARD); //STOP
	Reset_Counters();
	Clear_Buffers();
	debug_flag = FALSE;
#if DEBUG == TRUE
	sprintf(tx_buffer, "Stopping...... Stop Flag:  %d\r\n", stop_flag);
 800520e:	4d14      	ldr	r5, [pc, #80]	; (8005260 <Stop+0x5c>)
*/

void Stop(void) {

	Set_Left(0, FORWARD);
	Set_Right(0, FORWARD); //STOP
 8005210:	2101      	movs	r1, #1
 8005212:	2000      	movs	r0, #0
	Reset_Counters();
	Clear_Buffers();
	debug_flag = FALSE;
#if DEBUG == TRUE
	sprintf(tx_buffer, "Stopping...... Stop Flag:  %d\r\n", stop_flag);
 8005214:	4e13      	ldr	r6, [pc, #76]	; (8005264 <Stop+0x60>)
*/

void Stop(void) {

	Set_Left(0, FORWARD);
	Set_Right(0, FORWARD); //STOP
 8005216:	f7ff fb03 	bl	8004820 <Set_Right>
	Reset_Counters();
	Clear_Buffers();
	debug_flag = FALSE;
 800521a:	2400      	movs	r4, #0

void Stop(void) {

	Set_Left(0, FORWARD);
	Set_Right(0, FORWARD); //STOP
	Reset_Counters();
 800521c:	f7fd fe68 	bl	8002ef0 <Reset_Counters>
	Clear_Buffers();
 8005220:	f7fd feac 	bl	8002f7c <Clear_Buffers>
	debug_flag = FALSE;
 8005224:	4b10      	ldr	r3, [pc, #64]	; (8005268 <Stop+0x64>)
#if DEBUG == TRUE
	sprintf(tx_buffer, "Stopping...... Stop Flag:  %d\r\n", stop_flag);
 8005226:	682a      	ldr	r2, [r5, #0]
 8005228:	4630      	mov	r0, r6
 800522a:	4910      	ldr	r1, [pc, #64]	; (800526c <Stop+0x68>)

	Set_Left(0, FORWARD);
	Set_Right(0, FORWARD); //STOP
	Reset_Counters();
	Clear_Buffers();
	debug_flag = FALSE;
 800522c:	601c      	str	r4, [r3, #0]
#if DEBUG == TRUE
	sprintf(tx_buffer, "Stopping...... Stop Flag:  %d\r\n", stop_flag);
 800522e:	f001 f99f 	bl	8006570 <siprintf>
	Transmit(tx_buffer);
 8005232:	4630      	mov	r0, r6
 8005234:	f7fd ff2c 	bl	8003090 <Transmit>
#endif
	//Send_State();
	//Send_Debug();
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, OFF);
 8005238:	4622      	mov	r2, r4
 800523a:	2101      	movs	r1, #1
 800523c:	480c      	ldr	r0, [pc, #48]	; (8005270 <Stop+0x6c>)
 800523e:	f7fb ffbf 	bl	80011c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, OFF);
 8005242:	4622      	mov	r2, r4
 8005244:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005248:	480a      	ldr	r0, [pc, #40]	; (8005274 <Stop+0x70>)
 800524a:	f7fb ffb9 	bl	80011c0 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, OFF);
	//HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, OFF);
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, ON);
 800524e:	2201      	movs	r2, #1
 8005250:	2102      	movs	r1, #2
 8005252:	4809      	ldr	r0, [pc, #36]	; (8005278 <Stop+0x74>)
 8005254:	f7fb ffb4 	bl	80011c0 <HAL_GPIO_WritePin>
	//Print_Maze();
	stop_flag = TRUE;
 8005258:	2301      	movs	r3, #1
 800525a:	602b      	str	r3, [r5, #0]
 800525c:	bd70      	pop	{r4, r5, r6, pc}
 800525e:	bf00      	nop
 8005260:	20000014 	.word	0x20000014
 8005264:	20002b84 	.word	0x20002b84
 8005268:	200009f8 	.word	0x200009f8
 800526c:	08007388 	.word	0x08007388
 8005270:	40020c00 	.word	0x40020c00
 8005274:	40020400 	.word	0x40020400
 8005278:	40021000 	.word	0x40021000

0800527c <Detect_Transition>:
	Set_Left(FWD_L + m_correction, FORWARD);
	Set_Right(FWD_R - m_correction, FORWARD);

}

void Detect_Transition() {
 800527c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	if (transition_flag == TRUE) {
 800527e:	4b34      	ldr	r3, [pc, #208]	; (8005350 <Detect_Transition+0xd4>)
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	2a01      	cmp	r2, #1
 8005284:	461a      	mov	r2, r3
 8005286:	d10e      	bne.n	80052a6 <Detect_Transition+0x2a>
		lenc_diff_corr = l_count - l_count_corr; //update corrected encoder counts
 8005288:	4b32      	ldr	r3, [pc, #200]	; (8005354 <Detect_Transition+0xd8>)
 800528a:	4a33      	ldr	r2, [pc, #204]	; (8005358 <Detect_Transition+0xdc>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6812      	ldr	r2, [r2, #0]
 8005290:	1a9b      	subs	r3, r3, r2
 8005292:	4a32      	ldr	r2, [pc, #200]	; (800535c <Detect_Transition+0xe0>)
 8005294:	6013      	str	r3, [r2, #0]
		renc_diff_corr = r_count - r_count_corr;
 8005296:	4b32      	ldr	r3, [pc, #200]	; (8005360 <Detect_Transition+0xe4>)
 8005298:	4a32      	ldr	r2, [pc, #200]	; (8005364 <Detect_Transition+0xe8>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6812      	ldr	r2, [r2, #0]
 800529e:	1a9b      	subs	r3, r3, r2
 80052a0:	4a31      	ldr	r2, [pc, #196]	; (8005368 <Detect_Transition+0xec>)
 80052a2:	6013      	str	r3, [r2, #0]
 80052a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	//only check for transitions in the first half of the square
	else if (fwd_flag == FALSE && (r_transition_flag == TRUE || l_transition_flag == TRUE)) { //detect transition and start counting from there
 80052a6:	4b31      	ldr	r3, [pc, #196]	; (800536c <Detect_Transition+0xf0>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d14f      	bne.n	800534e <Detect_Transition+0xd2>
 80052ae:	4b30      	ldr	r3, [pc, #192]	; (8005370 <Detect_Transition+0xf4>)
 80052b0:	4f30      	ldr	r7, [pc, #192]	; (8005374 <Detect_Transition+0xf8>)
 80052b2:	681c      	ldr	r4, [r3, #0]
 80052b4:	461e      	mov	r6, r3
 80052b6:	2c01      	cmp	r4, #1
 80052b8:	d002      	beq.n	80052c0 <Detect_Transition+0x44>
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d146      	bne.n	800534e <Detect_Transition+0xd2>
		l_count_corr = l_count; //save current count
 80052c0:	4b24      	ldr	r3, [pc, #144]	; (8005354 <Detect_Transition+0xd8>)
		r_count_corr = r_count;
		transition_flag = TRUE; //enable transition flag
		lenc_diff_corr = 0; //reset corrected difference
		renc_diff_corr = 0;
		if (l_transition_flag == TRUE) { //left leds to represent left
 80052c2:	683d      	ldr	r5, [r7, #0]
		renc_diff_corr = r_count - r_count_corr;
	}

	//only check for transitions in the first half of the square
	else if (fwd_flag == FALSE && (r_transition_flag == TRUE || l_transition_flag == TRUE)) { //detect transition and start counting from there
		l_count_corr = l_count; //save current count
 80052c4:	6819      	ldr	r1, [r3, #0]
 80052c6:	4b24      	ldr	r3, [pc, #144]	; (8005358 <Detect_Transition+0xdc>)
		r_count_corr = r_count;
		transition_flag = TRUE; //enable transition flag
		lenc_diff_corr = 0; //reset corrected difference
		renc_diff_corr = 0;
		if (l_transition_flag == TRUE) { //left leds to represent left
 80052c8:	2d01      	cmp	r5, #1
		renc_diff_corr = r_count - r_count_corr;
	}

	//only check for transitions in the first half of the square
	else if (fwd_flag == FALSE && (r_transition_flag == TRUE || l_transition_flag == TRUE)) { //detect transition and start counting from there
		l_count_corr = l_count; //save current count
 80052ca:	6019      	str	r1, [r3, #0]
		r_count_corr = r_count;
 80052cc:	4b24      	ldr	r3, [pc, #144]	; (8005360 <Detect_Transition+0xe4>)
 80052ce:	6819      	ldr	r1, [r3, #0]
 80052d0:	4b24      	ldr	r3, [pc, #144]	; (8005364 <Detect_Transition+0xe8>)
 80052d2:	6019      	str	r1, [r3, #0]
		transition_flag = TRUE; //enable transition flag
 80052d4:	f04f 0301 	mov.w	r3, #1
 80052d8:	6013      	str	r3, [r2, #0]
		lenc_diff_corr = 0; //reset corrected difference
 80052da:	f04f 0300 	mov.w	r3, #0
 80052de:	4a1f      	ldr	r2, [pc, #124]	; (800535c <Detect_Transition+0xe0>)
 80052e0:	6013      	str	r3, [r2, #0]
		renc_diff_corr = 0;
 80052e2:	4a21      	ldr	r2, [pc, #132]	; (8005368 <Detect_Transition+0xec>)
 80052e4:	6013      	str	r3, [r2, #0]
		if (l_transition_flag == TRUE) { //left leds to represent left
 80052e6:	d10e      	bne.n	8005306 <Detect_Transition+0x8a>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, ON);
 80052e8:	462a      	mov	r2, r5
 80052ea:	2102      	movs	r1, #2
 80052ec:	4822      	ldr	r0, [pc, #136]	; (8005378 <Detect_Transition+0xfc>)
 80052ee:	f7fb ff67 	bl	80011c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, ON);
 80052f2:	462a      	mov	r2, r5
 80052f4:	4629      	mov	r1, r5
 80052f6:	4820      	ldr	r0, [pc, #128]	; (8005378 <Detect_Transition+0xfc>)
 80052f8:	f7fb ff62 	bl	80011c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, ON);
 80052fc:	462a      	mov	r2, r5
 80052fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005302:	481e      	ldr	r0, [pc, #120]	; (800537c <Detect_Transition+0x100>)
 8005304:	e011      	b.n	800532a <Detect_Transition+0xae>

			l_dist = FWD_TRANS - T_OFF;
			r_dist = FWD_TRANS - T_OFF;
		}
		else if (r_transition_flag == TRUE) { //right leds to represent right
 8005306:	2c01      	cmp	r4, #1
 8005308:	d117      	bne.n	800533a <Detect_Transition+0xbe>
			HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, ON);
 800530a:	4622      	mov	r2, r4
 800530c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005310:	481b      	ldr	r0, [pc, #108]	; (8005380 <Detect_Transition+0x104>)
 8005312:	f7fb ff55 	bl	80011c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, ON);
 8005316:	4622      	mov	r2, r4
 8005318:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800531c:	4818      	ldr	r0, [pc, #96]	; (8005380 <Detect_Transition+0x104>)
 800531e:	f7fb ff4f 	bl	80011c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, ON);
 8005322:	4622      	mov	r2, r4
 8005324:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005328:	4815      	ldr	r0, [pc, #84]	; (8005380 <Detect_Transition+0x104>)
 800532a:	f7fb ff49 	bl	80011c0 <HAL_GPIO_WritePin>
			l_dist = FWD_TRANS;
 800532e:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8005332:	4a14      	ldr	r2, [pc, #80]	; (8005384 <Detect_Transition+0x108>)
 8005334:	6013      	str	r3, [r2, #0]
			r_dist = FWD_TRANS;
 8005336:	4a14      	ldr	r2, [pc, #80]	; (8005388 <Detect_Transition+0x10c>)
 8005338:	6013      	str	r3, [r2, #0]
		}
		r_transition_flag = FALSE; //reset transition flags after transition is detected
 800533a:	2300      	movs	r3, #0
 800533c:	6033      	str	r3, [r6, #0]
		l_transition_flag = FALSE;
 800533e:	603b      	str	r3, [r7, #0]
		if (debug_flag == TRUE) { //for debug at competitions
 8005340:	4b12      	ldr	r3, [pc, #72]	; (800538c <Detect_Transition+0x110>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d102      	bne.n	800534e <Detect_Transition+0xd2>
			Stop(); //stop
 8005348:	f7ff ff5c 	bl	8005204 <Stop>
 800534c:	e7fe      	b.n	800534c <Detect_Transition+0xd0>
 800534e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005350:	20001b18 	.word	0x20001b18
 8005354:	20001b10 	.word	0x20001b10
 8005358:	20001b0c 	.word	0x20001b0c
 800535c:	200009a0 	.word	0x200009a0
 8005360:	20000acc 	.word	0x20000acc
 8005364:	20001be0 	.word	0x20001be0
 8005368:	20001b1c 	.word	0x20001b1c
 800536c:	2000009c 	.word	0x2000009c
 8005370:	200008d8 	.word	0x200008d8
 8005374:	20001bd0 	.word	0x20001bd0
 8005378:	40021000 	.word	0x40021000
 800537c:	40020400 	.word	0x40020400
 8005380:	40020800 	.word	0x40020800
 8005384:	20003334 	.word	0x20003334
 8005388:	20002568 	.word	0x20002568
 800538c:	200009f8 	.word	0x200009f8

08005390 <Speed_Profiler>:
	 else { speed correction
	 }
	 */
}

void Speed_Profiler(int *speeds, int num_squares, int distance) {
 8005390:	b570      	push	{r4, r5, r6, lr}
 8005392:	4606      	mov	r6, r0
		140, 140, 140, 140, 140, //FWD1 - FWD5
		140, 140, 140, 140, 140, //FWD6 - FWD10
		140, 140, 140, 140, 140 //FWD11 - FWD15
	};
	*/
	Update_Sensors(FWD_SEARCH);
 8005394:	2002      	movs	r0, #2
	 else { speed correction
	 }
	 */
}

void Speed_Profiler(int *speeds, int num_squares, int distance) {
 8005396:	4615      	mov	r5, r2
		140, 140, 140, 140, 140, //FWD1 - FWD5
		140, 140, 140, 140, 140, //FWD6 - FWD10
		140, 140, 140, 140, 140 //FWD11 - FWD15
	};
	*/
	Update_Sensors(FWD_SEARCH);
 8005398:	f7ff f868 	bl	800446c <Update_Sensors>

	/*
	 * MOTOR SPEED CORRECTION and accelerate/decelerate decision
	 */
	static uint32_t distance_left; //distance left to cover in counts
	distance_left = distance - (lenc_diff + renc_diff)/2;
 800539c:	4b0c      	ldr	r3, [pc, #48]	; (80053d0 <Speed_Profiler+0x40>)

	m_correction = Motor_Correction(FALSE); //motor correction
 800539e:	2000      	movs	r0, #0

	/*
	 * MOTOR SPEED CORRECTION and accelerate/decelerate decision
	 */
	static uint32_t distance_left; //distance left to cover in counts
	distance_left = distance - (lenc_diff + renc_diff)/2;
 80053a0:	681c      	ldr	r4, [r3, #0]
 80053a2:	4b0c      	ldr	r3, [pc, #48]	; (80053d4 <Speed_Profiler+0x44>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	441c      	add	r4, r3

	m_correction = Motor_Correction(FALSE); //motor correction
 80053a8:	f7fd fd38 	bl	8002e1c <Motor_Correction>
 80053ac:	4b0a      	ldr	r3, [pc, #40]	; (80053d8 <Speed_Profiler+0x48>)

	/*
	 * MOTOR SPEED CORRECTION and accelerate/decelerate decision
	 */
	static uint32_t distance_left; //distance left to cover in counts
	distance_left = distance - (lenc_diff + renc_diff)/2;
 80053ae:	eba5 0454 	sub.w	r4, r5, r4, lsr #1

	m_correction = Motor_Correction(FALSE); //motor correction
 80053b2:	6018      	str	r0, [r3, #0]

	if (distance_left <= F_ENC2) {
 80053b4:	f5b4 7f2e 	cmp.w	r4, #696	; 0x2b8
 80053b8:	461c      	mov	r4, r3
 80053ba:	d801      	bhi.n	80053c0 <Speed_Profiler+0x30>
		Detect_Transition(); //only update values, don't actually turn on anything
 80053bc:	f7ff ff5e 	bl	800527c <Detect_Transition>
	}

	speeds[1] = FWD_L + m_correction;
 80053c0:	6823      	ldr	r3, [r4, #0]
 80053c2:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
	speeds[2] = FWD_R - m_correction;
 80053c6:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8

	if (distance_left <= F_ENC2) {
		Detect_Transition(); //only update values, don't actually turn on anything
	}

	speeds[1] = FWD_L + m_correction;
 80053ca:	6072      	str	r2, [r6, #4]
	speeds[2] = FWD_R - m_correction;
 80053cc:	60b3      	str	r3, [r6, #8]
 80053ce:	bd70      	pop	{r4, r5, r6, pc}
 80053d0:	200008d4 	.word	0x200008d4
 80053d4:	20000aa4 	.word	0x20000aa4
 80053d8:	2000131c 	.word	0x2000131c

080053dc <Search>:

}

void Search() {

	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, ON); //Turn on LEDs to indicate it is searching
 80053dc:	2201      	movs	r2, #1
 80053de:	484a      	ldr	r0, [pc, #296]	; (8005508 <Search+0x12c>)
		}
	}

}

void Search() {
 80053e0:	b570      	push	{r4, r5, r6, lr}

	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, ON); //Turn on LEDs to indicate it is searching
 80053e2:	4611      	mov	r1, r2
 80053e4:	f7fb feec 	bl	80011c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, OFF);
 80053e8:	2200      	movs	r2, #0
 80053ea:	2101      	movs	r1, #1
 80053ec:	4847      	ldr	r0, [pc, #284]	; (800550c <Search+0x130>)
 80053ee:	f7fb fee7 	bl	80011c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, OFF);
 80053f2:	2200      	movs	r2, #0
 80053f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053f8:	4845      	ldr	r0, [pc, #276]	; (8005510 <Search+0x134>)
 80053fa:	f7fb fee1 	bl	80011c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, OFF);
 80053fe:	2200      	movs	r2, #0
 8005400:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005404:	4842      	ldr	r0, [pc, #264]	; (8005510 <Search+0x134>)
 8005406:	f7fb fedb 	bl	80011c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 800540a:	2200      	movs	r2, #0
 800540c:	2102      	movs	r1, #2
 800540e:	483f      	ldr	r0, [pc, #252]	; (800550c <Search+0x130>)
 8005410:	f7fb fed6 	bl	80011c0 <HAL_GPIO_WritePin>

	HAL_Delay(1000); //delay before start to get finger out of the way
 8005414:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005418:	f7fa ffaa 	bl	8000370 <HAL_Delay>

	if (disable_reset == FALSE) { //if walls are loaded, or at center of maze
 800541c:	4b3d      	ldr	r3, [pc, #244]	; (8005514 <Search+0x138>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	b91b      	cbnz	r3, 800542a <Search+0x4e>
		Reset_Maze(); //reset walls
 8005422:	f7fe f8f1 	bl	8003608 <Reset_Maze>
		Read_Walls(); //read current walls
 8005426:	f7ff f86b 	bl	8004500 <Read_Walls>
	}

	Clear_Buffers(); //clear transition buffers
 800542a:	f7fd fda7 	bl	8002f7c <Clear_Buffers>
	Set_Left(FWD_L, FORWARD); //start going straight. get moving
	Set_Right(FWD_R, FORWARD);

    while(1) { //searching loop //while(maze[x_coord][y_coord] != 0)

    	if (cur_move == FWD && transition_flag == FALSE) { //if no transitions detected
 800542e:	4d3a      	ldr	r5, [pc, #232]	; (8005518 <Search+0x13c>)
		Reset_Maze(); //reset walls
		Read_Walls(); //read current walls
	}

	Clear_Buffers(); //clear transition buffers
	Reset_Counters(); //clear counters
 8005430:	f7fd fd5e 	bl	8002ef0 <Reset_Counters>

	Reset_Flags(); //reset flags
 8005434:	f7fd fdc4 	bl	8002fc0 <Reset_Flags>
	Floodfill(reverse_flag, search_flag, FALSE);
 8005438:	4b38      	ldr	r3, [pc, #224]	; (800551c <Search+0x140>)
 800543a:	2200      	movs	r2, #0
 800543c:	462c      	mov	r4, r5
 800543e:	6819      	ldr	r1, [r3, #0]
 8005440:	4b37      	ldr	r3, [pc, #220]	; (8005520 <Search+0x144>)
 8005442:	6818      	ldr	r0, [r3, #0]
 8005444:	f7fe f84a 	bl	80034dc <Floodfill>

	Update_Position(); //move to next square
 8005448:	f7fe f938 	bl	80036bc <Update_Position>

	Set_Left(FWD_L, FORWARD); //start going straight. get moving
 800544c:	2101      	movs	r1, #1
 800544e:	20c8      	movs	r0, #200	; 0xc8
 8005450:	f7ff f9be 	bl	80047d0 <Set_Left>
	Set_Right(FWD_R, FORWARD);
 8005454:	2101      	movs	r1, #1
 8005456:	20c8      	movs	r0, #200	; 0xc8
 8005458:	f7ff f9e2 	bl	8004820 <Set_Right>
    while(1) { //searching loop //while(maze[x_coord][y_coord] != 0)

    	if (cur_move == FWD && transition_flag == FALSE) { //if no transitions detected
    		Update_Sensors(FWD_SEARCH); //detect transitions
    	}
    	else if ((cur_move == RIGHT && r_turnflag == 0) || (cur_move == LEFT && l_turnflag == 0)) { //just get encoders
 800545c:	4e31      	ldr	r6, [pc, #196]	; (8005524 <Search+0x148>)
	Set_Left(FWD_L, FORWARD); //start going straight. get moving
	Set_Right(FWD_R, FORWARD);

    while(1) { //searching loop //while(maze[x_coord][y_coord] != 0)

    	if (cur_move == FWD && transition_flag == FALSE) { //if no transitions detected
 800545e:	682b      	ldr	r3, [r5, #0]
 8005460:	b923      	cbnz	r3, 800546c <Search+0x90>
 8005462:	4b31      	ldr	r3, [pc, #196]	; (8005528 <Search+0x14c>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	b963      	cbnz	r3, 8005482 <Search+0xa6>
    		Update_Sensors(FWD_SEARCH); //detect transitions
 8005468:	2002      	movs	r0, #2
 800546a:	e00b      	b.n	8005484 <Search+0xa8>
    	}
    	else if ((cur_move == RIGHT && r_turnflag == 0) || (cur_move == LEFT && l_turnflag == 0)) { //just get encoders
 800546c:	2b02      	cmp	r3, #2
 800546e:	d102      	bne.n	8005476 <Search+0x9a>
 8005470:	4b2e      	ldr	r3, [pc, #184]	; (800552c <Search+0x150>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	e002      	b.n	800547c <Search+0xa0>
 8005476:	2b01      	cmp	r3, #1
 8005478:	d103      	bne.n	8005482 <Search+0xa6>
 800547a:	6833      	ldr	r3, [r6, #0]
 800547c:	b90b      	cbnz	r3, 8005482 <Search+0xa6>
    		Update_Sensors(NONE);
 800547e:	2005      	movs	r0, #5
 8005480:	e000      	b.n	8005484 <Search+0xa8>
    	}

    	else {
    		Update_Sensors(TURN_SEARCH); //get side sensors for correction
 8005482:	2001      	movs	r0, #1
 8005484:	f7fe fff2 	bl	800446c <Update_Sensors>
    	}

    	if  (cur_move == FWD || r_turnflag > 0 || l_turnflag > 0 || dead_flag > 0) {
 8005488:	6823      	ldr	r3, [r4, #0]
 800548a:	b153      	cbz	r3, 80054a2 <Search+0xc6>
 800548c:	4a27      	ldr	r2, [pc, #156]	; (800552c <Search+0x150>)
 800548e:	6812      	ldr	r2, [r2, #0]
 8005490:	2a00      	cmp	r2, #0
 8005492:	dc06      	bgt.n	80054a2 <Search+0xc6>
 8005494:	6832      	ldr	r2, [r6, #0]
 8005496:	2a00      	cmp	r2, #0
 8005498:	dc03      	bgt.n	80054a2 <Search+0xc6>
 800549a:	4a25      	ldr	r2, [pc, #148]	; (8005530 <Search+0x154>)
 800549c:	6812      	ldr	r2, [r2, #0]
 800549e:	2a00      	cmp	r2, #0
 80054a0:	dd02      	ble.n	80054a8 <Search+0xcc>
    		Search_Correction(); //motor correction
 80054a2:	f7ff fc57 	bl	8004d54 <Search_Correction>
 80054a6:	e009      	b.n	80054bc <Search+0xe0>
    	}

    	else if (cur_move == PAUSE || stop_flag == TRUE) { //used to be crash detection. Done flag uses this to stop
 80054a8:	2b04      	cmp	r3, #4
 80054aa:	d003      	beq.n	80054b4 <Search+0xd8>
 80054ac:	4b21      	ldr	r3, [pc, #132]	; (8005534 <Search+0x158>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d103      	bne.n	80054bc <Search+0xe0>
    	case DEAD:
    		Dead_End();
    		break;
    	} //switch
    } //searching loop
}
 80054b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    	if  (cur_move == FWD || r_turnflag > 0 || l_turnflag > 0 || dead_flag > 0) {
    		Search_Correction(); //motor correction
    	}

    	else if (cur_move == PAUSE || stop_flag == TRUE) { //used to be crash detection. Done flag uses this to stop
    		Stop(); //stop the motors
 80054b8:	f7ff bea4 	b.w	8005204 <Stop>
    		break; //break out of while loop
    	}

     	//wall to no wall transition, or no wall to wall transition
    	if (cur_move == FWD) {
 80054bc:	6823      	ldr	r3, [r4, #0]
 80054be:	b90b      	cbnz	r3, 80054c4 <Search+0xe8>
    		Detect_Transition();
 80054c0:	f7ff fedc 	bl	800527c <Detect_Transition>
    	}

    	switch (cur_move) { //main case statement. While moving, check distance traveled. If 1 unit has been covered, execute next move
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	2b06      	cmp	r3, #6
 80054c8:	d8c9      	bhi.n	800545e <Search+0x82>
 80054ca:	a201      	add	r2, pc, #4	; (adr r2, 80054d0 <Search+0xf4>)
 80054cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d0:	080054f1 	.word	0x080054f1
 80054d4:	080054fd 	.word	0x080054fd
 80054d8:	080054f7 	.word	0x080054f7
 80054dc:	08005503 	.word	0x08005503
 80054e0:	0800545f 	.word	0x0800545f
 80054e4:	0800545f 	.word	0x0800545f
 80054e8:	080054ed 	.word	0x080054ed
    	//will eventually combine with above statement
    	case FWD_SPEED:
    		Forward_Speed();
 80054ec:	f7ff fa6c 	bl	80049c8 <Forward_Speed>
    	case FWD:
    		Forward_Search();
 80054f0:	f7ff f9be 	bl	8004870 <Forward_Search>
    		break;
 80054f4:	e7b2      	b.n	800545c <Search+0x80>

    	case RIGHT: //break up turn into turn and accelerate
    		Right_Search();
 80054f6:	f7ff fba5 	bl	8004c44 <Right_Search>
    		break;
 80054fa:	e7af      	b.n	800545c <Search+0x80>

    	case LEFT:
    		Left_Search();
 80054fc:	f7ff fb18 	bl	8004b30 <Left_Search>
    		break;
 8005500:	e7ac      	b.n	800545c <Search+0x80>

    	case DEAD:
    		Dead_End();
 8005502:	f7ff fded 	bl	80050e0 <Dead_End>
    		break;
 8005506:	e7a9      	b.n	800545c <Search+0x80>
 8005508:	40020c00 	.word	0x40020c00
 800550c:	40021000 	.word	0x40021000
 8005510:	40020400 	.word	0x40020400
 8005514:	2000241c 	.word	0x2000241c
 8005518:	20001b70 	.word	0x20001b70
 800551c:	20001bdc 	.word	0x20001bdc
 8005520:	20001324 	.word	0x20001324
 8005524:	20000b34 	.word	0x20000b34
 8005528:	20001b18 	.word	0x20001b18
 800552c:	20000abc 	.word	0x20000abc
 8005530:	20000b40 	.word	0x20000b40
 8005534:	20000014 	.word	0x20000014

08005538 <Forward_Spd>:
		cur_move = next_move; //execute next move
	}
	}
}

void Forward_Spd(int num, char n_state, int add_distance) {
 8005538:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800553a:	4605      	mov	r5, r0
 800553c:	4614      	mov	r4, r2
	430, 445, 450, 415, 420, //FWD6 - 10
	450, 480, 500, 520, 550 //FWD11 - 15
};

int distance = 0; //distance to travel on current state
Clear_Buffers();
 800553e:	f7fd fd1d 	bl	8002f7c <Clear_Buffers>
cur_move = FWD; //for detection transition
 8005542:	2200      	movs	r2, #0
 8005544:	4b2f      	ldr	r3, [pc, #188]	; (8005604 <Forward_Spd+0xcc>)

if (add_distance == TRUE) { //if coming off of a right or left turn
 8005546:	2c01      	cmp	r4, #1
 8005548:	f44f 742e 	mov.w	r4, #696	; 0x2b8
do {
Speed_Profiler(speeds, num, distance); //figure out whether to accelerate or decelerate and motor correction
Set_Left(speeds[1], FORWARD); //adjust speeds
Set_Right(speeds[2], FORWARD);
}
while ((transition_flag == FALSE && lenc_diff < distance && renc_diff < distance) ||
 800554c:	4e2e      	ldr	r6, [pc, #184]	; (8005608 <Forward_Spd+0xd0>)
	450, 480, 500, 520, 550 //FWD11 - 15
};

int distance = 0; //distance to travel on current state
Clear_Buffers();
cur_move = FWD; //for detection transition
 800554e:	601a      	str	r2, [r3, #0]

else { //normal distance
	distance = F_ENC2*num;
}

int base = base_speeds[num - 1]; //base speed
 8005550:	f105 32ff 	add.w	r2, r5, #4294967295

int speeds[3] = {base, 0, 0}; //left/right base , left/right corrected
 8005554:	4b2d      	ldr	r3, [pc, #180]	; (800560c <Forward_Spd+0xd4>)
int distance = 0; //distance to travel on current state
Clear_Buffers();
cur_move = FWD; //for detection transition

if (add_distance == TRUE) { //if coming off of a right or left turn
	distance = F_ENC2*num + RT_ENC_2;
 8005556:	fb04 f405 	mul.w	r4, r4, r5
	distance = F_ENC2*num;
}

int base = base_speeds[num - 1]; //base speed

int speeds[3] = {base, 0, 0}; //left/right base , left/right corrected
 800555a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
int distance = 0; //distance to travel on current state
Clear_Buffers();
cur_move = FWD; //for detection transition

if (add_distance == TRUE) { //if coming off of a right or left turn
	distance = F_ENC2*num + RT_ENC_2;
 800555e:	bf08      	it	eq
 8005560:	f204 149f 	addweq	r4, r4, #415	; 0x19f
	distance = F_ENC2*num;
}

int base = base_speeds[num - 1]; //base speed

int speeds[3] = {base, 0, 0}; //left/right base , left/right corrected
 8005564:	9301      	str	r3, [sp, #4]
 8005566:	2300      	movs	r3, #0
 8005568:	9302      	str	r3, [sp, #8]
 800556a:	9303      	str	r3, [sp, #12]
Reset_Counters();
 800556c:	f7fd fcc0 	bl	8002ef0 <Reset_Counters>

do {
Speed_Profiler(speeds, num, distance); //figure out whether to accelerate or decelerate and motor correction
 8005570:	4622      	mov	r2, r4
 8005572:	4629      	mov	r1, r5
 8005574:	a801      	add	r0, sp, #4
 8005576:	f7ff ff0b 	bl	8005390 <Speed_Profiler>
Set_Left(speeds[1], FORWARD); //adjust speeds
 800557a:	2101      	movs	r1, #1
 800557c:	9802      	ldr	r0, [sp, #8]
 800557e:	f7ff f927 	bl	80047d0 <Set_Left>
Set_Right(speeds[2], FORWARD);
 8005582:	2101      	movs	r1, #1
 8005584:	9803      	ldr	r0, [sp, #12]
 8005586:	f7ff f94b 	bl	8004820 <Set_Right>
}
while ((transition_flag == FALSE && lenc_diff < distance && renc_diff < distance) ||
 800558a:	6833      	ldr	r3, [r6, #0]
		(transition_flag == TRUE && lenc_diff_corr < FWD_TRANS && renc_diff_corr < FWD_TRANS));
 800558c:	b943      	cbnz	r3, 80055a0 <Forward_Spd+0x68>
do {
Speed_Profiler(speeds, num, distance); //figure out whether to accelerate or decelerate and motor correction
Set_Left(speeds[1], FORWARD); //adjust speeds
Set_Right(speeds[2], FORWARD);
}
while ((transition_flag == FALSE && lenc_diff < distance && renc_diff < distance) ||
 800558e:	4b20      	ldr	r3, [pc, #128]	; (8005610 <Forward_Spd+0xd8>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	42a3      	cmp	r3, r4
 8005594:	d210      	bcs.n	80055b8 <Forward_Spd+0x80>
 8005596:	4b1f      	ldr	r3, [pc, #124]	; (8005614 <Forward_Spd+0xdc>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	429c      	cmp	r4, r3
 800559c:	d8e8      	bhi.n	8005570 <Forward_Spd+0x38>
 800559e:	e00b      	b.n	80055b8 <Forward_Spd+0x80>
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d109      	bne.n	80055b8 <Forward_Spd+0x80>
		(transition_flag == TRUE && lenc_diff_corr < FWD_TRANS && renc_diff_corr < FWD_TRANS));
 80055a4:	4b1c      	ldr	r3, [pc, #112]	; (8005618 <Forward_Spd+0xe0>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 80055ac:	d204      	bcs.n	80055b8 <Forward_Spd+0x80>
 80055ae:	4b1b      	ldr	r3, [pc, #108]	; (800561c <Forward_Spd+0xe4>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 80055b6:	d3db      	bcc.n	8005570 <Forward_Spd+0x38>
//} while (lenc_diff < distance && renc_diff < distance);

angular_error = l_count - r_count;
 80055b8:	4b19      	ldr	r3, [pc, #100]	; (8005620 <Forward_Spd+0xe8>)
prev_r_count = r_count; //positive for right, negative for left error

#if DEBUG == TRUE
sprintf(tx_buffer, "Top Speed on Straightaway: %d mm/s \r\n-----------------\r\n", top_speed);
Transmit(tx_buffer);
top_speed = 0;
 80055ba:	2400      	movs	r4, #0
}
while ((transition_flag == FALSE && lenc_diff < distance && renc_diff < distance) ||
		(transition_flag == TRUE && lenc_diff_corr < FWD_TRANS && renc_diff_corr < FWD_TRANS));
//} while (lenc_diff < distance && renc_diff < distance);

angular_error = l_count - r_count;
 80055bc:	4d19      	ldr	r5, [pc, #100]	; (8005624 <Forward_Spd+0xec>)
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	4b19      	ldr	r3, [pc, #100]	; (8005628 <Forward_Spd+0xf0>)
prev_l_count = l_count;
prev_r_count = r_count; //positive for right, negative for left error

#if DEBUG == TRUE
sprintf(tx_buffer, "Top Speed on Straightaway: %d mm/s \r\n-----------------\r\n", top_speed);
 80055c2:	4e1a      	ldr	r6, [pc, #104]	; (800562c <Forward_Spd+0xf4>)
}
while ((transition_flag == FALSE && lenc_diff < distance && renc_diff < distance) ||
		(transition_flag == TRUE && lenc_diff_corr < FWD_TRANS && renc_diff_corr < FWD_TRANS));
//} while (lenc_diff < distance && renc_diff < distance);

angular_error = l_count - r_count;
 80055c4:	681b      	ldr	r3, [r3, #0]
prev_l_count = l_count;
prev_r_count = r_count; //positive for right, negative for left error

#if DEBUG == TRUE
sprintf(tx_buffer, "Top Speed on Straightaway: %d mm/s \r\n-----------------\r\n", top_speed);
 80055c6:	481a      	ldr	r0, [pc, #104]	; (8005630 <Forward_Spd+0xf8>)
}
while ((transition_flag == FALSE && lenc_diff < distance && renc_diff < distance) ||
		(transition_flag == TRUE && lenc_diff_corr < FWD_TRANS && renc_diff_corr < FWD_TRANS));
//} while (lenc_diff < distance && renc_diff < distance);

angular_error = l_count - r_count;
 80055c8:	1ad1      	subs	r1, r2, r3
 80055ca:	6029      	str	r1, [r5, #0]
prev_l_count = l_count;
 80055cc:	4919      	ldr	r1, [pc, #100]	; (8005634 <Forward_Spd+0xfc>)
 80055ce:	600a      	str	r2, [r1, #0]
prev_r_count = r_count; //positive for right, negative for left error
 80055d0:	4a19      	ldr	r2, [pc, #100]	; (8005638 <Forward_Spd+0x100>)

#if DEBUG == TRUE
sprintf(tx_buffer, "Top Speed on Straightaway: %d mm/s \r\n-----------------\r\n", top_speed);
 80055d2:	491a      	ldr	r1, [pc, #104]	; (800563c <Forward_Spd+0x104>)
		(transition_flag == TRUE && lenc_diff_corr < FWD_TRANS && renc_diff_corr < FWD_TRANS));
//} while (lenc_diff < distance && renc_diff < distance);

angular_error = l_count - r_count;
prev_l_count = l_count;
prev_r_count = r_count; //positive for right, negative for left error
 80055d4:	6013      	str	r3, [r2, #0]

#if DEBUG == TRUE
sprintf(tx_buffer, "Top Speed on Straightaway: %d mm/s \r\n-----------------\r\n", top_speed);
 80055d6:	6832      	ldr	r2, [r6, #0]
 80055d8:	f000 ffca 	bl	8006570 <siprintf>
Transmit(tx_buffer);
 80055dc:	4814      	ldr	r0, [pc, #80]	; (8005630 <Forward_Spd+0xf8>)
 80055de:	f7fd fd57 	bl	8003090 <Transmit>
top_speed = 0;
sprintf(tx_buffer, "Angular Error: %d \r\n---------------\r\n", angular_error);
 80055e2:	682a      	ldr	r2, [r5, #0]
 80055e4:	4916      	ldr	r1, [pc, #88]	; (8005640 <Forward_Spd+0x108>)
 80055e6:	4812      	ldr	r0, [pc, #72]	; (8005630 <Forward_Spd+0xf8>)
prev_r_count = r_count; //positive for right, negative for left error

#if DEBUG == TRUE
sprintf(tx_buffer, "Top Speed on Straightaway: %d mm/s \r\n-----------------\r\n", top_speed);
Transmit(tx_buffer);
top_speed = 0;
 80055e8:	6034      	str	r4, [r6, #0]
sprintf(tx_buffer, "Angular Error: %d \r\n---------------\r\n", angular_error);
 80055ea:	f000 ffc1 	bl	8006570 <siprintf>
Transmit(tx_buffer);
 80055ee:	4810      	ldr	r0, [pc, #64]	; (8005630 <Forward_Spd+0xf8>)
 80055f0:	f7fd fd4e 	bl	8003090 <Transmit>
#endif
speedrunturn = FALSE;
 80055f4:	4b13      	ldr	r3, [pc, #76]	; (8005644 <Forward_Spd+0x10c>)
 80055f6:	601c      	str	r4, [r3, #0]
transition_flag = FALSE;
 80055f8:	4b03      	ldr	r3, [pc, #12]	; (8005608 <Forward_Spd+0xd0>)
 80055fa:	601c      	str	r4, [r3, #0]
Turn_Off_Lights();
 80055fc:	f7fe fb62 	bl	8003cc4 <Turn_Off_Lights>

}
 8005600:	b004      	add	sp, #16
 8005602:	bd70      	pop	{r4, r5, r6, pc}
 8005604:	20001b70 	.word	0x20001b70
 8005608:	20001b18 	.word	0x20001b18
 800560c:	08007474 	.word	0x08007474
 8005610:	200008d4 	.word	0x200008d4
 8005614:	20000aa4 	.word	0x20000aa4
 8005618:	200009a0 	.word	0x200009a0
 800561c:	20001b1c 	.word	0x20001b1c
 8005620:	20001b10 	.word	0x20001b10
 8005624:	20001b14 	.word	0x20001b14
 8005628:	20000acc 	.word	0x20000acc
 800562c:	200009fc 	.word	0x200009fc
 8005630:	20002b84 	.word	0x20002b84
 8005634:	2000251c 	.word	0x2000251c
 8005638:	200024b0 	.word	0x200024b0
 800563c:	080073a8 	.word	0x080073a8
 8005640:	08007362 	.word	0x08007362
 8005644:	20000aac 	.word	0x20000aac

08005648 <Speed_Run>:
	Stop(); //stop spinning
	HAL_TIM_Base_Stop(&htim5); //stop timer

}

void Speed_Run(char path[]) {
 8005648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

//take optimal path and convert to fast straightaways
start_flag = TRUE;
speedrunturn = FALSE;
angular_error = 0;
 800564c:	4b52      	ldr	r3, [pc, #328]	; (8005798 <Speed_Run+0x150>)

void Speed_Run(char path[]) {

//take optimal path and convert to fast straightaways
start_flag = TRUE;
speedrunturn = FALSE;
 800564e:	f04f 0800 	mov.w	r8, #0
}

void Speed_Run(char path[]) {

//take optimal path and convert to fast straightaways
start_flag = TRUE;
 8005652:	f04f 0901 	mov.w	r9, #1
 8005656:	f8df a158 	ldr.w	sl, [pc, #344]	; 80057b0 <Speed_Run+0x168>
speedrunturn = FALSE;
 800565a:	4d50      	ldr	r5, [pc, #320]	; (800579c <Speed_Run+0x154>)
angular_error = 0;
int counter = 0;
char ps =  path[counter];
counter++;
char ns = path[counter];
 800565c:	4606      	mov	r6, r0
void Speed_Run(char path[]) {

//take optimal path and convert to fast straightaways
start_flag = TRUE;
speedrunturn = FALSE;
angular_error = 0;
 800565e:	f8c3 8000 	str.w	r8, [r3]
char ps =  path[counter];
counter++;
char ns = path[counter];
//l_count and r_count

HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, ON); //Turn on LEDs to indicate it is searching
 8005662:	464a      	mov	r2, r9
}

void Speed_Run(char path[]) {

//take optimal path and convert to fast straightaways
start_flag = TRUE;
 8005664:	f8ca 9000 	str.w	r9, [sl]
char ps =  path[counter];
counter++;
char ns = path[counter];
//l_count and r_count

HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, ON); //Turn on LEDs to indicate it is searching
 8005668:	4649      	mov	r1, r9

void Speed_Run(char path[]) {

//take optimal path and convert to fast straightaways
start_flag = TRUE;
speedrunturn = FALSE;
 800566a:	f8c5 8000 	str.w	r8, [r5]
angular_error = 0;
int counter = 0;
char ps =  path[counter];
 800566e:	7807      	ldrb	r7, [r0, #0]
counter++;
char ns = path[counter];
//l_count and r_count

HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, ON); //Turn on LEDs to indicate it is searching
 8005670:	484b      	ldr	r0, [pc, #300]	; (80057a0 <Speed_Run+0x158>)
speedrunturn = FALSE;
angular_error = 0;
int counter = 0;
char ps =  path[counter];
counter++;
char ns = path[counter];
 8005672:	f816 4f01 	ldrb.w	r4, [r6, #1]!
//l_count and r_count

HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, ON); //Turn on LEDs to indicate it is searching
 8005676:	f7fb fda3 	bl	80011c0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, OFF);
 800567a:	4642      	mov	r2, r8
 800567c:	4649      	mov	r1, r9
 800567e:	4849      	ldr	r0, [pc, #292]	; (80057a4 <Speed_Run+0x15c>)
 8005680:	f7fb fd9e 	bl	80011c0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, OFF);
 8005684:	4642      	mov	r2, r8
 8005686:	f44f 7180 	mov.w	r1, #256	; 0x100
 800568a:	4847      	ldr	r0, [pc, #284]	; (80057a8 <Speed_Run+0x160>)
 800568c:	f7fb fd98 	bl	80011c0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, OFF);
 8005690:	4642      	mov	r2, r8
 8005692:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005696:	4844      	ldr	r0, [pc, #272]	; (80057a8 <Speed_Run+0x160>)
 8005698:	f7fb fd92 	bl	80011c0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 800569c:	4642      	mov	r2, r8
 800569e:	2102      	movs	r1, #2
 80056a0:	4840      	ldr	r0, [pc, #256]	; (80057a4 <Speed_Run+0x15c>)
 80056a2:	f7fb fd8d 	bl	80011c0 <HAL_GPIO_WritePin>

Clear_Buffers();
 80056a6:	f7fd fc69 	bl	8002f7c <Clear_Buffers>
Reset_Counters();
 80056aa:	f7fd fc21 	bl	8002ef0 <Reset_Counters>

HAL_TIM_Base_Start(&htim5); //start counter for speed
 80056ae:	483f      	ldr	r0, [pc, #252]	; (80057ac <Speed_Run+0x164>)
 80056b0:	f7fc fccc 	bl	800204c <HAL_TIM_Base_Start>

HAL_Delay(1000); //delay before start to get finger out of the way
 80056b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80056b8:	f7fa fe5a 	bl	8000370 <HAL_Delay>

while (ps != STOP) {
 80056bc:	2f73      	cmp	r7, #115	; 0x73
 80056be:	d064      	beq.n	800578a <Speed_Run+0x142>

switch (ps) {
 80056c0:	3f62      	subs	r7, #98	; 0x62
 80056c2:	2f14      	cmp	r7, #20
 80056c4:	d859      	bhi.n	800577a <Speed_Run+0x132>
 80056c6:	e8df f007 	tbb	[pc, r7]
 80056ca:	1f1b      	.short	0x1f1b
 80056cc:	2f582723 	.word	0x2f582723
 80056d0:	3f3b3733 	.word	0x3f3b3733
 80056d4:	4b47430b 	.word	0x4b47430b
 80056d8:	580e534f 	.word	0x580e534f
 80056dc:	1611      	.short	0x1611
 80056de:	2b          	.byte	0x2b
 80056df:	00          	.byte	0x00

case L90:
	Left_Spd(1, ns);
 80056e0:	4621      	mov	r1, r4
 80056e2:	2001      	movs	r0, #1
 80056e4:	e004      	b.n	80056f0 <Speed_Run+0xa8>
	break;
case R90:
	Right_Spd(1, ns);
 80056e6:	4621      	mov	r1, r4
 80056e8:	2001      	movs	r0, #1
 80056ea:	e006      	b.n	80056fa <Speed_Run+0xb2>
	break;
case L180:
	Left_Spd(2, ns);
 80056ec:	4621      	mov	r1, r4
 80056ee:	2002      	movs	r0, #2
 80056f0:	f7ff fb44 	bl	8004d7c <Left_Spd>
	break;
 80056f4:	e041      	b.n	800577a <Speed_Run+0x132>
case R180:
	Right_Spd(2, ns);
 80056f6:	4621      	mov	r1, r4
 80056f8:	2002      	movs	r0, #2
 80056fa:	f7ff fbc5 	bl	8004e88 <Right_Spd>
	break;
 80056fe:	e03c      	b.n	800577a <Speed_Run+0x132>
case FWD1:
	Forward_Spd(1, ns, speedrunturn);
 8005700:	682a      	ldr	r2, [r5, #0]
 8005702:	4621      	mov	r1, r4
 8005704:	2001      	movs	r0, #1
 8005706:	e036      	b.n	8005776 <Speed_Run+0x12e>
	break;
case FWD2:
	Forward_Spd(2, ns, speedrunturn);
 8005708:	682a      	ldr	r2, [r5, #0]
 800570a:	4621      	mov	r1, r4
 800570c:	2002      	movs	r0, #2
 800570e:	e032      	b.n	8005776 <Speed_Run+0x12e>
	break;
case FWD3:
	Forward_Spd(3, ns, speedrunturn);
 8005710:	682a      	ldr	r2, [r5, #0]
 8005712:	4621      	mov	r1, r4
 8005714:	2003      	movs	r0, #3
 8005716:	e02e      	b.n	8005776 <Speed_Run+0x12e>
	break;
case FWD4:
	Forward_Spd(4, ns, speedrunturn);
 8005718:	682a      	ldr	r2, [r5, #0]
 800571a:	4621      	mov	r1, r4
 800571c:	2004      	movs	r0, #4
 800571e:	e02a      	b.n	8005776 <Speed_Run+0x12e>
	break;
case FWD5:
	Forward_Spd(5, ns, speedrunturn);
 8005720:	682a      	ldr	r2, [r5, #0]
 8005722:	4621      	mov	r1, r4
 8005724:	2005      	movs	r0, #5
 8005726:	e026      	b.n	8005776 <Speed_Run+0x12e>
	break;
case FWD6:
	Forward_Spd(6, ns, speedrunturn);
 8005728:	682a      	ldr	r2, [r5, #0]
 800572a:	4621      	mov	r1, r4
 800572c:	2006      	movs	r0, #6
 800572e:	e022      	b.n	8005776 <Speed_Run+0x12e>
	break;
case FWD7:
	Forward_Spd(7, ns, speedrunturn);
 8005730:	682a      	ldr	r2, [r5, #0]
 8005732:	4621      	mov	r1, r4
 8005734:	2007      	movs	r0, #7
 8005736:	e01e      	b.n	8005776 <Speed_Run+0x12e>
	break;
case FWD8:
	Forward_Spd(8, ns, speedrunturn);
 8005738:	682a      	ldr	r2, [r5, #0]
 800573a:	4621      	mov	r1, r4
 800573c:	2008      	movs	r0, #8
 800573e:	e01a      	b.n	8005776 <Speed_Run+0x12e>
	break;
case FWD9:
	Forward_Spd(9, ns, speedrunturn);
 8005740:	682a      	ldr	r2, [r5, #0]
 8005742:	4621      	mov	r1, r4
 8005744:	2009      	movs	r0, #9
 8005746:	e016      	b.n	8005776 <Speed_Run+0x12e>
	break;
case FWD10:
	Forward_Spd(10, ns, speedrunturn);
 8005748:	682a      	ldr	r2, [r5, #0]
 800574a:	4621      	mov	r1, r4
 800574c:	200a      	movs	r0, #10
 800574e:	e012      	b.n	8005776 <Speed_Run+0x12e>
	break;
case FWD11:
	Forward_Spd(11, ns, speedrunturn);
 8005750:	682a      	ldr	r2, [r5, #0]
 8005752:	4621      	mov	r1, r4
 8005754:	200b      	movs	r0, #11
 8005756:	e00e      	b.n	8005776 <Speed_Run+0x12e>
	break;
case FWD12:
	Forward_Spd(12, ns, speedrunturn);
 8005758:	682a      	ldr	r2, [r5, #0]
 800575a:	4621      	mov	r1, r4
 800575c:	200c      	movs	r0, #12
 800575e:	e00a      	b.n	8005776 <Speed_Run+0x12e>
	break;
case FWD13:
	Forward_Spd(13, ns, speedrunturn);
 8005760:	682a      	ldr	r2, [r5, #0]
 8005762:	4621      	mov	r1, r4
 8005764:	200d      	movs	r0, #13
 8005766:	e006      	b.n	8005776 <Speed_Run+0x12e>
	break;
case FWD14:
	Forward_Spd(14, ns, speedrunturn);
 8005768:	682a      	ldr	r2, [r5, #0]
 800576a:	4621      	mov	r1, r4
 800576c:	200e      	movs	r0, #14
 800576e:	e002      	b.n	8005776 <Speed_Run+0x12e>
	break;
case FWD15:
	Forward_Spd(15, ns, speedrunturn);
 8005770:	682a      	ldr	r2, [r5, #0]
 8005772:	4621      	mov	r1, r4
 8005774:	200f      	movs	r0, #15
 8005776:	f7ff fedf 	bl	8005538 <Forward_Spd>
	break;
}
counter++;
ps = ns;
ns = path[counter];
 800577a:	f816 3f01 	ldrb.w	r3, [r6, #1]!
start_flag = FALSE;
 800577e:	2200      	movs	r2, #0
case FWD15:
	Forward_Spd(15, ns, speedrunturn);
	break;
}
counter++;
ps = ns;
 8005780:	4627      	mov	r7, r4
ns = path[counter];
start_flag = FALSE;
 8005782:	f8ca 2000 	str.w	r2, [sl]
	Forward_Spd(15, ns, speedrunturn);
	break;
}
counter++;
ps = ns;
ns = path[counter];
 8005786:	461c      	mov	r4, r3
 8005788:	e798      	b.n	80056bc <Speed_Run+0x74>
start_flag = FALSE;
}

HAL_TIM_Base_Stop(&htim5); //stop counting seconds
 800578a:	4808      	ldr	r0, [pc, #32]	; (80057ac <Speed_Run+0x164>)
 800578c:	f7fc fc6b 	bl	8002066 <HAL_TIM_Base_Stop>
Stop();
}
 8005790:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
ns = path[counter];
start_flag = FALSE;
}

HAL_TIM_Base_Stop(&htim5); //stop counting seconds
Stop();
 8005794:	f7ff bd36 	b.w	8005204 <Stop>
 8005798:	20001b14 	.word	0x20001b14
 800579c:	20000aac 	.word	0x20000aac
 80057a0:	40020c00 	.word	0x40020c00
 80057a4:	40021000 	.word	0x40021000
 80057a8:	40020400 	.word	0x40020400
 80057ac:	2000256c 	.word	0x2000256c
 80057b0:	2000000c 	.word	0x2000000c

080057b4 <Run_Maze>:
  } //ready loop
} //main function

void Run_Maze() { //function to run maze. will only speed run if all walls are found

	if (disable_reset == FALSE) {
 80057b4:	4b35      	ldr	r3, [pc, #212]	; (800588c <Run_Maze+0xd8>)
 80057b6:	681a      	ldr	r2, [r3, #0]
	  }
  HAL_Delay(500); //ONLY CHECK FOR FINGER every half second. If you check to quickly it'll never start
  } //ready loop
} //main function

void Run_Maze() { //function to run maze. will only speed run if all walls are found
 80057b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057bc:	461e      	mov	r6, r3

	if (disable_reset == FALSE) {
 80057be:	b90a      	cbnz	r2, 80057c4 <Run_Maze+0x10>
		Reset_Maze();
 80057c0:	f7fd ff22 	bl	8003608 <Reset_Maze>
	}
	Calc_Optimal(); //calculate the optimal path
	Get_Coordinate(); //function to see if all coordinates on optimal path are visited.

	while (coordinate_count > 0) { //if all walls found go directly to speed run
		reverse_flag = FALSE;
 80057c4:	4d32      	ldr	r5, [pc, #200]	; (8005890 <Run_Maze+0xdc>)
void Run_Maze() { //function to run maze. will only speed run if all walls are found

	if (disable_reset == FALSE) {
		Reset_Maze();
	}
	Calc_Optimal(); //calculate the optimal path
 80057c6:	f7fe f835 	bl	8003834 <Calc_Optimal>
	Get_Coordinate(); //function to see if all coordinates on optimal path are visited.

	while (coordinate_count > 0) { //if all walls found go directly to speed run
 80057ca:	4f32      	ldr	r7, [pc, #200]	; (8005894 <Run_Maze+0xe0>)

	if (disable_reset == FALSE) {
		Reset_Maze();
	}
	Calc_Optimal(); //calculate the optimal path
	Get_Coordinate(); //function to see if all coordinates on optimal path are visited.
 80057cc:	f7fe f974 	bl	8003ab8 <Get_Coordinate>
 80057d0:	46a8      	mov	r8, r5

	while (coordinate_count > 0) { //if all walls found go directly to speed run
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	4c30      	ldr	r4, [pc, #192]	; (8005898 <Run_Maze+0xe4>)
 80057d6:	b30b      	cbz	r3, 800581c <Run_Maze+0x68>
		reverse_flag = FALSE;
 80057d8:	2300      	movs	r3, #0
 80057da:	602b      	str	r3, [r5, #0]
		stop_flag = FALSE;
 80057dc:	6023      	str	r3, [r4, #0]
		Search(); //reached the end
 80057de:	f7ff fdfd 	bl	80053dc <Search>
		Mark_Center(); //mark the target squares
 80057e2:	f7fe f949 	bl	8003a78 <Mark_Center>
		Fill_Center(); //fill the walls around the center squares
 80057e6:	f7fe f955 	bl	8003a94 <Fill_Center>
		Program_Walls_Flash(); //program in walls before going home
 80057ea:	f7fe fc8d 	bl	8004108 <Program_Walls_Flash>
		if (done_flag == TRUE) {
 80057ee:	4b2b      	ldr	r3, [pc, #172]	; (800589c <Run_Maze+0xe8>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b01      	cmp	r3, #1
			disable_reset = TRUE;
 80057f4:	bf08      	it	eq
 80057f6:	6033      	streq	r3, [r6, #0]
		}
#if DEBUG == TRUE
		Print_Maze();
 80057f8:	f7fd fd94 	bl	8003324 <Print_Maze>
#endif
		reverse_flag = TRUE;
 80057fc:	2301      	movs	r3, #1
 80057fe:	f8c8 3000 	str.w	r3, [r8]
		stop_flag = FALSE;
 8005802:	2300      	movs	r3, #0
 8005804:	6023      	str	r3, [r4, #0]
		Search(); //go back
 8005806:	f7ff fde9 	bl	80053dc <Search>
		#if DEBUG == TRUE
		Print_Maze();
 800580a:	f7fd fd8b 	bl	8003324 <Print_Maze>
		#endif
		Program_Walls_Flash();
 800580e:	f7fe fc7b 	bl	8004108 <Program_Walls_Flash>
		Calc_Optimal();
 8005812:	f7fe f80f 	bl	8003834 <Calc_Optimal>
		Get_Coordinate();
 8005816:	f7fe f94f 	bl	8003ab8 <Get_Coordinate>
 800581a:	e7da      	b.n	80057d2 <Run_Maze+0x1e>
	}

	Turn_On_Lights(); //turn on lights to show that its ready to speed run
 800581c:	f7fe fa18 	bl	8003c50 <Turn_On_Lights>

	stop_flag = TRUE;
 8005820:	2301      	movs	r3, #1
 8005822:	6023      	str	r3, [r4, #0]
	do {
		HAL_Delay(100);
 8005824:	2064      	movs	r0, #100	; 0x64
 8005826:	f7fa fda3 	bl	8000370 <HAL_Delay>
	} while(stop_flag == TRUE); //wait for button press
 800582a:	6823      	ldr	r3, [r4, #0]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d0f9      	beq.n	8005824 <Run_Maze+0x70>

	Calc_Optimal(); //calculate optimal
 8005830:	f7fe f800 	bl	8003834 <Calc_Optimal>
	Speed_Run(fast_path); //speed run
	Dead_End_Correct(); //align into last square
	x_coord = final_x; //set position to final square
	y_coord = final_y;
	cur_dir = final_dir; //set direction to final direction
	reverse_flag = TRUE;
 8005834:	4d16      	ldr	r5, [pc, #88]	; (8005890 <Run_Maze+0xdc>)
	do {
		HAL_Delay(100);
	} while(stop_flag == TRUE); //wait for button press

	Calc_Optimal(); //calculate optimal
	Fast_Straights(); //calculate fast straightaways
 8005836:	f7fe f973 	bl	8003b20 <Fast_Straights>

	Speed_Run(fast_path); //speed run
 800583a:	4819      	ldr	r0, [pc, #100]	; (80058a0 <Run_Maze+0xec>)
 800583c:	f7ff ff04 	bl	8005648 <Speed_Run>
	Dead_End_Correct(); //align into last square
	x_coord = final_x; //set position to final square
	y_coord = final_y;
	cur_dir = final_dir; //set direction to final direction
	reverse_flag = TRUE;
 8005840:	2401      	movs	r4, #1

	Calc_Optimal(); //calculate optimal
	Fast_Straights(); //calculate fast straightaways

	Speed_Run(fast_path); //speed run
	Dead_End_Correct(); //align into last square
 8005842:	f7ff fba7 	bl	8004f94 <Dead_End_Correct>
	x_coord = final_x; //set position to final square
 8005846:	4b17      	ldr	r3, [pc, #92]	; (80058a4 <Run_Maze+0xf0>)
	y_coord = final_y;
	cur_dir = final_dir; //set direction to final direction
	reverse_flag = TRUE;
	stop_flag = FALSE;
 8005848:	2600      	movs	r6, #0
	Speed_Run(fast_path); //speed run
	Dead_End_Correct(); //align into last square
	x_coord = final_x; //set position to final square
	y_coord = final_y;
	cur_dir = final_dir; //set direction to final direction
	reverse_flag = TRUE;
 800584a:	602c      	str	r4, [r5, #0]
	Calc_Optimal(); //calculate optimal
	Fast_Straights(); //calculate fast straightaways

	Speed_Run(fast_path); //speed run
	Dead_End_Correct(); //align into last square
	x_coord = final_x; //set position to final square
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	4b16      	ldr	r3, [pc, #88]	; (80058a8 <Run_Maze+0xf4>)
 8005850:	601a      	str	r2, [r3, #0]
	y_coord = final_y;
 8005852:	4b16      	ldr	r3, [pc, #88]	; (80058ac <Run_Maze+0xf8>)
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	4b16      	ldr	r3, [pc, #88]	; (80058b0 <Run_Maze+0xfc>)
 8005858:	601a      	str	r2, [r3, #0]
	cur_dir = final_dir; //set direction to final direction
 800585a:	4b16      	ldr	r3, [pc, #88]	; (80058b4 <Run_Maze+0x100>)
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	4b16      	ldr	r3, [pc, #88]	; (80058b8 <Run_Maze+0x104>)
 8005860:	601a      	str	r2, [r3, #0]
	reverse_flag = TRUE;
	stop_flag = FALSE;
 8005862:	4b0d      	ldr	r3, [pc, #52]	; (8005898 <Run_Maze+0xe4>)
 8005864:	601e      	str	r6, [r3, #0]
	Search(); //go back
 8005866:	f7ff fdb9 	bl	80053dc <Search>
	reverse_flag = FALSE;
 800586a:	602e      	str	r6, [r5, #0]
	Turn_On_Lights(); //flash lights
 800586c:	f7fe f9f0 	bl	8003c50 <Turn_On_Lights>
	HAL_Delay(500);
 8005870:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005874:	f7fa fd7c 	bl	8000370 <HAL_Delay>
	Turn_Off_Lights();
 8005878:	f7fe fa24 	bl	8003cc4 <Turn_Off_Lights>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, ON); ///set first led to indicate ready
 800587c:	4622      	mov	r2, r4
 800587e:	2102      	movs	r1, #2
 8005880:	480e      	ldr	r0, [pc, #56]	; (80058bc <Run_Maze+0x108>)

}
 8005882:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	Search(); //go back
	reverse_flag = FALSE;
	Turn_On_Lights(); //flash lights
	HAL_Delay(500);
	Turn_Off_Lights();
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, ON); ///set first led to indicate ready
 8005886:	f7fb bc9b 	b.w	80011c0 <HAL_GPIO_WritePin>
 800588a:	bf00      	nop
 800588c:	2000241c 	.word	0x2000241c
 8005890:	20001324 	.word	0x20001324
 8005894:	20002420 	.word	0x20002420
 8005898:	20000014 	.word	0x20000014
 800589c:	20000b3c 	.word	0x20000b3c
 80058a0:	200024b4 	.word	0x200024b4
 80058a4:	20000940 	.word	0x20000940
 80058a8:	20000ab8 	.word	0x20000ab8
 80058ac:	20000944 	.word	0x20000944
 80058b0:	20000010 	.word	0x20000010
 80058b4:	20000ac8 	.word	0x20000ac8
 80058b8:	20001b08 	.word	0x20001b08
 80058bc:	40021000 	.word	0x40021000

080058c0 <Measure_Speed>:
void SetSpeed(int left_motor, int right_motor) {


}

void Measure_Speed() { //from pwm 100 to 600, get speed in mm/s
 80058c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c4:	b0bd      	sub	sp, #244	; 0xf4
	static uint32_t prev_right_speed = 0;

	Reset_Counters();
	HAL_TIM_Base_Start(&htim5); //start timer
	Set_Left(FWD_L, FORWARD);
	Set_Right(FWD_R, FORWARD);
 80058c6:	246e      	movs	r4, #110	; 0x6e
	int left_acceleration = 0;
	int right_acceleration = 0;
	static uint32_t prev_left_speed = 0;
	static uint32_t prev_right_speed = 0;

	Reset_Counters();
 80058c8:	f7fd fb12 	bl	8002ef0 <Reset_Counters>
	HAL_TIM_Base_Start(&htim5); //start timer
 80058cc:	4840      	ldr	r0, [pc, #256]	; (80059d0 <Measure_Speed+0x110>)
 80058ce:	ae09      	add	r6, sp, #36	; 0x24
 80058d0:	f7fc fbbc 	bl	800204c <HAL_TIM_Base_Start>
	Set_Left(FWD_L, FORWARD);
 80058d4:	2101      	movs	r1, #1
 80058d6:	20c8      	movs	r0, #200	; 0xc8
	Set_Right(FWD_R, FORWARD);
 80058d8:	4637      	mov	r7, r6
	static uint32_t prev_left_speed = 0;
	static uint32_t prev_right_speed = 0;

	Reset_Counters();
	HAL_TIM_Base_Start(&htim5); //start timer
	Set_Left(FWD_L, FORWARD);
 80058da:	f7fe ff79 	bl	80047d0 <Set_Left>
	Set_Right(FWD_R, FORWARD);
 80058de:	2101      	movs	r1, #1
 80058e0:	20c8      	movs	r0, #200	; 0xc8
 80058e2:	f7fe ff9d 	bl	8004820 <Set_Right>

for (int i = 1; i <= 50; i++) { //start speed loop

	Set_Left(100 + 10*i, FORWARD); //start motors
 80058e6:	2101      	movs	r1, #1
 80058e8:	4620      	mov	r0, r4
 80058ea:	f7fe ff71 	bl	80047d0 <Set_Left>
	Set_Right(100 + 10*i, FORWARD);
	HAL_Delay(5); //let accelerate
	debug_count = 0; //reset debug count
 80058ee:	2500      	movs	r5, #0
	Set_Right(FWD_R, FORWARD);

for (int i = 1; i <= 50; i++) { //start speed loop

	Set_Left(100 + 10*i, FORWARD); //start motors
	Set_Right(100 + 10*i, FORWARD);
 80058f0:	2101      	movs	r1, #1
 80058f2:	4620      	mov	r0, r4
		Update_Sensors(TIME);
		//if (l_count > F_ENC2*4 || r_count > F_ENC2*4) {
			//break;
		//}

		if (time_count - prev_time_count > 20000) { //sample every 20 ms
 80058f4:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 80059e4 <Measure_Speed+0x124>
	Set_Right(FWD_R, FORWARD);

for (int i = 1; i <= 50; i++) { //start speed loop

	Set_Left(100 + 10*i, FORWARD); //start motors
	Set_Right(100 + 10*i, FORWARD);
 80058f8:	f7fe ff92 	bl	8004820 <Set_Right>
	HAL_Delay(5); //let accelerate
 80058fc:	2005      	movs	r0, #5
 80058fe:	f7fa fd37 	bl	8000370 <HAL_Delay>
	debug_count = 0; //reset debug count

	while (debug_count < SAMPLES) { //sample five times
 8005902:	2d0a      	cmp	r5, #10
 8005904:	d033      	beq.n	800596e <Measure_Speed+0xae>

		Update_Sensors(TIME);
 8005906:	2003      	movs	r0, #3
 8005908:	f7fe fdb0 	bl	800446c <Update_Sensors>
		//if (l_count > F_ENC2*4 || r_count > F_ENC2*4) {
			//break;
		//}

		if (time_count - prev_time_count > 20000) { //sample every 20 ms
 800590c:	4b31      	ldr	r3, [pc, #196]	; (80059d4 <Measure_Speed+0x114>)
 800590e:	f8d8 1000 	ldr.w	r1, [r8]
 8005912:	f8d3 a000 	ldr.w	sl, [r3]
 8005916:	f644 6320 	movw	r3, #20000	; 0x4e20
 800591a:	ebc1 010a 	rsb	r1, r1, sl
 800591e:	4299      	cmp	r1, r3
 8005920:	d9ef      	bls.n	8005902 <Measure_Speed+0x42>

			left_speed = 180*1000000/700*(l_count - temp_l)/(time_count - prev_time_count); // in mm/s
 8005922:	4b2d      	ldr	r3, [pc, #180]	; (80059d8 <Measure_Speed+0x118>)
 8005924:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 80059f4 <Measure_Speed+0x134>
 8005928:	f8d3 9000 	ldr.w	r9, [r3]
			right_speed = 180*1000000/700*(r_count - temp_r)/(time_count - prev_time_count); // in mm/s
 800592c:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 80059f8 <Measure_Speed+0x138>
 8005930:	4b2a      	ldr	r3, [pc, #168]	; (80059dc <Measure_Speed+0x11c>)
				//Transmit(tx_buffer);
				//sprintf(tx_buffer, "L Count %d    R Count: %d \r\n-------------------------- \r\n \r\n", l_count, r_count);
				//Transmit(tx_buffer);
				//debug_count = 0;
			//}
			current_speeds[debug_count] = (left_speed + right_speed)/2;
 8005932:	f8dc 2000 	ldr.w	r2, [ip]
		//}

		if (time_count - prev_time_count > 20000) { //sample every 20 ms

			left_speed = 180*1000000/700*(l_count - temp_l)/(time_count - prev_time_count); // in mm/s
			right_speed = 180*1000000/700*(r_count - temp_r)/(time_count - prev_time_count); // in mm/s
 8005936:	f8d3 e000 	ldr.w	lr, [r3]
				//Transmit(tx_buffer);
				//sprintf(tx_buffer, "L Count %d    R Count: %d \r\n-------------------------- \r\n \r\n", l_count, r_count);
				//Transmit(tx_buffer);
				//debug_count = 0;
			//}
			current_speeds[debug_count] = (left_speed + right_speed)/2;
 800593a:	f8db 0000 	ldr.w	r0, [fp]
 800593e:	ebc2 0209 	rsb	r2, r2, r9
 8005942:	4b27      	ldr	r3, [pc, #156]	; (80059e0 <Measure_Speed+0x120>)
 8005944:	ebc0 000e 	rsb	r0, r0, lr
			debug_count++; //increase debug count
			prev_time_count = time_count;
			temp_l = l_count;
 8005948:	f8cc 9000 	str.w	r9, [ip]
				//Transmit(tx_buffer);
				//sprintf(tx_buffer, "L Count %d    R Count: %d \r\n-------------------------- \r\n \r\n", l_count, r_count);
				//Transmit(tx_buffer);
				//debug_count = 0;
			//}
			current_speeds[debug_count] = (left_speed + right_speed)/2;
 800594c:	435a      	muls	r2, r3
 800594e:	4358      	muls	r0, r3
			debug_count++; //increase debug count
			prev_time_count = time_count;
 8005950:	4b24      	ldr	r3, [pc, #144]	; (80059e4 <Measure_Speed+0x124>)
			temp_l = l_count;
			temp_r = r_count;
 8005952:	f8cb e000 	str.w	lr, [fp]
				//Transmit(tx_buffer);
				//debug_count = 0;
			//}
			current_speeds[debug_count] = (left_speed + right_speed)/2;
			debug_count++; //increase debug count
			prev_time_count = time_count;
 8005956:	f8c3 a000 	str.w	sl, [r3]
				//Transmit(tx_buffer);
				//sprintf(tx_buffer, "L Count %d    R Count: %d \r\n-------------------------- \r\n \r\n", l_count, r_count);
				//Transmit(tx_buffer);
				//debug_count = 0;
			//}
			current_speeds[debug_count] = (left_speed + right_speed)/2;
 800595a:	fbb2 f2f1 	udiv	r2, r2, r1
 800595e:	fbb0 f1f1 	udiv	r1, r0, r1
 8005962:	440a      	add	r2, r1
 8005964:	0852      	lsrs	r2, r2, #1
 8005966:	f84d 2025 	str.w	r2, [sp, r5, lsl #2]
			debug_count++; //increase debug count
 800596a:	3501      	adds	r5, #1
 800596c:	e7c9      	b.n	8005902 <Measure_Speed+0x42>
 800596e:	f857 3f04 	ldr.w	r3, [r7, #4]!
	Set_Left(100 + 10*i, FORWARD); //start motors
	Set_Right(100 + 10*i, FORWARD);
	HAL_Delay(5); //let accelerate
	debug_count = 0; //reset debug count

	while (debug_count < SAMPLES) { //sample five times
 8005972:	2200      	movs	r2, #0
			prev_left_speed = left_speed;
			prev_right_speed = right_speed;
		} //endif
	} //end while
	for (int j = 0; j < 10; j++) {
		top_speeds[i - 1] = top_speeds[i - 1] + current_speeds[j];
 8005974:	f85d 1022 	ldr.w	r1, [sp, r2, lsl #2]
			temp_r = r_count;
			prev_left_speed = left_speed;
			prev_right_speed = right_speed;
		} //endif
	} //end while
	for (int j = 0; j < 10; j++) {
 8005978:	3201      	adds	r2, #1
 800597a:	2a0a      	cmp	r2, #10
		top_speeds[i - 1] = top_speeds[i - 1] + current_speeds[j];
 800597c:	440b      	add	r3, r1
			temp_r = r_count;
			prev_left_speed = left_speed;
			prev_right_speed = right_speed;
		} //endif
	} //end while
	for (int j = 0; j < 10; j++) {
 800597e:	d1f9      	bne.n	8005974 <Measure_Speed+0xb4>
		top_speeds[i - 1] = top_speeds[i - 1] + current_speeds[j];
	}
	top_speeds[i - 1] = top_speeds[i - 1]/SAMPLES; //get average of five values and store into top_speed array
 8005980:	fb93 f3f2 	sdiv	r3, r3, r2
 8005984:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < SAMPLES; i++) {
 8005986:	2300      	movs	r3, #0
		current_speeds[i] = 0;
 8005988:	461a      	mov	r2, r3
 800598a:	f84d 2023 	str.w	r2, [sp, r3, lsl #2]
	} //end while
	for (int j = 0; j < 10; j++) {
		top_speeds[i - 1] = top_speeds[i - 1] + current_speeds[j];
	}
	top_speeds[i - 1] = top_speeds[i - 1]/SAMPLES; //get average of five values and store into top_speed array
	for (int i = 0; i < SAMPLES; i++) {
 800598e:	3301      	adds	r3, #1
 8005990:	2b0a      	cmp	r3, #10
 8005992:	d1fa      	bne.n	800598a <Measure_Speed+0xca>
 8005994:	340a      	adds	r4, #10
	Reset_Counters();
	HAL_TIM_Base_Start(&htim5); //start timer
	Set_Left(FWD_L, FORWARD);
	Set_Right(FWD_R, FORWARD);

for (int i = 1; i <= 50; i++) { //start speed loop
 8005996:	f240 2362 	movw	r3, #610	; 0x262
 800599a:	429c      	cmp	r4, r3
 800599c:	d1a3      	bne.n	80058e6 <Measure_Speed+0x26>
		current_speeds[i] = 0;
	}
}
	Stop(); //stop spinning

	Transmit("PWM VALUE |||||  APPROXIMATE SPEED \r\n "); //output results, can be formatted into csv
 800599e:	256e      	movs	r5, #110	; 0x6e
	top_speeds[i - 1] = top_speeds[i - 1]/SAMPLES; //get average of five values and store into top_speed array
	for (int i = 0; i < SAMPLES; i++) {
		current_speeds[i] = 0;
	}
}
	Stop(); //stop spinning
 80059a0:	f7ff fc30 	bl	8005204 <Stop>

	Transmit("PWM VALUE |||||  APPROXIMATE SPEED \r\n "); //output results, can be formatted into csv
 80059a4:	4810      	ldr	r0, [pc, #64]	; (80059e8 <Measure_Speed+0x128>)
 80059a6:	f7fd fb73 	bl	8003090 <Transmit>
	for (int i = 0; i < 50; i++) {
		sprintf(tx_buffer, "%d  ---  %d mm/s \r\n", 100 + 10*(i+1), top_speeds[i]);
 80059aa:	462a      	mov	r2, r5
 80059ac:	f856 3f04 	ldr.w	r3, [r6, #4]!
 80059b0:	490e      	ldr	r1, [pc, #56]	; (80059ec <Measure_Speed+0x12c>)
 80059b2:	350a      	adds	r5, #10
 80059b4:	480e      	ldr	r0, [pc, #56]	; (80059f0 <Measure_Speed+0x130>)
 80059b6:	f000 fddb 	bl	8006570 <siprintf>
		Transmit(tx_buffer);
 80059ba:	480d      	ldr	r0, [pc, #52]	; (80059f0 <Measure_Speed+0x130>)
 80059bc:	f7fd fb68 	bl	8003090 <Transmit>
	}
}
	Stop(); //stop spinning

	Transmit("PWM VALUE |||||  APPROXIMATE SPEED \r\n "); //output results, can be formatted into csv
	for (int i = 0; i < 50; i++) {
 80059c0:	42a5      	cmp	r5, r4
 80059c2:	d1f2      	bne.n	80059aa <Measure_Speed+0xea>
		sprintf(tx_buffer, "%d  ---  %d mm/s \r\n", 100 + 10*(i+1), top_speeds[i]);
		Transmit(tx_buffer);
	}
	HAL_TIM_Base_Stop(&htim5); //stop timer
 80059c4:	4802      	ldr	r0, [pc, #8]	; (80059d0 <Measure_Speed+0x110>)
}
 80059c6:	b03d      	add	sp, #244	; 0xf4
 80059c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	Transmit("PWM VALUE |||||  APPROXIMATE SPEED \r\n "); //output results, can be formatted into csv
	for (int i = 0; i < 50; i++) {
		sprintf(tx_buffer, "%d  ---  %d mm/s \r\n", 100 + 10*(i+1), top_speeds[i]);
		Transmit(tx_buffer);
	}
	HAL_TIM_Base_Stop(&htim5); //stop timer
 80059cc:	f7fc bb4b 	b.w	8002066 <HAL_TIM_Base_Stop>
 80059d0:	2000256c 	.word	0x2000256c
 80059d4:	20002518 	.word	0x20002518
 80059d8:	20001b10 	.word	0x20001b10
 80059dc:	20000acc 	.word	0x20000acc
 80059e0:	0003ec76 	.word	0x0003ec76
 80059e4:	2000255c 	.word	0x2000255c
 80059e8:	080073e1 	.word	0x080073e1
 80059ec:	08007408 	.word	0x08007408
 80059f0:	20002b84 	.word	0x20002b84
 80059f4:	20001b78 	.word	0x20001b78
 80059f8:	20001bd4 	.word	0x20001bd4

080059fc <Motor_Test>:
Transmit(fast_path);
Transmit("\r\n");
#endif
}

void Motor_Test() {
 80059fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	while (1) { //sample five times

		Update_Sensors(TEST);
		Search_Correction();
		if (l_count > F_ENC2*4 || r_count > F_ENC2*4) {
 8005a00:	4d2c      	ldr	r5, [pc, #176]	; (8005ab4 <Motor_Test+0xb8>)
	int left_acceleration = 0;
	int right_acceleration = 0;
	static uint32_t prev_left_speed = 0;
	static uint32_t prev_right_speed = 0;

	Reset_Counters();
 8005a02:	f7fd fa75 	bl	8002ef0 <Reset_Counters>
	HAL_TIM_Base_Start(&htim5); //start timer
 8005a06:	482c      	ldr	r0, [pc, #176]	; (8005ab8 <Motor_Test+0xbc>)
	Set_Left(FWD_L, FORWARD);
	Set_Right(FWD_R, FORWARD);
 8005a08:	2402      	movs	r4, #2
	int right_acceleration = 0;
	static uint32_t prev_left_speed = 0;
	static uint32_t prev_right_speed = 0;

	Reset_Counters();
	HAL_TIM_Base_Start(&htim5); //start timer
 8005a0a:	f7fc fb1f 	bl	800204c <HAL_TIM_Base_Start>

	while (1) { //sample five times

		Update_Sensors(TEST);
		Search_Correction();
		if (l_count > F_ENC2*4 || r_count > F_ENC2*4) {
 8005a0e:	46a9      	mov	r9, r5
	static uint32_t prev_left_speed = 0;
	static uint32_t prev_right_speed = 0;

	Reset_Counters();
	HAL_TIM_Base_Start(&htim5); //start timer
	Set_Left(FWD_L, FORWARD);
 8005a10:	2101      	movs	r1, #1
 8005a12:	20c8      	movs	r0, #200	; 0xc8
 8005a14:	f7fe fedc 	bl	80047d0 <Set_Left>
	Set_Right(FWD_R, FORWARD);
 8005a18:	2101      	movs	r1, #1
 8005a1a:	20c8      	movs	r0, #200	; 0xc8
 8005a1c:	f7fe ff00 	bl	8004820 <Set_Right>

	while (1) { //sample five times

		Update_Sensors(TEST);
		Search_Correction();
		if (l_count > F_ENC2*4 || r_count > F_ENC2*4) {
 8005a20:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8005ad4 <Motor_Test+0xd8>
			break;
		}

		if (time_count - prev_time_count > 20000) { //sample every 20 ms
 8005a24:	4e25      	ldr	r6, [pc, #148]	; (8005abc <Motor_Test+0xc0>)

for (int i = 0; i < 2; i++) {

	while (1) { //sample five times

		Update_Sensors(TEST);
 8005a26:	2006      	movs	r0, #6
 8005a28:	f7fe fd20 	bl	800446c <Update_Sensors>
		Search_Correction();
 8005a2c:	f7ff f992 	bl	8004d54 <Search_Correction>
		if (l_count > F_ENC2*4 || r_count > F_ENC2*4) {
 8005a30:	f8d5 e000 	ldr.w	lr, [r5]
 8005a34:	f5be 6f2e 	cmp.w	lr, #2784	; 0xae0
 8005a38:	d82e      	bhi.n	8005a98 <Motor_Test+0x9c>
 8005a3a:	f8d8 3000 	ldr.w	r3, [r8]
 8005a3e:	f5b3 6f2e 	cmp.w	r3, #2784	; 0xae0
 8005a42:	d829      	bhi.n	8005a98 <Motor_Test+0x9c>
			break;
		}

		if (time_count - prev_time_count > 20000) { //sample every 20 ms
 8005a44:	4f1e      	ldr	r7, [pc, #120]	; (8005ac0 <Motor_Test+0xc4>)
 8005a46:	6831      	ldr	r1, [r6, #0]
 8005a48:	683a      	ldr	r2, [r7, #0]
 8005a4a:	1a89      	subs	r1, r1, r2
 8005a4c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8005a50:	4291      	cmp	r1, r2
 8005a52:	d9e8      	bls.n	8005a26 <Motor_Test+0x2a>

			left_speed = 180*1000000/700*(l_count - temp_l)/(time_count - prev_time_count); // in mm/s
			right_speed = 180*1000000/700*(r_count - temp_r)/(time_count - prev_time_count); // in mm/s
 8005a54:	4e1b      	ldr	r6, [pc, #108]	; (8005ac4 <Motor_Test+0xc8>)
			break;
		}

		if (time_count - prev_time_count > 20000) { //sample every 20 ms

			left_speed = 180*1000000/700*(l_count - temp_l)/(time_count - prev_time_count); // in mm/s
 8005a56:	f8df a080 	ldr.w	sl, [pc, #128]	; 8005ad8 <Motor_Test+0xdc>
			left_acceleration =  1000000*((int) left_speed - prev_left_speed)/(time_count - prev_time_count);
			right_acceleration = 1000000*((int) right_speed - prev_right_speed)/(time_count - prev_time_count);

				//sprintf(tx_buffer, "Left Acceleration: %d mm/s/s  Right Acceleration: %d mm/s/s \r\n", left_acceleration, right_acceleration);
				//Transmit(tx_buffer);
				sprintf(tx_buffer, "Left Speed %u mm/s   Right Speed %u mm/s \r\n------------------- \r\n", left_speed, right_speed);
 8005a5a:	6832      	ldr	r2, [r6, #0]
 8005a5c:	481a      	ldr	r0, [pc, #104]	; (8005ac8 <Motor_Test+0xcc>)
 8005a5e:	1a9b      	subs	r3, r3, r2
 8005a60:	f8da 2000 	ldr.w	r2, [sl]
 8005a64:	ebc2 020e 	rsb	r2, r2, lr
 8005a68:	4343      	muls	r3, r0
 8005a6a:	4342      	muls	r2, r0
 8005a6c:	4817      	ldr	r0, [pc, #92]	; (8005acc <Motor_Test+0xd0>)
 8005a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a72:	fbb2 f2f1 	udiv	r2, r2, r1
 8005a76:	4916      	ldr	r1, [pc, #88]	; (8005ad0 <Motor_Test+0xd4>)
 8005a78:	f000 fd7a 	bl	8006570 <siprintf>
				Transmit(tx_buffer);
 8005a7c:	4813      	ldr	r0, [pc, #76]	; (8005acc <Motor_Test+0xd0>)
 8005a7e:	f7fd fb07 	bl	8003090 <Transmit>
				//Transmit(tx_buffer);
				//sprintf(tx_buffer, "L Count %d    R Count: %d \r\n-------------------------- \r\n \r\n", l_count, r_count);
				//Transmit(tx_buffer);
				//debug_count = 0;
			//}
			prev_time_count = time_count;
 8005a82:	4b0e      	ldr	r3, [pc, #56]	; (8005abc <Motor_Test+0xc0>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	603b      	str	r3, [r7, #0]
			temp_l = l_count;
 8005a88:	f8d9 3000 	ldr.w	r3, [r9]
 8005a8c:	f8ca 3000 	str.w	r3, [sl]
			temp_r = r_count;
 8005a90:	4b10      	ldr	r3, [pc, #64]	; (8005ad4 <Motor_Test+0xd8>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6033      	str	r3, [r6, #0]
 8005a96:	e7c5      	b.n	8005a24 <Motor_Test+0x28>
			prev_left_speed = left_speed;
			prev_right_speed = right_speed;
		} //endif
	} //end while
Dead_End_Correct();
 8005a98:	f7ff fa7c 	bl	8004f94 <Dead_End_Correct>
Reset_Counters();
 8005a9c:	f7fd fa28 	bl	8002ef0 <Reset_Counters>
	Reset_Counters();
	HAL_TIM_Base_Start(&htim5); //start timer
	Set_Left(FWD_L, FORWARD);
	Set_Right(FWD_R, FORWARD);

for (int i = 0; i < 2; i++) {
 8005aa0:	3c01      	subs	r4, #1
 8005aa2:	d1bd      	bne.n	8005a20 <Motor_Test+0x24>
		} //endif
	} //end while
Dead_End_Correct();
Reset_Counters();
}
	Stop(); //stop spinning
 8005aa4:	f7ff fbae 	bl	8005204 <Stop>
	HAL_TIM_Base_Stop(&htim5); //stop timer
 8005aa8:	4803      	ldr	r0, [pc, #12]	; (8005ab8 <Motor_Test+0xbc>)

}
 8005aaa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	} //end while
Dead_End_Correct();
Reset_Counters();
}
	Stop(); //stop spinning
	HAL_TIM_Base_Stop(&htim5); //stop timer
 8005aae:	f7fc bada 	b.w	8002066 <HAL_TIM_Base_Stop>
 8005ab2:	bf00      	nop
 8005ab4:	20001b10 	.word	0x20001b10
 8005ab8:	2000256c 	.word	0x2000256c
 8005abc:	20002518 	.word	0x20002518
 8005ac0:	2000255c 	.word	0x2000255c
 8005ac4:	20001bd4 	.word	0x20001bd4
 8005ac8:	0003ec76 	.word	0x0003ec76
 8005acc:	20002b84 	.word	0x20002b84
 8005ad0:	0800741c 	.word	0x0800741c
 8005ad4:	20000acc 	.word	0x20000acc
 8005ad8:	20001b78 	.word	0x20001b78

08005adc <SystemClock_Config_old>:
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8005adc:	4b2d      	ldr	r3, [pc, #180]	; (8005b94 <SystemClock_Config_old+0xb8>)
 8005ade:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ae0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

void SystemClock_Config_old(void)
{
 8005ae4:	b510      	push	{r4, lr}
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8005ae6:	641a      	str	r2, [r3, #64]	; 0x40
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

void SystemClock_Config_old(void)
{
 8005ae8:	b0b4      	sub	sp, #208	; 0xd0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8005aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005aec:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 8;
	RCC_OscInitStruct.PLL.PLLN = 216;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005aee:	a807      	add	r0, sp, #28
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8005af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005af4:	9300      	str	r3, [sp, #0]
 8005af6:	9b00      	ldr	r3, [sp, #0]

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005af8:	4b27      	ldr	r3, [pc, #156]	; (8005b98 <SystemClock_Config_old+0xbc>)
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005b00:	601a      	str	r2, [r3, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005b04:	9407      	str	r4, [sp, #28]

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b06:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = 16;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005b0a:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 8;
	RCC_OscInitStruct.PLL.PLLN = 216;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005b0c:	9411      	str	r4, [sp, #68]	; 0x44

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b0e:	9301      	str	r3, [sp, #4]
 8005b10:	9b01      	ldr	r3, [sp, #4]

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005b12:	2301      	movs	r3, #1
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 8;
	RCC_OscInitStruct.PLL.PLLN = 216;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8005b14:	9412      	str	r4, [sp, #72]	; 0x48
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005b16:	930a      	str	r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8005b18:	2310      	movs	r3, #16
 8005b1a:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8005b20:	2308      	movs	r3, #8
 8005b22:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 216;
 8005b24:	23d8      	movs	r3, #216	; 0xd8
 8005b26:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005b28:	f7fb fb92 	bl	8001250 <HAL_RCC_OscConfig>
 8005b2c:	b108      	cbz	r0, 8005b32 <SystemClock_Config_old+0x56>
	{
		Error_Handler();
 8005b2e:	f7fe fad9 	bl	80040e4 <Error_Handler>
	  }

	/**Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005b32:	f7fb fb55 	bl	80011e0 <HAL_PWREx_EnableOverDrive>
 8005b36:	2800      	cmp	r0, #0
 8005b38:	d1f9      	bne.n	8005b2e <SystemClock_Config_old+0x52>
		Error_Handler();
	  }

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8005b3a:	230f      	movs	r3, #15
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005b3c:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8005b3e:	2107      	movs	r1, #7
 8005b40:	a802      	add	r0, sp, #8
		Error_Handler();
	  }

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8005b42:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005b44:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
	  }

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005b48:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005b4a:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b50:	9306      	str	r3, [sp, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8005b52:	f7fb fd57 	bl	8001604 <HAL_RCC_ClockConfig>
 8005b56:	2800      	cmp	r0, #0
 8005b58:	d1e9      	bne.n	8005b2e <SystemClock_Config_old+0x52>
	{
		Error_Handler();
	}

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005b5a:	2340      	movs	r3, #64	; 0x40
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005b5c:	9024      	str	r0, [sp, #144]	; 0x90
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005b5e:	a813      	add	r0, sp, #76	; 0x4c
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
	{
		Error_Handler();
	}

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005b60:	9313      	str	r3, [sp, #76]	; 0x4c
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005b62:	f7fb fe2f 	bl	80017c4 <HAL_RCCEx_PeriphCLKConfig>
 8005b66:	4604      	mov	r4, r0
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	d1e0      	bne.n	8005b2e <SystemClock_Config_old+0x52>
		Error_Handler();
	}

	    /**Configure the Systick interrupt time
	    */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8005b6c:	f7fb fdf4 	bl	8001758 <HAL_RCC_GetHCLKFreq>
 8005b70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b74:	fbb0 f0f3 	udiv	r0, r0, r3
 8005b78:	f7fa fe98 	bl	80008ac <HAL_SYSTICK_Config>

	    /**Configure the Systick
	    */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8005b7c:	2004      	movs	r0, #4
 8005b7e:	f7fa feab 	bl	80008d8 <HAL_SYSTICK_CLKSourceConfig>

	  /* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005b82:	4622      	mov	r2, r4
 8005b84:	4621      	mov	r1, r4
 8005b86:	f04f 30ff 	mov.w	r0, #4294967295
 8005b8a:	f7fa fe4b 	bl	8000824 <HAL_NVIC_SetPriority>
}
 8005b8e:	b034      	add	sp, #208	; 0xd0
 8005b90:	bd10      	pop	{r4, pc}
 8005b92:	bf00      	nop
 8005b94:	40023800 	.word	0x40023800
 8005b98:	40007000 	.word	0x40007000

08005b9c <main>:

enum {ADC_VAL_BUFFER_LENGTH = 16}; //DMA Buffer size
uint32_t ADC_valbuffer[ADC_VAL_BUFFER_LENGTH];

int main(void)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b0ac      	sub	sp, #176	; 0xb0


  /*Configure GPIO pins : RDIC_Pin LDIC_Pin GYRO_CS_Pin */
  GPIO_InitStruct.Pin = RDIC_Pin|LDIC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ba0:	2400      	movs	r4, #0
{
   //STARTUP

  /* MCU Configuration----------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005ba2:	f7fa fbcb 	bl	800033c <HAL_Init>
#endif


  /*Configure GPIO pins : RDIC_Pin LDIC_Pin GYRO_CS_Pin */
  GPIO_InitStruct.Pin = RDIC_Pin|LDIC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ba6:	2601      	movs	r6, #1

  /* MCU Configuration----------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
  /* Configure the system clock */
  SystemClock_Config();
 8005ba8:	f7ff ff98 	bl	8005adc <SystemClock_Config_old>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bac:	4b6e      	ldr	r3, [pc, #440]	; (8005d68 <main+0x1cc>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LDIC_Pin, GPIO_PIN_RESET);
 8005bae:	2102      	movs	r1, #2
 8005bb0:	486e      	ldr	r0, [pc, #440]	; (8005d6c <main+0x1d0>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
#if MOUSE_REV == 69

  GPIO_InitStruct.Pin = LF_EMIT_PIN | L_EMIT_PIN | R_EMIT_PIN | RF_EMIT_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005bb4:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = LED2_Pin |LED1_Pin;
 8005bb8:	f04f 0803 	mov.w	r8, #3

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 8005bbc:	4d6c      	ldr	r5, [pc, #432]	; (8005d70 <main+0x1d4>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bbe:	f042 0201 	orr.w	r2, r2, #1
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005bc2:	f44f 3780 	mov.w	r7, #65536	; 0x10000
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bc6:	631a      	str	r2, [r3, #48]	; 0x30
 8005bc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bca:	f002 0201 	and.w	r2, r2, #1
 8005bce:	9200      	str	r2, [sp, #0]
 8005bd0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005bd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bd4:	f042 0204 	orr.w	r2, r2, #4
 8005bd8:	631a      	str	r2, [r3, #48]	; 0x30
 8005bda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bdc:	f002 0204 	and.w	r2, r2, #4
 8005be0:	9201      	str	r2, [sp, #4]
 8005be2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005be4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005be6:	f042 0202 	orr.w	r2, r2, #2
 8005bea:	631a      	str	r2, [r3, #48]	; 0x30
 8005bec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bee:	f002 0202 	and.w	r2, r2, #2
 8005bf2:	9202      	str	r2, [sp, #8]
 8005bf4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005bf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bf8:	f042 0210 	orr.w	r2, r2, #16
 8005bfc:	631a      	str	r2, [r3, #48]	; 0x30
 8005bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c00:	f002 0210 	and.w	r2, r2, #16
 8005c04:	9203      	str	r2, [sp, #12]
 8005c06:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005c08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c0a:	f042 0208 	orr.w	r2, r2, #8
 8005c0e:	631a      	str	r2, [r3, #48]	; 0x30

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LDIC_Pin, GPIO_PIN_RESET);
 8005c10:	2200      	movs	r2, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c14:	f003 0308 	and.w	r3, r3, #8
 8005c18:	9304      	str	r3, [sp, #16]
 8005c1a:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LDIC_Pin, GPIO_PIN_RESET);
 8005c1c:	f7fb fad0 	bl	80011c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, RDIC_Pin, GPIO_PIN_RESET);
 8005c20:	2200      	movs	r2, #0
 8005c22:	2108      	movs	r1, #8
 8005c24:	4851      	ldr	r0, [pc, #324]	; (8005d6c <main+0x1d0>)
 8005c26:	f7fb facb 	bl	80011c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	2102      	movs	r1, #2
 8005c2e:	4851      	ldr	r0, [pc, #324]	; (8005d74 <main+0x1d8>)
 8005c30:	f7fb fac6 	bl	80011c0 <HAL_GPIO_WritePin>

#if MOUSE_REV == 69
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8005c34:	2201      	movs	r2, #1
 8005c36:	2102      	movs	r1, #2
 8005c38:	484e      	ldr	r0, [pc, #312]	; (8005d74 <main+0x1d8>)
 8005c3a:	f7fb fac1 	bl	80011c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8005c3e:	2200      	movs	r2, #0
 8005c40:	2101      	movs	r1, #1
 8005c42:	484c      	ldr	r0, [pc, #304]	; (8005d74 <main+0x1d8>)
 8005c44:	f7fb fabc 	bl	80011c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c4e:	484a      	ldr	r0, [pc, #296]	; (8005d78 <main+0x1dc>)
 8005c50:	f7fb fab6 	bl	80011c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8005c54:	2200      	movs	r2, #0
 8005c56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c5a:	4847      	ldr	r0, [pc, #284]	; (8005d78 <main+0x1dc>)
 8005c5c:	f7fb fab0 	bl	80011c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8005c60:	2200      	movs	r2, #0
 8005c62:	2101      	movs	r1, #1
 8005c64:	4845      	ldr	r0, [pc, #276]	; (8005d7c <main+0x1e0>)
 8005c66:	f7fb faab 	bl	80011c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005c70:	4843      	ldr	r0, [pc, #268]	; (8005d80 <main+0x1e4>)
 8005c72:	f7fb faa5 	bl	80011c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8005c76:	2200      	movs	r2, #0
 8005c78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005c7c:	4840      	ldr	r0, [pc, #256]	; (8005d80 <main+0x1e4>)
 8005c7e:	f7fb fa9f 	bl	80011c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 8005c82:	2200      	movs	r2, #0
 8005c84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005c88:	483d      	ldr	r0, [pc, #244]	; (8005d80 <main+0x1e4>)
 8005c8a:	f7fb fa99 	bl	80011c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED9_GPIO_Port, LED9_Pin, GPIO_PIN_RESET);
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c94:	4838      	ldr	r0, [pc, #224]	; (8005d78 <main+0x1dc>)
 8005c96:	f7fb fa93 	bl	80011c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LED5_Pin|LED4_Pin|LED3_Pin|LED2_Pin , GPIO_PIN_RESET);
#endif


  /*Configure GPIO pins : RDIC_Pin LDIC_Pin GYRO_CS_Pin */
  GPIO_InitStruct.Pin = RDIC_Pin|LDIC_Pin;
 8005c9a:	230a      	movs	r3, #10
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c9c:	a923      	add	r1, sp, #140	; 0x8c
 8005c9e:	4833      	ldr	r0, [pc, #204]	; (8005d6c <main+0x1d0>)
  HAL_GPIO_WritePin(GPIOD, LED5_Pin|LED4_Pin|LED3_Pin|LED2_Pin , GPIO_PIN_RESET);
#endif


  /*Configure GPIO pins : RDIC_Pin LDIC_Pin GYRO_CS_Pin */
  GPIO_InitStruct.Pin = RDIC_Pin|LDIC_Pin;
 8005ca0:	9323      	str	r3, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ca2:	9624      	str	r6, [sp, #144]	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ca4:	9425      	str	r4, [sp, #148]	; 0x94
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ca6:	9426      	str	r4, [sp, #152]	; 0x98
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ca8:	f7fb f99e 	bl	8000fe8 <HAL_GPIO_Init>
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);

#endif

#if MOUSE_REV == 69
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005cac:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005cae:	a923      	add	r1, sp, #140	; 0x8c
 8005cb0:	4830      	ldr	r0, [pc, #192]	; (8005d74 <main+0x1d8>)
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);

#endif

#if MOUSE_REV == 69
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005cb2:	9323      	str	r3, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005cb4:	4b33      	ldr	r3, [pc, #204]	; (8005d84 <main+0x1e8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cb6:	9425      	str	r4, [sp, #148]	; 0x94

#endif

#if MOUSE_REV == 69
  GPIO_InitStruct.Pin = GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005cb8:	9324      	str	r3, [sp, #144]	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005cba:	f7fb f995 	bl	8000fe8 <HAL_GPIO_Init>
#endif

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8005cbe:	4622      	mov	r2, r4
 8005cc0:	2102      	movs	r1, #2
 8005cc2:	2028      	movs	r0, #40	; 0x28
 8005cc4:	f7fa fdae 	bl	8000824 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005cc8:	2028      	movs	r0, #40	; 0x28
 8005cca:	f7fa fde3 	bl	8000894 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8005cce:	4622      	mov	r2, r4
 8005cd0:	4631      	mov	r1, r6
 8005cd2:	2017      	movs	r0, #23
 8005cd4:	f7fa fda6 	bl	8000824 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005cd8:	2017      	movs	r0, #23
 8005cda:	f7fa fddb 	bl	8000894 <HAL_NVIC_EnableIRQ>

  //Configure GPIO pins : PC8 PC9
#if MOUSE_REV == 69

  GPIO_InitStruct.Pin = LF_EMIT_PIN | L_EMIT_PIN | R_EMIT_PIN | RF_EMIT_PIN;
 8005cde:	231e      	movs	r3, #30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005ce0:	a923      	add	r1, sp, #140	; 0x8c
 8005ce2:	4826      	ldr	r0, [pc, #152]	; (8005d7c <main+0x1e0>)
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

  //Configure GPIO pins : PC8 PC9
#if MOUSE_REV == 69

  GPIO_InitStruct.Pin = LF_EMIT_PIN | L_EMIT_PIN | R_EMIT_PIN | RF_EMIT_PIN;
 8005ce4:	9323      	str	r3, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ce6:	9624      	str	r6, [sp, #144]	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ce8:	9425      	str	r4, [sp, #148]	; 0x94
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005cea:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005cee:	f7fb f97b 	bl	8000fe8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|LED9_Pin;
 8005cf2:	f44f 530c 	mov.w	r3, #8960	; 0x2300
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cf6:	a923      	add	r1, sp, #140	; 0x8c
 8005cf8:	481f      	ldr	r0, [pc, #124]	; (8005d78 <main+0x1dc>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|LED9_Pin;
 8005cfa:	9323      	str	r3, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005cfc:	9624      	str	r6, [sp, #144]	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cfe:	9425      	str	r4, [sp, #148]	; 0x94
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d00:	9426      	str	r4, [sp, #152]	; 0x98
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d02:	f7fb f971 	bl	8000fe8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LED6_Pin|LED7_Pin|LED8_Pin;
 8005d06:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d0a:	a923      	add	r1, sp, #140	; 0x8c
 8005d0c:	481c      	ldr	r0, [pc, #112]	; (8005d80 <main+0x1e4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = LED6_Pin|LED7_Pin|LED8_Pin;
 8005d0e:	9323      	str	r3, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d10:	9624      	str	r6, [sp, #144]	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d12:	9425      	str	r4, [sp, #148]	; 0x94
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d14:	9426      	str	r4, [sp, #152]	; 0x98
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d16:	f7fb f967 	bl	8000fe8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005d1a:	a923      	add	r1, sp, #140	; 0x8c
 8005d1c:	4817      	ldr	r0, [pc, #92]	; (8005d7c <main+0x1e0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = LED5_Pin;
 8005d1e:	9623      	str	r6, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d20:	9624      	str	r6, [sp, #144]	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d22:	9425      	str	r4, [sp, #148]	; 0x94
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d24:	9426      	str	r4, [sp, #152]	; 0x98
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005d26:	f7fb f95f 	bl	8000fe8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LED2_Pin |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005d2a:	4812      	ldr	r0, [pc, #72]	; (8005d74 <main+0x1d8>)
 8005d2c:	a923      	add	r1, sp, #140	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = LED2_Pin |LED1_Pin;
 8005d2e:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d32:	9624      	str	r6, [sp, #144]	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d34:	9425      	str	r4, [sp, #148]	; 0x94
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d36:	9426      	str	r4, [sp, #152]	; 0x98
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005d38:	f7fb f956 	bl	8000fe8 <HAL_GPIO_Init>
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005d3c:	4b12      	ldr	r3, [pc, #72]	; (8005d88 <main+0x1ec>)
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.EOCSelection = DISABLE;

  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005d3e:	4628      	mov	r0, r5

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005d40:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8005d42:	612e      	str	r6, [r5, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005d44:	61ae      	str	r6, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005d46:	622c      	str	r4, [r5, #32]
  hadc1.Init.NbrOfDiscConversion = 0;
 8005d48:	626c      	str	r4, [r5, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005d4a:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 8005d4c:	62ac      	str	r4, [r5, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005d4e:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 4;
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8005d50:	632e      	str	r6, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = DISABLE;
 8005d52:	616c      	str	r4, [r5, #20]
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005d54:	e885 0088 	stmia.w	r5, {r3, r7}
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.NbrOfDiscConversion = 0;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
 8005d58:	2704      	movs	r7, #4
 8005d5a:	61ef      	str	r7, [r5, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.EOCSelection = DISABLE;

  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005d5c:	f7fa fb16 	bl	800038c <HAL_ADC_Init>
 8005d60:	b1a0      	cbz	r0, 8005d8c <main+0x1f0>
  {
    Error_Handler();
 8005d62:	f7fe f9bf 	bl	80040e4 <Error_Handler>
 8005d66:	bf00      	nop
 8005d68:	40023800 	.word	0x40023800
 8005d6c:	40020000 	.word	0x40020000
 8005d70:	20002c4c 	.word	0x20002c4c
 8005d74:	40021000 	.word	0x40021000
 8005d78:	40020400 	.word	0x40020400
 8005d7c:	40020c00 	.word	0x40020c00
 8005d80:	40020800 	.word	0x40020800
 8005d84:	10110000 	.word	0x10110000
 8005d88:	40012000 	.word	0x40012000
  }


  sConfig.Channel = ADC_CHANNEL_14; //l receiver
 8005d8c:	230e      	movs	r3, #14
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
  sConfig.Offset = 0;
 8005d8e:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005d90:	a90f      	add	r1, sp, #60	; 0x3c
 8005d92:	4628      	mov	r0, r5
  {
    Error_Handler();
  }


  sConfig.Channel = ADC_CHANNEL_14; //l receiver
 8005d94:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfig.Rank = 1;
 8005d96:	9610      	str	r6, [sp, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8005d98:	9711      	str	r7, [sp, #68]	; 0x44
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005d9a:	f7fa fc91 	bl	80006c0 <HAL_ADC_ConfigChannel>
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	d1df      	bne.n	8005d62 <main+0x1c6>
  {

    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_15; //lf receiver
 8005da2:	230f      	movs	r3, #15
  sConfig.Rank = 2;
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
  sConfig.Offset = 0;
 8005da4:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005da6:	a90f      	add	r1, sp, #60	; 0x3c
 8005da8:	4628      	mov	r0, r5
  {

    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_15; //lf receiver
 8005daa:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfig.Rank = 2;
 8005dac:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8005db0:	9711      	str	r7, [sp, #68]	; 0x44
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005db2:	f7fa fc85 	bl	80006c0 <HAL_ADC_ConfigChannel>
 8005db6:	2800      	cmp	r0, #0
 8005db8:	d1d3      	bne.n	8005d62 <main+0x1c6>
  {

    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_8; //rf receiver
 8005dba:	f04f 0908 	mov.w	r9, #8
  sConfig.Rank = 3;
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
  sConfig.Offset = 0;
 8005dbe:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005dc0:	a90f      	add	r1, sp, #60	; 0x3c
 8005dc2:	4628      	mov	r0, r5
  {

    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_8; //rf receiver
 8005dc4:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  sConfig.Rank = 3;
 8005dc8:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8005dcc:	9711      	str	r7, [sp, #68]	; 0x44
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005dce:	f7fa fc77 	bl	80006c0 <HAL_ADC_ConfigChannel>
 8005dd2:	2800      	cmp	r0, #0
 8005dd4:	d1c5      	bne.n	8005d62 <main+0x1c6>
  {

    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_9; //r receiver
 8005dd6:	2309      	movs	r3, #9
  sConfig.Rank = 4;
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
  sConfig.Offset = 0;
 8005dd8:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005dda:	a90f      	add	r1, sp, #60	; 0x3c
 8005ddc:	4628      	mov	r0, r5
  {

    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_9; //r receiver
 8005dde:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfig.Rank = 4;
 8005de0:	9710      	str	r7, [sp, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8005de2:	9711      	str	r7, [sp, #68]	; 0x44
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005de4:	f7fa fc6c 	bl	80006c0 <HAL_ADC_ConfigChannel>
 8005de8:	2800      	cmp	r0, #0
 8005dea:	d1ba      	bne.n	8005d62 <main+0x1c6>
//LEFT ENCODER CHANNELS
static void MX_TIM1_Init(void)
{
  TIM_Encoder_InitTypeDef sConfig;

  htim1.Instance = TIM1;
 8005dec:	4caf      	ldr	r4, [pc, #700]	; (80060ac <main+0x510>)
  sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
  sConfig.IC2Filter = 0;

  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8005dee:	a923      	add	r1, sp, #140	; 0x8c
//LEFT ENCODER CHANNELS
static void MX_TIM1_Init(void)
{
  TIM_Encoder_InitTypeDef sConfig;

  htim1.Instance = TIM1;
 8005df0:	4baf      	ldr	r3, [pc, #700]	; (80060b0 <main+0x514>)
  htim1.Init.Prescaler = 0;
 8005df2:	6060      	str	r0, [r4, #4]
//LEFT ENCODER CHANNELS
static void MX_TIM1_Init(void)
{
  TIM_Encoder_InitTypeDef sConfig;

  htim1.Instance = TIM1;
 8005df4:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 0xffff;
 8005df6:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
  TIM_Encoder_InitTypeDef sConfig;

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005dfa:	60a0      	str	r0, [r4, #8]
  htim1.Init.Period = 0xffff;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005dfc:	6120      	str	r0, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8005dfe:	6160      	str	r0, [r4, #20]

  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
  sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005e00:	9024      	str	r0, [sp, #144]	; 0x90
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
  sConfig.IC1Filter = 0;
 8005e02:	9027      	str	r0, [sp, #156]	; 0x9c

  sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005e04:	9028      	str	r0, [sp, #160]	; 0xa0
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
  sConfig.IC2Filter = 0;
 8005e06:	902b      	str	r0, [sp, #172]	; 0xac

  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8005e08:	4620      	mov	r0, r4
  TIM_Encoder_InitTypeDef sConfig;

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 0xffff;
 8005e0a:	60e3      	str	r3, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;

  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005e0c:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
  sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005e10:	9625      	str	r6, [sp, #148]	; 0x94
  sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8005e12:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
  sConfig.IC1Filter = 0;

  sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005e16:	9629      	str	r6, [sp, #164]	; 0xa4
  sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8005e18:	f8cd 90a8 	str.w	r9, [sp, #168]	; 0xa8
  sConfig.IC2Filter = 0;

  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8005e1c:	f7fc faba 	bl	8002394 <HAL_TIM_Encoder_Init>
 8005e20:	2800      	cmp	r0, #0
 8005e22:	d19e      	bne.n	8005d62 <main+0x1c6>
  {
    Error_Handler();
  }

  if(HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL) != HAL_OK)
 8005e24:	213c      	movs	r1, #60	; 0x3c
 8005e26:	4620      	mov	r0, r4
 8005e28:	f7fc f934 	bl	8002094 <HAL_TIM_Encoder_Start_IT>
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	d198      	bne.n	8005d62 <main+0x1c6>
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  //uhPrescalerValue = (uint32_t)((SystemCoreClock /2) / 18000000) - 1;

  htim2.Instance = TIM2;
 8005e30:	4ca0      	ldr	r4, [pc, #640]	; (80060b4 <main+0x518>)
 8005e32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 3;
 8005e36:	e884 0108 	stmia.w	r4, {r3, r8}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 665;
 8005e3a:	f240 2399 	movw	r3, #665	; 0x299

  //uhPrescalerValue = (uint32_t)((SystemCoreClock /2) / 18000000) - 1;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 3;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e3e:	60a0      	str	r0, [r4, #8]
  htim2.Init.Period = 665;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e40:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005e42:	4620      	mov	r0, r4
  //uhPrescalerValue = (uint32_t)((SystemCoreClock /2) / 18000000) - 1;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 3;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 665;
 8005e44:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005e46:	f7fc fa8b 	bl	8002360 <HAL_TIM_PWM_Init>
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	d189      	bne.n	8005d62 <main+0x1c6>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e4e:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005e50:	a908      	add	r1, sp, #32
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e52:	900a      	str	r0, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005e54:	4620      	mov	r0, r4
 8005e56:	f7fc fd3d 	bl	80028d4 <HAL_TIMEx_MasterConfigSynchronization>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	2800      	cmp	r0, #0
 8005e5e:	d180      	bne.n	8005d62 <main+0x1c6>
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005e60:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8005e62:	9014      	str	r0, [sp, #80]	; 0x50
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005e64:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005e66:	a913      	add	r1, sp, #76	; 0x4c
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005e68:	9017      	str	r0, [sp, #92]	; 0x5c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005e6a:	4620      	mov	r0, r4
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005e6c:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005e6e:	f7fc fcab 	bl	80027c8 <HAL_TIM_PWM_ConfigChannel>
 8005e72:	2800      	cmp	r0, #0
 8005e74:	f47f af75 	bne.w	8005d62 <main+0x1c6>
  {
    Error_Handler();
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005e78:	464a      	mov	r2, r9
 8005e7a:	a913      	add	r1, sp, #76	; 0x4c
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	f7fc fca3 	bl	80027c8 <HAL_TIM_PWM_ConfigChannel>
 8005e82:	4605      	mov	r5, r0
 8005e84:	2800      	cmp	r0, #0
 8005e86:	f47f af6c 	bne.w	8005d62 <main+0x1c6>
  {
    Error_Handler();
  }

  HAL_TIM_MspPostInit(&htim2);
 8005e8a:	4620      	mov	r0, r4
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim5.Instance = TIM5;
 8005e8c:	4c8a      	ldr	r4, [pc, #552]	; (80060b8 <main+0x51c>)
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }

  HAL_TIM_MspPostInit(&htim2);
 8005e8e:	f000 fa85 	bl	800639c <HAL_TIM_MspPostInit>

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim5.Instance = TIM5;
  htim5.Init.Prescaler = CLOCK_SPEED; //or 2160000 microsecond counter
 8005e92:	488a      	ldr	r0, [pc, #552]	; (80060bc <main+0x520>)
 8005e94:	23d8      	movs	r3, #216	; 0xd8
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e96:	60a5      	str	r5, [r4, #8]
  htim5.Init.Period = 0xffffffff;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e98:	6125      	str	r5, [r4, #16]

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim5.Instance = TIM5;
  htim5.Init.Prescaler = CLOCK_SPEED; //or 2160000 microsecond counter
 8005e9a:	e884 0009 	stmia.w	r4, {r0, r3}
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 0xffffffff;
 8005e9e:	f04f 33ff 	mov.w	r3, #4294967295
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005ea2:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig;

  htim5.Instance = TIM5;
  htim5.Init.Prescaler = CLOCK_SPEED; //or 2160000 microsecond counter
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 0xffffffff;
 8005ea4:	60e3      	str	r3, [r4, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005ea6:	f7fc fa45 	bl	8002334 <HAL_TIM_Base_Init>
 8005eaa:	2800      	cmp	r0, #0
 8005eac:	f47f af59 	bne.w	8005d62 <main+0x1c6>
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005eb0:	a92c      	add	r1, sp, #176	; 0xb0
 8005eb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005eb6:	4620      	mov	r0, r4
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005eb8:	f841 3d84 	str.w	r3, [r1, #-132]!
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005ebc:	f7fc fb7e 	bl	80025bc <HAL_TIM_ConfigClockSource>
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	f47f af4e 	bne.w	8005d62 <main+0x1c6>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ec6:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005ec8:	a905      	add	r1, sp, #20
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005eca:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005ecc:	4620      	mov	r0, r4
 8005ece:	f7fc fd01 	bl	80028d4 <HAL_TIMEx_MasterConfigSynchronization>
 8005ed2:	2800      	cmp	r0, #0
 8005ed4:	f47f af45 	bne.w	8005d62 <main+0x1c6>
//RIGHT ENCODER CHANNELS
static void MX_TIM4_Init(void)
{
	TIM_Encoder_InitTypeDef sConfig;

	htim4.Instance = TIM4;
 8005ed8:	4c79      	ldr	r4, [pc, #484]	; (80060c0 <main+0x524>)
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim4.Init.RepetitionCounter = 0;

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005eda:	2501      	movs	r5, #1
//RIGHT ENCODER CHANNELS
static void MX_TIM4_Init(void)
{
	TIM_Encoder_InitTypeDef sConfig;

	htim4.Instance = TIM4;
 8005edc:	4b79      	ldr	r3, [pc, #484]	; (80060c4 <main+0x528>)
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
	sConfig.IC2Filter = 0;

	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005ede:	a91a      	add	r1, sp, #104	; 0x68
static void MX_TIM4_Init(void)
{
	TIM_Encoder_InitTypeDef sConfig;

	htim4.Instance = TIM4;
	htim4.Init.Prescaler = 0;
 8005ee0:	6060      	str	r0, [r4, #4]
//RIGHT ENCODER CHANNELS
static void MX_TIM4_Init(void)
{
	TIM_Encoder_InitTypeDef sConfig;

	htim4.Instance = TIM4;
 8005ee2:	6023      	str	r3, [r4, #0]
	htim4.Init.Prescaler = 0;
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim4.Init.Period = 0xffff;
 8005ee4:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
	TIM_Encoder_InitTypeDef sConfig;

	htim4.Instance = TIM4;
	htim4.Init.Prescaler = 0;
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ee8:	60a0      	str	r0, [r4, #8]
	htim4.Init.Period = 0xffff;
 8005eea:	60e3      	str	r3, [r4, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim4.Init.RepetitionCounter = 0;

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005eec:	2303      	movs	r3, #3

	htim4.Instance = TIM4;
	htim4.Init.Prescaler = 0;
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim4.Init.Period = 0xffff;
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005eee:	6120      	str	r0, [r4, #16]
	htim4.Init.RepetitionCounter = 0;
 8005ef0:	6160      	str	r0, [r4, #20]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005ef2:	901b      	str	r0, [sp, #108]	; 0x6c
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
	sConfig.IC1Filter = 0;
 8005ef4:	901e      	str	r0, [sp, #120]	; 0x78

	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005ef6:	901f      	str	r0, [sp, #124]	; 0x7c
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
	sConfig.IC2Filter = 0;
 8005ef8:	9022      	str	r0, [sp, #136]	; 0x88

	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005efa:	4620      	mov	r0, r4
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim4.Init.Period = 0xffff;
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim4.Init.RepetitionCounter = 0;

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005efc:	931a      	str	r3, [sp, #104]	; 0x68
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005efe:	951c      	str	r5, [sp, #112]	; 0x70
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8005f00:	f8cd 9074 	str.w	r9, [sp, #116]	; 0x74
	sConfig.IC1Filter = 0;

	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005f04:	9520      	str	r5, [sp, #128]	; 0x80
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8005f06:	f8cd 9084 	str.w	r9, [sp, #132]	; 0x84
	sConfig.IC2Filter = 0;

	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005f0a:	f7fc fa43 	bl	8002394 <HAL_TIM_Encoder_Init>
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	f47f af27 	bne.w	8005d62 <main+0x1c6>
	{
	  Error_Handler();
	}

	if(HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL) != HAL_OK)
 8005f14:	213c      	movs	r1, #60	; 0x3c
 8005f16:	4620      	mov	r0, r4
 8005f18:	f7fc f8bc 	bl	8002094 <HAL_TIM_Encoder_Start_IT>
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	f47f af20 	bne.w	8005d62 <main+0x1c6>
}

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
  huart1.Instance = USART1;
 8005f22:	4b69      	ldr	r3, [pc, #420]	; (80060c8 <main+0x52c>)
  huart1.Init.BaudRate = 115200;
 8005f24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005f28:	4968      	ldr	r1, [pc, #416]	; (80060cc <main+0x530>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005f2a:	6098      	str	r0, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005f2c:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005f2e:	6118      	str	r0, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f30:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f32:	61d8      	str	r0, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005f34:	6218      	str	r0, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005f36:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005f38:	4618      	mov	r0, r3

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 8005f3a:	e883 0006 	stmia.w	r3, {r1, r2}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005f3e:	220c      	movs	r2, #12
 8005f40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005f42:	f7fc ff38 	bl	8002db6 <HAL_UART_Init>
 8005f46:	4604      	mov	r4, r0
 8005f48:	2800      	cmp	r0, #0
 8005f4a:	f47f af0a 	bne.w	8005d62 <main+0x1c6>

  //buzzer
  //HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);

  //start PWM for motors
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8005f4e:	4649      	mov	r1, r9
 8005f50:	4858      	ldr	r0, [pc, #352]	; (80060b4 <main+0x518>)
 8005f52:	f7fc fbcf 	bl	80026f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8005f56:	4621      	mov	r1, r4
 8005f58:	4856      	ldr	r0, [pc, #344]	; (80060b4 <main+0x518>)
 8005f5a:	f7fc fbcb 	bl	80026f4 <HAL_TIM_PWM_Start>

  Set_Left(0, FORWARD); //set mouse to sit
 8005f5e:	4620      	mov	r0, r4
 8005f60:	4629      	mov	r1, r5
 8005f62:	4e5b      	ldr	r6, [pc, #364]	; (80060d0 <main+0x534>)
 8005f64:	f7fe fc34 	bl	80047d0 <Set_Left>
  Set_Right(0, FORWARD);
 8005f68:	4620      	mov	r0, r4
 8005f6a:	4c5a      	ldr	r4, [pc, #360]	; (80060d4 <main+0x538>)
 8005f6c:	4629      	mov	r1, r5
 8005f6e:	f7fe fc57 	bl	8004820 <Set_Right>

  //MAIN INFINITE PROGRAM LOOP aka ready loop
  while (1)
  {

	  if (stop_flag == FALSE || send_debug == TRUE || dem1 == TRUE || dem2 == TRUE || dem3 == TRUE) { //press top button to activate IR sensors
 8005f72:	4d59      	ldr	r5, [pc, #356]	; (80060d8 <main+0x53c>)
 8005f74:	4f59      	ldr	r7, [pc, #356]	; (80060dc <main+0x540>)
 8005f76:	682b      	ldr	r3, [r5, #0]
 8005f78:	b163      	cbz	r3, 8005f94 <main+0x3f8>
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d009      	beq.n	8005f94 <main+0x3f8>
 8005f80:	6833      	ldr	r3, [r6, #0]
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d006      	beq.n	8005f94 <main+0x3f8>
 8005f86:	6823      	ldr	r3, [r4, #0]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d003      	beq.n	8005f94 <main+0x3f8>
 8005f8c:	4b54      	ldr	r3, [pc, #336]	; (80060e0 <main+0x544>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d107      	bne.n	8005fa4 <main+0x408>
		Update_Sensors(BARE);
 8005f94:	2000      	movs	r0, #0
 8005f96:	f7fe fa69 	bl	800446c <Update_Sensors>
	    if (send_debug == TRUE) {
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d101      	bne.n	8005fa4 <main+0x408>
	  	  Send_Debug();
 8005fa0:	f7fd f8e6 	bl	8003170 <Send_Debug>
	  }

	  /*
	   * LED3
	   */
	  if (stop_flag == FALSE && dif_r > 2000) { //read walls from memory
 8005fa4:	682f      	ldr	r7, [r5, #0]
 8005fa6:	b9cf      	cbnz	r7, 8005fdc <main+0x440>
 8005fa8:	4b4e      	ldr	r3, [pc, #312]	; (80060e4 <main+0x548>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005fb0:	dd14      	ble.n	8005fdc <main+0x440>

		  Read_Walls_Flash();
 8005fb2:	f7fd f87d 	bl	80030b0 <Read_Walls_Flash>
		  Print_Maze();
 8005fb6:	f7fd f9b5 	bl	8003324 <Print_Maze>
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, ON);
 8005fba:	2201      	movs	r2, #1
 8005fbc:	2102      	movs	r1, #2
 8005fbe:	484a      	ldr	r0, [pc, #296]	; (80060e8 <main+0x54c>)
 8005fc0:	f7fb f8fe 	bl	80011c0 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8005fc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005fc8:	f7fa f9d2 	bl	8000370 <HAL_Delay>
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8005fcc:	463a      	mov	r2, r7
 8005fce:	2102      	movs	r1, #2
 8005fd0:	4845      	ldr	r0, [pc, #276]	; (80060e8 <main+0x54c>)
 8005fd2:	f7fb f8f5 	bl	80011c0 <HAL_GPIO_WritePin>
		  disable_reset = TRUE;
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	4b44      	ldr	r3, [pc, #272]	; (80060ec <main+0x550>)
 8005fda:	601a      	str	r2, [r3, #0]
	  }

	  if (stop_flag == FALSE && dif_l > 2000) { //start searching (place finger in front)
 8005fdc:	682b      	ldr	r3, [r5, #0]
 8005fde:	b933      	cbnz	r3, 8005fee <main+0x452>
 8005fe0:	4b43      	ldr	r3, [pc, #268]	; (80060f0 <main+0x554>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005fe8:	dd01      	ble.n	8005fee <main+0x452>
		  Run_Maze();
 8005fea:	f7ff fbe3 	bl	80057b4 <Run_Maze>
	  }

	  /*
	   * LED4
	   */
	  if (dem1 == TRUE && dif_l > 2000) { //test going straight without correction
 8005fee:	6837      	ldr	r7, [r6, #0]
 8005ff0:	2f01      	cmp	r7, #1
 8005ff2:	d122      	bne.n	800603a <main+0x49e>
 8005ff4:	4b3e      	ldr	r3, [pc, #248]	; (80060f0 <main+0x554>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005ffc:	dd1d      	ble.n	800603a <main+0x49e>
		  Turn_On_Lights();
 8005ffe:	f7fd fe27 	bl	8003c50 <Turn_On_Lights>
		  HAL_Delay(1000);
 8006002:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006006:	f7fa f9b3 	bl	8000370 <HAL_Delay>
		  Turn_Off_Lights();
 800600a:	f7fd fe5b 	bl	8003cc4 <Turn_Off_Lights>
		  Set_Left(FWD_L, FORWARD);
 800600e:	4639      	mov	r1, r7
 8006010:	20c8      	movs	r0, #200	; 0xc8
 8006012:	f7fe fbdd 	bl	80047d0 <Set_Left>
		  Set_Right(FWD_R, FORWARD);
 8006016:	4639      	mov	r1, r7
 8006018:	20c8      	movs	r0, #200	; 0xc8
 800601a:	f7fe fc01 	bl	8004820 <Set_Right>
		  HAL_Delay(4000);
 800601e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8006022:	f7fa f9a5 	bl	8000370 <HAL_Delay>
		  Set_Right(0, 0);
 8006026:	2100      	movs	r1, #0
 8006028:	4608      	mov	r0, r1
 800602a:	f7fe fbf9 	bl	8004820 <Set_Right>
		  Set_Left(0, 0);
 800602e:	2100      	movs	r1, #0
 8006030:	4608      	mov	r0, r1
 8006032:	f7fe fbcd 	bl	80047d0 <Set_Left>
		  dem1 = FALSE;
 8006036:	2300      	movs	r3, #0
 8006038:	6033      	str	r3, [r6, #0]
	  }

	  if (dem1 == TRUE && dif_r > 2000) { //test correction
 800603a:	f8d6 9000 	ldr.w	r9, [r6]
 800603e:	f1b9 0f01 	cmp.w	r9, #1
 8006042:	d111      	bne.n	8006068 <main+0x4cc>
 8006044:	4b27      	ldr	r3, [pc, #156]	; (80060e4 <main+0x548>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800604c:	dd0c      	ble.n	8006068 <main+0x4cc>
		  reverse_flag = FALSE;
 800604e:	2700      	movs	r7, #0
 8006050:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80060f4 <main+0x558>
		  stop_flag = FALSE;
 8006054:	602f      	str	r7, [r5, #0]
		  Set_Left(0, 0);
		  dem1 = FALSE;
	  }

	  if (dem1 == TRUE && dif_r > 2000) { //test correction
		  reverse_flag = FALSE;
 8006056:	f8c8 7000 	str.w	r7, [r8]
		  stop_flag = FALSE;
		  Search(); //reached the end
 800605a:	f7ff f9bf 	bl	80053dc <Search>
		  reverse_flag = TRUE;
 800605e:	f8c8 9000 	str.w	r9, [r8]
		  stop_flag = FALSE;
 8006062:	602f      	str	r7, [r5, #0]
		  Search();
 8006064:	f7ff f9ba 	bl	80053dc <Search>
	 }

	  /*
	   * LED6
	   */
	  if (dem2 == TRUE && dif_l > 2000) { //debug options
 8006068:	6825      	ldr	r5, [r4, #0]
 800606a:	2d01      	cmp	r5, #1
 800606c:	d115      	bne.n	800609a <main+0x4fe>
 800606e:	4b20      	ldr	r3, [pc, #128]	; (80060f0 <main+0x554>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006076:	dd10      	ble.n	800609a <main+0x4fe>
		  Turn_On_Lights();
 8006078:	f7fd fdea 	bl	8003c50 <Turn_On_Lights>
		  HAL_Delay(1000);
 800607c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006080:	f7fa f976 	bl	8000370 <HAL_Delay>
		  Turn_Off_Lights();
 8006084:	f7fd fe1e 	bl	8003cc4 <Turn_Off_Lights>
		  //Speed_Run("blbs");
		  Measure_Speed();
 8006088:	f7ff fc1a 	bl	80058c0 <Measure_Speed>
		  dem2 = FALSE;
 800608c:	2300      	movs	r3, #0
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, ON);
 800608e:	462a      	mov	r2, r5
 8006090:	2102      	movs	r1, #2
 8006092:	4815      	ldr	r0, [pc, #84]	; (80060e8 <main+0x54c>)
		  Turn_On_Lights();
		  HAL_Delay(1000);
		  Turn_Off_Lights();
		  //Speed_Run("blbs");
		  Measure_Speed();
		  dem2 = FALSE;
 8006094:	6023      	str	r3, [r4, #0]
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, ON);
 8006096:	f7fb f893 	bl	80011c0 <HAL_GPIO_WritePin>
	  }

	  if (dem2 == TRUE && dif_r > 2000) { //debug options
 800609a:	6825      	ldr	r5, [r4, #0]
 800609c:	2d01      	cmp	r5, #1
 800609e:	d13c      	bne.n	800611a <main+0x57e>
 80060a0:	4b10      	ldr	r3, [pc, #64]	; (80060e4 <main+0x548>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80060a8:	dd37      	ble.n	800611a <main+0x57e>
 80060aa:	e025      	b.n	80060f8 <main+0x55c>
 80060ac:	20003258 	.word	0x20003258
 80060b0:	40010000 	.word	0x40010000
 80060b4:	200033a4 	.word	0x200033a4
 80060b8:	2000256c 	.word	0x2000256c
 80060bc:	40000c00 	.word	0x40000c00
 80060c0:	20002520 	.word	0x20002520
 80060c4:	40000800 	.word	0x40000800
 80060c8:	20002c94 	.word	0x20002c94
 80060cc:	40011000 	.word	0x40011000
 80060d0:	2000132c 	.word	0x2000132c
 80060d4:	20001330 	.word	0x20001330
 80060d8:	20000014 	.word	0x20000014
 80060dc:	20001314 	.word	0x20001314
 80060e0:	20001334 	.word	0x20001334
 80060e4:	200008d0 	.word	0x200008d0
 80060e8:	40021000 	.word	0x40021000
 80060ec:	2000241c 	.word	0x2000241c
 80060f0:	20000878 	.word	0x20000878
 80060f4:	20001324 	.word	0x20001324
		  Turn_On_Lights();
 80060f8:	f7fd fdaa 	bl	8003c50 <Turn_On_Lights>
		  HAL_Delay(1000);
 80060fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006100:	f7fa f936 	bl	8000370 <HAL_Delay>
		  Turn_Off_Lights();
 8006104:	f7fd fdde 	bl	8003cc4 <Turn_Off_Lights>
		  Motor_Test();
 8006108:	f7ff fc78 	bl	80059fc <Motor_Test>
		  dem2 = FALSE;
 800610c:	2300      	movs	r3, #0
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, ON);
 800610e:	462a      	mov	r2, r5
 8006110:	2102      	movs	r1, #2
 8006112:	4804      	ldr	r0, [pc, #16]	; (8006124 <main+0x588>)
	  if (dem2 == TRUE && dif_r > 2000) { //debug options
		  Turn_On_Lights();
		  HAL_Delay(1000);
		  Turn_Off_Lights();
		  Motor_Test();
		  dem2 = FALSE;
 8006114:	6023      	str	r3, [r4, #0]
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, ON);
 8006116:	f7fb f853 	bl	80011c0 <HAL_GPIO_WritePin>
	  }
  HAL_Delay(500); //ONLY CHECK FOR FINGER every half second. If you check to quickly it'll never start
 800611a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800611e:	f7fa f927 	bl	8000370 <HAL_Delay>
  } //ready loop
 8006122:	e726      	b.n	8005f72 <main+0x3d6>
 8006124:	40021000 	.word	0x40021000

08006128 <HAL_SYSTICK_Callback>:
	  sprintf(tx_buffer, "State: %d", HAL_state);
	  Transmit(tx_buffer);
  }
}

void HAL_SYSTICK_Callback() {
 8006128:	4770      	bx	lr

0800612a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800612a:	b508      	push	{r3, lr}

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800612c:	2003      	movs	r0, #3
 800612e:	f7fa fb67 	bl	8000800 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8006132:	2200      	movs	r2, #0
 8006134:	f06f 000b 	mvn.w	r0, #11
 8006138:	4611      	mov	r1, r2
 800613a:	f7fa fb73 	bl	8000824 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800613e:	2200      	movs	r2, #0
 8006140:	f06f 000a 	mvn.w	r0, #10
 8006144:	4611      	mov	r1, r2
 8006146:	f7fa fb6d 	bl	8000824 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800614a:	2200      	movs	r2, #0
 800614c:	f06f 0009 	mvn.w	r0, #9
 8006150:	4611      	mov	r1, r2
 8006152:	f7fa fb67 	bl	8000824 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8006156:	2200      	movs	r2, #0
 8006158:	f06f 0004 	mvn.w	r0, #4
 800615c:	4611      	mov	r1, r2
 800615e:	f7fa fb61 	bl	8000824 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8006162:	2200      	movs	r2, #0
 8006164:	f06f 0003 	mvn.w	r0, #3
 8006168:	4611      	mov	r1, r2
 800616a:	f7fa fb5b 	bl	8000824 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800616e:	2200      	movs	r2, #0
 8006170:	f06f 0001 	mvn.w	r0, #1
 8006174:	4611      	mov	r1, r2
 8006176:	f7fa fb55 	bl	8000824 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800617a:	2200      	movs	r2, #0
 800617c:	f04f 30ff 	mov.w	r0, #4294967295
 8006180:	4611      	mov	r1, r2

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006182:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8006186:	f7fa bb4d 	b.w	8000824 <HAL_NVIC_SetPriority>
	...

0800618c <HAL_ADC_MspInit>:
{

  GPIO_InitTypeDef GPIO_InitStruct;
  static DMA_HandleTypeDef  hdma_adc;

  if(hadc->Instance==ADC1)
 800618c:	6802      	ldr	r2, [r0, #0]
 800618e:	4b2a      	ldr	r3, [pc, #168]	; (8006238 <HAL_ADC_MspInit+0xac>)
 8006190:	429a      	cmp	r2, r3

  /* USER CODE END MspInit 1 */
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006192:	b570      	push	{r4, r5, r6, lr}
 8006194:	4606      	mov	r6, r0
 8006196:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;
  static DMA_HandleTypeDef  hdma_adc;

  if(hadc->Instance==ADC1)
 8006198:	d14b      	bne.n	8006232 <HAL_ADC_MspInit+0xa6>
  {

    __HAL_RCC_ADC1_CLK_ENABLE();
 800619a:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800619e:	2500      	movs	r5, #0
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80061a0:	2403      	movs	r4, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80061a2:	a903      	add	r1, sp, #12
  static DMA_HandleTypeDef  hdma_adc;

  if(hadc->Instance==ADC1)
  {

    __HAL_RCC_ADC1_CLK_ENABLE();
 80061a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80061a6:	4825      	ldr	r0, [pc, #148]	; (800623c <HAL_ADC_MspInit+0xb0>)
  static DMA_HandleTypeDef  hdma_adc;

  if(hadc->Instance==ADC1)
  {

    __HAL_RCC_ADC1_CLK_ENABLE();
 80061a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061ac:	645a      	str	r2, [r3, #68]	; 0x44
 80061ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061b0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80061b4:	9201      	str	r2, [sp, #4]
 80061b6:	9a01      	ldr	r2, [sp, #4]

    /* Enable DMA2 clock */
    __HAL_RCC_DMA2_CLK_ENABLE();
 80061b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061ba:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80061be:	631a      	str	r2, [r3, #48]	; 0x30
 80061c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80061c2:	9404      	str	r4, [sp, #16]
  {

    __HAL_RCC_ADC1_CLK_ENABLE();

    /* Enable DMA2 clock */
    __HAL_RCC_DMA2_CLK_ENABLE();
 80061c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061c8:	9505      	str	r5, [sp, #20]
  {

    __HAL_RCC_ADC1_CLK_ENABLE();

    /* Enable DMA2 clock */
    __HAL_RCC_DMA2_CLK_ENABLE();
 80061ca:	9302      	str	r3, [sp, #8]
 80061cc:	9b02      	ldr	r3, [sp, #8]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
 80061ce:	2330      	movs	r3, #48	; 0x30
 80061d0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80061d2:	f7fa ff09 	bl	8000fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RF_REC_Pin|R_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061d6:	a903      	add	r1, sp, #12
 80061d8:	4819      	ldr	r0, [pc, #100]	; (8006240 <HAL_ADC_MspInit+0xb4>)
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = RF_REC_Pin|R_REC_Pin;
 80061da:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80061dc:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061de:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061e0:	f7fa ff02 	bl	8000fe8 <HAL_GPIO_Init>

    hdma_adc.Instance = DMA2_Stream0;
 80061e4:	4c17      	ldr	r4, [pc, #92]	; (8006244 <HAL_ADC_MspInit+0xb8>)
 80061e6:	4b18      	ldr	r3, [pc, #96]	; (8006248 <HAL_ADC_MspInit+0xbc>)
    hdma_adc.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    hdma_adc.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
    hdma_adc.Init.MemBurst = DMA_MBURST_SINGLE;
    hdma_adc.Init.PeriphBurst = DMA_PBURST_SINGLE;

    HAL_DMA_Init(&hdma_adc);
 80061e8:	4620      	mov	r0, r4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    hdma_adc.Instance = DMA2_Stream0;
    hdma_adc.Init.Channel  = DMA_CHANNEL_0;
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80061ea:	60a5      	str	r5, [r4, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80061ec:	60e5      	str	r5, [r4, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc.Init.Mode = DMA_CIRCULAR;
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_adc.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80061ee:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_adc.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
    hdma_adc.Init.MemBurst = DMA_MBURST_SINGLE;
 80061f0:	62e5      	str	r5, [r4, #44]	; 0x2c
    hdma_adc.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80061f2:	6325      	str	r5, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    hdma_adc.Instance = DMA2_Stream0;
    hdma_adc.Init.Channel  = DMA_CHANNEL_0;
 80061f4:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80061f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061fc:	6123      	str	r3, [r4, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80061fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006202:	6163      	str	r3, [r4, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006204:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006208:	61a3      	str	r3, [r4, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800620a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800620e:	61e3      	str	r3, [r4, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8006210:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006214:	6223      	str	r3, [r4, #32]
    hdma_adc.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    hdma_adc.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8006216:	2301      	movs	r3, #1
 8006218:	62a3      	str	r3, [r4, #40]	; 0x28
    hdma_adc.Init.MemBurst = DMA_MBURST_SINGLE;
    hdma_adc.Init.PeriphBurst = DMA_PBURST_SINGLE;

    HAL_DMA_Init(&hdma_adc);
 800621a:	f7fa fb83 	bl	8000924 <HAL_DMA_Init>

      /* Associate the initialized DMA handle to the ADC handle */
    __HAL_LINKDMA(hadc, DMA_Handle, hdma_adc);
 800621e:	63b4      	str	r4, [r6, #56]	; 0x38

      /*##-4- Configure the NVIC for DMA #########################################*/
      /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8006220:	2038      	movs	r0, #56	; 0x38
 8006222:	462a      	mov	r2, r5
 8006224:	4629      	mov	r1, r5
    hdma_adc.Init.PeriphBurst = DMA_PBURST_SINGLE;

    HAL_DMA_Init(&hdma_adc);

      /* Associate the initialized DMA handle to the ADC handle */
    __HAL_LINKDMA(hadc, DMA_Handle, hdma_adc);
 8006226:	63a6      	str	r6, [r4, #56]	; 0x38

      /*##-4- Configure the NVIC for DMA #########################################*/
      /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8006228:	f7fa fafc 	bl	8000824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800622c:	2038      	movs	r0, #56	; 0x38
 800622e:	f7fa fb31 	bl	8000894 <HAL_NVIC_EnableIRQ>

  }

}
 8006232:	b008      	add	sp, #32
 8006234:	bd70      	pop	{r4, r5, r6, pc}
 8006236:	bf00      	nop
 8006238:	40012000 	.word	0x40012000
 800623c:	40020800 	.word	0x40020800
 8006240:	40020400 	.word	0x40020400
 8006244:	20002424 	.word	0x20002424
 8006248:	40026410 	.word	0x40026410

0800624c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 800624c:	6803      	ldr	r3, [r0, #0]
 800624e:	4a29      	ldr	r2, [pc, #164]	; (80062f4 <HAL_TIM_Encoder_MspInit+0xa8>)
 8006250:	4293      	cmp	r3, r2
  }

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim)
{
 8006252:	b570      	push	{r4, r5, r6, lr}
 8006254:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8006256:	d11e      	bne.n	8006296 <HAL_TIM_Encoder_MspInit+0x4a>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006258:	4b27      	ldr	r3, [pc, #156]	; (80062f8 <HAL_TIM_Encoder_MspInit+0xac>)
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = LENC_CHB_Pin|LENC_CHA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800625a:	2401      	movs	r4, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800625c:	a903      	add	r1, sp, #12
 800625e:	4827      	ldr	r0, [pc, #156]	; (80062fc <HAL_TIM_Encoder_MspInit+0xb0>)
  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006262:	f042 0201 	orr.w	r2, r2, #1
 8006266:	645a      	str	r2, [r3, #68]	; 0x44
 8006268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = LENC_CHB_Pin|LENC_CHA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800626a:	9405      	str	r4, [sp, #20]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800626c:	f003 0301 	and.w	r3, r3, #1
    */
    GPIO_InitStruct.Pin = LENC_CHB_Pin|LENC_CHA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006270:	9407      	str	r4, [sp, #28]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006272:	9301      	str	r3, [sp, #4]
 8006274:	9b01      	ldr	r3, [sp, #4]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = LENC_CHB_Pin|LENC_CHA_Pin;
 8006276:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800627a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800627c:	2302      	movs	r3, #2
 800627e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8006280:	2303      	movs	r3, #3
 8006282:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006284:	f7fa feb0 	bl	8000fe8 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 1);
 8006288:	201b      	movs	r0, #27
 800628a:	4622      	mov	r2, r4
 800628c:	2100      	movs	r1, #0
 800628e:	f7fa fac9 	bl	8000824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8006292:	201b      	movs	r0, #27
 8006294:	e02a      	b.n	80062ec <HAL_TIM_Encoder_MspInit+0xa0>


  }
  else if(htim->Instance==TIM4)
 8006296:	4a1a      	ldr	r2, [pc, #104]	; (8006300 <HAL_TIM_Encoder_MspInit+0xb4>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d129      	bne.n	80062f0 <HAL_TIM_Encoder_MspInit+0xa4>
  {
      __HAL_RCC_TIM4_CLK_ENABLE();
 800629c:	4b16      	ldr	r3, [pc, #88]	; (80062f8 <HAL_TIM_Encoder_MspInit+0xac>)
      /**TIM4 GPIO Configuration
      PB6     ------> TIM4_CH1
      PB7     ------> TIM4_CH2
      */
      GPIO_InitStruct.Pin = RENCA_Pin;
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800629e:	2402      	movs	r4, #2
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 80062a0:	2601      	movs	r6, #1
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80062a2:	2503      	movs	r5, #3


  }
  else if(htim->Instance==TIM4)
  {
      __HAL_RCC_TIM4_CLK_ENABLE();
 80062a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      GPIO_InitStruct.Pin = RENCA_Pin;
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
      HAL_GPIO_Init(RENCA_GPIO_Port, &GPIO_InitStruct);
 80062a6:	a903      	add	r1, sp, #12
 80062a8:	4816      	ldr	r0, [pc, #88]	; (8006304 <HAL_TIM_Encoder_MspInit+0xb8>)


  }
  else if(htim->Instance==TIM4)
  {
      __HAL_RCC_TIM4_CLK_ENABLE();
 80062aa:	f042 0204 	orr.w	r2, r2, #4
 80062ae:	641a      	str	r2, [r3, #64]	; 0x40
 80062b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      /**TIM4 GPIO Configuration
      PB6     ------> TIM4_CH1
      PB7     ------> TIM4_CH2
      */
      GPIO_InitStruct.Pin = RENCA_Pin;
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062b2:	9404      	str	r4, [sp, #16]


  }
  else if(htim->Instance==TIM4)
  {
      __HAL_RCC_TIM4_CLK_ENABLE();
 80062b4:	f003 0304 	and.w	r3, r3, #4
      PB6     ------> TIM4_CH1
      PB7     ------> TIM4_CH2
      */
      GPIO_InitStruct.Pin = RENCA_Pin;
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 80062b8:	9605      	str	r6, [sp, #20]
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80062ba:	9506      	str	r5, [sp, #24]


  }
  else if(htim->Instance==TIM4)
  {
      __HAL_RCC_TIM4_CLK_ENABLE();
 80062bc:	9302      	str	r3, [sp, #8]
 80062be:	9b02      	ldr	r3, [sp, #8]

      /**TIM4 GPIO Configuration
      PB6     ------> TIM4_CH1
      PB7     ------> TIM4_CH2
      */
      GPIO_InitStruct.Pin = RENCA_Pin;
 80062c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80062c4:	9407      	str	r4, [sp, #28]

      /**TIM4 GPIO Configuration
      PB6     ------> TIM4_CH1
      PB7     ------> TIM4_CH2
      */
      GPIO_InitStruct.Pin = RENCA_Pin;
 80062c6:	9303      	str	r3, [sp, #12]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
      HAL_GPIO_Init(RENCA_GPIO_Port, &GPIO_InitStruct);
 80062c8:	f7fa fe8e 	bl	8000fe8 <HAL_GPIO_Init>


      GPIO_InitStruct.Pin = RENCB_Pin;
 80062cc:	2380      	movs	r3, #128	; 0x80
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
      HAL_GPIO_Init(RENCB_GPIO_Port, &GPIO_InitStruct);
 80062ce:	a903      	add	r1, sp, #12
 80062d0:	480d      	ldr	r0, [pc, #52]	; (8006308 <HAL_TIM_Encoder_MspInit+0xbc>)
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
      HAL_GPIO_Init(RENCA_GPIO_Port, &GPIO_InitStruct);


      GPIO_InitStruct.Pin = RENCB_Pin;
 80062d2:	9303      	str	r3, [sp, #12]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062d4:	9404      	str	r4, [sp, #16]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 80062d6:	9605      	str	r6, [sp, #20]
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80062d8:	9506      	str	r5, [sp, #24]
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80062da:	9407      	str	r4, [sp, #28]
      HAL_GPIO_Init(RENCB_GPIO_Port, &GPIO_InitStruct);
 80062dc:	f7fa fe84 	bl	8000fe8 <HAL_GPIO_Init>


      HAL_NVIC_SetPriority(TIM4_IRQn, 0, 2);
 80062e0:	201e      	movs	r0, #30
 80062e2:	4622      	mov	r2, r4
 80062e4:	2100      	movs	r1, #0
 80062e6:	f7fa fa9d 	bl	8000824 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80062ea:	201e      	movs	r0, #30
 80062ec:	f7fa fad2 	bl	8000894 <HAL_NVIC_EnableIRQ>
}
}
 80062f0:	b008      	add	sp, #32
 80062f2:	bd70      	pop	{r4, r5, r6, pc}
 80062f4:	40010000 	.word	0x40010000
 80062f8:	40023800 	.word	0x40023800
 80062fc:	40021000 	.word	0x40021000
 8006300:	40000800 	.word	0x40000800
 8006304:	40020c00 	.word	0x40020c00
 8006308:	40020400 	.word	0x40020400

0800630c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM5)
 800630c:	6802      	ldr	r2, [r0, #0]
      HAL_NVIC_EnableIRQ(TIM4_IRQn);
}
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800630e:	b082      	sub	sp, #8

  if(htim_base->Instance==TIM5)
 8006310:	4b07      	ldr	r3, [pc, #28]	; (8006330 <HAL_TIM_Base_MspInit+0x24>)
 8006312:	429a      	cmp	r2, r3
 8006314:	d10a      	bne.n	800632c <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006316:	f503 330b 	add.w	r3, r3, #142336	; 0x22c00
 800631a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800631c:	f042 0208 	orr.w	r2, r2, #8
 8006320:	641a      	str	r2, [r3, #64]	; 0x40
 8006322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006324:	f003 0308 	and.w	r3, r3, #8
 8006328:	9301      	str	r3, [sp, #4]
 800632a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800632c:	b002      	add	sp, #8
 800632e:	4770      	bx	lr
 8006330:	40000c00 	.word	0x40000c00

08006334 <HAL_TIM_PWM_MspInit>:
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM2)
 8006334:	6803      	ldr	r3, [r0, #0]
  /* USER CODE END TIM5_MspInit 1 */
  }

}
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006336:	b084      	sub	sp, #16

  if(htim_pwm->Instance==TIM2)
 8006338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800633c:	d10b      	bne.n	8006356 <HAL_TIM_PWM_MspInit+0x22>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800633e:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8006342:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006344:	f042 0201 	orr.w	r2, r2, #1
 8006348:	641a      	str	r2, [r3, #64]	; 0x40
 800634a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634c:	f003 0301 	and.w	r3, r3, #1
 8006350:	9301      	str	r3, [sp, #4]
 8006352:	9b01      	ldr	r3, [sp, #4]
 8006354:	e01a      	b.n	800638c <HAL_TIM_PWM_MspInit+0x58>

  }
  else if(htim_pwm->Instance==TIM3)
 8006356:	4a0e      	ldr	r2, [pc, #56]	; (8006390 <HAL_TIM_PWM_MspInit+0x5c>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d10a      	bne.n	8006372 <HAL_TIM_PWM_MspInit+0x3e>
    {

      /* Peripheral clock enable */
      __HAL_RCC_TIM3_CLK_ENABLE();
 800635c:	4b0d      	ldr	r3, [pc, #52]	; (8006394 <HAL_TIM_PWM_MspInit+0x60>)
 800635e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006360:	f042 0202 	orr.w	r2, r2, #2
 8006364:	641a      	str	r2, [r3, #64]	; 0x40
 8006366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006368:	f003 0302 	and.w	r3, r3, #2
 800636c:	9302      	str	r3, [sp, #8]
 800636e:	9b02      	ldr	r3, [sp, #8]
 8006370:	e00c      	b.n	800638c <HAL_TIM_PWM_MspInit+0x58>

    }

  else if(htim_pwm->Instance==TIM9)
 8006372:	4a09      	ldr	r2, [pc, #36]	; (8006398 <HAL_TIM_PWM_MspInit+0x64>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d109      	bne.n	800638c <HAL_TIM_PWM_MspInit+0x58>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8006378:	4b06      	ldr	r3, [pc, #24]	; (8006394 <HAL_TIM_PWM_MspInit+0x60>)
 800637a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800637c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006380:	645a      	str	r2, [r3, #68]	; 0x44
 8006382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006388:	9303      	str	r3, [sp, #12]
 800638a:	9b03      	ldr	r3, [sp, #12]

  }

}
 800638c:	b004      	add	sp, #16
 800638e:	4770      	bx	lr
 8006390:	40000400 	.word	0x40000400
 8006394:	40023800 	.word	0x40023800
 8006398:	40014000 	.word	0x40014000

0800639c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM2)
 800639c:	6803      	ldr	r3, [r0, #0]
 800639e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  }

}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80063a2:	b530      	push	{r4, r5, lr}
 80063a4:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM2)
 80063a6:	d10b      	bne.n	80063c0 <HAL_TIM_MspPostInit+0x24>

    /**TIM2 GPIO Configuration    
    PA0/WKUP     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = RPWM_Pin|LPWM_Pin;
 80063a8:	2305      	movs	r3, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063aa:	a901      	add	r1, sp, #4
 80063ac:	481a      	ldr	r0, [pc, #104]	; (8006418 <HAL_TIM_MspPostInit+0x7c>)

    /**TIM2 GPIO Configuration    
    PA0/WKUP     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = RPWM_Pin|LPWM_Pin;
 80063ae:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063b0:	2302      	movs	r3, #2
 80063b2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063b4:	2300      	movs	r3, #0
 80063b6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80063b8:	2301      	movs	r3, #1
 80063ba:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80063bc:	9305      	str	r3, [sp, #20]
 80063be:	e026      	b.n	800640e <HAL_TIM_MspPostInit+0x72>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  }

  else if(htim->Instance==TIM3)
 80063c0:	4a16      	ldr	r2, [pc, #88]	; (800641c <HAL_TIM_MspPostInit+0x80>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d115      	bne.n	80063f2 <HAL_TIM_MspPostInit+0x56>
      PC9     ------> TIM3_CH4
      PB4     ------> TIM3_CH1
      PB5     ------> TIM3_CH2
      */
      GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063c6:	2402      	movs	r4, #2
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063c8:	2500      	movs	r5, #0
      PC8     ------> TIM3_CH3
      PC9     ------> TIM3_CH4
      PB4     ------> TIM3_CH1
      PB5     ------> TIM3_CH2
      */
      GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80063ca:	f44f 7340 	mov.w	r3, #768	; 0x300
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80063ce:	a901      	add	r1, sp, #4
 80063d0:	4813      	ldr	r0, [pc, #76]	; (8006420 <HAL_TIM_MspPostInit+0x84>)
      PC8     ------> TIM3_CH3
      PC9     ------> TIM3_CH4
      PB4     ------> TIM3_CH1
      PB5     ------> TIM3_CH2
      */
      GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80063d2:	9301      	str	r3, [sp, #4]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063d4:	9402      	str	r4, [sp, #8]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063d6:	9503      	str	r5, [sp, #12]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063d8:	9504      	str	r5, [sp, #16]
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80063da:	9405      	str	r4, [sp, #20]
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80063dc:	f7fa fe04 	bl	8000fe8 <HAL_GPIO_Init>

      GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80063e0:	2330      	movs	r3, #48	; 0x30
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063e2:	9402      	str	r4, [sp, #8]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063e4:	9503      	str	r5, [sp, #12]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063e6:	a901      	add	r1, sp, #4
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

      GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80063e8:	9301      	str	r3, [sp, #4]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063ea:	9504      	str	r5, [sp, #16]
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80063ec:	9405      	str	r4, [sp, #20]
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063ee:	480d      	ldr	r0, [pc, #52]	; (8006424 <HAL_TIM_MspPostInit+0x88>)
 80063f0:	e00d      	b.n	800640e <HAL_TIM_MspPostInit+0x72>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
    }

  else if(htim->Instance==TIM9)
 80063f2:	4a0d      	ldr	r2, [pc, #52]	; (8006428 <HAL_TIM_MspPostInit+0x8c>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d10c      	bne.n	8006412 <HAL_TIM_MspPostInit+0x76>
  {
      /**TIM9 GPIO Configuration
      PE5     ------> TIM9_CH1
      */
      GPIO_InitStruct.Pin = BUZZER_Pin;
 80063f8:	2320      	movs	r3, #32
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
      HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80063fa:	a901      	add	r1, sp, #4
 80063fc:	480b      	ldr	r0, [pc, #44]	; (800642c <HAL_TIM_MspPostInit+0x90>)
  else if(htim->Instance==TIM9)
  {
      /**TIM9 GPIO Configuration
      PE5     ------> TIM9_CH1
      */
      GPIO_InitStruct.Pin = BUZZER_Pin;
 80063fe:	9301      	str	r3, [sp, #4]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006400:	2302      	movs	r3, #2
 8006402:	9302      	str	r3, [sp, #8]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006404:	2300      	movs	r3, #0
 8006406:	9303      	str	r3, [sp, #12]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006408:	9304      	str	r3, [sp, #16]
      GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800640a:	2303      	movs	r3, #3
 800640c:	9305      	str	r3, [sp, #20]
      HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800640e:	f7fa fdeb 	bl	8000fe8 <HAL_GPIO_Init>

  }

}
 8006412:	b007      	add	sp, #28
 8006414:	bd30      	pop	{r4, r5, pc}
 8006416:	bf00      	nop
 8006418:	40020000 	.word	0x40020000
 800641c:	40000400 	.word	0x40000400
 8006420:	40020800 	.word	0x40020800
 8006424:	40020400 	.word	0x40020400
 8006428:	40014000 	.word	0x40014000
 800642c:	40021000 	.word	0x40021000

08006430 <HAL_UART_MspInit>:
  /* USER CODE END TIM5_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006430:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8006432:	6802      	ldr	r2, [r0, #0]
 8006434:	4b0f      	ldr	r3, [pc, #60]	; (8006474 <HAL_UART_MspInit+0x44>)
 8006436:	429a      	cmp	r2, r3
 8006438:	d119      	bne.n	800646e <HAL_UART_MspInit+0x3e>
  {

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800643a:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800643e:	a901      	add	r1, sp, #4
 8006440:	480d      	ldr	r0, [pc, #52]	; (8006478 <HAL_UART_MspInit+0x48>)
  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
  {

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006442:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006444:	f042 0210 	orr.w	r2, r2, #16
 8006448:	645a      	str	r2, [r3, #68]	; 0x44
 800644a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800644c:	f003 0310 	and.w	r3, r3, #16
 8006450:	9300      	str	r3, [sp, #0]
 8006452:	9b00      	ldr	r3, [sp, #0]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006454:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006458:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800645a:	2302      	movs	r3, #2
 800645c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800645e:	2301      	movs	r3, #1
 8006460:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006462:	2303      	movs	r3, #3
 8006464:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006466:	2307      	movs	r3, #7
 8006468:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800646a:	f7fa fdbd 	bl	8000fe8 <HAL_GPIO_Init>


  }

}
 800646e:	b007      	add	sp, #28
 8006470:	f85d fb04 	ldr.w	pc, [sp], #4
 8006474:	40011000 	.word	0x40011000
 8006478:	40020000 	.word	0x40020000

0800647c <NMI_Handler>:
 800647c:	4770      	bx	lr

0800647e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800647e:	e7fe      	b.n	800647e <HardFault_Handler>

08006480 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8006480:	e7fe      	b.n	8006480 <MemManage_Handler>

08006482 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8006482:	e7fe      	b.n	8006482 <BusFault_Handler>

08006484 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8006484:	e7fe      	b.n	8006484 <UsageFault_Handler>

08006486 <SVC_Handler>:
 8006486:	4770      	bx	lr

08006488 <DebugMon_Handler>:
 8006488:	4770      	bx	lr

0800648a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800648a:	4770      	bx	lr

0800648c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800648c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800648e:	f7f9 ff61 	bl	8000354 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006492:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 8006496:	f7fa ba2b 	b.w	80008f0 <HAL_SYSTICK_IRQHandler>

0800649a <EXTI15_10_IRQHandler>:
  /* USER CODE END SysTick_IRQn 1 */
}

void EXTI15_10_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800649a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800649e:	f7fa be93 	b.w	80011c8 <HAL_GPIO_EXTI_IRQHandler>

080064a2 <EXTI9_5_IRQHandler>:
}

void EXTI9_5_IRQHandler(void)
{
#if MOUSE_REV == 69
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80064a2:	2020      	movs	r0, #32
 80064a4:	f7fa be90 	b.w	80011c8 <HAL_GPIO_EXTI_IRQHandler>

080064a8 <DMA2_Stream0_IRQHandler>:

}

void DMA2_Stream0_IRQHandler(void)
{
  HAL_DMA_IRQHandler(hadc1.DMA_Handle);
 80064a8:	4b01      	ldr	r3, [pc, #4]	; (80064b0 <DMA2_Stream0_IRQHandler+0x8>)
 80064aa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80064ac:	f7fa bb44 	b.w	8000b38 <HAL_DMA_IRQHandler>
 80064b0:	20002c4c 	.word	0x20002c4c

080064b4 <SPI1_IRQHandler>:
}

void SPI1_IRQHandler(void)
{
  HAL_SPI_IRQHandler(&hspi1);
 80064b4:	4801      	ldr	r0, [pc, #4]	; (80064bc <SPI1_IRQHandler+0x8>)
 80064b6:	f7fb bd2b 	b.w	8001f10 <HAL_SPI_IRQHandler>
 80064ba:	bf00      	nop
 80064bc:	20003340 	.word	0x20003340

080064c0 <TIM1_CC_IRQHandler>:
}


void TIM1_CC_IRQHandler(void) {

 HAL_TIM_IRQHandler(&htim1);
 80064c0:	4801      	ldr	r0, [pc, #4]	; (80064c8 <TIM1_CC_IRQHandler+0x8>)
 80064c2:	f7fb be23 	b.w	800210c <HAL_TIM_IRQHandler>
 80064c6:	bf00      	nop
 80064c8:	20003258 	.word	0x20003258

080064cc <TIM4_IRQHandler>:

}

void TIM4_IRQHandler(void) {

 HAL_TIM_IRQHandler(&htim4);
 80064cc:	4801      	ldr	r0, [pc, #4]	; (80064d4 <TIM4_IRQHandler+0x8>)
 80064ce:	f7fb be1d 	b.w	800210c <HAL_TIM_IRQHandler>
 80064d2:	bf00      	nop
 80064d4:	20002520 	.word	0x20002520

080064d8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80064d8:	490f      	ldr	r1, [pc, #60]	; (8006518 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80064da:	2000      	movs	r0, #0
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80064dc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80064e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80064e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80064e8:	4b0c      	ldr	r3, [pc, #48]	; (800651c <SystemInit+0x44>)
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	f042 0201 	orr.w	r2, r2, #1
 80064f0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80064f2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80064fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80064fe:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006500:	4a07      	ldr	r2, [pc, #28]	; (8006520 <SystemInit+0x48>)
 8006502:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800650a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800650c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800650e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006512:	608b      	str	r3, [r1, #8]
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	e000ed00 	.word	0xe000ed00
 800651c:	40023800 	.word	0x40023800
 8006520:	24003010 	.word	0x24003010

08006524 <__libc_init_array>:
 8006524:	b570      	push	{r4, r5, r6, lr}
 8006526:	4b0e      	ldr	r3, [pc, #56]	; (8006560 <__libc_init_array+0x3c>)
 8006528:	4c0e      	ldr	r4, [pc, #56]	; (8006564 <__libc_init_array+0x40>)
 800652a:	1ae4      	subs	r4, r4, r3
 800652c:	10a4      	asrs	r4, r4, #2
 800652e:	2500      	movs	r5, #0
 8006530:	461e      	mov	r6, r3
 8006532:	42a5      	cmp	r5, r4
 8006534:	d004      	beq.n	8006540 <__libc_init_array+0x1c>
 8006536:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800653a:	4798      	blx	r3
 800653c:	3501      	adds	r5, #1
 800653e:	e7f8      	b.n	8006532 <__libc_init_array+0xe>
 8006540:	f000 fc4e 	bl	8006de0 <_init>
 8006544:	4c08      	ldr	r4, [pc, #32]	; (8006568 <__libc_init_array+0x44>)
 8006546:	4b09      	ldr	r3, [pc, #36]	; (800656c <__libc_init_array+0x48>)
 8006548:	1ae4      	subs	r4, r4, r3
 800654a:	10a4      	asrs	r4, r4, #2
 800654c:	2500      	movs	r5, #0
 800654e:	461e      	mov	r6, r3
 8006550:	42a5      	cmp	r5, r4
 8006552:	d004      	beq.n	800655e <__libc_init_array+0x3a>
 8006554:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006558:	4798      	blx	r3
 800655a:	3501      	adds	r5, #1
 800655c:	e7f8      	b.n	8006550 <__libc_init_array+0x2c>
 800655e:	bd70      	pop	{r4, r5, r6, pc}
 8006560:	08007500 	.word	0x08007500
 8006564:	08007500 	.word	0x08007500
 8006568:	08007504 	.word	0x08007504
 800656c:	08007500 	.word	0x08007500

08006570 <siprintf>:
 8006570:	b40e      	push	{r1, r2, r3}
 8006572:	b500      	push	{lr}
 8006574:	b09c      	sub	sp, #112	; 0x70
 8006576:	f44f 7102 	mov.w	r1, #520	; 0x208
 800657a:	ab1d      	add	r3, sp, #116	; 0x74
 800657c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8006580:	9002      	str	r0, [sp, #8]
 8006582:	9006      	str	r0, [sp, #24]
 8006584:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006588:	480a      	ldr	r0, [pc, #40]	; (80065b4 <siprintf+0x44>)
 800658a:	9104      	str	r1, [sp, #16]
 800658c:	9107      	str	r1, [sp, #28]
 800658e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006592:	f853 2b04 	ldr.w	r2, [r3], #4
 8006596:	f8ad 1016 	strh.w	r1, [sp, #22]
 800659a:	6800      	ldr	r0, [r0, #0]
 800659c:	9301      	str	r3, [sp, #4]
 800659e:	a902      	add	r1, sp, #8
 80065a0:	f000 f86c 	bl	800667c <_svfiprintf_r>
 80065a4:	9b02      	ldr	r3, [sp, #8]
 80065a6:	2200      	movs	r2, #0
 80065a8:	701a      	strb	r2, [r3, #0]
 80065aa:	b01c      	add	sp, #112	; 0x70
 80065ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80065b0:	b003      	add	sp, #12
 80065b2:	4770      	bx	lr
 80065b4:	2000007c 	.word	0x2000007c

080065b8 <strcpy>:
 80065b8:	4603      	mov	r3, r0
 80065ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065be:	f803 2b01 	strb.w	r2, [r3], #1
 80065c2:	2a00      	cmp	r2, #0
 80065c4:	d1f9      	bne.n	80065ba <strcpy+0x2>
 80065c6:	4770      	bx	lr

080065c8 <__ssputs_r>:
 80065c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065cc:	688e      	ldr	r6, [r1, #8]
 80065ce:	429e      	cmp	r6, r3
 80065d0:	4682      	mov	sl, r0
 80065d2:	460c      	mov	r4, r1
 80065d4:	4691      	mov	r9, r2
 80065d6:	4698      	mov	r8, r3
 80065d8:	d83e      	bhi.n	8006658 <__ssputs_r+0x90>
 80065da:	898a      	ldrh	r2, [r1, #12]
 80065dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80065e0:	d03a      	beq.n	8006658 <__ssputs_r+0x90>
 80065e2:	6825      	ldr	r5, [r4, #0]
 80065e4:	6909      	ldr	r1, [r1, #16]
 80065e6:	1a6f      	subs	r7, r5, r1
 80065e8:	6965      	ldr	r5, [r4, #20]
 80065ea:	2302      	movs	r3, #2
 80065ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065f0:	fb95 f5f3 	sdiv	r5, r5, r3
 80065f4:	1c7b      	adds	r3, r7, #1
 80065f6:	4443      	add	r3, r8
 80065f8:	429d      	cmp	r5, r3
 80065fa:	bf38      	it	cc
 80065fc:	461d      	movcc	r5, r3
 80065fe:	0553      	lsls	r3, r2, #21
 8006600:	d50f      	bpl.n	8006622 <__ssputs_r+0x5a>
 8006602:	4629      	mov	r1, r5
 8006604:	f000 fb3e 	bl	8006c84 <_malloc_r>
 8006608:	4606      	mov	r6, r0
 800660a:	b198      	cbz	r0, 8006634 <__ssputs_r+0x6c>
 800660c:	463a      	mov	r2, r7
 800660e:	6921      	ldr	r1, [r4, #16]
 8006610:	f000 fac4 	bl	8006b9c <memcpy>
 8006614:	89a3      	ldrh	r3, [r4, #12]
 8006616:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800661a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800661e:	81a3      	strh	r3, [r4, #12]
 8006620:	e013      	b.n	800664a <__ssputs_r+0x82>
 8006622:	462a      	mov	r2, r5
 8006624:	f000 fb8c 	bl	8006d40 <_realloc_r>
 8006628:	4606      	mov	r6, r0
 800662a:	b970      	cbnz	r0, 800664a <__ssputs_r+0x82>
 800662c:	6921      	ldr	r1, [r4, #16]
 800662e:	4650      	mov	r0, sl
 8006630:	f000 fada 	bl	8006be8 <_free_r>
 8006634:	230c      	movs	r3, #12
 8006636:	f8ca 3000 	str.w	r3, [sl]
 800663a:	89a3      	ldrh	r3, [r4, #12]
 800663c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006640:	81a3      	strh	r3, [r4, #12]
 8006642:	f04f 30ff 	mov.w	r0, #4294967295
 8006646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800664a:	6126      	str	r6, [r4, #16]
 800664c:	6165      	str	r5, [r4, #20]
 800664e:	443e      	add	r6, r7
 8006650:	1bed      	subs	r5, r5, r7
 8006652:	6026      	str	r6, [r4, #0]
 8006654:	60a5      	str	r5, [r4, #8]
 8006656:	4646      	mov	r6, r8
 8006658:	4546      	cmp	r6, r8
 800665a:	bf28      	it	cs
 800665c:	4646      	movcs	r6, r8
 800665e:	4632      	mov	r2, r6
 8006660:	4649      	mov	r1, r9
 8006662:	6820      	ldr	r0, [r4, #0]
 8006664:	f000 faa5 	bl	8006bb2 <memmove>
 8006668:	68a3      	ldr	r3, [r4, #8]
 800666a:	1b9b      	subs	r3, r3, r6
 800666c:	60a3      	str	r3, [r4, #8]
 800666e:	6823      	ldr	r3, [r4, #0]
 8006670:	441e      	add	r6, r3
 8006672:	6026      	str	r6, [r4, #0]
 8006674:	2000      	movs	r0, #0
 8006676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800667c <_svfiprintf_r>:
 800667c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006680:	b09d      	sub	sp, #116	; 0x74
 8006682:	4680      	mov	r8, r0
 8006684:	9303      	str	r3, [sp, #12]
 8006686:	898b      	ldrh	r3, [r1, #12]
 8006688:	061c      	lsls	r4, r3, #24
 800668a:	460d      	mov	r5, r1
 800668c:	4616      	mov	r6, r2
 800668e:	d50d      	bpl.n	80066ac <_svfiprintf_r+0x30>
 8006690:	690b      	ldr	r3, [r1, #16]
 8006692:	b95b      	cbnz	r3, 80066ac <_svfiprintf_r+0x30>
 8006694:	2140      	movs	r1, #64	; 0x40
 8006696:	f000 faf5 	bl	8006c84 <_malloc_r>
 800669a:	6028      	str	r0, [r5, #0]
 800669c:	6128      	str	r0, [r5, #16]
 800669e:	b918      	cbnz	r0, 80066a8 <_svfiprintf_r+0x2c>
 80066a0:	230c      	movs	r3, #12
 80066a2:	f8c8 3000 	str.w	r3, [r8]
 80066a6:	e0cd      	b.n	8006844 <_svfiprintf_r+0x1c8>
 80066a8:	2340      	movs	r3, #64	; 0x40
 80066aa:	616b      	str	r3, [r5, #20]
 80066ac:	2300      	movs	r3, #0
 80066ae:	9309      	str	r3, [sp, #36]	; 0x24
 80066b0:	2320      	movs	r3, #32
 80066b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066b6:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8006854 <_svfiprintf_r+0x1d8>
 80066ba:	2330      	movs	r3, #48	; 0x30
 80066bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066c0:	4637      	mov	r7, r6
 80066c2:	463c      	mov	r4, r7
 80066c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80066c8:	b91b      	cbnz	r3, 80066d2 <_svfiprintf_r+0x56>
 80066ca:	ebb7 0906 	subs.w	r9, r7, r6
 80066ce:	d010      	beq.n	80066f2 <_svfiprintf_r+0x76>
 80066d0:	e003      	b.n	80066da <_svfiprintf_r+0x5e>
 80066d2:	2b25      	cmp	r3, #37	; 0x25
 80066d4:	d0f9      	beq.n	80066ca <_svfiprintf_r+0x4e>
 80066d6:	4627      	mov	r7, r4
 80066d8:	e7f3      	b.n	80066c2 <_svfiprintf_r+0x46>
 80066da:	464b      	mov	r3, r9
 80066dc:	4632      	mov	r2, r6
 80066de:	4629      	mov	r1, r5
 80066e0:	4640      	mov	r0, r8
 80066e2:	f7ff ff71 	bl	80065c8 <__ssputs_r>
 80066e6:	3001      	adds	r0, #1
 80066e8:	f000 80a7 	beq.w	800683a <_svfiprintf_r+0x1be>
 80066ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066ee:	444b      	add	r3, r9
 80066f0:	9309      	str	r3, [sp, #36]	; 0x24
 80066f2:	783b      	ldrb	r3, [r7, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f000 80a0 	beq.w	800683a <_svfiprintf_r+0x1be>
 80066fa:	2300      	movs	r3, #0
 80066fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006700:	9304      	str	r3, [sp, #16]
 8006702:	9307      	str	r3, [sp, #28]
 8006704:	9205      	str	r2, [sp, #20]
 8006706:	9306      	str	r3, [sp, #24]
 8006708:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800670c:	931a      	str	r3, [sp, #104]	; 0x68
 800670e:	2601      	movs	r6, #1
 8006710:	2205      	movs	r2, #5
 8006712:	7821      	ldrb	r1, [r4, #0]
 8006714:	484e      	ldr	r0, [pc, #312]	; (8006850 <_svfiprintf_r+0x1d4>)
 8006716:	f7f9 fd83 	bl	8000220 <memchr>
 800671a:	1c67      	adds	r7, r4, #1
 800671c:	9b04      	ldr	r3, [sp, #16]
 800671e:	b138      	cbz	r0, 8006730 <_svfiprintf_r+0xb4>
 8006720:	4a4b      	ldr	r2, [pc, #300]	; (8006850 <_svfiprintf_r+0x1d4>)
 8006722:	1a80      	subs	r0, r0, r2
 8006724:	fa06 f000 	lsl.w	r0, r6, r0
 8006728:	4318      	orrs	r0, r3
 800672a:	9004      	str	r0, [sp, #16]
 800672c:	463c      	mov	r4, r7
 800672e:	e7ef      	b.n	8006710 <_svfiprintf_r+0x94>
 8006730:	06d9      	lsls	r1, r3, #27
 8006732:	bf44      	itt	mi
 8006734:	2220      	movmi	r2, #32
 8006736:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800673a:	071a      	lsls	r2, r3, #28
 800673c:	bf44      	itt	mi
 800673e:	222b      	movmi	r2, #43	; 0x2b
 8006740:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006744:	7822      	ldrb	r2, [r4, #0]
 8006746:	2a2a      	cmp	r2, #42	; 0x2a
 8006748:	d003      	beq.n	8006752 <_svfiprintf_r+0xd6>
 800674a:	9a07      	ldr	r2, [sp, #28]
 800674c:	2100      	movs	r1, #0
 800674e:	200a      	movs	r0, #10
 8006750:	e00b      	b.n	800676a <_svfiprintf_r+0xee>
 8006752:	9a03      	ldr	r2, [sp, #12]
 8006754:	1d11      	adds	r1, r2, #4
 8006756:	6812      	ldr	r2, [r2, #0]
 8006758:	9103      	str	r1, [sp, #12]
 800675a:	2a00      	cmp	r2, #0
 800675c:	da10      	bge.n	8006780 <_svfiprintf_r+0x104>
 800675e:	4252      	negs	r2, r2
 8006760:	f043 0002 	orr.w	r0, r3, #2
 8006764:	9207      	str	r2, [sp, #28]
 8006766:	9004      	str	r0, [sp, #16]
 8006768:	e00b      	b.n	8006782 <_svfiprintf_r+0x106>
 800676a:	4627      	mov	r7, r4
 800676c:	3401      	adds	r4, #1
 800676e:	783b      	ldrb	r3, [r7, #0]
 8006770:	3b30      	subs	r3, #48	; 0x30
 8006772:	2b09      	cmp	r3, #9
 8006774:	d803      	bhi.n	800677e <_svfiprintf_r+0x102>
 8006776:	fb00 3202 	mla	r2, r0, r2, r3
 800677a:	2101      	movs	r1, #1
 800677c:	e7f5      	b.n	800676a <_svfiprintf_r+0xee>
 800677e:	b101      	cbz	r1, 8006782 <_svfiprintf_r+0x106>
 8006780:	9207      	str	r2, [sp, #28]
 8006782:	783b      	ldrb	r3, [r7, #0]
 8006784:	2b2e      	cmp	r3, #46	; 0x2e
 8006786:	d11e      	bne.n	80067c6 <_svfiprintf_r+0x14a>
 8006788:	787b      	ldrb	r3, [r7, #1]
 800678a:	2b2a      	cmp	r3, #42	; 0x2a
 800678c:	d10a      	bne.n	80067a4 <_svfiprintf_r+0x128>
 800678e:	9b03      	ldr	r3, [sp, #12]
 8006790:	1d1a      	adds	r2, r3, #4
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	9203      	str	r2, [sp, #12]
 8006796:	2b00      	cmp	r3, #0
 8006798:	bfb8      	it	lt
 800679a:	f04f 33ff 	movlt.w	r3, #4294967295
 800679e:	3702      	adds	r7, #2
 80067a0:	9305      	str	r3, [sp, #20]
 80067a2:	e010      	b.n	80067c6 <_svfiprintf_r+0x14a>
 80067a4:	2300      	movs	r3, #0
 80067a6:	9305      	str	r3, [sp, #20]
 80067a8:	1c78      	adds	r0, r7, #1
 80067aa:	4619      	mov	r1, r3
 80067ac:	240a      	movs	r4, #10
 80067ae:	4607      	mov	r7, r0
 80067b0:	3001      	adds	r0, #1
 80067b2:	783a      	ldrb	r2, [r7, #0]
 80067b4:	3a30      	subs	r2, #48	; 0x30
 80067b6:	2a09      	cmp	r2, #9
 80067b8:	d803      	bhi.n	80067c2 <_svfiprintf_r+0x146>
 80067ba:	fb04 2101 	mla	r1, r4, r1, r2
 80067be:	2301      	movs	r3, #1
 80067c0:	e7f5      	b.n	80067ae <_svfiprintf_r+0x132>
 80067c2:	b103      	cbz	r3, 80067c6 <_svfiprintf_r+0x14a>
 80067c4:	9105      	str	r1, [sp, #20]
 80067c6:	2203      	movs	r2, #3
 80067c8:	7839      	ldrb	r1, [r7, #0]
 80067ca:	4822      	ldr	r0, [pc, #136]	; (8006854 <_svfiprintf_r+0x1d8>)
 80067cc:	f7f9 fd28 	bl	8000220 <memchr>
 80067d0:	b140      	cbz	r0, 80067e4 <_svfiprintf_r+0x168>
 80067d2:	2340      	movs	r3, #64	; 0x40
 80067d4:	ebcb 0000 	rsb	r0, fp, r0
 80067d8:	fa03 f000 	lsl.w	r0, r3, r0
 80067dc:	9b04      	ldr	r3, [sp, #16]
 80067de:	4318      	orrs	r0, r3
 80067e0:	9004      	str	r0, [sp, #16]
 80067e2:	3701      	adds	r7, #1
 80067e4:	7839      	ldrb	r1, [r7, #0]
 80067e6:	481c      	ldr	r0, [pc, #112]	; (8006858 <_svfiprintf_r+0x1dc>)
 80067e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067ec:	2206      	movs	r2, #6
 80067ee:	1c7e      	adds	r6, r7, #1
 80067f0:	f7f9 fd16 	bl	8000220 <memchr>
 80067f4:	b188      	cbz	r0, 800681a <_svfiprintf_r+0x19e>
 80067f6:	4b19      	ldr	r3, [pc, #100]	; (800685c <_svfiprintf_r+0x1e0>)
 80067f8:	b933      	cbnz	r3, 8006808 <_svfiprintf_r+0x18c>
 80067fa:	9b03      	ldr	r3, [sp, #12]
 80067fc:	3307      	adds	r3, #7
 80067fe:	f023 0307 	bic.w	r3, r3, #7
 8006802:	3308      	adds	r3, #8
 8006804:	9303      	str	r3, [sp, #12]
 8006806:	e014      	b.n	8006832 <_svfiprintf_r+0x1b6>
 8006808:	ab03      	add	r3, sp, #12
 800680a:	9300      	str	r3, [sp, #0]
 800680c:	462a      	mov	r2, r5
 800680e:	4b14      	ldr	r3, [pc, #80]	; (8006860 <_svfiprintf_r+0x1e4>)
 8006810:	a904      	add	r1, sp, #16
 8006812:	4640      	mov	r0, r8
 8006814:	f3af 8000 	nop.w
 8006818:	e007      	b.n	800682a <_svfiprintf_r+0x1ae>
 800681a:	ab03      	add	r3, sp, #12
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	462a      	mov	r2, r5
 8006820:	4b0f      	ldr	r3, [pc, #60]	; (8006860 <_svfiprintf_r+0x1e4>)
 8006822:	a904      	add	r1, sp, #16
 8006824:	4640      	mov	r0, r8
 8006826:	f000 f893 	bl	8006950 <_printf_i>
 800682a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800682e:	4682      	mov	sl, r0
 8006830:	d003      	beq.n	800683a <_svfiprintf_r+0x1be>
 8006832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006834:	4453      	add	r3, sl
 8006836:	9309      	str	r3, [sp, #36]	; 0x24
 8006838:	e742      	b.n	80066c0 <_svfiprintf_r+0x44>
 800683a:	89ab      	ldrh	r3, [r5, #12]
 800683c:	065b      	lsls	r3, r3, #25
 800683e:	d401      	bmi.n	8006844 <_svfiprintf_r+0x1c8>
 8006840:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006842:	e001      	b.n	8006848 <_svfiprintf_r+0x1cc>
 8006844:	f04f 30ff 	mov.w	r0, #4294967295
 8006848:	b01d      	add	sp, #116	; 0x74
 800684a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800684e:	bf00      	nop
 8006850:	080074ca 	.word	0x080074ca
 8006854:	080074d0 	.word	0x080074d0
 8006858:	080074d4 	.word	0x080074d4
 800685c:	00000000 	.word	0x00000000
 8006860:	080065c9 	.word	0x080065c9

08006864 <_printf_common>:
 8006864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006868:	4691      	mov	r9, r2
 800686a:	461f      	mov	r7, r3
 800686c:	690a      	ldr	r2, [r1, #16]
 800686e:	688b      	ldr	r3, [r1, #8]
 8006870:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006874:	4293      	cmp	r3, r2
 8006876:	bfb8      	it	lt
 8006878:	4613      	movlt	r3, r2
 800687a:	f8c9 3000 	str.w	r3, [r9]
 800687e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006882:	4606      	mov	r6, r0
 8006884:	460c      	mov	r4, r1
 8006886:	b112      	cbz	r2, 800688e <_printf_common+0x2a>
 8006888:	3301      	adds	r3, #1
 800688a:	f8c9 3000 	str.w	r3, [r9]
 800688e:	6823      	ldr	r3, [r4, #0]
 8006890:	0699      	lsls	r1, r3, #26
 8006892:	bf42      	ittt	mi
 8006894:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006898:	3302      	addmi	r3, #2
 800689a:	f8c9 3000 	strmi.w	r3, [r9]
 800689e:	6825      	ldr	r5, [r4, #0]
 80068a0:	f015 0506 	ands.w	r5, r5, #6
 80068a4:	d110      	bne.n	80068c8 <_printf_common+0x64>
 80068a6:	f104 0a19 	add.w	sl, r4, #25
 80068aa:	e007      	b.n	80068bc <_printf_common+0x58>
 80068ac:	2301      	movs	r3, #1
 80068ae:	4652      	mov	r2, sl
 80068b0:	4639      	mov	r1, r7
 80068b2:	4630      	mov	r0, r6
 80068b4:	47c0      	blx	r8
 80068b6:	3001      	adds	r0, #1
 80068b8:	d01a      	beq.n	80068f0 <_printf_common+0x8c>
 80068ba:	3501      	adds	r5, #1
 80068bc:	68e3      	ldr	r3, [r4, #12]
 80068be:	f8d9 2000 	ldr.w	r2, [r9]
 80068c2:	1a9b      	subs	r3, r3, r2
 80068c4:	429d      	cmp	r5, r3
 80068c6:	dbf1      	blt.n	80068ac <_printf_common+0x48>
 80068c8:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80068cc:	6822      	ldr	r2, [r4, #0]
 80068ce:	3300      	adds	r3, #0
 80068d0:	bf18      	it	ne
 80068d2:	2301      	movne	r3, #1
 80068d4:	0692      	lsls	r2, r2, #26
 80068d6:	d50f      	bpl.n	80068f8 <_printf_common+0x94>
 80068d8:	18e1      	adds	r1, r4, r3
 80068da:	1c5a      	adds	r2, r3, #1
 80068dc:	2030      	movs	r0, #48	; 0x30
 80068de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068e2:	4422      	add	r2, r4
 80068e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068ec:	3302      	adds	r3, #2
 80068ee:	e003      	b.n	80068f8 <_printf_common+0x94>
 80068f0:	f04f 30ff 	mov.w	r0, #4294967295
 80068f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068fc:	4639      	mov	r1, r7
 80068fe:	4630      	mov	r0, r6
 8006900:	47c0      	blx	r8
 8006902:	3001      	adds	r0, #1
 8006904:	d0f4      	beq.n	80068f0 <_printf_common+0x8c>
 8006906:	6822      	ldr	r2, [r4, #0]
 8006908:	f8d9 5000 	ldr.w	r5, [r9]
 800690c:	68e3      	ldr	r3, [r4, #12]
 800690e:	f002 0206 	and.w	r2, r2, #6
 8006912:	2a04      	cmp	r2, #4
 8006914:	bf08      	it	eq
 8006916:	1b5d      	subeq	r5, r3, r5
 8006918:	6922      	ldr	r2, [r4, #16]
 800691a:	68a3      	ldr	r3, [r4, #8]
 800691c:	bf0c      	ite	eq
 800691e:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006922:	2500      	movne	r5, #0
 8006924:	4293      	cmp	r3, r2
 8006926:	bfc4      	itt	gt
 8006928:	1a9b      	subgt	r3, r3, r2
 800692a:	18ed      	addgt	r5, r5, r3
 800692c:	f04f 0900 	mov.w	r9, #0
 8006930:	341a      	adds	r4, #26
 8006932:	454d      	cmp	r5, r9
 8006934:	d009      	beq.n	800694a <_printf_common+0xe6>
 8006936:	2301      	movs	r3, #1
 8006938:	4622      	mov	r2, r4
 800693a:	4639      	mov	r1, r7
 800693c:	4630      	mov	r0, r6
 800693e:	47c0      	blx	r8
 8006940:	3001      	adds	r0, #1
 8006942:	d0d5      	beq.n	80068f0 <_printf_common+0x8c>
 8006944:	f109 0901 	add.w	r9, r9, #1
 8006948:	e7f3      	b.n	8006932 <_printf_common+0xce>
 800694a:	2000      	movs	r0, #0
 800694c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006950 <_printf_i>:
 8006950:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006954:	4617      	mov	r7, r2
 8006956:	7e0a      	ldrb	r2, [r1, #24]
 8006958:	b085      	sub	sp, #20
 800695a:	2a6e      	cmp	r2, #110	; 0x6e
 800695c:	4698      	mov	r8, r3
 800695e:	4606      	mov	r6, r0
 8006960:	460c      	mov	r4, r1
 8006962:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006964:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006968:	f000 80ae 	beq.w	8006ac8 <_printf_i+0x178>
 800696c:	d811      	bhi.n	8006992 <_printf_i+0x42>
 800696e:	2a63      	cmp	r2, #99	; 0x63
 8006970:	d022      	beq.n	80069b8 <_printf_i+0x68>
 8006972:	d809      	bhi.n	8006988 <_printf_i+0x38>
 8006974:	2a00      	cmp	r2, #0
 8006976:	f000 80bb 	beq.w	8006af0 <_printf_i+0x1a0>
 800697a:	2a58      	cmp	r2, #88	; 0x58
 800697c:	f040 80ca 	bne.w	8006b14 <_printf_i+0x1c4>
 8006980:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006984:	4983      	ldr	r1, [pc, #524]	; (8006b94 <_printf_i+0x244>)
 8006986:	e055      	b.n	8006a34 <_printf_i+0xe4>
 8006988:	2a64      	cmp	r2, #100	; 0x64
 800698a:	d01e      	beq.n	80069ca <_printf_i+0x7a>
 800698c:	2a69      	cmp	r2, #105	; 0x69
 800698e:	d01c      	beq.n	80069ca <_printf_i+0x7a>
 8006990:	e0c0      	b.n	8006b14 <_printf_i+0x1c4>
 8006992:	2a73      	cmp	r2, #115	; 0x73
 8006994:	f000 80b0 	beq.w	8006af8 <_printf_i+0x1a8>
 8006998:	d809      	bhi.n	80069ae <_printf_i+0x5e>
 800699a:	2a6f      	cmp	r2, #111	; 0x6f
 800699c:	d02e      	beq.n	80069fc <_printf_i+0xac>
 800699e:	2a70      	cmp	r2, #112	; 0x70
 80069a0:	f040 80b8 	bne.w	8006b14 <_printf_i+0x1c4>
 80069a4:	680a      	ldr	r2, [r1, #0]
 80069a6:	f042 0220 	orr.w	r2, r2, #32
 80069aa:	600a      	str	r2, [r1, #0]
 80069ac:	e03e      	b.n	8006a2c <_printf_i+0xdc>
 80069ae:	2a75      	cmp	r2, #117	; 0x75
 80069b0:	d024      	beq.n	80069fc <_printf_i+0xac>
 80069b2:	2a78      	cmp	r2, #120	; 0x78
 80069b4:	d03a      	beq.n	8006a2c <_printf_i+0xdc>
 80069b6:	e0ad      	b.n	8006b14 <_printf_i+0x1c4>
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80069be:	1d11      	adds	r1, r2, #4
 80069c0:	6019      	str	r1, [r3, #0]
 80069c2:	6813      	ldr	r3, [r2, #0]
 80069c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069c8:	e0a8      	b.n	8006b1c <_printf_i+0x1cc>
 80069ca:	6821      	ldr	r1, [r4, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	f011 0f80 	tst.w	r1, #128	; 0x80
 80069d2:	d002      	beq.n	80069da <_printf_i+0x8a>
 80069d4:	1d11      	adds	r1, r2, #4
 80069d6:	6019      	str	r1, [r3, #0]
 80069d8:	e008      	b.n	80069ec <_printf_i+0x9c>
 80069da:	f011 0f40 	tst.w	r1, #64	; 0x40
 80069de:	f102 0104 	add.w	r1, r2, #4
 80069e2:	6019      	str	r1, [r3, #0]
 80069e4:	d002      	beq.n	80069ec <_printf_i+0x9c>
 80069e6:	f9b2 3000 	ldrsh.w	r3, [r2]
 80069ea:	e000      	b.n	80069ee <_printf_i+0x9e>
 80069ec:	6813      	ldr	r3, [r2, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	da3c      	bge.n	8006a6c <_printf_i+0x11c>
 80069f2:	222d      	movs	r2, #45	; 0x2d
 80069f4:	425b      	negs	r3, r3
 80069f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80069fa:	e037      	b.n	8006a6c <_printf_i+0x11c>
 80069fc:	6821      	ldr	r1, [r4, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006a04:	d002      	beq.n	8006a0c <_printf_i+0xbc>
 8006a06:	1d11      	adds	r1, r2, #4
 8006a08:	6019      	str	r1, [r3, #0]
 8006a0a:	e007      	b.n	8006a1c <_printf_i+0xcc>
 8006a0c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006a10:	f102 0104 	add.w	r1, r2, #4
 8006a14:	6019      	str	r1, [r3, #0]
 8006a16:	d001      	beq.n	8006a1c <_printf_i+0xcc>
 8006a18:	8813      	ldrh	r3, [r2, #0]
 8006a1a:	e000      	b.n	8006a1e <_printf_i+0xce>
 8006a1c:	6813      	ldr	r3, [r2, #0]
 8006a1e:	7e22      	ldrb	r2, [r4, #24]
 8006a20:	495c      	ldr	r1, [pc, #368]	; (8006b94 <_printf_i+0x244>)
 8006a22:	2a6f      	cmp	r2, #111	; 0x6f
 8006a24:	bf14      	ite	ne
 8006a26:	220a      	movne	r2, #10
 8006a28:	2208      	moveq	r2, #8
 8006a2a:	e01b      	b.n	8006a64 <_printf_i+0x114>
 8006a2c:	2278      	movs	r2, #120	; 0x78
 8006a2e:	495a      	ldr	r1, [pc, #360]	; (8006b98 <_printf_i+0x248>)
 8006a30:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006a34:	6822      	ldr	r2, [r4, #0]
 8006a36:	6818      	ldr	r0, [r3, #0]
 8006a38:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006a3c:	f100 0504 	add.w	r5, r0, #4
 8006a40:	601d      	str	r5, [r3, #0]
 8006a42:	d103      	bne.n	8006a4c <_printf_i+0xfc>
 8006a44:	0655      	lsls	r5, r2, #25
 8006a46:	d501      	bpl.n	8006a4c <_printf_i+0xfc>
 8006a48:	8803      	ldrh	r3, [r0, #0]
 8006a4a:	e000      	b.n	8006a4e <_printf_i+0xfe>
 8006a4c:	6803      	ldr	r3, [r0, #0]
 8006a4e:	07d0      	lsls	r0, r2, #31
 8006a50:	bf44      	itt	mi
 8006a52:	f042 0220 	orrmi.w	r2, r2, #32
 8006a56:	6022      	strmi	r2, [r4, #0]
 8006a58:	b91b      	cbnz	r3, 8006a62 <_printf_i+0x112>
 8006a5a:	6822      	ldr	r2, [r4, #0]
 8006a5c:	f022 0220 	bic.w	r2, r2, #32
 8006a60:	6022      	str	r2, [r4, #0]
 8006a62:	2210      	movs	r2, #16
 8006a64:	2000      	movs	r0, #0
 8006a66:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8006a6a:	e001      	b.n	8006a70 <_printf_i+0x120>
 8006a6c:	4949      	ldr	r1, [pc, #292]	; (8006b94 <_printf_i+0x244>)
 8006a6e:	220a      	movs	r2, #10
 8006a70:	6865      	ldr	r5, [r4, #4]
 8006a72:	60a5      	str	r5, [r4, #8]
 8006a74:	2d00      	cmp	r5, #0
 8006a76:	db08      	blt.n	8006a8a <_printf_i+0x13a>
 8006a78:	6820      	ldr	r0, [r4, #0]
 8006a7a:	f020 0004 	bic.w	r0, r0, #4
 8006a7e:	6020      	str	r0, [r4, #0]
 8006a80:	b92b      	cbnz	r3, 8006a8e <_printf_i+0x13e>
 8006a82:	2d00      	cmp	r5, #0
 8006a84:	d17d      	bne.n	8006b82 <_printf_i+0x232>
 8006a86:	4675      	mov	r5, lr
 8006a88:	e00c      	b.n	8006aa4 <_printf_i+0x154>
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d079      	beq.n	8006b82 <_printf_i+0x232>
 8006a8e:	4675      	mov	r5, lr
 8006a90:	fbb3 f0f2 	udiv	r0, r3, r2
 8006a94:	fb02 3310 	mls	r3, r2, r0, r3
 8006a98:	5ccb      	ldrb	r3, [r1, r3]
 8006a9a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2800      	cmp	r0, #0
 8006aa2:	d1f5      	bne.n	8006a90 <_printf_i+0x140>
 8006aa4:	2a08      	cmp	r2, #8
 8006aa6:	d10b      	bne.n	8006ac0 <_printf_i+0x170>
 8006aa8:	6823      	ldr	r3, [r4, #0]
 8006aaa:	07da      	lsls	r2, r3, #31
 8006aac:	d508      	bpl.n	8006ac0 <_printf_i+0x170>
 8006aae:	6923      	ldr	r3, [r4, #16]
 8006ab0:	6862      	ldr	r2, [r4, #4]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	bfde      	ittt	le
 8006ab6:	2330      	movle	r3, #48	; 0x30
 8006ab8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006abc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ac0:	ebc5 030e 	rsb	r3, r5, lr
 8006ac4:	6123      	str	r3, [r4, #16]
 8006ac6:	e02e      	b.n	8006b26 <_printf_i+0x1d6>
 8006ac8:	6808      	ldr	r0, [r1, #0]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	6949      	ldr	r1, [r1, #20]
 8006ace:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006ad2:	d003      	beq.n	8006adc <_printf_i+0x18c>
 8006ad4:	1d10      	adds	r0, r2, #4
 8006ad6:	6018      	str	r0, [r3, #0]
 8006ad8:	6813      	ldr	r3, [r2, #0]
 8006ada:	e008      	b.n	8006aee <_printf_i+0x19e>
 8006adc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ae0:	f102 0004 	add.w	r0, r2, #4
 8006ae4:	6018      	str	r0, [r3, #0]
 8006ae6:	6813      	ldr	r3, [r2, #0]
 8006ae8:	d001      	beq.n	8006aee <_printf_i+0x19e>
 8006aea:	8019      	strh	r1, [r3, #0]
 8006aec:	e000      	b.n	8006af0 <_printf_i+0x1a0>
 8006aee:	6019      	str	r1, [r3, #0]
 8006af0:	2300      	movs	r3, #0
 8006af2:	6123      	str	r3, [r4, #16]
 8006af4:	4675      	mov	r5, lr
 8006af6:	e016      	b.n	8006b26 <_printf_i+0x1d6>
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	1d11      	adds	r1, r2, #4
 8006afc:	6019      	str	r1, [r3, #0]
 8006afe:	6815      	ldr	r5, [r2, #0]
 8006b00:	6862      	ldr	r2, [r4, #4]
 8006b02:	2100      	movs	r1, #0
 8006b04:	4628      	mov	r0, r5
 8006b06:	f7f9 fb8b 	bl	8000220 <memchr>
 8006b0a:	b108      	cbz	r0, 8006b10 <_printf_i+0x1c0>
 8006b0c:	1b40      	subs	r0, r0, r5
 8006b0e:	6060      	str	r0, [r4, #4]
 8006b10:	6863      	ldr	r3, [r4, #4]
 8006b12:	e004      	b.n	8006b1e <_printf_i+0x1ce>
 8006b14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b18:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	6123      	str	r3, [r4, #16]
 8006b20:	2300      	movs	r3, #0
 8006b22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b26:	f8cd 8000 	str.w	r8, [sp]
 8006b2a:	463b      	mov	r3, r7
 8006b2c:	aa03      	add	r2, sp, #12
 8006b2e:	4621      	mov	r1, r4
 8006b30:	4630      	mov	r0, r6
 8006b32:	f7ff fe97 	bl	8006864 <_printf_common>
 8006b36:	3001      	adds	r0, #1
 8006b38:	d102      	bne.n	8006b40 <_printf_i+0x1f0>
 8006b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b3e:	e026      	b.n	8006b8e <_printf_i+0x23e>
 8006b40:	6923      	ldr	r3, [r4, #16]
 8006b42:	462a      	mov	r2, r5
 8006b44:	4639      	mov	r1, r7
 8006b46:	4630      	mov	r0, r6
 8006b48:	47c0      	blx	r8
 8006b4a:	3001      	adds	r0, #1
 8006b4c:	d0f5      	beq.n	8006b3a <_printf_i+0x1ea>
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	079b      	lsls	r3, r3, #30
 8006b52:	d510      	bpl.n	8006b76 <_printf_i+0x226>
 8006b54:	2500      	movs	r5, #0
 8006b56:	f104 0919 	add.w	r9, r4, #25
 8006b5a:	e007      	b.n	8006b6c <_printf_i+0x21c>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	464a      	mov	r2, r9
 8006b60:	4639      	mov	r1, r7
 8006b62:	4630      	mov	r0, r6
 8006b64:	47c0      	blx	r8
 8006b66:	3001      	adds	r0, #1
 8006b68:	d0e7      	beq.n	8006b3a <_printf_i+0x1ea>
 8006b6a:	3501      	adds	r5, #1
 8006b6c:	68e3      	ldr	r3, [r4, #12]
 8006b6e:	9a03      	ldr	r2, [sp, #12]
 8006b70:	1a9b      	subs	r3, r3, r2
 8006b72:	429d      	cmp	r5, r3
 8006b74:	dbf2      	blt.n	8006b5c <_printf_i+0x20c>
 8006b76:	68e0      	ldr	r0, [r4, #12]
 8006b78:	9b03      	ldr	r3, [sp, #12]
 8006b7a:	4298      	cmp	r0, r3
 8006b7c:	bfb8      	it	lt
 8006b7e:	4618      	movlt	r0, r3
 8006b80:	e005      	b.n	8006b8e <_printf_i+0x23e>
 8006b82:	780b      	ldrb	r3, [r1, #0]
 8006b84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b8c:	e78a      	b.n	8006aa4 <_printf_i+0x154>
 8006b8e:	b005      	add	sp, #20
 8006b90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b94:	080074db 	.word	0x080074db
 8006b98:	080074ec 	.word	0x080074ec

08006b9c <memcpy>:
 8006b9c:	b510      	push	{r4, lr}
 8006b9e:	1e43      	subs	r3, r0, #1
 8006ba0:	440a      	add	r2, r1
 8006ba2:	4291      	cmp	r1, r2
 8006ba4:	d004      	beq.n	8006bb0 <memcpy+0x14>
 8006ba6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006baa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bae:	e7f8      	b.n	8006ba2 <memcpy+0x6>
 8006bb0:	bd10      	pop	{r4, pc}

08006bb2 <memmove>:
 8006bb2:	4288      	cmp	r0, r1
 8006bb4:	b510      	push	{r4, lr}
 8006bb6:	eb01 0302 	add.w	r3, r1, r2
 8006bba:	d801      	bhi.n	8006bc0 <memmove+0xe>
 8006bbc:	1e42      	subs	r2, r0, #1
 8006bbe:	e00b      	b.n	8006bd8 <memmove+0x26>
 8006bc0:	4298      	cmp	r0, r3
 8006bc2:	d2fb      	bcs.n	8006bbc <memmove+0xa>
 8006bc4:	1881      	adds	r1, r0, r2
 8006bc6:	1ad2      	subs	r2, r2, r3
 8006bc8:	42d3      	cmn	r3, r2
 8006bca:	d004      	beq.n	8006bd6 <memmove+0x24>
 8006bcc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bd0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006bd4:	e7f8      	b.n	8006bc8 <memmove+0x16>
 8006bd6:	bd10      	pop	{r4, pc}
 8006bd8:	4299      	cmp	r1, r3
 8006bda:	d004      	beq.n	8006be6 <memmove+0x34>
 8006bdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006be0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006be4:	e7f8      	b.n	8006bd8 <memmove+0x26>
 8006be6:	bd10      	pop	{r4, pc}

08006be8 <_free_r>:
 8006be8:	b538      	push	{r3, r4, r5, lr}
 8006bea:	4605      	mov	r5, r0
 8006bec:	2900      	cmp	r1, #0
 8006bee:	d046      	beq.n	8006c7e <_free_r+0x96>
 8006bf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bf4:	1f0c      	subs	r4, r1, #4
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	bfb8      	it	lt
 8006bfa:	18e4      	addlt	r4, r4, r3
 8006bfc:	f000 f8d6 	bl	8006dac <__malloc_lock>
 8006c00:	4a1f      	ldr	r2, [pc, #124]	; (8006c80 <_free_r+0x98>)
 8006c02:	6813      	ldr	r3, [r2, #0]
 8006c04:	4611      	mov	r1, r2
 8006c06:	b913      	cbnz	r3, 8006c0e <_free_r+0x26>
 8006c08:	6063      	str	r3, [r4, #4]
 8006c0a:	6014      	str	r4, [r2, #0]
 8006c0c:	e032      	b.n	8006c74 <_free_r+0x8c>
 8006c0e:	42a3      	cmp	r3, r4
 8006c10:	d90e      	bls.n	8006c30 <_free_r+0x48>
 8006c12:	6822      	ldr	r2, [r4, #0]
 8006c14:	18a0      	adds	r0, r4, r2
 8006c16:	4283      	cmp	r3, r0
 8006c18:	bf04      	itt	eq
 8006c1a:	6818      	ldreq	r0, [r3, #0]
 8006c1c:	685b      	ldreq	r3, [r3, #4]
 8006c1e:	6063      	str	r3, [r4, #4]
 8006c20:	bf04      	itt	eq
 8006c22:	1812      	addeq	r2, r2, r0
 8006c24:	6022      	streq	r2, [r4, #0]
 8006c26:	600c      	str	r4, [r1, #0]
 8006c28:	e024      	b.n	8006c74 <_free_r+0x8c>
 8006c2a:	42a2      	cmp	r2, r4
 8006c2c:	d803      	bhi.n	8006c36 <_free_r+0x4e>
 8006c2e:	4613      	mov	r3, r2
 8006c30:	685a      	ldr	r2, [r3, #4]
 8006c32:	2a00      	cmp	r2, #0
 8006c34:	d1f9      	bne.n	8006c2a <_free_r+0x42>
 8006c36:	6818      	ldr	r0, [r3, #0]
 8006c38:	1819      	adds	r1, r3, r0
 8006c3a:	42a1      	cmp	r1, r4
 8006c3c:	d10b      	bne.n	8006c56 <_free_r+0x6e>
 8006c3e:	6821      	ldr	r1, [r4, #0]
 8006c40:	4401      	add	r1, r0
 8006c42:	1858      	adds	r0, r3, r1
 8006c44:	4282      	cmp	r2, r0
 8006c46:	6019      	str	r1, [r3, #0]
 8006c48:	d114      	bne.n	8006c74 <_free_r+0x8c>
 8006c4a:	6810      	ldr	r0, [r2, #0]
 8006c4c:	6852      	ldr	r2, [r2, #4]
 8006c4e:	605a      	str	r2, [r3, #4]
 8006c50:	4401      	add	r1, r0
 8006c52:	6019      	str	r1, [r3, #0]
 8006c54:	e00e      	b.n	8006c74 <_free_r+0x8c>
 8006c56:	d902      	bls.n	8006c5e <_free_r+0x76>
 8006c58:	230c      	movs	r3, #12
 8006c5a:	602b      	str	r3, [r5, #0]
 8006c5c:	e00a      	b.n	8006c74 <_free_r+0x8c>
 8006c5e:	6821      	ldr	r1, [r4, #0]
 8006c60:	1860      	adds	r0, r4, r1
 8006c62:	4282      	cmp	r2, r0
 8006c64:	bf04      	itt	eq
 8006c66:	6810      	ldreq	r0, [r2, #0]
 8006c68:	6852      	ldreq	r2, [r2, #4]
 8006c6a:	6062      	str	r2, [r4, #4]
 8006c6c:	bf04      	itt	eq
 8006c6e:	1809      	addeq	r1, r1, r0
 8006c70:	6021      	streq	r1, [r4, #0]
 8006c72:	605c      	str	r4, [r3, #4]
 8006c74:	4628      	mov	r0, r5
 8006c76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c7a:	f000 b898 	b.w	8006dae <__malloc_unlock>
 8006c7e:	bd38      	pop	{r3, r4, r5, pc}
 8006c80:	20002488 	.word	0x20002488

08006c84 <_malloc_r>:
 8006c84:	b570      	push	{r4, r5, r6, lr}
 8006c86:	1ccd      	adds	r5, r1, #3
 8006c88:	f025 0503 	bic.w	r5, r5, #3
 8006c8c:	3508      	adds	r5, #8
 8006c8e:	2d0c      	cmp	r5, #12
 8006c90:	bf38      	it	cc
 8006c92:	250c      	movcc	r5, #12
 8006c94:	2d00      	cmp	r5, #0
 8006c96:	4606      	mov	r6, r0
 8006c98:	db01      	blt.n	8006c9e <_malloc_r+0x1a>
 8006c9a:	42a9      	cmp	r1, r5
 8006c9c:	d902      	bls.n	8006ca4 <_malloc_r+0x20>
 8006c9e:	230c      	movs	r3, #12
 8006ca0:	6033      	str	r3, [r6, #0]
 8006ca2:	e046      	b.n	8006d32 <_malloc_r+0xae>
 8006ca4:	f000 f882 	bl	8006dac <__malloc_lock>
 8006ca8:	4b23      	ldr	r3, [pc, #140]	; (8006d38 <_malloc_r+0xb4>)
 8006caa:	681c      	ldr	r4, [r3, #0]
 8006cac:	461a      	mov	r2, r3
 8006cae:	4621      	mov	r1, r4
 8006cb0:	b1a1      	cbz	r1, 8006cdc <_malloc_r+0x58>
 8006cb2:	680b      	ldr	r3, [r1, #0]
 8006cb4:	1b5b      	subs	r3, r3, r5
 8006cb6:	d40e      	bmi.n	8006cd6 <_malloc_r+0x52>
 8006cb8:	2b0b      	cmp	r3, #11
 8006cba:	d903      	bls.n	8006cc4 <_malloc_r+0x40>
 8006cbc:	600b      	str	r3, [r1, #0]
 8006cbe:	18cc      	adds	r4, r1, r3
 8006cc0:	50cd      	str	r5, [r1, r3]
 8006cc2:	e01e      	b.n	8006d02 <_malloc_r+0x7e>
 8006cc4:	428c      	cmp	r4, r1
 8006cc6:	bf0d      	iteet	eq
 8006cc8:	6863      	ldreq	r3, [r4, #4]
 8006cca:	684b      	ldrne	r3, [r1, #4]
 8006ccc:	6063      	strne	r3, [r4, #4]
 8006cce:	6013      	streq	r3, [r2, #0]
 8006cd0:	bf18      	it	ne
 8006cd2:	460c      	movne	r4, r1
 8006cd4:	e015      	b.n	8006d02 <_malloc_r+0x7e>
 8006cd6:	460c      	mov	r4, r1
 8006cd8:	6849      	ldr	r1, [r1, #4]
 8006cda:	e7e9      	b.n	8006cb0 <_malloc_r+0x2c>
 8006cdc:	4c17      	ldr	r4, [pc, #92]	; (8006d3c <_malloc_r+0xb8>)
 8006cde:	6823      	ldr	r3, [r4, #0]
 8006ce0:	b91b      	cbnz	r3, 8006cea <_malloc_r+0x66>
 8006ce2:	4630      	mov	r0, r6
 8006ce4:	f000 f852 	bl	8006d8c <_sbrk_r>
 8006ce8:	6020      	str	r0, [r4, #0]
 8006cea:	4629      	mov	r1, r5
 8006cec:	4630      	mov	r0, r6
 8006cee:	f000 f84d 	bl	8006d8c <_sbrk_r>
 8006cf2:	1c43      	adds	r3, r0, #1
 8006cf4:	d018      	beq.n	8006d28 <_malloc_r+0xa4>
 8006cf6:	1cc4      	adds	r4, r0, #3
 8006cf8:	f024 0403 	bic.w	r4, r4, #3
 8006cfc:	42a0      	cmp	r0, r4
 8006cfe:	d10d      	bne.n	8006d1c <_malloc_r+0x98>
 8006d00:	6025      	str	r5, [r4, #0]
 8006d02:	4630      	mov	r0, r6
 8006d04:	f000 f853 	bl	8006dae <__malloc_unlock>
 8006d08:	f104 000b 	add.w	r0, r4, #11
 8006d0c:	1d23      	adds	r3, r4, #4
 8006d0e:	f020 0007 	bic.w	r0, r0, #7
 8006d12:	1ac3      	subs	r3, r0, r3
 8006d14:	d00e      	beq.n	8006d34 <_malloc_r+0xb0>
 8006d16:	425a      	negs	r2, r3
 8006d18:	50e2      	str	r2, [r4, r3]
 8006d1a:	bd70      	pop	{r4, r5, r6, pc}
 8006d1c:	1a21      	subs	r1, r4, r0
 8006d1e:	4630      	mov	r0, r6
 8006d20:	f000 f834 	bl	8006d8c <_sbrk_r>
 8006d24:	3001      	adds	r0, #1
 8006d26:	d1eb      	bne.n	8006d00 <_malloc_r+0x7c>
 8006d28:	230c      	movs	r3, #12
 8006d2a:	6033      	str	r3, [r6, #0]
 8006d2c:	4630      	mov	r0, r6
 8006d2e:	f000 f83e 	bl	8006dae <__malloc_unlock>
 8006d32:	2000      	movs	r0, #0
 8006d34:	bd70      	pop	{r4, r5, r6, pc}
 8006d36:	bf00      	nop
 8006d38:	20002488 	.word	0x20002488
 8006d3c:	20002484 	.word	0x20002484

08006d40 <_realloc_r>:
 8006d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d42:	4607      	mov	r7, r0
 8006d44:	4615      	mov	r5, r2
 8006d46:	460e      	mov	r6, r1
 8006d48:	b921      	cbnz	r1, 8006d54 <_realloc_r+0x14>
 8006d4a:	4611      	mov	r1, r2
 8006d4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006d50:	f7ff bf98 	b.w	8006c84 <_malloc_r>
 8006d54:	b91a      	cbnz	r2, 8006d5e <_realloc_r+0x1e>
 8006d56:	f7ff ff47 	bl	8006be8 <_free_r>
 8006d5a:	4628      	mov	r0, r5
 8006d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d5e:	f000 f827 	bl	8006db0 <_malloc_usable_size_r>
 8006d62:	4285      	cmp	r5, r0
 8006d64:	d90e      	bls.n	8006d84 <_realloc_r+0x44>
 8006d66:	4629      	mov	r1, r5
 8006d68:	4638      	mov	r0, r7
 8006d6a:	f7ff ff8b 	bl	8006c84 <_malloc_r>
 8006d6e:	4604      	mov	r4, r0
 8006d70:	b150      	cbz	r0, 8006d88 <_realloc_r+0x48>
 8006d72:	4631      	mov	r1, r6
 8006d74:	462a      	mov	r2, r5
 8006d76:	f7ff ff11 	bl	8006b9c <memcpy>
 8006d7a:	4631      	mov	r1, r6
 8006d7c:	4638      	mov	r0, r7
 8006d7e:	f7ff ff33 	bl	8006be8 <_free_r>
 8006d82:	e001      	b.n	8006d88 <_realloc_r+0x48>
 8006d84:	4630      	mov	r0, r6
 8006d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d88:	4620      	mov	r0, r4
 8006d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006d8c <_sbrk_r>:
 8006d8c:	b538      	push	{r3, r4, r5, lr}
 8006d8e:	4c06      	ldr	r4, [pc, #24]	; (8006da8 <_sbrk_r+0x1c>)
 8006d90:	2300      	movs	r3, #0
 8006d92:	4605      	mov	r5, r0
 8006d94:	4608      	mov	r0, r1
 8006d96:	6023      	str	r3, [r4, #0]
 8006d98:	f000 f814 	bl	8006dc4 <_sbrk>
 8006d9c:	1c43      	adds	r3, r0, #1
 8006d9e:	d102      	bne.n	8006da6 <_sbrk_r+0x1a>
 8006da0:	6823      	ldr	r3, [r4, #0]
 8006da2:	b103      	cbz	r3, 8006da6 <_sbrk_r+0x1a>
 8006da4:	602b      	str	r3, [r5, #0]
 8006da6:	bd38      	pop	{r3, r4, r5, pc}
 8006da8:	200033e0 	.word	0x200033e0

08006dac <__malloc_lock>:
 8006dac:	4770      	bx	lr

08006dae <__malloc_unlock>:
 8006dae:	4770      	bx	lr

08006db0 <_malloc_usable_size_r>:
 8006db0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8006db4:	2800      	cmp	r0, #0
 8006db6:	bfbe      	ittt	lt
 8006db8:	1809      	addlt	r1, r1, r0
 8006dba:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 8006dbe:	18c0      	addlt	r0, r0, r3
 8006dc0:	3804      	subs	r0, #4
 8006dc2:	4770      	bx	lr

08006dc4 <_sbrk>:
 8006dc4:	4b04      	ldr	r3, [pc, #16]	; (8006dd8 <_sbrk+0x14>)
 8006dc6:	6819      	ldr	r1, [r3, #0]
 8006dc8:	4602      	mov	r2, r0
 8006dca:	b909      	cbnz	r1, 8006dd0 <_sbrk+0xc>
 8006dcc:	4903      	ldr	r1, [pc, #12]	; (8006ddc <_sbrk+0x18>)
 8006dce:	6019      	str	r1, [r3, #0]
 8006dd0:	6818      	ldr	r0, [r3, #0]
 8006dd2:	4402      	add	r2, r0
 8006dd4:	601a      	str	r2, [r3, #0]
 8006dd6:	4770      	bx	lr
 8006dd8:	2000248c 	.word	0x2000248c
 8006ddc:	200033e4 	.word	0x200033e4

08006de0 <_init>:
 8006de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de2:	bf00      	nop
 8006de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006de6:	bc08      	pop	{r3}
 8006de8:	469e      	mov	lr, r3
 8006dea:	4770      	bx	lr

08006dec <_fini>:
 8006dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dee:	bf00      	nop
 8006df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006df2:	bc08      	pop	{r3}
 8006df4:	469e      	mov	lr, r3
 8006df6:	4770      	bx	lr


C:\Users\Jonathan\Desktop\micromouse\mm747\Debug\mm747.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004050  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  08004220  08004220  00014220  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080044b8  080044b8  000144b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080044bc  080044bc  000144bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  20000000  080044c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000005d0  2000006c  0800452c  0002006c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000063c  0800452c  0002063c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
  9 .debug_line   00006680  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00012612  00000000  00000000  0002671c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000258b  00000000  00000000  00038d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c08  00000000  00000000  0003b2c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001318  00000000  00000000  0003bec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000095dc  00000000  00000000  0003d1e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000044cf  00000000  00000000  000467bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0004ac8b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000026f4  00000000  00000000  0004ad0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004208 	.word	0x08004208

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08004208 	.word	0x08004208

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80002c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80002c6:	e003      	b.n	80002d0 <LoopCopyDataInit>

080002c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80002c8:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80002ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80002cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80002ce:	3104      	adds	r1, #4

080002d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80002d0:	480b      	ldr	r0, [pc, #44]	; (8000300 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80002d2:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80002d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80002d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80002d8:	d3f6      	bcc.n	80002c8 <CopyDataInit>
  ldr  r2, =_sbss
 80002da:	4a0b      	ldr	r2, [pc, #44]	; (8000308 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80002dc:	e002      	b.n	80002e4 <LoopFillZerobss>

080002de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80002de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80002e0:	f842 3b04 	str.w	r3, [r2], #4

080002e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80002e4:	4b09      	ldr	r3, [pc, #36]	; (800030c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80002e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80002e8:	d3f9      	bcc.n	80002de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80002ea:	f003 fb11 	bl	8003910 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002ee:	f003 fb35 	bl	800395c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002f2:	f002 fd65 	bl	8002dc0 <main>
  bx  lr    
 80002f6:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002f8:	20050000 	.word	0x20050000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80002fc:	080044c0 	.word	0x080044c0
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000300:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000304:	2000006c 	.word	0x2000006c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000308:	2000006c 	.word	0x2000006c
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800030c:	2000063c 	.word	0x2000063c

08000310 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000310:	e7fe      	b.n	8000310 <ADC_IRQHandler>
	...

08000314 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000314:	4b08      	ldr	r3, [pc, #32]	; (8000338 <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000316:	b510      	push	{r4, lr}
 8000318:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 800031a:	6818      	ldr	r0, [r3, #0]
 800031c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000320:	fbb0 f0f3 	udiv	r0, r0, r3
 8000324:	f000 fac2 	bl	80008ac <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000328:	2200      	movs	r2, #0
 800032a:	4621      	mov	r1, r4
 800032c:	f04f 30ff 	mov.w	r0, #4294967295
 8000330:	f000 fa78 	bl	8000824 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000334:	2000      	movs	r0, #0
 8000336:	bd10      	pop	{r4, pc}
 8000338:	20000004 	.word	0x20000004

0800033c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800033c:	b508      	push	{r3, lr}
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800033e:	2003      	movs	r0, #3
 8000340:	f000 fa5e 	bl	8000800 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000344:	2000      	movs	r0, #0
 8000346:	f7ff ffe5 	bl	8000314 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800034a:	f003 f8f1 	bl	8003530 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 800034e:	2000      	movs	r0, #0
 8000350:	bd08      	pop	{r3, pc}
	...

08000354 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000354:	4a02      	ldr	r2, [pc, #8]	; (8000360 <HAL_IncTick+0xc>)
 8000356:	6813      	ldr	r3, [r2, #0]
 8000358:	3301      	adds	r3, #1
 800035a:	6013      	str	r3, [r2, #0]
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	20000150 	.word	0x20000150

08000364 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000364:	4b01      	ldr	r3, [pc, #4]	; (800036c <HAL_GetTick+0x8>)
 8000366:	6818      	ldr	r0, [r3, #0]
}
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	20000150 	.word	0x20000150

08000370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000370:	b513      	push	{r0, r1, r4, lr}
 8000372:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8000374:	f7ff fff6 	bl	8000364 <HAL_GetTick>
 8000378:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800037a:	f7ff fff3 	bl	8000364 <HAL_GetTick>
 800037e:	9b01      	ldr	r3, [sp, #4]
 8000380:	1b00      	subs	r0, r0, r4
 8000382:	4298      	cmp	r0, r3
 8000384:	d3f9      	bcc.n	800037a <HAL_Delay+0xa>
  {
  }
}
 8000386:	b002      	add	sp, #8
 8000388:	bd10      	pop	{r4, pc}
	...

0800038c <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800038c:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800038e:	4604      	mov	r4, r0
 8000390:	2800      	cmp	r0, #0
 8000392:	f000 809e 	beq.w	80004d2 <HAL_ADC_Init+0x146>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000396:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000398:	b923      	cbnz	r3, 80003a4 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800039a:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800039c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80003a0:	f003 f8f6 	bl	8003590 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80003a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80003a6:	06db      	lsls	r3, r3, #27
 80003a8:	f100 808e 	bmi.w	80004c8 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80003ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80003ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80003b2:	f023 0302 	bic.w	r3, r3, #2
 80003b6:	f043 0302 	orr.w	r3, r3, #2
 80003ba:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80003bc:	4b46      	ldr	r3, [pc, #280]	; (80004d8 <HAL_ADC_Init+0x14c>)
 80003be:	685a      	ldr	r2, [r3, #4]
 80003c0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80003c4:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80003c6:	6859      	ldr	r1, [r3, #4]
 80003c8:	6862      	ldr	r2, [r4, #4]
 80003ca:	430a      	orrs	r2, r1
 80003cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80003ce:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80003d0:	6921      	ldr	r1, [r4, #16]
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80003d2:	685a      	ldr	r2, [r3, #4]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80003d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80003d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80003da:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80003dc:	685a      	ldr	r2, [r3, #4]
 80003de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80003e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80003e4:	685a      	ldr	r2, [r3, #4]
 80003e6:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80003ea:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80003ec:	68a2      	ldr	r2, [r4, #8]
 80003ee:	6859      	ldr	r1, [r3, #4]
 80003f0:	430a      	orrs	r2, r1
 80003f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80003f4:	689a      	ldr	r2, [r3, #8]
 80003f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80003fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80003fc:	68e2      	ldr	r2, [r4, #12]
 80003fe:	6899      	ldr	r1, [r3, #8]
 8000400:	430a      	orrs	r2, r1
 8000402:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000404:	4a35      	ldr	r2, [pc, #212]	; (80004dc <HAL_ADC_Init+0x150>)
 8000406:	4290      	cmp	r0, r2
 8000408:	d00e      	beq.n	8000428 <HAL_ADC_Init+0x9c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800040a:	6899      	ldr	r1, [r3, #8]
 800040c:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000410:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000412:	689a      	ldr	r2, [r3, #8]
 8000414:	4302      	orrs	r2, r0
 8000416:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000418:	689a      	ldr	r2, [r3, #8]
 800041a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800041e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000420:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000422:	6899      	ldr	r1, [r3, #8]
 8000424:	430a      	orrs	r2, r1
 8000426:	e006      	b.n	8000436 <HAL_ADC_Init+0xaa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000428:	689a      	ldr	r2, [r3, #8]
 800042a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800042e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000430:	689a      	ldr	r2, [r3, #8]
 8000432:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000436:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000438:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800043a:	69a1      	ldr	r1, [r4, #24]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800043c:	f022 0202 	bic.w	r2, r2, #2
 8000440:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000442:	689a      	ldr	r2, [r3, #8]
 8000444:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000448:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800044a:	6a22      	ldr	r2, [r4, #32]
 800044c:	b19a      	cbz	r2, 8000476 <HAL_ADC_Init+0xea>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800044e:	685a      	ldr	r2, [r3, #4]
 8000450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000454:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000456:	685a      	ldr	r2, [r3, #4]
 8000458:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800045c:	605a      	str	r2, [r3, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800045e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000462:	fa92 f2a2 	rbit	r2, r2
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000466:	fab2 f182 	clz	r1, r2
 800046a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800046c:	6858      	ldr	r0, [r3, #4]
 800046e:	3a01      	subs	r2, #1
 8000470:	408a      	lsls	r2, r1
 8000472:	4302      	orrs	r2, r0
 8000474:	e002      	b.n	800047c <HAL_ADC_Init+0xf0>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000476:	685a      	ldr	r2, [r3, #4]
 8000478:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800047c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC parameters */
    ADC_Init(hadc);
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800047e:	2000      	movs	r0, #0
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000482:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000486:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000488:	69e2      	ldr	r2, [r4, #28]
 800048a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800048c:	3a01      	subs	r2, #1
 800048e:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000492:	6b21      	ldr	r1, [r4, #48]	; 0x30
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000494:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000496:	689a      	ldr	r2, [r3, #8]
 8000498:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800049c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800049e:	689a      	ldr	r2, [r3, #8]
 80004a0:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80004a4:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80004a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80004a8:	689a      	ldr	r2, [r3, #8]
 80004aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80004ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80004b0:	689a      	ldr	r2, [r3, #8]
 80004b2:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80004b6:	609a      	str	r2, [r3, #8]
    
    /* Set ADC parameters */
    ADC_Init(hadc);
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80004b8:	6460      	str	r0, [r4, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80004ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80004bc:	f023 0303 	bic.w	r3, r3, #3
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	6423      	str	r3, [r4, #64]	; 0x40
 80004c6:	e000      	b.n	80004ca <HAL_ADC_Init+0x13e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80004c8:	2001      	movs	r0, #1
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80004ca:	2300      	movs	r3, #0
 80004cc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80004d0:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 80004d2:	2001      	movs	r0, #1
  /* Release Lock */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	bf00      	nop
 80004d8:	40012300 	.word	0x40012300
 80004dc:	0f000001 	.word	0x0f000001

080004e0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80004e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80004e2:	4613      	mov	r3, r2
  __IO uint32_t counter = 0;
 80004e4:	2200      	movs	r2, #0
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80004e6:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 80004e8:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80004ea:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80004ee:	2a01      	cmp	r2, #1
 80004f0:	d064      	beq.n	80005bc <HAL_ADC_Start_DMA+0xdc>
 80004f2:	2201      	movs	r2, #1
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80004f4:	6805      	ldr	r5, [r0, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80004f6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80004fa:	68aa      	ldr	r2, [r5, #8]
 80004fc:	07d2      	lsls	r2, r2, #31
 80004fe:	d503      	bpl.n	8000508 <HAL_ADC_Start_DMA+0x28>
      counter--;
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000500:	68aa      	ldr	r2, [r5, #8]
 8000502:	07d0      	lsls	r0, r2, #31
 8000504:	d413      	bmi.n	800052e <HAL_ADC_Start_DMA+0x4e>
 8000506:	e04e      	b.n	80005a6 <HAL_ADC_Start_DMA+0xc6>
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000508:	68aa      	ldr	r2, [r5, #8]
 800050a:	f042 0201 	orr.w	r2, r2, #1
 800050e:	60aa      	str	r2, [r5, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000510:	4a2c      	ldr	r2, [pc, #176]	; (80005c4 <HAL_ADC_Start_DMA+0xe4>)
 8000512:	6810      	ldr	r0, [r2, #0]
 8000514:	4a2c      	ldr	r2, [pc, #176]	; (80005c8 <HAL_ADC_Start_DMA+0xe8>)
 8000516:	fbb0 f0f2 	udiv	r0, r0, r2
 800051a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800051e:	9001      	str	r0, [sp, #4]
    while(counter != 0)
 8000520:	9a01      	ldr	r2, [sp, #4]
 8000522:	2a00      	cmp	r2, #0
 8000524:	d0ec      	beq.n	8000500 <HAL_ADC_Start_DMA+0x20>
    {
      counter--;
 8000526:	9a01      	ldr	r2, [sp, #4]
 8000528:	3a01      	subs	r2, #1
 800052a:	9201      	str	r2, [sp, #4]
 800052c:	e7f8      	b.n	8000520 <HAL_ADC_Start_DMA+0x40>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800052e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000530:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8000534:	f020 0001 	bic.w	r0, r0, #1
 8000538:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800053c:	6420      	str	r0, [r4, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800053e:	686a      	ldr	r2, [r5, #4]
 8000540:	0552      	lsls	r2, r2, #21
 8000542:	d505      	bpl.n	8000550 <HAL_ADC_Start_DMA+0x70>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000544:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000546:	f420 5040 	bic.w	r0, r0, #12288	; 0x3000
 800054a:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800054e:	6420      	str	r0, [r4, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000550:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000552:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000556:	d002      	beq.n	800055e <HAL_ADC_Start_DMA+0x7e>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000558:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800055a:	f022 0206 	bic.w	r2, r2, #6
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800055e:	6462      	str	r2, [r4, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000560:	2200      	movs	r2, #0

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000562:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000564:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000568:	4a18      	ldr	r2, [pc, #96]	; (80005cc <HAL_ADC_Start_DMA+0xec>)
 800056a:	63c2      	str	r2, [r0, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800056c:	4a18      	ldr	r2, [pc, #96]	; (80005d0 <HAL_ADC_Start_DMA+0xf0>)
 800056e:	6402      	str	r2, [r0, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000570:	4a18      	ldr	r2, [pc, #96]	; (80005d4 <HAL_ADC_Start_DMA+0xf4>)
 8000572:	64c2      	str	r2, [r0, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000574:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000578:	602a      	str	r2, [r5, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800057a:	686a      	ldr	r2, [r5, #4]
 800057c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000580:	606a      	str	r2, [r5, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000582:	68aa      	ldr	r2, [r5, #8]
 8000584:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000588:	60aa      	str	r2, [r5, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800058a:	460a      	mov	r2, r1
 800058c:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 8000590:	f000 fa40 	bl	8000a14 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8000594:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <HAL_ADC_Start_DMA+0xf8>)
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	f013 0f1f 	tst.w	r3, #31
 800059c:	6823      	ldr	r3, [r4, #0]
 800059e:	d004      	beq.n	80005aa <HAL_ADC_Start_DMA+0xca>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80005a0:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <HAL_ADC_Start_DMA+0xfc>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d001      	beq.n	80005aa <HAL_ADC_Start_DMA+0xca>
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80005a6:	2000      	movs	r0, #0
 80005a8:	e009      	b.n	80005be <HAL_ADC_Start_DMA+0xde>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80005aa:	6898      	ldr	r0, [r3, #8]
 80005ac:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80005b0:	d1f9      	bne.n	80005a6 <HAL_ADC_Start_DMA+0xc6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80005b2:	689a      	ldr	r2, [r3, #8]
 80005b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	e000      	b.n	80005be <HAL_ADC_Start_DMA+0xde>
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80005bc:	2002      	movs	r0, #2
    }
  }
  
  /* Return function status */
  return HAL_OK;
}
 80005be:	b003      	add	sp, #12
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop
 80005c4:	20000004 	.word	0x20000004
 80005c8:	000f4240 	.word	0x000f4240
 80005cc:	0800063b 	.word	0x0800063b
 80005d0:	0800069d 	.word	0x0800069d
 80005d4:	080006a9 	.word	0x080006a9
 80005d8:	40012300 	.word	0x40012300
 80005dc:	40012000 	.word	0x40012000

080005e0 <HAL_ADC_Stop_DMA>:
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80005e0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80005e4:	2b01      	cmp	r3, #1
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80005e6:	b510      	push	{r4, lr}
 80005e8:	4604      	mov	r4, r0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80005ea:	d024      	beq.n	8000636 <HAL_ADC_Stop_DMA+0x56>
 80005ec:	2301      	movs	r3, #1
 80005ee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80005f2:	6803      	ldr	r3, [r0, #0]
 80005f4:	689a      	ldr	r2, [r3, #8]
 80005f6:	f022 0201 	bic.w	r2, r2, #1
 80005fa:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80005fc:	689a      	ldr	r2, [r3, #8]
 80005fe:	07d2      	lsls	r2, r2, #31
 8000600:	d414      	bmi.n	800062c <HAL_ADC_Stop_DMA+0x4c>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8000602:	689a      	ldr	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8000604:	6b80      	ldr	r0, [r0, #56]	; 0x38
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8000606:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800060a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800060c:	f000 fa41 	bl	8000a92 <HAL_DMA_Abort>
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8000610:	6822      	ldr	r2, [r4, #0]
 8000612:	6853      	ldr	r3, [r2, #4]
 8000614:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000618:	6053      	str	r3, [r2, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800061a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800061c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000620:	f023 0301 	bic.w	r3, r3, #1
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6423      	str	r3, [r4, #64]	; 0x40
 800062a:	e000      	b.n	800062e <HAL_ADC_Stop_DMA+0x4e>
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800062c:	2000      	movs	r0, #0
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800062e:	2300      	movs	r3, #0
 8000630:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8000634:	bd10      	pop	{r4, pc}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000636:	2002      	movs	r0, #2
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
}
 8000638:	bd10      	pop	{r4, pc}

0800063a <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800063a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800063c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800063e:	f012 0f50 	tst.w	r2, #80	; 0x50
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000642:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000644:	d124      	bne.n	8000690 <ADC_DMAConvCplt+0x56>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000646:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800064c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	6891      	ldr	r1, [r2, #8]
 8000652:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8000656:	d117      	bne.n	8000688 <ADC_DMAConvCplt+0x4e>
 8000658:	6999      	ldr	r1, [r3, #24]
 800065a:	b9a9      	cbnz	r1, 8000688 <ADC_DMAConvCplt+0x4e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800065c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800065e:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 8000662:	d002      	beq.n	800066a <ADC_DMAConvCplt+0x30>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000664:	6891      	ldr	r1, [r2, #8]
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000666:	0549      	lsls	r1, r1, #21
 8000668:	d40e      	bmi.n	8000688 <ADC_DMAConvCplt+0x4e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800066a:	6851      	ldr	r1, [r2, #4]
 800066c:	f021 0120 	bic.w	r1, r1, #32
 8000670:	6051      	str	r1, [r2, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000672:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000674:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000678:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800067a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800067c:	04d2      	lsls	r2, r2, #19
 800067e:	d403      	bmi.n	8000688 <ADC_DMAConvCplt+0x4e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000680:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000682:	f042 0201 	orr.w	r2, r2, #1
 8000686:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 8000688:	4618      	mov	r0, r3
 800068a:	f002 fadb 	bl	8002c44 <HAL_ADC_ConvCpltCallback>
 800068e:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  }
}
 8000692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_ADC_ConvCpltCallback(hadc);
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000698:	4718      	bx	r3

0800069a <HAL_ADC_ConvHalfCpltCallback>:
 800069a:	4770      	bx	lr

0800069c <ADC_DMAHalfConvCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800069c:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* Conversion complete callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800069e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80006a0:	f7ff fffb 	bl	800069a <HAL_ADC_ConvHalfCpltCallback>
 80006a4:	bd08      	pop	{r3, pc}

080006a6 <HAL_ADC_ErrorCallback>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80006a6:	4770      	bx	lr

080006a8 <ADC_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80006a8:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80006aa:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80006ac:	2340      	movs	r3, #64	; 0x40
 80006ae:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80006b0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80006b2:	f043 0304 	orr.w	r3, r3, #4
 80006b6:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_ADC_ErrorCallback(hadc); 
 80006b8:	f7ff fff5 	bl	80006a6 <HAL_ADC_ErrorCallback>
 80006bc:	bd08      	pop	{r3, pc}
	...

080006c0 <HAL_ADC_ConfigChannel>:
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  __IO uint32_t counter = 0;
 80006c0:	2300      	movs	r3, #0
  *         the configuration information for the specified ADC.
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80006c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 80006c4:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006c6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d070      	beq.n	80007b0 <HAL_ADC_ConfigChannel+0xf0>
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 80006ce:	680d      	ldr	r5, [r1, #0]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006d0:	2301      	movs	r3, #1
 80006d2:	6804      	ldr	r4, [r0, #0]
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 80006d4:	2d09      	cmp	r5, #9
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006d6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80006da:	b2ae      	uxth	r6, r5
 80006dc:	688f      	ldr	r7, [r1, #8]
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 80006de:	d917      	bls.n	8000710 <HAL_ADC_ConfigChannel+0x50>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80006e0:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 80006e4:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 80006e8:	f1a2 031e 	sub.w	r3, r2, #30
 80006ec:	2207      	movs	r2, #7
 80006ee:	409a      	lsls	r2, r3
 80006f0:	ea2e 0202 	bic.w	r2, lr, r2
 80006f4:	60e2      	str	r2, [r4, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80006f6:	4a3d      	ldr	r2, [pc, #244]	; (80007ec <HAL_ADC_ConfigChannel+0x12c>)
 80006f8:	4295      	cmp	r5, r2
 80006fa:	d103      	bne.n	8000704 <HAL_ADC_ConfigChannel+0x44>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80006fc:	68e3      	ldr	r3, [r4, #12]
 80006fe:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 8000702:	e003      	b.n	800070c <HAL_ADC_ConfigChannel+0x4c>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000704:	68e2      	ldr	r2, [r4, #12]
 8000706:	fa07 f303 	lsl.w	r3, r7, r3
 800070a:	4313      	orrs	r3, r2
 800070c:	60e3      	str	r3, [r4, #12]
 800070e:	e00e      	b.n	800072e <HAL_ADC_ConfigChannel+0x6e>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000710:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000714:	f04f 0e07 	mov.w	lr, #7
 8000718:	6922      	ldr	r2, [r4, #16]
 800071a:	fa0e fe03 	lsl.w	lr, lr, r3
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800071e:	fa07 f303 	lsl.w	r3, r7, r3
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000722:	ea22 020e 	bic.w	r2, r2, lr
 8000726:	6122      	str	r2, [r4, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000728:	6922      	ldr	r2, [r4, #16]
 800072a:	4313      	orrs	r3, r2
 800072c:	6123      	str	r3, [r4, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800072e:	684b      	ldr	r3, [r1, #4]
 8000730:	2b06      	cmp	r3, #6
 8000732:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8000736:	d80d      	bhi.n	8000754 <HAL_ADC_ConfigChannel+0x94>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000738:	4413      	add	r3, r2
 800073a:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800073c:	1f59      	subs	r1, r3, #5
 800073e:	231f      	movs	r3, #31
 8000740:	408b      	lsls	r3, r1
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000742:	fa06 f101 	lsl.w	r1, r6, r1
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000746:	ea27 0303 	bic.w	r3, r7, r3
 800074a:	6363      	str	r3, [r4, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800074c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800074e:	4311      	orrs	r1, r2
 8000750:	6361      	str	r1, [r4, #52]	; 0x34
 8000752:	e01d      	b.n	8000790 <HAL_ADC_ConfigChannel+0xd0>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000754:	2b0c      	cmp	r3, #12
 8000756:	d80e      	bhi.n	8000776 <HAL_ADC_ConfigChannel+0xb6>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000758:	4413      	add	r3, r2
 800075a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800075c:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000760:	231f      	movs	r3, #31
 8000762:	4093      	lsls	r3, r2
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000764:	fa06 f202 	lsl.w	r2, r6, r2
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000768:	ea21 0303 	bic.w	r3, r1, r3
 800076c:	6323      	str	r3, [r4, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800076e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000770:	431a      	orrs	r2, r3
 8000772:	6322      	str	r2, [r4, #48]	; 0x30
 8000774:	e00c      	b.n	8000790 <HAL_ADC_ConfigChannel+0xd0>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000776:	4413      	add	r3, r2
 8000778:	221f      	movs	r2, #31
 800077a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800077c:	3b41      	subs	r3, #65	; 0x41
 800077e:	409a      	lsls	r2, r3
 8000780:	ea27 0202 	bic.w	r2, r7, r2
 8000784:	62e2      	str	r2, [r4, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000786:	fa06 f203 	lsl.w	r2, r6, r3
 800078a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800078c:	430a      	orrs	r2, r1
 800078e:	62e2      	str	r2, [r4, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000790:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <HAL_ADC_ConfigChannel+0x130>)
 8000792:	429c      	cmp	r4, r3
 8000794:	d004      	beq.n	80007a0 <HAL_ADC_ConfigChannel+0xe0>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000796:	2300      	movs	r3, #0
 8000798:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800079c:	4618      	mov	r0, r3
 800079e:	e023      	b.n	80007e8 <HAL_ADC_ConfigChannel+0x128>
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80007a0:	2d12      	cmp	r5, #18
 80007a2:	d107      	bne.n	80007b4 <HAL_ADC_ConfigChannel+0xf4>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80007a4:	4a13      	ldr	r2, [pc, #76]	; (80007f4 <HAL_ADC_ConfigChannel+0x134>)
 80007a6:	6853      	ldr	r3, [r2, #4]
 80007a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007ac:	6053      	str	r3, [r2, #4]
 80007ae:	e7f2      	b.n	8000796 <HAL_ADC_ConfigChannel+0xd6>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80007b0:	2002      	movs	r0, #2
 80007b2:	e019      	b.n	80007e8 <HAL_ADC_ConfigChannel+0x128>
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80007b4:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <HAL_ADC_ConfigChannel+0x12c>)
 80007b6:	429d      	cmp	r5, r3
 80007b8:	d001      	beq.n	80007be <HAL_ADC_ConfigChannel+0xfe>
 80007ba:	2d11      	cmp	r5, #17
 80007bc:	d1eb      	bne.n	8000796 <HAL_ADC_ConfigChannel+0xd6>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80007be:	490d      	ldr	r1, [pc, #52]	; (80007f4 <HAL_ADC_ConfigChannel+0x134>)

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80007c0:	429d      	cmp	r5, r3
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80007c2:	684a      	ldr	r2, [r1, #4]
 80007c4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80007c8:	604a      	str	r2, [r1, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80007ca:	d1e4      	bne.n	8000796 <HAL_ADC_ConfigChannel+0xd6>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <HAL_ADC_ConfigChannel+0x138>)
 80007ce:	4a0b      	ldr	r2, [pc, #44]	; (80007fc <HAL_ADC_ConfigChannel+0x13c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80007d6:	230a      	movs	r3, #10
 80007d8:	4353      	muls	r3, r2
      while(counter != 0)
      {
        counter--;
 80007da:	9301      	str	r3, [sp, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
      while(counter != 0)
 80007dc:	9b01      	ldr	r3, [sp, #4]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d0d9      	beq.n	8000796 <HAL_ADC_ConfigChannel+0xd6>
      {
        counter--;
 80007e2:	9b01      	ldr	r3, [sp, #4]
 80007e4:	3b01      	subs	r3, #1
 80007e6:	e7f8      	b.n	80007da <HAL_ADC_ConfigChannel+0x11a>
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return HAL_OK;
}
 80007e8:	b003      	add	sp, #12
 80007ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ec:	10000012 	.word	0x10000012
 80007f0:	40012000 	.word	0x40012000
 80007f4:	40012300 	.word	0x40012300
 80007f8:	20000004 	.word	0x20000004
 80007fc:	000f4240 	.word	0x000f4240

08000800 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000800:	4a07      	ldr	r2, [pc, #28]	; (8000820 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000802:	0200      	lsls	r0, r0, #8
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000804:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000806:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800080a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800080e:	041b      	lsls	r3, r3, #16
 8000810:	0c1b      	lsrs	r3, r3, #16
 8000812:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800081a:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800081c:	60d3      	str	r3, [r2, #12]
 800081e:	4770      	bx	lr
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000824:	4b19      	ldr	r3, [pc, #100]	; (800088c <HAL_NVIC_SetPriority+0x68>)
 8000826:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000828:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800082c:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800082e:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000832:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000834:	2c04      	cmp	r4, #4
 8000836:	bf28      	it	cs
 8000838:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800083a:	2d06      	cmp	r5, #6

  return (
 800083c:	f04f 0501 	mov.w	r5, #1
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000840:	bf8c      	ite	hi
 8000842:	3b03      	subhi	r3, #3
 8000844:	2300      	movls	r3, #0

  return (
 8000846:	fa05 f404 	lsl.w	r4, r5, r4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800084a:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800084c:	f104 34ff 	add.w	r4, r4, #4294967295
 8000850:	ea04 0401 	and.w	r4, r4, r1
 8000854:	fa04 f403 	lsl.w	r4, r4, r3
 8000858:	fa05 f303 	lsl.w	r3, r5, r3
 800085c:	f103 33ff 	add.w	r3, r3, #4294967295
 8000860:	ea02 0203 	and.w	r2, r2, r3
 8000864:	ea42 0204 	orr.w	r2, r2, r4
 8000868:	ea4f 1202 	mov.w	r2, r2, lsl #4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800086c:	da05      	bge.n	800087a <HAL_NVIC_SetPriority+0x56>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800086e:	f000 000f 	and.w	r0, r0, #15
 8000872:	b2d2      	uxtb	r2, r2
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_NVIC_SetPriority+0x6c>)
 8000876:	541a      	strb	r2, [r3, r0]
 8000878:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800087a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800087e:	b2d2      	uxtb	r2, r2
 8000880:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000884:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000888:	bd30      	pop	{r4, r5, pc}
 800088a:	bf00      	nop
 800088c:	e000ed00 	.word	0xe000ed00
 8000890:	e000ed14 	.word	0xe000ed14

08000894 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000894:	0942      	lsrs	r2, r0, #5
 8000896:	2301      	movs	r3, #1
 8000898:	f000 001f 	and.w	r0, r0, #31
 800089c:	fa03 f000 	lsl.w	r0, r3, r0
 80008a0:	4b01      	ldr	r3, [pc, #4]	; (80008a8 <HAL_NVIC_EnableIRQ+0x14>)
 80008a2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80008a6:	4770      	bx	lr
 80008a8:	e000e100 	.word	0xe000e100

080008ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008ac:	3801      	subs	r0, #1
 80008ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80008b2:	d20a      	bcs.n	80008ca <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b6:	21f0      	movs	r1, #240	; 0xf0
 80008b8:	4a06      	ldr	r2, [pc, #24]	; (80008d4 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ba:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008bc:	2000      	movs	r0, #0
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008be:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008c2:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008c4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000e010 	.word	0xe000e010
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80008d8:	4b04      	ldr	r3, [pc, #16]	; (80008ec <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80008da:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	bf0c      	ite	eq
 80008e0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80008e4:	f022 0204 	bicne.w	r2, r2, #4
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	4770      	bx	lr
 80008ec:	e000e010 	.word	0xe000e010

080008f0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80008f0:	4770      	bx	lr

080008f2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80008f2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80008f4:	f7ff fffc 	bl	80008f0 <HAL_SYSTICK_Callback>
 80008f8:	bd08      	pop	{r3, pc}
	...

080008fc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80008fc:	6803      	ldr	r3, [r0, #0]
 80008fe:	2118      	movs	r1, #24
 8000900:	b2da      	uxtb	r2, r3
 8000902:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000906:	3a10      	subs	r2, #16
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000908:	f023 0303 	bic.w	r3, r3, #3
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800090c:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000910:	4904      	ldr	r1, [pc, #16]	; (8000924 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000912:	2a03      	cmp	r2, #3
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000914:	5c89      	ldrb	r1, [r1, r2]
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000916:	bf88      	it	hi
 8000918:	3304      	addhi	r3, #4
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800091a:	65c1      	str	r1, [r0, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800091c:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 800091e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	08004220 	.word	0x08004220

08000928 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000928:	b570      	push	{r4, r5, r6, lr}
 800092a:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 800092c:	f7ff fd1a 	bl	8000364 <HAL_GetTick>
 8000930:	4605      	mov	r5, r0
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000932:	2c00      	cmp	r4, #0
 8000934:	d064      	beq.n	8000a00 <HAL_DMA_Init+0xd8>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000936:	2300      	movs	r3, #0

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000938:	6822      	ldr	r2, [r4, #0]
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800093a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800093e:	2302      	movs	r3, #2
 8000940:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000944:	6813      	ldr	r3, [r2, #0]
 8000946:	f023 0301 	bic.w	r3, r3, #1
 800094a:	6013      	str	r3, [r2, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800094c:	6821      	ldr	r1, [r4, #0]
 800094e:	680b      	ldr	r3, [r1, #0]
 8000950:	07d8      	lsls	r0, r3, #31
 8000952:	d508      	bpl.n	8000966 <HAL_DMA_Init+0x3e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000954:	f7ff fd06 	bl	8000364 <HAL_GetTick>
 8000958:	1b40      	subs	r0, r0, r5
 800095a:	2805      	cmp	r0, #5
 800095c:	d9f6      	bls.n	800094c <HAL_DMA_Init+0x24>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800095e:	2320      	movs	r3, #32
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000960:	2003      	movs	r0, #3
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000962:	6563      	str	r3, [r4, #84]	; 0x54
 8000964:	e051      	b.n	8000a0a <HAL_DMA_Init+0xe2>
      return HAL_TIMEOUT;
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000966:	680b      	ldr	r3, [r1, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000968:	4a29      	ldr	r2, [pc, #164]	; (8000a10 <HAL_DMA_Init+0xe8>)
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800096a:	6865      	ldr	r5, [r4, #4]
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800096c:	401a      	ands	r2, r3
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800096e:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000970:	69a0      	ldr	r0, [r4, #24]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000972:	431d      	orrs	r5, r3
 8000974:	68e3      	ldr	r3, [r4, #12]
 8000976:	431d      	orrs	r5, r3
 8000978:	6923      	ldr	r3, [r4, #16]
 800097a:	431d      	orrs	r5, r3
 800097c:	6963      	ldr	r3, [r4, #20]
 800097e:	432b      	orrs	r3, r5
 8000980:	69e5      	ldr	r5, [r4, #28]
 8000982:	4303      	orrs	r3, r0
 8000984:	432b      	orrs	r3, r5
 8000986:	6a25      	ldr	r5, [r4, #32]
 8000988:	432b      	orrs	r3, r5
 800098a:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800098c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800098e:	2a04      	cmp	r2, #4
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000990:	bf01      	itttt	eq
 8000992:	6b25      	ldreq	r5, [r4, #48]	; 0x30
 8000994:	6ae6      	ldreq	r6, [r4, #44]	; 0x2c
 8000996:	4335      	orreq	r5, r6
 8000998:	432b      	orreq	r3, r5

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800099a:	2a04      	cmp	r2, #4
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800099c:	600b      	str	r3, [r1, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800099e:	694b      	ldr	r3, [r1, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80009a0:	f023 0307 	bic.w	r3, r3, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80009a4:	ea43 0302 	orr.w	r3, r3, r2

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80009a8:	d11c      	bne.n	80009e4 <HAL_DMA_Init+0xbc>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80009aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80009ac:	4313      	orrs	r3, r2
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80009ae:	b920      	cbnz	r0, 80009ba <HAL_DMA_Init+0x92>
  {
    switch (tmp)
 80009b0:	2a01      	cmp	r2, #1
 80009b2:	d00b      	beq.n	80009cc <HAL_DMA_Init+0xa4>
 80009b4:	d313      	bcc.n	80009de <HAL_DMA_Init+0xb6>
 80009b6:	2a02      	cmp	r2, #2
 80009b8:	e010      	b.n	80009dc <HAL_DMA_Init+0xb4>
        break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80009ba:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80009be:	d10a      	bne.n	80009d6 <HAL_DMA_Init+0xae>
  {
    switch (tmp)
 80009c0:	2a03      	cmp	r2, #3
 80009c2:	d80f      	bhi.n	80009e4 <HAL_DMA_Init+0xbc>
 80009c4:	e8df f002 	tbb	[pc, r2]
 80009c8:	021e0b1e 	.word	0x021e0b1e
        break;
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80009cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80009ce:	f1b2 7fc0 	cmp.w	r2, #25165824	; 0x1800000
 80009d2:	d107      	bne.n	80009e4 <HAL_DMA_Init+0xbc>
 80009d4:	e016      	b.n	8000a04 <HAL_DMA_Init+0xdc>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80009d6:	2a02      	cmp	r2, #2
 80009d8:	d914      	bls.n	8000a04 <HAL_DMA_Init+0xdc>
 80009da:	2a03      	cmp	r2, #3
 80009dc:	d102      	bne.n	80009e4 <HAL_DMA_Init+0xbc>
      case DMA_FIFO_THRESHOLD_HALFFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80009de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80009e0:	01d2      	lsls	r2, r2, #7
 80009e2:	d40f      	bmi.n	8000a04 <HAL_DMA_Init+0xdc>
      return HAL_ERROR; 
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80009e4:	614b      	str	r3, [r1, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80009e6:	4620      	mov	r0, r4
 80009e8:	f7ff ff88 	bl	80008fc <DMA_CalcBaseAndBitshift>
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009ec:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80009ee:	233f      	movs	r3, #63	; 0x3f
 80009f0:	4093      	lsls	r3, r2
 80009f2:	6083      	str	r3, [r0, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009f4:	2000      	movs	r0, #0
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009f6:	2301      	movs	r3, #1
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009f8:	6560      	str	r0, [r4, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009fa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8000a00:	2001      	movs	r0, #1
 8000a02:	bd70      	pop	{r4, r5, r6, pc}
    tmp |= hdma->Init.FIFOThreshold;
    
    if (DMA_CheckFifoParam(hdma) != HAL_OK)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000a04:	2340      	movs	r3, #64	; 0x40
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000a06:	2001      	movs	r0, #1
    tmp |= hdma->Init.FIFOThreshold;
    
    if (DMA_CheckFifoParam(hdma) != HAL_OK)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000a08:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000a0a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 8000a0e:	bd70      	pop	{r4, r5, r6, pc}
 8000a10:	f010803f 	.word	0xf010803f

08000a14 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a14:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a16:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000a1a:	2c01      	cmp	r4, #1
 8000a1c:	d037      	beq.n	8000a8e <HAL_DMA_Start_IT+0x7a>
 8000a1e:	2401      	movs	r4, #1
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a20:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8000a22:	2500      	movs	r5, #0
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a24:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a28:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8000a2c:	2c01      	cmp	r4, #1
 8000a2e:	f04f 0402 	mov.w	r4, #2
 8000a32:	d128      	bne.n	8000a86 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a34:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000a38:	6804      	ldr	r4, [r0, #0]
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a3a:	6545      	str	r5, [r0, #84]	; 0x54
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000a3c:	6825      	ldr	r5, [r4, #0]
 8000a3e:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000a42:	6025      	str	r5, [r4, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000a44:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000a46:	6883      	ldr	r3, [r0, #8]
 8000a48:	2b40      	cmp	r3, #64	; 0x40
 8000a4a:	d102      	bne.n	8000a52 <HAL_DMA_Start_IT+0x3e>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000a4c:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000a4e:	60e1      	str	r1, [r4, #12]
 8000a50:	e001      	b.n	8000a56 <HAL_DMA_Start_IT+0x42>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8000a52:	60a1      	str	r1, [r4, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000a54:	60e2      	str	r2, [r4, #12]
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a56:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000a58:	233f      	movs	r3, #63	; 0x3f
 8000a5a:	4093      	lsls	r3, r2
 8000a5c:	60b3      	str	r3, [r6, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000a5e:	6823      	ldr	r3, [r4, #0]
 8000a60:	f043 0316 	orr.w	r3, r3, #22
 8000a64:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000a66:	6963      	ldr	r3, [r4, #20]
 8000a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a6c:	6163      	str	r3, [r4, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000a6e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000a70:	b11b      	cbz	r3, 8000a7a <HAL_DMA_Start_IT+0x66>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000a72:	6823      	ldr	r3, [r4, #0]
 8000a74:	f043 0308 	orr.w	r3, r3, #8
 8000a78:	6023      	str	r3, [r4, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000a7a:	6823      	ldr	r3, [r4, #0]
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;
 8000a7c:	2000      	movs	r0, #0
    {
      hdma->Instance->CR  |= DMA_IT_HT;
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	6023      	str	r3, [r4, #0]
 8000a84:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000a86:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000a8a:	4620      	mov	r0, r4
 8000a8c:	bd70      	pop	{r4, r5, r6, pc}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a8e:	2002      	movs	r0, #2
    /* Return error status */
    status = HAL_BUSY;
  }
  
  return status;
}
 8000a90:	bd70      	pop	{r4, r5, r6, pc}

08000a92 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a92:	b570      	push	{r4, r5, r6, lr}
 8000a94:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a96:	6d85      	ldr	r5, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8000a98:	f7ff fc64 	bl	8000364 <HAL_GetTick>
 8000a9c:	4606      	mov	r6, r0
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a9e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8000aa2:	2b02      	cmp	r3, #2
 8000aa4:	d006      	beq.n	8000ab4 <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000aa6:	2380      	movs	r3, #128	; 0x80
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    return HAL_ERROR;
 8000aa8:	2001      	movs	r0, #1
  
  uint32_t tickstart = HAL_GetTick();
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000aaa:	6563      	str	r3, [r4, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aac:	2300      	movs	r3, #0
 8000aae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    return HAL_ERROR;
 8000ab2:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ab4:	6823      	ldr	r3, [r4, #0]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	f022 0216 	bic.w	r2, r2, #22
 8000abc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000abe:	695a      	ldr	r2, [r3, #20]
 8000ac0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ac4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ac6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000ac8:	b90a      	cbnz	r2, 8000ace <HAL_DMA_Abort+0x3c>
 8000aca:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000acc:	b11a      	cbz	r2, 8000ad6 <HAL_DMA_Abort+0x44>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	f022 0208 	bic.w	r2, r2, #8
 8000ad4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	f022 0201 	bic.w	r2, r2, #1
 8000adc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ade:	6823      	ldr	r3, [r4, #0]
 8000ae0:	6818      	ldr	r0, [r3, #0]
 8000ae2:	f010 0001 	ands.w	r0, r0, #1
 8000ae6:	d00d      	beq.n	8000b04 <HAL_DMA_Abort+0x72>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ae8:	f7ff fc3c 	bl	8000364 <HAL_GetTick>
 8000aec:	1b80      	subs	r0, r0, r6
 8000aee:	2805      	cmp	r0, #5
 8000af0:	d9f5      	bls.n	8000ade <HAL_DMA_Abort+0x4c>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000af2:	2320      	movs	r3, #32
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000af4:	2003      	movs	r0, #3
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000af6:	6563      	str	r3, [r4, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000af8:	2300      	movs	r3, #0
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000afa:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000afe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
        
        return HAL_TIMEOUT;
 8000b02:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b04:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000b06:	233f      	movs	r3, #63	; 0x3f
 8000b08:	4093      	lsls	r3, r2
 8000b0a:	60ab      	str	r3, [r5, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000b0c:	2301      	movs	r3, #1
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b0e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000b12:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  }
  return HAL_OK;
}
 8000b16:	bd70      	pop	{r4, r5, r6, pc}

08000b18 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b18:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	d003      	beq.n	8000b28 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b20:	2380      	movs	r3, #128	; 0x80
 8000b22:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000b24:	2001      	movs	r0, #1
 8000b26:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000b28:	6802      	ldr	r2, [r0, #0]
    return HAL_ERROR;
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000b2a:	2305      	movs	r3, #5
 8000b2c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
  }

  return HAL_OK;
 8000b30:	2000      	movs	r0, #0
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000b32:	6813      	ldr	r3, [r2, #0]
 8000b34:	f023 0301 	bic.w	r3, r3, #1
 8000b38:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
}
 8000b3a:	4770      	bx	lr

08000b3c <HAL_DMA_IRQHandler>:
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8000b3c:	2300      	movs	r3, #0
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8000b40:	9301      	str	r3, [sp, #4]
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b42:	4604      	mov	r4, r0
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8000b44:	4b59      	ldr	r3, [pc, #356]	; (8000cac <HAL_DMA_IRQHandler+0x170>)

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000b46:	6d85      	ldr	r5, [r0, #88]	; 0x58
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8000b48:	681f      	ldr	r7, [r3, #0]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  uint32_t timeout = SystemCoreClock / 9600;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;
 8000b4e:	682e      	ldr	r6, [r5, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b50:	4093      	lsls	r3, r2
 8000b52:	421e      	tst	r6, r3
 8000b54:	d00c      	beq.n	8000b70 <HAL_DMA_IRQHandler+0x34>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000b56:	6801      	ldr	r1, [r0, #0]
 8000b58:	6808      	ldr	r0, [r1, #0]
 8000b5a:	0740      	lsls	r0, r0, #29
 8000b5c:	d508      	bpl.n	8000b70 <HAL_DMA_IRQHandler+0x34>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000b5e:	6808      	ldr	r0, [r1, #0]
 8000b60:	f020 0004 	bic.w	r0, r0, #4
 8000b64:	6008      	str	r0, [r1, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000b66:	60ab      	str	r3, [r5, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000b68:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b70:	4b4f      	ldr	r3, [pc, #316]	; (8000cb0 <HAL_DMA_IRQHandler+0x174>)
 8000b72:	4093      	lsls	r3, r2
 8000b74:	421e      	tst	r6, r3
 8000b76:	d008      	beq.n	8000b8a <HAL_DMA_IRQHandler+0x4e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000b78:	6821      	ldr	r1, [r4, #0]
 8000b7a:	6949      	ldr	r1, [r1, #20]
 8000b7c:	0609      	lsls	r1, r1, #24
 8000b7e:	d504      	bpl.n	8000b8a <HAL_DMA_IRQHandler+0x4e>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000b80:	60ab      	str	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000b82:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b84:	f043 0302 	orr.w	r3, r3, #2
 8000b88:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b8a:	4b4a      	ldr	r3, [pc, #296]	; (8000cb4 <HAL_DMA_IRQHandler+0x178>)
 8000b8c:	4093      	lsls	r3, r2
 8000b8e:	421e      	tst	r6, r3
 8000b90:	d008      	beq.n	8000ba4 <HAL_DMA_IRQHandler+0x68>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000b92:	6821      	ldr	r1, [r4, #0]
 8000b94:	6809      	ldr	r1, [r1, #0]
 8000b96:	0788      	lsls	r0, r1, #30
 8000b98:	d504      	bpl.n	8000ba4 <HAL_DMA_IRQHandler+0x68>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000b9a:	60ab      	str	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000b9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b9e:	f043 0304 	orr.w	r3, r3, #4
 8000ba2:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000ba4:	2310      	movs	r3, #16
 8000ba6:	fa03 f202 	lsl.w	r2, r3, r2
 8000baa:	4216      	tst	r6, r2
 8000bac:	d017      	beq.n	8000bde <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000bae:	6823      	ldr	r3, [r4, #0]
 8000bb0:	6819      	ldr	r1, [r3, #0]
 8000bb2:	0709      	lsls	r1, r1, #28
 8000bb4:	d513      	bpl.n	8000bde <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000bb6:	60aa      	str	r2, [r5, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	0350      	lsls	r0, r2, #13
 8000bbc:	d504      	bpl.n	8000bc8 <HAL_DMA_IRQHandler+0x8c>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	0319      	lsls	r1, r3, #12
 8000bc2:	d508      	bpl.n	8000bd6 <HAL_DMA_IRQHandler+0x9a>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000bc4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000bc6:	e007      	b.n	8000bd8 <HAL_DMA_IRQHandler+0x9c>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	05d2      	lsls	r2, r2, #23
 8000bcc:	d403      	bmi.n	8000bd6 <HAL_DMA_IRQHandler+0x9a>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	f022 0208 	bic.w	r2, r2, #8
 8000bd4:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000bd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000bd8:	b10b      	cbz	r3, 8000bde <HAL_DMA_IRQHandler+0xa2>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000bda:	4620      	mov	r0, r4
 8000bdc:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000bde:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000be0:	2220      	movs	r2, #32
 8000be2:	408a      	lsls	r2, r1
 8000be4:	4216      	tst	r6, r2
 8000be6:	d03b      	beq.n	8000c60 <HAL_DMA_IRQHandler+0x124>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000be8:	6823      	ldr	r3, [r4, #0]
 8000bea:	6818      	ldr	r0, [r3, #0]
 8000bec:	06c6      	lsls	r6, r0, #27
 8000bee:	d537      	bpl.n	8000c60 <HAL_DMA_IRQHandler+0x124>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000bf0:	60aa      	str	r2, [r5, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000bf2:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000bf6:	2a05      	cmp	r2, #5
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000bf8:	681a      	ldr	r2, [r3, #0]
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000bfa:	d119      	bne.n	8000c30 <HAL_DMA_IRQHandler+0xf4>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000bfc:	f022 0216 	bic.w	r2, r2, #22
 8000c00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c02:	695a      	ldr	r2, [r3, #20]
 8000c04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c08:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c0a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000c0c:	b90a      	cbnz	r2, 8000c12 <HAL_DMA_IRQHandler+0xd6>
 8000c0e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000c10:	b11a      	cbz	r2, 8000c1a <HAL_DMA_IRQHandler+0xde>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	f022 0208 	bic.w	r2, r2, #8
 8000c18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c1a:	233f      	movs	r3, #63	; 0x3f
 8000c1c:	408b      	lsls	r3, r1
 8000c1e:	60ab      	str	r3, [r5, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c20:	2300      	movs	r3, #0
 8000c22:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
         
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000c26:	2301      	movs	r3, #1
 8000c28:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	
        if(hdma->XferAbortCallback != NULL)
 8000c2c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000c2e:	e037      	b.n	8000ca0 <HAL_DMA_IRQHandler+0x164>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }
      
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c30:	0350      	lsls	r0, r2, #13
 8000c32:	d504      	bpl.n	8000c3e <HAL_DMA_IRQHandler+0x102>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	0319      	lsls	r1, r3, #12
 8000c38:	d40e      	bmi.n	8000c58 <HAL_DMA_IRQHandler+0x11c>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000c3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c3c:	e00d      	b.n	8000c5a <HAL_DMA_IRQHandler+0x11e>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000c44:	d108      	bne.n	8000c58 <HAL_DMA_IRQHandler+0x11c>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000c46:	6819      	ldr	r1, [r3, #0]
 8000c48:	f021 0110 	bic.w	r1, r1, #16
 8000c4c:	6019      	str	r1, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
          
          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c4e:	2301      	movs	r3, #1
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000c50:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          
          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c54:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        }
        
        if(hdma->XferCpltCallback != NULL)
 8000c58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000c5a:	b10b      	cbz	r3, 8000c60 <HAL_DMA_IRQHandler+0x124>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000c5c:	4620      	mov	r0, r4
 8000c5e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000c60:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000c62:	b303      	cbz	r3, 8000ca6 <HAL_DMA_IRQHandler+0x16a>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000c64:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000c66:	07da      	lsls	r2, r3, #31
 8000c68:	d519      	bpl.n	8000c9e <HAL_DMA_IRQHandler+0x162>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000c6a:	2305      	movs	r3, #5
      
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000c6c:	6822      	ldr	r2, [r4, #0]
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000c6e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000c72:	6813      	ldr	r3, [r2, #0]
 8000c74:	f023 0301 	bic.w	r3, r3, #1
 8000c78:	6013      	str	r3, [r2, #0]
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8000c7a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000c7e:	fbb7 f7f3 	udiv	r7, r7, r3
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
      
      do
      {
        if (++count > timeout)
 8000c82:	9b01      	ldr	r3, [sp, #4]
 8000c84:	3301      	adds	r3, #1
 8000c86:	429f      	cmp	r7, r3
 8000c88:	9301      	str	r3, [sp, #4]
 8000c8a:	d302      	bcc.n	8000c92 <HAL_DMA_IRQHandler+0x156>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000c8c:	6813      	ldr	r3, [r2, #0]
 8000c8e:	07db      	lsls	r3, r3, #31
 8000c90:	d4f7      	bmi.n	8000c82 <HAL_DMA_IRQHandler+0x146>

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000c92:	2300      	movs	r3, #0
 8000c94:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    }
    
    if(hdma->XferErrorCallback != NULL)
 8000c9e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000ca0:	b10b      	cbz	r3, 8000ca6 <HAL_DMA_IRQHandler+0x16a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000ca2:	4620      	mov	r0, r4
 8000ca4:	4798      	blx	r3
    }
  }
}
 8000ca6:	b003      	add	sp, #12
 8000ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000004 	.word	0x20000004
 8000cb0:	00800001 	.word	0x00800001
 8000cb4:	00800004 	.word	0x00800004

08000cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cbc:	680b      	ldr	r3, [r1, #0]
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cbe:	b085      	sub	sp, #20
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cc0:	4e6f      	ldr	r6, [pc, #444]	; (8000e80 <HAL_GPIO_Init+0x1c8>)
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cc2:	9301      	str	r3, [sp, #4]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000cc4:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc6:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 8000e88 <HAL_GPIO_Init+0x1d0>
 8000cca:	46b6      	mov	lr, r6

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ccc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8000e8c <HAL_GPIO_Init+0x1d4>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000cd0:	2201      	movs	r2, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8000cd2:	9c01      	ldr	r4, [sp, #4]

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000cd4:	409a      	lsls	r2, r3
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8000cd6:	ea32 0404 	bics.w	r4, r2, r4
 8000cda:	f040 80c9 	bne.w	8000e70 <HAL_GPIO_Init+0x1b8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cde:	684c      	ldr	r4, [r1, #4]
 8000ce0:	f024 0910 	bic.w	r9, r4, #16
 8000ce4:	f1b9 0f02 	cmp.w	r9, #2
 8000ce8:	d114      	bne.n	8000d14 <HAL_GPIO_Init+0x5c>
 8000cea:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000cee:	f003 0b07 	and.w	fp, r3, #7
 8000cf2:	250f      	movs	r5, #15
 8000cf4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000cf8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000cfc:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000d00:	fa05 f50b 	lsl.w	r5, r5, fp
 8000d04:	ea27 0505 	bic.w	r5, r7, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000d08:	690f      	ldr	r7, [r1, #16]
 8000d0a:	fa07 f70b 	lsl.w	r7, r7, fp
 8000d0e:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3] = temp;
 8000d10:	f8ca 7020 	str.w	r7, [sl, #32]
 8000d14:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d18:	2503      	movs	r5, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d1a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d1c:	f004 0b03 	and.w	fp, r4, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d20:	fa05 f50a 	lsl.w	r5, r5, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d24:	f109 39ff 	add.w	r9, r9, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d28:	fa0b fb0a 	lsl.w	fp, fp, sl
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d2c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d2e:	f1b9 0f01 	cmp.w	r9, #1
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d32:	ea07 0705 	and.w	r7, r7, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d36:	ea4b 0707 	orr.w	r7, fp, r7
      GPIOx->MODER = temp;
 8000d3a:	6007      	str	r7, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d3c:	d812      	bhi.n	8000d64 <HAL_GPIO_Init+0xac>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d3e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d40:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8000d44:	68cf      	ldr	r7, [r1, #12]
 8000d46:	fa07 f70a 	lsl.w	r7, r7, sl
 8000d4a:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000d4e:	f3c4 1900 	ubfx	r9, r4, #4, #1
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
        GPIOx->OSPEEDR = temp;
 8000d52:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000d54:	fa09 f903 	lsl.w	r9, r9, r3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d58:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d5a:	ea27 0702 	bic.w	r7, r7, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000d5e:	ea49 0707 	orr.w	r7, r9, r7
        GPIOx->OTYPER = temp;
 8000d62:	6047      	str	r7, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d64:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d66:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000d68:	688f      	ldr	r7, [r1, #8]
 8000d6a:	fa07 f70a 	lsl.w	r7, r7, sl
 8000d6e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000d70:	60c5      	str	r5, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d72:	00e5      	lsls	r5, r4, #3
 8000d74:	d57c      	bpl.n	8000e70 <HAL_GPIO_Init+0x1b8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	f8dc 5044 	ldr.w	r5, [ip, #68]	; 0x44
 8000d7a:	f023 0703 	bic.w	r7, r3, #3

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000d7e:	f003 0a03 	and.w	sl, r3, #3
 8000d82:	f04f 090f 	mov.w	r9, #15
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d86:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8000d8a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000d8e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	f8cc 5044 	str.w	r5, [ip, #68]	; 0x44
 8000d96:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000d9a:	f8dc 5044 	ldr.w	r5, [ip, #68]	; 0x44
 8000d9e:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8000da2:	9503      	str	r5, [sp, #12]
 8000da4:	9d03      	ldr	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000da6:	fa09 f50a 	lsl.w	r5, r9, sl
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
 8000daa:	f8d7 b008 	ldr.w	fp, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000dae:	ea2b 0905 	bic.w	r9, fp, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000db2:	4d34      	ldr	r5, [pc, #208]	; (8000e84 <HAL_GPIO_Init+0x1cc>)
 8000db4:	42a8      	cmp	r0, r5
 8000db6:	d024      	beq.n	8000e02 <HAL_GPIO_Init+0x14a>
 8000db8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000dbc:	42a8      	cmp	r0, r5
 8000dbe:	d022      	beq.n	8000e06 <HAL_GPIO_Init+0x14e>
 8000dc0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000dc4:	42a8      	cmp	r0, r5
 8000dc6:	d020      	beq.n	8000e0a <HAL_GPIO_Init+0x152>
 8000dc8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000dcc:	42a8      	cmp	r0, r5
 8000dce:	d01e      	beq.n	8000e0e <HAL_GPIO_Init+0x156>
 8000dd0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000dd4:	42a8      	cmp	r0, r5
 8000dd6:	d01c      	beq.n	8000e12 <HAL_GPIO_Init+0x15a>
 8000dd8:	4540      	cmp	r0, r8
 8000dda:	d01c      	beq.n	8000e16 <HAL_GPIO_Init+0x15e>
 8000ddc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000de0:	42a8      	cmp	r0, r5
 8000de2:	d01a      	beq.n	8000e1a <HAL_GPIO_Init+0x162>
 8000de4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000de8:	42a8      	cmp	r0, r5
 8000dea:	d018      	beq.n	8000e1e <HAL_GPIO_Init+0x166>
 8000dec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000df0:	42a8      	cmp	r0, r5
 8000df2:	d016      	beq.n	8000e22 <HAL_GPIO_Init+0x16a>
 8000df4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000df8:	42a8      	cmp	r0, r5
 8000dfa:	bf14      	ite	ne
 8000dfc:	250a      	movne	r5, #10
 8000dfe:	2509      	moveq	r5, #9
 8000e00:	e010      	b.n	8000e24 <HAL_GPIO_Init+0x16c>
 8000e02:	2500      	movs	r5, #0
 8000e04:	e00e      	b.n	8000e24 <HAL_GPIO_Init+0x16c>
 8000e06:	2501      	movs	r5, #1
 8000e08:	e00c      	b.n	8000e24 <HAL_GPIO_Init+0x16c>
 8000e0a:	2502      	movs	r5, #2
 8000e0c:	e00a      	b.n	8000e24 <HAL_GPIO_Init+0x16c>
 8000e0e:	2503      	movs	r5, #3
 8000e10:	e008      	b.n	8000e24 <HAL_GPIO_Init+0x16c>
 8000e12:	2504      	movs	r5, #4
 8000e14:	e006      	b.n	8000e24 <HAL_GPIO_Init+0x16c>
 8000e16:	2505      	movs	r5, #5
 8000e18:	e004      	b.n	8000e24 <HAL_GPIO_Init+0x16c>
 8000e1a:	2506      	movs	r5, #6
 8000e1c:	e002      	b.n	8000e24 <HAL_GPIO_Init+0x16c>
 8000e1e:	2507      	movs	r5, #7
 8000e20:	e000      	b.n	8000e24 <HAL_GPIO_Init+0x16c>
 8000e22:	2508      	movs	r5, #8
 8000e24:	fa05 f50a 	lsl.w	r5, r5, sl
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e28:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e2c:	ea45 0509 	orr.w	r5, r5, r9
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e30:	60bd      	str	r5, [r7, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8000e32:	ea6f 0702 	mvn.w	r7, r2
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e36:	6835      	ldr	r5, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 8000e38:	bf0c      	ite	eq
 8000e3a:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8000e3c:	4315      	orrne	r5, r2
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e3e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8000e42:	f8ce 5000 	str.w	r5, [lr]

        temp = EXTI->EMR;
 8000e46:	f8de 5004 	ldr.w	r5, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 8000e4a:	bf0c      	ite	eq
 8000e4c:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8000e4e:	4315      	orrne	r5, r2
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e50:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8000e54:	6075      	str	r5, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e56:	68b5      	ldr	r5, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8000e58:	bf0c      	ite	eq
 8000e5a:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8000e5c:	4315      	orrne	r5, r2
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e5e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8000e60:	f8ce 5008 	str.w	r5, [lr, #8]

        temp = EXTI->FTSR;
 8000e64:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 8000e68:	bf54      	ite	pl
 8000e6a:	403d      	andpl	r5, r7
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8000e6c:	4315      	orrmi	r5, r2
        }
        EXTI->FTSR = temp;
 8000e6e:	60f5      	str	r5, [r6, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e70:	3301      	adds	r3, #1
 8000e72:	2b10      	cmp	r3, #16
 8000e74:	f47f af2c 	bne.w	8000cd0 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8000e78:	b005      	add	sp, #20
 8000e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e7e:	bf00      	nop
 8000e80:	40013c00 	.word	0x40013c00
 8000e84:	40020000 	.word	0x40020000
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40021400 	.word	0x40021400

08000e90 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e90:	b902      	cbnz	r2, 8000e94 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000e92:	0409      	lsls	r1, r1, #16
 8000e94:	6181      	str	r1, [r0, #24]
 8000e96:	4770      	bx	lr

08000e98 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000e98:	6943      	ldr	r3, [r0, #20]
 8000e9a:	4059      	eors	r1, r3
 8000e9c:	6141      	str	r1, [r0, #20]
 8000e9e:	4770      	bx	lr

08000ea0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ea0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000ea2:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000ea4:	6959      	ldr	r1, [r3, #20]
 8000ea6:	4201      	tst	r1, r0
 8000ea8:	d002      	beq.n	8000eb0 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000eaa:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000eac:	f001 fdd8 	bl	8002a60 <HAL_GPIO_EXTI_Callback>
 8000eb0:	bd08      	pop	{r3, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40013c00 	.word	0x40013c00

08000eb8 <HAL_RCC_OscConfig>:
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eb8:	6803      	ldr	r3, [r0, #0]
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000ebc:	4604      	mov	r4, r0
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ebe:	07d8      	lsls	r0, r3, #31
 8000ec0:	d403      	bmi.n	8000eca <HAL_RCC_OscConfig+0x12>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ec2:	6823      	ldr	r3, [r4, #0]
 8000ec4:	0799      	lsls	r1, r3, #30
 8000ec6:	d452      	bmi.n	8000f6e <HAL_RCC_OscConfig+0xb6>
 8000ec8:	e0a5      	b.n	8001016 <HAL_RCC_OscConfig+0x15e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000eca:	4b96      	ldr	r3, [pc, #600]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	689a      	ldr	r2, [r3, #8]
 8000ece:	f002 020c 	and.w	r2, r2, #12
 8000ed2:	2a04      	cmp	r2, #4
 8000ed4:	d007      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x2e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ed6:	689a      	ldr	r2, [r3, #8]
 8000ed8:	f002 020c 	and.w	r2, r2, #12
 8000edc:	2a08      	cmp	r2, #8
 8000ede:	d10b      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x40>
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	025a      	lsls	r2, r3, #9
 8000ee4:	d508      	bpl.n	8000ef8 <HAL_RCC_OscConfig+0x40>
    {
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee6:	4b8f      	ldr	r3, [pc, #572]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	039b      	lsls	r3, r3, #14
 8000eec:	d5e9      	bpl.n	8000ec2 <HAL_RCC_OscConfig+0xa>
 8000eee:	6863      	ldr	r3, [r4, #4]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d1e6      	bne.n	8000ec2 <HAL_RCC_OscConfig+0xa>
      {
        return HAL_ERROR;
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	e176      	b.n	80011e6 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ef8:	6863      	ldr	r3, [r4, #4]
 8000efa:	4d8a      	ldr	r5, [pc, #552]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 8000efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f00:	d013      	beq.n	8000f2a <HAL_RCC_OscConfig+0x72>
 8000f02:	b95b      	cbnz	r3, 8000f1c <HAL_RCC_OscConfig+0x64>
 8000f04:	682b      	ldr	r3, [r5, #0]
 8000f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f0a:	602b      	str	r3, [r5, #0]
 8000f0c:	682b      	ldr	r3, [r5, #0]
 8000f0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f12:	602b      	str	r3, [r5, #0]
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f14:	f7ff fa26 	bl	8000364 <HAL_GetTick>
 8000f18:	4606      	mov	r6, r0
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f1a:	e024      	b.n	8000f66 <HAL_RCC_OscConfig+0xae>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f20:	682b      	ldr	r3, [r5, #0]
 8000f22:	d106      	bne.n	8000f32 <HAL_RCC_OscConfig+0x7a>
 8000f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f28:	602b      	str	r3, [r5, #0]
 8000f2a:	682b      	ldr	r3, [r5, #0]
 8000f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f30:	e005      	b.n	8000f3e <HAL_RCC_OscConfig+0x86>
 8000f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f36:	602b      	str	r3, [r5, #0]
 8000f38:	682b      	ldr	r3, [r5, #0]
 8000f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f3e:	602b      	str	r3, [r5, #0]
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f40:	f7ff fa10 	bl	8000364 <HAL_GetTick>
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f44:	4d77      	ldr	r5, [pc, #476]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f46:	4606      	mov	r6, r0
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f48:	682b      	ldr	r3, [r5, #0]
 8000f4a:	039f      	lsls	r7, r3, #14
 8000f4c:	d4b9      	bmi.n	8000ec2 <HAL_RCC_OscConfig+0xa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f4e:	f7ff fa09 	bl	8000364 <HAL_GetTick>
 8000f52:	1b80      	subs	r0, r0, r6
 8000f54:	2864      	cmp	r0, #100	; 0x64
 8000f56:	d9f7      	bls.n	8000f48 <HAL_RCC_OscConfig+0x90>
          {
            return HAL_TIMEOUT;
 8000f58:	2003      	movs	r0, #3
 8000f5a:	e144      	b.n	80011e6 <HAL_RCC_OscConfig+0x32e>
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f5c:	f7ff fa02 	bl	8000364 <HAL_GetTick>
 8000f60:	1b80      	subs	r0, r0, r6
 8000f62:	2864      	cmp	r0, #100	; 0x64
 8000f64:	d8f8      	bhi.n	8000f58 <HAL_RCC_OscConfig+0xa0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f66:	682b      	ldr	r3, [r5, #0]
 8000f68:	0398      	lsls	r0, r3, #14
 8000f6a:	d4f7      	bmi.n	8000f5c <HAL_RCC_OscConfig+0xa4>
 8000f6c:	e7a9      	b.n	8000ec2 <HAL_RCC_OscConfig+0xa>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f6e:	4b6d      	ldr	r3, [pc, #436]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 8000f70:	689a      	ldr	r2, [r3, #8]
 8000f72:	f012 0f0c 	tst.w	r2, #12
 8000f76:	d007      	beq.n	8000f88 <HAL_RCC_OscConfig+0xd0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f78:	689a      	ldr	r2, [r3, #8]
 8000f7a:	f002 020c 	and.w	r2, r2, #12
 8000f7e:	2a08      	cmp	r2, #8
 8000f80:	d117      	bne.n	8000fb2 <HAL_RCC_OscConfig+0xfa>
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	0259      	lsls	r1, r3, #9
 8000f86:	d414      	bmi.n	8000fb2 <HAL_RCC_OscConfig+0xfa>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f88:	4b66      	ldr	r3, [pc, #408]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	0792      	lsls	r2, r2, #30
 8000f8e:	d502      	bpl.n	8000f96 <HAL_RCC_OscConfig+0xde>
 8000f90:	68e2      	ldr	r2, [r4, #12]
 8000f92:	2a01      	cmp	r2, #1
 8000f94:	d1ae      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x3c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	21f8      	movs	r1, #248	; 0xf8
 8000f9a:	fa91 f1a1 	rbit	r1, r1
 8000f9e:	6920      	ldr	r0, [r4, #16]
 8000fa0:	fab1 f181 	clz	r1, r1
 8000fa4:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000fa8:	fa00 f101 	lsl.w	r1, r0, r1
 8000fac:	430a      	orrs	r2, r1
 8000fae:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fb0:	e031      	b.n	8001016 <HAL_RCC_OscConfig+0x15e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000fb2:	68e3      	ldr	r3, [r4, #12]
 8000fb4:	4d5b      	ldr	r5, [pc, #364]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 8000fb6:	b1f3      	cbz	r3, 8000ff6 <HAL_RCC_OscConfig+0x13e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fb8:	682b      	ldr	r3, [r5, #0]
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc0:	f7ff f9d0 	bl	8000364 <HAL_GetTick>
 8000fc4:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fc6:	682b      	ldr	r3, [r5, #0]
 8000fc8:	4856      	ldr	r0, [pc, #344]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 8000fca:	079b      	lsls	r3, r3, #30
 8000fcc:	d405      	bmi.n	8000fda <HAL_RCC_OscConfig+0x122>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fce:	f7ff f9c9 	bl	8000364 <HAL_GetTick>
 8000fd2:	1b80      	subs	r0, r0, r6
 8000fd4:	2802      	cmp	r0, #2
 8000fd6:	d9f6      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x10e>
 8000fd8:	e7be      	b.n	8000f58 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fda:	6803      	ldr	r3, [r0, #0]
 8000fdc:	22f8      	movs	r2, #248	; 0xf8
 8000fde:	fa92 f2a2 	rbit	r2, r2
 8000fe2:	6921      	ldr	r1, [r4, #16]
 8000fe4:	fab2 f282 	clz	r2, r2
 8000fe8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000fec:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	6003      	str	r3, [r0, #0]
 8000ff4:	e00f      	b.n	8001016 <HAL_RCC_OscConfig+0x15e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ff6:	682b      	ldr	r3, [r5, #0]
 8000ff8:	f023 0301 	bic.w	r3, r3, #1
 8000ffc:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ffe:	f7ff f9b1 	bl	8000364 <HAL_GetTick>
 8001002:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001004:	682b      	ldr	r3, [r5, #0]
 8001006:	079f      	lsls	r7, r3, #30
 8001008:	d505      	bpl.n	8001016 <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800100a:	f7ff f9ab 	bl	8000364 <HAL_GetTick>
 800100e:	1b80      	subs	r0, r0, r6
 8001010:	2802      	cmp	r0, #2
 8001012:	d9f7      	bls.n	8001004 <HAL_RCC_OscConfig+0x14c>
 8001014:	e7a0      	b.n	8000f58 <HAL_RCC_OscConfig+0xa0>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001016:	6823      	ldr	r3, [r4, #0]
 8001018:	071e      	lsls	r6, r3, #28
 800101a:	d403      	bmi.n	8001024 <HAL_RCC_OscConfig+0x16c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800101c:	6823      	ldr	r3, [r4, #0]
 800101e:	075d      	lsls	r5, r3, #29
 8001020:	d549      	bpl.n	80010b6 <HAL_RCC_OscConfig+0x1fe>
 8001022:	e022      	b.n	800106a <HAL_RCC_OscConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001024:	6963      	ldr	r3, [r4, #20]
 8001026:	4d3f      	ldr	r5, [pc, #252]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 8001028:	b17b      	cbz	r3, 800104a <HAL_RCC_OscConfig+0x192>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800102a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	676b      	str	r3, [r5, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001032:	f7ff f997 	bl	8000364 <HAL_GetTick>
 8001036:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001038:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800103a:	0798      	lsls	r0, r3, #30
 800103c:	d4ee      	bmi.n	800101c <HAL_RCC_OscConfig+0x164>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800103e:	f7ff f991 	bl	8000364 <HAL_GetTick>
 8001042:	1b80      	subs	r0, r0, r6
 8001044:	2802      	cmp	r0, #2
 8001046:	d9f7      	bls.n	8001038 <HAL_RCC_OscConfig+0x180>
 8001048:	e786      	b.n	8000f58 <HAL_RCC_OscConfig+0xa0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800104a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800104c:	f023 0301 	bic.w	r3, r3, #1
 8001050:	676b      	str	r3, [r5, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001052:	f7ff f987 	bl	8000364 <HAL_GetTick>
 8001056:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001058:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800105a:	0799      	lsls	r1, r3, #30
 800105c:	d5de      	bpl.n	800101c <HAL_RCC_OscConfig+0x164>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800105e:	f7ff f981 	bl	8000364 <HAL_GetTick>
 8001062:	1b80      	subs	r0, r0, r6
 8001064:	2802      	cmp	r0, #2
 8001066:	d9f7      	bls.n	8001058 <HAL_RCC_OscConfig+0x1a0>
 8001068:	e776      	b.n	8000f58 <HAL_RCC_OscConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800106a:	4b2e      	ldr	r3, [pc, #184]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800106c:	4d2e      	ldr	r5, [pc, #184]	; (8001128 <HAL_RCC_OscConfig+0x270>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800106e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001070:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001074:	641a      	str	r2, [r3, #64]	; 0x40
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107c:	9301      	str	r3, [sp, #4]
 800107e:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001080:	682b      	ldr	r3, [r5, #0]
 8001082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001086:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001088:	f7ff f96c 	bl	8000364 <HAL_GetTick>
 800108c:	4606      	mov	r6, r0
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800108e:	682b      	ldr	r3, [r5, #0]
 8001090:	05da      	lsls	r2, r3, #23
 8001092:	d514      	bpl.n	80010be <HAL_RCC_OscConfig+0x206>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001094:	68a3      	ldr	r3, [r4, #8]
 8001096:	4d23      	ldr	r5, [pc, #140]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 8001098:	2b01      	cmp	r3, #1
 800109a:	d116      	bne.n	80010ca <HAL_RCC_OscConfig+0x212>
 800109c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010a4:	f241 3588 	movw	r5, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010a8:	f7ff f95c 	bl	8000364 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010ac:	4e1d      	ldr	r6, [pc, #116]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010ae:	4607      	mov	r7, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010b0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80010b2:	079b      	lsls	r3, r3, #30
 80010b4:	d526      	bpl.n	8001104 <HAL_RCC_OscConfig+0x24c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010b6:	69a2      	ldr	r2, [r4, #24]
 80010b8:	2a00      	cmp	r2, #0
 80010ba:	d137      	bne.n	800112c <HAL_RCC_OscConfig+0x274>
 80010bc:	e079      	b.n	80011b2 <HAL_RCC_OscConfig+0x2fa>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80010be:	f7ff f951 	bl	8000364 <HAL_GetTick>
 80010c2:	1b80      	subs	r0, r0, r6
 80010c4:	2864      	cmp	r0, #100	; 0x64
 80010c6:	d9e2      	bls.n	800108e <HAL_RCC_OscConfig+0x1d6>
 80010c8:	e746      	b.n	8000f58 <HAL_RCC_OscConfig+0xa0>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010ca:	b96b      	cbnz	r3, 80010e8 <HAL_RCC_OscConfig+0x230>
 80010cc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010ce:	f241 3788 	movw	r7, #5000	; 0x1388
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010d2:	f023 0301 	bic.w	r3, r3, #1
 80010d6:	672b      	str	r3, [r5, #112]	; 0x70
 80010d8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80010da:	f023 0304 	bic.w	r3, r3, #4
 80010de:	672b      	str	r3, [r5, #112]	; 0x70
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010e0:	f7ff f940 	bl	8000364 <HAL_GetTick>
 80010e4:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010e6:	e019      	b.n	800111c <HAL_RCC_OscConfig+0x264>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010e8:	2b05      	cmp	r3, #5
 80010ea:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80010ec:	d103      	bne.n	80010f6 <HAL_RCC_OscConfig+0x23e>
 80010ee:	f043 0304 	orr.w	r3, r3, #4
 80010f2:	672b      	str	r3, [r5, #112]	; 0x70
 80010f4:	e7d2      	b.n	800109c <HAL_RCC_OscConfig+0x1e4>
 80010f6:	f023 0301 	bic.w	r3, r3, #1
 80010fa:	672b      	str	r3, [r5, #112]	; 0x70
 80010fc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80010fe:	f023 0304 	bic.w	r3, r3, #4
 8001102:	e7ce      	b.n	80010a2 <HAL_RCC_OscConfig+0x1ea>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001104:	f7ff f92e 	bl	8000364 <HAL_GetTick>
 8001108:	1bc0      	subs	r0, r0, r7
 800110a:	42a8      	cmp	r0, r5
 800110c:	d9d0      	bls.n	80010b0 <HAL_RCC_OscConfig+0x1f8>
 800110e:	e723      	b.n	8000f58 <HAL_RCC_OscConfig+0xa0>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001110:	f7ff f928 	bl	8000364 <HAL_GetTick>
 8001114:	1b80      	subs	r0, r0, r6
 8001116:	42b8      	cmp	r0, r7
 8001118:	f63f af1e 	bhi.w	8000f58 <HAL_RCC_OscConfig+0xa0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800111c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800111e:	0798      	lsls	r0, r3, #30
 8001120:	d4f6      	bmi.n	8001110 <HAL_RCC_OscConfig+0x258>
 8001122:	e7c8      	b.n	80010b6 <HAL_RCC_OscConfig+0x1fe>
 8001124:	40023800 	.word	0x40023800
 8001128:	40007000 	.word	0x40007000
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800112c:	4d2f      	ldr	r5, [pc, #188]	; (80011ec <HAL_RCC_OscConfig+0x334>)
 800112e:	68ab      	ldr	r3, [r5, #8]
 8001130:	f003 030c 	and.w	r3, r3, #12
 8001134:	2b08      	cmp	r3, #8
 8001136:	f43f aedd 	beq.w	8000ef4 <HAL_RCC_OscConfig+0x3c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800113a:	682b      	ldr	r3, [r5, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800113c:	2a02      	cmp	r2, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800113e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001142:	602b      	str	r3, [r5, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001144:	d143      	bne.n	80011ce <HAL_RCC_OscConfig+0x316>
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001146:	f7ff f90d 	bl	8000364 <HAL_GetTick>
 800114a:	4607      	mov	r7, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800114c:	682b      	ldr	r3, [r5, #0]
 800114e:	4e27      	ldr	r6, [pc, #156]	; (80011ec <HAL_RCC_OscConfig+0x334>)
 8001150:	0199      	lsls	r1, r3, #6
 8001152:	d430      	bmi.n	80011b6 <HAL_RCC_OscConfig+0x2fe>
 8001154:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001158:	fa92 f2a2 	rbit	r2, r2
 800115c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001160:	fab2 f082 	clz	r0, r2
 8001164:	fa93 f3a3 	rbit	r3, r3
 8001168:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 800116c:	fab3 f583 	clz	r5, r3
 8001170:	fa92 f2a2 	rbit	r2, r2
 8001174:	69e3      	ldr	r3, [r4, #28]
 8001176:	fab2 f182 	clz	r1, r2
 800117a:	6a27      	ldr	r7, [r4, #32]
 800117c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800117e:	431f      	orrs	r7, r3
 8001180:	4082      	lsls	r2, r0
 8001182:	f047 5300 	orr.w	r3, r7, #536870912	; 0x20000000
 8001186:	ea43 0002 	orr.w	r0, r3, r2
 800118a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800118c:	085a      	lsrs	r2, r3, #1
 800118e:	3a01      	subs	r2, #1
 8001190:	fa02 f305 	lsl.w	r3, r2, r5
 8001194:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001196:	4303      	orrs	r3, r0
 8001198:	408a      	lsls	r2, r1
 800119a:	4313      	orrs	r3, r2
 800119c:	6073      	str	r3, [r6, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800119e:	6833      	ldr	r3, [r6, #0]
 80011a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011a4:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a6:	f7ff f8dd 	bl	8000364 <HAL_GetTick>
 80011aa:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ac:	6833      	ldr	r3, [r6, #0]
 80011ae:	019a      	lsls	r2, r3, #6
 80011b0:	d507      	bpl.n	80011c2 <HAL_RCC_OscConfig+0x30a>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80011b2:	2000      	movs	r0, #0
 80011b4:	e017      	b.n	80011e6 <HAL_RCC_OscConfig+0x32e>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011b6:	f7ff f8d5 	bl	8000364 <HAL_GetTick>
 80011ba:	1bc0      	subs	r0, r0, r7
 80011bc:	2802      	cmp	r0, #2
 80011be:	d9c5      	bls.n	800114c <HAL_RCC_OscConfig+0x294>
 80011c0:	e6ca      	b.n	8000f58 <HAL_RCC_OscConfig+0xa0>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011c2:	f7ff f8cf 	bl	8000364 <HAL_GetTick>
 80011c6:	1b00      	subs	r0, r0, r4
 80011c8:	2802      	cmp	r0, #2
 80011ca:	d9ef      	bls.n	80011ac <HAL_RCC_OscConfig+0x2f4>
 80011cc:	e6c4      	b.n	8000f58 <HAL_RCC_OscConfig+0xa0>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ce:	f7ff f8c9 	bl	8000364 <HAL_GetTick>
 80011d2:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011d4:	682b      	ldr	r3, [r5, #0]
 80011d6:	019b      	lsls	r3, r3, #6
 80011d8:	d5eb      	bpl.n	80011b2 <HAL_RCC_OscConfig+0x2fa>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011da:	f7ff f8c3 	bl	8000364 <HAL_GetTick>
 80011de:	1b00      	subs	r0, r0, r4
 80011e0:	2802      	cmp	r0, #2
 80011e2:	d9f7      	bls.n	80011d4 <HAL_RCC_OscConfig+0x31c>
 80011e4:	e6b8      	b.n	8000f58 <HAL_RCC_OscConfig+0xa0>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80011e6:	b003      	add	sp, #12
 80011e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800

080011f0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011f0:	491b      	ldr	r1, [pc, #108]	; (8001260 <HAL_RCC_GetSysClockFreq+0x70>)
 80011f2:	688b      	ldr	r3, [r1, #8]
 80011f4:	f003 030c 	and.w	r3, r3, #12
 80011f8:	2b04      	cmp	r3, #4
 80011fa:	d02c      	beq.n	8001256 <HAL_RCC_GetSysClockFreq+0x66>
 80011fc:	2b08      	cmp	r3, #8
 80011fe:	d12c      	bne.n	800125a <HAL_RCC_GetSysClockFreq+0x6a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001200:	6848      	ldr	r0, [r1, #4]
 8001202:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001206:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001208:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800120c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001210:	684b      	ldr	r3, [r1, #4]
 8001212:	fa92 f2a2 	rbit	r2, r2
 8001216:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 800121a:	fab2 f282 	clz	r2, r2
 800121e:	ea01 0103 	and.w	r1, r1, r3
 8001222:	fa21 f102 	lsr.w	r1, r1, r2
 8001226:	bf14      	ite	ne
 8001228:	4a0e      	ldrne	r2, [pc, #56]	; (8001264 <HAL_RCC_GetSysClockFreq+0x74>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 800122a:	4a0f      	ldreq	r2, [pc, #60]	; (8001268 <HAL_RCC_GetSysClockFreq+0x78>)
 800122c:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8001230:	4a0b      	ldr	r2, [pc, #44]	; (8001260 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8001232:	fb00 f301 	mul.w	r3, r0, r1
 8001236:	f44f 3040 	mov.w	r0, #196608	; 0x30000
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 800123a:	6852      	ldr	r2, [r2, #4]
 800123c:	fa90 f0a0 	rbit	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8001240:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8001244:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8001248:	fa22 f000 	lsr.w	r0, r2, r0
 800124c:	3001      	adds	r0, #1
 800124e:	0040      	lsls	r0, r0, #1
 8001250:	fbb3 f0f0 	udiv	r0, r3, r0
 8001254:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001256:	4803      	ldr	r0, [pc, #12]	; (8001264 <HAL_RCC_GetSysClockFreq+0x74>)
 8001258:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800125a:	4803      	ldr	r0, [pc, #12]	; (8001268 <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	40023800 	.word	0x40023800
 8001264:	017d7840 	.word	0x017d7840
 8001268:	00f42400 	.word	0x00f42400

0800126c <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800126c:	4a50      	ldr	r2, [pc, #320]	; (80013b0 <HAL_RCC_ClockConfig+0x144>)
 800126e:	6813      	ldr	r3, [r2, #0]
 8001270:	f003 030f 	and.w	r3, r3, #15
 8001274:	428b      	cmp	r3, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800127a:	4604      	mov	r4, r0
 800127c:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800127e:	d30a      	bcc.n	8001296 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
  
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001280:	6821      	ldr	r1, [r4, #0]
 8001282:	0788      	lsls	r0, r1, #30
 8001284:	d514      	bpl.n	80012b0 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001286:	484b      	ldr	r0, [pc, #300]	; (80013b4 <HAL_RCC_ClockConfig+0x148>)
 8001288:	6883      	ldr	r3, [r0, #8]
 800128a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800128e:	68a3      	ldr	r3, [r4, #8]
 8001290:	4313      	orrs	r3, r2
 8001292:	6083      	str	r3, [r0, #8]
 8001294:	e00c      	b.n	80012b0 <HAL_RCC_ClockConfig+0x44>
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001296:	6813      	ldr	r3, [r2, #0]
 8001298:	f023 030f 	bic.w	r3, r3, #15
 800129c:	430b      	orrs	r3, r1
 800129e:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012a0:	6813      	ldr	r3, [r2, #0]
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	4299      	cmp	r1, r3
 80012a8:	d0ea      	beq.n	8001280 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 80012aa:	2001      	movs	r0, #1
 80012ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012b0:	07c9      	lsls	r1, r1, #31
 80012b2:	d406      	bmi.n	80012c2 <HAL_RCC_ClockConfig+0x56>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80012b4:	4a3e      	ldr	r2, [pc, #248]	; (80013b0 <HAL_RCC_ClockConfig+0x144>)
 80012b6:	6813      	ldr	r3, [r2, #0]
 80012b8:	f003 030f 	and.w	r3, r3, #15
 80012bc:	429d      	cmp	r5, r3
 80012be:	d342      	bcc.n	8001346 <HAL_RCC_ClockConfig+0xda>
 80012c0:	e04b      	b.n	800135a <HAL_RCC_ClockConfig+0xee>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012c2:	6862      	ldr	r2, [r4, #4]
 80012c4:	4b3b      	ldr	r3, [pc, #236]	; (80013b4 <HAL_RCC_ClockConfig+0x148>)
 80012c6:	2a01      	cmp	r2, #1
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c8:	6819      	ldr	r1, [r3, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ca:	d102      	bne.n	80012d2 <HAL_RCC_ClockConfig+0x66>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012cc:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 80012d0:	e006      	b.n	80012e0 <HAL_RCC_ClockConfig+0x74>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012d2:	2a02      	cmp	r2, #2
 80012d4:	d102      	bne.n	80012dc <HAL_RCC_ClockConfig+0x70>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012d6:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 80012da:	e001      	b.n	80012e0 <HAL_RCC_ClockConfig+0x74>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012dc:	f011 0f02 	tst.w	r1, #2
 80012e0:	d0e3      	beq.n	80012aa <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012e2:	6899      	ldr	r1, [r3, #8]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012e4:	f241 3888 	movw	r8, #5000	; 0x1388
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80012e8:	4f32      	ldr	r7, [pc, #200]	; (80013b4 <HAL_RCC_ClockConfig+0x148>)
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012ea:	f021 0103 	bic.w	r1, r1, #3
 80012ee:	430a      	orrs	r2, r1
 80012f0:	609a      	str	r2, [r3, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80012f2:	f7ff f837 	bl	8000364 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012f6:	6863      	ldr	r3, [r4, #4]
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80012f8:	4606      	mov	r6, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d10c      	bne.n	8001318 <HAL_RCC_ClockConfig+0xac>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	f003 030c 	and.w	r3, r3, #12
 8001304:	2b04      	cmp	r3, #4
 8001306:	d0d5      	beq.n	80012b4 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001308:	f7ff f82c 	bl	8000364 <HAL_GetTick>
 800130c:	1b80      	subs	r0, r0, r6
 800130e:	4540      	cmp	r0, r8
 8001310:	d9f5      	bls.n	80012fe <HAL_RCC_ClockConfig+0x92>
        {
          return HAL_TIMEOUT;
 8001312:	2003      	movs	r0, #3
 8001314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001318:	2b02      	cmp	r3, #2
 800131a:	d10f      	bne.n	800133c <HAL_RCC_ClockConfig+0xd0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	f003 030c 	and.w	r3, r3, #12
 8001322:	2b08      	cmp	r3, #8
 8001324:	d0c6      	beq.n	80012b4 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001326:	f7ff f81d 	bl	8000364 <HAL_GetTick>
 800132a:	1b80      	subs	r0, r0, r6
 800132c:	4540      	cmp	r0, r8
 800132e:	d9f5      	bls.n	800131c <HAL_RCC_ClockConfig+0xb0>
 8001330:	e7ef      	b.n	8001312 <HAL_RCC_ClockConfig+0xa6>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001332:	f7ff f817 	bl	8000364 <HAL_GetTick>
 8001336:	1b80      	subs	r0, r0, r6
 8001338:	4540      	cmp	r0, r8
 800133a:	d8ea      	bhi.n	8001312 <HAL_RCC_ClockConfig+0xa6>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	f013 0f0c 	tst.w	r3, #12
 8001342:	d1f6      	bne.n	8001332 <HAL_RCC_ClockConfig+0xc6>
 8001344:	e7b6      	b.n	80012b4 <HAL_RCC_ClockConfig+0x48>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001346:	6813      	ldr	r3, [r2, #0]
 8001348:	f023 030f 	bic.w	r3, r3, #15
 800134c:	432b      	orrs	r3, r5
 800134e:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001350:	6813      	ldr	r3, [r2, #0]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	429d      	cmp	r5, r3
 8001358:	d1a7      	bne.n	80012aa <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800135a:	6821      	ldr	r1, [r4, #0]
 800135c:	074a      	lsls	r2, r1, #29
 800135e:	d506      	bpl.n	800136e <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001360:	4814      	ldr	r0, [pc, #80]	; (80013b4 <HAL_RCC_ClockConfig+0x148>)
 8001362:	6883      	ldr	r3, [r0, #8]
 8001364:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001368:	68e3      	ldr	r3, [r4, #12]
 800136a:	4313      	orrs	r3, r2
 800136c:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800136e:	070b      	lsls	r3, r1, #28
 8001370:	d507      	bpl.n	8001382 <HAL_RCC_ClockConfig+0x116>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001372:	4a10      	ldr	r2, [pc, #64]	; (80013b4 <HAL_RCC_ClockConfig+0x148>)
 8001374:	6921      	ldr	r1, [r4, #16]
 8001376:	6893      	ldr	r3, [r2, #8]
 8001378:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800137c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001380:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001382:	f7ff ff35 	bl	80011f0 <HAL_RCC_GetSysClockFreq>
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <HAL_RCC_ClockConfig+0x148>)
 8001388:	22f0      	movs	r2, #240	; 0xf0
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	fa92 f2a2 	rbit	r2, r2
 8001390:	fab2 f282 	clz	r2, r2
 8001394:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001398:	40d3      	lsrs	r3, r2
 800139a:	4a07      	ldr	r2, [pc, #28]	; (80013b8 <HAL_RCC_ClockConfig+0x14c>)
 800139c:	5cd3      	ldrb	r3, [r2, r3]
 800139e:	40d8      	lsrs	r0, r3
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_RCC_ClockConfig+0x150>)
 80013a2:	6018      	str	r0, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80013a4:	2000      	movs	r0, #0
 80013a6:	f7fe ffb5 	bl	8000314 <HAL_InitTick>
  
  return HAL_OK;
 80013aa:	2000      	movs	r0, #0
}
 80013ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013b0:	40023c00 	.word	0x40023c00
 80013b4:	40023800 	.word	0x40023800
 80013b8:	08004468 	.word	0x08004468
 80013bc:	20000004 	.word	0x20000004

080013c0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80013c0:	4b01      	ldr	r3, [pc, #4]	; (80013c8 <HAL_RCC_GetHCLKFreq+0x8>)
 80013c2:	6818      	ldr	r0, [r3, #0]
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000004 	.word	0x20000004

080013cc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013ce:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	fa92 f2a2 	rbit	r2, r2
 80013d8:	fab2 f282 	clz	r2, r2
 80013dc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80013e0:	40d3      	lsrs	r3, r2
 80013e2:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80013e4:	5cd3      	ldrb	r3, [r2, r3]
 80013e6:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80013e8:	6810      	ldr	r0, [r2, #0]
}
 80013ea:	40d8      	lsrs	r0, r3
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800
 80013f4:	08004478 	.word	0x08004478
 80013f8:	20000004 	.word	0x20000004

080013fc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013fe:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	fa92 f2a2 	rbit	r2, r2
 8001408:	fab2 f282 	clz	r2, r2
 800140c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001410:	40d3      	lsrs	r3, r2
 8001412:	4a04      	ldr	r2, [pc, #16]	; (8001424 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001414:	5cd3      	ldrb	r3, [r2, r3]
 8001416:	4a04      	ldr	r2, [pc, #16]	; (8001428 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001418:	6810      	ldr	r0, [r2, #0]
} 
 800141a:	40d8      	lsrs	r0, r3
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800
 8001424:	08004478 	.word	0x08004478
 8001428:	20000004 	.word	0x20000004

0800142c <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800142c:	6803      	ldr	r3, [r0, #0]
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800142e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001432:	f013 0601 	ands.w	r6, r3, #1
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001436:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001438:	d00b      	beq.n	8001452 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800143a:	4ab6      	ldr	r2, [pc, #728]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800143c:	6891      	ldr	r1, [r2, #8]
 800143e:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8001442:	6091      	str	r1, [r2, #8]
 8001444:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001446:	6891      	ldr	r1, [r2, #8]
 8001448:	4331      	orrs	r1, r6
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tickstart = 0;
  uint32_t tmpreg0 = 0;
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
 800144a:	fab6 f686 	clz	r6, r6
 800144e:	0976      	lsrs	r6, r6, #5
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001450:	6091      	str	r1, [r2, #8]
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001452:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8001456:	d012      	beq.n	800147e <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001458:	49ae      	ldr	r1, [pc, #696]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800145a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800145c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001460:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001464:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
    {
      plli2sused = 1; 
 8001468:	bf08      	it	eq
 800146a:	2601      	moveq	r6, #1
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800146c:	ea42 0205 	orr.w	r2, r2, r5
{
  uint32_t tickstart = 0;
  uint32_t tmpreg0 = 0;
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;
 8001470:	bf16      	itet	ne
 8001472:	fab5 f585 	clzne	r5, r5
 8001476:	2500      	moveq	r5, #0
 8001478:	096d      	lsrne	r5, r5, #5
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800147a:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800147e:	02d8      	lsls	r0, r3, #11
 8001480:	d511      	bpl.n	80014a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001482:	48a4      	ldr	r0, [pc, #656]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001484:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001486:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800148a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800148e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001492:	ea42 0201 	orr.w	r2, r2, r1
 8001496:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800149a:	d003      	beq.n	80014a4 <HAL_RCCEx_PeriphCLKConfig+0x78>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 800149c:	2900      	cmp	r1, #0
 800149e:	bf08      	it	eq
 80014a0:	2501      	moveq	r5, #1
 80014a2:	e000      	b.n	80014a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1; 
 80014a4:	2601      	movs	r6, #1
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {    
      plli2sused = 1; 
 80014a6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80014aa:	bf18      	it	ne
 80014ac:	2601      	movne	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80014ae:	0699      	lsls	r1, r3, #26
 80014b0:	d55d      	bpl.n	800156e <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80014b2:	4b98      	ldr	r3, [pc, #608]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80014b4:	4f98      	ldr	r7, [pc, #608]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014bc:	641a      	str	r2, [r3, #64]	; 0x40
 80014be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c4:	9301      	str	r3, [sp, #4]
 80014c6:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ce:	603b      	str	r3, [r7, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014d0:	f7fe ff48 	bl	8000364 <HAL_GetTick>
 80014d4:	4680      	mov	r8, r0
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	05da      	lsls	r2, r3, #23
 80014da:	d407      	bmi.n	80014ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014dc:	f7fe ff42 	bl	8000364 <HAL_GetTick>
 80014e0:	ebc8 0000 	rsb	r0, r8, r0
 80014e4:	2864      	cmp	r0, #100	; 0x64
 80014e6:	d9f6      	bls.n	80014d6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
      {
        return HAL_TIMEOUT;
 80014e8:	2003      	movs	r0, #3
 80014ea:	e340      	b.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x742>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80014ec:	4f89      	ldr	r7, [pc, #548]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80014ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80014f0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80014f4:	d10f      	bne.n	8001516 <HAL_RCCEx_PeriphCLKConfig+0xea>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80014f6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80014f8:	f402 7340 	and.w	r3, r2, #768	; 0x300
 80014fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001500:	4b84      	ldr	r3, [pc, #528]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001502:	d12b      	bne.n	800155c <HAL_RCCEx_PeriphCLKConfig+0x130>
 8001504:	6899      	ldr	r1, [r3, #8]
 8001506:	f421 10f8 	bic.w	r0, r1, #2031616	; 0x1f0000
 800150a:	f022 4170 	bic.w	r1, r2, #4026531840	; 0xf0000000
 800150e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8001512:	4301      	orrs	r1, r0
 8001514:	e025      	b.n	8001562 <HAL_RCCEx_PeriphCLKConfig+0x136>
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001516:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001518:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800151c:	4293      	cmp	r3, r2
 800151e:	d0ea      	beq.n	80014f6 <HAL_RCCEx_PeriphCLKConfig+0xca>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001520:	6f3b      	ldr	r3, [r7, #112]	; 0x70

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001522:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001524:	f423 7340 	bic.w	r3, r3, #768	; 0x300

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001528:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800152c:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800152e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001530:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001534:	673a      	str	r2, [r7, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001536:	673b      	str	r3, [r7, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001538:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800153a:	07db      	lsls	r3, r3, #31
 800153c:	d5db      	bpl.n	80014f6 <HAL_RCCEx_PeriphCLKConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153e:	f7fe ff11 	bl	8000364 <HAL_GetTick>
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001542:	f241 3988 	movw	r9, #5000	; 0x1388

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001546:	4680      	mov	r8, r0
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001548:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800154a:	0798      	lsls	r0, r3, #30
 800154c:	d4d3      	bmi.n	80014f6 <HAL_RCCEx_PeriphCLKConfig+0xca>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800154e:	f7fe ff09 	bl	8000364 <HAL_GetTick>
 8001552:	ebc8 0000 	rsb	r0, r8, r0
 8001556:	4548      	cmp	r0, r9
 8001558:	d9f6      	bls.n	8001548 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800155a:	e7c5      	b.n	80014e8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800155c:	6899      	ldr	r1, [r3, #8]
 800155e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001562:	6099      	str	r1, [r3, #8]
 8001564:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001568:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800156a:	430a      	orrs	r2, r1
 800156c:	671a      	str	r2, [r3, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800156e:	6823      	ldr	r3, [r4, #0]
 8001570:	06d9      	lsls	r1, r3, #27
 8001572:	d50c      	bpl.n	800158e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001574:	4a67      	ldr	r2, [pc, #412]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001576:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800157a:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800157e:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001582:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 8001586:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001588:	4301      	orrs	r1, r0
 800158a:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800158e:	045a      	lsls	r2, r3, #17
 8001590:	d508      	bpl.n	80015a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001592:	4860      	ldr	r0, [pc, #384]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001594:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001598:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 800159c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800159e:	430a      	orrs	r2, r1
 80015a0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80015a4:	041f      	lsls	r7, r3, #16
 80015a6:	d508      	bpl.n	80015ba <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80015a8:	485a      	ldr	r0, [pc, #360]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80015aa:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80015ae:	f422 2140 	bic.w	r1, r2, #786432	; 0xc0000
 80015b2:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80015b4:	430a      	orrs	r2, r1
 80015b6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80015ba:	03d8      	lsls	r0, r3, #15
 80015bc:	d508      	bpl.n	80015d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80015be:	4855      	ldr	r0, [pc, #340]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80015c0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80015c4:	f422 1140 	bic.w	r1, r2, #3145728	; 0x300000
 80015c8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80015ca:	430a      	orrs	r2, r1
 80015cc:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80015d0:	0399      	lsls	r1, r3, #14
 80015d2:	d508      	bpl.n	80015e6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80015d4:	484f      	ldr	r0, [pc, #316]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80015d6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80015da:	f422 0140 	bic.w	r1, r2, #12582912	; 0xc00000
 80015de:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80015e0:	430a      	orrs	r2, r1
 80015e2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80015e6:	065a      	lsls	r2, r3, #25
 80015e8:	d508      	bpl.n	80015fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80015ea:	484a      	ldr	r0, [pc, #296]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80015ec:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80015f0:	f022 0103 	bic.w	r1, r2, #3
 80015f4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80015f6:	430a      	orrs	r2, r1
 80015f8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80015fc:	061f      	lsls	r7, r3, #24
 80015fe:	d508      	bpl.n	8001612 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001600:	4844      	ldr	r0, [pc, #272]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001602:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001606:	f022 010c 	bic.w	r1, r2, #12
 800160a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800160c:	430a      	orrs	r2, r1
 800160e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001612:	05d8      	lsls	r0, r3, #23
 8001614:	d508      	bpl.n	8001628 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001616:	483f      	ldr	r0, [pc, #252]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001618:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800161c:	f022 0130 	bic.w	r1, r2, #48	; 0x30
 8001620:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8001622:	430a      	orrs	r2, r1
 8001624:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001628:	0599      	lsls	r1, r3, #22
 800162a:	d508      	bpl.n	800163e <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800162c:	4839      	ldr	r0, [pc, #228]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800162e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001632:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 8001636:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001638:	430a      	orrs	r2, r1
 800163a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800163e:	055a      	lsls	r2, r3, #21
 8001640:	d508      	bpl.n	8001654 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001642:	4834      	ldr	r0, [pc, #208]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001644:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001648:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 800164c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800164e:	430a      	orrs	r2, r1
 8001650:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001654:	051f      	lsls	r7, r3, #20
 8001656:	d508      	bpl.n	800166a <HAL_RCCEx_PeriphCLKConfig+0x23e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001658:	482e      	ldr	r0, [pc, #184]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800165a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800165e:	f422 6140 	bic.w	r1, r2, #3072	; 0xc00
 8001662:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001664:	430a      	orrs	r2, r1
 8001666:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800166a:	04d8      	lsls	r0, r3, #19
 800166c:	d508      	bpl.n	8001680 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800166e:	4829      	ldr	r0, [pc, #164]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001670:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001674:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8001678:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800167a:	430a      	orrs	r2, r1
 800167c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001680:	0499      	lsls	r1, r3, #18
 8001682:	d508      	bpl.n	8001696 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001684:	4823      	ldr	r0, [pc, #140]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001686:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800168a:	f422 4140 	bic.w	r1, r2, #49152	; 0xc000
 800168e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001690:	430a      	orrs	r2, r1
 8001692:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001696:	025a      	lsls	r2, r3, #9
 8001698:	d508      	bpl.n	80016ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800169a:	481e      	ldr	r0, [pc, #120]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800169c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80016a0:	f022 6180 	bic.w	r1, r2, #67108864	; 0x4000000
 80016a4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80016a6:	430a      	orrs	r2, r1
 80016a8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80016ac:	029f      	lsls	r7, r3, #10
 80016ae:	d50c      	bpl.n	80016ca <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80016b0:	4818      	ldr	r0, [pc, #96]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80016b2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80016b4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 80016b8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80016bc:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 80016c0:	bf08      	it	eq
 80016c2:	2501      	moveq	r5, #1
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80016c4:	430a      	orrs	r2, r1
 80016c6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1; 
 80016ca:	f013 0f08 	tst.w	r3, #8
 80016ce:	bf18      	it	ne
 80016d0:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80016d2:	0358      	lsls	r0, r3, #13
 80016d4:	d508      	bpl.n	80016e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80016d6:	480f      	ldr	r0, [pc, #60]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80016d8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80016dc:	f022 7140 	bic.w	r1, r2, #50331648	; 0x3000000
 80016e0:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80016e2:	430a      	orrs	r2, r1
 80016e4:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80016e8:	0219      	lsls	r1, r3, #8
 80016ea:	d509      	bpl.n	8001700 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80016ec:	4809      	ldr	r0, [pc, #36]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80016ee:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80016f2:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 80016f6:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80016fa:	430a      	orrs	r2, r1
 80016fc:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001700:	2e01      	cmp	r6, #1
 8001702:	d00b      	beq.n	800171c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8001704:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001708:	d008      	beq.n	800171c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800170a:	2d01      	cmp	r5, #1
 800170c:	f040 818c 	bne.w	8001a28 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8001710:	e123      	b.n	800195a <HAL_RCCEx_PeriphCLKConfig+0x52e>
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800
 8001718:	40007000 	.word	0x40007000
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();  
 800171c:	4ec8      	ldr	r6, [pc, #800]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 800171e:	6833      	ldr	r3, [r6, #0]
 8001720:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001724:	6033      	str	r3, [r6, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001726:	f7fe fe1d 	bl	8000364 <HAL_GetTick>
 800172a:	4607      	mov	r7, r0
    
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800172c:	6833      	ldr	r3, [r6, #0]
 800172e:	f8df e310 	ldr.w	lr, [pc, #784]	; 8001a40 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8001732:	011a      	lsls	r2, r3, #4
 8001734:	d505      	bpl.n	8001742 <HAL_RCCEx_PeriphCLKConfig+0x316>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001736:	f7fe fe15 	bl	8000364 <HAL_GetTick>
 800173a:	1bc0      	subs	r0, r0, r7
 800173c:	2864      	cmp	r0, #100	; 0x64
 800173e:	d9f5      	bls.n	800172c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8001740:	e6d2      	b.n	80014e8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001742:	6827      	ldr	r7, [r4, #0]
 8001744:	07fb      	lsls	r3, r7, #31
 8001746:	d53c      	bpl.n	80017c2 <HAL_RCCEx_PeriphCLKConfig+0x396>
 8001748:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800174a:	bbd3      	cbnz	r3, 80017c2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 800174c:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 8001750:	f44f 3840 	mov.w	r8, #196608	; 0x30000
 8001754:	fa98 f9a8 	rbit	r9, r8
 8001758:	f04f 6670 	mov.w	r6, #251658240	; 0xf000000
 800175c:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8001760:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 8001764:	fa96 fca6 	rbit	ip, r6
 8001768:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 800176c:	fabc fc8c 	clz	ip, ip
 8001770:	fa9a faaa 	rbit	sl, sl
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001774:	faba fa8a 	clz	sl, sl
 8001778:	fa98 f8a8 	rbit	r8, r8
 800177c:	fab8 f888 	clz	r8, r8
 8001780:	fa96 f6a6 	rbit	r6, r6
 8001784:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8001788:	fab6 f686 	clz	r6, r6
 800178c:	fa93 f3a3 	rbit	r3, r3
 8001790:	fab3 fb83 	clz	fp, r3
 8001794:	6861      	ldr	r1, [r4, #4]
 8001796:	68a3      	ldr	r3, [r4, #8]
 8001798:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 800179c:	fa01 f10a 	lsl.w	r1, r1, sl
 80017a0:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80017a4:	fa03 f30b 	lsl.w	r3, r3, fp
 80017a8:	fa20 f009 	lsr.w	r0, r0, r9
 80017ac:	fa22 f20c 	lsr.w	r2, r2, ip
 80017b0:	430b      	orrs	r3, r1
 80017b2:	fa00 f108 	lsl.w	r1, r0, r8
 80017b6:	4319      	orrs	r1, r3
 80017b8:	fa02 f306 	lsl.w	r3, r2, r6
 80017bc:	430b      	orrs	r3, r1
 80017be:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
    }
        
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80017c2:	033e      	lsls	r6, r7, #12
 80017c4:	d503      	bpl.n	80017ce <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 80017c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017cc:	d005      	beq.n	80017da <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80017ce:	02f8      	lsls	r0, r7, #11
 80017d0:	d549      	bpl.n	8001866 <HAL_RCCEx_PeriphCLKConfig+0x43a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 80017d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017d8:	d145      	bne.n	8001866 <HAL_RCCEx_PeriphCLKConfig+0x43a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 80017da:	f8df e264 	ldr.w	lr, [pc, #612]	; 8001a40 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80017de:	f44f 3840 	mov.w	r8, #196608	; 0x30000
 80017e2:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 80017e6:	fa98 f9a8 	rbit	r9, r8
 80017ea:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 80017ee:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 80017f2:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 80017f6:	fa96 fca6 	rbit	ip, r6
 80017fa:	f647 7bc0 	movw	fp, #32704	; 0x7fc0
 80017fe:	fabc fc8c 	clz	ip, ip
 8001802:	fa9b fbab 	rbit	fp, fp
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001806:	fabb fb8b 	clz	fp, fp
 800180a:	fa98 f8a8 	rbit	r8, r8
 800180e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8001812:	fab8 f888 	clz	r8, r8
 8001816:	fa93 f3a3 	rbit	r3, r3
 800181a:	fab3 fa83 	clz	sl, r3
 800181e:	fa96 f6a6 	rbit	r6, r6
 8001822:	6863      	ldr	r3, [r4, #4]
 8001824:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8001828:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 800182c:	fab6 f686 	clz	r6, r6
 8001830:	fa03 f10b 	lsl.w	r1, r3, fp
 8001834:	68e3      	ldr	r3, [r4, #12]
 8001836:	fa20 f009 	lsr.w	r0, r0, r9
 800183a:	fa22 f20c 	lsr.w	r2, r2, ip
 800183e:	fa03 f30a 	lsl.w	r3, r3, sl
 8001842:	430b      	orrs	r3, r1
 8001844:	fa00 f108 	lsl.w	r1, r0, r8
 8001848:	4319      	orrs	r1, r3
 800184a:	fa02 f306 	lsl.w	r3, r2, r6
 800184e:	430b      	orrs	r3, r1
 8001850:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8001854:	f8de 308c 	ldr.w	r3, [lr, #140]	; 0x8c
 8001858:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800185a:	f023 031f 	bic.w	r3, r3, #31
 800185e:	3a01      	subs	r2, #1
 8001860:	4313      	orrs	r3, r2
 8001862:	f8ce 308c 	str.w	r3, [lr, #140]	; 0x8c
    }          

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001866:	01f9      	lsls	r1, r7, #7
 8001868:	d53c      	bpl.n	80018e4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 800186a:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8001a40 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800186e:	f04f 6870 	mov.w	r8, #251658240	; 0xf000000
 8001872:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 8001876:	fa98 f9a8 	rbit	r9, r8
 800187a:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 800187e:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8001882:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 8001886:	fa96 fca6 	rbit	ip, r6
 800188a:	f647 7bc0 	movw	fp, #32704	; 0x7fc0
 800188e:	fabc fc8c 	clz	ip, ip
 8001892:	fa9b fbab 	rbit	fp, fp
 8001896:	f44f 3340 	mov.w	r3, #196608	; 0x30000
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800189a:	fabb fb8b 	clz	fp, fp
 800189e:	fa93 f3a3 	rbit	r3, r3
 80018a2:	fab3 fa83 	clz	sl, r3
 80018a6:	fa98 f8a8 	rbit	r8, r8
 80018aa:	fab8 f888 	clz	r8, r8
 80018ae:	fa96 f6a6 	rbit	r6, r6
 80018b2:	6863      	ldr	r3, [r4, #4]
 80018b4:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 80018b8:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 80018bc:	fab6 f686 	clz	r6, r6
 80018c0:	fa03 f10b 	lsl.w	r1, r3, fp
 80018c4:	6923      	ldr	r3, [r4, #16]
 80018c6:	fa20 f009 	lsr.w	r0, r0, r9
 80018ca:	fa22 f20c 	lsr.w	r2, r2, ip
 80018ce:	fa03 f30a 	lsl.w	r3, r3, sl
 80018d2:	430b      	orrs	r3, r1
 80018d4:	fa00 f108 	lsl.w	r1, r0, r8
 80018d8:	4319      	orrs	r1, r3
 80018da:	fa02 f306 	lsl.w	r3, r2, r6
 80018de:	430b      	orrs	r3, r1
 80018e0:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
    }  
         
    /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80018e4:	01ba      	lsls	r2, r7, #6
 80018e6:	d526      	bpl.n	8001936 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80018e8:	f647 7ec0 	movw	lr, #32704	; 0x7fc0
 80018ec:	fa9e feae 	rbit	lr, lr
 80018f0:	f44f 3040 	mov.w	r0, #196608	; 0x30000
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80018f4:	fabe fe8e 	clz	lr, lr
 80018f8:	fa90 f0a0 	rbit	r0, r0
 80018fc:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8001900:	fab0 f780 	clz	r7, r0
 8001904:	fa92 f2a2 	rbit	r2, r2
 8001908:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800190c:	fab2 f682 	clz	r6, r2
 8001910:	fa93 f3a3 	rbit	r3, r3
 8001914:	fab3 f183 	clz	r1, r3
 8001918:	6920      	ldr	r0, [r4, #16]
 800191a:	6863      	ldr	r3, [r4, #4]
 800191c:	68e2      	ldr	r2, [r4, #12]
 800191e:	40b8      	lsls	r0, r7
 8001920:	fa03 f30e 	lsl.w	r3, r3, lr
 8001924:	40b2      	lsls	r2, r6
 8001926:	4303      	orrs	r3, r0
 8001928:	431a      	orrs	r2, r3
 800192a:	68a3      	ldr	r3, [r4, #8]
 800192c:	408b      	lsls	r3, r1
 800192e:	4313      	orrs	r3, r2
 8001930:	4a43      	ldr	r2, [pc, #268]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8001932:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    } 
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001936:	4e42      	ldr	r6, [pc, #264]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8001938:	6833      	ldr	r3, [r6, #0]
 800193a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800193e:	6033      	str	r3, [r6, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001940:	f7fe fd10 	bl	8000364 <HAL_GetTick>
 8001944:	4607      	mov	r7, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001946:	6833      	ldr	r3, [r6, #0]
 8001948:	011b      	lsls	r3, r3, #4
 800194a:	f53f aede 	bmi.w	800170a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800194e:	f7fe fd09 	bl	8000364 <HAL_GetTick>
 8001952:	1bc0      	subs	r0, r0, r7
 8001954:	2864      	cmp	r0, #100	; 0x64
 8001956:	d9f6      	bls.n	8001946 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8001958:	e5c6      	b.n	80014e8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 800195a:	4d39      	ldr	r5, [pc, #228]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 800195c:	682b      	ldr	r3, [r5, #0]
 800195e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001962:	602b      	str	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001964:	f7fe fcfe 	bl	8000364 <HAL_GetTick>
 8001968:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800196a:	682b      	ldr	r3, [r5, #0]
 800196c:	009f      	lsls	r7, r3, #2
 800196e:	d45d      	bmi.n	8001a2c <HAL_RCCEx_PeriphCLKConfig+0x600>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001970:	6825      	ldr	r5, [r4, #0]
 8001972:	032e      	lsls	r6, r5, #12
 8001974:	d460      	bmi.n	8001a38 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8001976:	02e8      	lsls	r0, r5, #11
 8001978:	d464      	bmi.n	8001a44 <HAL_RCCEx_PeriphCLKConfig+0x618>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800197a:	02a9      	lsls	r1, r5, #10
 800197c:	f100 80ad 	bmi.w	8001ada <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001980:	072a      	lsls	r2, r5, #28
 8001982:	d545      	bpl.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8001984:	4f2e      	ldr	r7, [pc, #184]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8001986:	f04f 6570 	mov.w	r5, #251658240	; 0xf000000
 800198a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800198e:	fa95 fca5 	rbit	ip, r5
 8001992:	f44f 3640 	mov.w	r6, #196608	; 0x30000
 8001996:	fabc fc8c 	clz	ip, ip
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 800199a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800199e:	fa96 f8a6 	rbit	r8, r6
 80019a2:	f647 79c0 	movw	r9, #32704	; 0x7fc0
 80019a6:	fab8 f888 	clz	r8, r8
 80019aa:	fa99 f9a9 	rbit	r9, r9
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80019ae:	fab9 f989 	clz	r9, r9
 80019b2:	fa96 f6a6 	rbit	r6, r6
 80019b6:	fab6 f686 	clz	r6, r6
 80019ba:	fa95 f5a5 	rbit	r5, r5
 80019be:	f04f 4ee0 	mov.w	lr, #1879048192	; 0x70000000
 80019c2:	fab5 f585 	clz	r5, r5
 80019c6:	fa9e feae 	rbit	lr, lr
 80019ca:	6963      	ldr	r3, [r4, #20]
 80019cc:	fabe fe8e 	clz	lr, lr
 80019d0:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 80019d4:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80019d8:	fa03 f109 	lsl.w	r1, r3, r9
 80019dc:	69e3      	ldr	r3, [r4, #28]
 80019de:	fa20 f008 	lsr.w	r0, r0, r8
 80019e2:	fa22 f20c 	lsr.w	r2, r2, ip
 80019e6:	fa03 fe0e 	lsl.w	lr, r3, lr
 80019ea:	fa02 f305 	lsl.w	r3, r2, r5
 80019ee:	ea41 0e0e 	orr.w	lr, r1, lr
 80019f2:	fa00 f106 	lsl.w	r1, r0, r6
 80019f6:	ea4e 0101 	orr.w	r1, lr, r1
 80019fa:	430b      	orrs	r3, r1
 80019fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001a00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001a10:	4c0b      	ldr	r4, [pc, #44]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8001a12:	6823      	ldr	r3, [r4, #0]
 8001a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a18:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a1a:	f7fe fca3 	bl	8000364 <HAL_GetTick>
 8001a1e:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001a20:	6823      	ldr	r3, [r4, #0]
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	f140 809c 	bpl.w	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x734>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001a28:	2000      	movs	r0, #0
 8001a2a:	e0a0      	b.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x742>
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001a2c:	f7fe fc9a 	bl	8000364 <HAL_GetTick>
 8001a30:	1b80      	subs	r0, r0, r6
 8001a32:	2864      	cmp	r0, #100	; 0x64
 8001a34:	d999      	bls.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x53e>
 8001a36:	e557      	b.n	80014e8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001a38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a3a:	b133      	cbz	r3, 8001a4a <HAL_RCCEx_PeriphCLKConfig+0x61e>
 8001a3c:	e79b      	b.n	8001976 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8001a3e:	bf00      	nop
 8001a40:	40023800 	.word	0x40023800
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001a44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d197      	bne.n	800197a <HAL_RCCEx_PeriphCLKConfig+0x54e>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8001a4a:	4f4a      	ldr	r7, [pc, #296]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x748>)
 8001a4c:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
 8001a50:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001a54:	fa9c f9ac 	rbit	r9, ip
 8001a58:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8001a5c:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8001a60:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001a64:	fa96 fea6 	rbit	lr, r6
 8001a68:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 8001a6c:	fabe fe8e 	clz	lr, lr
 8001a70:	fa9a faaa 	rbit	sl, sl
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001a74:	faba fa8a 	clz	sl, sl
 8001a78:	fa9c fcac 	rbit	ip, ip
 8001a7c:	f04f 6870 	mov.w	r8, #251658240	; 0xf000000
 8001a80:	fabc fc8c 	clz	ip, ip
 8001a84:	fa98 f8a8 	rbit	r8, r8
 8001a88:	fab8 f888 	clz	r8, r8
 8001a8c:	fa96 f6a6 	rbit	r6, r6
 8001a90:	69a1      	ldr	r1, [r4, #24]
 8001a92:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8001a96:	6963      	ldr	r3, [r4, #20]
 8001a98:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8001a9c:	fa01 f808 	lsl.w	r8, r1, r8
 8001aa0:	fa20 f009 	lsr.w	r0, r0, r9
 8001aa4:	fa03 f30a 	lsl.w	r3, r3, sl
 8001aa8:	fa22 f20e 	lsr.w	r2, r2, lr
 8001aac:	fab6 f686 	clz	r6, r6
 8001ab0:	fa00 f10c 	lsl.w	r1, r0, ip
 8001ab4:	ea43 0308 	orr.w	r3, r3, r8
 8001ab8:	4319      	orrs	r1, r3
 8001aba:	fa02 f306 	lsl.w	r3, r2, r6
 8001abe:	430b      	orrs	r3, r1
 8001ac0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001ac4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ac8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001aca:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001ace:	3a01      	subs	r2, #1
 8001ad0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001ad4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001ad8:	e74f      	b.n	800197a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001ada:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001adc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ae0:	f47f af4e 	bne.w	8001980 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8001ae4:	4f23      	ldr	r7, [pc, #140]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x748>)
 8001ae6:	f04f 6c70 	mov.w	ip, #251658240	; 0xf000000
 8001aea:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001aee:	fa9c f9ac 	rbit	r9, ip
 8001af2:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8001af6:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8001afa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001afe:	fa96 fea6 	rbit	lr, r6
 8001b02:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 8001b06:	fabe fe8e 	clz	lr, lr
 8001b0a:	fa9a faaa 	rbit	sl, sl
 8001b0e:	f44f 3840 	mov.w	r8, #196608	; 0x30000
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001b12:	faba fa8a 	clz	sl, sl
 8001b16:	fa98 f8a8 	rbit	r8, r8
 8001b1a:	fab8 f888 	clz	r8, r8
 8001b1e:	fa9c fcac 	rbit	ip, ip
 8001b22:	fabc fc8c 	clz	ip, ip
 8001b26:	fa96 f6a6 	rbit	r6, r6
 8001b2a:	6a21      	ldr	r1, [r4, #32]
 8001b2c:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8001b30:	6963      	ldr	r3, [r4, #20]
 8001b32:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8001b36:	fa01 f808 	lsl.w	r8, r1, r8
 8001b3a:	fa20 f009 	lsr.w	r0, r0, r9
 8001b3e:	fa03 f30a 	lsl.w	r3, r3, sl
 8001b42:	fab6 f686 	clz	r6, r6
 8001b46:	fa00 f10c 	lsl.w	r1, r0, ip
 8001b4a:	fa22 f20e 	lsr.w	r2, r2, lr
 8001b4e:	ea43 0308 	orr.w	r3, r3, r8
 8001b52:	4319      	orrs	r1, r3
 8001b54:	fa02 f306 	lsl.w	r3, r2, r6
 8001b58:	430b      	orrs	r3, r1
 8001b5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001b5e:	e70f      	b.n	8001980 <HAL_RCCEx_PeriphCLKConfig+0x554>
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001b60:	f7fe fc00 	bl	8000364 <HAL_GetTick>
 8001b64:	1b40      	subs	r0, r0, r5
 8001b66:	2864      	cmp	r0, #100	; 0x64
 8001b68:	f67f af5a 	bls.w	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8001b6c:	e4bc      	b.n	80014e8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 8001b6e:	b003      	add	sp, #12
 8001b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b74:	40023800 	.word	0x40023800

08001b78 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b78:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b7a:	4604      	mov	r4, r0
 8001b7c:	2800      	cmp	r0, #0
 8001b7e:	d04f      	beq.n	8001c20 <HAL_SPI_Init+0xa8>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b84:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8001b88:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b8c:	b91b      	cbnz	r3, 8001b96 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b8e:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b92:	f001 fd5d 	bl	8003650 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b96:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b98:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b9a:	68e2      	ldr	r2, [r4, #12]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b9c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ba0:	680b      	ldr	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ba2:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ba6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001baa:	600b      	str	r3, [r1, #0]
 8001bac:	f04f 0300 	mov.w	r3, #0

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001bb0:	d903      	bls.n	8001bba <HAL_SPI_Init+0x42>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001bb2:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001bb4:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8001bb8:	e001      	b.n	8001bbe <HAL_SPI_Init+0x46>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001bba:	f44f 5080 	mov.w	r0, #4096	; 0x1000

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bbe:	bf18      	it	ne
 8001bc0:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001bc2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001bc4:	b92b      	cbnz	r3, 8001bd2 <HAL_SPI_Init+0x5a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001bc6:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001bca:	bf8c      	ite	hi
 8001bcc:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001bce:	2301      	movls	r3, #1
 8001bd0:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001bd2:	68a5      	ldr	r5, [r4, #8]
 8001bd4:	6866      	ldr	r6, [r4, #4]
 8001bd6:	69a3      	ldr	r3, [r4, #24]
 8001bd8:	432e      	orrs	r6, r5
 8001bda:	6925      	ldr	r5, [r4, #16]
 8001bdc:	432e      	orrs	r6, r5
 8001bde:	6965      	ldr	r5, [r4, #20]
 8001be0:	432e      	orrs	r6, r5
 8001be2:	69e5      	ldr	r5, [r4, #28]
 8001be4:	432e      	orrs	r6, r5
 8001be6:	6a25      	ldr	r5, [r4, #32]
 8001be8:	432e      	orrs	r6, r5
 8001bea:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8001bec:	432e      	orrs	r6, r5
 8001bee:	f403 7500 	and.w	r5, r3, #512	; 0x200
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001bf2:	0c1b      	lsrs	r3, r3, #16
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001bf4:	4335      	orrs	r5, r6
 8001bf6:	600d      	str	r5, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001bf8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001bfa:	432a      	orrs	r2, r5
 8001bfc:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001bfe:	4315      	orrs	r5, r2
 8001c00:	f003 0204 	and.w	r2, r3, #4
 8001c04:	ea45 0302 	orr.w	r3, r5, r2
 8001c08:	4303      	orrs	r3, r0
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c0a:	2000      	movs	r0, #0
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001c0c:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c0e:	69cb      	ldr	r3, [r1, #28]
 8001c10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c14:	61cb      	str	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 8001c16:	2301      	movs	r3, #1
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c18:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001c1a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 8001c1e:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 8001c20:	2001      	movs	r0, #1

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
}
 8001c22:	bd70      	pop	{r4, r5, r6, pc}

08001c24 <HAL_SPI_IRQHandler>:
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
  uint32_t itsource = hspi->Instance->CR2;
 8001c24:	6803      	ldr	r3, [r0, #0]
 8001c26:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8001c28:	689a      	ldr	r2, [r3, #8]
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001c2a:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
  uint32_t itflag   = hspi->Instance->SR;

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8001c2c:	f002 0541 	and.w	r5, r2, #65	; 0x41
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001c30:	b085      	sub	sp, #20
 8001c32:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
  uint32_t itflag   = hspi->Instance->SR;

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8001c34:	2d01      	cmp	r5, #1
 8001c36:	d103      	bne.n	8001c40 <HAL_SPI_IRQHandler+0x1c>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8001c38:	064d      	lsls	r5, r1, #25
 8001c3a:	d501      	bpl.n	8001c40 <HAL_SPI_IRQHandler+0x1c>
  {
    hspi->RxISR(hspi);
 8001c3c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001c3e:	e005      	b.n	8001c4c <HAL_SPI_IRQHandler+0x28>
    return;
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8001c40:	0795      	lsls	r5, r2, #30
 8001c42:	d505      	bpl.n	8001c50 <HAL_SPI_IRQHandler+0x2c>
 8001c44:	0608      	lsls	r0, r1, #24
 8001c46:	d503      	bpl.n	8001c50 <HAL_SPI_IRQHandler+0x2c>
  {
    hspi->TxISR(hspi);
 8001c48:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	4798      	blx	r3
    return;
 8001c4e:	e056      	b.n	8001cfe <HAL_SPI_IRQHandler+0xda>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8001c50:	f412 7fb0 	tst.w	r2, #352	; 0x160
 8001c54:	d053      	beq.n	8001cfe <HAL_SPI_IRQHandler+0xda>
 8001c56:	068d      	lsls	r5, r1, #26
 8001c58:	d551      	bpl.n	8001cfe <HAL_SPI_IRQHandler+0xda>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((itflag & SPI_FLAG_OVR) != RESET)
 8001c5a:	0650      	lsls	r0, r2, #25
 8001c5c:	d516      	bpl.n	8001c8c <HAL_SPI_IRQHandler+0x68>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001c5e:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8001c62:	2500      	movs	r5, #0
 8001c64:	2803      	cmp	r0, #3
 8001c66:	d00a      	beq.n	8001c7e <HAL_SPI_IRQHandler+0x5a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001c68:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001c6a:	f040 0004 	orr.w	r0, r0, #4
 8001c6e:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c70:	9500      	str	r5, [sp, #0]
 8001c72:	68d8      	ldr	r0, [r3, #12]
 8001c74:	9000      	str	r0, [sp, #0]
 8001c76:	6898      	ldr	r0, [r3, #8]
 8001c78:	9000      	str	r0, [sp, #0]
 8001c7a:	9800      	ldr	r0, [sp, #0]
 8001c7c:	e006      	b.n	8001c8c <HAL_SPI_IRQHandler+0x68>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c7e:	9501      	str	r5, [sp, #4]
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	9201      	str	r2, [sp, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	9301      	str	r3, [sp, #4]
 8001c88:	9b01      	ldr	r3, [sp, #4]
        return;
 8001c8a:	e038      	b.n	8001cfe <HAL_SPI_IRQHandler+0xda>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((itflag & SPI_FLAG_MODF) != RESET)
 8001c8c:	0695      	lsls	r5, r2, #26
 8001c8e:	d50c      	bpl.n	8001caa <HAL_SPI_IRQHandler+0x86>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001c90:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001c92:	f040 0001 	orr.w	r0, r0, #1
 8001c96:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001c98:	2000      	movs	r0, #0
 8001c9a:	9002      	str	r0, [sp, #8]
 8001c9c:	6898      	ldr	r0, [r3, #8]
 8001c9e:	9002      	str	r0, [sp, #8]
 8001ca0:	6818      	ldr	r0, [r3, #0]
 8001ca2:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8001ca6:	6018      	str	r0, [r3, #0]
 8001ca8:	9802      	ldr	r0, [sp, #8]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((itflag & SPI_FLAG_FRE) != RESET)
 8001caa:	05d0      	lsls	r0, r2, #23
 8001cac:	d508      	bpl.n	8001cc0 <HAL_SPI_IRQHandler+0x9c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001cae:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001cb0:	f042 0208 	orr.w	r2, r2, #8
 8001cb4:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	9203      	str	r2, [sp, #12]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	9203      	str	r2, [sp, #12]
 8001cbe:	9a03      	ldr	r2, [sp, #12]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001cc0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001cc2:	b1e2      	cbz	r2, 8001cfe <HAL_SPI_IRQHandler+0xda>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001cca:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001cd2:	078a      	lsls	r2, r1, #30
 8001cd4:	d010      	beq.n	8001cf8 <HAL_SPI_IRQHandler+0xd4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001cd6:	685a      	ldr	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58

      hspi->State = HAL_SPI_STATE_READY;
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001cda:	f022 0203 	bic.w	r2, r2, #3
 8001cde:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001ce0:	b118      	cbz	r0, 8001cea <HAL_SPI_IRQHandler+0xc6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001ce2:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <HAL_SPI_IRQHandler+0xe0>)
 8001ce4:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8001ce6:	f7fe ff17 	bl	8000b18 <HAL_DMA_Abort_IT>
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001cea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001cec:	b138      	cbz	r0, 8001cfe <HAL_SPI_IRQHandler+0xda>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001cee:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <HAL_SPI_IRQHandler+0xe0>)
 8001cf0:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8001cf2:	f7fe ff11 	bl	8000b18 <HAL_DMA_Abort_IT>
 8001cf6:	e002      	b.n	8001cfe <HAL_SPI_IRQHandler+0xda>
        }
      }
      else
      {
        /* Call user error callback */
        HAL_SPI_ErrorCallback(hspi);
 8001cf8:	4620      	mov	r0, r4
 8001cfa:	f000 fed7 	bl	8002aac <HAL_SPI_ErrorCallback>
      }
    }
    return;
  }
}
 8001cfe:	b005      	add	sp, #20
 8001d00:	bd30      	pop	{r4, r5, pc}
 8001d02:	bf00      	nop
 8001d04:	08001d09 	.word	0x08001d09

08001d08 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001d08:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d0a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8001d12:	87c3      	strh	r3, [r0, #62]	; 0x3e

  HAL_SPI_ErrorCallback(hspi);
 8001d14:	f000 feca 	bl	8002aac <HAL_SPI_ErrorCallback>
 8001d18:	bd08      	pop	{r3, pc}

08001d1a <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d1a:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
  
  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8001d1c:	b151      	cbz	r1, 8001d34 <HAL_TIM_Encoder_Start_IT+0x1a>
 8001d1e:	2904      	cmp	r1, #4
 8001d20:	d114      	bne.n	8001d4c <HAL_TIM_Encoder_Start_IT+0x32>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001d22:	6a1a      	ldr	r2, [r3, #32]
 8001d24:	f022 0210 	bic.w	r2, r2, #16
 8001d28:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001d2a:	6a1a      	ldr	r2, [r3, #32]
 8001d2c:	f042 0210 	orr.w	r2, r2, #16
 8001d30:	621a      	str	r2, [r3, #32]
 8001d32:	e01f      	b.n	8001d74 <HAL_TIM_Encoder_Start_IT+0x5a>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001d34:	6a1a      	ldr	r2, [r3, #32]
 8001d36:	f022 0201 	bic.w	r2, r2, #1
 8001d3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001d3c:	6a1a      	ldr	r2, [r3, #32]
 8001d3e:	f042 0201 	orr.w	r2, r2, #1
 8001d42:	621a      	str	r2, [r3, #32]
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001d44:	68da      	ldr	r2, [r3, #12]
 8001d46:	f042 0202 	orr.w	r2, r2, #2
 8001d4a:	e016      	b.n	8001d7a <HAL_TIM_Encoder_Start_IT+0x60>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001d4c:	6a1a      	ldr	r2, [r3, #32]
 8001d4e:	f022 0201 	bic.w	r2, r2, #1
 8001d52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001d54:	6a1a      	ldr	r2, [r3, #32]
 8001d56:	f042 0201 	orr.w	r2, r2, #1
 8001d5a:	621a      	str	r2, [r3, #32]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001d5c:	6a1a      	ldr	r2, [r3, #32]
 8001d5e:	f022 0210 	bic.w	r2, r2, #16
 8001d62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001d64:	6a1a      	ldr	r2, [r3, #32]
 8001d66:	f042 0210 	orr.w	r2, r2, #16
 8001d6a:	621a      	str	r2, [r3, #32]
    }  
    default :
    {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	f042 0202 	orr.w	r2, r2, #2
 8001d72:	60da      	str	r2, [r3, #12]
     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001d74:	68da      	ldr	r2, [r3, #12]
 8001d76:	f042 0204 	orr.w	r2, r2, #4
 8001d7a:	60da      	str	r2, [r3, #12]
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
  
  /* Return function status */
  return HAL_OK;
}
 8001d7c:	2000      	movs	r0, #0
     break; 
    }
  }
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	f042 0201 	orr.w	r2, r2, #1
 8001d84:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
}
 8001d86:	4770      	bx	lr

08001d88 <HAL_TIM_PeriodElapsedCallback>:
 8001d88:	4770      	bx	lr

08001d8a <HAL_TIM_OC_DelayElapsedCallback>:
 8001d8a:	4770      	bx	lr

08001d8c <HAL_TIM_IC_CaptureCallback>:
 8001d8c:	4770      	bx	lr

08001d8e <HAL_TIM_PWM_PulseFinishedCallback>:
 8001d8e:	4770      	bx	lr

08001d90 <HAL_TIM_TriggerCallback>:
 8001d90:	4770      	bx	lr

08001d92 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d92:	6803      	ldr	r3, [r0, #0]
 8001d94:	691a      	ldr	r2, [r3, #16]
 8001d96:	0791      	lsls	r1, r2, #30
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d98:	b510      	push	{r4, lr}
 8001d9a:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d9c:	d514      	bpl.n	8001dc8 <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001d9e:	68da      	ldr	r2, [r3, #12]
 8001da0:	0792      	lsls	r2, r2, #30
 8001da2:	d511      	bpl.n	8001dc8 <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001da4:	f06f 0202 	mvn.w	r2, #2
 8001da8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001daa:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8001dac:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dae:	7602      	strb	r2, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8001db0:	0799      	lsls	r1, r3, #30
 8001db2:	d002      	beq.n	8001dba <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001db4:	f7ff ffea 	bl	8001d8c <HAL_TIM_IC_CaptureCallback>
 8001db8:	e004      	b.n	8001dc4 <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dba:	f7ff ffe6 	bl	8001d8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dbe:	4620      	mov	r0, r4
 8001dc0:	f7ff ffe5 	bl	8001d8e <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dc8:	6823      	ldr	r3, [r4, #0]
 8001dca:	691a      	ldr	r2, [r3, #16]
 8001dcc:	0752      	lsls	r2, r2, #29
 8001dce:	d516      	bpl.n	8001dfe <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	0750      	lsls	r0, r2, #29
 8001dd4:	d513      	bpl.n	8001dfe <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dd6:	f06f 0204 	mvn.w	r2, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001dda:	4620      	mov	r0, r4
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dde:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001de0:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001de2:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001de4:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001de8:	d002      	beq.n	8001df0 <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001dea:	f7ff ffcf 	bl	8001d8c <HAL_TIM_IC_CaptureCallback>
 8001dee:	e004      	b.n	8001dfa <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df0:	f7ff ffcb 	bl	8001d8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df4:	4620      	mov	r0, r4
 8001df6:	f7ff ffca 	bl	8001d8e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001dfe:	6823      	ldr	r3, [r4, #0]
 8001e00:	691a      	ldr	r2, [r3, #16]
 8001e02:	0711      	lsls	r1, r2, #28
 8001e04:	d515      	bpl.n	8001e32 <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001e06:	68da      	ldr	r2, [r3, #12]
 8001e08:	0712      	lsls	r2, r2, #28
 8001e0a:	d512      	bpl.n	8001e32 <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e0c:	f06f 0208 	mvn.w	r2, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001e10:	4620      	mov	r0, r4
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e14:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001e16:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e18:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001e1a:	079b      	lsls	r3, r3, #30
 8001e1c:	d002      	beq.n	8001e24 <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001e1e:	f7ff ffb5 	bl	8001d8c <HAL_TIM_IC_CaptureCallback>
 8001e22:	e004      	b.n	8001e2e <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e24:	f7ff ffb1 	bl	8001d8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001e28:	4620      	mov	r0, r4
 8001e2a:	f7ff ffb0 	bl	8001d8e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e32:	6823      	ldr	r3, [r4, #0]
 8001e34:	691a      	ldr	r2, [r3, #16]
 8001e36:	06d0      	lsls	r0, r2, #27
 8001e38:	d516      	bpl.n	8001e68 <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001e3a:	68da      	ldr	r2, [r3, #12]
 8001e3c:	06d1      	lsls	r1, r2, #27
 8001e3e:	d513      	bpl.n	8001e68 <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e40:	f06f 0210 	mvn.w	r2, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001e44:	4620      	mov	r0, r4
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e48:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8001e4a:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e4c:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8001e4e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001e52:	d002      	beq.n	8001e5a <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001e54:	f7ff ff9a 	bl	8001d8c <HAL_TIM_IC_CaptureCallback>
 8001e58:	e004      	b.n	8001e64 <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e5a:	f7ff ff96 	bl	8001d8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e5e:	4620      	mov	r0, r4
 8001e60:	f7ff ff95 	bl	8001d8e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e64:	2300      	movs	r3, #0
 8001e66:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e68:	6823      	ldr	r3, [r4, #0]
 8001e6a:	691a      	ldr	r2, [r3, #16]
 8001e6c:	07d2      	lsls	r2, r2, #31
 8001e6e:	d508      	bpl.n	8001e82 <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	07d0      	lsls	r0, r2, #31
 8001e74:	d505      	bpl.n	8001e82 <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e76:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e7a:	4620      	mov	r0, r4
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e7c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e7e:	f7ff ff83 	bl	8001d88 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e82:	6823      	ldr	r3, [r4, #0]
 8001e84:	691a      	ldr	r2, [r3, #16]
 8001e86:	0611      	lsls	r1, r2, #24
 8001e88:	d508      	bpl.n	8001e9c <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001e8a:	68da      	ldr	r2, [r3, #12]
 8001e8c:	0612      	lsls	r2, r2, #24
 8001e8e:	d505      	bpl.n	8001e9c <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e90:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001e94:	4620      	mov	r0, r4
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e96:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001e98:	f000 fad7 	bl	800244a <HAL_TIMEx_BreakCallback>
    }
  }
  
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001e9c:	6823      	ldr	r3, [r4, #0]
 8001e9e:	691a      	ldr	r2, [r3, #16]
 8001ea0:	05d0      	lsls	r0, r2, #23
 8001ea2:	d508      	bpl.n	8001eb6 <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	0611      	lsls	r1, r2, #24
 8001ea8:	d505      	bpl.n	8001eb6 <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001eaa:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001eae:	4620      	mov	r0, r4
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001eb0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001eb2:	f000 faca 	bl	800244a <HAL_TIMEx_BreakCallback>
    }
  }

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001eb6:	6823      	ldr	r3, [r4, #0]
 8001eb8:	691a      	ldr	r2, [r3, #16]
 8001eba:	0652      	lsls	r2, r2, #25
 8001ebc:	d508      	bpl.n	8001ed0 <HAL_TIM_IRQHandler+0x13e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	0650      	lsls	r0, r2, #25
 8001ec2:	d505      	bpl.n	8001ed0 <HAL_TIM_IRQHandler+0x13e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ec4:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001ec8:	4620      	mov	r0, r4
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001eca:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001ecc:	f7ff ff60 	bl	8001d90 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ed0:	6823      	ldr	r3, [r4, #0]
 8001ed2:	691a      	ldr	r2, [r3, #16]
 8001ed4:	0691      	lsls	r1, r2, #26
 8001ed6:	d50a      	bpl.n	8001eee <HAL_TIM_IRQHandler+0x15c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001ed8:	68da      	ldr	r2, [r3, #12]
 8001eda:	0692      	lsls	r2, r2, #26
 8001edc:	d507      	bpl.n	8001eee <HAL_TIM_IRQHandler+0x15c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ede:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001ee2:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ee4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 8001ee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 8001eea:	f000 baad 	b.w	8002448 <HAL_TIMEx_CommutationCallback>
 8001eee:	bd10      	pop	{r4, pc}

08001ef0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001ef0:	4a2e      	ldr	r2, [pc, #184]	; (8001fac <TIM_Base_SetConfig+0xbc>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8001ef2:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001ef4:	4290      	cmp	r0, r2
 8001ef6:	d012      	beq.n	8001f1e <TIM_Base_SetConfig+0x2e>
 8001ef8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001efc:	d00f      	beq.n	8001f1e <TIM_Base_SetConfig+0x2e>
 8001efe:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001f02:	4290      	cmp	r0, r2
 8001f04:	d00b      	beq.n	8001f1e <TIM_Base_SetConfig+0x2e>
 8001f06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f0a:	4290      	cmp	r0, r2
 8001f0c:	d007      	beq.n	8001f1e <TIM_Base_SetConfig+0x2e>
 8001f0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f12:	4290      	cmp	r0, r2
 8001f14:	d003      	beq.n	8001f1e <TIM_Base_SetConfig+0x2e>
 8001f16:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001f1a:	4290      	cmp	r0, r2
 8001f1c:	d118      	bne.n	8001f50 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001f1e:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001f24:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001f26:	4a21      	ldr	r2, [pc, #132]	; (8001fac <TIM_Base_SetConfig+0xbc>)
 8001f28:	4290      	cmp	r0, r2
 8001f2a:	d037      	beq.n	8001f9c <TIM_Base_SetConfig+0xac>
 8001f2c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001f30:	d034      	beq.n	8001f9c <TIM_Base_SetConfig+0xac>
 8001f32:	4a1f      	ldr	r2, [pc, #124]	; (8001fb0 <TIM_Base_SetConfig+0xc0>)
 8001f34:	4290      	cmp	r0, r2
 8001f36:	d031      	beq.n	8001f9c <TIM_Base_SetConfig+0xac>
 8001f38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f3c:	4290      	cmp	r0, r2
 8001f3e:	d02d      	beq.n	8001f9c <TIM_Base_SetConfig+0xac>
 8001f40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f44:	4290      	cmp	r0, r2
 8001f46:	d029      	beq.n	8001f9c <TIM_Base_SetConfig+0xac>
 8001f48:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001f4c:	4290      	cmp	r0, r2
 8001f4e:	d025      	beq.n	8001f9c <TIM_Base_SetConfig+0xac>
 8001f50:	4a18      	ldr	r2, [pc, #96]	; (8001fb4 <TIM_Base_SetConfig+0xc4>)
 8001f52:	4290      	cmp	r0, r2
 8001f54:	d022      	beq.n	8001f9c <TIM_Base_SetConfig+0xac>
 8001f56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f5a:	4290      	cmp	r0, r2
 8001f5c:	d01e      	beq.n	8001f9c <TIM_Base_SetConfig+0xac>
 8001f5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f62:	4290      	cmp	r0, r2
 8001f64:	d01a      	beq.n	8001f9c <TIM_Base_SetConfig+0xac>
 8001f66:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001f6a:	4290      	cmp	r0, r2
 8001f6c:	d016      	beq.n	8001f9c <TIM_Base_SetConfig+0xac>
 8001f6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f72:	4290      	cmp	r0, r2
 8001f74:	d012      	beq.n	8001f9c <TIM_Base_SetConfig+0xac>
 8001f76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f7a:	4290      	cmp	r0, r2
 8001f7c:	d00e      	beq.n	8001f9c <TIM_Base_SetConfig+0xac>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8001f7e:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f80:	688b      	ldr	r3, [r1, #8]
 8001f82:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001f84:	680b      	ldr	r3, [r1, #0]
 8001f86:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001f88:	4b08      	ldr	r3, [pc, #32]	; (8001fac <TIM_Base_SetConfig+0xbc>)
 8001f8a:	4298      	cmp	r0, r3
 8001f8c:	d00b      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb6>
 8001f8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f92:	4298      	cmp	r0, r3
 8001f94:	d007      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f96:	2301      	movs	r3, #1
 8001f98:	6143      	str	r3, [r0, #20]
}
 8001f9a:	4770      	bx	lr
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fa0:	68ca      	ldr	r2, [r1, #12]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	e7eb      	b.n	8001f7e <TIM_Base_SetConfig+0x8e>
  TIMx->PSC = (uint32_t)Structure->Prescaler;
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fa6:	690b      	ldr	r3, [r1, #16]
 8001fa8:	6303      	str	r3, [r0, #48]	; 0x30
 8001faa:	e7f4      	b.n	8001f96 <TIM_Base_SetConfig+0xa6>
 8001fac:	40010000 	.word	0x40010000
 8001fb0:	40000400 	.word	0x40000400
 8001fb4:	40014000 	.word	0x40014000

08001fb8 <HAL_TIM_PWM_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fb8:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001fba:	4604      	mov	r4, r0
 8001fbc:	b1a0      	cbz	r0, 8001fe8 <HAL_TIM_PWM_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001fbe:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001fc2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001fc6:	b91b      	cbnz	r3, 8001fd0 <HAL_TIM_PWM_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;  
 8001fc8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001fcc:	f001 fbce 	bl	800376c <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 8001fd0:	2302      	movs	r3, #2
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001fd2:	6820      	ldr	r0, [r4, #0]
 8001fd4:	1d21      	adds	r1, r4, #4
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 8001fd6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001fda:	f7ff ff89 	bl	8001ef0 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001fde:	2301      	movs	r3, #1
  
  return HAL_OK;
 8001fe0:	2000      	movs	r0, #0
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001fe2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8001fe6:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8001fe8:	2001      	movs	r0, #1
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}  
 8001fea:	bd10      	pop	{r4, pc}

08001fec <HAL_TIM_Encoder_Init>:
  *                the configuration information for TIM module.
  * @param  sConfig: TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 8001fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fee:	460c      	mov	r4, r1
  uint32_t tmpsmcr = 0;
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001ff0:	4605      	mov	r5, r0
 8001ff2:	2800      	cmp	r0, #0
 8001ff4:	d043      	beq.n	800207e <HAL_TIM_Encoder_Init+0x92>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001ff6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001ffa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ffe:	b91b      	cbnz	r3, 8002008 <HAL_TIM_Encoder_Init+0x1c>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;  
 8002000:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002004:	f001 fb52 	bl	80036ac <HAL_TIM_Encoder_MspInit>
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002008:	4629      	mov	r1, r5
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 800200a:	2302      	movs	r3, #2
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800200c:	f851 0b04 	ldr.w	r0, [r1], #4
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 8002010:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002014:	6883      	ldr	r3, [r0, #8]
 8002016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800201a:	f023 0307 	bic.w	r3, r3, #7
 800201e:	6083      	str	r3, [r0, #8]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 8002020:	f7ff ff66 	bl	8001ef0 <TIM_Base_SetConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002024:	6828      	ldr	r0, [r5, #0]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002026:	6823      	ldr	r3, [r4, #0]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002028:	6887      	ldr	r7, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800202a:	6981      	ldr	r1, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800202c:	431f      	orrs	r7, r3
 800202e:	69a2      	ldr	r2, [r4, #24]
 8002030:	f421 7340 	bic.w	r3, r1, #768	; 0x300
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 8002034:	6921      	ldr	r1, [r4, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002036:	6a06      	ldr	r6, [r0, #32]
 8002038:	f023 0303 	bic.w	r3, r3, #3
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 800203c:	0109      	lsls	r1, r1, #4
 800203e:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
 8002042:	68a3      	ldr	r3, [r4, #8]
 8002044:	4313      	orrs	r3, r2
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 8002046:	69e2      	ldr	r2, [r4, #28]
 8002048:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 800204c:	68e2      	ldr	r2, [r4, #12]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800204e:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 8002052:	430a      	orrs	r2, r1
 8002054:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002056:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 800205a:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 800205e:	6961      	ldr	r1, [r4, #20]
 8002060:	4313      	orrs	r3, r2
 8002062:	f026 02aa 	bic.w	r2, r6, #170	; 0xaa
 8002066:	ea42 1201 	orr.w	r2, r2, r1, lsl #4

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 800206a:	6861      	ldr	r1, [r4, #4]
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800206c:	6087      	str	r7, [r0, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 800206e:	430a      	orrs	r2, r1
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002070:	6183      	str	r3, [r0, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002072:	2301      	movs	r3, #1

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002074:	6202      	str	r2, [r0, #32]
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
 8002076:	2000      	movs	r0, #0

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002078:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  
  return HAL_OK;
 800207c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t tmpccer = 0;
  
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 800207e:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8002080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002084 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002084:	6a03      	ldr	r3, [r0, #32]
 8002086:	f023 0301 	bic.w	r3, r3, #1
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800208a:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800208c:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800208e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002090:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002092:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002094:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002096:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800209a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800209e:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80020a0:	f023 0502 	bic.w	r5, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80020a4:	688b      	ldr	r3, [r1, #8]
 80020a6:	432b      	orrs	r3, r5

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80020a8:	4d0c      	ldr	r5, [pc, #48]	; (80020dc <TIM_OC1_SetConfig+0x58>)
 80020aa:	42a8      	cmp	r0, r5
 80020ac:	d009      	beq.n	80020c2 <TIM_OC1_SetConfig+0x3e>
 80020ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020b2:	42a8      	cmp	r0, r5
 80020b4:	d005      	beq.n	80020c2 <TIM_OC1_SetConfig+0x3e>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020b6:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80020b8:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020ba:	6184      	str	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80020bc:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80020be:	6203      	str	r3, [r0, #32]
} 
 80020c0:	bd70      	pop	{r4, r5, r6, pc}
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80020c2:	68cd      	ldr	r5, [r1, #12]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80020c4:	f023 0308 	bic.w	r3, r3, #8
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80020c8:	694e      	ldr	r6, [r1, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80020ca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80020ce:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80020d0:	698d      	ldr	r5, [r1, #24]
 80020d2:	4335      	orrs	r5, r6
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80020d4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80020d8:	432a      	orrs	r2, r5
 80020da:	e7ec      	b.n	80020b6 <TIM_OC1_SetConfig+0x32>
 80020dc:	40010000 	.word	0x40010000

080020e0 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020e0:	6a03      	ldr	r3, [r0, #32]
 80020e2:	f023 0310 	bic.w	r3, r3, #16
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020e6:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020e8:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80020ea:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80020ec:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020ee:	6984      	ldr	r4, [r0, #24]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80020f0:	f023 0320 	bic.w	r3, r3, #32
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80020f4:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80020f6:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 80020fa:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80020fe:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8002102:	688d      	ldr	r5, [r1, #8]
 8002104:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002108:	4d0e      	ldr	r5, [pc, #56]	; (8002144 <TIM_OC2_SetConfig+0x64>)
 800210a:	42a8      	cmp	r0, r5
 800210c:	d009      	beq.n	8002122 <TIM_OC2_SetConfig+0x42>
 800210e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002112:	42a8      	cmp	r0, r5
 8002114:	d005      	beq.n	8002122 <TIM_OC2_SetConfig+0x42>
    tmpcr2 |= (OC_Config->OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002116:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002118:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800211a:	6184      	str	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800211c:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800211e:	6203      	str	r3, [r0, #32]
}
 8002120:	bd30      	pop	{r4, r5, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8002122:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002124:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002128:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 800212c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8002130:	694d      	ldr	r5, [r1, #20]
 8002132:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002136:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800213c:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8002140:	e7e9      	b.n	8002116 <TIM_OC2_SetConfig+0x36>
 8002142:	bf00      	nop
 8002144:	40010000 	.word	0x40010000

08002148 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002148:	6a03      	ldr	r3, [r0, #32]
 800214a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800214e:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002150:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002152:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002154:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002156:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002158:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800215c:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800215e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8002162:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002166:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8002168:	688d      	ldr	r5, [r1, #8]
 800216a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800216e:	4d0e      	ldr	r5, [pc, #56]	; (80021a8 <TIM_OC3_SetConfig+0x60>)
 8002170:	42a8      	cmp	r0, r5
 8002172:	d009      	beq.n	8002188 <TIM_OC3_SetConfig+0x40>
 8002174:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002178:	42a8      	cmp	r0, r5
 800217a:	d005      	beq.n	8002188 <TIM_OC3_SetConfig+0x40>
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800217c:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800217e:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002180:	61c4      	str	r4, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002182:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002184:	6203      	str	r3, [r0, #32]
}
 8002186:	bd30      	pop	{r4, r5, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8002188:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800218a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800218e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8002192:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8002196:	694d      	ldr	r5, [r1, #20]
 8002198:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 800219c:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800219e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80021a2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 80021a6:	e7e9      	b.n	800217c <TIM_OC3_SetConfig+0x34>
 80021a8:	40010000 	.word	0x40010000

080021ac <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80021ac:	6a03      	ldr	r3, [r0, #32]
 80021ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021b2:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80021b4:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021b6:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80021b8:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021ba:	69c3      	ldr	r3, [r0, #28]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80021bc:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80021c0:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80021c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021c6:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80021ca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 80021ce:	688d      	ldr	r5, [r1, #8]
 80021d0:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80021d4:	4d09      	ldr	r5, [pc, #36]	; (80021fc <TIM_OC4_SetConfig+0x50>)
 80021d6:	42a8      	cmp	r0, r5
 80021d8:	d009      	beq.n	80021ee <TIM_OC4_SetConfig+0x42>
 80021da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80021de:	42a8      	cmp	r0, r5
 80021e0:	d005      	beq.n	80021ee <TIM_OC4_SetConfig+0x42>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021e2:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80021e4:	61c3      	str	r3, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80021e6:	684b      	ldr	r3, [r1, #4]
 80021e8:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021ea:	6204      	str	r4, [r0, #32]
}
 80021ec:	bd30      	pop	{r4, r5, pc}
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80021ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80021f2:	694d      	ldr	r5, [r1, #20]
 80021f4:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 80021f8:	e7f3      	b.n	80021e2 <TIM_OC4_SetConfig+0x36>
 80021fa:	bf00      	nop
 80021fc:	40010000 	.word	0x40010000

08002200 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002200:	2301      	movs	r3, #1

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002202:	408a      	lsls	r2, r1
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002204:	408b      	lsls	r3, r1
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002206:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002208:	6a04      	ldr	r4, [r0, #32]
 800220a:	ea24 0303 	bic.w	r3, r4, r3
 800220e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002210:	6a03      	ldr	r3, [r0, #32]
 8002212:	ea42 0103 	orr.w	r1, r2, r3
 8002216:	6201      	str	r1, [r0, #32]
 8002218:	bd10      	pop	{r4, pc}
	...

0800221c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800221c:	b510      	push	{r4, lr}
 800221e:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002220:	2201      	movs	r2, #1
 8002222:	6800      	ldr	r0, [r0, #0]
 8002224:	f7ff ffec 	bl	8002200 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8002228:	6823      	ldr	r3, [r4, #0]
 800222a:	4a08      	ldr	r2, [pc, #32]	; (800224c <HAL_TIM_PWM_Start+0x30>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d003      	beq.n	8002238 <HAL_TIM_PWM_Start+0x1c>
 8002230:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002234:	4293      	cmp	r3, r2
 8002236:	d103      	bne.n	8002240 <HAL_TIM_PWM_Start+0x24>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002238:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800223a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800223e:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002240:	681a      	ldr	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
} 
 8002242:	2000      	movs	r0, #0
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002244:	f042 0201 	orr.w	r2, r2, #1
 8002248:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
} 
 800224a:	bd10      	pop	{r4, pc}
 800224c:	40010000 	.word	0x40010000

08002250 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002250:	6a03      	ldr	r3, [r0, #32]
 8002252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002256:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002258:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800225a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800225c:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800225e:	6d44      	ldr	r4, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002260:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002264:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2; 
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002266:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800226a:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800226e:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8002270:	688d      	ldr	r5, [r1, #8]
 8002272:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002276:	4d09      	ldr	r5, [pc, #36]	; (800229c <TIM_OC5_SetConfig+0x4c>)
 8002278:	42a8      	cmp	r0, r5
 800227a:	d003      	beq.n	8002284 <TIM_OC5_SetConfig+0x34>
 800227c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002280:	42a8      	cmp	r0, r5
 8002282:	d104      	bne.n	800228e <TIM_OC5_SetConfig+0x3e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002284:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8002288:	694d      	ldr	r5, [r1, #20]
 800228a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800228e:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002290:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002292:	6544      	str	r4, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002294:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002296:	6203      	str	r3, [r0, #32]
 8002298:	bd30      	pop	{r4, r5, pc}
 800229a:	bf00      	nop
 800229c:	40010000 	.word	0x40010000

080022a0 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80022a0:	6a03      	ldr	r3, [r0, #32]
 80022a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022a6:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80022a8:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022aa:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80022ac:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80022ae:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80022b0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx = TIMx->CCMR3;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80022b4:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2; 
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80022b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80022be:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 80022c2:	688d      	ldr	r5, [r1, #8]
 80022c4:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80022c8:	4d08      	ldr	r5, [pc, #32]	; (80022ec <TIM_OC6_SetConfig+0x4c>)
 80022ca:	42a8      	cmp	r0, r5
 80022cc:	d003      	beq.n	80022d6 <TIM_OC6_SetConfig+0x36>
 80022ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80022d2:	42a8      	cmp	r0, r5
 80022d4:	d104      	bne.n	80022e0 <TIM_OC6_SetConfig+0x40>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80022d6:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 80022da:	694d      	ldr	r5, [r1, #20]
 80022dc:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022e0:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80022e2:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80022e4:	684b      	ldr	r3, [r1, #4]
 80022e6:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80022e8:	6202      	str	r2, [r0, #32]
 80022ea:	bd30      	pop	{r4, r5, pc}
 80022ec:	40010000 	.word	0x40010000

080022f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 80022f0:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80022f2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 80022f6:	4604      	mov	r4, r0
 80022f8:	460d      	mov	r5, r1
 80022fa:	2002      	movs	r0, #2
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d07b      	beq.n	80023f8 <HAL_TIM_PWM_ConfigChannel+0x108>
 8002300:	2301      	movs	r3, #1
  
  htim->State = HAL_TIM_STATE_BUSY;
    
  switch (Channel)
 8002302:	2a08      	cmp	r2, #8
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002304:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002308:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
    
  switch (Channel)
 800230c:	d03c      	beq.n	8002388 <HAL_TIM_PWM_ConfigChannel+0x98>
 800230e:	d813      	bhi.n	8002338 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002310:	b34a      	cbz	r2, 8002366 <HAL_TIM_PWM_ConfigChannel+0x76>
 8002312:	2a04      	cmp	r2, #4
 8002314:	d16a      	bne.n	80023ec <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002316:	6820      	ldr	r0, [r4, #0]
 8002318:	f7ff fee2 	bl	80020e0 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800231c:	6823      	ldr	r3, [r4, #0]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800231e:	6929      	ldr	r1, [r5, #16]
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002320:	699a      	ldr	r2, [r3, #24]
 8002322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002326:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002328:	699a      	ldr	r2, [r3, #24]
 800232a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800232e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002330:	699a      	ldr	r2, [r3, #24]
 8002332:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002336:	e025      	b.n	8002384 <HAL_TIM_PWM_ConfigChannel+0x94>
  /* Check input state */
  __HAL_LOCK(htim);
  
  htim->State = HAL_TIM_STATE_BUSY;
    
  switch (Channel)
 8002338:	2a10      	cmp	r2, #16
 800233a:	d036      	beq.n	80023aa <HAL_TIM_PWM_ConfigChannel+0xba>
 800233c:	2a14      	cmp	r2, #20
 800233e:	d044      	beq.n	80023ca <HAL_TIM_PWM_ConfigChannel+0xda>
 8002340:	2a0c      	cmp	r2, #12
 8002342:	d153      	bne.n	80023ec <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002344:	6820      	ldr	r0, [r4, #0]
 8002346:	f7ff ff31 	bl	80021ac <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800234a:	6823      	ldr	r3, [r4, #0]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 800234c:	6929      	ldr	r1, [r5, #16]
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800234e:	69da      	ldr	r2, [r3, #28]
 8002350:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002354:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002356:	69da      	ldr	r2, [r3, #28]
 8002358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800235c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 800235e:	69da      	ldr	r2, [r3, #28]
 8002360:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002364:	e01f      	b.n	80023a6 <HAL_TIM_PWM_ConfigChannel+0xb6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002366:	6820      	ldr	r0, [r4, #0]
 8002368:	f7ff fe8c 	bl	8002084 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800236c:	6823      	ldr	r3, [r4, #0]
 800236e:	699a      	ldr	r2, [r3, #24]
 8002370:	f042 0208 	orr.w	r2, r2, #8
 8002374:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002376:	699a      	ldr	r2, [r3, #24]
 8002378:	f022 0204 	bic.w	r2, r2, #4
 800237c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800237e:	692a      	ldr	r2, [r5, #16]
 8002380:	6999      	ldr	r1, [r3, #24]
 8002382:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002384:	619a      	str	r2, [r3, #24]
    }
    break;
 8002386:	e031      	b.n	80023ec <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002388:	6820      	ldr	r0, [r4, #0]
 800238a:	f7ff fedd 	bl	8002148 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800238e:	6823      	ldr	r3, [r4, #0]
 8002390:	69da      	ldr	r2, [r3, #28]
 8002392:	f042 0208 	orr.w	r2, r2, #8
 8002396:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002398:	69da      	ldr	r2, [r3, #28]
 800239a:	f022 0204 	bic.w	r2, r2, #4
 800239e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80023a0:	692a      	ldr	r2, [r5, #16]
 80023a2:	69d9      	ldr	r1, [r3, #28]
 80023a4:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 80023a6:	61da      	str	r2, [r3, #28]
    }
    break;
 80023a8:	e020      	b.n	80023ec <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80023aa:	6820      	ldr	r0, [r4, #0]
 80023ac:	f7ff ff50 	bl	8002250 <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80023b0:	6823      	ldr	r3, [r4, #0]
 80023b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023b4:	f042 0208 	orr.w	r2, r2, #8
 80023b8:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80023ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023bc:	f022 0204 	bic.w	r2, r2, #4
 80023c0:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 80023c2:	692a      	ldr	r2, [r5, #16]
 80023c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80023c6:	430a      	orrs	r2, r1
 80023c8:	e00f      	b.n	80023ea <HAL_TIM_PWM_ConfigChannel+0xfa>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80023ca:	6820      	ldr	r0, [r4, #0]
 80023cc:	f7ff ff68 	bl	80022a0 <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80023d0:	6823      	ldr	r3, [r4, #0]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 80023d2:	6909      	ldr	r1, [r1, #16]
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80023d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023da:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80023dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 80023e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023e6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80023ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 80023ec:	2301      	movs	r3, #1
    
  __HAL_UNLOCK(htim);
 80023ee:	2000      	movs	r0, #0
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 80023f0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 80023f4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 80023f8:	bd38      	pop	{r3, r4, r5, pc}
	...

080023fc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80023fc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002400:	2b01      	cmp	r3, #1
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002402:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002404:	d01c      	beq.n	8002440 <HAL_TIMEx_MasterConfigSynchronization+0x44>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002406:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002408:	4c0e      	ldr	r4, [pc, #56]	; (8002444 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  
  /* Check input state */
  __HAL_LOCK(htim);

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800240a:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800240c:	42a2      	cmp	r2, r4

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800240e:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002410:	d003      	beq.n	800241a <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 8002412:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002416:	42a2      	cmp	r2, r4
 8002418:	d103      	bne.n	8002422 <HAL_TIMEx_MasterConfigSynchronization+0x26>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800241a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800241e:	684c      	ldr	r4, [r1, #4]
 8002420:	4323      	orrs	r3, r4
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002422:	680c      	ldr	r4, [r1, #0]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002428:	6889      	ldr	r1, [r1, #8]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800242a:	4323      	orrs	r3, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800242c:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002430:	6053      	str	r3, [r2, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002432:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8002434:	2300      	movs	r3, #0
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002436:	6091      	str	r1, [r2, #8]

  __HAL_UNLOCK(htim);
 8002438:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 800243c:	4618      	mov	r0, r3
 800243e:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002440:	2002      	movs	r0, #2
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
  
  return HAL_OK;
} 
 8002442:	bd30      	pop	{r4, r5, pc}
 8002444:	40010000 	.word	0x40010000

08002448 <HAL_TIMEx_CommutationCallback>:
 8002448:	4770      	bx	lr

0800244a <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800244a:	4770      	bx	lr

0800244c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800244c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002450:	9d06      	ldr	r5, [sp, #24]
 8002452:	4604      	mov	r4, r0
 8002454:	460f      	mov	r7, r1
 8002456:	4616      	mov	r6, r2
 8002458:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800245a:	6821      	ldr	r1, [r4, #0]
 800245c:	69ca      	ldr	r2, [r1, #28]
 800245e:	ea37 0302 	bics.w	r3, r7, r2
 8002462:	bf0c      	ite	eq
 8002464:	2201      	moveq	r2, #1
 8002466:	2200      	movne	r2, #0
 8002468:	42b2      	cmp	r2, r6
 800246a:	d11d      	bne.n	80024a8 <UART_WaitOnFlagUntilTimeout+0x5c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800246c:	1c6b      	adds	r3, r5, #1
 800246e:	d0f5      	beq.n	800245c <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8002470:	b99d      	cbnz	r5, 800249a <UART_WaitOnFlagUntilTimeout+0x4e>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002472:	6823      	ldr	r3, [r4, #0]

        huart->gState = HAL_UART_STATE_READY;
        huart->RxState = HAL_UART_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002474:	2003      	movs	r0, #3
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800247c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	f022 0201 	bic.w	r2, r2, #1
 8002484:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002486:	2320      	movs	r3, #32
 8002488:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800248c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002490:	2300      	movs	r3, #0
 8002492:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8002496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800249a:	f7fd ff63 	bl	8000364 <HAL_GetTick>
 800249e:	ebc8 0000 	rsb	r0, r8, r0
 80024a2:	4285      	cmp	r5, r0
 80024a4:	d8d9      	bhi.n	800245a <UART_WaitOnFlagUntilTimeout+0xe>
 80024a6:	e7e4      	b.n	8002472 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80024a8:	2000      	movs	r0, #0
}
 80024aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080024ae <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024ae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80024b2:	461f      	mov	r7, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80024b4:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024b8:	4604      	mov	r4, r0
 80024ba:	460d      	mov	r5, r1
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80024bc:	2b20      	cmp	r3, #32
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024be:	4690      	mov	r8, r2
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80024c0:	d14b      	bne.n	800255a <HAL_UART_Transmit+0xac>
  {
    if((pData == NULL ) || (Size == 0U))
 80024c2:	2900      	cmp	r1, #0
 80024c4:	d047      	beq.n	8002556 <HAL_UART_Transmit+0xa8>
 80024c6:	2a00      	cmp	r2, #0
 80024c8:	d045      	beq.n	8002556 <HAL_UART_Transmit+0xa8>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024ca:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d043      	beq.n	800255a <HAL_UART_Transmit+0xac>
 80024d2:	2301      	movs	r3, #1
 80024d4:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024d8:	2300      	movs	r3, #0
 80024da:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024dc:	2321      	movs	r3, #33	; 0x21
 80024de:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80024e2:	f7fd ff3f 	bl	8000364 <HAL_GetTick>
 80024e6:	4606      	mov	r6, r0

    huart->TxXferSize = Size;
 80024e8:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 80024ec:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80024f0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80024f4:	b292      	uxth	r2, r2
 80024f6:	b302      	cbz	r2, 800253a <HAL_UART_Transmit+0x8c>
    {
      huart->TxXferCount--;
 80024f8:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024fc:	2200      	movs	r2, #0
 80024fe:	9700      	str	r7, [sp, #0]
 8002500:	2180      	movs	r1, #128	; 0x80

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0U)
    {
      huart->TxXferCount--;
 8002502:	3b01      	subs	r3, #1
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002504:	4620      	mov	r0, r4

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0U)
    {
      huart->TxXferCount--;
 8002506:	b29b      	uxth	r3, r3
 8002508:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800250c:	4633      	mov	r3, r6
 800250e:	f7ff ff9d 	bl	800244c <UART_WaitOnFlagUntilTimeout>
 8002512:	b108      	cbz	r0, 8002518 <HAL_UART_Transmit+0x6a>
      {
        return HAL_TIMEOUT;
 8002514:	2003      	movs	r0, #3
 8002516:	e021      	b.n	800255c <HAL_UART_Transmit+0xae>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002518:	68a3      	ldr	r3, [r4, #8]
 800251a:	6822      	ldr	r2, [r4, #0]
 800251c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002520:	d107      	bne.n	8002532 <HAL_UART_Transmit+0x84>
 8002522:	6923      	ldr	r3, [r4, #16]
 8002524:	b92b      	cbnz	r3, 8002532 <HAL_UART_Transmit+0x84>
      {
        tmp = (uint16_t*) pData;
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002526:	f835 3b02 	ldrh.w	r3, [r5], #2
 800252a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800252e:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2;
 8002530:	e7de      	b.n	80024f0 <HAL_UART_Transmit+0x42>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002532:	782b      	ldrb	r3, [r5, #0]
 8002534:	3501      	adds	r5, #1
 8002536:	6293      	str	r3, [r2, #40]	; 0x28
 8002538:	e7da      	b.n	80024f0 <HAL_UART_Transmit+0x42>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800253a:	9700      	str	r7, [sp, #0]
 800253c:	4633      	mov	r3, r6
 800253e:	2140      	movs	r1, #64	; 0x40
 8002540:	4620      	mov	r0, r4
 8002542:	f7ff ff83 	bl	800244c <UART_WaitOnFlagUntilTimeout>
 8002546:	2800      	cmp	r0, #0
 8002548:	d1e4      	bne.n	8002514 <HAL_UART_Transmit+0x66>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800254a:	2320      	movs	r3, #32

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800254c:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002550:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    return HAL_OK;
 8002554:	e002      	b.n	800255c <HAL_UART_Transmit+0xae>
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0U))
    {
      return  HAL_ERROR;
 8002556:	2001      	movs	r0, #1
 8002558:	e000      	b.n	800255c <HAL_UART_Transmit+0xae>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800255a:	2002      	movs	r0, #2
  }
}
 800255c:	b002      	add	sp, #8
 800255e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002564 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart: uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002564:	b538      	push	{r3, r4, r5, lr}
 8002566:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002568:	6805      	ldr	r5, [r0, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800256a:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800256c:	6922      	ldr	r2, [r4, #16]
 800256e:	68a1      	ldr	r1, [r4, #8]
 8002570:	6828      	ldr	r0, [r5, #0]
 8002572:	4311      	orrs	r1, r2
 8002574:	6962      	ldr	r2, [r4, #20]
 8002576:	430a      	orrs	r2, r1
 8002578:	ea42 0103 	orr.w	r1, r2, r3
 800257c:	4a88      	ldr	r2, [pc, #544]	; (80027a0 <UART_SetConfig+0x23c>)
 800257e:	4002      	ands	r2, r0
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002580:	69a0      	ldr	r0, [r4, #24]
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002582:	430a      	orrs	r2, r1
 8002584:	602a      	str	r2, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002586:	686a      	ldr	r2, [r5, #4]
 8002588:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800258c:	68e2      	ldr	r2, [r4, #12]
 800258e:	430a      	orrs	r2, r1
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002590:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002592:	606a      	str	r2, [r5, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002594:	4301      	orrs	r1, r0
 8002596:	68aa      	ldr	r2, [r5, #8]
 8002598:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800259c:	430a      	orrs	r2, r1
 800259e:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025a0:	4a80      	ldr	r2, [pc, #512]	; (80027a4 <UART_SetConfig+0x240>)
 80025a2:	4295      	cmp	r5, r2
 80025a4:	d107      	bne.n	80025b6 <UART_SetConfig+0x52>
 80025a6:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80025aa:	497f      	ldr	r1, [pc, #508]	; (80027a8 <UART_SetConfig+0x244>)
 80025ac:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80025b0:	f002 0203 	and.w	r2, r2, #3
 80025b4:	e009      	b.n	80025ca <UART_SetConfig+0x66>
 80025b6:	4a7d      	ldr	r2, [pc, #500]	; (80027ac <UART_SetConfig+0x248>)
 80025b8:	4295      	cmp	r5, r2
 80025ba:	d10b      	bne.n	80025d4 <UART_SetConfig+0x70>
 80025bc:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 80025c0:	497b      	ldr	r1, [pc, #492]	; (80027b0 <UART_SetConfig+0x24c>)
 80025c2:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80025c6:	f002 020c 	and.w	r2, r2, #12

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025ce:	5c8a      	ldrb	r2, [r1, r2]
 80025d0:	d073      	beq.n	80026ba <UART_SetConfig+0x156>
 80025d2:	e0b6      	b.n	8002742 <UART_SetConfig+0x1de>
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025d4:	4a77      	ldr	r2, [pc, #476]	; (80027b4 <UART_SetConfig+0x250>)
 80025d6:	4295      	cmp	r5, r2
 80025d8:	d10d      	bne.n	80025f6 <UART_SetConfig+0x92>
 80025da:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 80025de:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80025e2:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80025e6:	2a10      	cmp	r2, #16
 80025e8:	f000 8086 	beq.w	80026f8 <UART_SetConfig+0x194>
 80025ec:	d95d      	bls.n	80026aa <UART_SetConfig+0x146>
 80025ee:	2a20      	cmp	r2, #32
 80025f0:	d078      	beq.n	80026e4 <UART_SetConfig+0x180>
 80025f2:	2a30      	cmp	r2, #48	; 0x30
 80025f4:	e00e      	b.n	8002614 <UART_SetConfig+0xb0>
 80025f6:	4a70      	ldr	r2, [pc, #448]	; (80027b8 <UART_SetConfig+0x254>)
 80025f8:	4295      	cmp	r5, r2
 80025fa:	d10d      	bne.n	8002618 <UART_SetConfig+0xb4>
 80025fc:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 8002600:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002604:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8002608:	2a40      	cmp	r2, #64	; 0x40
 800260a:	d075      	beq.n	80026f8 <UART_SetConfig+0x194>
 800260c:	d94d      	bls.n	80026aa <UART_SetConfig+0x146>
 800260e:	2a80      	cmp	r2, #128	; 0x80
 8002610:	d068      	beq.n	80026e4 <UART_SetConfig+0x180>
 8002612:	2ac0      	cmp	r2, #192	; 0xc0
 8002614:	d07c      	beq.n	8002710 <UART_SetConfig+0x1ac>
 8002616:	e087      	b.n	8002728 <UART_SetConfig+0x1c4>
 8002618:	4a68      	ldr	r2, [pc, #416]	; (80027bc <UART_SetConfig+0x258>)
 800261a:	4295      	cmp	r5, r2
 800261c:	d10f      	bne.n	800263e <UART_SetConfig+0xda>
 800261e:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 8002622:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002626:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800262a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800262e:	d063      	beq.n	80026f8 <UART_SetConfig+0x194>
 8002630:	d93b      	bls.n	80026aa <UART_SetConfig+0x146>
 8002632:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002636:	d055      	beq.n	80026e4 <UART_SetConfig+0x180>
 8002638:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800263c:	e7ea      	b.n	8002614 <UART_SetConfig+0xb0>
 800263e:	4a60      	ldr	r2, [pc, #384]	; (80027c0 <UART_SetConfig+0x25c>)
 8002640:	4295      	cmp	r5, r2
 8002642:	d112      	bne.n	800266a <UART_SetConfig+0x106>
 8002644:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 8002648:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800264c:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8002650:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002654:	d050      	beq.n	80026f8 <UART_SetConfig+0x194>
 8002656:	d802      	bhi.n	800265e <UART_SetConfig+0xfa>
 8002658:	2a00      	cmp	r2, #0
 800265a:	d03d      	beq.n	80026d8 <UART_SetConfig+0x174>
 800265c:	e064      	b.n	8002728 <UART_SetConfig+0x1c4>
 800265e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002662:	d03f      	beq.n	80026e4 <UART_SetConfig+0x180>
 8002664:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8002668:	e7d4      	b.n	8002614 <UART_SetConfig+0xb0>
 800266a:	4a56      	ldr	r2, [pc, #344]	; (80027c4 <UART_SetConfig+0x260>)
 800266c:	4295      	cmp	r5, r2
 800266e:	d10f      	bne.n	8002690 <UART_SetConfig+0x12c>
 8002670:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8002674:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002678:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 800267c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002680:	d03a      	beq.n	80026f8 <UART_SetConfig+0x194>
 8002682:	d912      	bls.n	80026aa <UART_SetConfig+0x146>
 8002684:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002688:	d02c      	beq.n	80026e4 <UART_SetConfig+0x180>
 800268a:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 800268e:	e7c1      	b.n	8002614 <UART_SetConfig+0xb0>
 8002690:	4a4d      	ldr	r2, [pc, #308]	; (80027c8 <UART_SetConfig+0x264>)
 8002692:	4295      	cmp	r5, r2
 8002694:	d148      	bne.n	8002728 <UART_SetConfig+0x1c4>
 8002696:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 800269a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800269e:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80026a2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80026a6:	d027      	beq.n	80026f8 <UART_SetConfig+0x194>
 80026a8:	d801      	bhi.n	80026ae <UART_SetConfig+0x14a>
 80026aa:	b17a      	cbz	r2, 80026cc <UART_SetConfig+0x168>
 80026ac:	e03c      	b.n	8002728 <UART_SetConfig+0x1c4>
 80026ae:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80026b2:	d017      	beq.n	80026e4 <UART_SetConfig+0x180>
 80026b4:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 80026b8:	e7ac      	b.n	8002614 <UART_SetConfig+0xb0>

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  {
    switch (clocksource)
 80026ba:	2a08      	cmp	r2, #8
 80026bc:	d837      	bhi.n	800272e <UART_SetConfig+0x1ca>
 80026be:	e8df f002 	tbb	[pc, r2]
 80026c2:	0e08      	.short	0x0e08
 80026c4:	361e3614 	.word	0x361e3614
 80026c8:	3636      	.short	0x3636
 80026ca:	2a          	.byte	0x2a
 80026cb:	00          	.byte	0x00

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026d0:	d140      	bne.n	8002754 <UART_SetConfig+0x1f0>
  {
    switch (clocksource)
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80026d2:	f7fe fe7b 	bl	80013cc <HAL_RCC_GetPCLK1Freq>
 80026d6:	e014      	b.n	8002702 <UART_SetConfig+0x19e>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026dc:	d13d      	bne.n	800275a <UART_SetConfig+0x1f6>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80026de:	f7fe fe8d 	bl	80013fc <HAL_RCC_GetPCLK2Freq>
 80026e2:	e00e      	b.n	8002702 <UART_SetConfig+0x19e>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026e8:	d13a      	bne.n	8002760 <UART_SetConfig+0x1fc>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80026ea:	6860      	ldr	r0, [r4, #4]
 80026ec:	0842      	lsrs	r2, r0, #1
 80026ee:	f102 73f4 	add.w	r3, r2, #31981568	; 0x1e80000
 80026f2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80026f6:	e012      	b.n	800271e <UART_SetConfig+0x1ba>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026fc:	d139      	bne.n	8002772 <UART_SetConfig+0x20e>
      break;
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80026fe:	f7fe fd77 	bl	80011f0 <HAL_RCC_GetSysClockFreq>
 8002702:	6863      	ldr	r3, [r4, #4]
 8002704:	085a      	lsrs	r2, r3, #1
 8002706:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800270a:	fbb0 f3f3 	udiv	r3, r0, r3
 800270e:	e008      	b.n	8002722 <UART_SetConfig+0x1be>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002710:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002714:	d137      	bne.n	8002786 <UART_SetConfig+0x222>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002716:	6860      	ldr	r0, [r4, #4]
 8002718:	0843      	lsrs	r3, r0, #1
 800271a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800271e:	fbb3 f3f0 	udiv	r3, r3, r0
 8002722:	b29b      	uxth	r3, r3
{
  uint32_t tmpreg                     = 0x00000000U;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000U;
  uint16_t usartdiv                   = 0x0000U;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002724:	2000      	movs	r0, #0
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
 8002726:	e004      	b.n	8002732 <UART_SetConfig+0x1ce>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002728:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800272c:	d135      	bne.n	800279a <UART_SetConfig+0x236>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 800272e:	2001      	movs	r0, #1
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg                     = 0x00000000U;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000U;
  uint16_t usartdiv                   = 0x0000U;
 8002730:	2300      	movs	r3, #0
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002732:	f3c3 0142 	ubfx	r1, r3, #1, #3
 8002736:	f023 030f 	bic.w	r3, r3, #15
    huart->Instance->BRR = brrtemp;
 800273a:	6822      	ldr	r2, [r4, #0]
 800273c:	430b      	orrs	r3, r1
 800273e:	60d3      	str	r3, [r2, #12]
 8002740:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    switch (clocksource)
 8002742:	2a08      	cmp	r2, #8
 8002744:	d829      	bhi.n	800279a <UART_SetConfig+0x236>
 8002746:	e8df f002 	tbb	[pc, r2]
 800274a:	0805      	.short	0x0805
 800274c:	2814280b 	.word	0x2814280b
 8002750:	2828      	.short	0x2828
 8002752:	1e          	.byte	0x1e
 8002753:	00          	.byte	0x00
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002754:	f7fe fe3a 	bl	80013cc <HAL_RCC_GetPCLK1Freq>
 8002758:	e00d      	b.n	8002776 <UART_SetConfig+0x212>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800275a:	f7fe fe4f 	bl	80013fc <HAL_RCC_GetPCLK2Freq>
 800275e:	e00a      	b.n	8002776 <UART_SetConfig+0x212>
      break;
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002760:	6861      	ldr	r1, [r4, #4]
 8002762:	084a      	lsrs	r2, r1, #1
 8002764:	f502 0374 	add.w	r3, r2, #15990784	; 0xf40000
 8002768:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800276c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002770:	e00f      	b.n	8002792 <UART_SetConfig+0x22e>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002772:	f7fe fd3d 	bl	80011f0 <HAL_RCC_GetSysClockFreq>
 8002776:	6863      	ldr	r3, [r4, #4]
 8002778:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800277c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002780:	b280      	uxth	r0, r0
 8002782:	60e8      	str	r0, [r5, #12]
 8002784:	e007      	b.n	8002796 <UART_SetConfig+0x232>
      break;
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002786:	6862      	ldr	r2, [r4, #4]
 8002788:	0853      	lsrs	r3, r2, #1
 800278a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800278e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002792:	b29b      	uxth	r3, r3
 8002794:	60eb      	str	r3, [r5, #12]
{
  uint32_t tmpreg                     = 0x00000000U;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000U;
  uint16_t usartdiv                   = 0x0000U;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002796:	2000      	movs	r0, #0
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
 8002798:	bd38      	pop	{r3, r4, r5, pc}
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 800279a:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 800279c:	bd38      	pop	{r3, r4, r5, pc}
 800279e:	bf00      	nop
 80027a0:	efff69f3 	.word	0xefff69f3
 80027a4:	40011000 	.word	0x40011000
 80027a8:	08004228 	.word	0x08004228
 80027ac:	40004400 	.word	0x40004400
 80027b0:	0800422c 	.word	0x0800422c
 80027b4:	40004800 	.word	0x40004800
 80027b8:	40004c00 	.word	0x40004c00
 80027bc:	40005000 	.word	0x40005000
 80027c0:	40011400 	.word	0x40011400
 80027c4:	40007800 	.word	0x40007800
 80027c8:	40007c00 	.word	0x40007c00

080027cc <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80027cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80027ce:	07da      	lsls	r2, r3, #31
  * @brief Configure the UART peripheral advanced features
  * @param huart: uart handle
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80027d0:	b510      	push	{r4, lr}
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80027d2:	d506      	bpl.n	80027e2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80027d4:	6804      	ldr	r4, [r0, #0]
 80027d6:	6862      	ldr	r2, [r4, #4]
 80027d8:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 80027dc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80027de:	430a      	orrs	r2, r1
 80027e0:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80027e2:	079c      	lsls	r4, r3, #30
 80027e4:	d506      	bpl.n	80027f4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80027e6:	6804      	ldr	r4, [r0, #0]
 80027e8:	6862      	ldr	r2, [r4, #4]
 80027ea:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80027ee:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80027f0:	430a      	orrs	r2, r1
 80027f2:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80027f4:	0759      	lsls	r1, r3, #29
 80027f6:	d506      	bpl.n	8002806 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80027f8:	6804      	ldr	r4, [r0, #0]
 80027fa:	6862      	ldr	r2, [r4, #4]
 80027fc:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8002800:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002802:	430a      	orrs	r2, r1
 8002804:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002806:	071a      	lsls	r2, r3, #28
 8002808:	d506      	bpl.n	8002818 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800280a:	6804      	ldr	r4, [r0, #0]
 800280c:	6862      	ldr	r2, [r4, #4]
 800280e:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8002812:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002814:	430a      	orrs	r2, r1
 8002816:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002818:	06dc      	lsls	r4, r3, #27
 800281a:	d506      	bpl.n	800282a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800281c:	6804      	ldr	r4, [r0, #0]
 800281e:	68a2      	ldr	r2, [r4, #8]
 8002820:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8002824:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002826:	430a      	orrs	r2, r1
 8002828:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800282a:	0699      	lsls	r1, r3, #26
 800282c:	d506      	bpl.n	800283c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800282e:	6804      	ldr	r4, [r0, #0]
 8002830:	68a2      	ldr	r2, [r4, #8]
 8002832:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8002836:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002838:	430a      	orrs	r2, r1
 800283a:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800283c:	065a      	lsls	r2, r3, #25
 800283e:	d510      	bpl.n	8002862 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002840:	6801      	ldr	r1, [r0, #0]
 8002842:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002844:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002846:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800284a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800284e:	ea42 0204 	orr.w	r2, r2, r4
 8002852:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002854:	d105      	bne.n	8002862 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002856:	684a      	ldr	r2, [r1, #4]
 8002858:	f422 04c0 	bic.w	r4, r2, #6291456	; 0x600000
 800285c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800285e:	4322      	orrs	r2, r4
 8002860:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002862:	061b      	lsls	r3, r3, #24
 8002864:	d506      	bpl.n	8002874 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002866:	6801      	ldr	r1, [r0, #0]
 8002868:	684b      	ldr	r3, [r1, #4]
 800286a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800286e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002870:	4313      	orrs	r3, r2
 8002872:	604b      	str	r3, [r1, #4]
 8002874:	bd10      	pop	{r4, pc}

08002876 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002876:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002878:	2600      	movs	r6, #0
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800287a:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800287c:	66c6      	str	r6, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800287e:	f7fd fd71 	bl	8000364 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002882:	6823      	ldr	r3, [r4, #0]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002884:	4605      	mov	r5, r0

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	071a      	lsls	r2, r3, #28
 800288a:	d404      	bmi.n	8002896 <UART_CheckIdleState+0x20>
      /* Timeout Occurred */
      return HAL_TIMEOUT;
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800288c:	6823      	ldr	r3, [r4, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	075b      	lsls	r3, r3, #29
 8002892:	d51a      	bpl.n	80028ca <UART_CheckIdleState+0x54>
 8002894:	e00d      	b.n	80028b2 <UART_CheckIdleState+0x3c>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002896:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800289a:	4632      	mov	r2, r6
 800289c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	4603      	mov	r3, r0
 80028a4:	4620      	mov	r0, r4
 80028a6:	f7ff fdd1 	bl	800244c <UART_WaitOnFlagUntilTimeout>
 80028aa:	2800      	cmp	r0, #0
 80028ac:	d0ee      	beq.n	800288c <UART_CheckIdleState+0x16>
    {
      /* Timeout Occurred */
      return HAL_TIMEOUT;
 80028ae:	2003      	movs	r0, #3
 80028b0:	e013      	b.n	80028da <UART_CheckIdleState+0x64>
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80028b6:	2200      	movs	r2, #0
 80028b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80028bc:	4620      	mov	r0, r4
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	462b      	mov	r3, r5
 80028c2:	f7ff fdc3 	bl	800244c <UART_WaitOnFlagUntilTimeout>
 80028c6:	2800      	cmp	r0, #0
 80028c8:	d1f1      	bne.n	80028ae <UART_CheckIdleState+0x38>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 80028ca:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80028cc:	2000      	movs	r0, #0
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 80028ce:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80028d2:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
 80028d6:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
}
 80028da:	b002      	add	sp, #8
 80028dc:	bd70      	pop	{r4, r5, r6, pc}

080028de <HAL_UART_Init>:
  *         parameters in the UART_InitTypeDef and creates the associated handle .
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028de:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 80028e0:	4604      	mov	r4, r0
 80028e2:	b360      	cbz	r0, 800293e <HAL_UART_Init+0x60>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80028e4:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80028e8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80028ec:	b91b      	cbnz	r3, 80028f6 <HAL_UART_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ee:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028f2:	f000 ffb9 	bl	8003868 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80028f6:	6822      	ldr	r2, [r4, #0]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028f8:	2324      	movs	r3, #36	; 0x24

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028fa:	4620      	mov	r0, r4

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028fc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002900:	6813      	ldr	r3, [r2, #0]
 8002902:	f023 0301 	bic.w	r3, r3, #1
 8002906:	6013      	str	r3, [r2, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002908:	f7ff fe2c 	bl	8002564 <UART_SetConfig>
 800290c:	2801      	cmp	r0, #1
 800290e:	d016      	beq.n	800293e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002910:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002912:	b113      	cbz	r3, 800291a <HAL_UART_Init+0x3c>
  {
    UART_AdvFeatureConfig(huart);
 8002914:	4620      	mov	r0, r4
 8002916:	f7ff ff59 	bl	80027cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800291a:	6823      	ldr	r3, [r4, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800291c:	4620      	mov	r0, r4
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002924:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800292c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	f042 0201 	orr.w	r2, r2, #1

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 8002934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002938:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800293a:	f7ff bf9c 	b.w	8002876 <UART_CheckIdleState>
}
 800293e:	2001      	movs	r0, #1
 8002940:	bd10      	pop	{r4, pc}
	...

08002944 <Transmit>:
	Transmit(tx_buffer);
	sprintf(tx_buffer, "East Turn Flag: %d \r\nWest Turn Flag: %d \r\n-----------------------", e_turnflag, w_turnflag);
}

//takes char array
void Transmit(char message[]) {
 8002944:	b510      	push	{r4, lr}
 8002946:	4604      	mov	r4, r0

	int len;
	len=strlen(message);
 8002948:	f7fd fc62 	bl	8000210 <strlen>
	HAL_UART_Transmit(&huart1, message, len, 1000);
 800294c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002950:	b282      	uxth	r2, r0
 8002952:	4621      	mov	r1, r4
 8002954:	4802      	ldr	r0, [pc, #8]	; (8002960 <Transmit+0x1c>)
}
 8002956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//takes char array
void Transmit(char message[]) {

	int len;
	len=strlen(message);
	HAL_UART_Transmit(&huart1, message, len, 1000);
 800295a:	f7ff bda8 	b.w	80024ae <HAL_UART_Transmit>
 800295e:	bf00      	nop
 8002960:	200003b8 	.word	0x200003b8

08002964 <Send_Debug>:
	dbg_count = 0;
}

void Send_Debug(void) {

	sprintf(tx_buffer, "L Value: %d  LF Value: %d \r\nRF Value: %d R Value: %d \r\n--------------------- \r\n", on_l, on_lf, on_rf, on_r); //lf, rf, r);
 8002964:	4b27      	ldr	r3, [pc, #156]	; (8002a04 <Send_Debug+0xa0>)
 8002966:	4a28      	ldr	r2, [pc, #160]	; (8002a08 <Send_Debug+0xa4>)
 8002968:	681b      	ldr	r3, [r3, #0]
	Transmit(tx_buffer);
	}
	dbg_count = 0;
}

void Send_Debug(void) {
 800296a:	b513      	push	{r0, r1, r4, lr}

	sprintf(tx_buffer, "L Value: %d  LF Value: %d \r\nRF Value: %d R Value: %d \r\n--------------------- \r\n", on_l, on_lf, on_rf, on_r); //lf, rf, r);
 800296c:	9301      	str	r3, [sp, #4]
 800296e:	4b27      	ldr	r3, [pc, #156]	; (8002a0c <Send_Debug+0xa8>)
 8002970:	4c27      	ldr	r4, [pc, #156]	; (8002a10 <Send_Debug+0xac>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4927      	ldr	r1, [pc, #156]	; (8002a14 <Send_Debug+0xb0>)
 8002976:	4620      	mov	r0, r4
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	4b27      	ldr	r3, [pc, #156]	; (8002a18 <Send_Debug+0xb4>)
 800297c:	6812      	ldr	r2, [r2, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f001 f812 	bl	80039a8 <siprintf>
	Transmit(tx_buffer); //transmitm the message above
 8002984:	4620      	mov	r0, r4
 8002986:	f7ff ffdd 	bl	8002944 <Transmit>
	sprintf(tx_buffer, "OFF_L: %d  OFF_R: %d \r\nOFF RF: %d OFF LF: %d \r\n--------------------- \r\n", off_l, off_lf, off_rf, off_r); //lf, rf, r);
 800298a:	4b24      	ldr	r3, [pc, #144]	; (8002a1c <Send_Debug+0xb8>)
 800298c:	4a24      	ldr	r2, [pc, #144]	; (8002a20 <Send_Debug+0xbc>)
 800298e:	4620      	mov	r0, r4
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4924      	ldr	r1, [pc, #144]	; (8002a24 <Send_Debug+0xc0>)
 8002994:	9301      	str	r3, [sp, #4]
 8002996:	4b24      	ldr	r3, [pc, #144]	; (8002a28 <Send_Debug+0xc4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	4b23      	ldr	r3, [pc, #140]	; (8002a2c <Send_Debug+0xc8>)
 800299e:	6812      	ldr	r2, [r2, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f001 f801 	bl	80039a8 <siprintf>
	Transmit(tx_buffer); //transmitm the message above
 80029a6:	4620      	mov	r0, r4
 80029a8:	f7ff ffcc 	bl	8002944 <Transmit>
	sprintf(tx_buffer, "Left Count Value: %d \r\nRight Count Value %d \r\n-----------------\r\n", l_count, r_count);
 80029ac:	4b20      	ldr	r3, [pc, #128]	; (8002a30 <Send_Debug+0xcc>)
 80029ae:	4a21      	ldr	r2, [pc, #132]	; (8002a34 <Send_Debug+0xd0>)
 80029b0:	4620      	mov	r0, r4
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6812      	ldr	r2, [r2, #0]
 80029b6:	4920      	ldr	r1, [pc, #128]	; (8002a38 <Send_Debug+0xd4>)
 80029b8:	f000 fff6 	bl	80039a8 <siprintf>
	Transmit(tx_buffer); //transmit the message above
 80029bc:	4620      	mov	r0, r4
 80029be:	f7ff ffc1 	bl	8002944 <Transmit>
	sprintf(tx_buffer, "Prev_L: %d \r\nPrev R %d \r\n-----------------\r\n", prev_l_count, prev_r_count);
 80029c2:	4b1e      	ldr	r3, [pc, #120]	; (8002a3c <Send_Debug+0xd8>)
 80029c4:	4a1e      	ldr	r2, [pc, #120]	; (8002a40 <Send_Debug+0xdc>)
 80029c6:	4620      	mov	r0, r4
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	491d      	ldr	r1, [pc, #116]	; (8002a44 <Send_Debug+0xe0>)
 80029ce:	f000 ffeb 	bl	80039a8 <siprintf>
	Transmit(tx_buffer); //transmit the message above
 80029d2:	4620      	mov	r0, r4
 80029d4:	f7ff ffb6 	bl	8002944 <Transmit>
	sprintf(tx_buffer, "Cur_Dir: %d \r\nNext_Dir: %d\r\n-----------------\r\n", cur_dir, next_dir);
 80029d8:	4b1b      	ldr	r3, [pc, #108]	; (8002a48 <Send_Debug+0xe4>)
 80029da:	4a1c      	ldr	r2, [pc, #112]	; (8002a4c <Send_Debug+0xe8>)
 80029dc:	4620      	mov	r0, r4
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6812      	ldr	r2, [r2, #0]
 80029e2:	491b      	ldr	r1, [pc, #108]	; (8002a50 <Send_Debug+0xec>)
 80029e4:	f000 ffe0 	bl	80039a8 <siprintf>
	Transmit(tx_buffer);
 80029e8:	4620      	mov	r0, r4
 80029ea:	f7ff ffab 	bl	8002944 <Transmit>
	sprintf(tx_buffer, "East Turn Flag: %d \r\nWest Turn Flag: %d \r\n-----------------------", e_turnflag, w_turnflag);
 80029ee:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <Send_Debug+0xf0>)
 80029f0:	4a19      	ldr	r2, [pc, #100]	; (8002a58 <Send_Debug+0xf4>)
 80029f2:	4620      	mov	r0, r4
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6812      	ldr	r2, [r2, #0]
 80029f8:	4918      	ldr	r1, [pc, #96]	; (8002a5c <Send_Debug+0xf8>)
}
 80029fa:	b002      	add	sp, #8
 80029fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Transmit(tx_buffer); //transmit the message above
	sprintf(tx_buffer, "Prev_L: %d \r\nPrev R %d \r\n-----------------\r\n", prev_l_count, prev_r_count);
	Transmit(tx_buffer); //transmit the message above
	sprintf(tx_buffer, "Cur_Dir: %d \r\nNext_Dir: %d\r\n-----------------\r\n", cur_dir, next_dir);
	Transmit(tx_buffer);
	sprintf(tx_buffer, "East Turn Flag: %d \r\nWest Turn Flag: %d \r\n-----------------------", e_turnflag, w_turnflag);
 8002a00:	f000 bfd2 	b.w	80039a8 <siprintf>
 8002a04:	200000a4 	.word	0x200000a4
 8002a08:	20000090 	.word	0x20000090
 8002a0c:	200000b8 	.word	0x200000b8
 8002a10:	200002a8 	.word	0x200002a8
 8002a14:	0800429c 	.word	0x0800429c
 8002a18:	200000d4 	.word	0x200000d4
 8002a1c:	200000cc 	.word	0x200000cc
 8002a20:	200000bc 	.word	0x200000bc
 8002a24:	080042ec 	.word	0x080042ec
 8002a28:	200000c0 	.word	0x200000c0
 8002a2c:	20000088 	.word	0x20000088
 8002a30:	2000008c 	.word	0x2000008c
 8002a34:	2000009c 	.word	0x2000009c
 8002a38:	08004334 	.word	0x08004334
 8002a3c:	20000154 	.word	0x20000154
 8002a40:	20000158 	.word	0x20000158
 8002a44:	08004376 	.word	0x08004376
 8002a48:	200000d8 	.word	0x200000d8
 8002a4c:	200000a0 	.word	0x200000a0
 8002a50:	080043a3 	.word	0x080043a3
 8002a54:	200000b4 	.word	0x200000b4
 8002a58:	200000d0 	.word	0x200000d0
 8002a5c:	080043d3 	.word	0x080043d3

08002a60 <HAL_GPIO_EXTI_Callback>:
}

//button interrupt routine (THIS IS RUN WHEN BUTTONS ARE PRESSED)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (GPIO_Pin == BUTTON2_Pin)
 8002a60:	2840      	cmp	r0, #64	; 0x40
 8002a62:	d10d      	bne.n	8002a80 <HAL_GPIO_EXTI_Callback+0x20>
  {
	  //HAL_GPIO_TogglePin(L_EMIT_PORT, L_EMIT_PIN);
	  //HAL_GPIO_TogglePin(LF_EMIT_PORT, LF_EMIT_PIN);
	  //Set_Left(100, FORWARD);
	  //Set_Right(120, FORWARD);
	  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8002a64:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <HAL_GPIO_EXTI_Callback+0x38>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	2300      	movs	r3, #0
 8002a6a:	6253      	str	r3, [r2, #36]	; 0x24
	  __HAL_TIM_SET_COUNTER(&htim4, 0);
 8002a6c:	4a0b      	ldr	r2, [pc, #44]	; (8002a9c <HAL_GPIO_EXTI_Callback+0x3c>)
 8002a6e:	6812      	ldr	r2, [r2, #0]
 8002a70:	6253      	str	r3, [r2, #36]	; 0x24
	  debug_flag = !debug_flag;
 8002a72:	4a0b      	ldr	r2, [pc, #44]	; (8002aa0 <HAL_GPIO_EXTI_Callback+0x40>)
 8002a74:	6813      	ldr	r3, [r2, #0]
 8002a76:	fab3 f383 	clz	r3, r3
 8002a7a:	095b      	lsrs	r3, r3, #5
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	4770      	bx	lr

  }

  if (GPIO_Pin == BUTTON1_Pin)
 8002a80:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002a84:	d106      	bne.n	8002a94 <HAL_GPIO_EXTI_Callback+0x34>
  {
	  stop_flag = FALSE;
 8002a86:	2200      	movs	r2, #0
 8002a88:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <HAL_GPIO_EXTI_Callback+0x44>)
	  HAL_GPIO_TogglePin(GPIOD, LED3_Pin);
 8002a8a:	2108      	movs	r1, #8
 8002a8c:	4806      	ldr	r0, [pc, #24]	; (8002aa8 <HAL_GPIO_EXTI_Callback+0x48>)

  }

  if (GPIO_Pin == BUTTON1_Pin)
  {
	  stop_flag = FALSE;
 8002a8e:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_TogglePin(GPIOD, LED3_Pin);
 8002a90:	f7fe ba02 	b.w	8000e98 <HAL_GPIO_TogglePin>
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	200004a8 	.word	0x200004a8
 8002a9c:	2000015c 	.word	0x2000015c
 8002aa0:	200000dc 	.word	0x200000dc
 8002aa4:	200000e0 	.word	0x200000e0
 8002aa8:	40020c00 	.word	0x40020c00

08002aac <HAL_SPI_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002aac:	4770      	bx	lr
	...

08002ab0 <Error_Handler>:

void Error_Handler(void)
{
  while(1) 
  {
	  sprintf(tx_buffer, "State: %d", HAL_state);
 8002ab0:	4c05      	ldr	r4, [pc, #20]	; (8002ac8 <Error_Handler+0x18>)
  //wTransferState = TRANSFER_ERROR;
  //HAL_GPIO_TogglePin(GPIOD, LED5_Pin);
}

void Error_Handler(void)
{
 8002ab2:	b508      	push	{r3, lr}
  while(1) 
  {
	  sprintf(tx_buffer, "State: %d", HAL_state);
 8002ab4:	6822      	ldr	r2, [r4, #0]
 8002ab6:	4905      	ldr	r1, [pc, #20]	; (8002acc <Error_Handler+0x1c>)
 8002ab8:	4805      	ldr	r0, [pc, #20]	; (8002ad0 <Error_Handler+0x20>)
 8002aba:	f000 ff75 	bl	80039a8 <siprintf>
	  Transmit(tx_buffer);
 8002abe:	4804      	ldr	r0, [pc, #16]	; (8002ad0 <Error_Handler+0x20>)
 8002ac0:	f7ff ff40 	bl	8002944 <Transmit>
 8002ac4:	e7f6      	b.n	8002ab4 <Error_Handler+0x4>
 8002ac6:	bf00      	nop
 8002ac8:	200000c8 	.word	0x200000c8
 8002acc:	0800441a 	.word	0x0800441a
 8002ad0:	200002a8 	.word	0x200002a8

08002ad4 <Start_IR>:

	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);

}

void Start_IR() {
 8002ad4:	b508      	push	{r3, lr}

adc_conv = FALSE;
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <Start_IR+0x1c>)
if(HAL_ADC_Start_DMA(&hadc1, ADC_valbuffer, ADC_VAL_BUFFER_LENGTH) != HAL_OK)
 8002ada:	4906      	ldr	r1, [pc, #24]	; (8002af4 <Start_IR+0x20>)

}

void Start_IR() {

adc_conv = FALSE;
 8002adc:	601a      	str	r2, [r3, #0]
if(HAL_ADC_Start_DMA(&hadc1, ADC_valbuffer, ADC_VAL_BUFFER_LENGTH) != HAL_OK)
 8002ade:	2220      	movs	r2, #32
 8002ae0:	4805      	ldr	r0, [pc, #20]	; (8002af8 <Start_IR+0x24>)
 8002ae2:	f7fd fcfd 	bl	80004e0 <HAL_ADC_Start_DMA>
 8002ae6:	b108      	cbz	r0, 8002aec <Start_IR+0x18>
  {
     Error_Handler();
 8002ae8:	f7ff ffe2 	bl	8002ab0 <Error_Handler>
 8002aec:	bd08      	pop	{r3, pc}
 8002aee:	bf00      	nop
 8002af0:	200000b0 	.word	0x200000b0
 8002af4:	20000428 	.word	0x20000428
 8002af8:	20000370 	.word	0x20000370

08002afc <Get_IR>:
     Error_Handler();
  }

}

void Get_IR() {
 8002afc:	b538      	push	{r3, r4, r5, lr}

	//left sensor
		  Start_IR();
 8002afe:	f7ff ffe9 	bl	8002ad4 <Start_IR>
		  while (adc_conv == FALSE);
 8002b02:	4a39      	ldr	r2, [pc, #228]	; (8002be8 <Get_IR+0xec>)
 8002b04:	6813      	ldr	r3, [r2, #0]
 8002b06:	4c38      	ldr	r4, [pc, #224]	; (8002be8 <Get_IR+0xec>)
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0fb      	beq.n	8002b04 <Get_IR+0x8>
		  off_l = l;
 8002b0c:	4d37      	ldr	r5, [pc, #220]	; (8002bec <Get_IR+0xf0>)
		  HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, ON);
 8002b0e:	2120      	movs	r1, #32
void Get_IR() {

	//left sensor
		  Start_IR();
		  while (adc_conv == FALSE);
		  off_l = l;
 8002b10:	4b37      	ldr	r3, [pc, #220]	; (8002bf0 <Get_IR+0xf4>)
 8002b12:	682a      	ldr	r2, [r5, #0]
		  HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, ON);
 8002b14:	4837      	ldr	r0, [pc, #220]	; (8002bf4 <Get_IR+0xf8>)
void Get_IR() {

	//left sensor
		  Start_IR();
		  while (adc_conv == FALSE);
		  off_l = l;
 8002b16:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, ON);
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f7fe f9b9 	bl	8000e90 <HAL_GPIO_WritePin>
		  Start_IR();
 8002b1e:	f7ff ffd9 	bl	8002ad4 <Start_IR>
		  while (adc_conv == FALSE);
 8002b22:	6823      	ldr	r3, [r4, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0fc      	beq.n	8002b22 <Get_IR+0x26>
		  on_l = l;
 8002b28:	682a      	ldr	r2, [r5, #0]
		  HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, OFF);
 8002b2a:	2120      	movs	r1, #32
		  while (adc_conv == FALSE);
		  off_l = l;
		  HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, ON);
		  Start_IR();
		  while (adc_conv == FALSE);
		  on_l = l;
 8002b2c:	4b32      	ldr	r3, [pc, #200]	; (8002bf8 <Get_IR+0xfc>)
		  HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, OFF);
 8002b2e:	4831      	ldr	r0, [pc, #196]	; (8002bf4 <Get_IR+0xf8>)
		  while (adc_conv == FALSE);
		  off_l = l;
		  HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, ON);
		  Start_IR();
		  while (adc_conv == FALSE);
		  on_l = l;
 8002b30:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, OFF);
 8002b32:	2200      	movs	r2, #0
 8002b34:	f7fe f9ac 	bl	8000e90 <HAL_GPIO_WritePin>

		  //right sensor
		  Start_IR();
 8002b38:	f7ff ffcc 	bl	8002ad4 <Start_IR>
		  while (adc_conv == FALSE);
 8002b3c:	6823      	ldr	r3, [r4, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0fc      	beq.n	8002b3c <Get_IR+0x40>
		  off_r = r;
 8002b42:	4d2e      	ldr	r5, [pc, #184]	; (8002bfc <Get_IR+0x100>)
		  HAL_GPIO_WritePin(R_EMIT_PORT, R_EMIT_PIN, ON);
 8002b44:	f44f 7100 	mov.w	r1, #512	; 0x200
		  HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, OFF);

		  //right sensor
		  Start_IR();
		  while (adc_conv == FALSE);
		  off_r = r;
 8002b48:	4b2d      	ldr	r3, [pc, #180]	; (8002c00 <Get_IR+0x104>)
 8002b4a:	682a      	ldr	r2, [r5, #0]
		  HAL_GPIO_WritePin(R_EMIT_PORT, R_EMIT_PIN, ON);
 8002b4c:	482d      	ldr	r0, [pc, #180]	; (8002c04 <Get_IR+0x108>)
		  HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, OFF);

		  //right sensor
		  Start_IR();
		  while (adc_conv == FALSE);
		  off_r = r;
 8002b4e:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(R_EMIT_PORT, R_EMIT_PIN, ON);
 8002b50:	2201      	movs	r2, #1
 8002b52:	f7fe f99d 	bl	8000e90 <HAL_GPIO_WritePin>
		  Start_IR();
 8002b56:	f7ff ffbd 	bl	8002ad4 <Start_IR>
		  while (adc_conv == FALSE);
 8002b5a:	6823      	ldr	r3, [r4, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0fc      	beq.n	8002b5a <Get_IR+0x5e>
		  on_r = r;
 8002b60:	682a      	ldr	r2, [r5, #0]
		  HAL_GPIO_WritePin(R_EMIT_PORT, R_EMIT_PIN, OFF);
 8002b62:	f44f 7100 	mov.w	r1, #512	; 0x200
		  while (adc_conv == FALSE);
		  off_r = r;
		  HAL_GPIO_WritePin(R_EMIT_PORT, R_EMIT_PIN, ON);
		  Start_IR();
		  while (adc_conv == FALSE);
		  on_r = r;
 8002b66:	4b28      	ldr	r3, [pc, #160]	; (8002c08 <Get_IR+0x10c>)
		  HAL_GPIO_WritePin(R_EMIT_PORT, R_EMIT_PIN, OFF);
 8002b68:	4826      	ldr	r0, [pc, #152]	; (8002c04 <Get_IR+0x108>)
		  while (adc_conv == FALSE);
		  off_r = r;
		  HAL_GPIO_WritePin(R_EMIT_PORT, R_EMIT_PIN, ON);
		  Start_IR();
		  while (adc_conv == FALSE);
		  on_r = r;
 8002b6a:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(R_EMIT_PORT, R_EMIT_PIN, OFF);
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f7fe f98f 	bl	8000e90 <HAL_GPIO_WritePin>

		  //left front
		  Start_IR();
 8002b72:	f7ff ffaf 	bl	8002ad4 <Start_IR>
		  while (adc_conv == FALSE);
 8002b76:	6823      	ldr	r3, [r4, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0fc      	beq.n	8002b76 <Get_IR+0x7a>
		  off_lf = lf;
 8002b7c:	4d23      	ldr	r5, [pc, #140]	; (8002c0c <Get_IR+0x110>)
		  HAL_GPIO_WritePin(LF_EMIT_PORT, LF_EMIT_PIN, ON);
 8002b7e:	2110      	movs	r1, #16
		  HAL_GPIO_WritePin(R_EMIT_PORT, R_EMIT_PIN, OFF);

		  //left front
		  Start_IR();
		  while (adc_conv == FALSE);
		  off_lf = lf;
 8002b80:	4b23      	ldr	r3, [pc, #140]	; (8002c10 <Get_IR+0x114>)
 8002b82:	682a      	ldr	r2, [r5, #0]
		  HAL_GPIO_WritePin(LF_EMIT_PORT, LF_EMIT_PIN, ON);
 8002b84:	481b      	ldr	r0, [pc, #108]	; (8002bf4 <Get_IR+0xf8>)
		  HAL_GPIO_WritePin(R_EMIT_PORT, R_EMIT_PIN, OFF);

		  //left front
		  Start_IR();
		  while (adc_conv == FALSE);
		  off_lf = lf;
 8002b86:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(LF_EMIT_PORT, LF_EMIT_PIN, ON);
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f7fe f981 	bl	8000e90 <HAL_GPIO_WritePin>
		  Start_IR();
 8002b8e:	f7ff ffa1 	bl	8002ad4 <Start_IR>
		  while (adc_conv == FALSE);
 8002b92:	6823      	ldr	r3, [r4, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0fc      	beq.n	8002b92 <Get_IR+0x96>
		  on_lf = lf;
 8002b98:	682a      	ldr	r2, [r5, #0]
		  HAL_GPIO_WritePin(LF_EMIT_PORT, LF_EMIT_PIN, OFF);
 8002b9a:	2110      	movs	r1, #16
		  while (adc_conv == FALSE);
		  off_lf = lf;
		  HAL_GPIO_WritePin(LF_EMIT_PORT, LF_EMIT_PIN, ON);
		  Start_IR();
		  while (adc_conv == FALSE);
		  on_lf = lf;
 8002b9c:	4b1d      	ldr	r3, [pc, #116]	; (8002c14 <Get_IR+0x118>)
		  HAL_GPIO_WritePin(LF_EMIT_PORT, LF_EMIT_PIN, OFF);
 8002b9e:	4815      	ldr	r0, [pc, #84]	; (8002bf4 <Get_IR+0xf8>)
		  while (adc_conv == FALSE);
		  off_lf = lf;
		  HAL_GPIO_WritePin(LF_EMIT_PORT, LF_EMIT_PIN, ON);
		  Start_IR();
		  while (adc_conv == FALSE);
		  on_lf = lf;
 8002ba0:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(LF_EMIT_PORT, LF_EMIT_PIN, OFF);
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f7fe f974 	bl	8000e90 <HAL_GPIO_WritePin>


		  //right front
		  Start_IR();
 8002ba8:	f7ff ff94 	bl	8002ad4 <Start_IR>
		  while (adc_conv == FALSE);
 8002bac:	6823      	ldr	r3, [r4, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0fc      	beq.n	8002bac <Get_IR+0xb0>
		  off_rf = rf;
 8002bb2:	4d19      	ldr	r5, [pc, #100]	; (8002c18 <Get_IR+0x11c>)
		  HAL_GPIO_WritePin(RF_EMIT_PORT, RF_EMIT_PIN, ON);
 8002bb4:	f44f 7180 	mov.w	r1, #256	; 0x100


		  //right front
		  Start_IR();
		  while (adc_conv == FALSE);
		  off_rf = rf;
 8002bb8:	4b18      	ldr	r3, [pc, #96]	; (8002c1c <Get_IR+0x120>)
 8002bba:	682a      	ldr	r2, [r5, #0]
		  HAL_GPIO_WritePin(RF_EMIT_PORT, RF_EMIT_PIN, ON);
 8002bbc:	4811      	ldr	r0, [pc, #68]	; (8002c04 <Get_IR+0x108>)


		  //right front
		  Start_IR();
		  while (adc_conv == FALSE);
		  off_rf = rf;
 8002bbe:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(RF_EMIT_PORT, RF_EMIT_PIN, ON);
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f7fe f965 	bl	8000e90 <HAL_GPIO_WritePin>
		  Start_IR();
 8002bc6:	f7ff ff85 	bl	8002ad4 <Start_IR>
		  while (adc_conv == FALSE);
 8002bca:	6823      	ldr	r3, [r4, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0fc      	beq.n	8002bca <Get_IR+0xce>
		  on_rf = rf;
 8002bd0:	682a      	ldr	r2, [r5, #0]
		  HAL_GPIO_WritePin(RF_EMIT_PORT, RF_EMIT_PIN, OFF);
 8002bd2:	f44f 7180 	mov.w	r1, #256	; 0x100
		  while (adc_conv == FALSE);
		  off_rf = rf;
		  HAL_GPIO_WritePin(RF_EMIT_PORT, RF_EMIT_PIN, ON);
		  Start_IR();
		  while (adc_conv == FALSE);
		  on_rf = rf;
 8002bd6:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <Get_IR+0x124>)
		  HAL_GPIO_WritePin(RF_EMIT_PORT, RF_EMIT_PIN, OFF);
 8002bd8:	480a      	ldr	r0, [pc, #40]	; (8002c04 <Get_IR+0x108>)
		  while (adc_conv == FALSE);
		  off_rf = rf;
		  HAL_GPIO_WritePin(RF_EMIT_PORT, RF_EMIT_PIN, ON);
		  Start_IR();
		  while (adc_conv == FALSE);
		  on_rf = rf;
 8002bda:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(RF_EMIT_PORT, RF_EMIT_PIN, OFF);
 8002bdc:	2200      	movs	r2, #0

}
 8002bde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		  off_rf = rf;
		  HAL_GPIO_WritePin(RF_EMIT_PORT, RF_EMIT_PIN, ON);
		  Start_IR();
		  while (adc_conv == FALSE);
		  on_rf = rf;
		  HAL_GPIO_WritePin(RF_EMIT_PORT, RF_EMIT_PIN, OFF);
 8002be2:	f7fe b955 	b.w	8000e90 <HAL_GPIO_WritePin>
 8002be6:	bf00      	nop
 8002be8:	200000b0 	.word	0x200000b0
 8002bec:	200000a8 	.word	0x200000a8
 8002bf0:	200000bc 	.word	0x200000bc
 8002bf4:	40020400 	.word	0x40020400
 8002bf8:	20000090 	.word	0x20000090
 8002bfc:	200000c4 	.word	0x200000c4
 8002c00:	200000cc 	.word	0x200000cc
 8002c04:	40020800 	.word	0x40020800
 8002c08:	200000a4 	.word	0x200000a4
 8002c0c:	20000098 	.word	0x20000098
 8002c10:	20000088 	.word	0x20000088
 8002c14:	200000d4 	.word	0x200000d4
 8002c18:	200000ac 	.word	0x200000ac
 8002c1c:	200000c0 	.word	0x200000c0
 8002c20:	200000b8 	.word	0x200000b8

08002c24 <Stop_IR>:
  }

}


void Stop_IR() {
 8002c24:	b508      	push	{r3, lr}

adc_conv = TRUE;
 8002c26:	2201      	movs	r2, #1
 8002c28:	4b04      	ldr	r3, [pc, #16]	; (8002c3c <Stop_IR+0x18>)
if(HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 8002c2a:	4805      	ldr	r0, [pc, #20]	; (8002c40 <Stop_IR+0x1c>)
}


void Stop_IR() {

adc_conv = TRUE;
 8002c2c:	601a      	str	r2, [r3, #0]
if(HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 8002c2e:	f7fd fcd7 	bl	80005e0 <HAL_ADC_Stop_DMA>
 8002c32:	b108      	cbz	r0, 8002c38 <Stop_IR+0x14>
  {
     Error_Handler();
 8002c34:	f7ff ff3c 	bl	8002ab0 <Error_Handler>
 8002c38:	bd08      	pop	{r3, pc}
 8002c3a:	bf00      	nop
 8002c3c:	200000b0 	.word	0x200000b0
 8002c40:	20000370 	.word	0x20000370

08002c44 <HAL_ADC_ConvCpltCallback>:

}

//ADC interrupt handler. Runs when all four channels have been converted
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* handle)
{
 8002c44:	b508      	push	{r3, lr}
	Stop_IR();
 8002c46:	f7ff ffed 	bl	8002c24 <Stop_IR>
	//HAL_GPIO_TogglePin(GPIOD, LED3_Pin);
	l = ADC_valbuffer[28];
 8002c4a:	4b07      	ldr	r3, [pc, #28]	; (8002c68 <HAL_ADC_ConvCpltCallback+0x24>)
 8002c4c:	4a07      	ldr	r2, [pc, #28]	; (8002c6c <HAL_ADC_ConvCpltCallback+0x28>)
 8002c4e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002c50:	6011      	str	r1, [r2, #0]
	r = ADC_valbuffer[31];
 8002c52:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8002c54:	4a06      	ldr	r2, [pc, #24]	; (8002c70 <HAL_ADC_ConvCpltCallback+0x2c>)
 8002c56:	6011      	str	r1, [r2, #0]
	rf = ADC_valbuffer[30];
 8002c58:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8002c5a:	4a06      	ldr	r2, [pc, #24]	; (8002c74 <HAL_ADC_ConvCpltCallback+0x30>)
 8002c5c:	6011      	str	r1, [r2, #0]
	lf = ADC_valbuffer[29];
 8002c5e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <HAL_ADC_ConvCpltCallback+0x34>)
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	bd08      	pop	{r3, pc}
 8002c66:	bf00      	nop
 8002c68:	20000428 	.word	0x20000428
 8002c6c:	200000a8 	.word	0x200000a8
 8002c70:	200000c4 	.word	0x200000c4
 8002c74:	200000ac 	.word	0x200000ac
 8002c78:	20000098 	.word	0x20000098

08002c7c <Set_Left>:
}

void Set_Left(int speed, int direction) {

	//when switching directions, PWM polarity switches
	if (direction == FORWARD) {
 8002c7c:	2901      	cmp	r1, #1
	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	TIM_OC_InitTypeDef tim2config;

	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c7e:	f04f 0200 	mov.w	r2, #0

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	TIM_OC_InitTypeDef tim2config;

	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
 8002c82:	f04f 0360 	mov.w	r3, #96	; 0x60

void Set_Left(int speed, int direction) {

	//when switching directions, PWM polarity switches
	if (direction == FORWARD) {
		speed = 665 - speed;
 8002c86:	bf08      	it	eq
 8002c88:	f5c0 7026 	rsbeq	r0, r0, #664	; 0x298
		  on_rf = rf;
		  HAL_GPIO_WritePin(RF_EMIT_PORT, RF_EMIT_PIN, OFF);

}

void Set_Left(int speed, int direction) {
 8002c8c:	b510      	push	{r4, lr}

	//when switching directions, PWM polarity switches
	if (direction == FORWARD) {
		speed = 665 - speed;
 8002c8e:	bf08      	it	eq
 8002c90:	3001      	addeq	r0, #1
		  on_rf = rf;
		  HAL_GPIO_WritePin(RF_EMIT_PORT, RF_EMIT_PIN, OFF);

}

void Set_Left(int speed, int direction) {
 8002c92:	b088      	sub	sp, #32
 8002c94:	460c      	mov	r4, r1
	}

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	TIM_OC_InitTypeDef tim2config;

	tim2config.Pulse = speed;
 8002c96:	9002      	str	r0, [sp, #8]
	tim2config.OCMode = TIM_OCMODE_PWM1;
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
	tim2config.OCFastMode = TIM_OCFAST_DISABLE;
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &tim2config, TIM_CHANNEL_1) != HAL_OK)
 8002c98:	a901      	add	r1, sp, #4
 8002c9a:	480a      	ldr	r0, [pc, #40]	; (8002cc4 <Set_Left+0x48>)

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	TIM_OC_InitTypeDef tim2config;

	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
 8002c9c:	9301      	str	r3, [sp, #4]
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c9e:	9203      	str	r2, [sp, #12]
	tim2config.OCFastMode = TIM_OCFAST_DISABLE;
 8002ca0:	9205      	str	r2, [sp, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &tim2config, TIM_CHANNEL_1) != HAL_OK)
 8002ca2:	f7ff fb25 	bl	80022f0 <HAL_TIM_PWM_ConfigChannel>
 8002ca6:	4601      	mov	r1, r0
 8002ca8:	b108      	cbz	r0, 8002cae <Set_Left+0x32>
	  {
	     Error_Handler();
 8002caa:	f7ff ff01 	bl	8002ab0 <Error_Handler>
	  }

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002cae:	4805      	ldr	r0, [pc, #20]	; (8002cc4 <Set_Left+0x48>)
 8002cb0:	f7ff fab4 	bl	800221c <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, LDIC_Pin, direction);
 8002cb4:	2102      	movs	r1, #2
 8002cb6:	b2e2      	uxtb	r2, r4
 8002cb8:	4803      	ldr	r0, [pc, #12]	; (8002cc8 <Set_Left+0x4c>)
 8002cba:	f7fe f8e9 	bl	8000e90 <HAL_GPIO_WritePin>

}
 8002cbe:	b008      	add	sp, #32
 8002cc0:	bd10      	pop	{r4, pc}
 8002cc2:	bf00      	nop
 8002cc4:	200005fc 	.word	0x200005fc
 8002cc8:	40020000 	.word	0x40020000

08002ccc <Set_Right>:

//when switching directions, PWM polarity switches
void Set_Right(int speed, int direction) {

	if (direction == FORWARD) {
 8002ccc:	2901      	cmp	r1, #1
	}

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
	TIM_OC_InitTypeDef tim2config;
	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
 8002cce:	f04f 0360 	mov.w	r3, #96	; 0x60
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
	tim2config.OCFastMode = TIM_OCFAST_DISABLE;

	if (HAL_TIM_PWM_ConfigChannel(&htim2, &tim2config, TIM_CHANNEL_3) != HAL_OK)
 8002cd2:	f04f 0208 	mov.w	r2, #8

//when switching directions, PWM polarity switches
void Set_Right(int speed, int direction) {

	if (direction == FORWARD) {
			speed = 665 - speed;
 8002cd6:	bf08      	it	eq
 8002cd8:	f5c0 7026 	rsbeq	r0, r0, #664	; 0x298
	HAL_GPIO_WritePin(GPIOA, LDIC_Pin, direction);

}

//when switching directions, PWM polarity switches
void Set_Right(int speed, int direction) {
 8002cdc:	b510      	push	{r4, lr}
 8002cde:	b088      	sub	sp, #32

	if (direction == FORWARD) {
			speed = 665 - speed;
 8002ce0:	bf08      	it	eq
 8002ce2:	3001      	addeq	r0, #1
	HAL_GPIO_WritePin(GPIOA, LDIC_Pin, direction);

}

//when switching directions, PWM polarity switches
void Set_Right(int speed, int direction) {
 8002ce4:	460c      	mov	r4, r1
	}

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
	TIM_OC_InitTypeDef tim2config;
	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
 8002ce6:	9301      	str	r3, [sp, #4]
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ce8:	2300      	movs	r3, #0
			speed = 665 - speed;
	}

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
	TIM_OC_InitTypeDef tim2config;
	tim2config.Pulse = speed;
 8002cea:	9002      	str	r0, [sp, #8]
	tim2config.OCMode = TIM_OCMODE_PWM1;
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
	tim2config.OCFastMode = TIM_OCFAST_DISABLE;

	if (HAL_TIM_PWM_ConfigChannel(&htim2, &tim2config, TIM_CHANNEL_3) != HAL_OK)
 8002cec:	a901      	add	r1, sp, #4
 8002cee:	4809      	ldr	r0, [pc, #36]	; (8002d14 <Set_Right+0x48>)

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
	TIM_OC_InitTypeDef tim2config;
	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cf0:	9303      	str	r3, [sp, #12]
	tim2config.OCFastMode = TIM_OCFAST_DISABLE;
 8002cf2:	9305      	str	r3, [sp, #20]

	if (HAL_TIM_PWM_ConfigChannel(&htim2, &tim2config, TIM_CHANNEL_3) != HAL_OK)
 8002cf4:	f7ff fafc 	bl	80022f0 <HAL_TIM_PWM_ConfigChannel>
 8002cf8:	b108      	cbz	r0, 8002cfe <Set_Right+0x32>
	{
	   Error_Handler();
 8002cfa:	f7ff fed9 	bl	8002ab0 <Error_Handler>
	}

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002cfe:	2108      	movs	r1, #8
 8002d00:	4804      	ldr	r0, [pc, #16]	; (8002d14 <Set_Right+0x48>)
 8002d02:	f7ff fa8b 	bl	800221c <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, RDIC_Pin, direction);
 8002d06:	2108      	movs	r1, #8
 8002d08:	b2e2      	uxtb	r2, r4
 8002d0a:	4803      	ldr	r0, [pc, #12]	; (8002d18 <Set_Right+0x4c>)
 8002d0c:	f7fe f8c0 	bl	8000e90 <HAL_GPIO_WritePin>

}
 8002d10:	b008      	add	sp, #32
 8002d12:	bd10      	pop	{r4, pc}
 8002d14:	200005fc 	.word	0x200005fc
 8002d18:	40020000 	.word	0x40020000

08002d1c <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d1c:	4b26      	ldr	r3, [pc, #152]	; (8002db8 <SystemClock_Config+0x9c>)
 8002d1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d20:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000

}


void SystemClock_Config(void)
{
 8002d24:	b510      	push	{r4, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d26:	641a      	str	r2, [r3, #64]	; 0x40

}


void SystemClock_Config(void)
{
 8002d28:	b0b4      	sub	sp, #208	; 0xd0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002d2c:	4a23      	ldr	r2, [pc, #140]	; (8002dbc <SystemClock_Config+0xa0>)
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d2e:	a807      	add	r0, sp, #28
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	9b00      	ldr	r3, [sp, #0]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002d38:	6813      	ldr	r3, [r2, #0]
 8002d3a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002d3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d42:	6013      	str	r3, [r2, #0]
 8002d44:	6813      	ldr	r3, [r2, #0]
 8002d46:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d4a:	9301      	str	r3, [sp, #4]
 8002d4c:	9b01      	ldr	r3, [sp, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d52:	2301      	movs	r3, #1
 8002d54:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002d56:	2310      	movs	r3, #16
 8002d58:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d5e:	f7fe f8ab 	bl	8000eb8 <HAL_RCC_OscConfig>
 8002d62:	4601      	mov	r1, r0
 8002d64:	b108      	cbz	r0, 8002d6a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8002d66:	f7ff fea3 	bl	8002ab0 <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d6a:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002d6c:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d6e:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d70:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d72:	9006      	str	r0, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002d74:	a802      	add	r0, sp, #8
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d76:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002d78:	f7fe fa78 	bl	800126c <HAL_RCC_ClockConfig>
 8002d7c:	2800      	cmp	r0, #0
 8002d7e:	d1f2      	bne.n	8002d66 <SystemClock_Config+0x4a>
  {
    Error_Handler();
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d80:	2340      	movs	r3, #64	; 0x40
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002d82:	9024      	str	r0, [sp, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d84:	a813      	add	r0, sp, #76	; 0x4c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d86:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d88:	f7fe fb50 	bl	800142c <HAL_RCCEx_PeriphCLKConfig>
 8002d8c:	4604      	mov	r4, r0
 8002d8e:	2800      	cmp	r0, #0
 8002d90:	d1e9      	bne.n	8002d66 <SystemClock_Config+0x4a>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002d92:	f7fe fb15 	bl	80013c0 <HAL_RCC_GetHCLKFreq>
 8002d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d9a:	fbb0 f0f3 	udiv	r0, r0, r3
 8002d9e:	f7fd fd85 	bl	80008ac <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002da2:	2004      	movs	r0, #4
 8002da4:	f7fd fd98 	bl	80008d8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002da8:	4622      	mov	r2, r4
 8002daa:	4621      	mov	r1, r4
 8002dac:	f04f 30ff 	mov.w	r0, #4294967295
 8002db0:	f7fd fd38 	bl	8000824 <HAL_NVIC_SetPriority>
}
 8002db4:	b034      	add	sp, #208	; 0xd0
 8002db6:	bd10      	pop	{r4, pc}
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	40007000 	.word	0x40007000

08002dc0 <main>:

enum {ADC_VAL_BUFFER_LENGTH = 32}; //DMA Buffer size
uint32_t ADC_valbuffer[ADC_VAL_BUFFER_LENGTH];

int main(void)
{
 8002dc0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002dc4:	b0b1      	sub	sp, #196	; 0xc4


  /*Configure GPIO pins : RDIC_Pin LDIC_Pin GYRO_CS_Pin */
  GPIO_InitStruct.Pin = RDIC_Pin|LDIC_Pin|GYRO_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc6:	2400      	movs	r4, #0
{
   //STARTUP

  /* MCU Configuration----------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002dc8:	f7fd fab8 	bl	800033c <HAL_Init>
  HAL_GPIO_WritePin(GPIOD, LED1_Pin, GPIO_PIN_SET);


  /*Configure GPIO pins : RDIC_Pin LDIC_Pin GYRO_CS_Pin */
  GPIO_InitStruct.Pin = RDIC_Pin|LDIC_Pin|GYRO_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dcc:	2701      	movs	r7, #1

  /* MCU Configuration----------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
  /* Configure the system clock */
  SystemClock_Config();
 8002dce:	f7ff ffa5 	bl	8002d1c <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd2:	4b51      	ldr	r3, [pc, #324]	; (8002f18 <main+0x158>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RDIC_Pin|LDIC_Pin, GPIO_PIN_RESET);
 8002dd4:	210a      	movs	r1, #10
 8002dd6:	4851      	ldr	r0, [pc, #324]	; (8002f1c <main+0x15c>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  //Configure GPIO pins : PC8 PC9
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002dda:	f44f 7640 	mov.w	r6, #768	; 0x300
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002dde:	4d50      	ldr	r5, [pc, #320]	; (8002f20 <main+0x160>)
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.NbrOfDiscConversion = 0;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
 8002de0:	f04f 0904 	mov.w	r9, #4
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de4:	f042 0201 	orr.w	r2, r2, #1
 8002de8:	631a      	str	r2, [r3, #48]	; 0x30
 8002dea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dec:	f002 0201 	and.w	r2, r2, #1
 8002df0:	9204      	str	r2, [sp, #16]
 8002df2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002df4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002df6:	f042 0204 	orr.w	r2, r2, #4
 8002dfa:	631a      	str	r2, [r3, #48]	; 0x30
 8002dfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dfe:	f002 0204 	and.w	r2, r2, #4
 8002e02:	9205      	str	r2, [sp, #20]
 8002e04:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e08:	f042 0202 	orr.w	r2, r2, #2
 8002e0c:	631a      	str	r2, [r3, #48]	; 0x30
 8002e0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e10:	f002 0202 	and.w	r2, r2, #2
 8002e14:	9206      	str	r2, [sp, #24]
 8002e16:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e1a:	f042 0210 	orr.w	r2, r2, #16
 8002e1e:	631a      	str	r2, [r3, #48]	; 0x30
 8002e20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e22:	f002 0210 	and.w	r2, r2, #16
 8002e26:	9207      	str	r2, [sp, #28]
 8002e28:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e2c:	f042 0208 	orr.w	r2, r2, #8
 8002e30:	631a      	str	r2, [r3, #48]	; 0x30

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RDIC_Pin|LDIC_Pin, GPIO_PIN_RESET);
 8002e32:	2200      	movs	r2, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	9308      	str	r3, [sp, #32]
 8002e3c:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RDIC_Pin|LDIC_Pin, GPIO_PIN_RESET);
 8002e3e:	f7fe f827 	bl	8000e90 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GYRO_CS_Pin, GPIO_PIN_SET);
 8002e42:	2201      	movs	r2, #1
 8002e44:	2110      	movs	r1, #16
 8002e46:	4835      	ldr	r0, [pc, #212]	; (8002f1c <main+0x15c>)
 8002e48:	f7fe f822 	bl	8000e90 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LED5_Pin|LED4_Pin|LED3_Pin|LED2_Pin , GPIO_PIN_RESET);
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	211e      	movs	r1, #30
 8002e50:	4834      	ldr	r0, [pc, #208]	; (8002f24 <main+0x164>)
 8002e52:	f7fe f81d 	bl	8000e90 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LED1_Pin, GPIO_PIN_SET);
 8002e56:	2201      	movs	r2, #1
 8002e58:	2120      	movs	r1, #32
 8002e5a:	4832      	ldr	r0, [pc, #200]	; (8002f24 <main+0x164>)
 8002e5c:	f7fe f818 	bl	8000e90 <HAL_GPIO_WritePin>


  /*Configure GPIO pins : RDIC_Pin LDIC_Pin GYRO_CS_Pin */
  GPIO_InitStruct.Pin = RDIC_Pin|LDIC_Pin|GYRO_CS_Pin;
 8002e60:	231a      	movs	r3, #26
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e62:	a927      	add	r1, sp, #156	; 0x9c
 8002e64:	482d      	ldr	r0, [pc, #180]	; (8002f1c <main+0x15c>)
  HAL_GPIO_WritePin(GPIOD, LED5_Pin|LED4_Pin|LED3_Pin|LED2_Pin , GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOD, LED1_Pin, GPIO_PIN_SET);


  /*Configure GPIO pins : RDIC_Pin LDIC_Pin GYRO_CS_Pin */
  GPIO_InitStruct.Pin = RDIC_Pin|LDIC_Pin|GYRO_CS_Pin;
 8002e66:	9327      	str	r3, [sp, #156]	; 0x9c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e68:	9728      	str	r7, [sp, #160]	; 0xa0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6a:	9429      	str	r4, [sp, #164]	; 0xa4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6c:	942a      	str	r4, [sp, #168]	; 0xa8
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e6e:	f7fd ff23 	bl	8000cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
 8002e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 8002e76:	a927      	add	r1, sp, #156	; 0x9c
 8002e78:	482a      	ldr	r0, [pc, #168]	; (8002f24 <main+0x164>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
 8002e7a:	9327      	str	r3, [sp, #156]	; 0x9c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e7c:	9528      	str	r5, [sp, #160]	; 0xa0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7e:	9429      	str	r4, [sp, #164]	; 0xa4
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 8002e80:	f7fd ff1a 	bl	8000cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin;
 8002e84:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);
 8002e86:	a927      	add	r1, sp, #156	; 0x9c
 8002e88:	4827      	ldr	r0, [pc, #156]	; (8002f28 <main+0x168>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin;
 8002e8a:	9327      	str	r3, [sp, #156]	; 0x9c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e8c:	9528      	str	r5, [sp, #160]	; 0xa0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8e:	9429      	str	r4, [sp, #164]	; 0xa4
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);
 8002e90:	f7fd ff12 	bl	8000cb8 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8002e94:	4622      	mov	r2, r4
 8002e96:	2102      	movs	r1, #2
 8002e98:	2028      	movs	r0, #40	; 0x28

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 8002e9a:	4d24      	ldr	r5, [pc, #144]	; (8002f2c <main+0x16c>)
  GPIO_InitStruct.Pin = BUTTON2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8002e9c:	f7fd fcc2 	bl	8000824 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002ea0:	2028      	movs	r0, #40	; 0x28
 8002ea2:	f7fd fcf7 	bl	8000894 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8002ea6:	4622      	mov	r2, r4
 8002ea8:	4639      	mov	r1, r7
 8002eaa:	2017      	movs	r0, #23
 8002eac:	f7fd fcba 	bl	8000824 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002eb0:	2017      	movs	r0, #23
 8002eb2:	f7fd fcef 	bl	8000894 <HAL_NVIC_EnableIRQ>

  /*Configure GPIO pins : LED5_Pin LED4_Pin LED3_Pin LED2_Pin 
                           LED1_Pin */
  GPIO_InitStruct.Pin = LED5_Pin|LED4_Pin|LED3_Pin|LED2_Pin 
 8002eb6:	233e      	movs	r3, #62	; 0x3e
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002eb8:	a927      	add	r1, sp, #156	; 0x9c
 8002eba:	481a      	ldr	r0, [pc, #104]	; (8002f24 <main+0x164>)
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

  /*Configure GPIO pins : LED5_Pin LED4_Pin LED3_Pin LED2_Pin 
                           LED1_Pin */
  GPIO_InitStruct.Pin = LED5_Pin|LED4_Pin|LED3_Pin|LED2_Pin 
 8002ebc:	9327      	str	r3, [sp, #156]	; 0x9c
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ebe:	9728      	str	r7, [sp, #160]	; 0xa0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec0:	9429      	str	r4, [sp, #164]	; 0xa4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec2:	942a      	str	r4, [sp, #168]	; 0xa8
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ec4:	f7fd fef8 	bl	8000cb8 <HAL_GPIO_Init>
  //Configure GPIO pins : PC8 PC9
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ec8:	a927      	add	r1, sp, #156	; 0x9c
 8002eca:	4817      	ldr	r0, [pc, #92]	; (8002f28 <main+0x168>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  //Configure GPIO pins : PC8 PC9
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ecc:	9627      	str	r6, [sp, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ece:	9728      	str	r7, [sp, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed0:	9429      	str	r4, [sp, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed2:	942a      	str	r4, [sp, #168]	; 0xa8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ed4:	f7fd fef0 	bl	8000cb8 <HAL_GPIO_Init>

   //Configure GPIO pins : PB4 PB5
      GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002ed8:	2330      	movs	r3, #48	; 0x30
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eda:	4815      	ldr	r0, [pc, #84]	; (8002f30 <main+0x170>)
 8002edc:	a927      	add	r1, sp, #156	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

   //Configure GPIO pins : PB4 PB5
      GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ede:	9728      	str	r7, [sp, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

   //Configure GPIO pins : PB4 PB5
      GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002ee0:	9327      	str	r3, [sp, #156]	; 0x9c
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee2:	9429      	str	r4, [sp, #164]	; 0xa4
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee4:	942a      	str	r4, [sp, #168]	; 0xa8
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee6:	f7fd fee7 	bl	8000cb8 <HAL_GPIO_Init>
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002eea:	4b12      	ldr	r3, [pc, #72]	; (8002f34 <main+0x174>)
 8002eec:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.EOCSelection = DISABLE;

  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002ef0:	4628      	mov	r0, r5

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002ef2:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002ef4:	612f      	str	r7, [r5, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002ef6:	61af      	str	r7, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002ef8:	622c      	str	r4, [r5, #32]
  hadc1.Init.NbrOfDiscConversion = 0;
 8002efa:	626c      	str	r4, [r5, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002efc:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 8002efe:	62ac      	str	r4, [r5, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f00:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 4;
 8002f02:	f8c5 901c 	str.w	r9, [r5, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002f06:	632f      	str	r7, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = DISABLE;
 8002f08:	616c      	str	r4, [r5, #20]
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002f0a:	e885 4008 	stmia.w	r5, {r3, lr}
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.EOCSelection = DISABLE;

  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002f0e:	f7fd fa3d 	bl	800038c <HAL_ADC_Init>
 8002f12:	b188      	cbz	r0, 8002f38 <main+0x178>
  {
    Error_Handler();
 8002f14:	f7ff fdcc 	bl	8002ab0 <Error_Handler>
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	40020000 	.word	0x40020000
 8002f20:	10210000 	.word	0x10210000
 8002f24:	40020c00 	.word	0x40020c00
 8002f28:	40020800 	.word	0x40020800
 8002f2c:	20000370 	.word	0x20000370
 8002f30:	40020400 	.word	0x40020400
 8002f34:	40012000 	.word	0x40012000
  }


  sConfig.Channel = ADC_CHANNEL_14;
 8002f38:	230e      	movs	r3, #14
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
  sConfig.Offset = 0;
 8002f3a:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f3c:	a90c      	add	r1, sp, #48	; 0x30
 8002f3e:	4628      	mov	r0, r5
  {
    Error_Handler();
  }


  sConfig.Channel = ADC_CHANNEL_14;
 8002f40:	930c      	str	r3, [sp, #48]	; 0x30
  sConfig.Rank = 1;
 8002f42:	970d      	str	r7, [sp, #52]	; 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8002f44:	970e      	str	r7, [sp, #56]	; 0x38
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f46:	f7fd fbbb 	bl	80006c0 <HAL_ADC_ConfigChannel>
 8002f4a:	2800      	cmp	r0, #0
 8002f4c:	d1e2      	bne.n	8002f14 <main+0x154>
  {
	//state = 1;
    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_15;
 8002f4e:	230f      	movs	r3, #15
  sConfig.Rank = 2;
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
  sConfig.Offset = 0;
 8002f50:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f52:	a90c      	add	r1, sp, #48	; 0x30
 8002f54:	4628      	mov	r0, r5
  {
	//state = 1;
    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_15;
 8002f56:	930c      	str	r3, [sp, #48]	; 0x30
  sConfig.Rank = 2;
 8002f58:	2302      	movs	r3, #2
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8002f5a:	970e      	str	r7, [sp, #56]	; 0x38
	//state = 1;
    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_15;
  sConfig.Rank = 2;
 8002f5c:	930d      	str	r3, [sp, #52]	; 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f5e:	f7fd fbaf 	bl	80006c0 <HAL_ADC_ConfigChannel>
 8002f62:	2800      	cmp	r0, #0
 8002f64:	d1d6      	bne.n	8002f14 <main+0x154>
  {
	//state = 2;
    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_8;
 8002f66:	2408      	movs	r4, #8
  sConfig.Rank = 3;
 8002f68:	f04f 0803 	mov.w	r8, #3
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
  sConfig.Offset = 0;
 8002f6c:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f6e:	a90c      	add	r1, sp, #48	; 0x30
 8002f70:	4628      	mov	r0, r5
  {
	//state = 2;
    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_8;
 8002f72:	940c      	str	r4, [sp, #48]	; 0x30
  sConfig.Rank = 3;
 8002f74:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8002f78:	970e      	str	r7, [sp, #56]	; 0x38
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f7a:	f7fd fba1 	bl	80006c0 <HAL_ADC_ConfigChannel>
 8002f7e:	2800      	cmp	r0, #0
 8002f80:	d1c8      	bne.n	8002f14 <main+0x154>
  {
	//state = 3;
    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_9;
 8002f82:	2309      	movs	r3, #9
  sConfig.Rank = 4;
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
  sConfig.Offset = 0;
 8002f84:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f86:	a90c      	add	r1, sp, #48	; 0x30
 8002f88:	4628      	mov	r0, r5
  {
	//state = 3;
    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_9;
 8002f8a:	930c      	str	r3, [sp, #48]	; 0x30
  sConfig.Rank = 4;
 8002f8c:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8002f90:	970e      	str	r7, [sp, #56]	; 0x38
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f92:	f7fd fb95 	bl	80006c0 <HAL_ADC_ConfigChannel>
 8002f96:	2800      	cmp	r0, #0
 8002f98:	d1bc      	bne.n	8002f14 <main+0x154>

/* SPI1 init function */
static void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 8002f9a:	4bb2      	ldr	r3, [pc, #712]	; (8003264 <main+0x4a4>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f9c:	f44f 7582 	mov.w	r5, #260	; 0x104
 8002fa0:	4ab1      	ldr	r2, [pc, #708]	; (8003268 <main+0x4a8>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002fa2:	6098      	str	r0, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fa4:	6118      	str	r0, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002fa6:	6158      	str	r0, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fa8:	61d8      	str	r0, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002faa:	6218      	str	r0, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002fac:	6258      	str	r0, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fae:	6298      	str	r0, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002fb0:	6318      	str	r0, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;

  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002fb2:	4618      	mov	r0, r3
{

  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002fb4:	60de      	str	r6, [r3, #12]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002fb6:	635c      	str	r4, [r3, #52]	; 0x34
/* SPI1 init function */
static void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002fb8:	e883 0024 	stmia.w	r3, {r2, r5}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002fbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fc0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8002fc2:	2207      	movs	r2, #7
 8002fc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;

  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002fc6:	f7fe fdd7 	bl	8001b78 <HAL_SPI_Init>
 8002fca:	2800      	cmp	r0, #0
 8002fcc:	d1a2      	bne.n	8002f14 <main+0x154>
//LEFT ENCODER CHANNELS
static void MX_TIM1_Init(void)
{
  TIM_Encoder_InitTypeDef sConfig;

  htim1.Instance = TIM1;
 8002fce:	4ea7      	ldr	r6, [pc, #668]	; (800326c <main+0x4ac>)
  sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
  sConfig.IC2Filter = 0;

  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002fd0:	a927      	add	r1, sp, #156	; 0x9c
//LEFT ENCODER CHANNELS
static void MX_TIM1_Init(void)
{
  TIM_Encoder_InitTypeDef sConfig;

  htim1.Instance = TIM1;
 8002fd2:	4ba7      	ldr	r3, [pc, #668]	; (8003270 <main+0x4b0>)
  htim1.Init.Prescaler = 0;
 8002fd4:	6070      	str	r0, [r6, #4]
//LEFT ENCODER CHANNELS
static void MX_TIM1_Init(void)
{
  TIM_Encoder_InitTypeDef sConfig;

  htim1.Instance = TIM1;
 8002fd6:	6033      	str	r3, [r6, #0]
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 0xffff;
 8002fd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
  TIM_Encoder_InitTypeDef sConfig;

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fdc:	60b0      	str	r0, [r6, #8]
  htim1.Init.Period = 0xffff;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fde:	6130      	str	r0, [r6, #16]
  htim1.Init.RepetitionCounter = 0;
 8002fe0:	6170      	str	r0, [r6, #20]

  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
  sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002fe2:	9028      	str	r0, [sp, #160]	; 0xa0
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
  sConfig.IC1Filter = 0;
 8002fe4:	902b      	str	r0, [sp, #172]	; 0xac

  sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002fe6:	902c      	str	r0, [sp, #176]	; 0xb0
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
  sConfig.IC2Filter = 0;
 8002fe8:	902f      	str	r0, [sp, #188]	; 0xbc

  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002fea:	4630      	mov	r0, r6
  TIM_Encoder_InitTypeDef sConfig;

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 0xffff;
 8002fec:	60f3      	str	r3, [r6, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;

  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002fee:	f8cd 809c 	str.w	r8, [sp, #156]	; 0x9c
  sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ff2:	9729      	str	r7, [sp, #164]	; 0xa4
  sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8002ff4:	942a      	str	r4, [sp, #168]	; 0xa8
  sConfig.IC1Filter = 0;

  sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002ff6:	972d      	str	r7, [sp, #180]	; 0xb4
  sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8002ff8:	942e      	str	r4, [sp, #184]	; 0xb8
  sConfig.IC2Filter = 0;

  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002ffa:	f7fe fff7 	bl	8001fec <HAL_TIM_Encoder_Init>
 8002ffe:	2800      	cmp	r0, #0
 8003000:	d188      	bne.n	8002f14 <main+0x154>
  {
    Error_Handler();
  }

  if(HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL) != HAL_OK)
 8003002:	213c      	movs	r1, #60	; 0x3c
 8003004:	4630      	mov	r0, r6
 8003006:	f7fe fe88 	bl	8001d1a <HAL_TIM_Encoder_Start_IT>
 800300a:	2800      	cmp	r0, #0
 800300c:	d182      	bne.n	8002f14 <main+0x154>
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  //uhPrescalerValue = (uint32_t)((SystemCoreClock /2) / 18000000) - 1;

  htim2.Instance = TIM2;
 800300e:	4c99      	ldr	r4, [pc, #612]	; (8003274 <main+0x4b4>)
  htim2.Init.Prescaler = 5;
 8003010:	2305      	movs	r3, #5
 8003012:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003016:	60a0      	str	r0, [r4, #8]
  htim2.Init.Period = 665;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003018:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800301a:	4620      	mov	r0, r4
  TIM_OC_InitTypeDef sConfigOC;

  //uhPrescalerValue = (uint32_t)((SystemCoreClock /2) / 18000000) - 1;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 5;
 800301c:	e884 000a 	stmia.w	r4, {r1, r3}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 665;
 8003020:	f240 2399 	movw	r3, #665	; 0x299
 8003024:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003026:	f7fe ffc7 	bl	8001fb8 <HAL_TIM_PWM_Init>
 800302a:	2800      	cmp	r0, #0
 800302c:	f47f af72 	bne.w	8002f14 <main+0x154>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003030:	9009      	str	r0, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003032:	a909      	add	r1, sp, #36	; 0x24
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003034:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003036:	4620      	mov	r0, r4
 8003038:	f7ff f9e0 	bl	80023fc <HAL_TIMEx_MasterConfigSynchronization>
 800303c:	2800      	cmp	r0, #0
 800303e:	f47f af69 	bne.w	8002f14 <main+0x154>
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
 8003042:	2200      	movs	r2, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003044:	f04f 0a60 	mov.w	sl, #96	; 0x60
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003048:	a917      	add	r1, sp, #92	; 0x5c
 800304a:	4620      	mov	r0, r4
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800304c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
  sConfigOC.Pulse = 0;
 8003050:	9218      	str	r2, [sp, #96]	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003052:	9219      	str	r2, [sp, #100]	; 0x64
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003054:	921b      	str	r2, [sp, #108]	; 0x6c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003056:	f7ff f94b 	bl	80022f0 <HAL_TIM_PWM_ConfigChannel>
 800305a:	2800      	cmp	r0, #0
 800305c:	f47f af5a 	bne.w	8002f14 <main+0x154>
  {
    Error_Handler();
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003060:	4620      	mov	r0, r4
 8003062:	2208      	movs	r2, #8
 8003064:	a917      	add	r1, sp, #92	; 0x5c
 8003066:	f7ff f943 	bl	80022f0 <HAL_TIM_PWM_ConfigChannel>
 800306a:	4604      	mov	r4, r0
 800306c:	2800      	cmp	r0, #0
 800306e:	f47f af51 	bne.w	8002f14 <main+0x154>
  {
    Error_Handler();
  }
  HAL_TIM_MspPostInit(&htim2);
 8003072:	4880      	ldr	r0, [pc, #512]	; (8003274 <main+0x4b4>)
	htim4.Init.RepetitionCounter = 0;

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8003074:	f04f 0908 	mov.w	r9, #8

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  HAL_TIM_MspPostInit(&htim2);
 8003078:	f000 fbac 	bl	80037d4 <HAL_TIM_MspPostInit>
//RIGHT ENCODER CHANNELS
static void MX_TIM4_Init(void)
{
	TIM_Encoder_InitTypeDef sConfig;

	htim4.Instance = TIM4;
 800307c:	4f7e      	ldr	r7, [pc, #504]	; (8003278 <main+0x4b8>)
 800307e:	4b7f      	ldr	r3, [pc, #508]	; (800327c <main+0x4bc>)
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
	sConfig.IC2Filter = 0;

	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003080:	a91e      	add	r1, sp, #120	; 0x78
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim4.Init.Period = 0xffff;
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim4.Init.RepetitionCounter = 0;

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003082:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003086:	f04f 0801 	mov.w	r8, #1
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
	sConfig.IC2Filter = 0;

	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800308a:	4638      	mov	r0, r7
{
	TIM_Encoder_InitTypeDef sConfig;

	htim4.Instance = TIM4;
	htim4.Init.Prescaler = 0;
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800308c:	60bc      	str	r4, [r7, #8]
	htim4.Init.Period = 0xffff;
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800308e:	613c      	str	r4, [r7, #16]
	htim4.Init.RepetitionCounter = 0;
 8003090:	617c      	str	r4, [r7, #20]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003092:	941f      	str	r4, [sp, #124]	; 0x7c
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003094:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8003098:	f8cd 9084 	str.w	r9, [sp, #132]	; 0x84
	sConfig.IC1Filter = 0;
 800309c:	9422      	str	r4, [sp, #136]	; 0x88

	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800309e:	9423      	str	r4, [sp, #140]	; 0x8c
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80030a0:	f8cd 8090 	str.w	r8, [sp, #144]	; 0x90
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 80030a4:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
	sConfig.IC2Filter = 0;
 80030a8:	9426      	str	r4, [sp, #152]	; 0x98
static void MX_TIM4_Init(void)
{
	TIM_Encoder_InitTypeDef sConfig;

	htim4.Instance = TIM4;
	htim4.Init.Prescaler = 0;
 80030aa:	e887 0018 	stmia.w	r7, {r3, r4}
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim4.Init.Period = 0xffff;
 80030ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030b2:	60fb      	str	r3, [r7, #12]
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
	sConfig.IC2Filter = 0;

	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80030b4:	f7fe ff9a 	bl	8001fec <HAL_TIM_Encoder_Init>
 80030b8:	2800      	cmp	r0, #0
 80030ba:	f47f af2b 	bne.w	8002f14 <main+0x154>
	{
	  Error_Handler();
	}

	if(HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL) != HAL_OK)
 80030be:	213c      	movs	r1, #60	; 0x3c
 80030c0:	4638      	mov	r0, r7
 80030c2:	f7fe fe2a 	bl	8001d1a <HAL_TIM_Encoder_Start_IT>
 80030c6:	2800      	cmp	r0, #0
 80030c8:	f47f af24 	bne.w	8002f14 <main+0x154>
static void MX_TIM9_Init(void)
{

  TIM_OC_InitTypeDef sConfigOC;

  htim9.Instance = TIM9;
 80030cc:	4d6c      	ldr	r5, [pc, #432]	; (8003280 <main+0x4c0>)
 80030ce:	4b6d      	ldr	r3, [pc, #436]	; (8003284 <main+0x4c4>)
  htim9.Init.Prescaler = 8;
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030d0:	60a8      	str	r0, [r5, #8]
  htim9.Init.Period = 3375;
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030d2:	6128      	str	r0, [r5, #16]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80030d4:	4628      	mov	r0, r5
{

  TIM_OC_InitTypeDef sConfigOC;

  htim9.Instance = TIM9;
  htim9.Init.Prescaler = 8;
 80030d6:	e885 0208 	stmia.w	r5, {r3, r9}
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim9.Init.Period = 3375;
 80030da:	f640 532f 	movw	r3, #3375	; 0xd2f
 80030de:	60eb      	str	r3, [r5, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80030e0:	f7fe ff6a 	bl	8001fb8 <HAL_TIM_PWM_Init>
 80030e4:	4602      	mov	r2, r0
 80030e6:	2800      	cmp	r0, #0
 80030e8:	f47f af14 	bne.w	8002f14 <main+0x154>
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 1790;
 80030ec:	f240 63fe 	movw	r3, #1790	; 0x6fe
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030f0:	9012      	str	r0, [sp, #72]	; 0x48
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030f2:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030f4:	a910      	add	r1, sp, #64	; 0x40
 80030f6:	4628      	mov	r0, r5
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030f8:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  sConfigOC.Pulse = 1790;
 80030fc:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030fe:	f7ff f8f7 	bl	80022f0 <HAL_TIM_PWM_ConfigChannel>
 8003102:	4604      	mov	r4, r0
 8003104:	2800      	cmp	r0, #0
 8003106:	f47f af05 	bne.w	8002f14 <main+0x154>
  {
    Error_Handler();
  }
  HAL_TIM_MspPostInit(&htim9);
 800310a:	4628      	mov	r0, r5
 800310c:	f000 fb62 	bl	80037d4 <HAL_TIM_MspPostInit>
}

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
  huart1.Instance = USART1;
 8003110:	485d      	ldr	r0, [pc, #372]	; (8003288 <main+0x4c8>)
  huart1.Init.BaudRate = 115200;
 8003112:	4a5e      	ldr	r2, [pc, #376]	; (800328c <main+0x4cc>)
 8003114:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003118:	6084      	str	r4, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800311a:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800311c:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800311e:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003120:	61c4      	str	r4, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003122:	6204      	str	r4, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003124:	6244      	str	r4, [r0, #36]	; 0x24

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 8003126:	e880 000c 	stmia.w	r0, {r2, r3}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800312a:	230c      	movs	r3, #12
 800312c:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800312e:	f7ff fbd6 	bl	80028de <HAL_UART_Init>
 8003132:	4604      	mov	r4, r0
 8003134:	2800      	cmp	r0, #0
 8003136:	f47f aeed 	bne.w	8002f14 <main+0x154>
  //HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  //HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
  //HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
  //HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800313a:	4649      	mov	r1, r9
 800313c:	484d      	ldr	r0, [pc, #308]	; (8003274 <main+0x4b4>)
 800313e:	f7ff f86d 	bl	800221c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003142:	4621      	mov	r1, r4
 8003144:	484b      	ldr	r0, [pc, #300]	; (8003274 <main+0x4b4>)
 8003146:	f7ff f869 	bl	800221c <HAL_TIM_PWM_Start>
 800314a:	f8df b160 	ldr.w	fp, [pc, #352]	; 80032ac <main+0x4ec>
  //turn on emitters at startup CHECK main.h for #defines
  //HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, ON);
  //HAL_GPIO_WritePin(LF_EMIT_PORT, LF_EMIT_PIN, ON);
  //HAL_GPIO_WritePin(RF_EMIT_PORT, RF_EMIT_PIN, ON);
  //HAL_GPIO_WritePin(R_EMIT_PORT, R_EMIT_PIN, ON);
  Set_Left(0, FORWARD);
 800314e:	4641      	mov	r1, r8
 8003150:	4620      	mov	r0, r4
 8003152:	f7ff fd93 	bl	8002c7c <Set_Left>
  Set_Right(0, FORWARD);
 8003156:	4641      	mov	r1, r8
 8003158:	4620      	mov	r0, r4
 800315a:	f7ff fdb7 	bl	8002ccc <Set_Right>


  //MAIN INFINITE PROGRAM LOOP aka ready loop
  while (1)
  {
	  Get_IR(); //on_xx and off_xx are globals for all the variables
 800315e:	f7ff fccd 	bl	8002afc <Get_IR>

	  l_count = __HAL_TIM_GET_COUNTER(&htim1); //check left and right encoder counts for debug
 8003162:	6833      	ldr	r3, [r6, #0]
 8003164:	4a4a      	ldr	r2, [pc, #296]	; (8003290 <main+0x4d0>)
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	4691      	mov	r9, r2
 800316a:	6013      	str	r3, [r2, #0]
	  r_count = __HAL_TIM_GET_COUNTER(&htim4);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003170:	4b48      	ldr	r3, [pc, #288]	; (8003294 <main+0x4d4>)
 8003172:	6019      	str	r1, [r3, #0]
 8003174:	4698      	mov	r8, r3

	  if ((stop_flag == FALSE) && (on_l > 1500)) { //start searching (place finger in front)
 8003176:	4948      	ldr	r1, [pc, #288]	; (8003298 <main+0x4d8>)
 8003178:	680c      	ldr	r4, [r1, #0]
 800317a:	2c00      	cmp	r4, #0
 800317c:	f040 80e7 	bne.w	800334e <main+0x58e>
 8003180:	4b46      	ldr	r3, [pc, #280]	; (800329c <main+0x4dc>)
 8003182:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003186:	6819      	ldr	r1, [r3, #0]
 8003188:	9302      	str	r3, [sp, #8]
 800318a:	4291      	cmp	r1, r2
 800318c:	f340 80df 	ble.w	800334e <main+0x58e>

      HAL_GPIO_WritePin(GPIOD, LED5_Pin, ON); //Turn on LEDs to indicate it is searching
 8003190:	2201      	movs	r2, #1
 8003192:	2102      	movs	r1, #2
 8003194:	4842      	ldr	r0, [pc, #264]	; (80032a0 <main+0x4e0>)
 8003196:	f7fd fe7b 	bl	8000e90 <HAL_GPIO_WritePin>
	  HAL_Delay(1000); //delay before start to get finger out of the way
 800319a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800319e:	f7fd f8e7 	bl	8000370 <HAL_Delay>

	  __HAL_TIM_SET_COUNTER(&htim1, 0); //reset counters
 80031a2:	4b32      	ldr	r3, [pc, #200]	; (800326c <main+0x4ac>)
	  __HAL_TIM_SET_COUNTER(&htim4, 0);
	  prev_l_count = 0;
	  prev_r_count = 0;

	  Set_Left(m_speed, FORWARD); //start going straight
 80031a4:	f8df a12c 	ldr.w	sl, [pc, #300]	; 80032d4 <main+0x514>
 80031a8:	2101      	movs	r1, #1
	  if ((stop_flag == FALSE) && (on_l > 1500)) { //start searching (place finger in front)

      HAL_GPIO_WritePin(GPIOD, LED5_Pin, ON); //Turn on LEDs to indicate it is searching
	  HAL_Delay(1000); //delay before start to get finger out of the way

	  __HAL_TIM_SET_COUNTER(&htim1, 0); //reset counters
 80031aa:	681b      	ldr	r3, [r3, #0]
	  __HAL_TIM_SET_COUNTER(&htim4, 0);
	  prev_l_count = 0;
	  prev_r_count = 0;
 80031ac:	4d3d      	ldr	r5, [pc, #244]	; (80032a4 <main+0x4e4>)
	  if ((stop_flag == FALSE) && (on_l > 1500)) { //start searching (place finger in front)

      HAL_GPIO_WritePin(GPIOD, LED5_Pin, ON); //Turn on LEDs to indicate it is searching
	  HAL_Delay(1000); //delay before start to get finger out of the way

	  __HAL_TIM_SET_COUNTER(&htim1, 0); //reset counters
 80031ae:	625c      	str	r4, [r3, #36]	; 0x24
	  __HAL_TIM_SET_COUNTER(&htim4, 0);
 80031b0:	4b31      	ldr	r3, [pc, #196]	; (8003278 <main+0x4b8>)
	  prev_l_count = 0;
	  prev_r_count = 0;

	  Set_Left(m_speed, FORWARD); //start going straight
 80031b2:	f8da 0000 	ldr.w	r0, [sl]

      HAL_GPIO_WritePin(GPIOD, LED5_Pin, ON); //Turn on LEDs to indicate it is searching
	  HAL_Delay(1000); //delay before start to get finger out of the way

	  __HAL_TIM_SET_COUNTER(&htim1, 0); //reset counters
	  __HAL_TIM_SET_COUNTER(&htim4, 0);
 80031b6:	681b      	ldr	r3, [r3, #0]
	  prev_l_count = 0;
	  prev_r_count = 0;
 80031b8:	602c      	str	r4, [r5, #0]

      HAL_GPIO_WritePin(GPIOD, LED5_Pin, ON); //Turn on LEDs to indicate it is searching
	  HAL_Delay(1000); //delay before start to get finger out of the way

	  __HAL_TIM_SET_COUNTER(&htim1, 0); //reset counters
	  __HAL_TIM_SET_COUNTER(&htim4, 0);
 80031ba:	625c      	str	r4, [r3, #36]	; 0x24
	  prev_l_count = 0;
 80031bc:	4b3a      	ldr	r3, [pc, #232]	; (80032a8 <main+0x4e8>)
 80031be:	601c      	str	r4, [r3, #0]
 80031c0:	9303      	str	r3, [sp, #12]
	  prev_r_count = 0;

	  Set_Left(m_speed, FORWARD); //start going straight
 80031c2:	f7ff fd5b 	bl	8002c7c <Set_Left>
	  Set_Right(m_speed+15, FORWARD); //quite the offset there mate
 80031c6:	f8da 0000 	ldr.w	r0, [sl]
 80031ca:	2101      	movs	r1, #1
 80031cc:	300f      	adds	r0, #15
 80031ce:	f7ff fd7d 	bl	8002ccc <Set_Right>
 80031d2:	9b03      	ldr	r3, [sp, #12]
 80031d4:	461c      	mov	r4, r3

	  while(1) { //searching loop

	  Get_IR();
 80031d6:	f7ff fc91 	bl	8002afc <Get_IR>

	  //motor and encoder correction goes here
	  if (cur_dir == NORTH && on_lf > 1000 && on_rf > 1000) {
 80031da:	4b34      	ldr	r3, [pc, #208]	; (80032ac <main+0x4ec>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	bb2b      	cbnz	r3, 800322c <main+0x46c>
 80031e0:	4b33      	ldr	r3, [pc, #204]	; (80032b0 <main+0x4f0>)
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80031e8:	dd20      	ble.n	800322c <main+0x46c>
 80031ea:	4b32      	ldr	r3, [pc, #200]	; (80032b4 <main+0x4f4>)
 80031ec:	6819      	ldr	r1, [r3, #0]
 80031ee:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 80031f2:	dd1b      	ble.n	800322c <main+0x46c>

	  m_correction = ((on_lf - off_lf) - (on_rf - off_rf))/200;
 80031f4:	4b30      	ldr	r3, [pc, #192]	; (80032b8 <main+0x4f8>)
	  Set_Left(m_speed + m_correction, FORWARD);
 80031f6:	f8da 0000 	ldr.w	r0, [sl]
	  Get_IR();

	  //motor and encoder correction goes here
	  if (cur_dir == NORTH && on_lf > 1000 && on_rf > 1000) {

	  m_correction = ((on_lf - off_lf) - (on_rf - off_rf))/200;
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	1ad2      	subs	r2, r2, r3
 80031fe:	4b2f      	ldr	r3, [pc, #188]	; (80032bc <main+0x4fc>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	1acb      	subs	r3, r1, r3
	  Set_Left(m_speed + m_correction, FORWARD);
 8003204:	2101      	movs	r1, #1
	  Get_IR();

	  //motor and encoder correction goes here
	  if (cur_dir == NORTH && on_lf > 1000 && on_rf > 1000) {

	  m_correction = ((on_lf - off_lf) - (on_rf - off_rf))/200;
 8003206:	1ad2      	subs	r2, r2, r3
 8003208:	23c8      	movs	r3, #200	; 0xc8
 800320a:	fb92 f3f3 	sdiv	r3, r2, r3
 800320e:	4a2c      	ldr	r2, [pc, #176]	; (80032c0 <main+0x500>)
	  Set_Left(m_speed + m_correction, FORWARD);
 8003210:	4418      	add	r0, r3
	  Get_IR();

	  //motor and encoder correction goes here
	  if (cur_dir == NORTH && on_lf > 1000 && on_rf > 1000) {

	  m_correction = ((on_lf - off_lf) - (on_rf - off_rf))/200;
 8003212:	6013      	str	r3, [r2, #0]
 8003214:	9203      	str	r2, [sp, #12]
	  Set_Left(m_speed + m_correction, FORWARD);
 8003216:	f7ff fd31 	bl	8002c7c <Set_Left>
	  Set_Right(m_speed + 15 - m_correction, FORWARD);
 800321a:	f8da 0000 	ldr.w	r0, [sl]
 800321e:	2101      	movs	r1, #1
 8003220:	9a03      	ldr	r2, [sp, #12]
 8003222:	300f      	adds	r0, #15
 8003224:	6813      	ldr	r3, [r2, #0]
 8003226:	1ac0      	subs	r0, r0, r3
 8003228:	f7ff fd50 	bl	8002ccc <Set_Right>
	  }


	  if (cur_dir == NORTH && ((on_l - off_l >= 700) || (on_r - off_r >= 700))) //basic structure. Will eventually be case statement. Decide next move
 800322c:	f8db 3000 	ldr.w	r3, [fp]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d153      	bne.n	80032dc <main+0x51c>
 8003234:	9a02      	ldr	r2, [sp, #8]
 8003236:	6811      	ldr	r1, [r2, #0]
 8003238:	4a22      	ldr	r2, [pc, #136]	; (80032c4 <main+0x504>)
 800323a:	6812      	ldr	r2, [r2, #0]
 800323c:	1a8a      	subs	r2, r1, r2
 800323e:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
 8003242:	da07      	bge.n	8003254 <main+0x494>
 8003244:	4920      	ldr	r1, [pc, #128]	; (80032c8 <main+0x508>)
 8003246:	4821      	ldr	r0, [pc, #132]	; (80032cc <main+0x50c>)
 8003248:	6809      	ldr	r1, [r1, #0]
 800324a:	6800      	ldr	r0, [r0, #0]
 800324c:	1a09      	subs	r1, r1, r0
 800324e:	f5b1 7f2f 	cmp.w	r1, #700	; 0x2bc
 8003252:	db5d      	blt.n	8003310 <main+0x550>
	  {next_dir = EAST;}
 8003254:	491e      	ldr	r1, [pc, #120]	; (80032d0 <main+0x510>)
 8003256:	2003      	movs	r0, #3
 8003258:	6008      	str	r0, [r1, #0]

	  if (cur_dir == EAST && e_turnflag == TRUE && ((on_l-off_l <= 850) || (on_r - off_r <= 850))) //decide next move
	  {next_dir = NORTH;}


	  if (cur_dir == NORTH && (on_l-off_l > 2900 || on_r-off_r > 2900)) //stop you dumb bitch
 800325a:	f640 3154 	movw	r1, #2900	; 0xb54
 800325e:	428a      	cmp	r2, r1
 8003260:	e03a      	b.n	80032d8 <main+0x518>
 8003262:	bf00      	nop
 8003264:	20000598 	.word	0x20000598
 8003268:	40013000 	.word	0x40013000
 800326c:	200004a8 	.word	0x200004a8
 8003270:	40010000 	.word	0x40010000
 8003274:	200005fc 	.word	0x200005fc
 8003278:	2000015c 	.word	0x2000015c
 800327c:	40000800 	.word	0x40000800
 8003280:	200004e4 	.word	0x200004e4
 8003284:	40014000 	.word	0x40014000
 8003288:	200003b8 	.word	0x200003b8
 800328c:	40011000 	.word	0x40011000
 8003290:	2000009c 	.word	0x2000009c
 8003294:	2000008c 	.word	0x2000008c
 8003298:	200000e0 	.word	0x200000e0
 800329c:	20000090 	.word	0x20000090
 80032a0:	40020c00 	.word	0x40020c00
 80032a4:	20000154 	.word	0x20000154
 80032a8:	20000158 	.word	0x20000158
 80032ac:	200000a0 	.word	0x200000a0
 80032b0:	200000d4 	.word	0x200000d4
 80032b4:	200000b8 	.word	0x200000b8
 80032b8:	20000088 	.word	0x20000088
 80032bc:	200000c0 	.word	0x200000c0
 80032c0:	20000094 	.word	0x20000094
 80032c4:	200000bc 	.word	0x200000bc
 80032c8:	200000a4 	.word	0x200000a4
 80032cc:	200000cc 	.word	0x200000cc
 80032d0:	200000d8 	.word	0x200000d8
 80032d4:	20000000 	.word	0x20000000
 80032d8:	dd1a      	ble.n	8003310 <main+0x550>
 80032da:	e022      	b.n	8003322 <main+0x562>


	  if (cur_dir == NORTH && ((on_l - off_l >= 700) || (on_r - off_r >= 700))) //basic structure. Will eventually be case statement. Decide next move
	  {next_dir = EAST;}

	  if (cur_dir == EAST && e_turnflag == TRUE && ((on_l-off_l <= 850) || (on_r - off_r <= 850))) //decide next move
 80032dc:	2b03      	cmp	r3, #3
 80032de:	d160      	bne.n	80033a2 <main+0x5e2>
 80032e0:	4a83      	ldr	r2, [pc, #524]	; (80034f0 <main+0x730>)
 80032e2:	6812      	ldr	r2, [r2, #0]
 80032e4:	2a01      	cmp	r2, #1
 80032e6:	d15c      	bne.n	80033a2 <main+0x5e2>
 80032e8:	9a02      	ldr	r2, [sp, #8]
 80032ea:	4982      	ldr	r1, [pc, #520]	; (80034f4 <main+0x734>)
 80032ec:	6812      	ldr	r2, [r2, #0]
 80032ee:	6809      	ldr	r1, [r1, #0]
 80032f0:	1a52      	subs	r2, r2, r1
 80032f2:	f240 3152 	movw	r1, #850	; 0x352
 80032f6:	428a      	cmp	r2, r1
 80032f8:	dd06      	ble.n	8003308 <main+0x548>
 80032fa:	4a7f      	ldr	r2, [pc, #508]	; (80034f8 <main+0x738>)
 80032fc:	487f      	ldr	r0, [pc, #508]	; (80034fc <main+0x73c>)
 80032fe:	6812      	ldr	r2, [r2, #0]
 8003300:	6800      	ldr	r0, [r0, #0]
 8003302:	1a12      	subs	r2, r2, r0
 8003304:	428a      	cmp	r2, r1
 8003306:	dc4c      	bgt.n	80033a2 <main+0x5e2>
	  {next_dir = NORTH;}
 8003308:	2100      	movs	r1, #0
 800330a:	4a7d      	ldr	r2, [pc, #500]	; (8003500 <main+0x740>)
 800330c:	6011      	str	r1, [r2, #0]
 800330e:	e048      	b.n	80033a2 <main+0x5e2>


	  if (cur_dir == NORTH && (on_l-off_l > 2900 || on_r-off_r > 2900)) //stop you dumb bitch
 8003310:	4a79      	ldr	r2, [pc, #484]	; (80034f8 <main+0x738>)
 8003312:	497a      	ldr	r1, [pc, #488]	; (80034fc <main+0x73c>)
 8003314:	6812      	ldr	r2, [r2, #0]
 8003316:	6809      	ldr	r1, [r1, #0]
 8003318:	1a52      	subs	r2, r2, r1
 800331a:	f640 3154 	movw	r1, #2900	; 0xb54
 800331e:	428a      	cmp	r2, r1
 8003320:	dd3f      	ble.n	80033a2 <main+0x5e2>
	  {
	  Set_Left(0, FORWARD);
 8003322:	2101      	movs	r1, #1
 8003324:	2000      	movs	r0, #0
 8003326:	f7ff fca9 	bl	8002c7c <Set_Left>
      Set_Right(0, FORWARD); //STOP
 800332a:	2101      	movs	r1, #1
 800332c:	2000      	movs	r0, #0
 800332e:	f7ff fccd 	bl	8002ccc <Set_Right>
      if (debug_flag == TRUE) {
 8003332:	4b74      	ldr	r3, [pc, #464]	; (8003504 <main+0x744>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d101      	bne.n	800333e <main+0x57e>
      Send_Debug();
 800333a:	f7ff fb13 	bl	8002964 <Send_Debug>
      }
      //Send_State();
      HAL_GPIO_WritePin(GPIOD, LED5_Pin, OFF);
 800333e:	2200      	movs	r2, #0
 8003340:	2102      	movs	r1, #2
 8003342:	4871      	ldr	r0, [pc, #452]	; (8003508 <main+0x748>)
 8003344:	f7fd fda4 	bl	8000e90 <HAL_GPIO_WritePin>
      stop_flag = TRUE;
 8003348:	2301      	movs	r3, #1
 800334a:	4a70      	ldr	r2, [pc, #448]	; (800350c <main+0x74c>)
 800334c:	6013      	str	r3, [r2, #0]
	  } //searching loop
} //if front wall > 1500


	  //ready loop again
	  HAL_Delay(500); //ONLY CHECK FOR FINGER every half second. If you check to quickly it'll never start
 800334e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003352:	f7fd f80d 	bl	8000370 <HAL_Delay>

	  //DEBUG SHIT. It'll only transmit when it is waiting. Won't take up time while searching
	  if (debug_flag == TRUE){
 8003356:	4b6b      	ldr	r3, [pc, #428]	; (8003504 <main+0x744>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b01      	cmp	r3, #1
 800335c:	f47f aeff 	bne.w	800315e <main+0x39e>
	  m_correction = ((on_lf - off_lf) - (on_rf - off_rf))/50;
 8003360:	4b6b      	ldr	r3, [pc, #428]	; (8003510 <main+0x750>)
 8003362:	4a6c      	ldr	r2, [pc, #432]	; (8003514 <main+0x754>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6812      	ldr	r2, [r2, #0]
 8003368:	496b      	ldr	r1, [pc, #428]	; (8003518 <main+0x758>)
 800336a:	1a9b      	subs	r3, r3, r2
 800336c:	4a6b      	ldr	r2, [pc, #428]	; (800351c <main+0x75c>)
 800336e:	6809      	ldr	r1, [r1, #0]
 8003370:	6812      	ldr	r2, [r2, #0]
	  sprintf(tx_buffer, "L Speed: %d   \r\nR Speed: %d   \r\nCorrection %d \r\n-----------------\r\n", m_speed- m_correction, m_speed+15+m_correction, m_correction);
 8003372:	486b      	ldr	r0, [pc, #428]	; (8003520 <main+0x760>)
	  //ready loop again
	  HAL_Delay(500); //ONLY CHECK FOR FINGER every half second. If you check to quickly it'll never start

	  //DEBUG SHIT. It'll only transmit when it is waiting. Won't take up time while searching
	  if (debug_flag == TRUE){
	  m_correction = ((on_lf - off_lf) - (on_rf - off_rf))/50;
 8003374:	1a52      	subs	r2, r2, r1
 8003376:	1a9a      	subs	r2, r3, r2
 8003378:	2332      	movs	r3, #50	; 0x32
 800337a:	fb92 f2f3 	sdiv	r2, r2, r3
 800337e:	4b69      	ldr	r3, [pc, #420]	; (8003524 <main+0x764>)
 8003380:	601a      	str	r2, [r3, #0]
	  sprintf(tx_buffer, "L Speed: %d   \r\nR Speed: %d   \r\nCorrection %d \r\n-----------------\r\n", m_speed- m_correction, m_speed+15+m_correction, m_correction);
 8003382:	4b69      	ldr	r3, [pc, #420]	; (8003528 <main+0x768>)
 8003384:	6819      	ldr	r1, [r3, #0]
 8003386:	9200      	str	r2, [sp, #0]
 8003388:	f101 030f 	add.w	r3, r1, #15
 800338c:	4413      	add	r3, r2
 800338e:	1a8a      	subs	r2, r1, r2
 8003390:	4966      	ldr	r1, [pc, #408]	; (800352c <main+0x76c>)
 8003392:	f000 fb09 	bl	80039a8 <siprintf>
	  Transmit(tx_buffer);
 8003396:	4862      	ldr	r0, [pc, #392]	; (8003520 <main+0x760>)
 8003398:	f7ff fad4 	bl	8002944 <Transmit>
	  Send_Debug();
 800339c:	f7ff fae2 	bl	8002964 <Send_Debug>
 80033a0:	e6dd      	b.n	800315e <main+0x39e>
      HAL_GPIO_WritePin(GPIOD, LED5_Pin, OFF);
      stop_flag = TRUE;
	  break; //exit the searching loop and go back to ready loop
	  }

	  l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
 80033a2:	6832      	ldr	r2, [r6, #0]
	  r_count = __HAL_TIM_GET_COUNTER(&htim4);

	  switch (cur_dir) { //main case statement. While moving, check distance traveled. If 1 unit has been covered, execute next move
 80033a4:	2b02      	cmp	r3, #2
      stop_flag = TRUE;
	  break; //exit the searching loop and go back to ready loop
	  }

	  l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
	  r_count = __HAL_TIM_GET_COUNTER(&htim4);
 80033a6:	6839      	ldr	r1, [r7, #0]
      HAL_GPIO_WritePin(GPIOD, LED5_Pin, OFF);
      stop_flag = TRUE;
	  break; //exit the searching loop and go back to ready loop
	  }

	  l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
 80033a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
	  r_count = __HAL_TIM_GET_COUNTER(&htim4);
 80033aa:	6a49      	ldr	r1, [r1, #36]	; 0x24
      HAL_GPIO_WritePin(GPIOD, LED5_Pin, OFF);
      stop_flag = TRUE;
	  break; //exit the searching loop and go back to ready loop
	  }

	  l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
 80033ac:	f8c9 2000 	str.w	r2, [r9]
	  r_count = __HAL_TIM_GET_COUNTER(&htim4);
 80033b0:	f8c8 1000 	str.w	r1, [r8]

	  switch (cur_dir) { //main case statement. While moving, check distance traveled. If 1 unit has been covered, execute next move
 80033b4:	d130      	bne.n	8003418 <main+0x658>

	  } //case east
	  break;

	  case WEST:
		  if ((l_count-prev_l_count) >= 250 || ((r_count-prev_r_count) >= 680)) { //finished making turn. left and right wheel don't travel at same speeds
 80033b6:	6823      	ldr	r3, [r4, #0]
 80033b8:	1ad2      	subs	r2, r2, r3
 80033ba:	2af9      	cmp	r2, #249	; 0xf9
 80033bc:	d805      	bhi.n	80033ca <main+0x60a>
 80033be:	682b      	ldr	r3, [r5, #0]
 80033c0:	1ac9      	subs	r1, r1, r3
 80033c2:	f5b1 7f2a 	cmp.w	r1, #680	; 0x2a8
 80033c6:	f4ff af06 	bcc.w	80031d6 <main+0x416>
		      cur_dir = next_dir;
 80033ca:	4b4d      	ldr	r3, [pc, #308]	; (8003500 <main+0x740>)
		      HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80033cc:	2108      	movs	r1, #8
 80033ce:	484e      	ldr	r0, [pc, #312]	; (8003508 <main+0x748>)
	  } //case east
	  break;

	  case WEST:
		  if ((l_count-prev_l_count) >= 250 || ((r_count-prev_r_count) >= 680)) { //finished making turn. left and right wheel don't travel at same speeds
		      cur_dir = next_dir;
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f8cb 3000 	str.w	r3, [fp]
		      HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80033d6:	f7fd fd5f 	bl	8000e98 <HAL_GPIO_TogglePin>

		       switch (cur_dir) { //need to change direction or nah
 80033da:	f8db 3000 	ldr.w	r3, [fp]
 80033de:	b14b      	cbz	r3, 80033f4 <main+0x634>
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	f47f aef8 	bne.w	80031d6 <main+0x416>
	    break;

	    case EAST:
		Set_Left(125, FORWARD); //need to make right turn
		Set_Right(30, FORWARD);
		prev_l_count = l_count;
 80033e6:	f8d9 3000 	ldr.w	r3, [r9]
 80033ea:	6023      	str	r3, [r4, #0]
		prev_r_count = r_count;
 80033ec:	f8d8 3000 	ldr.w	r3, [r8]
 80033f0:	602b      	str	r3, [r5, #0]
		//Stop_IR();
		break;
 80033f2:	e6f0      	b.n	80031d6 <main+0x416>
		      cur_dir = next_dir;
		      HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);

		       switch (cur_dir) { //need to change direction or nah
		       	    case NORTH:
		      	    prev_l_count = l_count; //save current counters
 80033f4:	f8d9 3000 	ldr.w	r3, [r9]
		       	    prev_r_count = r_count;
		       	    Set_Left(m_speed, FORWARD);
 80033f8:	2101      	movs	r1, #1
 80033fa:	f8da 0000 	ldr.w	r0, [sl]
		      cur_dir = next_dir;
		      HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);

		       switch (cur_dir) { //need to change direction or nah
		       	    case NORTH:
		      	    prev_l_count = l_count; //save current counters
 80033fe:	6023      	str	r3, [r4, #0]
		       	    prev_r_count = r_count;
 8003400:	f8d8 3000 	ldr.w	r3, [r8]
 8003404:	602b      	str	r3, [r5, #0]
		       	    Set_Left(m_speed, FORWARD);
 8003406:	f7ff fc39 	bl	8002c7c <Set_Left>
		       	    Set_Right(m_speed+15, FORWARD);
 800340a:	f8da 0000 	ldr.w	r0, [sl]
 800340e:	2101      	movs	r1, #1
 8003410:	300f      	adds	r0, #15
 8003412:	f7ff fc5b 	bl	8002ccc <Set_Right>
		       	    break;
 8003416:	e6de      	b.n	80031d6 <main+0x416>
	  }

	  l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
	  r_count = __HAL_TIM_GET_COUNTER(&htim4);

	  switch (cur_dir) { //main case statement. While moving, check distance traveled. If 1 unit has been covered, execute next move
 8003418:	2b03      	cmp	r3, #3
 800341a:	d143      	bne.n	80034a4 <main+0x6e4>
	  }
	  break;

	  case EAST: //break up turn into turn and accelerate

	  if ((e_turnflag == FALSE) && ((l_count-prev_l_count) >= 500 || ((r_count-prev_r_count) >= 80))) { //finished making turn. left and right wheel don't travel at same speeds
 800341c:	4b34      	ldr	r3, [pc, #208]	; (80034f0 <main+0x730>)
 800341e:	6818      	ldr	r0, [r3, #0]
 8003420:	b9b8      	cbnz	r0, 8003452 <main+0x692>
 8003422:	6820      	ldr	r0, [r4, #0]
 8003424:	1a12      	subs	r2, r2, r0
 8003426:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 800342a:	d203      	bcs.n	8003434 <main+0x674>
 800342c:	682a      	ldr	r2, [r5, #0]
 800342e:	1a89      	subs	r1, r1, r2
 8003430:	294f      	cmp	r1, #79	; 0x4f
 8003432:	d90e      	bls.n	8003452 <main+0x692>

		  Set_Left(m_speed, FORWARD); //finish turn by accelerating forward
 8003434:	2101      	movs	r1, #1
 8003436:	f8da 0000 	ldr.w	r0, [sl]
 800343a:	9303      	str	r3, [sp, #12]
 800343c:	f7ff fc1e 	bl	8002c7c <Set_Left>
		  Set_Right(m_speed+15, FORWARD);
 8003440:	f8da 0000 	ldr.w	r0, [sl]
 8003444:	2101      	movs	r1, #1
 8003446:	300f      	adds	r0, #15
 8003448:	f7ff fc40 	bl	8002ccc <Set_Right>
		  e_turnflag = TRUE;
 800344c:	2201      	movs	r2, #1
 800344e:	9b03      	ldr	r3, [sp, #12]
 8003450:	601a      	str	r2, [r3, #0]


	  }

	  if ((e_turnflag == TRUE) && ((l_count-prev_l_count) >= 750 || ((r_count-prev_r_count) >= 330))) { //made it to same point
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	2a01      	cmp	r2, #1
 8003456:	f47f aebe 	bne.w	80031d6 <main+0x416>
 800345a:	f8d9 1000 	ldr.w	r1, [r9]
 800345e:	f240 20ed 	movw	r0, #749	; 0x2ed
 8003462:	6822      	ldr	r2, [r4, #0]
 8003464:	1a8a      	subs	r2, r1, r2
 8003466:	4282      	cmp	r2, r0
 8003468:	d807      	bhi.n	800347a <main+0x6ba>
 800346a:	f8d8 2000 	ldr.w	r2, [r8]
 800346e:	6828      	ldr	r0, [r5, #0]
 8003470:	1a12      	subs	r2, r2, r0
 8003472:	f5b2 7fa5 	cmp.w	r2, #330	; 0x14a
 8003476:	f4ff aeae 	bcc.w	80031d6 <main+0x416>
		cur_dir = next_dir;
 800347a:	4a21      	ldr	r2, [pc, #132]	; (8003500 <main+0x740>)
		e_turnflag = FALSE;
 800347c:	2000      	movs	r0, #0


	  }

	  if ((e_turnflag == TRUE) && ((l_count-prev_l_count) >= 750 || ((r_count-prev_r_count) >= 330))) { //made it to same point
		cur_dir = next_dir;
 800347e:	6812      	ldr	r2, [r2, #0]
		e_turnflag = FALSE;
 8003480:	6018      	str	r0, [r3, #0]


	  }

	  if ((e_turnflag == TRUE) && ((l_count-prev_l_count) >= 750 || ((r_count-prev_r_count) >= 330))) { //made it to same point
		cur_dir = next_dir;
 8003482:	f8cb 2000 	str.w	r2, [fp]
		e_turnflag = FALSE;

		//Save_State();


        switch (cur_dir) { //need to change direction or nah
 8003486:	b15a      	cbz	r2, 80034a0 <main+0x6e0>
 8003488:	2a03      	cmp	r2, #3
 800348a:	f47f aea4 	bne.w	80031d6 <main+0x416>
	    prev_l_count = l_count; //no change. keep going straight. Save encoder values
	    prev_r_count = r_count;
	    break;

	    case EAST:
		Set_Left(125, FORWARD); //need to make right turn
 800348e:	2101      	movs	r1, #1
 8003490:	207d      	movs	r0, #125	; 0x7d
 8003492:	f7ff fbf3 	bl	8002c7c <Set_Left>
		Set_Right(30, FORWARD);
 8003496:	2101      	movs	r1, #1
 8003498:	201e      	movs	r0, #30
 800349a:	f7ff fc17 	bl	8002ccc <Set_Right>
 800349e:	e7a2      	b.n	80033e6 <main+0x626>


        switch (cur_dir) { //need to change direction or nah

        	    case NORTH:
        	    prev_l_count = l_count; //save current counters
 80034a0:	6021      	str	r1, [r4, #0]
 80034a2:	e7a3      	b.n	80033ec <main+0x62c>
	  }

	  l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
	  r_count = __HAL_TIM_GET_COUNTER(&htim4);

	  switch (cur_dir) { //main case statement. While moving, check distance traveled. If 1 unit has been covered, execute next move
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f47f ae96 	bne.w	80031d6 <main+0x416>

	  case NORTH:
	  if ((l_count-prev_l_count) >= 690 || ((r_count-prev_r_count) >= 690)) { //left and right wheel moving at same speed. If statement checks if distance has been covered
 80034aa:	6823      	ldr	r3, [r4, #0]
 80034ac:	f240 20b1 	movw	r0, #689	; 0x2b1
 80034b0:	1ad2      	subs	r2, r2, r3
 80034b2:	4282      	cmp	r2, r0
 80034b4:	d804      	bhi.n	80034c0 <main+0x700>
 80034b6:	682b      	ldr	r3, [r5, #0]
 80034b8:	1ac9      	subs	r1, r1, r3
 80034ba:	4281      	cmp	r1, r0
 80034bc:	f67f ae8b 	bls.w	80031d6 <main+0x416>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80034c0:	2108      	movs	r1, #8
 80034c2:	4811      	ldr	r0, [pc, #68]	; (8003508 <main+0x748>)
 80034c4:	f7fd fce8 	bl	8000e98 <HAL_GPIO_TogglePin>
		cur_dir = next_dir; //execute next move
 80034c8:	4b0d      	ldr	r3, [pc, #52]	; (8003500 <main+0x740>)
 80034ca:	681b      	ldr	r3, [r3, #0]

		//Save_State();

	    switch (cur_dir) { //check if motor speeds have to change with next move
 80034cc:	2b02      	cmp	r3, #2
	  switch (cur_dir) { //main case statement. While moving, check distance traveled. If 1 unit has been covered, execute next move

	  case NORTH:
	  if ((l_count-prev_l_count) >= 690 || ((r_count-prev_r_count) >= 690)) { //left and right wheel moving at same speed. If statement checks if distance has been covered
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
		cur_dir = next_dir; //execute next move
 80034ce:	f8cb 3000 	str.w	r3, [fp]

		//Save_State();

	    switch (cur_dir) { //check if motor speeds have to change with next move
 80034d2:	d005      	beq.n	80034e0 <main+0x720>
 80034d4:	2b03      	cmp	r3, #3
 80034d6:	d0da      	beq.n	800348e <main+0x6ce>
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f47f ae7c 	bne.w	80031d6 <main+0x416>
 80034de:	e782      	b.n	80033e6 <main+0x626>
		prev_r_count = r_count;
		//Stop_IR();
		break;

	    case WEST:
	    Set_Left(30, FORWARD); //need to make left turn
 80034e0:	2101      	movs	r1, #1
 80034e2:	201e      	movs	r0, #30
 80034e4:	f7ff fbca 	bl	8002c7c <Set_Left>
	    Set_Right(125, FORWARD);
 80034e8:	2101      	movs	r1, #1
 80034ea:	207d      	movs	r0, #125	; 0x7d
 80034ec:	e7d5      	b.n	800349a <main+0x6da>
 80034ee:	bf00      	nop
 80034f0:	200000d0 	.word	0x200000d0
 80034f4:	200000bc 	.word	0x200000bc
 80034f8:	200000a4 	.word	0x200000a4
 80034fc:	200000cc 	.word	0x200000cc
 8003500:	200000d8 	.word	0x200000d8
 8003504:	200000dc 	.word	0x200000dc
 8003508:	40020c00 	.word	0x40020c00
 800350c:	200000e0 	.word	0x200000e0
 8003510:	200000d4 	.word	0x200000d4
 8003514:	20000088 	.word	0x20000088
 8003518:	200000c0 	.word	0x200000c0
 800351c:	200000b8 	.word	0x200000b8
 8003520:	200002a8 	.word	0x200002a8
 8003524:	20000094 	.word	0x20000094
 8003528:	20000000 	.word	0x20000000
 800352c:	08004424 	.word	0x08004424

08003530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003530:	b508      	push	{r3, lr}

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003532:	2003      	movs	r0, #3
 8003534:	f7fd f964 	bl	8000800 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003538:	2200      	movs	r2, #0
 800353a:	f06f 000b 	mvn.w	r0, #11
 800353e:	4611      	mov	r1, r2
 8003540:	f7fd f970 	bl	8000824 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003544:	2200      	movs	r2, #0
 8003546:	f06f 000a 	mvn.w	r0, #10
 800354a:	4611      	mov	r1, r2
 800354c:	f7fd f96a 	bl	8000824 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003550:	2200      	movs	r2, #0
 8003552:	f06f 0009 	mvn.w	r0, #9
 8003556:	4611      	mov	r1, r2
 8003558:	f7fd f964 	bl	8000824 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800355c:	2200      	movs	r2, #0
 800355e:	f06f 0004 	mvn.w	r0, #4
 8003562:	4611      	mov	r1, r2
 8003564:	f7fd f95e 	bl	8000824 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003568:	2200      	movs	r2, #0
 800356a:	f06f 0003 	mvn.w	r0, #3
 800356e:	4611      	mov	r1, r2
 8003570:	f7fd f958 	bl	8000824 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003574:	2200      	movs	r2, #0
 8003576:	f06f 0001 	mvn.w	r0, #1
 800357a:	4611      	mov	r1, r2
 800357c:	f7fd f952 	bl	8000824 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003580:	2200      	movs	r2, #0
 8003582:	f04f 30ff 	mov.w	r0, #4294967295
 8003586:	4611      	mov	r1, r2

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003588:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800358c:	f7fd b94a 	b.w	8000824 <HAL_NVIC_SetPriority>

08003590 <HAL_ADC_MspInit>:
{

  GPIO_InitTypeDef GPIO_InitStruct;
  static DMA_HandleTypeDef  hdma_adc;

  if(hadc->Instance==ADC1)
 8003590:	6802      	ldr	r2, [r0, #0]
 8003592:	4b2a      	ldr	r3, [pc, #168]	; (800363c <HAL_ADC_MspInit+0xac>)
 8003594:	429a      	cmp	r2, r3

  /* USER CODE END MspInit 1 */
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003596:	b570      	push	{r4, r5, r6, lr}
 8003598:	4606      	mov	r6, r0
 800359a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;
  static DMA_HandleTypeDef  hdma_adc;

  if(hadc->Instance==ADC1)
 800359c:	d14b      	bne.n	8003636 <HAL_ADC_MspInit+0xa6>
  {

    __HAL_RCC_ADC1_CLK_ENABLE();
 800359e:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a2:	2500      	movs	r5, #0
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035a4:	2403      	movs	r4, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035a6:	a903      	add	r1, sp, #12
  static DMA_HandleTypeDef  hdma_adc;

  if(hadc->Instance==ADC1)
  {

    __HAL_RCC_ADC1_CLK_ENABLE();
 80035a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035aa:	4825      	ldr	r0, [pc, #148]	; (8003640 <HAL_ADC_MspInit+0xb0>)
  static DMA_HandleTypeDef  hdma_adc;

  if(hadc->Instance==ADC1)
  {

    __HAL_RCC_ADC1_CLK_ENABLE();
 80035ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035b0:	645a      	str	r2, [r3, #68]	; 0x44
 80035b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035b4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80035b8:	9201      	str	r2, [sp, #4]
 80035ba:	9a01      	ldr	r2, [sp, #4]

    /* Enable DMA2 clock */
    __HAL_RCC_DMA2_CLK_ENABLE();
 80035bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035be:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30
 80035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035c6:	9404      	str	r4, [sp, #16]
  {

    __HAL_RCC_ADC1_CLK_ENABLE();

    /* Enable DMA2 clock */
    __HAL_RCC_DMA2_CLK_ENABLE();
 80035c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035cc:	9505      	str	r5, [sp, #20]
  {

    __HAL_RCC_ADC1_CLK_ENABLE();

    /* Enable DMA2 clock */
    __HAL_RCC_DMA2_CLK_ENABLE();
 80035ce:	9302      	str	r3, [sp, #8]
 80035d0:	9b02      	ldr	r3, [sp, #8]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
 80035d2:	2330      	movs	r3, #48	; 0x30
 80035d4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035d6:	f7fd fb6f 	bl	8000cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RF_REC_Pin|R_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035da:	a903      	add	r1, sp, #12
 80035dc:	4819      	ldr	r0, [pc, #100]	; (8003644 <HAL_ADC_MspInit+0xb4>)
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = RF_REC_Pin|R_REC_Pin;
 80035de:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035e0:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e2:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035e4:	f7fd fb68 	bl	8000cb8 <HAL_GPIO_Init>

    hdma_adc.Instance = DMA2_Stream0;
 80035e8:	4c17      	ldr	r4, [pc, #92]	; (8003648 <HAL_ADC_MspInit+0xb8>)
 80035ea:	4b18      	ldr	r3, [pc, #96]	; (800364c <HAL_ADC_MspInit+0xbc>)
    hdma_adc.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    hdma_adc.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
    hdma_adc.Init.MemBurst = DMA_MBURST_SINGLE;
    hdma_adc.Init.PeriphBurst = DMA_PBURST_SINGLE;

    HAL_DMA_Init(&hdma_adc);
 80035ec:	4620      	mov	r0, r4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    hdma_adc.Instance = DMA2_Stream0;
    hdma_adc.Init.Channel  = DMA_CHANNEL_0;
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035ee:	60a5      	str	r5, [r4, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80035f0:	60e5      	str	r5, [r4, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc.Init.Mode = DMA_CIRCULAR;
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_adc.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035f2:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_adc.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
    hdma_adc.Init.MemBurst = DMA_MBURST_SINGLE;
 80035f4:	62e5      	str	r5, [r4, #44]	; 0x2c
    hdma_adc.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80035f6:	6325      	str	r5, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    hdma_adc.Instance = DMA2_Stream0;
    hdma_adc.Init.Channel  = DMA_CHANNEL_0;
 80035f8:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80035fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003600:	6123      	str	r3, [r4, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003606:	6163      	str	r3, [r4, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003608:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800360c:	61a3      	str	r3, [r4, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800360e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003612:	61e3      	str	r3, [r4, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8003614:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003618:	6223      	str	r3, [r4, #32]
    hdma_adc.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    hdma_adc.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800361a:	2301      	movs	r3, #1
 800361c:	62a3      	str	r3, [r4, #40]	; 0x28
    hdma_adc.Init.MemBurst = DMA_MBURST_SINGLE;
    hdma_adc.Init.PeriphBurst = DMA_PBURST_SINGLE;

    HAL_DMA_Init(&hdma_adc);
 800361e:	f7fd f983 	bl	8000928 <HAL_DMA_Init>

      /* Associate the initialized DMA handle to the ADC handle */
    __HAL_LINKDMA(hadc, DMA_Handle, hdma_adc);
 8003622:	63b4      	str	r4, [r6, #56]	; 0x38

      /*##-4- Configure the NVIC for DMA #########################################*/
      /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003624:	2038      	movs	r0, #56	; 0x38
 8003626:	462a      	mov	r2, r5
 8003628:	4629      	mov	r1, r5
    hdma_adc.Init.PeriphBurst = DMA_PBURST_SINGLE;

    HAL_DMA_Init(&hdma_adc);

      /* Associate the initialized DMA handle to the ADC handle */
    __HAL_LINKDMA(hadc, DMA_Handle, hdma_adc);
 800362a:	63a6      	str	r6, [r4, #56]	; 0x38

      /*##-4- Configure the NVIC for DMA #########################################*/
      /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800362c:	f7fd f8fa 	bl	8000824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003630:	2038      	movs	r0, #56	; 0x38
 8003632:	f7fd f92f 	bl	8000894 <HAL_NVIC_EnableIRQ>

  }

}
 8003636:	b008      	add	sp, #32
 8003638:	bd70      	pop	{r4, r5, r6, pc}
 800363a:	bf00      	nop
 800363c:	40012000 	.word	0x40012000
 8003640:	40020800 	.word	0x40020800
 8003644:	40020400 	.word	0x40020400
 8003648:	200000e4 	.word	0x200000e4
 800364c:	40026410 	.word	0x40026410

08003650 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8003650:	6802      	ldr	r2, [r0, #0]
 8003652:	4b14      	ldr	r3, [pc, #80]	; (80036a4 <HAL_SPI_MspInit+0x54>)
 8003654:	429a      	cmp	r2, r3


}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003656:	b510      	push	{r4, lr}
 8003658:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 800365a:	d120      	bne.n	800369e <HAL_SPI_MspInit+0x4e>
  {

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800365c:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GYRO_SCLK_Pin|GYRO_MISO_Pin|GYRO_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003660:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003662:	a901      	add	r1, sp, #4
 8003664:	4810      	ldr	r0, [pc, #64]	; (80036a8 <HAL_SPI_MspInit+0x58>)
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
  {

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003666:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003668:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800366c:	645a      	str	r2, [r3, #68]	; 0x44
 800366e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GYRO_SCLK_Pin|GYRO_MISO_Pin|GYRO_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003670:	9403      	str	r4, [sp, #12]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
  {

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003672:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	9b00      	ldr	r3, [sp, #0]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GYRO_SCLK_Pin|GYRO_MISO_Pin|GYRO_MOSI_Pin;
 800367a:	23e0      	movs	r3, #224	; 0xe0
 800367c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800367e:	2302      	movs	r3, #2
 8003680:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003682:	2303      	movs	r3, #3
 8003684:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003686:	2305      	movs	r3, #5
 8003688:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800368a:	f7fd fb15 	bl	8000cb8 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 800368e:	2023      	movs	r0, #35	; 0x23
 8003690:	4622      	mov	r2, r4
 8003692:	2101      	movs	r1, #1
 8003694:	f7fd f8c6 	bl	8000824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003698:	2023      	movs	r0, #35	; 0x23
 800369a:	f7fd f8fb 	bl	8000894 <HAL_NVIC_EnableIRQ>

  }

}
 800369e:	b006      	add	sp, #24
 80036a0:	bd10      	pop	{r4, pc}
 80036a2:	bf00      	nop
 80036a4:	40013000 	.word	0x40013000
 80036a8:	40020000 	.word	0x40020000

080036ac <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 80036ac:	6803      	ldr	r3, [r0, #0]
 80036ae:	4a29      	ldr	r2, [pc, #164]	; (8003754 <HAL_TIM_Encoder_MspInit+0xa8>)
 80036b0:	4293      	cmp	r3, r2
  }

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim)
{
 80036b2:	b570      	push	{r4, r5, r6, lr}
 80036b4:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 80036b6:	d11e      	bne.n	80036f6 <HAL_TIM_Encoder_MspInit+0x4a>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80036b8:	4b27      	ldr	r3, [pc, #156]	; (8003758 <HAL_TIM_Encoder_MspInit+0xac>)
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = LENC_CHB_Pin|LENC_CHA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036ba:	2401      	movs	r4, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036bc:	a903      	add	r1, sp, #12
 80036be:	4827      	ldr	r0, [pc, #156]	; (800375c <HAL_TIM_Encoder_MspInit+0xb0>)
  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80036c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036c2:	f042 0201 	orr.w	r2, r2, #1
 80036c6:	645a      	str	r2, [r3, #68]	; 0x44
 80036c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = LENC_CHB_Pin|LENC_CHA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036ca:	9405      	str	r4, [sp, #20]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80036cc:	f003 0301 	and.w	r3, r3, #1
    */
    GPIO_InitStruct.Pin = LENC_CHB_Pin|LENC_CHA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80036d0:	9407      	str	r4, [sp, #28]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80036d2:	9301      	str	r3, [sp, #4]
 80036d4:	9b01      	ldr	r3, [sp, #4]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = LENC_CHB_Pin|LENC_CHA_Pin;
 80036d6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80036da:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036dc:	2302      	movs	r3, #2
 80036de:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80036e0:	2303      	movs	r3, #3
 80036e2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036e4:	f7fd fae8 	bl	8000cb8 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 1);
 80036e8:	201b      	movs	r0, #27
 80036ea:	4622      	mov	r2, r4
 80036ec:	2100      	movs	r1, #0
 80036ee:	f7fd f899 	bl	8000824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80036f2:	201b      	movs	r0, #27
 80036f4:	e02a      	b.n	800374c <HAL_TIM_Encoder_MspInit+0xa0>


  }
  else if(htim->Instance==TIM4)
 80036f6:	4a1a      	ldr	r2, [pc, #104]	; (8003760 <HAL_TIM_Encoder_MspInit+0xb4>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d129      	bne.n	8003750 <HAL_TIM_Encoder_MspInit+0xa4>
  {
      __HAL_RCC_TIM4_CLK_ENABLE();
 80036fc:	4b16      	ldr	r3, [pc, #88]	; (8003758 <HAL_TIM_Encoder_MspInit+0xac>)
      /**TIM4 GPIO Configuration
      PB6     ------> TIM4_CH1
      PB7     ------> TIM4_CH2
      */
      GPIO_InitStruct.Pin = RENCA_Pin;
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036fe:	2402      	movs	r4, #2
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003700:	2601      	movs	r6, #1
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003702:	2503      	movs	r5, #3


  }
  else if(htim->Instance==TIM4)
  {
      __HAL_RCC_TIM4_CLK_ENABLE();
 8003704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      GPIO_InitStruct.Pin = RENCA_Pin;
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
      HAL_GPIO_Init(RENCA_GPIO_Port, &GPIO_InitStruct);
 8003706:	a903      	add	r1, sp, #12
 8003708:	4816      	ldr	r0, [pc, #88]	; (8003764 <HAL_TIM_Encoder_MspInit+0xb8>)


  }
  else if(htim->Instance==TIM4)
  {
      __HAL_RCC_TIM4_CLK_ENABLE();
 800370a:	f042 0204 	orr.w	r2, r2, #4
 800370e:	641a      	str	r2, [r3, #64]	; 0x40
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      /**TIM4 GPIO Configuration
      PB6     ------> TIM4_CH1
      PB7     ------> TIM4_CH2
      */
      GPIO_InitStruct.Pin = RENCA_Pin;
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003712:	9404      	str	r4, [sp, #16]


  }
  else if(htim->Instance==TIM4)
  {
      __HAL_RCC_TIM4_CLK_ENABLE();
 8003714:	f003 0304 	and.w	r3, r3, #4
      PB6     ------> TIM4_CH1
      PB7     ------> TIM4_CH2
      */
      GPIO_InitStruct.Pin = RENCA_Pin;
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003718:	9605      	str	r6, [sp, #20]
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800371a:	9506      	str	r5, [sp, #24]


  }
  else if(htim->Instance==TIM4)
  {
      __HAL_RCC_TIM4_CLK_ENABLE();
 800371c:	9302      	str	r3, [sp, #8]
 800371e:	9b02      	ldr	r3, [sp, #8]

      /**TIM4 GPIO Configuration
      PB6     ------> TIM4_CH1
      PB7     ------> TIM4_CH2
      */
      GPIO_InitStruct.Pin = RENCA_Pin;
 8003720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003724:	9407      	str	r4, [sp, #28]

      /**TIM4 GPIO Configuration
      PB6     ------> TIM4_CH1
      PB7     ------> TIM4_CH2
      */
      GPIO_InitStruct.Pin = RENCA_Pin;
 8003726:	9303      	str	r3, [sp, #12]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
      HAL_GPIO_Init(RENCA_GPIO_Port, &GPIO_InitStruct);
 8003728:	f7fd fac6 	bl	8000cb8 <HAL_GPIO_Init>


      GPIO_InitStruct.Pin = RENCB_Pin;
 800372c:	2380      	movs	r3, #128	; 0x80
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
      HAL_GPIO_Init(RENCB_GPIO_Port, &GPIO_InitStruct);
 800372e:	a903      	add	r1, sp, #12
 8003730:	480d      	ldr	r0, [pc, #52]	; (8003768 <HAL_TIM_Encoder_MspInit+0xbc>)
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
      HAL_GPIO_Init(RENCA_GPIO_Port, &GPIO_InitStruct);


      GPIO_InitStruct.Pin = RENCB_Pin;
 8003732:	9303      	str	r3, [sp, #12]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003734:	9404      	str	r4, [sp, #16]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003736:	9605      	str	r6, [sp, #20]
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003738:	9506      	str	r5, [sp, #24]
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800373a:	9407      	str	r4, [sp, #28]
      HAL_GPIO_Init(RENCB_GPIO_Port, &GPIO_InitStruct);
 800373c:	f7fd fabc 	bl	8000cb8 <HAL_GPIO_Init>


      HAL_NVIC_SetPriority(TIM4_IRQn, 0, 2);
 8003740:	201e      	movs	r0, #30
 8003742:	4622      	mov	r2, r4
 8003744:	2100      	movs	r1, #0
 8003746:	f7fd f86d 	bl	8000824 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800374a:	201e      	movs	r0, #30
 800374c:	f7fd f8a2 	bl	8000894 <HAL_NVIC_EnableIRQ>
}
}
 8003750:	b008      	add	sp, #32
 8003752:	bd70      	pop	{r4, r5, r6, pc}
 8003754:	40010000 	.word	0x40010000
 8003758:	40023800 	.word	0x40023800
 800375c:	40021000 	.word	0x40021000
 8003760:	40000800 	.word	0x40000800
 8003764:	40020c00 	.word	0x40020c00
 8003768:	40020400 	.word	0x40020400

0800376c <HAL_TIM_PWM_MspInit>:
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM2)
 800376c:	6803      	ldr	r3, [r0, #0]
      HAL_NVIC_SetPriority(TIM4_IRQn, 0, 2);
      HAL_NVIC_EnableIRQ(TIM4_IRQn);
}
}
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800376e:	b084      	sub	sp, #16

  if(htim_pwm->Instance==TIM2)
 8003770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003774:	d10b      	bne.n	800378e <HAL_TIM_PWM_MspInit+0x22>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003776:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800377a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800377c:	f042 0201 	orr.w	r2, r2, #1
 8003780:	641a      	str	r2, [r3, #64]	; 0x40
 8003782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	9301      	str	r3, [sp, #4]
 800378a:	9b01      	ldr	r3, [sp, #4]
 800378c:	e01a      	b.n	80037c4 <HAL_TIM_PWM_MspInit+0x58>

  }
  else if(htim_pwm->Instance==TIM3)
 800378e:	4a0e      	ldr	r2, [pc, #56]	; (80037c8 <HAL_TIM_PWM_MspInit+0x5c>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d10a      	bne.n	80037aa <HAL_TIM_PWM_MspInit+0x3e>
    {

      /* Peripheral clock enable */
      __HAL_RCC_TIM3_CLK_ENABLE();
 8003794:	4b0d      	ldr	r3, [pc, #52]	; (80037cc <HAL_TIM_PWM_MspInit+0x60>)
 8003796:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003798:	f042 0202 	orr.w	r2, r2, #2
 800379c:	641a      	str	r2, [r3, #64]	; 0x40
 800379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	9302      	str	r3, [sp, #8]
 80037a6:	9b02      	ldr	r3, [sp, #8]
 80037a8:	e00c      	b.n	80037c4 <HAL_TIM_PWM_MspInit+0x58>

    }

  else if(htim_pwm->Instance==TIM9)
 80037aa:	4a09      	ldr	r2, [pc, #36]	; (80037d0 <HAL_TIM_PWM_MspInit+0x64>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d109      	bne.n	80037c4 <HAL_TIM_PWM_MspInit+0x58>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80037b0:	4b06      	ldr	r3, [pc, #24]	; (80037cc <HAL_TIM_PWM_MspInit+0x60>)
 80037b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037b4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80037b8:	645a      	str	r2, [r3, #68]	; 0x44
 80037ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037c0:	9303      	str	r3, [sp, #12]
 80037c2:	9b03      	ldr	r3, [sp, #12]

  }

}
 80037c4:	b004      	add	sp, #16
 80037c6:	4770      	bx	lr
 80037c8:	40000400 	.word	0x40000400
 80037cc:	40023800 	.word	0x40023800
 80037d0:	40014000 	.word	0x40014000

080037d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM2)
 80037d4:	6803      	ldr	r3, [r0, #0]
 80037d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  }

}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80037da:	b530      	push	{r4, r5, lr}
 80037dc:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM2)
 80037de:	d10b      	bne.n	80037f8 <HAL_TIM_MspPostInit+0x24>

    /**TIM2 GPIO Configuration    
    PA0/WKUP     ------> TIM2_CH1
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = RPWM_Pin|LPWM_Pin;
 80037e0:	2305      	movs	r3, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037e2:	a901      	add	r1, sp, #4
 80037e4:	481a      	ldr	r0, [pc, #104]	; (8003850 <HAL_TIM_MspPostInit+0x7c>)

    /**TIM2 GPIO Configuration    
    PA0/WKUP     ------> TIM2_CH1
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = RPWM_Pin|LPWM_Pin;
 80037e6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e8:	2302      	movs	r3, #2
 80037ea:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ec:	2300      	movs	r3, #0
 80037ee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80037f0:	2301      	movs	r3, #1
 80037f2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80037f4:	9305      	str	r3, [sp, #20]
 80037f6:	e026      	b.n	8003846 <HAL_TIM_MspPostInit+0x72>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  }

  else if(htim->Instance==TIM3)
 80037f8:	4a16      	ldr	r2, [pc, #88]	; (8003854 <HAL_TIM_MspPostInit+0x80>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d115      	bne.n	800382a <HAL_TIM_MspPostInit+0x56>
      PC9     ------> TIM3_CH4
      PB4     ------> TIM3_CH1
      PB5     ------> TIM3_CH2
      */
      GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037fe:	2402      	movs	r4, #2
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003800:	2500      	movs	r5, #0
      PC8     ------> TIM3_CH3
      PC9     ------> TIM3_CH4
      PB4     ------> TIM3_CH1
      PB5     ------> TIM3_CH2
      */
      GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003802:	f44f 7340 	mov.w	r3, #768	; 0x300
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003806:	a901      	add	r1, sp, #4
 8003808:	4813      	ldr	r0, [pc, #76]	; (8003858 <HAL_TIM_MspPostInit+0x84>)
      PC8     ------> TIM3_CH3
      PC9     ------> TIM3_CH4
      PB4     ------> TIM3_CH1
      PB5     ------> TIM3_CH2
      */
      GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800380a:	9301      	str	r3, [sp, #4]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800380c:	9402      	str	r4, [sp, #8]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380e:	9503      	str	r5, [sp, #12]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003810:	9504      	str	r5, [sp, #16]
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003812:	9405      	str	r4, [sp, #20]
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003814:	f7fd fa50 	bl	8000cb8 <HAL_GPIO_Init>

      GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003818:	2330      	movs	r3, #48	; 0x30
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800381a:	9402      	str	r4, [sp, #8]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381c:	9503      	str	r5, [sp, #12]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800381e:	a901      	add	r1, sp, #4
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

      GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003820:	9301      	str	r3, [sp, #4]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003822:	9504      	str	r5, [sp, #16]
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003824:	9405      	str	r4, [sp, #20]
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003826:	480d      	ldr	r0, [pc, #52]	; (800385c <HAL_TIM_MspPostInit+0x88>)
 8003828:	e00d      	b.n	8003846 <HAL_TIM_MspPostInit+0x72>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
    }

  else if(htim->Instance==TIM9)
 800382a:	4a0d      	ldr	r2, [pc, #52]	; (8003860 <HAL_TIM_MspPostInit+0x8c>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d10c      	bne.n	800384a <HAL_TIM_MspPostInit+0x76>
  {
      /**TIM9 GPIO Configuration
      PE5     ------> TIM9_CH1
      */
      GPIO_InitStruct.Pin = BUZZER_Pin;
 8003830:	2320      	movs	r3, #32
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
      HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8003832:	a901      	add	r1, sp, #4
 8003834:	480b      	ldr	r0, [pc, #44]	; (8003864 <HAL_TIM_MspPostInit+0x90>)
  else if(htim->Instance==TIM9)
  {
      /**TIM9 GPIO Configuration
      PE5     ------> TIM9_CH1
      */
      GPIO_InitStruct.Pin = BUZZER_Pin;
 8003836:	9301      	str	r3, [sp, #4]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003838:	2302      	movs	r3, #2
 800383a:	9302      	str	r3, [sp, #8]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800383c:	2300      	movs	r3, #0
 800383e:	9303      	str	r3, [sp, #12]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003840:	9304      	str	r3, [sp, #16]
      GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003842:	2303      	movs	r3, #3
 8003844:	9305      	str	r3, [sp, #20]
      HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8003846:	f7fd fa37 	bl	8000cb8 <HAL_GPIO_Init>

  }

}
 800384a:	b007      	add	sp, #28
 800384c:	bd30      	pop	{r4, r5, pc}
 800384e:	bf00      	nop
 8003850:	40020000 	.word	0x40020000
 8003854:	40000400 	.word	0x40000400
 8003858:	40020800 	.word	0x40020800
 800385c:	40020400 	.word	0x40020400
 8003860:	40014000 	.word	0x40014000
 8003864:	40021000 	.word	0x40021000

08003868 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003868:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800386a:	6802      	ldr	r2, [r0, #0]
 800386c:	4b0f      	ldr	r3, [pc, #60]	; (80038ac <HAL_UART_MspInit+0x44>)
 800386e:	429a      	cmp	r2, r3
 8003870:	d119      	bne.n	80038a6 <HAL_UART_MspInit+0x3e>
  {

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003872:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003876:	a901      	add	r1, sp, #4
 8003878:	480d      	ldr	r0, [pc, #52]	; (80038b0 <HAL_UART_MspInit+0x48>)
  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
  {

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800387a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800387c:	f042 0210 	orr.w	r2, r2, #16
 8003880:	645a      	str	r2, [r3, #68]	; 0x44
 8003882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003884:	f003 0310 	and.w	r3, r3, #16
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	9b00      	ldr	r3, [sp, #0]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800388c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003890:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003892:	2302      	movs	r3, #2
 8003894:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003896:	2301      	movs	r3, #1
 8003898:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800389a:	2303      	movs	r3, #3
 800389c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800389e:	2307      	movs	r3, #7
 80038a0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038a2:	f7fd fa09 	bl	8000cb8 <HAL_GPIO_Init>


  }

}
 80038a6:	b007      	add	sp, #28
 80038a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80038ac:	40011000 	.word	0x40011000
 80038b0:	40020000 	.word	0x40020000

080038b4 <NMI_Handler>:
 80038b4:	4770      	bx	lr

080038b6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80038b6:	e7fe      	b.n	80038b6 <HardFault_Handler>

080038b8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80038b8:	e7fe      	b.n	80038b8 <MemManage_Handler>

080038ba <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80038ba:	e7fe      	b.n	80038ba <BusFault_Handler>

080038bc <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80038bc:	e7fe      	b.n	80038bc <UsageFault_Handler>

080038be <SVC_Handler>:
 80038be:	4770      	bx	lr

080038c0 <DebugMon_Handler>:
 80038c0:	4770      	bx	lr

080038c2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80038c2:	4770      	bx	lr

080038c4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80038c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038c6:	f7fc fd45 	bl	8000354 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 80038ce:	f7fd b810 	b.w	80008f2 <HAL_SYSTICK_IRQHandler>

080038d2 <EXTI15_10_IRQHandler>:
  /* USER CODE END SysTick_IRQn 1 */
}

void EXTI15_10_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80038d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80038d6:	f7fd bae3 	b.w	8000ea0 <HAL_GPIO_EXTI_IRQHandler>

080038da <EXTI9_5_IRQHandler>:
}

void EXTI9_5_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80038da:	2040      	movs	r0, #64	; 0x40
 80038dc:	f7fd bae0 	b.w	8000ea0 <HAL_GPIO_EXTI_IRQHandler>

080038e0 <DMA2_Stream0_IRQHandler>:
}

void DMA2_Stream0_IRQHandler(void)
{
  HAL_DMA_IRQHandler(hadc1.DMA_Handle);
 80038e0:	4b01      	ldr	r3, [pc, #4]	; (80038e8 <DMA2_Stream0_IRQHandler+0x8>)
 80038e2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80038e4:	f7fd b92a 	b.w	8000b3c <HAL_DMA_IRQHandler>
 80038e8:	20000370 	.word	0x20000370

080038ec <SPI1_IRQHandler>:
}

void SPI1_IRQHandler(void)
{
  HAL_SPI_IRQHandler(&hspi1);
 80038ec:	4801      	ldr	r0, [pc, #4]	; (80038f4 <SPI1_IRQHandler+0x8>)
 80038ee:	f7fe b999 	b.w	8001c24 <HAL_SPI_IRQHandler>
 80038f2:	bf00      	nop
 80038f4:	20000598 	.word	0x20000598

080038f8 <TIM1_CC_IRQHandler>:
}


void TIM1_CC_IRQHandler(void) {

 HAL_TIM_IRQHandler(&htim1);
 80038f8:	4801      	ldr	r0, [pc, #4]	; (8003900 <TIM1_CC_IRQHandler+0x8>)
 80038fa:	f7fe ba4a 	b.w	8001d92 <HAL_TIM_IRQHandler>
 80038fe:	bf00      	nop
 8003900:	200004a8 	.word	0x200004a8

08003904 <TIM4_IRQHandler>:

}

void TIM4_IRQHandler(void) {

 HAL_TIM_IRQHandler(&htim4);
 8003904:	4801      	ldr	r0, [pc, #4]	; (800390c <TIM4_IRQHandler+0x8>)
 8003906:	f7fe ba44 	b.w	8001d92 <HAL_TIM_IRQHandler>
 800390a:	bf00      	nop
 800390c:	2000015c 	.word	0x2000015c

08003910 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003910:	490f      	ldr	r1, [pc, #60]	; (8003950 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003912:	2000      	movs	r0, #0
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003914:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003918:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800391c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003920:	4b0c      	ldr	r3, [pc, #48]	; (8003954 <SystemInit+0x44>)
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	f042 0201 	orr.w	r2, r2, #1
 8003928:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800392a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003932:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003936:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003938:	4a07      	ldr	r2, [pc, #28]	; (8003958 <SystemInit+0x48>)
 800393a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003942:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003944:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003946:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800394a:	608b      	str	r3, [r1, #8]
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	e000ed00 	.word	0xe000ed00
 8003954:	40023800 	.word	0x40023800
 8003958:	24003010 	.word	0x24003010

0800395c <__libc_init_array>:
 800395c:	b570      	push	{r4, r5, r6, lr}
 800395e:	4b0e      	ldr	r3, [pc, #56]	; (8003998 <__libc_init_array+0x3c>)
 8003960:	4c0e      	ldr	r4, [pc, #56]	; (800399c <__libc_init_array+0x40>)
 8003962:	1ae4      	subs	r4, r4, r3
 8003964:	10a4      	asrs	r4, r4, #2
 8003966:	2500      	movs	r5, #0
 8003968:	461e      	mov	r6, r3
 800396a:	42a5      	cmp	r5, r4
 800396c:	d004      	beq.n	8003978 <__libc_init_array+0x1c>
 800396e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003972:	4798      	blx	r3
 8003974:	3501      	adds	r5, #1
 8003976:	e7f8      	b.n	800396a <__libc_init_array+0xe>
 8003978:	f000 fc46 	bl	8004208 <_init>
 800397c:	4c08      	ldr	r4, [pc, #32]	; (80039a0 <__libc_init_array+0x44>)
 800397e:	4b09      	ldr	r3, [pc, #36]	; (80039a4 <__libc_init_array+0x48>)
 8003980:	1ae4      	subs	r4, r4, r3
 8003982:	10a4      	asrs	r4, r4, #2
 8003984:	2500      	movs	r5, #0
 8003986:	461e      	mov	r6, r3
 8003988:	42a5      	cmp	r5, r4
 800398a:	d004      	beq.n	8003996 <__libc_init_array+0x3a>
 800398c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003990:	4798      	blx	r3
 8003992:	3501      	adds	r5, #1
 8003994:	e7f8      	b.n	8003988 <__libc_init_array+0x2c>
 8003996:	bd70      	pop	{r4, r5, r6, pc}
 8003998:	080044b8 	.word	0x080044b8
 800399c:	080044b8 	.word	0x080044b8
 80039a0:	080044bc 	.word	0x080044bc
 80039a4:	080044b8 	.word	0x080044b8

080039a8 <siprintf>:
 80039a8:	b40e      	push	{r1, r2, r3}
 80039aa:	b500      	push	{lr}
 80039ac:	b09c      	sub	sp, #112	; 0x70
 80039ae:	f44f 7102 	mov.w	r1, #520	; 0x208
 80039b2:	ab1d      	add	r3, sp, #116	; 0x74
 80039b4:	f8ad 1014 	strh.w	r1, [sp, #20]
 80039b8:	9002      	str	r0, [sp, #8]
 80039ba:	9006      	str	r0, [sp, #24]
 80039bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039c0:	480a      	ldr	r0, [pc, #40]	; (80039ec <siprintf+0x44>)
 80039c2:	9104      	str	r1, [sp, #16]
 80039c4:	9107      	str	r1, [sp, #28]
 80039c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80039ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80039ce:	f8ad 1016 	strh.w	r1, [sp, #22]
 80039d2:	6800      	ldr	r0, [r0, #0]
 80039d4:	9301      	str	r3, [sp, #4]
 80039d6:	a902      	add	r1, sp, #8
 80039d8:	f000 f864 	bl	8003aa4 <_svfiprintf_r>
 80039dc:	9b02      	ldr	r3, [sp, #8]
 80039de:	2200      	movs	r2, #0
 80039e0:	701a      	strb	r2, [r3, #0]
 80039e2:	b01c      	add	sp, #112	; 0x70
 80039e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80039e8:	b003      	add	sp, #12
 80039ea:	4770      	bx	lr
 80039ec:	20000068 	.word	0x20000068

080039f0 <__ssputs_r>:
 80039f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039f4:	688e      	ldr	r6, [r1, #8]
 80039f6:	429e      	cmp	r6, r3
 80039f8:	4682      	mov	sl, r0
 80039fa:	460c      	mov	r4, r1
 80039fc:	4691      	mov	r9, r2
 80039fe:	4698      	mov	r8, r3
 8003a00:	d83e      	bhi.n	8003a80 <__ssputs_r+0x90>
 8003a02:	898a      	ldrh	r2, [r1, #12]
 8003a04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a08:	d03a      	beq.n	8003a80 <__ssputs_r+0x90>
 8003a0a:	6825      	ldr	r5, [r4, #0]
 8003a0c:	6909      	ldr	r1, [r1, #16]
 8003a0e:	1a6f      	subs	r7, r5, r1
 8003a10:	6965      	ldr	r5, [r4, #20]
 8003a12:	2302      	movs	r3, #2
 8003a14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a18:	fb95 f5f3 	sdiv	r5, r5, r3
 8003a1c:	1c7b      	adds	r3, r7, #1
 8003a1e:	4443      	add	r3, r8
 8003a20:	429d      	cmp	r5, r3
 8003a22:	bf38      	it	cc
 8003a24:	461d      	movcc	r5, r3
 8003a26:	0553      	lsls	r3, r2, #21
 8003a28:	d50f      	bpl.n	8003a4a <__ssputs_r+0x5a>
 8003a2a:	4629      	mov	r1, r5
 8003a2c:	f000 fb3e 	bl	80040ac <_malloc_r>
 8003a30:	4606      	mov	r6, r0
 8003a32:	b198      	cbz	r0, 8003a5c <__ssputs_r+0x6c>
 8003a34:	463a      	mov	r2, r7
 8003a36:	6921      	ldr	r1, [r4, #16]
 8003a38:	f000 fac4 	bl	8003fc4 <memcpy>
 8003a3c:	89a3      	ldrh	r3, [r4, #12]
 8003a3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a46:	81a3      	strh	r3, [r4, #12]
 8003a48:	e013      	b.n	8003a72 <__ssputs_r+0x82>
 8003a4a:	462a      	mov	r2, r5
 8003a4c:	f000 fb8c 	bl	8004168 <_realloc_r>
 8003a50:	4606      	mov	r6, r0
 8003a52:	b970      	cbnz	r0, 8003a72 <__ssputs_r+0x82>
 8003a54:	6921      	ldr	r1, [r4, #16]
 8003a56:	4650      	mov	r0, sl
 8003a58:	f000 fada 	bl	8004010 <_free_r>
 8003a5c:	230c      	movs	r3, #12
 8003a5e:	f8ca 3000 	str.w	r3, [sl]
 8003a62:	89a3      	ldrh	r3, [r4, #12]
 8003a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a68:	81a3      	strh	r3, [r4, #12]
 8003a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a72:	6126      	str	r6, [r4, #16]
 8003a74:	6165      	str	r5, [r4, #20]
 8003a76:	443e      	add	r6, r7
 8003a78:	1bed      	subs	r5, r5, r7
 8003a7a:	6026      	str	r6, [r4, #0]
 8003a7c:	60a5      	str	r5, [r4, #8]
 8003a7e:	4646      	mov	r6, r8
 8003a80:	4546      	cmp	r6, r8
 8003a82:	bf28      	it	cs
 8003a84:	4646      	movcs	r6, r8
 8003a86:	4632      	mov	r2, r6
 8003a88:	4649      	mov	r1, r9
 8003a8a:	6820      	ldr	r0, [r4, #0]
 8003a8c:	f000 faa5 	bl	8003fda <memmove>
 8003a90:	68a3      	ldr	r3, [r4, #8]
 8003a92:	1b9b      	subs	r3, r3, r6
 8003a94:	60a3      	str	r3, [r4, #8]
 8003a96:	6823      	ldr	r3, [r4, #0]
 8003a98:	441e      	add	r6, r3
 8003a9a:	6026      	str	r6, [r4, #0]
 8003a9c:	2000      	movs	r0, #0
 8003a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08003aa4 <_svfiprintf_r>:
 8003aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aa8:	b09d      	sub	sp, #116	; 0x74
 8003aaa:	4680      	mov	r8, r0
 8003aac:	9303      	str	r3, [sp, #12]
 8003aae:	898b      	ldrh	r3, [r1, #12]
 8003ab0:	061c      	lsls	r4, r3, #24
 8003ab2:	460d      	mov	r5, r1
 8003ab4:	4616      	mov	r6, r2
 8003ab6:	d50d      	bpl.n	8003ad4 <_svfiprintf_r+0x30>
 8003ab8:	690b      	ldr	r3, [r1, #16]
 8003aba:	b95b      	cbnz	r3, 8003ad4 <_svfiprintf_r+0x30>
 8003abc:	2140      	movs	r1, #64	; 0x40
 8003abe:	f000 faf5 	bl	80040ac <_malloc_r>
 8003ac2:	6028      	str	r0, [r5, #0]
 8003ac4:	6128      	str	r0, [r5, #16]
 8003ac6:	b918      	cbnz	r0, 8003ad0 <_svfiprintf_r+0x2c>
 8003ac8:	230c      	movs	r3, #12
 8003aca:	f8c8 3000 	str.w	r3, [r8]
 8003ace:	e0cd      	b.n	8003c6c <_svfiprintf_r+0x1c8>
 8003ad0:	2340      	movs	r3, #64	; 0x40
 8003ad2:	616b      	str	r3, [r5, #20]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8003ad8:	2320      	movs	r3, #32
 8003ada:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ade:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8003c7c <_svfiprintf_r+0x1d8>
 8003ae2:	2330      	movs	r3, #48	; 0x30
 8003ae4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ae8:	4637      	mov	r7, r6
 8003aea:	463c      	mov	r4, r7
 8003aec:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003af0:	b91b      	cbnz	r3, 8003afa <_svfiprintf_r+0x56>
 8003af2:	ebb7 0906 	subs.w	r9, r7, r6
 8003af6:	d010      	beq.n	8003b1a <_svfiprintf_r+0x76>
 8003af8:	e003      	b.n	8003b02 <_svfiprintf_r+0x5e>
 8003afa:	2b25      	cmp	r3, #37	; 0x25
 8003afc:	d0f9      	beq.n	8003af2 <_svfiprintf_r+0x4e>
 8003afe:	4627      	mov	r7, r4
 8003b00:	e7f3      	b.n	8003aea <_svfiprintf_r+0x46>
 8003b02:	464b      	mov	r3, r9
 8003b04:	4632      	mov	r2, r6
 8003b06:	4629      	mov	r1, r5
 8003b08:	4640      	mov	r0, r8
 8003b0a:	f7ff ff71 	bl	80039f0 <__ssputs_r>
 8003b0e:	3001      	adds	r0, #1
 8003b10:	f000 80a7 	beq.w	8003c62 <_svfiprintf_r+0x1be>
 8003b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b16:	444b      	add	r3, r9
 8003b18:	9309      	str	r3, [sp, #36]	; 0x24
 8003b1a:	783b      	ldrb	r3, [r7, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 80a0 	beq.w	8003c62 <_svfiprintf_r+0x1be>
 8003b22:	2300      	movs	r3, #0
 8003b24:	f04f 32ff 	mov.w	r2, #4294967295
 8003b28:	9304      	str	r3, [sp, #16]
 8003b2a:	9307      	str	r3, [sp, #28]
 8003b2c:	9205      	str	r2, [sp, #20]
 8003b2e:	9306      	str	r3, [sp, #24]
 8003b30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b34:	931a      	str	r3, [sp, #104]	; 0x68
 8003b36:	2601      	movs	r6, #1
 8003b38:	2205      	movs	r2, #5
 8003b3a:	7821      	ldrb	r1, [r4, #0]
 8003b3c:	484e      	ldr	r0, [pc, #312]	; (8003c78 <_svfiprintf_r+0x1d4>)
 8003b3e:	f7fc fb6f 	bl	8000220 <memchr>
 8003b42:	1c67      	adds	r7, r4, #1
 8003b44:	9b04      	ldr	r3, [sp, #16]
 8003b46:	b138      	cbz	r0, 8003b58 <_svfiprintf_r+0xb4>
 8003b48:	4a4b      	ldr	r2, [pc, #300]	; (8003c78 <_svfiprintf_r+0x1d4>)
 8003b4a:	1a80      	subs	r0, r0, r2
 8003b4c:	fa06 f000 	lsl.w	r0, r6, r0
 8003b50:	4318      	orrs	r0, r3
 8003b52:	9004      	str	r0, [sp, #16]
 8003b54:	463c      	mov	r4, r7
 8003b56:	e7ef      	b.n	8003b38 <_svfiprintf_r+0x94>
 8003b58:	06d9      	lsls	r1, r3, #27
 8003b5a:	bf44      	itt	mi
 8003b5c:	2220      	movmi	r2, #32
 8003b5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003b62:	071a      	lsls	r2, r3, #28
 8003b64:	bf44      	itt	mi
 8003b66:	222b      	movmi	r2, #43	; 0x2b
 8003b68:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003b6c:	7822      	ldrb	r2, [r4, #0]
 8003b6e:	2a2a      	cmp	r2, #42	; 0x2a
 8003b70:	d003      	beq.n	8003b7a <_svfiprintf_r+0xd6>
 8003b72:	9a07      	ldr	r2, [sp, #28]
 8003b74:	2100      	movs	r1, #0
 8003b76:	200a      	movs	r0, #10
 8003b78:	e00b      	b.n	8003b92 <_svfiprintf_r+0xee>
 8003b7a:	9a03      	ldr	r2, [sp, #12]
 8003b7c:	1d11      	adds	r1, r2, #4
 8003b7e:	6812      	ldr	r2, [r2, #0]
 8003b80:	9103      	str	r1, [sp, #12]
 8003b82:	2a00      	cmp	r2, #0
 8003b84:	da10      	bge.n	8003ba8 <_svfiprintf_r+0x104>
 8003b86:	4252      	negs	r2, r2
 8003b88:	f043 0002 	orr.w	r0, r3, #2
 8003b8c:	9207      	str	r2, [sp, #28]
 8003b8e:	9004      	str	r0, [sp, #16]
 8003b90:	e00b      	b.n	8003baa <_svfiprintf_r+0x106>
 8003b92:	4627      	mov	r7, r4
 8003b94:	3401      	adds	r4, #1
 8003b96:	783b      	ldrb	r3, [r7, #0]
 8003b98:	3b30      	subs	r3, #48	; 0x30
 8003b9a:	2b09      	cmp	r3, #9
 8003b9c:	d803      	bhi.n	8003ba6 <_svfiprintf_r+0x102>
 8003b9e:	fb00 3202 	mla	r2, r0, r2, r3
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	e7f5      	b.n	8003b92 <_svfiprintf_r+0xee>
 8003ba6:	b101      	cbz	r1, 8003baa <_svfiprintf_r+0x106>
 8003ba8:	9207      	str	r2, [sp, #28]
 8003baa:	783b      	ldrb	r3, [r7, #0]
 8003bac:	2b2e      	cmp	r3, #46	; 0x2e
 8003bae:	d11e      	bne.n	8003bee <_svfiprintf_r+0x14a>
 8003bb0:	787b      	ldrb	r3, [r7, #1]
 8003bb2:	2b2a      	cmp	r3, #42	; 0x2a
 8003bb4:	d10a      	bne.n	8003bcc <_svfiprintf_r+0x128>
 8003bb6:	9b03      	ldr	r3, [sp, #12]
 8003bb8:	1d1a      	adds	r2, r3, #4
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	9203      	str	r2, [sp, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	bfb8      	it	lt
 8003bc2:	f04f 33ff 	movlt.w	r3, #4294967295
 8003bc6:	3702      	adds	r7, #2
 8003bc8:	9305      	str	r3, [sp, #20]
 8003bca:	e010      	b.n	8003bee <_svfiprintf_r+0x14a>
 8003bcc:	2300      	movs	r3, #0
 8003bce:	9305      	str	r3, [sp, #20]
 8003bd0:	1c78      	adds	r0, r7, #1
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	240a      	movs	r4, #10
 8003bd6:	4607      	mov	r7, r0
 8003bd8:	3001      	adds	r0, #1
 8003bda:	783a      	ldrb	r2, [r7, #0]
 8003bdc:	3a30      	subs	r2, #48	; 0x30
 8003bde:	2a09      	cmp	r2, #9
 8003be0:	d803      	bhi.n	8003bea <_svfiprintf_r+0x146>
 8003be2:	fb04 2101 	mla	r1, r4, r1, r2
 8003be6:	2301      	movs	r3, #1
 8003be8:	e7f5      	b.n	8003bd6 <_svfiprintf_r+0x132>
 8003bea:	b103      	cbz	r3, 8003bee <_svfiprintf_r+0x14a>
 8003bec:	9105      	str	r1, [sp, #20]
 8003bee:	2203      	movs	r2, #3
 8003bf0:	7839      	ldrb	r1, [r7, #0]
 8003bf2:	4822      	ldr	r0, [pc, #136]	; (8003c7c <_svfiprintf_r+0x1d8>)
 8003bf4:	f7fc fb14 	bl	8000220 <memchr>
 8003bf8:	b140      	cbz	r0, 8003c0c <_svfiprintf_r+0x168>
 8003bfa:	2340      	movs	r3, #64	; 0x40
 8003bfc:	ebcb 0000 	rsb	r0, fp, r0
 8003c00:	fa03 f000 	lsl.w	r0, r3, r0
 8003c04:	9b04      	ldr	r3, [sp, #16]
 8003c06:	4318      	orrs	r0, r3
 8003c08:	9004      	str	r0, [sp, #16]
 8003c0a:	3701      	adds	r7, #1
 8003c0c:	7839      	ldrb	r1, [r7, #0]
 8003c0e:	481c      	ldr	r0, [pc, #112]	; (8003c80 <_svfiprintf_r+0x1dc>)
 8003c10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c14:	2206      	movs	r2, #6
 8003c16:	1c7e      	adds	r6, r7, #1
 8003c18:	f7fc fb02 	bl	8000220 <memchr>
 8003c1c:	b188      	cbz	r0, 8003c42 <_svfiprintf_r+0x19e>
 8003c1e:	4b19      	ldr	r3, [pc, #100]	; (8003c84 <_svfiprintf_r+0x1e0>)
 8003c20:	b933      	cbnz	r3, 8003c30 <_svfiprintf_r+0x18c>
 8003c22:	9b03      	ldr	r3, [sp, #12]
 8003c24:	3307      	adds	r3, #7
 8003c26:	f023 0307 	bic.w	r3, r3, #7
 8003c2a:	3308      	adds	r3, #8
 8003c2c:	9303      	str	r3, [sp, #12]
 8003c2e:	e014      	b.n	8003c5a <_svfiprintf_r+0x1b6>
 8003c30:	ab03      	add	r3, sp, #12
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	462a      	mov	r2, r5
 8003c36:	4b14      	ldr	r3, [pc, #80]	; (8003c88 <_svfiprintf_r+0x1e4>)
 8003c38:	a904      	add	r1, sp, #16
 8003c3a:	4640      	mov	r0, r8
 8003c3c:	f3af 8000 	nop.w
 8003c40:	e007      	b.n	8003c52 <_svfiprintf_r+0x1ae>
 8003c42:	ab03      	add	r3, sp, #12
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	462a      	mov	r2, r5
 8003c48:	4b0f      	ldr	r3, [pc, #60]	; (8003c88 <_svfiprintf_r+0x1e4>)
 8003c4a:	a904      	add	r1, sp, #16
 8003c4c:	4640      	mov	r0, r8
 8003c4e:	f000 f893 	bl	8003d78 <_printf_i>
 8003c52:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003c56:	4682      	mov	sl, r0
 8003c58:	d003      	beq.n	8003c62 <_svfiprintf_r+0x1be>
 8003c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c5c:	4453      	add	r3, sl
 8003c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8003c60:	e742      	b.n	8003ae8 <_svfiprintf_r+0x44>
 8003c62:	89ab      	ldrh	r3, [r5, #12]
 8003c64:	065b      	lsls	r3, r3, #25
 8003c66:	d401      	bmi.n	8003c6c <_svfiprintf_r+0x1c8>
 8003c68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c6a:	e001      	b.n	8003c70 <_svfiprintf_r+0x1cc>
 8003c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c70:	b01d      	add	sp, #116	; 0x74
 8003c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c76:	bf00      	nop
 8003c78:	08004482 	.word	0x08004482
 8003c7c:	08004488 	.word	0x08004488
 8003c80:	0800448c 	.word	0x0800448c
 8003c84:	00000000 	.word	0x00000000
 8003c88:	080039f1 	.word	0x080039f1

08003c8c <_printf_common>:
 8003c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c90:	4691      	mov	r9, r2
 8003c92:	461f      	mov	r7, r3
 8003c94:	690a      	ldr	r2, [r1, #16]
 8003c96:	688b      	ldr	r3, [r1, #8]
 8003c98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	bfb8      	it	lt
 8003ca0:	4613      	movlt	r3, r2
 8003ca2:	f8c9 3000 	str.w	r3, [r9]
 8003ca6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003caa:	4606      	mov	r6, r0
 8003cac:	460c      	mov	r4, r1
 8003cae:	b112      	cbz	r2, 8003cb6 <_printf_common+0x2a>
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	f8c9 3000 	str.w	r3, [r9]
 8003cb6:	6823      	ldr	r3, [r4, #0]
 8003cb8:	0699      	lsls	r1, r3, #26
 8003cba:	bf42      	ittt	mi
 8003cbc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003cc0:	3302      	addmi	r3, #2
 8003cc2:	f8c9 3000 	strmi.w	r3, [r9]
 8003cc6:	6825      	ldr	r5, [r4, #0]
 8003cc8:	f015 0506 	ands.w	r5, r5, #6
 8003ccc:	d110      	bne.n	8003cf0 <_printf_common+0x64>
 8003cce:	f104 0a19 	add.w	sl, r4, #25
 8003cd2:	e007      	b.n	8003ce4 <_printf_common+0x58>
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	4652      	mov	r2, sl
 8003cd8:	4639      	mov	r1, r7
 8003cda:	4630      	mov	r0, r6
 8003cdc:	47c0      	blx	r8
 8003cde:	3001      	adds	r0, #1
 8003ce0:	d01a      	beq.n	8003d18 <_printf_common+0x8c>
 8003ce2:	3501      	adds	r5, #1
 8003ce4:	68e3      	ldr	r3, [r4, #12]
 8003ce6:	f8d9 2000 	ldr.w	r2, [r9]
 8003cea:	1a9b      	subs	r3, r3, r2
 8003cec:	429d      	cmp	r5, r3
 8003cee:	dbf1      	blt.n	8003cd4 <_printf_common+0x48>
 8003cf0:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003cf4:	6822      	ldr	r2, [r4, #0]
 8003cf6:	3300      	adds	r3, #0
 8003cf8:	bf18      	it	ne
 8003cfa:	2301      	movne	r3, #1
 8003cfc:	0692      	lsls	r2, r2, #26
 8003cfe:	d50f      	bpl.n	8003d20 <_printf_common+0x94>
 8003d00:	18e1      	adds	r1, r4, r3
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	2030      	movs	r0, #48	; 0x30
 8003d06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d0a:	4422      	add	r2, r4
 8003d0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d14:	3302      	adds	r3, #2
 8003d16:	e003      	b.n	8003d20 <_printf_common+0x94>
 8003d18:	f04f 30ff 	mov.w	r0, #4294967295
 8003d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d24:	4639      	mov	r1, r7
 8003d26:	4630      	mov	r0, r6
 8003d28:	47c0      	blx	r8
 8003d2a:	3001      	adds	r0, #1
 8003d2c:	d0f4      	beq.n	8003d18 <_printf_common+0x8c>
 8003d2e:	6822      	ldr	r2, [r4, #0]
 8003d30:	f8d9 5000 	ldr.w	r5, [r9]
 8003d34:	68e3      	ldr	r3, [r4, #12]
 8003d36:	f002 0206 	and.w	r2, r2, #6
 8003d3a:	2a04      	cmp	r2, #4
 8003d3c:	bf08      	it	eq
 8003d3e:	1b5d      	subeq	r5, r3, r5
 8003d40:	6922      	ldr	r2, [r4, #16]
 8003d42:	68a3      	ldr	r3, [r4, #8]
 8003d44:	bf0c      	ite	eq
 8003d46:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d4a:	2500      	movne	r5, #0
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	bfc4      	itt	gt
 8003d50:	1a9b      	subgt	r3, r3, r2
 8003d52:	18ed      	addgt	r5, r5, r3
 8003d54:	f04f 0900 	mov.w	r9, #0
 8003d58:	341a      	adds	r4, #26
 8003d5a:	454d      	cmp	r5, r9
 8003d5c:	d009      	beq.n	8003d72 <_printf_common+0xe6>
 8003d5e:	2301      	movs	r3, #1
 8003d60:	4622      	mov	r2, r4
 8003d62:	4639      	mov	r1, r7
 8003d64:	4630      	mov	r0, r6
 8003d66:	47c0      	blx	r8
 8003d68:	3001      	adds	r0, #1
 8003d6a:	d0d5      	beq.n	8003d18 <_printf_common+0x8c>
 8003d6c:	f109 0901 	add.w	r9, r9, #1
 8003d70:	e7f3      	b.n	8003d5a <_printf_common+0xce>
 8003d72:	2000      	movs	r0, #0
 8003d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003d78 <_printf_i>:
 8003d78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d7c:	4617      	mov	r7, r2
 8003d7e:	7e0a      	ldrb	r2, [r1, #24]
 8003d80:	b085      	sub	sp, #20
 8003d82:	2a6e      	cmp	r2, #110	; 0x6e
 8003d84:	4698      	mov	r8, r3
 8003d86:	4606      	mov	r6, r0
 8003d88:	460c      	mov	r4, r1
 8003d8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003d8c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003d90:	f000 80ae 	beq.w	8003ef0 <_printf_i+0x178>
 8003d94:	d811      	bhi.n	8003dba <_printf_i+0x42>
 8003d96:	2a63      	cmp	r2, #99	; 0x63
 8003d98:	d022      	beq.n	8003de0 <_printf_i+0x68>
 8003d9a:	d809      	bhi.n	8003db0 <_printf_i+0x38>
 8003d9c:	2a00      	cmp	r2, #0
 8003d9e:	f000 80bb 	beq.w	8003f18 <_printf_i+0x1a0>
 8003da2:	2a58      	cmp	r2, #88	; 0x58
 8003da4:	f040 80ca 	bne.w	8003f3c <_printf_i+0x1c4>
 8003da8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003dac:	4983      	ldr	r1, [pc, #524]	; (8003fbc <_printf_i+0x244>)
 8003dae:	e055      	b.n	8003e5c <_printf_i+0xe4>
 8003db0:	2a64      	cmp	r2, #100	; 0x64
 8003db2:	d01e      	beq.n	8003df2 <_printf_i+0x7a>
 8003db4:	2a69      	cmp	r2, #105	; 0x69
 8003db6:	d01c      	beq.n	8003df2 <_printf_i+0x7a>
 8003db8:	e0c0      	b.n	8003f3c <_printf_i+0x1c4>
 8003dba:	2a73      	cmp	r2, #115	; 0x73
 8003dbc:	f000 80b0 	beq.w	8003f20 <_printf_i+0x1a8>
 8003dc0:	d809      	bhi.n	8003dd6 <_printf_i+0x5e>
 8003dc2:	2a6f      	cmp	r2, #111	; 0x6f
 8003dc4:	d02e      	beq.n	8003e24 <_printf_i+0xac>
 8003dc6:	2a70      	cmp	r2, #112	; 0x70
 8003dc8:	f040 80b8 	bne.w	8003f3c <_printf_i+0x1c4>
 8003dcc:	680a      	ldr	r2, [r1, #0]
 8003dce:	f042 0220 	orr.w	r2, r2, #32
 8003dd2:	600a      	str	r2, [r1, #0]
 8003dd4:	e03e      	b.n	8003e54 <_printf_i+0xdc>
 8003dd6:	2a75      	cmp	r2, #117	; 0x75
 8003dd8:	d024      	beq.n	8003e24 <_printf_i+0xac>
 8003dda:	2a78      	cmp	r2, #120	; 0x78
 8003ddc:	d03a      	beq.n	8003e54 <_printf_i+0xdc>
 8003dde:	e0ad      	b.n	8003f3c <_printf_i+0x1c4>
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003de6:	1d11      	adds	r1, r2, #4
 8003de8:	6019      	str	r1, [r3, #0]
 8003dea:	6813      	ldr	r3, [r2, #0]
 8003dec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003df0:	e0a8      	b.n	8003f44 <_printf_i+0x1cc>
 8003df2:	6821      	ldr	r1, [r4, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003dfa:	d002      	beq.n	8003e02 <_printf_i+0x8a>
 8003dfc:	1d11      	adds	r1, r2, #4
 8003dfe:	6019      	str	r1, [r3, #0]
 8003e00:	e008      	b.n	8003e14 <_printf_i+0x9c>
 8003e02:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003e06:	f102 0104 	add.w	r1, r2, #4
 8003e0a:	6019      	str	r1, [r3, #0]
 8003e0c:	d002      	beq.n	8003e14 <_printf_i+0x9c>
 8003e0e:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003e12:	e000      	b.n	8003e16 <_printf_i+0x9e>
 8003e14:	6813      	ldr	r3, [r2, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	da3c      	bge.n	8003e94 <_printf_i+0x11c>
 8003e1a:	222d      	movs	r2, #45	; 0x2d
 8003e1c:	425b      	negs	r3, r3
 8003e1e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003e22:	e037      	b.n	8003e94 <_printf_i+0x11c>
 8003e24:	6821      	ldr	r1, [r4, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003e2c:	d002      	beq.n	8003e34 <_printf_i+0xbc>
 8003e2e:	1d11      	adds	r1, r2, #4
 8003e30:	6019      	str	r1, [r3, #0]
 8003e32:	e007      	b.n	8003e44 <_printf_i+0xcc>
 8003e34:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003e38:	f102 0104 	add.w	r1, r2, #4
 8003e3c:	6019      	str	r1, [r3, #0]
 8003e3e:	d001      	beq.n	8003e44 <_printf_i+0xcc>
 8003e40:	8813      	ldrh	r3, [r2, #0]
 8003e42:	e000      	b.n	8003e46 <_printf_i+0xce>
 8003e44:	6813      	ldr	r3, [r2, #0]
 8003e46:	7e22      	ldrb	r2, [r4, #24]
 8003e48:	495c      	ldr	r1, [pc, #368]	; (8003fbc <_printf_i+0x244>)
 8003e4a:	2a6f      	cmp	r2, #111	; 0x6f
 8003e4c:	bf14      	ite	ne
 8003e4e:	220a      	movne	r2, #10
 8003e50:	2208      	moveq	r2, #8
 8003e52:	e01b      	b.n	8003e8c <_printf_i+0x114>
 8003e54:	2278      	movs	r2, #120	; 0x78
 8003e56:	495a      	ldr	r1, [pc, #360]	; (8003fc0 <_printf_i+0x248>)
 8003e58:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003e5c:	6822      	ldr	r2, [r4, #0]
 8003e5e:	6818      	ldr	r0, [r3, #0]
 8003e60:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003e64:	f100 0504 	add.w	r5, r0, #4
 8003e68:	601d      	str	r5, [r3, #0]
 8003e6a:	d103      	bne.n	8003e74 <_printf_i+0xfc>
 8003e6c:	0655      	lsls	r5, r2, #25
 8003e6e:	d501      	bpl.n	8003e74 <_printf_i+0xfc>
 8003e70:	8803      	ldrh	r3, [r0, #0]
 8003e72:	e000      	b.n	8003e76 <_printf_i+0xfe>
 8003e74:	6803      	ldr	r3, [r0, #0]
 8003e76:	07d0      	lsls	r0, r2, #31
 8003e78:	bf44      	itt	mi
 8003e7a:	f042 0220 	orrmi.w	r2, r2, #32
 8003e7e:	6022      	strmi	r2, [r4, #0]
 8003e80:	b91b      	cbnz	r3, 8003e8a <_printf_i+0x112>
 8003e82:	6822      	ldr	r2, [r4, #0]
 8003e84:	f022 0220 	bic.w	r2, r2, #32
 8003e88:	6022      	str	r2, [r4, #0]
 8003e8a:	2210      	movs	r2, #16
 8003e8c:	2000      	movs	r0, #0
 8003e8e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003e92:	e001      	b.n	8003e98 <_printf_i+0x120>
 8003e94:	4949      	ldr	r1, [pc, #292]	; (8003fbc <_printf_i+0x244>)
 8003e96:	220a      	movs	r2, #10
 8003e98:	6865      	ldr	r5, [r4, #4]
 8003e9a:	60a5      	str	r5, [r4, #8]
 8003e9c:	2d00      	cmp	r5, #0
 8003e9e:	db08      	blt.n	8003eb2 <_printf_i+0x13a>
 8003ea0:	6820      	ldr	r0, [r4, #0]
 8003ea2:	f020 0004 	bic.w	r0, r0, #4
 8003ea6:	6020      	str	r0, [r4, #0]
 8003ea8:	b92b      	cbnz	r3, 8003eb6 <_printf_i+0x13e>
 8003eaa:	2d00      	cmp	r5, #0
 8003eac:	d17d      	bne.n	8003faa <_printf_i+0x232>
 8003eae:	4675      	mov	r5, lr
 8003eb0:	e00c      	b.n	8003ecc <_printf_i+0x154>
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d079      	beq.n	8003faa <_printf_i+0x232>
 8003eb6:	4675      	mov	r5, lr
 8003eb8:	fbb3 f0f2 	udiv	r0, r3, r2
 8003ebc:	fb02 3310 	mls	r3, r2, r0, r3
 8003ec0:	5ccb      	ldrb	r3, [r1, r3]
 8003ec2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2800      	cmp	r0, #0
 8003eca:	d1f5      	bne.n	8003eb8 <_printf_i+0x140>
 8003ecc:	2a08      	cmp	r2, #8
 8003ece:	d10b      	bne.n	8003ee8 <_printf_i+0x170>
 8003ed0:	6823      	ldr	r3, [r4, #0]
 8003ed2:	07da      	lsls	r2, r3, #31
 8003ed4:	d508      	bpl.n	8003ee8 <_printf_i+0x170>
 8003ed6:	6923      	ldr	r3, [r4, #16]
 8003ed8:	6862      	ldr	r2, [r4, #4]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	bfde      	ittt	le
 8003ede:	2330      	movle	r3, #48	; 0x30
 8003ee0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ee4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ee8:	ebc5 030e 	rsb	r3, r5, lr
 8003eec:	6123      	str	r3, [r4, #16]
 8003eee:	e02e      	b.n	8003f4e <_printf_i+0x1d6>
 8003ef0:	6808      	ldr	r0, [r1, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	6949      	ldr	r1, [r1, #20]
 8003ef6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003efa:	d003      	beq.n	8003f04 <_printf_i+0x18c>
 8003efc:	1d10      	adds	r0, r2, #4
 8003efe:	6018      	str	r0, [r3, #0]
 8003f00:	6813      	ldr	r3, [r2, #0]
 8003f02:	e008      	b.n	8003f16 <_printf_i+0x19e>
 8003f04:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f08:	f102 0004 	add.w	r0, r2, #4
 8003f0c:	6018      	str	r0, [r3, #0]
 8003f0e:	6813      	ldr	r3, [r2, #0]
 8003f10:	d001      	beq.n	8003f16 <_printf_i+0x19e>
 8003f12:	8019      	strh	r1, [r3, #0]
 8003f14:	e000      	b.n	8003f18 <_printf_i+0x1a0>
 8003f16:	6019      	str	r1, [r3, #0]
 8003f18:	2300      	movs	r3, #0
 8003f1a:	6123      	str	r3, [r4, #16]
 8003f1c:	4675      	mov	r5, lr
 8003f1e:	e016      	b.n	8003f4e <_printf_i+0x1d6>
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	1d11      	adds	r1, r2, #4
 8003f24:	6019      	str	r1, [r3, #0]
 8003f26:	6815      	ldr	r5, [r2, #0]
 8003f28:	6862      	ldr	r2, [r4, #4]
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	4628      	mov	r0, r5
 8003f2e:	f7fc f977 	bl	8000220 <memchr>
 8003f32:	b108      	cbz	r0, 8003f38 <_printf_i+0x1c0>
 8003f34:	1b40      	subs	r0, r0, r5
 8003f36:	6060      	str	r0, [r4, #4]
 8003f38:	6863      	ldr	r3, [r4, #4]
 8003f3a:	e004      	b.n	8003f46 <_printf_i+0x1ce>
 8003f3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f40:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003f44:	2301      	movs	r3, #1
 8003f46:	6123      	str	r3, [r4, #16]
 8003f48:	2300      	movs	r3, #0
 8003f4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f4e:	f8cd 8000 	str.w	r8, [sp]
 8003f52:	463b      	mov	r3, r7
 8003f54:	aa03      	add	r2, sp, #12
 8003f56:	4621      	mov	r1, r4
 8003f58:	4630      	mov	r0, r6
 8003f5a:	f7ff fe97 	bl	8003c8c <_printf_common>
 8003f5e:	3001      	adds	r0, #1
 8003f60:	d102      	bne.n	8003f68 <_printf_i+0x1f0>
 8003f62:	f04f 30ff 	mov.w	r0, #4294967295
 8003f66:	e026      	b.n	8003fb6 <_printf_i+0x23e>
 8003f68:	6923      	ldr	r3, [r4, #16]
 8003f6a:	462a      	mov	r2, r5
 8003f6c:	4639      	mov	r1, r7
 8003f6e:	4630      	mov	r0, r6
 8003f70:	47c0      	blx	r8
 8003f72:	3001      	adds	r0, #1
 8003f74:	d0f5      	beq.n	8003f62 <_printf_i+0x1ea>
 8003f76:	6823      	ldr	r3, [r4, #0]
 8003f78:	079b      	lsls	r3, r3, #30
 8003f7a:	d510      	bpl.n	8003f9e <_printf_i+0x226>
 8003f7c:	2500      	movs	r5, #0
 8003f7e:	f104 0919 	add.w	r9, r4, #25
 8003f82:	e007      	b.n	8003f94 <_printf_i+0x21c>
 8003f84:	2301      	movs	r3, #1
 8003f86:	464a      	mov	r2, r9
 8003f88:	4639      	mov	r1, r7
 8003f8a:	4630      	mov	r0, r6
 8003f8c:	47c0      	blx	r8
 8003f8e:	3001      	adds	r0, #1
 8003f90:	d0e7      	beq.n	8003f62 <_printf_i+0x1ea>
 8003f92:	3501      	adds	r5, #1
 8003f94:	68e3      	ldr	r3, [r4, #12]
 8003f96:	9a03      	ldr	r2, [sp, #12]
 8003f98:	1a9b      	subs	r3, r3, r2
 8003f9a:	429d      	cmp	r5, r3
 8003f9c:	dbf2      	blt.n	8003f84 <_printf_i+0x20c>
 8003f9e:	68e0      	ldr	r0, [r4, #12]
 8003fa0:	9b03      	ldr	r3, [sp, #12]
 8003fa2:	4298      	cmp	r0, r3
 8003fa4:	bfb8      	it	lt
 8003fa6:	4618      	movlt	r0, r3
 8003fa8:	e005      	b.n	8003fb6 <_printf_i+0x23e>
 8003faa:	780b      	ldrb	r3, [r1, #0]
 8003fac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fb4:	e78a      	b.n	8003ecc <_printf_i+0x154>
 8003fb6:	b005      	add	sp, #20
 8003fb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003fbc:	08004493 	.word	0x08004493
 8003fc0:	080044a4 	.word	0x080044a4

08003fc4 <memcpy>:
 8003fc4:	b510      	push	{r4, lr}
 8003fc6:	1e43      	subs	r3, r0, #1
 8003fc8:	440a      	add	r2, r1
 8003fca:	4291      	cmp	r1, r2
 8003fcc:	d004      	beq.n	8003fd8 <memcpy+0x14>
 8003fce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fd6:	e7f8      	b.n	8003fca <memcpy+0x6>
 8003fd8:	bd10      	pop	{r4, pc}

08003fda <memmove>:
 8003fda:	4288      	cmp	r0, r1
 8003fdc:	b510      	push	{r4, lr}
 8003fde:	eb01 0302 	add.w	r3, r1, r2
 8003fe2:	d801      	bhi.n	8003fe8 <memmove+0xe>
 8003fe4:	1e42      	subs	r2, r0, #1
 8003fe6:	e00b      	b.n	8004000 <memmove+0x26>
 8003fe8:	4298      	cmp	r0, r3
 8003fea:	d2fb      	bcs.n	8003fe4 <memmove+0xa>
 8003fec:	1881      	adds	r1, r0, r2
 8003fee:	1ad2      	subs	r2, r2, r3
 8003ff0:	42d3      	cmn	r3, r2
 8003ff2:	d004      	beq.n	8003ffe <memmove+0x24>
 8003ff4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ff8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003ffc:	e7f8      	b.n	8003ff0 <memmove+0x16>
 8003ffe:	bd10      	pop	{r4, pc}
 8004000:	4299      	cmp	r1, r3
 8004002:	d004      	beq.n	800400e <memmove+0x34>
 8004004:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004008:	f802 4f01 	strb.w	r4, [r2, #1]!
 800400c:	e7f8      	b.n	8004000 <memmove+0x26>
 800400e:	bd10      	pop	{r4, pc}

08004010 <_free_r>:
 8004010:	b538      	push	{r3, r4, r5, lr}
 8004012:	4605      	mov	r5, r0
 8004014:	2900      	cmp	r1, #0
 8004016:	d046      	beq.n	80040a6 <_free_r+0x96>
 8004018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800401c:	1f0c      	subs	r4, r1, #4
 800401e:	2b00      	cmp	r3, #0
 8004020:	bfb8      	it	lt
 8004022:	18e4      	addlt	r4, r4, r3
 8004024:	f000 f8d6 	bl	80041d4 <__malloc_lock>
 8004028:	4a1f      	ldr	r2, [pc, #124]	; (80040a8 <_free_r+0x98>)
 800402a:	6813      	ldr	r3, [r2, #0]
 800402c:	4611      	mov	r1, r2
 800402e:	b913      	cbnz	r3, 8004036 <_free_r+0x26>
 8004030:	6063      	str	r3, [r4, #4]
 8004032:	6014      	str	r4, [r2, #0]
 8004034:	e032      	b.n	800409c <_free_r+0x8c>
 8004036:	42a3      	cmp	r3, r4
 8004038:	d90e      	bls.n	8004058 <_free_r+0x48>
 800403a:	6822      	ldr	r2, [r4, #0]
 800403c:	18a0      	adds	r0, r4, r2
 800403e:	4283      	cmp	r3, r0
 8004040:	bf04      	itt	eq
 8004042:	6818      	ldreq	r0, [r3, #0]
 8004044:	685b      	ldreq	r3, [r3, #4]
 8004046:	6063      	str	r3, [r4, #4]
 8004048:	bf04      	itt	eq
 800404a:	1812      	addeq	r2, r2, r0
 800404c:	6022      	streq	r2, [r4, #0]
 800404e:	600c      	str	r4, [r1, #0]
 8004050:	e024      	b.n	800409c <_free_r+0x8c>
 8004052:	42a2      	cmp	r2, r4
 8004054:	d803      	bhi.n	800405e <_free_r+0x4e>
 8004056:	4613      	mov	r3, r2
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	2a00      	cmp	r2, #0
 800405c:	d1f9      	bne.n	8004052 <_free_r+0x42>
 800405e:	6818      	ldr	r0, [r3, #0]
 8004060:	1819      	adds	r1, r3, r0
 8004062:	42a1      	cmp	r1, r4
 8004064:	d10b      	bne.n	800407e <_free_r+0x6e>
 8004066:	6821      	ldr	r1, [r4, #0]
 8004068:	4401      	add	r1, r0
 800406a:	1858      	adds	r0, r3, r1
 800406c:	4282      	cmp	r2, r0
 800406e:	6019      	str	r1, [r3, #0]
 8004070:	d114      	bne.n	800409c <_free_r+0x8c>
 8004072:	6810      	ldr	r0, [r2, #0]
 8004074:	6852      	ldr	r2, [r2, #4]
 8004076:	605a      	str	r2, [r3, #4]
 8004078:	4401      	add	r1, r0
 800407a:	6019      	str	r1, [r3, #0]
 800407c:	e00e      	b.n	800409c <_free_r+0x8c>
 800407e:	d902      	bls.n	8004086 <_free_r+0x76>
 8004080:	230c      	movs	r3, #12
 8004082:	602b      	str	r3, [r5, #0]
 8004084:	e00a      	b.n	800409c <_free_r+0x8c>
 8004086:	6821      	ldr	r1, [r4, #0]
 8004088:	1860      	adds	r0, r4, r1
 800408a:	4282      	cmp	r2, r0
 800408c:	bf04      	itt	eq
 800408e:	6810      	ldreq	r0, [r2, #0]
 8004090:	6852      	ldreq	r2, [r2, #4]
 8004092:	6062      	str	r2, [r4, #4]
 8004094:	bf04      	itt	eq
 8004096:	1809      	addeq	r1, r1, r0
 8004098:	6021      	streq	r1, [r4, #0]
 800409a:	605c      	str	r4, [r3, #4]
 800409c:	4628      	mov	r0, r5
 800409e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040a2:	f000 b898 	b.w	80041d6 <__malloc_unlock>
 80040a6:	bd38      	pop	{r3, r4, r5, pc}
 80040a8:	20000148 	.word	0x20000148

080040ac <_malloc_r>:
 80040ac:	b570      	push	{r4, r5, r6, lr}
 80040ae:	1ccd      	adds	r5, r1, #3
 80040b0:	f025 0503 	bic.w	r5, r5, #3
 80040b4:	3508      	adds	r5, #8
 80040b6:	2d0c      	cmp	r5, #12
 80040b8:	bf38      	it	cc
 80040ba:	250c      	movcc	r5, #12
 80040bc:	2d00      	cmp	r5, #0
 80040be:	4606      	mov	r6, r0
 80040c0:	db01      	blt.n	80040c6 <_malloc_r+0x1a>
 80040c2:	42a9      	cmp	r1, r5
 80040c4:	d902      	bls.n	80040cc <_malloc_r+0x20>
 80040c6:	230c      	movs	r3, #12
 80040c8:	6033      	str	r3, [r6, #0]
 80040ca:	e046      	b.n	800415a <_malloc_r+0xae>
 80040cc:	f000 f882 	bl	80041d4 <__malloc_lock>
 80040d0:	4b23      	ldr	r3, [pc, #140]	; (8004160 <_malloc_r+0xb4>)
 80040d2:	681c      	ldr	r4, [r3, #0]
 80040d4:	461a      	mov	r2, r3
 80040d6:	4621      	mov	r1, r4
 80040d8:	b1a1      	cbz	r1, 8004104 <_malloc_r+0x58>
 80040da:	680b      	ldr	r3, [r1, #0]
 80040dc:	1b5b      	subs	r3, r3, r5
 80040de:	d40e      	bmi.n	80040fe <_malloc_r+0x52>
 80040e0:	2b0b      	cmp	r3, #11
 80040e2:	d903      	bls.n	80040ec <_malloc_r+0x40>
 80040e4:	600b      	str	r3, [r1, #0]
 80040e6:	18cc      	adds	r4, r1, r3
 80040e8:	50cd      	str	r5, [r1, r3]
 80040ea:	e01e      	b.n	800412a <_malloc_r+0x7e>
 80040ec:	428c      	cmp	r4, r1
 80040ee:	bf0d      	iteet	eq
 80040f0:	6863      	ldreq	r3, [r4, #4]
 80040f2:	684b      	ldrne	r3, [r1, #4]
 80040f4:	6063      	strne	r3, [r4, #4]
 80040f6:	6013      	streq	r3, [r2, #0]
 80040f8:	bf18      	it	ne
 80040fa:	460c      	movne	r4, r1
 80040fc:	e015      	b.n	800412a <_malloc_r+0x7e>
 80040fe:	460c      	mov	r4, r1
 8004100:	6849      	ldr	r1, [r1, #4]
 8004102:	e7e9      	b.n	80040d8 <_malloc_r+0x2c>
 8004104:	4c17      	ldr	r4, [pc, #92]	; (8004164 <_malloc_r+0xb8>)
 8004106:	6823      	ldr	r3, [r4, #0]
 8004108:	b91b      	cbnz	r3, 8004112 <_malloc_r+0x66>
 800410a:	4630      	mov	r0, r6
 800410c:	f000 f852 	bl	80041b4 <_sbrk_r>
 8004110:	6020      	str	r0, [r4, #0]
 8004112:	4629      	mov	r1, r5
 8004114:	4630      	mov	r0, r6
 8004116:	f000 f84d 	bl	80041b4 <_sbrk_r>
 800411a:	1c43      	adds	r3, r0, #1
 800411c:	d018      	beq.n	8004150 <_malloc_r+0xa4>
 800411e:	1cc4      	adds	r4, r0, #3
 8004120:	f024 0403 	bic.w	r4, r4, #3
 8004124:	42a0      	cmp	r0, r4
 8004126:	d10d      	bne.n	8004144 <_malloc_r+0x98>
 8004128:	6025      	str	r5, [r4, #0]
 800412a:	4630      	mov	r0, r6
 800412c:	f000 f853 	bl	80041d6 <__malloc_unlock>
 8004130:	f104 000b 	add.w	r0, r4, #11
 8004134:	1d23      	adds	r3, r4, #4
 8004136:	f020 0007 	bic.w	r0, r0, #7
 800413a:	1ac3      	subs	r3, r0, r3
 800413c:	d00e      	beq.n	800415c <_malloc_r+0xb0>
 800413e:	425a      	negs	r2, r3
 8004140:	50e2      	str	r2, [r4, r3]
 8004142:	bd70      	pop	{r4, r5, r6, pc}
 8004144:	1a21      	subs	r1, r4, r0
 8004146:	4630      	mov	r0, r6
 8004148:	f000 f834 	bl	80041b4 <_sbrk_r>
 800414c:	3001      	adds	r0, #1
 800414e:	d1eb      	bne.n	8004128 <_malloc_r+0x7c>
 8004150:	230c      	movs	r3, #12
 8004152:	6033      	str	r3, [r6, #0]
 8004154:	4630      	mov	r0, r6
 8004156:	f000 f83e 	bl	80041d6 <__malloc_unlock>
 800415a:	2000      	movs	r0, #0
 800415c:	bd70      	pop	{r4, r5, r6, pc}
 800415e:	bf00      	nop
 8004160:	20000148 	.word	0x20000148
 8004164:	20000144 	.word	0x20000144

08004168 <_realloc_r>:
 8004168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800416a:	4607      	mov	r7, r0
 800416c:	4615      	mov	r5, r2
 800416e:	460e      	mov	r6, r1
 8004170:	b921      	cbnz	r1, 800417c <_realloc_r+0x14>
 8004172:	4611      	mov	r1, r2
 8004174:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004178:	f7ff bf98 	b.w	80040ac <_malloc_r>
 800417c:	b91a      	cbnz	r2, 8004186 <_realloc_r+0x1e>
 800417e:	f7ff ff47 	bl	8004010 <_free_r>
 8004182:	4628      	mov	r0, r5
 8004184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004186:	f000 f827 	bl	80041d8 <_malloc_usable_size_r>
 800418a:	4285      	cmp	r5, r0
 800418c:	d90e      	bls.n	80041ac <_realloc_r+0x44>
 800418e:	4629      	mov	r1, r5
 8004190:	4638      	mov	r0, r7
 8004192:	f7ff ff8b 	bl	80040ac <_malloc_r>
 8004196:	4604      	mov	r4, r0
 8004198:	b150      	cbz	r0, 80041b0 <_realloc_r+0x48>
 800419a:	4631      	mov	r1, r6
 800419c:	462a      	mov	r2, r5
 800419e:	f7ff ff11 	bl	8003fc4 <memcpy>
 80041a2:	4631      	mov	r1, r6
 80041a4:	4638      	mov	r0, r7
 80041a6:	f7ff ff33 	bl	8004010 <_free_r>
 80041aa:	e001      	b.n	80041b0 <_realloc_r+0x48>
 80041ac:	4630      	mov	r0, r6
 80041ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041b0:	4620      	mov	r0, r4
 80041b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080041b4 <_sbrk_r>:
 80041b4:	b538      	push	{r3, r4, r5, lr}
 80041b6:	4c06      	ldr	r4, [pc, #24]	; (80041d0 <_sbrk_r+0x1c>)
 80041b8:	2300      	movs	r3, #0
 80041ba:	4605      	mov	r5, r0
 80041bc:	4608      	mov	r0, r1
 80041be:	6023      	str	r3, [r4, #0]
 80041c0:	f000 f814 	bl	80041ec <_sbrk>
 80041c4:	1c43      	adds	r3, r0, #1
 80041c6:	d102      	bne.n	80041ce <_sbrk_r+0x1a>
 80041c8:	6823      	ldr	r3, [r4, #0]
 80041ca:	b103      	cbz	r3, 80041ce <_sbrk_r+0x1a>
 80041cc:	602b      	str	r3, [r5, #0]
 80041ce:	bd38      	pop	{r3, r4, r5, pc}
 80041d0:	20000638 	.word	0x20000638

080041d4 <__malloc_lock>:
 80041d4:	4770      	bx	lr

080041d6 <__malloc_unlock>:
 80041d6:	4770      	bx	lr

080041d8 <_malloc_usable_size_r>:
 80041d8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80041dc:	2800      	cmp	r0, #0
 80041de:	bfbe      	ittt	lt
 80041e0:	1809      	addlt	r1, r1, r0
 80041e2:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 80041e6:	18c0      	addlt	r0, r0, r3
 80041e8:	3804      	subs	r0, #4
 80041ea:	4770      	bx	lr

080041ec <_sbrk>:
 80041ec:	4b04      	ldr	r3, [pc, #16]	; (8004200 <_sbrk+0x14>)
 80041ee:	6819      	ldr	r1, [r3, #0]
 80041f0:	4602      	mov	r2, r0
 80041f2:	b909      	cbnz	r1, 80041f8 <_sbrk+0xc>
 80041f4:	4903      	ldr	r1, [pc, #12]	; (8004204 <_sbrk+0x18>)
 80041f6:	6019      	str	r1, [r3, #0]
 80041f8:	6818      	ldr	r0, [r3, #0]
 80041fa:	4402      	add	r2, r0
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	4770      	bx	lr
 8004200:	2000014c 	.word	0x2000014c
 8004204:	2000063c 	.word	0x2000063c

08004208 <_init>:
 8004208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800420a:	bf00      	nop
 800420c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800420e:	bc08      	pop	{r3}
 8004210:	469e      	mov	lr, r3
 8004212:	4770      	bx	lr

08004214 <_fini>:
 8004214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004216:	bf00      	nop
 8004218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800421a:	bc08      	pop	{r3}
 800421c:	469e      	mov	lr, r3
 800421e:	4770      	bx	lr

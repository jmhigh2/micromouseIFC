
C:\Users\Jonathan\Desktop\micromouse\mm747\Debug\mm747.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ecc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  0800609c  0800609c  0001609c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006530  08006530  00016530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006534  08006534  00016534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  08006538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000527c  20000074  080065ac  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200052f0  080065ac  000252f0  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_line   00008021  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000160fe  00000000  00000000  000280c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002e2e  00000000  00000000  0003e1c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000e60  00000000  00000000  00040ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000019b8  00000000  00000000  00041e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000b477  00000000  00000000  00043810  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000504c  00000000  00000000  0004ec87  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00053cd3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002ee0  00000000  00000000  00053d54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006084 	.word	0x08006084

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08006084 	.word	0x08006084

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80002c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80002c6:	e003      	b.n	80002d0 <LoopCopyDataInit>

080002c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80002c8:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80002ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80002cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80002ce:	3104      	adds	r1, #4

080002d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80002d0:	480b      	ldr	r0, [pc, #44]	; (8000300 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80002d2:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80002d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80002d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80002d8:	d3f6      	bcc.n	80002c8 <CopyDataInit>
  ldr  r2, =_sbss
 80002da:	4a0b      	ldr	r2, [pc, #44]	; (8000308 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80002dc:	e002      	b.n	80002e4 <LoopFillZerobss>

080002de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80002de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80002e0:	f842 3b04 	str.w	r3, [r2], #4

080002e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80002e4:	4b09      	ldr	r3, [pc, #36]	; (800030c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80002e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80002e8:	d3f9      	bcc.n	80002de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80002ea:	f005 fa47 	bl	800577c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002ee:	f005 fa6b 	bl	80057c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002f2:	f004 fe03 	bl	8004efc <main>
  bx  lr    
 80002f6:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002f8:	20050000 	.word	0x20050000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80002fc:	08006538 	.word	0x08006538
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000300:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000304:	20000074 	.word	0x20000074
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000308:	20000074 	.word	0x20000074
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800030c:	200052f0 	.word	0x200052f0

08000310 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000310:	e7fe      	b.n	8000310 <ADC_IRQHandler>
	...

08000314 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000314:	4b08      	ldr	r3, [pc, #32]	; (8000338 <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000316:	b510      	push	{r4, lr}
 8000318:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 800031a:	6818      	ldr	r0, [r3, #0]
 800031c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000320:	fbb0 f0f3 	udiv	r0, r0, r3
 8000324:	f000 fac2 	bl	80008ac <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000328:	2200      	movs	r2, #0
 800032a:	4621      	mov	r1, r4
 800032c:	f04f 30ff 	mov.w	r0, #4294967295
 8000330:	f000 fa78 	bl	8000824 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000334:	2000      	movs	r0, #0
 8000336:	bd10      	pop	{r4, pc}
 8000338:	2000000c 	.word	0x2000000c

0800033c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800033c:	b508      	push	{r3, lr}
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800033e:	2003      	movs	r0, #3
 8000340:	f000 fa5e 	bl	8000800 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000344:	2000      	movs	r0, #0
 8000346:	f7ff ffe5 	bl	8000314 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800034a:	f005 f827 	bl	800539c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 800034e:	2000      	movs	r0, #0
 8000350:	bd08      	pop	{r3, pc}
	...

08000354 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000354:	4a02      	ldr	r2, [pc, #8]	; (8000360 <HAL_IncTick+0xc>)
 8000356:	6813      	ldr	r3, [r2, #0]
 8000358:	3301      	adds	r3, #1
 800035a:	6013      	str	r3, [r2, #0]
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	20004378 	.word	0x20004378

08000364 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000364:	4b01      	ldr	r3, [pc, #4]	; (800036c <HAL_GetTick+0x8>)
 8000366:	6818      	ldr	r0, [r3, #0]
}
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	20004378 	.word	0x20004378

08000370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000370:	b513      	push	{r0, r1, r4, lr}
 8000372:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8000374:	f7ff fff6 	bl	8000364 <HAL_GetTick>
 8000378:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800037a:	f7ff fff3 	bl	8000364 <HAL_GetTick>
 800037e:	9b01      	ldr	r3, [sp, #4]
 8000380:	1b00      	subs	r0, r0, r4
 8000382:	4298      	cmp	r0, r3
 8000384:	d3f9      	bcc.n	800037a <HAL_Delay+0xa>
  {
  }
}
 8000386:	b002      	add	sp, #8
 8000388:	bd10      	pop	{r4, pc}
	...

0800038c <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800038c:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800038e:	4604      	mov	r4, r0
 8000390:	2800      	cmp	r0, #0
 8000392:	f000 809e 	beq.w	80004d2 <HAL_ADC_Init+0x146>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000396:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000398:	b923      	cbnz	r3, 80003a4 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800039a:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800039c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80003a0:	f005 f82c 	bl	80053fc <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80003a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80003a6:	06db      	lsls	r3, r3, #27
 80003a8:	f100 808e 	bmi.w	80004c8 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80003ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80003ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80003b2:	f023 0302 	bic.w	r3, r3, #2
 80003b6:	f043 0302 	orr.w	r3, r3, #2
 80003ba:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80003bc:	4b46      	ldr	r3, [pc, #280]	; (80004d8 <HAL_ADC_Init+0x14c>)
 80003be:	685a      	ldr	r2, [r3, #4]
 80003c0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80003c4:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80003c6:	6859      	ldr	r1, [r3, #4]
 80003c8:	6862      	ldr	r2, [r4, #4]
 80003ca:	430a      	orrs	r2, r1
 80003cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80003ce:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80003d0:	6921      	ldr	r1, [r4, #16]
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80003d2:	685a      	ldr	r2, [r3, #4]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80003d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80003d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80003da:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80003dc:	685a      	ldr	r2, [r3, #4]
 80003de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80003e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80003e4:	685a      	ldr	r2, [r3, #4]
 80003e6:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80003ea:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80003ec:	68a2      	ldr	r2, [r4, #8]
 80003ee:	6859      	ldr	r1, [r3, #4]
 80003f0:	430a      	orrs	r2, r1
 80003f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80003f4:	689a      	ldr	r2, [r3, #8]
 80003f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80003fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80003fc:	68e2      	ldr	r2, [r4, #12]
 80003fe:	6899      	ldr	r1, [r3, #8]
 8000400:	430a      	orrs	r2, r1
 8000402:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000404:	4a35      	ldr	r2, [pc, #212]	; (80004dc <HAL_ADC_Init+0x150>)
 8000406:	4290      	cmp	r0, r2
 8000408:	d00e      	beq.n	8000428 <HAL_ADC_Init+0x9c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800040a:	6899      	ldr	r1, [r3, #8]
 800040c:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000410:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000412:	689a      	ldr	r2, [r3, #8]
 8000414:	4302      	orrs	r2, r0
 8000416:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000418:	689a      	ldr	r2, [r3, #8]
 800041a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800041e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000420:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000422:	6899      	ldr	r1, [r3, #8]
 8000424:	430a      	orrs	r2, r1
 8000426:	e006      	b.n	8000436 <HAL_ADC_Init+0xaa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000428:	689a      	ldr	r2, [r3, #8]
 800042a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800042e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000430:	689a      	ldr	r2, [r3, #8]
 8000432:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000436:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000438:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800043a:	69a1      	ldr	r1, [r4, #24]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800043c:	f022 0202 	bic.w	r2, r2, #2
 8000440:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000442:	689a      	ldr	r2, [r3, #8]
 8000444:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000448:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800044a:	6a22      	ldr	r2, [r4, #32]
 800044c:	b19a      	cbz	r2, 8000476 <HAL_ADC_Init+0xea>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800044e:	685a      	ldr	r2, [r3, #4]
 8000450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000454:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000456:	685a      	ldr	r2, [r3, #4]
 8000458:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800045c:	605a      	str	r2, [r3, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800045e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000462:	fa92 f2a2 	rbit	r2, r2
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000466:	fab2 f182 	clz	r1, r2
 800046a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800046c:	6858      	ldr	r0, [r3, #4]
 800046e:	3a01      	subs	r2, #1
 8000470:	408a      	lsls	r2, r1
 8000472:	4302      	orrs	r2, r0
 8000474:	e002      	b.n	800047c <HAL_ADC_Init+0xf0>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000476:	685a      	ldr	r2, [r3, #4]
 8000478:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800047c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC parameters */
    ADC_Init(hadc);
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800047e:	2000      	movs	r0, #0
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000482:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000486:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000488:	69e2      	ldr	r2, [r4, #28]
 800048a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800048c:	3a01      	subs	r2, #1
 800048e:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000492:	6b21      	ldr	r1, [r4, #48]	; 0x30
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000494:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000496:	689a      	ldr	r2, [r3, #8]
 8000498:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800049c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800049e:	689a      	ldr	r2, [r3, #8]
 80004a0:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80004a4:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80004a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80004a8:	689a      	ldr	r2, [r3, #8]
 80004aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80004ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80004b0:	689a      	ldr	r2, [r3, #8]
 80004b2:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80004b6:	609a      	str	r2, [r3, #8]
    
    /* Set ADC parameters */
    ADC_Init(hadc);
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80004b8:	6460      	str	r0, [r4, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80004ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80004bc:	f023 0303 	bic.w	r3, r3, #3
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	6423      	str	r3, [r4, #64]	; 0x40
 80004c6:	e000      	b.n	80004ca <HAL_ADC_Init+0x13e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80004c8:	2001      	movs	r0, #1
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80004ca:	2300      	movs	r3, #0
 80004cc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80004d0:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 80004d2:	2001      	movs	r0, #1
  /* Release Lock */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	bf00      	nop
 80004d8:	40012300 	.word	0x40012300
 80004dc:	0f000001 	.word	0x0f000001

080004e0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80004e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80004e2:	4613      	mov	r3, r2
  __IO uint32_t counter = 0;
 80004e4:	2200      	movs	r2, #0
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80004e6:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 80004e8:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80004ea:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80004ee:	2a01      	cmp	r2, #1
 80004f0:	d064      	beq.n	80005bc <HAL_ADC_Start_DMA+0xdc>
 80004f2:	2201      	movs	r2, #1
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80004f4:	6805      	ldr	r5, [r0, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80004f6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80004fa:	68aa      	ldr	r2, [r5, #8]
 80004fc:	07d2      	lsls	r2, r2, #31
 80004fe:	d503      	bpl.n	8000508 <HAL_ADC_Start_DMA+0x28>
      counter--;
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000500:	68aa      	ldr	r2, [r5, #8]
 8000502:	07d0      	lsls	r0, r2, #31
 8000504:	d413      	bmi.n	800052e <HAL_ADC_Start_DMA+0x4e>
 8000506:	e04e      	b.n	80005a6 <HAL_ADC_Start_DMA+0xc6>
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000508:	68aa      	ldr	r2, [r5, #8]
 800050a:	f042 0201 	orr.w	r2, r2, #1
 800050e:	60aa      	str	r2, [r5, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000510:	4a2c      	ldr	r2, [pc, #176]	; (80005c4 <HAL_ADC_Start_DMA+0xe4>)
 8000512:	6810      	ldr	r0, [r2, #0]
 8000514:	4a2c      	ldr	r2, [pc, #176]	; (80005c8 <HAL_ADC_Start_DMA+0xe8>)
 8000516:	fbb0 f0f2 	udiv	r0, r0, r2
 800051a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800051e:	9001      	str	r0, [sp, #4]
    while(counter != 0)
 8000520:	9a01      	ldr	r2, [sp, #4]
 8000522:	2a00      	cmp	r2, #0
 8000524:	d0ec      	beq.n	8000500 <HAL_ADC_Start_DMA+0x20>
    {
      counter--;
 8000526:	9a01      	ldr	r2, [sp, #4]
 8000528:	3a01      	subs	r2, #1
 800052a:	9201      	str	r2, [sp, #4]
 800052c:	e7f8      	b.n	8000520 <HAL_ADC_Start_DMA+0x40>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800052e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000530:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8000534:	f020 0001 	bic.w	r0, r0, #1
 8000538:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800053c:	6420      	str	r0, [r4, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800053e:	686a      	ldr	r2, [r5, #4]
 8000540:	0552      	lsls	r2, r2, #21
 8000542:	d505      	bpl.n	8000550 <HAL_ADC_Start_DMA+0x70>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000544:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000546:	f420 5040 	bic.w	r0, r0, #12288	; 0x3000
 800054a:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800054e:	6420      	str	r0, [r4, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000550:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000552:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000556:	d002      	beq.n	800055e <HAL_ADC_Start_DMA+0x7e>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000558:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800055a:	f022 0206 	bic.w	r2, r2, #6
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800055e:	6462      	str	r2, [r4, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000560:	2200      	movs	r2, #0

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000562:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000564:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000568:	4a18      	ldr	r2, [pc, #96]	; (80005cc <HAL_ADC_Start_DMA+0xec>)
 800056a:	63c2      	str	r2, [r0, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800056c:	4a18      	ldr	r2, [pc, #96]	; (80005d0 <HAL_ADC_Start_DMA+0xf0>)
 800056e:	6402      	str	r2, [r0, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000570:	4a18      	ldr	r2, [pc, #96]	; (80005d4 <HAL_ADC_Start_DMA+0xf4>)
 8000572:	64c2      	str	r2, [r0, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000574:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000578:	602a      	str	r2, [r5, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800057a:	686a      	ldr	r2, [r5, #4]
 800057c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000580:	606a      	str	r2, [r5, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000582:	68aa      	ldr	r2, [r5, #8]
 8000584:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000588:	60aa      	str	r2, [r5, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800058a:	460a      	mov	r2, r1
 800058c:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 8000590:	f000 fa40 	bl	8000a14 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8000594:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <HAL_ADC_Start_DMA+0xf8>)
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	f013 0f1f 	tst.w	r3, #31
 800059c:	6823      	ldr	r3, [r4, #0]
 800059e:	d004      	beq.n	80005aa <HAL_ADC_Start_DMA+0xca>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80005a0:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <HAL_ADC_Start_DMA+0xfc>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d001      	beq.n	80005aa <HAL_ADC_Start_DMA+0xca>
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80005a6:	2000      	movs	r0, #0
 80005a8:	e009      	b.n	80005be <HAL_ADC_Start_DMA+0xde>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80005aa:	6898      	ldr	r0, [r3, #8]
 80005ac:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80005b0:	d1f9      	bne.n	80005a6 <HAL_ADC_Start_DMA+0xc6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80005b2:	689a      	ldr	r2, [r3, #8]
 80005b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	e000      	b.n	80005be <HAL_ADC_Start_DMA+0xde>
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80005bc:	2002      	movs	r0, #2
    }
  }
  
  /* Return function status */
  return HAL_OK;
}
 80005be:	b003      	add	sp, #12
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop
 80005c4:	2000000c 	.word	0x2000000c
 80005c8:	000f4240 	.word	0x000f4240
 80005cc:	0800063b 	.word	0x0800063b
 80005d0:	0800069d 	.word	0x0800069d
 80005d4:	080006a9 	.word	0x080006a9
 80005d8:	40012300 	.word	0x40012300
 80005dc:	40012000 	.word	0x40012000

080005e0 <HAL_ADC_Stop_DMA>:
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80005e0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80005e4:	2b01      	cmp	r3, #1
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80005e6:	b510      	push	{r4, lr}
 80005e8:	4604      	mov	r4, r0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80005ea:	d024      	beq.n	8000636 <HAL_ADC_Stop_DMA+0x56>
 80005ec:	2301      	movs	r3, #1
 80005ee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80005f2:	6803      	ldr	r3, [r0, #0]
 80005f4:	689a      	ldr	r2, [r3, #8]
 80005f6:	f022 0201 	bic.w	r2, r2, #1
 80005fa:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80005fc:	689a      	ldr	r2, [r3, #8]
 80005fe:	07d2      	lsls	r2, r2, #31
 8000600:	d414      	bmi.n	800062c <HAL_ADC_Stop_DMA+0x4c>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8000602:	689a      	ldr	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8000604:	6b80      	ldr	r0, [r0, #56]	; 0x38
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8000606:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800060a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800060c:	f000 fa41 	bl	8000a92 <HAL_DMA_Abort>
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8000610:	6822      	ldr	r2, [r4, #0]
 8000612:	6853      	ldr	r3, [r2, #4]
 8000614:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000618:	6053      	str	r3, [r2, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800061a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800061c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000620:	f023 0301 	bic.w	r3, r3, #1
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6423      	str	r3, [r4, #64]	; 0x40
 800062a:	e000      	b.n	800062e <HAL_ADC_Stop_DMA+0x4e>
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800062c:	2000      	movs	r0, #0
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800062e:	2300      	movs	r3, #0
 8000630:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8000634:	bd10      	pop	{r4, pc}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000636:	2002      	movs	r0, #2
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
}
 8000638:	bd10      	pop	{r4, pc}

0800063a <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800063a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800063c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800063e:	f012 0f50 	tst.w	r2, #80	; 0x50
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000642:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000644:	d124      	bne.n	8000690 <ADC_DMAConvCplt+0x56>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000646:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800064c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	6891      	ldr	r1, [r2, #8]
 8000652:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8000656:	d117      	bne.n	8000688 <ADC_DMAConvCplt+0x4e>
 8000658:	6999      	ldr	r1, [r3, #24]
 800065a:	b9a9      	cbnz	r1, 8000688 <ADC_DMAConvCplt+0x4e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800065c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800065e:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 8000662:	d002      	beq.n	800066a <ADC_DMAConvCplt+0x30>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000664:	6891      	ldr	r1, [r2, #8]
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000666:	0549      	lsls	r1, r1, #21
 8000668:	d40e      	bmi.n	8000688 <ADC_DMAConvCplt+0x4e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800066a:	6851      	ldr	r1, [r2, #4]
 800066c:	f021 0120 	bic.w	r1, r1, #32
 8000670:	6051      	str	r1, [r2, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000672:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000674:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000678:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800067a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800067c:	04d2      	lsls	r2, r2, #19
 800067e:	d403      	bmi.n	8000688 <ADC_DMAConvCplt+0x4e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000680:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000682:	f042 0201 	orr.w	r2, r2, #1
 8000686:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 8000688:	4618      	mov	r0, r3
 800068a:	f003 fc6f 	bl	8003f6c <HAL_ADC_ConvCpltCallback>
 800068e:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  }
}
 8000692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_ADC_ConvCpltCallback(hadc);
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000698:	4718      	bx	r3

0800069a <HAL_ADC_ConvHalfCpltCallback>:
 800069a:	4770      	bx	lr

0800069c <ADC_DMAHalfConvCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800069c:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* Conversion complete callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800069e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80006a0:	f7ff fffb 	bl	800069a <HAL_ADC_ConvHalfCpltCallback>
 80006a4:	bd08      	pop	{r3, pc}

080006a6 <HAL_ADC_ErrorCallback>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80006a6:	4770      	bx	lr

080006a8 <ADC_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80006a8:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80006aa:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80006ac:	2340      	movs	r3, #64	; 0x40
 80006ae:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80006b0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80006b2:	f043 0304 	orr.w	r3, r3, #4
 80006b6:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_ADC_ErrorCallback(hadc); 
 80006b8:	f7ff fff5 	bl	80006a6 <HAL_ADC_ErrorCallback>
 80006bc:	bd08      	pop	{r3, pc}
	...

080006c0 <HAL_ADC_ConfigChannel>:
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  __IO uint32_t counter = 0;
 80006c0:	2300      	movs	r3, #0
  *         the configuration information for the specified ADC.
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80006c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 80006c4:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006c6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d070      	beq.n	80007b0 <HAL_ADC_ConfigChannel+0xf0>
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 80006ce:	680d      	ldr	r5, [r1, #0]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006d0:	2301      	movs	r3, #1
 80006d2:	6804      	ldr	r4, [r0, #0]
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 80006d4:	2d09      	cmp	r5, #9
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006d6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80006da:	b2ae      	uxth	r6, r5
 80006dc:	688f      	ldr	r7, [r1, #8]
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 80006de:	d917      	bls.n	8000710 <HAL_ADC_ConfigChannel+0x50>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80006e0:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 80006e4:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 80006e8:	f1a2 031e 	sub.w	r3, r2, #30
 80006ec:	2207      	movs	r2, #7
 80006ee:	409a      	lsls	r2, r3
 80006f0:	ea2e 0202 	bic.w	r2, lr, r2
 80006f4:	60e2      	str	r2, [r4, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80006f6:	4a3d      	ldr	r2, [pc, #244]	; (80007ec <HAL_ADC_ConfigChannel+0x12c>)
 80006f8:	4295      	cmp	r5, r2
 80006fa:	d103      	bne.n	8000704 <HAL_ADC_ConfigChannel+0x44>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80006fc:	68e3      	ldr	r3, [r4, #12]
 80006fe:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 8000702:	e003      	b.n	800070c <HAL_ADC_ConfigChannel+0x4c>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000704:	68e2      	ldr	r2, [r4, #12]
 8000706:	fa07 f303 	lsl.w	r3, r7, r3
 800070a:	4313      	orrs	r3, r2
 800070c:	60e3      	str	r3, [r4, #12]
 800070e:	e00e      	b.n	800072e <HAL_ADC_ConfigChannel+0x6e>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000710:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000714:	f04f 0e07 	mov.w	lr, #7
 8000718:	6922      	ldr	r2, [r4, #16]
 800071a:	fa0e fe03 	lsl.w	lr, lr, r3
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800071e:	fa07 f303 	lsl.w	r3, r7, r3
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000722:	ea22 020e 	bic.w	r2, r2, lr
 8000726:	6122      	str	r2, [r4, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000728:	6922      	ldr	r2, [r4, #16]
 800072a:	4313      	orrs	r3, r2
 800072c:	6123      	str	r3, [r4, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800072e:	684b      	ldr	r3, [r1, #4]
 8000730:	2b06      	cmp	r3, #6
 8000732:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8000736:	d80d      	bhi.n	8000754 <HAL_ADC_ConfigChannel+0x94>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000738:	4413      	add	r3, r2
 800073a:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800073c:	1f59      	subs	r1, r3, #5
 800073e:	231f      	movs	r3, #31
 8000740:	408b      	lsls	r3, r1
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000742:	fa06 f101 	lsl.w	r1, r6, r1
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000746:	ea27 0303 	bic.w	r3, r7, r3
 800074a:	6363      	str	r3, [r4, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800074c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800074e:	4311      	orrs	r1, r2
 8000750:	6361      	str	r1, [r4, #52]	; 0x34
 8000752:	e01d      	b.n	8000790 <HAL_ADC_ConfigChannel+0xd0>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000754:	2b0c      	cmp	r3, #12
 8000756:	d80e      	bhi.n	8000776 <HAL_ADC_ConfigChannel+0xb6>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000758:	4413      	add	r3, r2
 800075a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800075c:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000760:	231f      	movs	r3, #31
 8000762:	4093      	lsls	r3, r2
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000764:	fa06 f202 	lsl.w	r2, r6, r2
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000768:	ea21 0303 	bic.w	r3, r1, r3
 800076c:	6323      	str	r3, [r4, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800076e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000770:	431a      	orrs	r2, r3
 8000772:	6322      	str	r2, [r4, #48]	; 0x30
 8000774:	e00c      	b.n	8000790 <HAL_ADC_ConfigChannel+0xd0>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000776:	4413      	add	r3, r2
 8000778:	221f      	movs	r2, #31
 800077a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800077c:	3b41      	subs	r3, #65	; 0x41
 800077e:	409a      	lsls	r2, r3
 8000780:	ea27 0202 	bic.w	r2, r7, r2
 8000784:	62e2      	str	r2, [r4, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000786:	fa06 f203 	lsl.w	r2, r6, r3
 800078a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800078c:	430a      	orrs	r2, r1
 800078e:	62e2      	str	r2, [r4, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000790:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <HAL_ADC_ConfigChannel+0x130>)
 8000792:	429c      	cmp	r4, r3
 8000794:	d004      	beq.n	80007a0 <HAL_ADC_ConfigChannel+0xe0>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000796:	2300      	movs	r3, #0
 8000798:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800079c:	4618      	mov	r0, r3
 800079e:	e023      	b.n	80007e8 <HAL_ADC_ConfigChannel+0x128>
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80007a0:	2d12      	cmp	r5, #18
 80007a2:	d107      	bne.n	80007b4 <HAL_ADC_ConfigChannel+0xf4>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80007a4:	4a13      	ldr	r2, [pc, #76]	; (80007f4 <HAL_ADC_ConfigChannel+0x134>)
 80007a6:	6853      	ldr	r3, [r2, #4]
 80007a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007ac:	6053      	str	r3, [r2, #4]
 80007ae:	e7f2      	b.n	8000796 <HAL_ADC_ConfigChannel+0xd6>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80007b0:	2002      	movs	r0, #2
 80007b2:	e019      	b.n	80007e8 <HAL_ADC_ConfigChannel+0x128>
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80007b4:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <HAL_ADC_ConfigChannel+0x12c>)
 80007b6:	429d      	cmp	r5, r3
 80007b8:	d001      	beq.n	80007be <HAL_ADC_ConfigChannel+0xfe>
 80007ba:	2d11      	cmp	r5, #17
 80007bc:	d1eb      	bne.n	8000796 <HAL_ADC_ConfigChannel+0xd6>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80007be:	490d      	ldr	r1, [pc, #52]	; (80007f4 <HAL_ADC_ConfigChannel+0x134>)

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80007c0:	429d      	cmp	r5, r3
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80007c2:	684a      	ldr	r2, [r1, #4]
 80007c4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80007c8:	604a      	str	r2, [r1, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80007ca:	d1e4      	bne.n	8000796 <HAL_ADC_ConfigChannel+0xd6>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <HAL_ADC_ConfigChannel+0x138>)
 80007ce:	4a0b      	ldr	r2, [pc, #44]	; (80007fc <HAL_ADC_ConfigChannel+0x13c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80007d6:	230a      	movs	r3, #10
 80007d8:	4353      	muls	r3, r2
      while(counter != 0)
      {
        counter--;
 80007da:	9301      	str	r3, [sp, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
      while(counter != 0)
 80007dc:	9b01      	ldr	r3, [sp, #4]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d0d9      	beq.n	8000796 <HAL_ADC_ConfigChannel+0xd6>
      {
        counter--;
 80007e2:	9b01      	ldr	r3, [sp, #4]
 80007e4:	3b01      	subs	r3, #1
 80007e6:	e7f8      	b.n	80007da <HAL_ADC_ConfigChannel+0x11a>
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return HAL_OK;
}
 80007e8:	b003      	add	sp, #12
 80007ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ec:	10000012 	.word	0x10000012
 80007f0:	40012000 	.word	0x40012000
 80007f4:	40012300 	.word	0x40012300
 80007f8:	2000000c 	.word	0x2000000c
 80007fc:	000f4240 	.word	0x000f4240

08000800 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000800:	4a07      	ldr	r2, [pc, #28]	; (8000820 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000802:	0200      	lsls	r0, r0, #8
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000804:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000806:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800080a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800080e:	041b      	lsls	r3, r3, #16
 8000810:	0c1b      	lsrs	r3, r3, #16
 8000812:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800081a:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800081c:	60d3      	str	r3, [r2, #12]
 800081e:	4770      	bx	lr
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000824:	4b19      	ldr	r3, [pc, #100]	; (800088c <HAL_NVIC_SetPriority+0x68>)
 8000826:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000828:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800082c:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800082e:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000832:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000834:	2c04      	cmp	r4, #4
 8000836:	bf28      	it	cs
 8000838:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800083a:	2d06      	cmp	r5, #6

  return (
 800083c:	f04f 0501 	mov.w	r5, #1
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000840:	bf8c      	ite	hi
 8000842:	3b03      	subhi	r3, #3
 8000844:	2300      	movls	r3, #0

  return (
 8000846:	fa05 f404 	lsl.w	r4, r5, r4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800084a:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800084c:	f104 34ff 	add.w	r4, r4, #4294967295
 8000850:	ea04 0401 	and.w	r4, r4, r1
 8000854:	fa04 f403 	lsl.w	r4, r4, r3
 8000858:	fa05 f303 	lsl.w	r3, r5, r3
 800085c:	f103 33ff 	add.w	r3, r3, #4294967295
 8000860:	ea02 0203 	and.w	r2, r2, r3
 8000864:	ea42 0204 	orr.w	r2, r2, r4
 8000868:	ea4f 1202 	mov.w	r2, r2, lsl #4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800086c:	da05      	bge.n	800087a <HAL_NVIC_SetPriority+0x56>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800086e:	f000 000f 	and.w	r0, r0, #15
 8000872:	b2d2      	uxtb	r2, r2
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_NVIC_SetPriority+0x6c>)
 8000876:	541a      	strb	r2, [r3, r0]
 8000878:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800087a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800087e:	b2d2      	uxtb	r2, r2
 8000880:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000884:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000888:	bd30      	pop	{r4, r5, pc}
 800088a:	bf00      	nop
 800088c:	e000ed00 	.word	0xe000ed00
 8000890:	e000ed14 	.word	0xe000ed14

08000894 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000894:	0942      	lsrs	r2, r0, #5
 8000896:	2301      	movs	r3, #1
 8000898:	f000 001f 	and.w	r0, r0, #31
 800089c:	fa03 f000 	lsl.w	r0, r3, r0
 80008a0:	4b01      	ldr	r3, [pc, #4]	; (80008a8 <HAL_NVIC_EnableIRQ+0x14>)
 80008a2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80008a6:	4770      	bx	lr
 80008a8:	e000e100 	.word	0xe000e100

080008ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008ac:	3801      	subs	r0, #1
 80008ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80008b2:	d20a      	bcs.n	80008ca <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b6:	21f0      	movs	r1, #240	; 0xf0
 80008b8:	4a06      	ldr	r2, [pc, #24]	; (80008d4 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ba:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008bc:	2000      	movs	r0, #0
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008be:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008c2:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008c4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000e010 	.word	0xe000e010
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80008d8:	4b04      	ldr	r3, [pc, #16]	; (80008ec <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80008da:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	bf0c      	ite	eq
 80008e0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80008e4:	f022 0204 	bicne.w	r2, r2, #4
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	4770      	bx	lr
 80008ec:	e000e010 	.word	0xe000e010

080008f0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80008f0:	4770      	bx	lr

080008f2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80008f2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80008f4:	f7ff fffc 	bl	80008f0 <HAL_SYSTICK_Callback>
 80008f8:	bd08      	pop	{r3, pc}
	...

080008fc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80008fc:	6803      	ldr	r3, [r0, #0]
 80008fe:	2118      	movs	r1, #24
 8000900:	b2da      	uxtb	r2, r3
 8000902:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000906:	3a10      	subs	r2, #16
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000908:	f023 0303 	bic.w	r3, r3, #3
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800090c:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000910:	4904      	ldr	r1, [pc, #16]	; (8000924 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000912:	2a03      	cmp	r2, #3
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000914:	5c89      	ldrb	r1, [r1, r2]
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000916:	bf88      	it	hi
 8000918:	3304      	addhi	r3, #4
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800091a:	65c1      	str	r1, [r0, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800091c:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 800091e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	080060c0 	.word	0x080060c0

08000928 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000928:	b570      	push	{r4, r5, r6, lr}
 800092a:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 800092c:	f7ff fd1a 	bl	8000364 <HAL_GetTick>
 8000930:	4605      	mov	r5, r0
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000932:	2c00      	cmp	r4, #0
 8000934:	d064      	beq.n	8000a00 <HAL_DMA_Init+0xd8>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000936:	2300      	movs	r3, #0

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000938:	6822      	ldr	r2, [r4, #0]
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800093a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800093e:	2302      	movs	r3, #2
 8000940:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000944:	6813      	ldr	r3, [r2, #0]
 8000946:	f023 0301 	bic.w	r3, r3, #1
 800094a:	6013      	str	r3, [r2, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800094c:	6821      	ldr	r1, [r4, #0]
 800094e:	680b      	ldr	r3, [r1, #0]
 8000950:	07d8      	lsls	r0, r3, #31
 8000952:	d508      	bpl.n	8000966 <HAL_DMA_Init+0x3e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000954:	f7ff fd06 	bl	8000364 <HAL_GetTick>
 8000958:	1b40      	subs	r0, r0, r5
 800095a:	2805      	cmp	r0, #5
 800095c:	d9f6      	bls.n	800094c <HAL_DMA_Init+0x24>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800095e:	2320      	movs	r3, #32
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000960:	2003      	movs	r0, #3
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000962:	6563      	str	r3, [r4, #84]	; 0x54
 8000964:	e051      	b.n	8000a0a <HAL_DMA_Init+0xe2>
      return HAL_TIMEOUT;
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000966:	680b      	ldr	r3, [r1, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000968:	4a29      	ldr	r2, [pc, #164]	; (8000a10 <HAL_DMA_Init+0xe8>)
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800096a:	6865      	ldr	r5, [r4, #4]
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800096c:	401a      	ands	r2, r3
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800096e:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000970:	69a0      	ldr	r0, [r4, #24]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000972:	431d      	orrs	r5, r3
 8000974:	68e3      	ldr	r3, [r4, #12]
 8000976:	431d      	orrs	r5, r3
 8000978:	6923      	ldr	r3, [r4, #16]
 800097a:	431d      	orrs	r5, r3
 800097c:	6963      	ldr	r3, [r4, #20]
 800097e:	432b      	orrs	r3, r5
 8000980:	69e5      	ldr	r5, [r4, #28]
 8000982:	4303      	orrs	r3, r0
 8000984:	432b      	orrs	r3, r5
 8000986:	6a25      	ldr	r5, [r4, #32]
 8000988:	432b      	orrs	r3, r5
 800098a:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800098c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800098e:	2a04      	cmp	r2, #4
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000990:	bf01      	itttt	eq
 8000992:	6b25      	ldreq	r5, [r4, #48]	; 0x30
 8000994:	6ae6      	ldreq	r6, [r4, #44]	; 0x2c
 8000996:	4335      	orreq	r5, r6
 8000998:	432b      	orreq	r3, r5

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800099a:	2a04      	cmp	r2, #4
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800099c:	600b      	str	r3, [r1, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800099e:	694b      	ldr	r3, [r1, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80009a0:	f023 0307 	bic.w	r3, r3, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80009a4:	ea43 0302 	orr.w	r3, r3, r2

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80009a8:	d11c      	bne.n	80009e4 <HAL_DMA_Init+0xbc>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80009aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80009ac:	4313      	orrs	r3, r2
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80009ae:	b920      	cbnz	r0, 80009ba <HAL_DMA_Init+0x92>
  {
    switch (tmp)
 80009b0:	2a01      	cmp	r2, #1
 80009b2:	d00b      	beq.n	80009cc <HAL_DMA_Init+0xa4>
 80009b4:	d313      	bcc.n	80009de <HAL_DMA_Init+0xb6>
 80009b6:	2a02      	cmp	r2, #2
 80009b8:	e010      	b.n	80009dc <HAL_DMA_Init+0xb4>
        break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80009ba:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80009be:	d10a      	bne.n	80009d6 <HAL_DMA_Init+0xae>
  {
    switch (tmp)
 80009c0:	2a03      	cmp	r2, #3
 80009c2:	d80f      	bhi.n	80009e4 <HAL_DMA_Init+0xbc>
 80009c4:	e8df f002 	tbb	[pc, r2]
 80009c8:	021e0b1e 	.word	0x021e0b1e
        break;
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80009cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80009ce:	f1b2 7fc0 	cmp.w	r2, #25165824	; 0x1800000
 80009d2:	d107      	bne.n	80009e4 <HAL_DMA_Init+0xbc>
 80009d4:	e016      	b.n	8000a04 <HAL_DMA_Init+0xdc>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80009d6:	2a02      	cmp	r2, #2
 80009d8:	d914      	bls.n	8000a04 <HAL_DMA_Init+0xdc>
 80009da:	2a03      	cmp	r2, #3
 80009dc:	d102      	bne.n	80009e4 <HAL_DMA_Init+0xbc>
      case DMA_FIFO_THRESHOLD_HALFFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80009de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80009e0:	01d2      	lsls	r2, r2, #7
 80009e2:	d40f      	bmi.n	8000a04 <HAL_DMA_Init+0xdc>
      return HAL_ERROR; 
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80009e4:	614b      	str	r3, [r1, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80009e6:	4620      	mov	r0, r4
 80009e8:	f7ff ff88 	bl	80008fc <DMA_CalcBaseAndBitshift>
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009ec:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80009ee:	233f      	movs	r3, #63	; 0x3f
 80009f0:	4093      	lsls	r3, r2
 80009f2:	6083      	str	r3, [r0, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009f4:	2000      	movs	r0, #0
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009f6:	2301      	movs	r3, #1
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009f8:	6560      	str	r0, [r4, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009fa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8000a00:	2001      	movs	r0, #1
 8000a02:	bd70      	pop	{r4, r5, r6, pc}
    tmp |= hdma->Init.FIFOThreshold;
    
    if (DMA_CheckFifoParam(hdma) != HAL_OK)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000a04:	2340      	movs	r3, #64	; 0x40
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000a06:	2001      	movs	r0, #1
    tmp |= hdma->Init.FIFOThreshold;
    
    if (DMA_CheckFifoParam(hdma) != HAL_OK)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000a08:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000a0a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 8000a0e:	bd70      	pop	{r4, r5, r6, pc}
 8000a10:	f010803f 	.word	0xf010803f

08000a14 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a14:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a16:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000a1a:	2c01      	cmp	r4, #1
 8000a1c:	d037      	beq.n	8000a8e <HAL_DMA_Start_IT+0x7a>
 8000a1e:	2401      	movs	r4, #1
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a20:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8000a22:	2500      	movs	r5, #0
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a24:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a28:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8000a2c:	2c01      	cmp	r4, #1
 8000a2e:	f04f 0402 	mov.w	r4, #2
 8000a32:	d128      	bne.n	8000a86 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a34:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000a38:	6804      	ldr	r4, [r0, #0]
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a3a:	6545      	str	r5, [r0, #84]	; 0x54
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000a3c:	6825      	ldr	r5, [r4, #0]
 8000a3e:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000a42:	6025      	str	r5, [r4, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000a44:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000a46:	6883      	ldr	r3, [r0, #8]
 8000a48:	2b40      	cmp	r3, #64	; 0x40
 8000a4a:	d102      	bne.n	8000a52 <HAL_DMA_Start_IT+0x3e>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000a4c:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000a4e:	60e1      	str	r1, [r4, #12]
 8000a50:	e001      	b.n	8000a56 <HAL_DMA_Start_IT+0x42>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8000a52:	60a1      	str	r1, [r4, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000a54:	60e2      	str	r2, [r4, #12]
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a56:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000a58:	233f      	movs	r3, #63	; 0x3f
 8000a5a:	4093      	lsls	r3, r2
 8000a5c:	60b3      	str	r3, [r6, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000a5e:	6823      	ldr	r3, [r4, #0]
 8000a60:	f043 0316 	orr.w	r3, r3, #22
 8000a64:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000a66:	6963      	ldr	r3, [r4, #20]
 8000a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a6c:	6163      	str	r3, [r4, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000a6e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000a70:	b11b      	cbz	r3, 8000a7a <HAL_DMA_Start_IT+0x66>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000a72:	6823      	ldr	r3, [r4, #0]
 8000a74:	f043 0308 	orr.w	r3, r3, #8
 8000a78:	6023      	str	r3, [r4, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000a7a:	6823      	ldr	r3, [r4, #0]
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;
 8000a7c:	2000      	movs	r0, #0
    {
      hdma->Instance->CR  |= DMA_IT_HT;
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	6023      	str	r3, [r4, #0]
 8000a84:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000a86:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000a8a:	4620      	mov	r0, r4
 8000a8c:	bd70      	pop	{r4, r5, r6, pc}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a8e:	2002      	movs	r0, #2
    /* Return error status */
    status = HAL_BUSY;
  }
  
  return status;
}
 8000a90:	bd70      	pop	{r4, r5, r6, pc}

08000a92 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a92:	b570      	push	{r4, r5, r6, lr}
 8000a94:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a96:	6d85      	ldr	r5, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8000a98:	f7ff fc64 	bl	8000364 <HAL_GetTick>
 8000a9c:	4606      	mov	r6, r0
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a9e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8000aa2:	2b02      	cmp	r3, #2
 8000aa4:	d006      	beq.n	8000ab4 <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000aa6:	2380      	movs	r3, #128	; 0x80
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    return HAL_ERROR;
 8000aa8:	2001      	movs	r0, #1
  
  uint32_t tickstart = HAL_GetTick();
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000aaa:	6563      	str	r3, [r4, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aac:	2300      	movs	r3, #0
 8000aae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    return HAL_ERROR;
 8000ab2:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ab4:	6823      	ldr	r3, [r4, #0]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	f022 0216 	bic.w	r2, r2, #22
 8000abc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000abe:	695a      	ldr	r2, [r3, #20]
 8000ac0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ac4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ac6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000ac8:	b90a      	cbnz	r2, 8000ace <HAL_DMA_Abort+0x3c>
 8000aca:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000acc:	b11a      	cbz	r2, 8000ad6 <HAL_DMA_Abort+0x44>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	f022 0208 	bic.w	r2, r2, #8
 8000ad4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	f022 0201 	bic.w	r2, r2, #1
 8000adc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ade:	6823      	ldr	r3, [r4, #0]
 8000ae0:	6818      	ldr	r0, [r3, #0]
 8000ae2:	f010 0001 	ands.w	r0, r0, #1
 8000ae6:	d00d      	beq.n	8000b04 <HAL_DMA_Abort+0x72>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ae8:	f7ff fc3c 	bl	8000364 <HAL_GetTick>
 8000aec:	1b80      	subs	r0, r0, r6
 8000aee:	2805      	cmp	r0, #5
 8000af0:	d9f5      	bls.n	8000ade <HAL_DMA_Abort+0x4c>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000af2:	2320      	movs	r3, #32
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000af4:	2003      	movs	r0, #3
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000af6:	6563      	str	r3, [r4, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000af8:	2300      	movs	r3, #0
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000afa:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000afe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
        
        return HAL_TIMEOUT;
 8000b02:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b04:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000b06:	233f      	movs	r3, #63	; 0x3f
 8000b08:	4093      	lsls	r3, r2
 8000b0a:	60ab      	str	r3, [r5, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000b0c:	2301      	movs	r3, #1
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b0e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000b12:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  }
  return HAL_OK;
}
 8000b16:	bd70      	pop	{r4, r5, r6, pc}

08000b18 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b18:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	d003      	beq.n	8000b28 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b20:	2380      	movs	r3, #128	; 0x80
 8000b22:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000b24:	2001      	movs	r0, #1
 8000b26:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000b28:	6802      	ldr	r2, [r0, #0]
    return HAL_ERROR;
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000b2a:	2305      	movs	r3, #5
 8000b2c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
  }

  return HAL_OK;
 8000b30:	2000      	movs	r0, #0
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000b32:	6813      	ldr	r3, [r2, #0]
 8000b34:	f023 0301 	bic.w	r3, r3, #1
 8000b38:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
}
 8000b3a:	4770      	bx	lr

08000b3c <HAL_DMA_IRQHandler>:
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8000b3c:	2300      	movs	r3, #0
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8000b40:	9301      	str	r3, [sp, #4]
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b42:	4604      	mov	r4, r0
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8000b44:	4b59      	ldr	r3, [pc, #356]	; (8000cac <HAL_DMA_IRQHandler+0x170>)

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000b46:	6d85      	ldr	r5, [r0, #88]	; 0x58
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8000b48:	681f      	ldr	r7, [r3, #0]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  uint32_t timeout = SystemCoreClock / 9600;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;
 8000b4e:	682e      	ldr	r6, [r5, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b50:	4093      	lsls	r3, r2
 8000b52:	421e      	tst	r6, r3
 8000b54:	d00c      	beq.n	8000b70 <HAL_DMA_IRQHandler+0x34>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000b56:	6801      	ldr	r1, [r0, #0]
 8000b58:	6808      	ldr	r0, [r1, #0]
 8000b5a:	0740      	lsls	r0, r0, #29
 8000b5c:	d508      	bpl.n	8000b70 <HAL_DMA_IRQHandler+0x34>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000b5e:	6808      	ldr	r0, [r1, #0]
 8000b60:	f020 0004 	bic.w	r0, r0, #4
 8000b64:	6008      	str	r0, [r1, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000b66:	60ab      	str	r3, [r5, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000b68:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b70:	4b4f      	ldr	r3, [pc, #316]	; (8000cb0 <HAL_DMA_IRQHandler+0x174>)
 8000b72:	4093      	lsls	r3, r2
 8000b74:	421e      	tst	r6, r3
 8000b76:	d008      	beq.n	8000b8a <HAL_DMA_IRQHandler+0x4e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000b78:	6821      	ldr	r1, [r4, #0]
 8000b7a:	6949      	ldr	r1, [r1, #20]
 8000b7c:	0609      	lsls	r1, r1, #24
 8000b7e:	d504      	bpl.n	8000b8a <HAL_DMA_IRQHandler+0x4e>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000b80:	60ab      	str	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000b82:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b84:	f043 0302 	orr.w	r3, r3, #2
 8000b88:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b8a:	4b4a      	ldr	r3, [pc, #296]	; (8000cb4 <HAL_DMA_IRQHandler+0x178>)
 8000b8c:	4093      	lsls	r3, r2
 8000b8e:	421e      	tst	r6, r3
 8000b90:	d008      	beq.n	8000ba4 <HAL_DMA_IRQHandler+0x68>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000b92:	6821      	ldr	r1, [r4, #0]
 8000b94:	6809      	ldr	r1, [r1, #0]
 8000b96:	0788      	lsls	r0, r1, #30
 8000b98:	d504      	bpl.n	8000ba4 <HAL_DMA_IRQHandler+0x68>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000b9a:	60ab      	str	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000b9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b9e:	f043 0304 	orr.w	r3, r3, #4
 8000ba2:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000ba4:	2310      	movs	r3, #16
 8000ba6:	fa03 f202 	lsl.w	r2, r3, r2
 8000baa:	4216      	tst	r6, r2
 8000bac:	d017      	beq.n	8000bde <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000bae:	6823      	ldr	r3, [r4, #0]
 8000bb0:	6819      	ldr	r1, [r3, #0]
 8000bb2:	0709      	lsls	r1, r1, #28
 8000bb4:	d513      	bpl.n	8000bde <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000bb6:	60aa      	str	r2, [r5, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	0350      	lsls	r0, r2, #13
 8000bbc:	d504      	bpl.n	8000bc8 <HAL_DMA_IRQHandler+0x8c>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	0319      	lsls	r1, r3, #12
 8000bc2:	d508      	bpl.n	8000bd6 <HAL_DMA_IRQHandler+0x9a>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000bc4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000bc6:	e007      	b.n	8000bd8 <HAL_DMA_IRQHandler+0x9c>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	05d2      	lsls	r2, r2, #23
 8000bcc:	d403      	bmi.n	8000bd6 <HAL_DMA_IRQHandler+0x9a>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	f022 0208 	bic.w	r2, r2, #8
 8000bd4:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000bd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000bd8:	b10b      	cbz	r3, 8000bde <HAL_DMA_IRQHandler+0xa2>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000bda:	4620      	mov	r0, r4
 8000bdc:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000bde:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000be0:	2220      	movs	r2, #32
 8000be2:	408a      	lsls	r2, r1
 8000be4:	4216      	tst	r6, r2
 8000be6:	d03b      	beq.n	8000c60 <HAL_DMA_IRQHandler+0x124>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000be8:	6823      	ldr	r3, [r4, #0]
 8000bea:	6818      	ldr	r0, [r3, #0]
 8000bec:	06c6      	lsls	r6, r0, #27
 8000bee:	d537      	bpl.n	8000c60 <HAL_DMA_IRQHandler+0x124>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000bf0:	60aa      	str	r2, [r5, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000bf2:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000bf6:	2a05      	cmp	r2, #5
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000bf8:	681a      	ldr	r2, [r3, #0]
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000bfa:	d119      	bne.n	8000c30 <HAL_DMA_IRQHandler+0xf4>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000bfc:	f022 0216 	bic.w	r2, r2, #22
 8000c00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c02:	695a      	ldr	r2, [r3, #20]
 8000c04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c08:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c0a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000c0c:	b90a      	cbnz	r2, 8000c12 <HAL_DMA_IRQHandler+0xd6>
 8000c0e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000c10:	b11a      	cbz	r2, 8000c1a <HAL_DMA_IRQHandler+0xde>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	f022 0208 	bic.w	r2, r2, #8
 8000c18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c1a:	233f      	movs	r3, #63	; 0x3f
 8000c1c:	408b      	lsls	r3, r1
 8000c1e:	60ab      	str	r3, [r5, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c20:	2300      	movs	r3, #0
 8000c22:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
         
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000c26:	2301      	movs	r3, #1
 8000c28:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	
        if(hdma->XferAbortCallback != NULL)
 8000c2c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000c2e:	e037      	b.n	8000ca0 <HAL_DMA_IRQHandler+0x164>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }
      
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c30:	0350      	lsls	r0, r2, #13
 8000c32:	d504      	bpl.n	8000c3e <HAL_DMA_IRQHandler+0x102>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	0319      	lsls	r1, r3, #12
 8000c38:	d40e      	bmi.n	8000c58 <HAL_DMA_IRQHandler+0x11c>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000c3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c3c:	e00d      	b.n	8000c5a <HAL_DMA_IRQHandler+0x11e>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000c44:	d108      	bne.n	8000c58 <HAL_DMA_IRQHandler+0x11c>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000c46:	6819      	ldr	r1, [r3, #0]
 8000c48:	f021 0110 	bic.w	r1, r1, #16
 8000c4c:	6019      	str	r1, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
          
          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c4e:	2301      	movs	r3, #1
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000c50:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          
          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c54:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        }
        
        if(hdma->XferCpltCallback != NULL)
 8000c58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000c5a:	b10b      	cbz	r3, 8000c60 <HAL_DMA_IRQHandler+0x124>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000c5c:	4620      	mov	r0, r4
 8000c5e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000c60:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000c62:	b303      	cbz	r3, 8000ca6 <HAL_DMA_IRQHandler+0x16a>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000c64:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000c66:	07da      	lsls	r2, r3, #31
 8000c68:	d519      	bpl.n	8000c9e <HAL_DMA_IRQHandler+0x162>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000c6a:	2305      	movs	r3, #5
      
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000c6c:	6822      	ldr	r2, [r4, #0]
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000c6e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000c72:	6813      	ldr	r3, [r2, #0]
 8000c74:	f023 0301 	bic.w	r3, r3, #1
 8000c78:	6013      	str	r3, [r2, #0]
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8000c7a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000c7e:	fbb7 f7f3 	udiv	r7, r7, r3
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
      
      do
      {
        if (++count > timeout)
 8000c82:	9b01      	ldr	r3, [sp, #4]
 8000c84:	3301      	adds	r3, #1
 8000c86:	429f      	cmp	r7, r3
 8000c88:	9301      	str	r3, [sp, #4]
 8000c8a:	d302      	bcc.n	8000c92 <HAL_DMA_IRQHandler+0x156>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000c8c:	6813      	ldr	r3, [r2, #0]
 8000c8e:	07db      	lsls	r3, r3, #31
 8000c90:	d4f7      	bmi.n	8000c82 <HAL_DMA_IRQHandler+0x146>

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000c92:	2300      	movs	r3, #0
 8000c94:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    }
    
    if(hdma->XferErrorCallback != NULL)
 8000c9e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000ca0:	b10b      	cbz	r3, 8000ca6 <HAL_DMA_IRQHandler+0x16a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000ca2:	4620      	mov	r0, r4
 8000ca4:	4798      	blx	r3
    }
  }
}
 8000ca6:	b003      	add	sp, #12
 8000ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000caa:	bf00      	nop
 8000cac:	2000000c 	.word	0x2000000c
 8000cb0:	00800001 	.word	0x00800001
 8000cb4:	00800004 	.word	0x00800004

08000cb8 <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000cb8:	4909      	ldr	r1, [pc, #36]	; (8000ce0 <FLASH_Program_DoubleWord+0x28>)
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000cba:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000cbc:	690c      	ldr	r4, [r1, #16]
 8000cbe:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8000cc2:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8000cc4:	690c      	ldr	r4, [r1, #16]
 8000cc6:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8000cca:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000ccc:	690c      	ldr	r4, [r1, #16]
 8000cce:	f044 0401 	orr.w	r4, r4, #1
 8000cd2:	610c      	str	r4, [r1, #16]
  
  *(__IO uint64_t*)Address = Data;
 8000cd4:	e9c0 2300 	strd	r2, r3, [r0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000cd8:	f3bf 8f4f 	dsb	sy
 8000cdc:	bd10      	pop	{r4, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023c00 	.word	0x40023c00

08000ce4 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <FLASH_Program_Word+0x24>)
 8000ce6:	691a      	ldr	r2, [r3, #16]
 8000ce8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000cec:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8000cee:	691a      	ldr	r2, [r3, #16]
 8000cf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cf4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000cf6:	691a      	ldr	r2, [r3, #16]
 8000cf8:	f042 0201 	orr.w	r2, r2, #1
 8000cfc:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 8000cfe:	6001      	str	r1, [r0, #0]
 8000d00:	f3bf 8f4f 	dsb	sy
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	40023c00 	.word	0x40023c00

08000d0c <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <FLASH_Program_HalfWord+0x24>)
 8000d0e:	691a      	ldr	r2, [r3, #16]
 8000d10:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000d14:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8000d16:	691a      	ldr	r2, [r3, #16]
 8000d18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d1c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000d1e:	691a      	ldr	r2, [r3, #16]
 8000d20:	f042 0201 	orr.w	r2, r2, #1
 8000d24:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 8000d26:	8001      	strh	r1, [r0, #0]
 8000d28:	f3bf 8f4f 	dsb	sy
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	40023c00 	.word	0x40023c00

08000d34 <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000d34:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <FLASH_Program_Byte+0x20>)
 8000d36:	691a      	ldr	r2, [r3, #16]
 8000d38:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000d3c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8000d3e:	691a      	ldr	r2, [r3, #16]
 8000d40:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000d42:	691a      	ldr	r2, [r3, #16]
 8000d44:	f042 0201 	orr.w	r2, r2, #1
 8000d48:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t*)Address = Data;
 8000d4a:	7001      	strb	r1, [r0, #0]
 8000d4c:	f3bf 8f4f 	dsb	sy
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	40023c00 	.word	0x40023c00

08000d58 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <FLASH_SetErrorCode+0x5c>)
 8000d5a:	68da      	ldr	r2, [r3, #12]
 8000d5c:	0792      	lsls	r2, r2, #30
 8000d5e:	d504      	bpl.n	8000d6a <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8000d60:	4915      	ldr	r1, [pc, #84]	; (8000db8 <FLASH_SetErrorCode+0x60>)
 8000d62:	698a      	ldr	r2, [r1, #24]
 8000d64:	f042 0220 	orr.w	r2, r2, #32
 8000d68:	618a      	str	r2, [r1, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	06db      	lsls	r3, r3, #27
 8000d6e:	d504      	bpl.n	8000d7a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000d70:	4a11      	ldr	r2, [pc, #68]	; (8000db8 <FLASH_SetErrorCode+0x60>)
 8000d72:	6993      	ldr	r3, [r2, #24]
 8000d74:	f043 0310 	orr.w	r3, r3, #16
 8000d78:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <FLASH_SetErrorCode+0x5c>)
 8000d7c:	68da      	ldr	r2, [r3, #12]
 8000d7e:	0690      	lsls	r0, r2, #26
 8000d80:	d504      	bpl.n	8000d8c <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000d82:	490d      	ldr	r1, [pc, #52]	; (8000db8 <FLASH_SetErrorCode+0x60>)
 8000d84:	698a      	ldr	r2, [r1, #24]
 8000d86:	f042 0208 	orr.w	r2, r2, #8
 8000d8a:	618a      	str	r2, [r1, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	0659      	lsls	r1, r3, #25
 8000d90:	d504      	bpl.n	8000d9c <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8000d92:	4a09      	ldr	r2, [pc, #36]	; (8000db8 <FLASH_SetErrorCode+0x60>)
 8000d94:	6993      	ldr	r3, [r2, #24]
 8000d96:	f043 0304 	orr.w	r3, r3, #4
 8000d9a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <FLASH_SetErrorCode+0x5c>)
 8000d9e:	68da      	ldr	r2, [r3, #12]
 8000da0:	0612      	lsls	r2, r2, #24
 8000da2:	d504      	bpl.n	8000dae <FLASH_SetErrorCode+0x56>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8000da4:	4904      	ldr	r1, [pc, #16]	; (8000db8 <FLASH_SetErrorCode+0x60>)
 8000da6:	698a      	ldr	r2, [r1, #24]
 8000da8:	f042 0202 	orr.w	r2, r2, #2
 8000dac:	618a      	str	r2, [r1, #24]
  }
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8000dae:	22f2      	movs	r2, #242	; 0xf2
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	4770      	bx	lr
 8000db4:	40023c00 	.word	0x40023c00
 8000db8:	2000437c 	.word	0x2000437c

08000dbc <HAL_FLASH_Unlock>:
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_FLASH_Unlock+0x1c>)
 8000dbe:	691a      	ldr	r2, [r3, #16]
 8000dc0:	2a00      	cmp	r2, #0
 8000dc2:	da06      	bge.n	8000dd2 <HAL_FLASH_Unlock+0x16>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8000dc4:	4a05      	ldr	r2, [pc, #20]	; (8000ddc <HAL_FLASH_Unlock+0x20>)
  else
  {
    return HAL_ERROR;
  }
  
  return HAL_OK; 
 8000dc6:	2000      	movs	r0, #0
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8000dc8:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8000dca:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8000dce:	605a      	str	r2, [r3, #4]
  else
  {
    return HAL_ERROR;
  }
  
  return HAL_OK; 
 8000dd0:	4770      	bx	lr
    FLASH->KEYR = FLASH_KEY1;
    FLASH->KEYR = FLASH_KEY2;
  }
  else
  {
    return HAL_ERROR;
 8000dd2:	2001      	movs	r0, #1
  }
  
  return HAL_OK; 
}
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	40023c00 	.word	0x40023c00
 8000ddc:	45670123 	.word	0x45670123

08000de0 <HAL_FLASH_Lock>:
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000de0:	4a03      	ldr	r2, [pc, #12]	; (8000df0 <HAL_FLASH_Lock+0x10>)
  
  return HAL_OK;  
}
 8000de2:	2000      	movs	r0, #0
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000de4:	6913      	ldr	r3, [r2, #16]
 8000de6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dea:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
}
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	40023c00 	.word	0x40023c00

08000df4 <FLASH_WaitForLastOperation>:
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
  uint32_t tickstart = 0;
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000df4:	2200      	movs	r2, #0
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <FLASH_WaitForLastOperation+0x54>)
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout: maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8000df8:	b570      	push	{r4, r5, r6, lr}
 8000dfa:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000dfc:	619a      	str	r2, [r3, #24]
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000dfe:	4d13      	ldr	r5, [pc, #76]	; (8000e4c <FLASH_WaitForLastOperation+0x58>)
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8000e00:	f7ff fab0 	bl	8000364 <HAL_GetTick>
 8000e04:	4606      	mov	r6, r0

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000e06:	68eb      	ldr	r3, [r5, #12]
 8000e08:	4a10      	ldr	r2, [pc, #64]	; (8000e4c <FLASH_WaitForLastOperation+0x58>)
 8000e0a:	03db      	lsls	r3, r3, #15
 8000e0c:	d50a      	bpl.n	8000e24 <FLASH_WaitForLastOperation+0x30>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8000e0e:	1c62      	adds	r2, r4, #1
 8000e10:	d0f9      	beq.n	8000e06 <FLASH_WaitForLastOperation+0x12>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8000e12:	b90c      	cbnz	r4, 8000e18 <FLASH_WaitForLastOperation+0x24>
      {
        return HAL_TIMEOUT;
 8000e14:	2003      	movs	r0, #3
 8000e16:	bd70      	pop	{r4, r5, r6, pc}

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
  { 
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8000e18:	f7ff faa4 	bl	8000364 <HAL_GetTick>
 8000e1c:	1b80      	subs	r0, r0, r6
 8000e1e:	4284      	cmp	r4, r0
 8000e20:	d2f1      	bcs.n	8000e06 <FLASH_WaitForLastOperation+0x12>
 8000e22:	e7f7      	b.n	8000e14 <FLASH_WaitForLastOperation+0x20>
        return HAL_TIMEOUT;
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8000e24:	68d0      	ldr	r0, [r2, #12]
 8000e26:	f010 00f2 	ands.w	r0, r0, #242	; 0xf2
 8000e2a:	d003      	beq.n	8000e34 <FLASH_WaitForLastOperation+0x40>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000e2c:	f7ff ff94 	bl	8000d58 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000e30:	2001      	movs	r0, #1
 8000e32:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000e34:	68d3      	ldr	r3, [r2, #12]
 8000e36:	f013 0301 	ands.w	r3, r3, #1
 8000e3a:	d002      	beq.n	8000e42 <FLASH_WaitForLastOperation+0x4e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	60d3      	str	r3, [r2, #12]
 8000e40:	bd70      	pop	{r4, r5, r6, pc}
  }

  /* If there is an error flag set */
  return HAL_OK;
 8000e42:	4618      	mov	r0, r3
  
}  
 8000e44:	bd70      	pop	{r4, r5, r6, pc}
 8000e46:	bf00      	nop
 8000e48:	2000437c 	.word	0x2000437c
 8000e4c:	40023c00 	.word	0x40023c00

08000e50 <HAL_FLASH_Program>:
  * @param  Data: specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000e54:	4c1c      	ldr	r4, [pc, #112]	; (8000ec8 <HAL_FLASH_Program+0x78>)
  * @param  Data: specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000e56:	4698      	mov	r8, r3
 8000e58:	4607      	mov	r7, r0
 8000e5a:	460d      	mov	r5, r1
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000e5c:	7d23      	ldrb	r3, [r4, #20]
  * @param  Data: specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000e5e:	4616      	mov	r6, r2
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d02d      	beq.n	8000ec0 <HAL_FLASH_Program+0x70>
 8000e64:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e66:	f24c 3050 	movw	r0, #50000	; 0xc350
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000e6a:	7523      	strb	r3, [r4, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e6c:	f7ff ffc2 	bl	8000df4 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 8000e70:	bb10      	cbnz	r0, 8000eb8 <HAL_FLASH_Program+0x68>
  {
    switch(TypeProgram)
 8000e72:	2f03      	cmp	r7, #3
 8000e74:	d817      	bhi.n	8000ea6 <HAL_FLASH_Program+0x56>
 8000e76:	e8df f007 	tbb	[pc, r7]
 8000e7a:	0702      	.short	0x0702
 8000e7c:	110c      	.short	0x110c
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8000e7e:	b2f1      	uxtb	r1, r6
 8000e80:	4628      	mov	r0, r5
 8000e82:	f7ff ff57 	bl	8000d34 <FLASH_Program_Byte>
        break;
 8000e86:	e00e      	b.n	8000ea6 <HAL_FLASH_Program+0x56>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000e88:	b2b1      	uxth	r1, r6
 8000e8a:	4628      	mov	r0, r5
 8000e8c:	f7ff ff3e 	bl	8000d0c <FLASH_Program_HalfWord>
        break;
 8000e90:	e009      	b.n	8000ea6 <HAL_FLASH_Program+0x56>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8000e92:	4631      	mov	r1, r6
 8000e94:	4628      	mov	r0, r5
 8000e96:	f7ff ff25 	bl	8000ce4 <FLASH_Program_Word>
        break;
 8000e9a:	e004      	b.n	8000ea6 <HAL_FLASH_Program+0x56>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 8000e9c:	4632      	mov	r2, r6
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	4628      	mov	r0, r5
 8000ea2:	f7ff ff09 	bl	8000cb8 <FLASH_Program_DoubleWord>
      }
      default :
        break;
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ea6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000eaa:	f7ff ffa3 	bl	8000df4 <FLASH_WaitForLastOperation>
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8000eae:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <HAL_FLASH_Program+0x7c>)
 8000eb0:	6913      	ldr	r3, [r2, #16]
 8000eb2:	f023 0301 	bic.w	r3, r3, #1
 8000eb6:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000eb8:	2300      	movs	r3, #0
 8000eba:	7523      	strb	r3, [r4, #20]

  return status;
 8000ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000ec0:	2002      	movs	r0, #2

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);

  return status;
}
 8000ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ec6:	bf00      	nop
 8000ec8:	2000437c 	.word	0x2000437c
 8000ecc:	40023c00 	.word	0x40023c00

08000ed0 <FLASH_MassErase>:
{
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <FLASH_MassErase+0x24>)
 8000ed2:	691a      	ldr	r2, [r3, #16]
 8000ed4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000ed8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 8000eda:	691a      	ldr	r2, [r3, #16]
 8000edc:	f042 0204 	orr.w	r2, r2, #4
 8000ee0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 8000ee2:	691a      	ldr	r2, [r3, #16]
 8000ee4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000ee8:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8000eec:	6118      	str	r0, [r3, #16]
 8000eee:	f3bf 8f4f 	dsb	sy
 8000ef2:	4770      	bx	lr
 8000ef4:	40023c00 	.word	0x40023c00

08000ef8 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8000ef8:	b151      	cbz	r1, 8000f10 <FLASH_Erase_Sector+0x18>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8000efa:	2901      	cmp	r1, #1
 8000efc:	d006      	beq.n	8000f0c <FLASH_Erase_Sector+0x14>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8000efe:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8000f00:	bf0c      	ite	eq
 8000f02:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8000f06:	f44f 7140 	movne.w	r1, #768	; 0x300
 8000f0a:	e001      	b.n	8000f10 <FLASH_Erase_Sector+0x18>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8000f0c:	f44f 7180 	mov.w	r1, #256	; 0x100
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
  }

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <FLASH_Erase_Sector+0x54>)
 8000f12:	691a      	ldr	r2, [r3, #16]
 8000f14:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000f18:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8000f1a:	691a      	ldr	r2, [r3, #16]
 8000f1c:	4311      	orrs	r1, r2
 8000f1e:	6119      	str	r1, [r3, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f20:	2178      	movs	r1, #120	; 0x78
  FLASH->CR &= SECTOR_MASK;
 8000f22:	691a      	ldr	r2, [r3, #16]
 8000f24:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000f28:	611a      	str	r2, [r3, #16]
 8000f2a:	fa91 f1a1 	rbit	r1, r1
  FLASH->CR |= FLASH_CR_SER | (Sector << POSITION_VAL(FLASH_CR_SNB));
 8000f2e:	691a      	ldr	r2, [r3, #16]
 8000f30:	fab1 f181 	clz	r1, r1
 8000f34:	f042 0202 	orr.w	r2, r2, #2
 8000f38:	4088      	lsls	r0, r1
 8000f3a:	4310      	orrs	r0, r2
 8000f3c:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8000f3e:	691a      	ldr	r2, [r3, #16]
 8000f40:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f44:	611a      	str	r2, [r3, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f46:	f3bf 8f4f 	dsb	sy
 8000f4a:	4770      	bx	lr
 8000f4c:	40023c00 	.word	0x40023c00

08000f50 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8000f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t index = 0;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f54:	4e23      	ldr	r6, [pc, #140]	; (8000fe4 <HAL_FLASHEx_Erase+0x94>)
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8000f56:	4605      	mov	r5, r0
 8000f58:	4688      	mov	r8, r1
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t index = 0;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f5a:	7d33      	ldrb	r3, [r6, #20]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d03e      	beq.n	8000fde <HAL_FLASHEx_Erase+0x8e>
 8000f60:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f62:	f24c 3050 	movw	r0, #50000	; 0xc350
{
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t index = 0;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f66:	7533      	strb	r3, [r6, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f68:	f7ff ff44 	bl	8000df4 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 8000f6c:	4604      	mov	r4, r0
 8000f6e:	bb88      	cbnz	r0, 8000fd4 <HAL_FLASHEx_Erase+0x84>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8000f70:	f04f 33ff 	mov.w	r3, #4294967295
 8000f74:	f8c8 3000 	str.w	r3, [r8]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000f78:	682b      	ldr	r3, [r5, #0]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d10d      	bne.n	8000f9a <HAL_FLASHEx_Erase+0x4a>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
 8000f7e:	7b28      	ldrb	r0, [r5, #12]
 8000f80:	f7ff ffa6 	bl	8000ed0 <FLASH_MassErase>
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f84:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f88:	f7ff ff34 	bl	8000df4 <FLASH_WaitForLastOperation>
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8000f8c:	4a16      	ldr	r2, [pc, #88]	; (8000fe8 <HAL_FLASHEx_Erase+0x98>)
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f8e:	4604      	mov	r4, r0
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8000f90:	6913      	ldr	r3, [r2, #16]
 8000f92:	f023 0304 	bic.w	r3, r3, #4
 8000f96:	6113      	str	r3, [r2, #16]
 8000f98:	e01c      	b.n	8000fd4 <HAL_FLASHEx_Erase+0x84>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000f9a:	686f      	ldr	r7, [r5, #4]

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8000f9c:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8000fe8 <HAL_FLASHEx_Erase+0x98>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000fa0:	68aa      	ldr	r2, [r5, #8]
 8000fa2:	686b      	ldr	r3, [r5, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	429f      	cmp	r7, r3
 8000fa8:	d214      	bcs.n	8000fd4 <HAL_FLASHEx_Erase+0x84>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8000faa:	7b29      	ldrb	r1, [r5, #12]
 8000fac:	4638      	mov	r0, r7
 8000fae:	f7ff ffa3 	bl	8000ef8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fb2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fb6:	f7ff ff1d 	bl	8000df4 <FLASH_WaitForLastOperation>
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8000fba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8000fbe:	f023 037a 	bic.w	r3, r3, #122	; 0x7a
 8000fc2:	f8c9 3010 	str.w	r3, [r9, #16]

        if(status != HAL_OK) 
 8000fc6:	b118      	cbz	r0, 8000fd0 <HAL_FLASHEx_Erase+0x80>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8000fc8:	f8c8 7000 	str.w	r7, [r8]
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fcc:	4604      	mov	r4, r0

        if(status != HAL_OK) 
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
          break;
 8000fce:	e001      	b.n	8000fd4 <HAL_FLASHEx_Erase+0x84>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000fd0:	3701      	adds	r7, #1
 8000fd2:	e7e5      	b.n	8000fa0 <HAL_FLASHEx_Erase+0x50>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000fd4:	2300      	movs	r3, #0

  return status;
 8000fd6:	4620      	mov	r0, r4
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000fd8:	7533      	strb	r3, [r6, #20]

  return status;
 8000fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
{
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t index = 0;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000fde:	2002      	movs	r0, #2

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);

  return status;
}
 8000fe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000fe4:	2000437c 	.word	0x2000437c
 8000fe8:	40023c00 	.word	0x40023c00

08000fec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff0:	680b      	ldr	r3, [r1, #0]
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff2:	b085      	sub	sp, #20
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ff4:	4e6f      	ldr	r6, [pc, #444]	; (80011b4 <HAL_GPIO_Init+0x1c8>)
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff6:	9301      	str	r3, [sp, #4]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ff8:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffa:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 80011bc <HAL_GPIO_Init+0x1d0>
 8000ffe:	46b6      	mov	lr, r6

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001000:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80011c0 <HAL_GPIO_Init+0x1d4>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001004:	2201      	movs	r2, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8001006:	9c01      	ldr	r4, [sp, #4]

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001008:	409a      	lsls	r2, r3
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 800100a:	ea32 0404 	bics.w	r4, r2, r4
 800100e:	f040 80c9 	bne.w	80011a4 <HAL_GPIO_Init+0x1b8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001012:	684c      	ldr	r4, [r1, #4]
 8001014:	f024 0910 	bic.w	r9, r4, #16
 8001018:	f1b9 0f02 	cmp.w	r9, #2
 800101c:	d114      	bne.n	8001048 <HAL_GPIO_Init+0x5c>
 800101e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001022:	f003 0b07 	and.w	fp, r3, #7
 8001026:	250f      	movs	r5, #15
 8001028:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800102c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001030:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001034:	fa05 f50b 	lsl.w	r5, r5, fp
 8001038:	ea27 0505 	bic.w	r5, r7, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800103c:	690f      	ldr	r7, [r1, #16]
 800103e:	fa07 f70b 	lsl.w	r7, r7, fp
 8001042:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3] = temp;
 8001044:	f8ca 7020 	str.w	r7, [sl, #32]
 8001048:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800104c:	2503      	movs	r5, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800104e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001050:	f004 0b03 	and.w	fp, r4, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001054:	fa05 f50a 	lsl.w	r5, r5, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001058:	f109 39ff 	add.w	r9, r9, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800105c:	fa0b fb0a 	lsl.w	fp, fp, sl
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001060:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001062:	f1b9 0f01 	cmp.w	r9, #1
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001066:	ea07 0705 	and.w	r7, r7, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800106a:	ea4b 0707 	orr.w	r7, fp, r7
      GPIOx->MODER = temp;
 800106e:	6007      	str	r7, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001070:	d812      	bhi.n	8001098 <HAL_GPIO_Init+0xac>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001072:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001074:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8001078:	68cf      	ldr	r7, [r1, #12]
 800107a:	fa07 f70a 	lsl.w	r7, r7, sl
 800107e:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001082:	f3c4 1900 	ubfx	r9, r4, #4, #1
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
        GPIOx->OSPEEDR = temp;
 8001086:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001088:	fa09 f903 	lsl.w	r9, r9, r3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800108c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800108e:	ea27 0702 	bic.w	r7, r7, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001092:	ea49 0707 	orr.w	r7, r9, r7
        GPIOx->OTYPER = temp;
 8001096:	6047      	str	r7, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001098:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800109a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800109c:	688f      	ldr	r7, [r1, #8]
 800109e:	fa07 f70a 	lsl.w	r7, r7, sl
 80010a2:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80010a4:	60c5      	str	r5, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010a6:	00e5      	lsls	r5, r4, #3
 80010a8:	d57c      	bpl.n	80011a4 <HAL_GPIO_Init+0x1b8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010aa:	f8dc 5044 	ldr.w	r5, [ip, #68]	; 0x44
 80010ae:	f023 0703 	bic.w	r7, r3, #3

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010b2:	f003 0a03 	and.w	sl, r3, #3
 80010b6:	f04f 090f 	mov.w	r9, #15
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ba:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 80010be:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010c2:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c6:	f8cc 5044 	str.w	r5, [ip, #68]	; 0x44
 80010ca:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 80010ce:	f8dc 5044 	ldr.w	r5, [ip, #68]	; 0x44
 80010d2:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 80010d6:	9503      	str	r5, [sp, #12]
 80010d8:	9d03      	ldr	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010da:	fa09 f50a 	lsl.w	r5, r9, sl
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
 80010de:	f8d7 b008 	ldr.w	fp, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010e2:	ea2b 0905 	bic.w	r9, fp, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80010e6:	4d34      	ldr	r5, [pc, #208]	; (80011b8 <HAL_GPIO_Init+0x1cc>)
 80010e8:	42a8      	cmp	r0, r5
 80010ea:	d024      	beq.n	8001136 <HAL_GPIO_Init+0x14a>
 80010ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010f0:	42a8      	cmp	r0, r5
 80010f2:	d022      	beq.n	800113a <HAL_GPIO_Init+0x14e>
 80010f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010f8:	42a8      	cmp	r0, r5
 80010fa:	d020      	beq.n	800113e <HAL_GPIO_Init+0x152>
 80010fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001100:	42a8      	cmp	r0, r5
 8001102:	d01e      	beq.n	8001142 <HAL_GPIO_Init+0x156>
 8001104:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001108:	42a8      	cmp	r0, r5
 800110a:	d01c      	beq.n	8001146 <HAL_GPIO_Init+0x15a>
 800110c:	4540      	cmp	r0, r8
 800110e:	d01c      	beq.n	800114a <HAL_GPIO_Init+0x15e>
 8001110:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001114:	42a8      	cmp	r0, r5
 8001116:	d01a      	beq.n	800114e <HAL_GPIO_Init+0x162>
 8001118:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800111c:	42a8      	cmp	r0, r5
 800111e:	d018      	beq.n	8001152 <HAL_GPIO_Init+0x166>
 8001120:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001124:	42a8      	cmp	r0, r5
 8001126:	d016      	beq.n	8001156 <HAL_GPIO_Init+0x16a>
 8001128:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800112c:	42a8      	cmp	r0, r5
 800112e:	bf14      	ite	ne
 8001130:	250a      	movne	r5, #10
 8001132:	2509      	moveq	r5, #9
 8001134:	e010      	b.n	8001158 <HAL_GPIO_Init+0x16c>
 8001136:	2500      	movs	r5, #0
 8001138:	e00e      	b.n	8001158 <HAL_GPIO_Init+0x16c>
 800113a:	2501      	movs	r5, #1
 800113c:	e00c      	b.n	8001158 <HAL_GPIO_Init+0x16c>
 800113e:	2502      	movs	r5, #2
 8001140:	e00a      	b.n	8001158 <HAL_GPIO_Init+0x16c>
 8001142:	2503      	movs	r5, #3
 8001144:	e008      	b.n	8001158 <HAL_GPIO_Init+0x16c>
 8001146:	2504      	movs	r5, #4
 8001148:	e006      	b.n	8001158 <HAL_GPIO_Init+0x16c>
 800114a:	2505      	movs	r5, #5
 800114c:	e004      	b.n	8001158 <HAL_GPIO_Init+0x16c>
 800114e:	2506      	movs	r5, #6
 8001150:	e002      	b.n	8001158 <HAL_GPIO_Init+0x16c>
 8001152:	2507      	movs	r5, #7
 8001154:	e000      	b.n	8001158 <HAL_GPIO_Init+0x16c>
 8001156:	2508      	movs	r5, #8
 8001158:	fa05 f50a 	lsl.w	r5, r5, sl
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800115c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001160:	ea45 0509 	orr.w	r5, r5, r9
        SYSCFG->EXTICR[position >> 2] = temp;
 8001164:	60bd      	str	r5, [r7, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8001166:	ea6f 0702 	mvn.w	r7, r2
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800116a:	6835      	ldr	r5, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 800116c:	bf0c      	ite	eq
 800116e:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8001170:	4315      	orrne	r5, r2
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001172:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8001176:	f8ce 5000 	str.w	r5, [lr]

        temp = EXTI->EMR;
 800117a:	f8de 5004 	ldr.w	r5, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 800117e:	bf0c      	ite	eq
 8001180:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8001182:	4315      	orrne	r5, r2
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001184:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8001188:	6075      	str	r5, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800118a:	68b5      	ldr	r5, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 800118c:	bf0c      	ite	eq
 800118e:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8001190:	4315      	orrne	r5, r2
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001192:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8001194:	f8ce 5008 	str.w	r5, [lr, #8]

        temp = EXTI->FTSR;
 8001198:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 800119c:	bf54      	ite	pl
 800119e:	403d      	andpl	r5, r7
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 80011a0:	4315      	orrmi	r5, r2
        }
        EXTI->FTSR = temp;
 80011a2:	60f5      	str	r5, [r6, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80011a4:	3301      	adds	r3, #1
 80011a6:	2b10      	cmp	r3, #16
 80011a8:	f47f af2c 	bne.w	8001004 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 80011ac:	b005      	add	sp, #20
 80011ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011b2:	bf00      	nop
 80011b4:	40013c00 	.word	0x40013c00
 80011b8:	40020000 	.word	0x40020000
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40021400 	.word	0x40021400

080011c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011c4:	b902      	cbnz	r2, 80011c8 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80011c6:	0409      	lsls	r1, r1, #16
 80011c8:	6181      	str	r1, [r0, #24]
 80011ca:	4770      	bx	lr

080011cc <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80011cc:	6943      	ldr	r3, [r0, #20]
 80011ce:	4059      	eors	r1, r3
 80011d0:	6141      	str	r1, [r0, #20]
 80011d2:	4770      	bx	lr

080011d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011d4:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80011d6:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80011d8:	6959      	ldr	r1, [r3, #20]
 80011da:	4201      	tst	r1, r0
 80011dc:	d002      	beq.n	80011e4 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011de:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011e0:	f002 fd44 	bl	8003c6c <HAL_GPIO_EXTI_Callback>
 80011e4:	bd08      	pop	{r3, pc}
 80011e6:	bf00      	nop
 80011e8:	40013c00 	.word	0x40013c00

080011ec <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80011ec:	4b19      	ldr	r3, [pc, #100]	; (8001254 <HAL_PWREx_EnableOverDrive+0x68>)
 80011ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80011f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80011f6:	641a      	str	r2, [r3, #64]	; 0x40
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80011fa:	4c17      	ldr	r4, [pc, #92]	; (8001258 <HAL_PWREx_EnableOverDrive+0x6c>)
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80011fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001200:	4625      	mov	r5, r4
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001202:	9301      	str	r3, [sp, #4]
 8001204:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001206:	6823      	ldr	r3, [r4, #0]
 8001208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800120c:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800120e:	f7ff f8a9 	bl	8000364 <HAL_GetTick>
 8001212:	4606      	mov	r6, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001214:	686b      	ldr	r3, [r5, #4]
 8001216:	4c10      	ldr	r4, [pc, #64]	; (8001258 <HAL_PWREx_EnableOverDrive+0x6c>)
 8001218:	03da      	lsls	r2, r3, #15
 800121a:	d407      	bmi.n	800122c <HAL_PWREx_EnableOverDrive+0x40>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800121c:	f7ff f8a2 	bl	8000364 <HAL_GetTick>
 8001220:	1b80      	subs	r0, r0, r6
 8001222:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001226:	d9f5      	bls.n	8001214 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8001228:	2003      	movs	r0, #3
 800122a:	e011      	b.n	8001250 <HAL_PWREx_EnableOverDrive+0x64>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800122c:	6823      	ldr	r3, [r4, #0]
 800122e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001232:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001234:	f7ff f896 	bl	8000364 <HAL_GetTick>
 8001238:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800123a:	6863      	ldr	r3, [r4, #4]
 800123c:	039b      	lsls	r3, r3, #14
 800123e:	d406      	bmi.n	800124e <HAL_PWREx_EnableOverDrive+0x62>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001240:	f7ff f890 	bl	8000364 <HAL_GetTick>
 8001244:	1b40      	subs	r0, r0, r5
 8001246:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800124a:	d9f6      	bls.n	800123a <HAL_PWREx_EnableOverDrive+0x4e>
 800124c:	e7ec      	b.n	8001228 <HAL_PWREx_EnableOverDrive+0x3c>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800124e:	2000      	movs	r0, #0
}
 8001250:	b002      	add	sp, #8
 8001252:	bd70      	pop	{r4, r5, r6, pc}
 8001254:	40023800 	.word	0x40023800
 8001258:	40007000 	.word	0x40007000

0800125c <HAL_RCC_OscConfig>:
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800125c:	6803      	ldr	r3, [r0, #0]
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800125e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001260:	4604      	mov	r4, r0
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001262:	07d8      	lsls	r0, r3, #31
 8001264:	d403      	bmi.n	800126e <HAL_RCC_OscConfig+0x12>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001266:	6823      	ldr	r3, [r4, #0]
 8001268:	0799      	lsls	r1, r3, #30
 800126a:	d452      	bmi.n	8001312 <HAL_RCC_OscConfig+0xb6>
 800126c:	e0a5      	b.n	80013ba <HAL_RCC_OscConfig+0x15e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800126e:	4b96      	ldr	r3, [pc, #600]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	f002 020c 	and.w	r2, r2, #12
 8001276:	2a04      	cmp	r2, #4
 8001278:	d007      	beq.n	800128a <HAL_RCC_OscConfig+0x2e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800127a:	689a      	ldr	r2, [r3, #8]
 800127c:	f002 020c 	and.w	r2, r2, #12
 8001280:	2a08      	cmp	r2, #8
 8001282:	d10b      	bne.n	800129c <HAL_RCC_OscConfig+0x40>
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	025a      	lsls	r2, r3, #9
 8001288:	d508      	bpl.n	800129c <HAL_RCC_OscConfig+0x40>
    {
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800128a:	4b8f      	ldr	r3, [pc, #572]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	039b      	lsls	r3, r3, #14
 8001290:	d5e9      	bpl.n	8001266 <HAL_RCC_OscConfig+0xa>
 8001292:	6863      	ldr	r3, [r4, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1e6      	bne.n	8001266 <HAL_RCC_OscConfig+0xa>
      {
        return HAL_ERROR;
 8001298:	2001      	movs	r0, #1
 800129a:	e176      	b.n	800158a <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800129c:	6863      	ldr	r3, [r4, #4]
 800129e:	4d8a      	ldr	r5, [pc, #552]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a4:	d013      	beq.n	80012ce <HAL_RCC_OscConfig+0x72>
 80012a6:	b95b      	cbnz	r3, 80012c0 <HAL_RCC_OscConfig+0x64>
 80012a8:	682b      	ldr	r3, [r5, #0]
 80012aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ae:	602b      	str	r3, [r5, #0]
 80012b0:	682b      	ldr	r3, [r5, #0]
 80012b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012b6:	602b      	str	r3, [r5, #0]
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b8:	f7ff f854 	bl	8000364 <HAL_GetTick>
 80012bc:	4606      	mov	r6, r0
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012be:	e024      	b.n	800130a <HAL_RCC_OscConfig+0xae>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012c4:	682b      	ldr	r3, [r5, #0]
 80012c6:	d106      	bne.n	80012d6 <HAL_RCC_OscConfig+0x7a>
 80012c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012cc:	602b      	str	r3, [r5, #0]
 80012ce:	682b      	ldr	r3, [r5, #0]
 80012d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d4:	e005      	b.n	80012e2 <HAL_RCC_OscConfig+0x86>
 80012d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012da:	602b      	str	r3, [r5, #0]
 80012dc:	682b      	ldr	r3, [r5, #0]
 80012de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e2:	602b      	str	r3, [r5, #0]
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e4:	f7ff f83e 	bl	8000364 <HAL_GetTick>
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e8:	4d77      	ldr	r5, [pc, #476]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ea:	4606      	mov	r6, r0
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ec:	682b      	ldr	r3, [r5, #0]
 80012ee:	039f      	lsls	r7, r3, #14
 80012f0:	d4b9      	bmi.n	8001266 <HAL_RCC_OscConfig+0xa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f2:	f7ff f837 	bl	8000364 <HAL_GetTick>
 80012f6:	1b80      	subs	r0, r0, r6
 80012f8:	2864      	cmp	r0, #100	; 0x64
 80012fa:	d9f7      	bls.n	80012ec <HAL_RCC_OscConfig+0x90>
          {
            return HAL_TIMEOUT;
 80012fc:	2003      	movs	r0, #3
 80012fe:	e144      	b.n	800158a <HAL_RCC_OscConfig+0x32e>
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001300:	f7ff f830 	bl	8000364 <HAL_GetTick>
 8001304:	1b80      	subs	r0, r0, r6
 8001306:	2864      	cmp	r0, #100	; 0x64
 8001308:	d8f8      	bhi.n	80012fc <HAL_RCC_OscConfig+0xa0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130a:	682b      	ldr	r3, [r5, #0]
 800130c:	0398      	lsls	r0, r3, #14
 800130e:	d4f7      	bmi.n	8001300 <HAL_RCC_OscConfig+0xa4>
 8001310:	e7a9      	b.n	8001266 <HAL_RCC_OscConfig+0xa>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001312:	4b6d      	ldr	r3, [pc, #436]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	f012 0f0c 	tst.w	r2, #12
 800131a:	d007      	beq.n	800132c <HAL_RCC_OscConfig+0xd0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	f002 020c 	and.w	r2, r2, #12
 8001322:	2a08      	cmp	r2, #8
 8001324:	d117      	bne.n	8001356 <HAL_RCC_OscConfig+0xfa>
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	0259      	lsls	r1, r3, #9
 800132a:	d414      	bmi.n	8001356 <HAL_RCC_OscConfig+0xfa>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800132c:	4b66      	ldr	r3, [pc, #408]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	0792      	lsls	r2, r2, #30
 8001332:	d502      	bpl.n	800133a <HAL_RCC_OscConfig+0xde>
 8001334:	68e2      	ldr	r2, [r4, #12]
 8001336:	2a01      	cmp	r2, #1
 8001338:	d1ae      	bne.n	8001298 <HAL_RCC_OscConfig+0x3c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133a:	681a      	ldr	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133c:	21f8      	movs	r1, #248	; 0xf8
 800133e:	fa91 f1a1 	rbit	r1, r1
 8001342:	6920      	ldr	r0, [r4, #16]
 8001344:	fab1 f181 	clz	r1, r1
 8001348:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800134c:	fa00 f101 	lsl.w	r1, r0, r1
 8001350:	430a      	orrs	r2, r1
 8001352:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001354:	e031      	b.n	80013ba <HAL_RCC_OscConfig+0x15e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001356:	68e3      	ldr	r3, [r4, #12]
 8001358:	4d5b      	ldr	r5, [pc, #364]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 800135a:	b1f3      	cbz	r3, 800139a <HAL_RCC_OscConfig+0x13e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800135c:	682b      	ldr	r3, [r5, #0]
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001364:	f7fe fffe 	bl	8000364 <HAL_GetTick>
 8001368:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136a:	682b      	ldr	r3, [r5, #0]
 800136c:	4856      	ldr	r0, [pc, #344]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 800136e:	079b      	lsls	r3, r3, #30
 8001370:	d405      	bmi.n	800137e <HAL_RCC_OscConfig+0x122>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001372:	f7fe fff7 	bl	8000364 <HAL_GetTick>
 8001376:	1b80      	subs	r0, r0, r6
 8001378:	2802      	cmp	r0, #2
 800137a:	d9f6      	bls.n	800136a <HAL_RCC_OscConfig+0x10e>
 800137c:	e7be      	b.n	80012fc <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137e:	6803      	ldr	r3, [r0, #0]
 8001380:	22f8      	movs	r2, #248	; 0xf8
 8001382:	fa92 f2a2 	rbit	r2, r2
 8001386:	6921      	ldr	r1, [r4, #16]
 8001388:	fab2 f282 	clz	r2, r2
 800138c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001390:	fa01 f202 	lsl.w	r2, r1, r2
 8001394:	4313      	orrs	r3, r2
 8001396:	6003      	str	r3, [r0, #0]
 8001398:	e00f      	b.n	80013ba <HAL_RCC_OscConfig+0x15e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800139a:	682b      	ldr	r3, [r5, #0]
 800139c:	f023 0301 	bic.w	r3, r3, #1
 80013a0:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a2:	f7fe ffdf 	bl	8000364 <HAL_GetTick>
 80013a6:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a8:	682b      	ldr	r3, [r5, #0]
 80013aa:	079f      	lsls	r7, r3, #30
 80013ac:	d505      	bpl.n	80013ba <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ae:	f7fe ffd9 	bl	8000364 <HAL_GetTick>
 80013b2:	1b80      	subs	r0, r0, r6
 80013b4:	2802      	cmp	r0, #2
 80013b6:	d9f7      	bls.n	80013a8 <HAL_RCC_OscConfig+0x14c>
 80013b8:	e7a0      	b.n	80012fc <HAL_RCC_OscConfig+0xa0>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ba:	6823      	ldr	r3, [r4, #0]
 80013bc:	071e      	lsls	r6, r3, #28
 80013be:	d403      	bmi.n	80013c8 <HAL_RCC_OscConfig+0x16c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013c0:	6823      	ldr	r3, [r4, #0]
 80013c2:	075d      	lsls	r5, r3, #29
 80013c4:	d549      	bpl.n	800145a <HAL_RCC_OscConfig+0x1fe>
 80013c6:	e022      	b.n	800140e <HAL_RCC_OscConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013c8:	6963      	ldr	r3, [r4, #20]
 80013ca:	4d3f      	ldr	r5, [pc, #252]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80013cc:	b17b      	cbz	r3, 80013ee <HAL_RCC_OscConfig+0x192>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ce:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	676b      	str	r3, [r5, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d6:	f7fe ffc5 	bl	8000364 <HAL_GetTick>
 80013da:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013dc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80013de:	0798      	lsls	r0, r3, #30
 80013e0:	d4ee      	bmi.n	80013c0 <HAL_RCC_OscConfig+0x164>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e2:	f7fe ffbf 	bl	8000364 <HAL_GetTick>
 80013e6:	1b80      	subs	r0, r0, r6
 80013e8:	2802      	cmp	r0, #2
 80013ea:	d9f7      	bls.n	80013dc <HAL_RCC_OscConfig+0x180>
 80013ec:	e786      	b.n	80012fc <HAL_RCC_OscConfig+0xa0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ee:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80013f0:	f023 0301 	bic.w	r3, r3, #1
 80013f4:	676b      	str	r3, [r5, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f6:	f7fe ffb5 	bl	8000364 <HAL_GetTick>
 80013fa:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013fc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80013fe:	0799      	lsls	r1, r3, #30
 8001400:	d5de      	bpl.n	80013c0 <HAL_RCC_OscConfig+0x164>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001402:	f7fe ffaf 	bl	8000364 <HAL_GetTick>
 8001406:	1b80      	subs	r0, r0, r6
 8001408:	2802      	cmp	r0, #2
 800140a:	d9f7      	bls.n	80013fc <HAL_RCC_OscConfig+0x1a0>
 800140c:	e776      	b.n	80012fc <HAL_RCC_OscConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	4b2e      	ldr	r3, [pc, #184]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001410:	4d2e      	ldr	r5, [pc, #184]	; (80014cc <HAL_RCC_OscConfig+0x270>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001412:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001414:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001418:	641a      	str	r2, [r3, #64]	; 0x40
 800141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001420:	9301      	str	r3, [sp, #4]
 8001422:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001424:	682b      	ldr	r3, [r5, #0]
 8001426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800142a:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800142c:	f7fe ff9a 	bl	8000364 <HAL_GetTick>
 8001430:	4606      	mov	r6, r0
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001432:	682b      	ldr	r3, [r5, #0]
 8001434:	05da      	lsls	r2, r3, #23
 8001436:	d514      	bpl.n	8001462 <HAL_RCC_OscConfig+0x206>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001438:	68a3      	ldr	r3, [r4, #8]
 800143a:	4d23      	ldr	r5, [pc, #140]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 800143c:	2b01      	cmp	r3, #1
 800143e:	d116      	bne.n	800146e <HAL_RCC_OscConfig+0x212>
 8001440:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001442:	f043 0301 	orr.w	r3, r3, #1
 8001446:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001448:	f241 3588 	movw	r5, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800144c:	f7fe ff8a 	bl	8000364 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001450:	4e1d      	ldr	r6, [pc, #116]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001452:	4607      	mov	r7, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001454:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001456:	079b      	lsls	r3, r3, #30
 8001458:	d526      	bpl.n	80014a8 <HAL_RCC_OscConfig+0x24c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800145a:	69a2      	ldr	r2, [r4, #24]
 800145c:	2a00      	cmp	r2, #0
 800145e:	d137      	bne.n	80014d0 <HAL_RCC_OscConfig+0x274>
 8001460:	e079      	b.n	8001556 <HAL_RCC_OscConfig+0x2fa>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001462:	f7fe ff7f 	bl	8000364 <HAL_GetTick>
 8001466:	1b80      	subs	r0, r0, r6
 8001468:	2864      	cmp	r0, #100	; 0x64
 800146a:	d9e2      	bls.n	8001432 <HAL_RCC_OscConfig+0x1d6>
 800146c:	e746      	b.n	80012fc <HAL_RCC_OscConfig+0xa0>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800146e:	b96b      	cbnz	r3, 800148c <HAL_RCC_OscConfig+0x230>
 8001470:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001472:	f241 3788 	movw	r7, #5000	; 0x1388
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001476:	f023 0301 	bic.w	r3, r3, #1
 800147a:	672b      	str	r3, [r5, #112]	; 0x70
 800147c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800147e:	f023 0304 	bic.w	r3, r3, #4
 8001482:	672b      	str	r3, [r5, #112]	; 0x70
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001484:	f7fe ff6e 	bl	8000364 <HAL_GetTick>
 8001488:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800148a:	e019      	b.n	80014c0 <HAL_RCC_OscConfig+0x264>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800148c:	2b05      	cmp	r3, #5
 800148e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001490:	d103      	bne.n	800149a <HAL_RCC_OscConfig+0x23e>
 8001492:	f043 0304 	orr.w	r3, r3, #4
 8001496:	672b      	str	r3, [r5, #112]	; 0x70
 8001498:	e7d2      	b.n	8001440 <HAL_RCC_OscConfig+0x1e4>
 800149a:	f023 0301 	bic.w	r3, r3, #1
 800149e:	672b      	str	r3, [r5, #112]	; 0x70
 80014a0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014a2:	f023 0304 	bic.w	r3, r3, #4
 80014a6:	e7ce      	b.n	8001446 <HAL_RCC_OscConfig+0x1ea>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a8:	f7fe ff5c 	bl	8000364 <HAL_GetTick>
 80014ac:	1bc0      	subs	r0, r0, r7
 80014ae:	42a8      	cmp	r0, r5
 80014b0:	d9d0      	bls.n	8001454 <HAL_RCC_OscConfig+0x1f8>
 80014b2:	e723      	b.n	80012fc <HAL_RCC_OscConfig+0xa0>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b4:	f7fe ff56 	bl	8000364 <HAL_GetTick>
 80014b8:	1b80      	subs	r0, r0, r6
 80014ba:	42b8      	cmp	r0, r7
 80014bc:	f63f af1e 	bhi.w	80012fc <HAL_RCC_OscConfig+0xa0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014c0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014c2:	0798      	lsls	r0, r3, #30
 80014c4:	d4f6      	bmi.n	80014b4 <HAL_RCC_OscConfig+0x258>
 80014c6:	e7c8      	b.n	800145a <HAL_RCC_OscConfig+0x1fe>
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40007000 	.word	0x40007000
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014d0:	4d2f      	ldr	r5, [pc, #188]	; (8001590 <HAL_RCC_OscConfig+0x334>)
 80014d2:	68ab      	ldr	r3, [r5, #8]
 80014d4:	f003 030c 	and.w	r3, r3, #12
 80014d8:	2b08      	cmp	r3, #8
 80014da:	f43f aedd 	beq.w	8001298 <HAL_RCC_OscConfig+0x3c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014de:	682b      	ldr	r3, [r5, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014e0:	2a02      	cmp	r2, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014e6:	602b      	str	r3, [r5, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014e8:	d143      	bne.n	8001572 <HAL_RCC_OscConfig+0x316>
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ea:	f7fe ff3b 	bl	8000364 <HAL_GetTick>
 80014ee:	4607      	mov	r7, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f0:	682b      	ldr	r3, [r5, #0]
 80014f2:	4e27      	ldr	r6, [pc, #156]	; (8001590 <HAL_RCC_OscConfig+0x334>)
 80014f4:	0199      	lsls	r1, r3, #6
 80014f6:	d430      	bmi.n	800155a <HAL_RCC_OscConfig+0x2fe>
 80014f8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80014fc:	fa92 f2a2 	rbit	r2, r2
 8001500:	f44f 3340 	mov.w	r3, #196608	; 0x30000
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001504:	fab2 f082 	clz	r0, r2
 8001508:	fa93 f3a3 	rbit	r3, r3
 800150c:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8001510:	fab3 f583 	clz	r5, r3
 8001514:	fa92 f2a2 	rbit	r2, r2
 8001518:	69e3      	ldr	r3, [r4, #28]
 800151a:	fab2 f182 	clz	r1, r2
 800151e:	6a27      	ldr	r7, [r4, #32]
 8001520:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001522:	431f      	orrs	r7, r3
 8001524:	4082      	lsls	r2, r0
 8001526:	f047 5300 	orr.w	r3, r7, #536870912	; 0x20000000
 800152a:	ea43 0002 	orr.w	r0, r3, r2
 800152e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001530:	085a      	lsrs	r2, r3, #1
 8001532:	3a01      	subs	r2, #1
 8001534:	fa02 f305 	lsl.w	r3, r2, r5
 8001538:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800153a:	4303      	orrs	r3, r0
 800153c:	408a      	lsls	r2, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	6073      	str	r3, [r6, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001542:	6833      	ldr	r3, [r6, #0]
 8001544:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001548:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154a:	f7fe ff0b 	bl	8000364 <HAL_GetTick>
 800154e:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001550:	6833      	ldr	r3, [r6, #0]
 8001552:	019a      	lsls	r2, r3, #6
 8001554:	d507      	bpl.n	8001566 <HAL_RCC_OscConfig+0x30a>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001556:	2000      	movs	r0, #0
 8001558:	e017      	b.n	800158a <HAL_RCC_OscConfig+0x32e>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800155a:	f7fe ff03 	bl	8000364 <HAL_GetTick>
 800155e:	1bc0      	subs	r0, r0, r7
 8001560:	2802      	cmp	r0, #2
 8001562:	d9c5      	bls.n	80014f0 <HAL_RCC_OscConfig+0x294>
 8001564:	e6ca      	b.n	80012fc <HAL_RCC_OscConfig+0xa0>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001566:	f7fe fefd 	bl	8000364 <HAL_GetTick>
 800156a:	1b00      	subs	r0, r0, r4
 800156c:	2802      	cmp	r0, #2
 800156e:	d9ef      	bls.n	8001550 <HAL_RCC_OscConfig+0x2f4>
 8001570:	e6c4      	b.n	80012fc <HAL_RCC_OscConfig+0xa0>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001572:	f7fe fef7 	bl	8000364 <HAL_GetTick>
 8001576:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001578:	682b      	ldr	r3, [r5, #0]
 800157a:	019b      	lsls	r3, r3, #6
 800157c:	d5eb      	bpl.n	8001556 <HAL_RCC_OscConfig+0x2fa>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800157e:	f7fe fef1 	bl	8000364 <HAL_GetTick>
 8001582:	1b00      	subs	r0, r0, r4
 8001584:	2802      	cmp	r0, #2
 8001586:	d9f7      	bls.n	8001578 <HAL_RCC_OscConfig+0x31c>
 8001588:	e6b8      	b.n	80012fc <HAL_RCC_OscConfig+0xa0>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800158a:	b003      	add	sp, #12
 800158c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800

08001594 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001594:	491b      	ldr	r1, [pc, #108]	; (8001604 <HAL_RCC_GetSysClockFreq+0x70>)
 8001596:	688b      	ldr	r3, [r1, #8]
 8001598:	f003 030c 	and.w	r3, r3, #12
 800159c:	2b04      	cmp	r3, #4
 800159e:	d02c      	beq.n	80015fa <HAL_RCC_GetSysClockFreq+0x66>
 80015a0:	2b08      	cmp	r3, #8
 80015a2:	d12c      	bne.n	80015fe <HAL_RCC_GetSysClockFreq+0x6a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015a4:	6848      	ldr	r0, [r1, #4]
 80015a6:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80015aa:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015ac:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80015b0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80015b4:	684b      	ldr	r3, [r1, #4]
 80015b6:	fa92 f2a2 	rbit	r2, r2
 80015ba:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80015be:	fab2 f282 	clz	r2, r2
 80015c2:	ea01 0103 	and.w	r1, r1, r3
 80015c6:	fa21 f102 	lsr.w	r1, r1, r2
 80015ca:	bf14      	ite	ne
 80015cc:	4a0e      	ldrne	r2, [pc, #56]	; (8001608 <HAL_RCC_GetSysClockFreq+0x74>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80015ce:	4a0f      	ldreq	r2, [pc, #60]	; (800160c <HAL_RCC_GetSysClockFreq+0x78>)
 80015d0:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 80015d4:	4a0b      	ldr	r2, [pc, #44]	; (8001604 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80015d6:	fb00 f301 	mul.w	r3, r0, r1
 80015da:	f44f 3040 	mov.w	r0, #196608	; 0x30000
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 80015de:	6852      	ldr	r2, [r2, #4]
 80015e0:	fa90 f0a0 	rbit	r0, r0
      
      sysclockfreq = pllvco/pllp;
 80015e4:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 80015e8:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 80015ec:	fa22 f000 	lsr.w	r0, r2, r0
 80015f0:	3001      	adds	r0, #1
 80015f2:	0040      	lsls	r0, r0, #1
 80015f4:	fbb3 f0f0 	udiv	r0, r3, r0
 80015f8:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015fa:	4803      	ldr	r0, [pc, #12]	; (8001608 <HAL_RCC_GetSysClockFreq+0x74>)
 80015fc:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015fe:	4803      	ldr	r0, [pc, #12]	; (800160c <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	40023800 	.word	0x40023800
 8001608:	017d7840 	.word	0x017d7840
 800160c:	00f42400 	.word	0x00f42400

08001610 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001610:	4a50      	ldr	r2, [pc, #320]	; (8001754 <HAL_RCC_ClockConfig+0x144>)
 8001612:	6813      	ldr	r3, [r2, #0]
 8001614:	f003 030f 	and.w	r3, r3, #15
 8001618:	428b      	cmp	r3, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800161a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800161e:	4604      	mov	r4, r0
 8001620:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001622:	d30a      	bcc.n	800163a <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
  
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001624:	6821      	ldr	r1, [r4, #0]
 8001626:	0788      	lsls	r0, r1, #30
 8001628:	d514      	bpl.n	8001654 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800162a:	484b      	ldr	r0, [pc, #300]	; (8001758 <HAL_RCC_ClockConfig+0x148>)
 800162c:	6883      	ldr	r3, [r0, #8]
 800162e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001632:	68a3      	ldr	r3, [r4, #8]
 8001634:	4313      	orrs	r3, r2
 8001636:	6083      	str	r3, [r0, #8]
 8001638:	e00c      	b.n	8001654 <HAL_RCC_ClockConfig+0x44>
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800163a:	6813      	ldr	r3, [r2, #0]
 800163c:	f023 030f 	bic.w	r3, r3, #15
 8001640:	430b      	orrs	r3, r1
 8001642:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001644:	6813      	ldr	r3, [r2, #0]
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	4299      	cmp	r1, r3
 800164c:	d0ea      	beq.n	8001624 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 800164e:	2001      	movs	r0, #1
 8001650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001654:	07c9      	lsls	r1, r1, #31
 8001656:	d406      	bmi.n	8001666 <HAL_RCC_ClockConfig+0x56>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001658:	4a3e      	ldr	r2, [pc, #248]	; (8001754 <HAL_RCC_ClockConfig+0x144>)
 800165a:	6813      	ldr	r3, [r2, #0]
 800165c:	f003 030f 	and.w	r3, r3, #15
 8001660:	429d      	cmp	r5, r3
 8001662:	d342      	bcc.n	80016ea <HAL_RCC_ClockConfig+0xda>
 8001664:	e04b      	b.n	80016fe <HAL_RCC_ClockConfig+0xee>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001666:	6862      	ldr	r2, [r4, #4]
 8001668:	4b3b      	ldr	r3, [pc, #236]	; (8001758 <HAL_RCC_ClockConfig+0x148>)
 800166a:	2a01      	cmp	r2, #1
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166c:	6819      	ldr	r1, [r3, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800166e:	d102      	bne.n	8001676 <HAL_RCC_ClockConfig+0x66>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001670:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 8001674:	e006      	b.n	8001684 <HAL_RCC_ClockConfig+0x74>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001676:	2a02      	cmp	r2, #2
 8001678:	d102      	bne.n	8001680 <HAL_RCC_ClockConfig+0x70>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167a:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 800167e:	e001      	b.n	8001684 <HAL_RCC_ClockConfig+0x74>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001680:	f011 0f02 	tst.w	r1, #2
 8001684:	d0e3      	beq.n	800164e <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001686:	6899      	ldr	r1, [r3, #8]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001688:	f241 3888 	movw	r8, #5000	; 0x1388
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800168c:	4f32      	ldr	r7, [pc, #200]	; (8001758 <HAL_RCC_ClockConfig+0x148>)
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800168e:	f021 0103 	bic.w	r1, r1, #3
 8001692:	430a      	orrs	r2, r1
 8001694:	609a      	str	r2, [r3, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001696:	f7fe fe65 	bl	8000364 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800169a:	6863      	ldr	r3, [r4, #4]
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800169c:	4606      	mov	r6, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d10c      	bne.n	80016bc <HAL_RCC_ClockConfig+0xac>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	f003 030c 	and.w	r3, r3, #12
 80016a8:	2b04      	cmp	r3, #4
 80016aa:	d0d5      	beq.n	8001658 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ac:	f7fe fe5a 	bl	8000364 <HAL_GetTick>
 80016b0:	1b80      	subs	r0, r0, r6
 80016b2:	4540      	cmp	r0, r8
 80016b4:	d9f5      	bls.n	80016a2 <HAL_RCC_ClockConfig+0x92>
        {
          return HAL_TIMEOUT;
 80016b6:	2003      	movs	r0, #3
 80016b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d10f      	bne.n	80016e0 <HAL_RCC_ClockConfig+0xd0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	f003 030c 	and.w	r3, r3, #12
 80016c6:	2b08      	cmp	r3, #8
 80016c8:	d0c6      	beq.n	8001658 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ca:	f7fe fe4b 	bl	8000364 <HAL_GetTick>
 80016ce:	1b80      	subs	r0, r0, r6
 80016d0:	4540      	cmp	r0, r8
 80016d2:	d9f5      	bls.n	80016c0 <HAL_RCC_ClockConfig+0xb0>
 80016d4:	e7ef      	b.n	80016b6 <HAL_RCC_ClockConfig+0xa6>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d6:	f7fe fe45 	bl	8000364 <HAL_GetTick>
 80016da:	1b80      	subs	r0, r0, r6
 80016dc:	4540      	cmp	r0, r8
 80016de:	d8ea      	bhi.n	80016b6 <HAL_RCC_ClockConfig+0xa6>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	f013 0f0c 	tst.w	r3, #12
 80016e6:	d1f6      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xc6>
 80016e8:	e7b6      	b.n	8001658 <HAL_RCC_ClockConfig+0x48>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ea:	6813      	ldr	r3, [r2, #0]
 80016ec:	f023 030f 	bic.w	r3, r3, #15
 80016f0:	432b      	orrs	r3, r5
 80016f2:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016f4:	6813      	ldr	r3, [r2, #0]
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	429d      	cmp	r5, r3
 80016fc:	d1a7      	bne.n	800164e <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016fe:	6821      	ldr	r1, [r4, #0]
 8001700:	074a      	lsls	r2, r1, #29
 8001702:	d506      	bpl.n	8001712 <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001704:	4814      	ldr	r0, [pc, #80]	; (8001758 <HAL_RCC_ClockConfig+0x148>)
 8001706:	6883      	ldr	r3, [r0, #8]
 8001708:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800170c:	68e3      	ldr	r3, [r4, #12]
 800170e:	4313      	orrs	r3, r2
 8001710:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001712:	070b      	lsls	r3, r1, #28
 8001714:	d507      	bpl.n	8001726 <HAL_RCC_ClockConfig+0x116>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001716:	4a10      	ldr	r2, [pc, #64]	; (8001758 <HAL_RCC_ClockConfig+0x148>)
 8001718:	6921      	ldr	r1, [r4, #16]
 800171a:	6893      	ldr	r3, [r2, #8]
 800171c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001720:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001724:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001726:	f7ff ff35 	bl	8001594 <HAL_RCC_GetSysClockFreq>
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <HAL_RCC_ClockConfig+0x148>)
 800172c:	22f0      	movs	r2, #240	; 0xf0
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	fa92 f2a2 	rbit	r2, r2
 8001734:	fab2 f282 	clz	r2, r2
 8001738:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800173c:	40d3      	lsrs	r3, r2
 800173e:	4a07      	ldr	r2, [pc, #28]	; (800175c <HAL_RCC_ClockConfig+0x14c>)
 8001740:	5cd3      	ldrb	r3, [r2, r3]
 8001742:	40d8      	lsrs	r0, r3
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_RCC_ClockConfig+0x150>)
 8001746:	6018      	str	r0, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001748:	2000      	movs	r0, #0
 800174a:	f7fe fde3 	bl	8000314 <HAL_InitTick>
  
  return HAL_OK;
 800174e:	2000      	movs	r0, #0
}
 8001750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001754:	40023c00 	.word	0x40023c00
 8001758:	40023800 	.word	0x40023800
 800175c:	080064e2 	.word	0x080064e2
 8001760:	2000000c 	.word	0x2000000c

08001764 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001764:	4b01      	ldr	r3, [pc, #4]	; (800176c <HAL_RCC_GetHCLKFreq+0x8>)
 8001766:	6818      	ldr	r0, [r3, #0]
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	2000000c 	.word	0x2000000c

08001770 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001772:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	fa92 f2a2 	rbit	r2, r2
 800177c:	fab2 f282 	clz	r2, r2
 8001780:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001784:	40d3      	lsrs	r3, r2
 8001786:	4a04      	ldr	r2, [pc, #16]	; (8001798 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001788:	5cd3      	ldrb	r3, [r2, r3]
 800178a:	4a04      	ldr	r2, [pc, #16]	; (800179c <HAL_RCC_GetPCLK1Freq+0x2c>)
 800178c:	6810      	ldr	r0, [r2, #0]
}
 800178e:	40d8      	lsrs	r0, r3
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800
 8001798:	080064f2 	.word	0x080064f2
 800179c:	2000000c 	.word	0x2000000c

080017a0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017a2:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	fa92 f2a2 	rbit	r2, r2
 80017ac:	fab2 f282 	clz	r2, r2
 80017b0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80017b4:	40d3      	lsrs	r3, r2
 80017b6:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80017b8:	5cd3      	ldrb	r3, [r2, r3]
 80017ba:	4a04      	ldr	r2, [pc, #16]	; (80017cc <HAL_RCC_GetPCLK2Freq+0x2c>)
 80017bc:	6810      	ldr	r0, [r2, #0]
} 
 80017be:	40d8      	lsrs	r0, r3
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800
 80017c8:	080064f2 	.word	0x080064f2
 80017cc:	2000000c 	.word	0x2000000c

080017d0 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80017d0:	6803      	ldr	r3, [r0, #0]
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80017d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80017d6:	f013 0601 	ands.w	r6, r3, #1
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80017da:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80017dc:	d00b      	beq.n	80017f6 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80017de:	4ab6      	ldr	r2, [pc, #728]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80017e0:	6891      	ldr	r1, [r2, #8]
 80017e2:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80017e6:	6091      	str	r1, [r2, #8]
 80017e8:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80017ea:	6891      	ldr	r1, [r2, #8]
 80017ec:	4331      	orrs	r1, r6
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tickstart = 0;
  uint32_t tmpreg0 = 0;
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
 80017ee:	fab6 f686 	clz	r6, r6
 80017f2:	0976      	lsrs	r6, r6, #5
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80017f4:	6091      	str	r1, [r2, #8]
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80017f6:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 80017fa:	d012      	beq.n	8001822 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80017fc:	49ae      	ldr	r1, [pc, #696]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80017fe:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001800:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001804:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001808:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
    {
      plli2sused = 1; 
 800180c:	bf08      	it	eq
 800180e:	2601      	moveq	r6, #1
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001810:	ea42 0205 	orr.w	r2, r2, r5
{
  uint32_t tickstart = 0;
  uint32_t tmpreg0 = 0;
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;
 8001814:	bf16      	itet	ne
 8001816:	fab5 f585 	clzne	r5, r5
 800181a:	2500      	moveq	r5, #0
 800181c:	096d      	lsrne	r5, r5, #5
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800181e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001822:	02d8      	lsls	r0, r3, #11
 8001824:	d511      	bpl.n	800184a <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001826:	48a4      	ldr	r0, [pc, #656]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001828:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800182a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800182e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001832:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001836:	ea42 0201 	orr.w	r2, r2, r1
 800183a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800183e:	d003      	beq.n	8001848 <HAL_RCCEx_PeriphCLKConfig+0x78>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 8001840:	2900      	cmp	r1, #0
 8001842:	bf08      	it	eq
 8001844:	2501      	moveq	r5, #1
 8001846:	e000      	b.n	800184a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1; 
 8001848:	2601      	movs	r6, #1
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {    
      plli2sused = 1; 
 800184a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800184e:	bf18      	it	ne
 8001850:	2601      	movne	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001852:	0699      	lsls	r1, r3, #26
 8001854:	d55d      	bpl.n	8001912 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001856:	4b98      	ldr	r3, [pc, #608]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001858:	4f98      	ldr	r7, [pc, #608]	; (8001abc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800185a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800185c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001860:	641a      	str	r2, [r3, #64]	; 0x40
 8001862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001872:	603b      	str	r3, [r7, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001874:	f7fe fd76 	bl	8000364 <HAL_GetTick>
 8001878:	4680      	mov	r8, r0
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	05da      	lsls	r2, r3, #23
 800187e:	d407      	bmi.n	8001890 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001880:	f7fe fd70 	bl	8000364 <HAL_GetTick>
 8001884:	ebc8 0000 	rsb	r0, r8, r0
 8001888:	2864      	cmp	r0, #100	; 0x64
 800188a:	d9f6      	bls.n	800187a <HAL_RCCEx_PeriphCLKConfig+0xaa>
      {
        return HAL_TIMEOUT;
 800188c:	2003      	movs	r0, #3
 800188e:	e340      	b.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x742>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001890:	4f89      	ldr	r7, [pc, #548]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001892:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001894:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001898:	d10f      	bne.n	80018ba <HAL_RCCEx_PeriphCLKConfig+0xea>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800189a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800189c:	f402 7340 	and.w	r3, r2, #768	; 0x300
 80018a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80018a4:	4b84      	ldr	r3, [pc, #528]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80018a6:	d12b      	bne.n	8001900 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80018a8:	6899      	ldr	r1, [r3, #8]
 80018aa:	f421 10f8 	bic.w	r0, r1, #2031616	; 0x1f0000
 80018ae:	f022 4170 	bic.w	r1, r2, #4026531840	; 0xf0000000
 80018b2:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80018b6:	4301      	orrs	r1, r0
 80018b8:	e025      	b.n	8001906 <HAL_RCCEx_PeriphCLKConfig+0x136>
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018ba:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80018bc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d0ea      	beq.n	800189a <HAL_RCCEx_PeriphCLKConfig+0xca>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80018c6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80018cc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80018d0:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80018d2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80018d4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80018d8:	673a      	str	r2, [r7, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80018da:	673b      	str	r3, [r7, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80018dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018de:	07db      	lsls	r3, r3, #31
 80018e0:	d5db      	bpl.n	800189a <HAL_RCCEx_PeriphCLKConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e2:	f7fe fd3f 	bl	8000364 <HAL_GetTick>
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e6:	f241 3988 	movw	r9, #5000	; 0x1388

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ea:	4680      	mov	r8, r0
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018ee:	0798      	lsls	r0, r3, #30
 80018f0:	d4d3      	bmi.n	800189a <HAL_RCCEx_PeriphCLKConfig+0xca>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f2:	f7fe fd37 	bl	8000364 <HAL_GetTick>
 80018f6:	ebc8 0000 	rsb	r0, r8, r0
 80018fa:	4548      	cmp	r0, r9
 80018fc:	d9f6      	bls.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80018fe:	e7c5      	b.n	800188c <HAL_RCCEx_PeriphCLKConfig+0xbc>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001900:	6899      	ldr	r1, [r3, #8]
 8001902:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001906:	6099      	str	r1, [r3, #8]
 8001908:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800190c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800190e:	430a      	orrs	r2, r1
 8001910:	671a      	str	r2, [r3, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001912:	6823      	ldr	r3, [r4, #0]
 8001914:	06d9      	lsls	r1, r3, #27
 8001916:	d50c      	bpl.n	8001932 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001918:	4a67      	ldr	r2, [pc, #412]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800191a:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800191e:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001922:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001926:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 800192a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800192c:	4301      	orrs	r1, r0
 800192e:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001932:	045a      	lsls	r2, r3, #17
 8001934:	d508      	bpl.n	8001948 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001936:	4860      	ldr	r0, [pc, #384]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001938:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800193c:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8001940:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001942:	430a      	orrs	r2, r1
 8001944:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001948:	041f      	lsls	r7, r3, #16
 800194a:	d508      	bpl.n	800195e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800194c:	485a      	ldr	r0, [pc, #360]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800194e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001952:	f422 2140 	bic.w	r1, r2, #786432	; 0xc0000
 8001956:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8001958:	430a      	orrs	r2, r1
 800195a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800195e:	03d8      	lsls	r0, r3, #15
 8001960:	d508      	bpl.n	8001974 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001962:	4855      	ldr	r0, [pc, #340]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001964:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001968:	f422 1140 	bic.w	r1, r2, #3145728	; 0x300000
 800196c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800196e:	430a      	orrs	r2, r1
 8001970:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001974:	0399      	lsls	r1, r3, #14
 8001976:	d508      	bpl.n	800198a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001978:	484f      	ldr	r0, [pc, #316]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800197a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800197e:	f422 0140 	bic.w	r1, r2, #12582912	; 0xc00000
 8001982:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8001984:	430a      	orrs	r2, r1
 8001986:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800198a:	065a      	lsls	r2, r3, #25
 800198c:	d508      	bpl.n	80019a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800198e:	484a      	ldr	r0, [pc, #296]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001990:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001994:	f022 0103 	bic.w	r1, r2, #3
 8001998:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800199a:	430a      	orrs	r2, r1
 800199c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80019a0:	061f      	lsls	r7, r3, #24
 80019a2:	d508      	bpl.n	80019b6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80019a4:	4844      	ldr	r0, [pc, #272]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80019a6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80019aa:	f022 010c 	bic.w	r1, r2, #12
 80019ae:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80019b0:	430a      	orrs	r2, r1
 80019b2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80019b6:	05d8      	lsls	r0, r3, #23
 80019b8:	d508      	bpl.n	80019cc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80019ba:	483f      	ldr	r0, [pc, #252]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80019bc:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80019c0:	f022 0130 	bic.w	r1, r2, #48	; 0x30
 80019c4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80019c6:	430a      	orrs	r2, r1
 80019c8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80019cc:	0599      	lsls	r1, r3, #22
 80019ce:	d508      	bpl.n	80019e2 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80019d0:	4839      	ldr	r0, [pc, #228]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80019d2:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80019d6:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 80019da:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80019dc:	430a      	orrs	r2, r1
 80019de:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80019e2:	055a      	lsls	r2, r3, #21
 80019e4:	d508      	bpl.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80019e6:	4834      	ldr	r0, [pc, #208]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80019e8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80019ec:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 80019f0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80019f2:	430a      	orrs	r2, r1
 80019f4:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80019f8:	051f      	lsls	r7, r3, #20
 80019fa:	d508      	bpl.n	8001a0e <HAL_RCCEx_PeriphCLKConfig+0x23e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80019fc:	482e      	ldr	r0, [pc, #184]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80019fe:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001a02:	f422 6140 	bic.w	r1, r2, #3072	; 0xc00
 8001a06:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001a0e:	04d8      	lsls	r0, r3, #19
 8001a10:	d508      	bpl.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001a12:	4829      	ldr	r0, [pc, #164]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001a14:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001a18:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8001a1c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001a24:	0499      	lsls	r1, r3, #18
 8001a26:	d508      	bpl.n	8001a3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001a28:	4823      	ldr	r0, [pc, #140]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001a2a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001a2e:	f422 4140 	bic.w	r1, r2, #49152	; 0xc000
 8001a32:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001a34:	430a      	orrs	r2, r1
 8001a36:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001a3a:	025a      	lsls	r2, r3, #9
 8001a3c:	d508      	bpl.n	8001a50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001a3e:	481e      	ldr	r0, [pc, #120]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001a40:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001a44:	f022 6180 	bic.w	r1, r2, #67108864	; 0x4000000
 8001a48:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001a50:	029f      	lsls	r7, r3, #10
 8001a52:	d50c      	bpl.n	8001a6e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001a54:	4818      	ldr	r0, [pc, #96]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001a56:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001a58:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 8001a5c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001a60:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 8001a64:	bf08      	it	eq
 8001a66:	2501      	moveq	r5, #1
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1; 
 8001a6e:	f013 0f08 	tst.w	r3, #8
 8001a72:	bf18      	it	ne
 8001a74:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001a76:	0358      	lsls	r0, r3, #13
 8001a78:	d508      	bpl.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001a7a:	480f      	ldr	r0, [pc, #60]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001a7c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001a80:	f022 7140 	bic.w	r1, r2, #50331648	; 0x3000000
 8001a84:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8001a86:	430a      	orrs	r2, r1
 8001a88:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001a8c:	0219      	lsls	r1, r3, #8
 8001a8e:	d509      	bpl.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001a90:	4809      	ldr	r0, [pc, #36]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001a92:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001a96:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8001a9a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001aa4:	2e01      	cmp	r6, #1
 8001aa6:	d00b      	beq.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8001aa8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001aac:	d008      	beq.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001aae:	2d01      	cmp	r5, #1
 8001ab0:	f040 818c 	bne.w	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8001ab4:	e123      	b.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x52e>
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40007000 	.word	0x40007000
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();  
 8001ac0:	4ec8      	ldr	r6, [pc, #800]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8001ac2:	6833      	ldr	r3, [r6, #0]
 8001ac4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001ac8:	6033      	str	r3, [r6, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001aca:	f7fe fc4b 	bl	8000364 <HAL_GetTick>
 8001ace:	4607      	mov	r7, r0
    
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ad0:	6833      	ldr	r3, [r6, #0]
 8001ad2:	f8df e310 	ldr.w	lr, [pc, #784]	; 8001de4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8001ad6:	011a      	lsls	r2, r3, #4
 8001ad8:	d505      	bpl.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001ada:	f7fe fc43 	bl	8000364 <HAL_GetTick>
 8001ade:	1bc0      	subs	r0, r0, r7
 8001ae0:	2864      	cmp	r0, #100	; 0x64
 8001ae2:	d9f5      	bls.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8001ae4:	e6d2      	b.n	800188c <HAL_RCCEx_PeriphCLKConfig+0xbc>
    
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001ae6:	6827      	ldr	r7, [r4, #0]
 8001ae8:	07fb      	lsls	r3, r7, #31
 8001aea:	d53c      	bpl.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x396>
 8001aec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001aee:	bbd3      	cbnz	r3, 8001b66 <HAL_RCCEx_PeriphCLKConfig+0x396>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8001af0:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 8001af4:	f44f 3840 	mov.w	r8, #196608	; 0x30000
 8001af8:	fa98 f9a8 	rbit	r9, r8
 8001afc:	f04f 6670 	mov.w	r6, #251658240	; 0xf000000
 8001b00:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8001b04:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 8001b08:	fa96 fca6 	rbit	ip, r6
 8001b0c:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 8001b10:	fabc fc8c 	clz	ip, ip
 8001b14:	fa9a faaa 	rbit	sl, sl
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001b18:	faba fa8a 	clz	sl, sl
 8001b1c:	fa98 f8a8 	rbit	r8, r8
 8001b20:	fab8 f888 	clz	r8, r8
 8001b24:	fa96 f6a6 	rbit	r6, r6
 8001b28:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8001b2c:	fab6 f686 	clz	r6, r6
 8001b30:	fa93 f3a3 	rbit	r3, r3
 8001b34:	fab3 fb83 	clz	fp, r3
 8001b38:	6861      	ldr	r1, [r4, #4]
 8001b3a:	68a3      	ldr	r3, [r4, #8]
 8001b3c:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8001b40:	fa01 f10a 	lsl.w	r1, r1, sl
 8001b44:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001b48:	fa03 f30b 	lsl.w	r3, r3, fp
 8001b4c:	fa20 f009 	lsr.w	r0, r0, r9
 8001b50:	fa22 f20c 	lsr.w	r2, r2, ip
 8001b54:	430b      	orrs	r3, r1
 8001b56:	fa00 f108 	lsl.w	r1, r0, r8
 8001b5a:	4319      	orrs	r1, r3
 8001b5c:	fa02 f306 	lsl.w	r3, r2, r6
 8001b60:	430b      	orrs	r3, r1
 8001b62:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
    }
        
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001b66:	033e      	lsls	r6, r7, #12
 8001b68:	d503      	bpl.n	8001b72 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8001b6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b70:	d005      	beq.n	8001b7e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8001b72:	02f8      	lsls	r0, r7, #11
 8001b74:	d549      	bpl.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8001b76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b7c:	d145      	bne.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8001b7e:	f8df e264 	ldr.w	lr, [pc, #612]	; 8001de4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8001b82:	f44f 3840 	mov.w	r8, #196608	; 0x30000
 8001b86:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 8001b8a:	fa98 f9a8 	rbit	r9, r8
 8001b8e:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8001b92:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8001b96:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 8001b9a:	fa96 fca6 	rbit	ip, r6
 8001b9e:	f647 7bc0 	movw	fp, #32704	; 0x7fc0
 8001ba2:	fabc fc8c 	clz	ip, ip
 8001ba6:	fa9b fbab 	rbit	fp, fp
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001baa:	fabb fb8b 	clz	fp, fp
 8001bae:	fa98 f8a8 	rbit	r8, r8
 8001bb2:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8001bb6:	fab8 f888 	clz	r8, r8
 8001bba:	fa93 f3a3 	rbit	r3, r3
 8001bbe:	fab3 fa83 	clz	sl, r3
 8001bc2:	fa96 f6a6 	rbit	r6, r6
 8001bc6:	6863      	ldr	r3, [r4, #4]
 8001bc8:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8001bcc:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8001bd0:	fab6 f686 	clz	r6, r6
 8001bd4:	fa03 f10b 	lsl.w	r1, r3, fp
 8001bd8:	68e3      	ldr	r3, [r4, #12]
 8001bda:	fa20 f009 	lsr.w	r0, r0, r9
 8001bde:	fa22 f20c 	lsr.w	r2, r2, ip
 8001be2:	fa03 f30a 	lsl.w	r3, r3, sl
 8001be6:	430b      	orrs	r3, r1
 8001be8:	fa00 f108 	lsl.w	r1, r0, r8
 8001bec:	4319      	orrs	r1, r3
 8001bee:	fa02 f306 	lsl.w	r3, r2, r6
 8001bf2:	430b      	orrs	r3, r1
 8001bf4:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8001bf8:	f8de 308c 	ldr.w	r3, [lr, #140]	; 0x8c
 8001bfc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001bfe:	f023 031f 	bic.w	r3, r3, #31
 8001c02:	3a01      	subs	r2, #1
 8001c04:	4313      	orrs	r3, r2
 8001c06:	f8ce 308c 	str.w	r3, [lr, #140]	; 0x8c
    }          

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c0a:	01f9      	lsls	r1, r7, #7
 8001c0c:	d53c      	bpl.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8001c0e:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8001de4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8001c12:	f04f 6870 	mov.w	r8, #251658240	; 0xf000000
 8001c16:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 8001c1a:	fa98 f9a8 	rbit	r9, r8
 8001c1e:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8001c22:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8001c26:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 8001c2a:	fa96 fca6 	rbit	ip, r6
 8001c2e:	f647 7bc0 	movw	fp, #32704	; 0x7fc0
 8001c32:	fabc fc8c 	clz	ip, ip
 8001c36:	fa9b fbab 	rbit	fp, fp
 8001c3a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001c3e:	fabb fb8b 	clz	fp, fp
 8001c42:	fa93 f3a3 	rbit	r3, r3
 8001c46:	fab3 fa83 	clz	sl, r3
 8001c4a:	fa98 f8a8 	rbit	r8, r8
 8001c4e:	fab8 f888 	clz	r8, r8
 8001c52:	fa96 f6a6 	rbit	r6, r6
 8001c56:	6863      	ldr	r3, [r4, #4]
 8001c58:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8001c5c:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8001c60:	fab6 f686 	clz	r6, r6
 8001c64:	fa03 f10b 	lsl.w	r1, r3, fp
 8001c68:	6923      	ldr	r3, [r4, #16]
 8001c6a:	fa20 f009 	lsr.w	r0, r0, r9
 8001c6e:	fa22 f20c 	lsr.w	r2, r2, ip
 8001c72:	fa03 f30a 	lsl.w	r3, r3, sl
 8001c76:	430b      	orrs	r3, r1
 8001c78:	fa00 f108 	lsl.w	r1, r0, r8
 8001c7c:	4319      	orrs	r1, r3
 8001c7e:	fa02 f306 	lsl.w	r3, r2, r6
 8001c82:	430b      	orrs	r3, r1
 8001c84:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
    }  
         
    /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001c88:	01ba      	lsls	r2, r7, #6
 8001c8a:	d526      	bpl.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8001c8c:	f647 7ec0 	movw	lr, #32704	; 0x7fc0
 8001c90:	fa9e feae 	rbit	lr, lr
 8001c94:	f44f 3040 	mov.w	r0, #196608	; 0x30000
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c98:	fabe fe8e 	clz	lr, lr
 8001c9c:	fa90 f0a0 	rbit	r0, r0
 8001ca0:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8001ca4:	fab0 f780 	clz	r7, r0
 8001ca8:	fa92 f2a2 	rbit	r2, r2
 8001cac:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8001cb0:	fab2 f682 	clz	r6, r2
 8001cb4:	fa93 f3a3 	rbit	r3, r3
 8001cb8:	fab3 f183 	clz	r1, r3
 8001cbc:	6920      	ldr	r0, [r4, #16]
 8001cbe:	6863      	ldr	r3, [r4, #4]
 8001cc0:	68e2      	ldr	r2, [r4, #12]
 8001cc2:	40b8      	lsls	r0, r7
 8001cc4:	fa03 f30e 	lsl.w	r3, r3, lr
 8001cc8:	40b2      	lsls	r2, r6
 8001cca:	4303      	orrs	r3, r0
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	68a3      	ldr	r3, [r4, #8]
 8001cd0:	408b      	lsls	r3, r1
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	4a43      	ldr	r2, [pc, #268]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8001cd6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    } 
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001cda:	4e42      	ldr	r6, [pc, #264]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8001cdc:	6833      	ldr	r3, [r6, #0]
 8001cde:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ce2:	6033      	str	r3, [r6, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ce4:	f7fe fb3e 	bl	8000364 <HAL_GetTick>
 8001ce8:	4607      	mov	r7, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001cea:	6833      	ldr	r3, [r6, #0]
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	f53f aede 	bmi.w	8001aae <HAL_RCCEx_PeriphCLKConfig+0x2de>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001cf2:	f7fe fb37 	bl	8000364 <HAL_GetTick>
 8001cf6:	1bc0      	subs	r0, r0, r7
 8001cf8:	2864      	cmp	r0, #100	; 0x64
 8001cfa:	d9f6      	bls.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8001cfc:	e5c6      	b.n	800188c <HAL_RCCEx_PeriphCLKConfig+0xbc>
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8001cfe:	4d39      	ldr	r5, [pc, #228]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8001d00:	682b      	ldr	r3, [r5, #0]
 8001d02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d06:	602b      	str	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d08:	f7fe fb2c 	bl	8000364 <HAL_GetTick>
 8001d0c:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001d0e:	682b      	ldr	r3, [r5, #0]
 8001d10:	009f      	lsls	r7, r3, #2
 8001d12:	d45d      	bmi.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x600>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001d14:	6825      	ldr	r5, [r4, #0]
 8001d16:	032e      	lsls	r6, r5, #12
 8001d18:	d460      	bmi.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8001d1a:	02e8      	lsls	r0, r5, #11
 8001d1c:	d464      	bmi.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x618>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001d1e:	02a9      	lsls	r1, r5, #10
 8001d20:	f100 80ad 	bmi.w	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001d24:	072a      	lsls	r2, r5, #28
 8001d26:	d545      	bpl.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8001d28:	4f2e      	ldr	r7, [pc, #184]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8001d2a:	f04f 6570 	mov.w	r5, #251658240	; 0xf000000
 8001d2e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001d32:	fa95 fca5 	rbit	ip, r5
 8001d36:	f44f 3640 	mov.w	r6, #196608	; 0x30000
 8001d3a:	fabc fc8c 	clz	ip, ip
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8001d3e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001d42:	fa96 f8a6 	rbit	r8, r6
 8001d46:	f647 79c0 	movw	r9, #32704	; 0x7fc0
 8001d4a:	fab8 f888 	clz	r8, r8
 8001d4e:	fa99 f9a9 	rbit	r9, r9
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001d52:	fab9 f989 	clz	r9, r9
 8001d56:	fa96 f6a6 	rbit	r6, r6
 8001d5a:	fab6 f686 	clz	r6, r6
 8001d5e:	fa95 f5a5 	rbit	r5, r5
 8001d62:	f04f 4ee0 	mov.w	lr, #1879048192	; 0x70000000
 8001d66:	fab5 f585 	clz	r5, r5
 8001d6a:	fa9e feae 	rbit	lr, lr
 8001d6e:	6963      	ldr	r3, [r4, #20]
 8001d70:	fabe fe8e 	clz	lr, lr
 8001d74:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8001d78:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001d7c:	fa03 f109 	lsl.w	r1, r3, r9
 8001d80:	69e3      	ldr	r3, [r4, #28]
 8001d82:	fa20 f008 	lsr.w	r0, r0, r8
 8001d86:	fa22 f20c 	lsr.w	r2, r2, ip
 8001d8a:	fa03 fe0e 	lsl.w	lr, r3, lr
 8001d8e:	fa02 f305 	lsl.w	r3, r2, r5
 8001d92:	ea41 0e0e 	orr.w	lr, r1, lr
 8001d96:	fa00 f106 	lsl.w	r1, r0, r6
 8001d9a:	ea4e 0101 	orr.w	r1, lr, r1
 8001d9e:	430b      	orrs	r3, r1
 8001da0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001da4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001da8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001dac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001dae:	4313      	orrs	r3, r2
 8001db0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001db4:	4c0b      	ldr	r4, [pc, #44]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8001db6:	6823      	ldr	r3, [r4, #0]
 8001db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dbe:	f7fe fad1 	bl	8000364 <HAL_GetTick>
 8001dc2:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001dc4:	6823      	ldr	r3, [r4, #0]
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	f140 809c 	bpl.w	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x734>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001dcc:	2000      	movs	r0, #0
 8001dce:	e0a0      	b.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x742>
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001dd0:	f7fe fac8 	bl	8000364 <HAL_GetTick>
 8001dd4:	1b80      	subs	r0, r0, r6
 8001dd6:	2864      	cmp	r0, #100	; 0x64
 8001dd8:	d999      	bls.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x53e>
 8001dda:	e557      	b.n	800188c <HAL_RCCEx_PeriphCLKConfig+0xbc>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001ddc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001dde:	b133      	cbz	r3, 8001dee <HAL_RCCEx_PeriphCLKConfig+0x61e>
 8001de0:	e79b      	b.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001de8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d197      	bne.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x54e>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8001dee:	4f4a      	ldr	r7, [pc, #296]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x748>)
 8001df0:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
 8001df4:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001df8:	fa9c f9ac 	rbit	r9, ip
 8001dfc:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8001e00:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8001e04:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001e08:	fa96 fea6 	rbit	lr, r6
 8001e0c:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 8001e10:	fabe fe8e 	clz	lr, lr
 8001e14:	fa9a faaa 	rbit	sl, sl
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001e18:	faba fa8a 	clz	sl, sl
 8001e1c:	fa9c fcac 	rbit	ip, ip
 8001e20:	f04f 6870 	mov.w	r8, #251658240	; 0xf000000
 8001e24:	fabc fc8c 	clz	ip, ip
 8001e28:	fa98 f8a8 	rbit	r8, r8
 8001e2c:	fab8 f888 	clz	r8, r8
 8001e30:	fa96 f6a6 	rbit	r6, r6
 8001e34:	69a1      	ldr	r1, [r4, #24]
 8001e36:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8001e3a:	6963      	ldr	r3, [r4, #20]
 8001e3c:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8001e40:	fa01 f808 	lsl.w	r8, r1, r8
 8001e44:	fa20 f009 	lsr.w	r0, r0, r9
 8001e48:	fa03 f30a 	lsl.w	r3, r3, sl
 8001e4c:	fa22 f20e 	lsr.w	r2, r2, lr
 8001e50:	fab6 f686 	clz	r6, r6
 8001e54:	fa00 f10c 	lsl.w	r1, r0, ip
 8001e58:	ea43 0308 	orr.w	r3, r3, r8
 8001e5c:	4319      	orrs	r1, r3
 8001e5e:	fa02 f306 	lsl.w	r3, r2, r6
 8001e62:	430b      	orrs	r3, r1
 8001e64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001e68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e6c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001e6e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001e72:	3a01      	subs	r2, #1
 8001e74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001e7c:	e74f      	b.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001e7e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001e80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e84:	f47f af4e 	bne.w	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8001e88:	4f23      	ldr	r7, [pc, #140]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x748>)
 8001e8a:	f04f 6c70 	mov.w	ip, #251658240	; 0xf000000
 8001e8e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001e92:	fa9c f9ac 	rbit	r9, ip
 8001e96:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8001e9a:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8001e9e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001ea2:	fa96 fea6 	rbit	lr, r6
 8001ea6:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 8001eaa:	fabe fe8e 	clz	lr, lr
 8001eae:	fa9a faaa 	rbit	sl, sl
 8001eb2:	f44f 3840 	mov.w	r8, #196608	; 0x30000
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001eb6:	faba fa8a 	clz	sl, sl
 8001eba:	fa98 f8a8 	rbit	r8, r8
 8001ebe:	fab8 f888 	clz	r8, r8
 8001ec2:	fa9c fcac 	rbit	ip, ip
 8001ec6:	fabc fc8c 	clz	ip, ip
 8001eca:	fa96 f6a6 	rbit	r6, r6
 8001ece:	6a21      	ldr	r1, [r4, #32]
 8001ed0:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8001ed4:	6963      	ldr	r3, [r4, #20]
 8001ed6:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8001eda:	fa01 f808 	lsl.w	r8, r1, r8
 8001ede:	fa20 f009 	lsr.w	r0, r0, r9
 8001ee2:	fa03 f30a 	lsl.w	r3, r3, sl
 8001ee6:	fab6 f686 	clz	r6, r6
 8001eea:	fa00 f10c 	lsl.w	r1, r0, ip
 8001eee:	fa22 f20e 	lsr.w	r2, r2, lr
 8001ef2:	ea43 0308 	orr.w	r3, r3, r8
 8001ef6:	4319      	orrs	r1, r3
 8001ef8:	fa02 f306 	lsl.w	r3, r2, r6
 8001efc:	430b      	orrs	r3, r1
 8001efe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001f02:	e70f      	b.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x554>
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001f04:	f7fe fa2e 	bl	8000364 <HAL_GetTick>
 8001f08:	1b40      	subs	r0, r0, r5
 8001f0a:	2864      	cmp	r0, #100	; 0x64
 8001f0c:	f67f af5a 	bls.w	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8001f10:	e4bc      	b.n	800188c <HAL_RCCEx_PeriphCLKConfig+0xbc>
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 8001f12:	b003      	add	sp, #12
 8001f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f18:	40023800 	.word	0x40023800

08001f1c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f1c:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f1e:	4604      	mov	r4, r0
 8001f20:	2800      	cmp	r0, #0
 8001f22:	d04f      	beq.n	8001fc4 <HAL_SPI_Init+0xa8>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f24:	2300      	movs	r3, #0
 8001f26:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f28:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8001f2c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f30:	b91b      	cbnz	r3, 8001f3a <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f32:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f36:	f003 fac1 	bl	80054bc <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f3a:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f3c:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f3e:	68e2      	ldr	r2, [r4, #12]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f40:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f44:	680b      	ldr	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f46:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f4e:	600b      	str	r3, [r1, #0]
 8001f50:	f04f 0300 	mov.w	r3, #0

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f54:	d903      	bls.n	8001f5e <HAL_SPI_Init+0x42>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001f56:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001f58:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8001f5c:	e001      	b.n	8001f62 <HAL_SPI_Init+0x46>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001f5e:	f44f 5080 	mov.w	r0, #4096	; 0x1000

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f62:	bf18      	it	ne
 8001f64:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001f66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001f68:	b92b      	cbnz	r3, 8001f76 <HAL_SPI_Init+0x5a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f6a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001f6e:	bf8c      	ite	hi
 8001f70:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001f72:	2301      	movls	r3, #1
 8001f74:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001f76:	68a5      	ldr	r5, [r4, #8]
 8001f78:	6866      	ldr	r6, [r4, #4]
 8001f7a:	69a3      	ldr	r3, [r4, #24]
 8001f7c:	432e      	orrs	r6, r5
 8001f7e:	6925      	ldr	r5, [r4, #16]
 8001f80:	432e      	orrs	r6, r5
 8001f82:	6965      	ldr	r5, [r4, #20]
 8001f84:	432e      	orrs	r6, r5
 8001f86:	69e5      	ldr	r5, [r4, #28]
 8001f88:	432e      	orrs	r6, r5
 8001f8a:	6a25      	ldr	r5, [r4, #32]
 8001f8c:	432e      	orrs	r6, r5
 8001f8e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8001f90:	432e      	orrs	r6, r5
 8001f92:	f403 7500 	and.w	r5, r3, #512	; 0x200
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001f96:	0c1b      	lsrs	r3, r3, #16
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001f98:	4335      	orrs	r5, r6
 8001f9a:	600d      	str	r5, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001f9c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001f9e:	432a      	orrs	r2, r5
 8001fa0:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001fa2:	4315      	orrs	r5, r2
 8001fa4:	f003 0204 	and.w	r2, r3, #4
 8001fa8:	ea45 0302 	orr.w	r3, r5, r2
 8001fac:	4303      	orrs	r3, r0
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fae:	2000      	movs	r0, #0
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001fb0:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fb2:	69cb      	ldr	r3, [r1, #28]
 8001fb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001fb8:	61cb      	str	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 8001fba:	2301      	movs	r3, #1
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fbc:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001fbe:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 8001fc2:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 8001fc4:	2001      	movs	r0, #1

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
}
 8001fc6:	bd70      	pop	{r4, r5, r6, pc}

08001fc8 <HAL_SPI_IRQHandler>:
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
  uint32_t itsource = hspi->Instance->CR2;
 8001fc8:	6803      	ldr	r3, [r0, #0]
 8001fca:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8001fcc:	689a      	ldr	r2, [r3, #8]
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001fce:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
  uint32_t itflag   = hspi->Instance->SR;

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8001fd0:	f002 0541 	and.w	r5, r2, #65	; 0x41
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001fd4:	b085      	sub	sp, #20
 8001fd6:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
  uint32_t itflag   = hspi->Instance->SR;

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8001fd8:	2d01      	cmp	r5, #1
 8001fda:	d103      	bne.n	8001fe4 <HAL_SPI_IRQHandler+0x1c>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8001fdc:	064d      	lsls	r5, r1, #25
 8001fde:	d501      	bpl.n	8001fe4 <HAL_SPI_IRQHandler+0x1c>
  {
    hspi->RxISR(hspi);
 8001fe0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001fe2:	e005      	b.n	8001ff0 <HAL_SPI_IRQHandler+0x28>
    return;
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8001fe4:	0795      	lsls	r5, r2, #30
 8001fe6:	d505      	bpl.n	8001ff4 <HAL_SPI_IRQHandler+0x2c>
 8001fe8:	0608      	lsls	r0, r1, #24
 8001fea:	d503      	bpl.n	8001ff4 <HAL_SPI_IRQHandler+0x2c>
  {
    hspi->TxISR(hspi);
 8001fec:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001fee:	4620      	mov	r0, r4
 8001ff0:	4798      	blx	r3
    return;
 8001ff2:	e056      	b.n	80020a2 <HAL_SPI_IRQHandler+0xda>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8001ff4:	f412 7fb0 	tst.w	r2, #352	; 0x160
 8001ff8:	d053      	beq.n	80020a2 <HAL_SPI_IRQHandler+0xda>
 8001ffa:	068d      	lsls	r5, r1, #26
 8001ffc:	d551      	bpl.n	80020a2 <HAL_SPI_IRQHandler+0xda>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((itflag & SPI_FLAG_OVR) != RESET)
 8001ffe:	0650      	lsls	r0, r2, #25
 8002000:	d516      	bpl.n	8002030 <HAL_SPI_IRQHandler+0x68>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002002:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8002006:	2500      	movs	r5, #0
 8002008:	2803      	cmp	r0, #3
 800200a:	d00a      	beq.n	8002022 <HAL_SPI_IRQHandler+0x5a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800200c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800200e:	f040 0004 	orr.w	r0, r0, #4
 8002012:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002014:	9500      	str	r5, [sp, #0]
 8002016:	68d8      	ldr	r0, [r3, #12]
 8002018:	9000      	str	r0, [sp, #0]
 800201a:	6898      	ldr	r0, [r3, #8]
 800201c:	9000      	str	r0, [sp, #0]
 800201e:	9800      	ldr	r0, [sp, #0]
 8002020:	e006      	b.n	8002030 <HAL_SPI_IRQHandler+0x68>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002022:	9501      	str	r5, [sp, #4]
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	9201      	str	r2, [sp, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	9301      	str	r3, [sp, #4]
 800202c:	9b01      	ldr	r3, [sp, #4]
        return;
 800202e:	e038      	b.n	80020a2 <HAL_SPI_IRQHandler+0xda>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((itflag & SPI_FLAG_MODF) != RESET)
 8002030:	0695      	lsls	r5, r2, #26
 8002032:	d50c      	bpl.n	800204e <HAL_SPI_IRQHandler+0x86>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002034:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002036:	f040 0001 	orr.w	r0, r0, #1
 800203a:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800203c:	2000      	movs	r0, #0
 800203e:	9002      	str	r0, [sp, #8]
 8002040:	6898      	ldr	r0, [r3, #8]
 8002042:	9002      	str	r0, [sp, #8]
 8002044:	6818      	ldr	r0, [r3, #0]
 8002046:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 800204a:	6018      	str	r0, [r3, #0]
 800204c:	9802      	ldr	r0, [sp, #8]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((itflag & SPI_FLAG_FRE) != RESET)
 800204e:	05d0      	lsls	r0, r2, #23
 8002050:	d508      	bpl.n	8002064 <HAL_SPI_IRQHandler+0x9c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002052:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002054:	f042 0208 	orr.w	r2, r2, #8
 8002058:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800205a:	2200      	movs	r2, #0
 800205c:	9203      	str	r2, [sp, #12]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	9203      	str	r2, [sp, #12]
 8002062:	9a03      	ldr	r2, [sp, #12]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002064:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002066:	b1e2      	cbz	r2, 80020a2 <HAL_SPI_IRQHandler+0xda>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800206e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002070:	2201      	movs	r2, #1
 8002072:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002076:	078a      	lsls	r2, r1, #30
 8002078:	d010      	beq.n	800209c <HAL_SPI_IRQHandler+0xd4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800207a:	685a      	ldr	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800207c:	6da0      	ldr	r0, [r4, #88]	; 0x58

      hspi->State = HAL_SPI_STATE_READY;
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800207e:	f022 0203 	bic.w	r2, r2, #3
 8002082:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002084:	b118      	cbz	r0, 800208e <HAL_SPI_IRQHandler+0xc6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002086:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <HAL_SPI_IRQHandler+0xe0>)
 8002088:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 800208a:	f7fe fd45 	bl	8000b18 <HAL_DMA_Abort_IT>
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800208e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002090:	b138      	cbz	r0, 80020a2 <HAL_SPI_IRQHandler+0xda>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002092:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <HAL_SPI_IRQHandler+0xe0>)
 8002094:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8002096:	f7fe fd3f 	bl	8000b18 <HAL_DMA_Abort_IT>
 800209a:	e002      	b.n	80020a2 <HAL_SPI_IRQHandler+0xda>
        }
      }
      else
      {
        /* Call user error callback */
        HAL_SPI_ErrorCallback(hspi);
 800209c:	4620      	mov	r0, r4
 800209e:	f001 fc17 	bl	80038d0 <HAL_SPI_ErrorCallback>
      }
    }
    return;
  }
}
 80020a2:	b005      	add	sp, #20
 80020a4:	bd30      	pop	{r4, r5, pc}
 80020a6:	bf00      	nop
 80020a8:	080020ad 	.word	0x080020ad

080020ac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80020ac:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020ae:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80020b6:	87c3      	strh	r3, [r0, #62]	; 0x3e

  HAL_SPI_ErrorCallback(hspi);
 80020b8:	f001 fc0a 	bl	80038d0 <HAL_SPI_ErrorCallback>
 80020bc:	bd08      	pop	{r3, pc}

080020be <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020be:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
  
  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80020c0:	b151      	cbz	r1, 80020d8 <HAL_TIM_Encoder_Start_IT+0x1a>
 80020c2:	2904      	cmp	r1, #4
 80020c4:	d114      	bne.n	80020f0 <HAL_TIM_Encoder_Start_IT+0x32>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80020c6:	6a1a      	ldr	r2, [r3, #32]
 80020c8:	f022 0210 	bic.w	r2, r2, #16
 80020cc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80020ce:	6a1a      	ldr	r2, [r3, #32]
 80020d0:	f042 0210 	orr.w	r2, r2, #16
 80020d4:	621a      	str	r2, [r3, #32]
 80020d6:	e01f      	b.n	8002118 <HAL_TIM_Encoder_Start_IT+0x5a>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80020d8:	6a1a      	ldr	r2, [r3, #32]
 80020da:	f022 0201 	bic.w	r2, r2, #1
 80020de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80020e0:	6a1a      	ldr	r2, [r3, #32]
 80020e2:	f042 0201 	orr.w	r2, r2, #1
 80020e6:	621a      	str	r2, [r3, #32]
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80020e8:	68da      	ldr	r2, [r3, #12]
 80020ea:	f042 0202 	orr.w	r2, r2, #2
 80020ee:	e016      	b.n	800211e <HAL_TIM_Encoder_Start_IT+0x60>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80020f0:	6a1a      	ldr	r2, [r3, #32]
 80020f2:	f022 0201 	bic.w	r2, r2, #1
 80020f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80020f8:	6a1a      	ldr	r2, [r3, #32]
 80020fa:	f042 0201 	orr.w	r2, r2, #1
 80020fe:	621a      	str	r2, [r3, #32]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002100:	6a1a      	ldr	r2, [r3, #32]
 8002102:	f022 0210 	bic.w	r2, r2, #16
 8002106:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002108:	6a1a      	ldr	r2, [r3, #32]
 800210a:	f042 0210 	orr.w	r2, r2, #16
 800210e:	621a      	str	r2, [r3, #32]
    }  
    default :
    {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	f042 0202 	orr.w	r2, r2, #2
 8002116:	60da      	str	r2, [r3, #12]
     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	f042 0204 	orr.w	r2, r2, #4
 800211e:	60da      	str	r2, [r3, #12]
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
  
  /* Return function status */
  return HAL_OK;
}
 8002120:	2000      	movs	r0, #0
     break; 
    }
  }
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	f042 0201 	orr.w	r2, r2, #1
 8002128:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
}
 800212a:	4770      	bx	lr

0800212c <HAL_TIM_PeriodElapsedCallback>:
 800212c:	4770      	bx	lr

0800212e <HAL_TIM_OC_DelayElapsedCallback>:
 800212e:	4770      	bx	lr

08002130 <HAL_TIM_IC_CaptureCallback>:
 8002130:	4770      	bx	lr

08002132 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002132:	4770      	bx	lr

08002134 <HAL_TIM_TriggerCallback>:
 8002134:	4770      	bx	lr

08002136 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002136:	6803      	ldr	r3, [r0, #0]
 8002138:	691a      	ldr	r2, [r3, #16]
 800213a:	0791      	lsls	r1, r2, #30
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800213c:	b510      	push	{r4, lr}
 800213e:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002140:	d514      	bpl.n	800216c <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	0792      	lsls	r2, r2, #30
 8002146:	d511      	bpl.n	800216c <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002148:	f06f 0202 	mvn.w	r2, #2
 800214c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800214e:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002150:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002152:	7602      	strb	r2, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002154:	0799      	lsls	r1, r3, #30
 8002156:	d002      	beq.n	800215e <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8002158:	f7ff ffea 	bl	8002130 <HAL_TIM_IC_CaptureCallback>
 800215c:	e004      	b.n	8002168 <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800215e:	f7ff ffe6 	bl	800212e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002162:	4620      	mov	r0, r4
 8002164:	f7ff ffe5 	bl	8002132 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002168:	2300      	movs	r3, #0
 800216a:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800216c:	6823      	ldr	r3, [r4, #0]
 800216e:	691a      	ldr	r2, [r3, #16]
 8002170:	0752      	lsls	r2, r2, #29
 8002172:	d516      	bpl.n	80021a2 <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002174:	68da      	ldr	r2, [r3, #12]
 8002176:	0750      	lsls	r0, r2, #29
 8002178:	d513      	bpl.n	80021a2 <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800217a:	f06f 0204 	mvn.w	r2, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800217e:	4620      	mov	r0, r4
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002182:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002184:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002186:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002188:	f413 7f40 	tst.w	r3, #768	; 0x300
 800218c:	d002      	beq.n	8002194 <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800218e:	f7ff ffcf 	bl	8002130 <HAL_TIM_IC_CaptureCallback>
 8002192:	e004      	b.n	800219e <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002194:	f7ff ffcb 	bl	800212e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002198:	4620      	mov	r0, r4
 800219a:	f7ff ffca 	bl	8002132 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800219e:	2300      	movs	r3, #0
 80021a0:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021a2:	6823      	ldr	r3, [r4, #0]
 80021a4:	691a      	ldr	r2, [r3, #16]
 80021a6:	0711      	lsls	r1, r2, #28
 80021a8:	d515      	bpl.n	80021d6 <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	0712      	lsls	r2, r2, #28
 80021ae:	d512      	bpl.n	80021d6 <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021b0:	f06f 0208 	mvn.w	r2, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80021b4:	4620      	mov	r0, r4
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021b8:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80021ba:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021bc:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80021be:	079b      	lsls	r3, r3, #30
 80021c0:	d002      	beq.n	80021c8 <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80021c2:	f7ff ffb5 	bl	8002130 <HAL_TIM_IC_CaptureCallback>
 80021c6:	e004      	b.n	80021d2 <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021c8:	f7ff ffb1 	bl	800212e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80021cc:	4620      	mov	r0, r4
 80021ce:	f7ff ffb0 	bl	8002132 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021d2:	2300      	movs	r3, #0
 80021d4:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021d6:	6823      	ldr	r3, [r4, #0]
 80021d8:	691a      	ldr	r2, [r3, #16]
 80021da:	06d0      	lsls	r0, r2, #27
 80021dc:	d516      	bpl.n	800220c <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	06d1      	lsls	r1, r2, #27
 80021e2:	d513      	bpl.n	800220c <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021e4:	f06f 0210 	mvn.w	r2, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80021e8:	4620      	mov	r0, r4
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021ec:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80021ee:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021f0:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80021f2:	f413 7f40 	tst.w	r3, #768	; 0x300
 80021f6:	d002      	beq.n	80021fe <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80021f8:	f7ff ff9a 	bl	8002130 <HAL_TIM_IC_CaptureCallback>
 80021fc:	e004      	b.n	8002208 <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021fe:	f7ff ff96 	bl	800212e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002202:	4620      	mov	r0, r4
 8002204:	f7ff ff95 	bl	8002132 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002208:	2300      	movs	r3, #0
 800220a:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800220c:	6823      	ldr	r3, [r4, #0]
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	07d2      	lsls	r2, r2, #31
 8002212:	d508      	bpl.n	8002226 <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002214:	68da      	ldr	r2, [r3, #12]
 8002216:	07d0      	lsls	r0, r2, #31
 8002218:	d505      	bpl.n	8002226 <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800221a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800221e:	4620      	mov	r0, r4
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002220:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002222:	f7ff ff83 	bl	800212c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002226:	6823      	ldr	r3, [r4, #0]
 8002228:	691a      	ldr	r2, [r3, #16]
 800222a:	0611      	lsls	r1, r2, #24
 800222c:	d508      	bpl.n	8002240 <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	0612      	lsls	r2, r2, #24
 8002232:	d505      	bpl.n	8002240 <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002234:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002238:	4620      	mov	r0, r4
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800223a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800223c:	f000 fad7 	bl	80027ee <HAL_TIMEx_BreakCallback>
    }
  }
  
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002240:	6823      	ldr	r3, [r4, #0]
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	05d0      	lsls	r0, r2, #23
 8002246:	d508      	bpl.n	800225a <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	0611      	lsls	r1, r2, #24
 800224c:	d505      	bpl.n	800225a <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800224e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002252:	4620      	mov	r0, r4
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002254:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002256:	f000 faca 	bl	80027ee <HAL_TIMEx_BreakCallback>
    }
  }

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800225a:	6823      	ldr	r3, [r4, #0]
 800225c:	691a      	ldr	r2, [r3, #16]
 800225e:	0652      	lsls	r2, r2, #25
 8002260:	d508      	bpl.n	8002274 <HAL_TIM_IRQHandler+0x13e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002262:	68da      	ldr	r2, [r3, #12]
 8002264:	0650      	lsls	r0, r2, #25
 8002266:	d505      	bpl.n	8002274 <HAL_TIM_IRQHandler+0x13e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002268:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800226c:	4620      	mov	r0, r4
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800226e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002270:	f7ff ff60 	bl	8002134 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002274:	6823      	ldr	r3, [r4, #0]
 8002276:	691a      	ldr	r2, [r3, #16]
 8002278:	0691      	lsls	r1, r2, #26
 800227a:	d50a      	bpl.n	8002292 <HAL_TIM_IRQHandler+0x15c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	0692      	lsls	r2, r2, #26
 8002280:	d507      	bpl.n	8002292 <HAL_TIM_IRQHandler+0x15c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002282:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002286:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002288:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 800228a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 800228e:	f000 baad 	b.w	80027ec <HAL_TIMEx_CommutationCallback>
 8002292:	bd10      	pop	{r4, pc}

08002294 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002294:	4a2e      	ldr	r2, [pc, #184]	; (8002350 <TIM_Base_SetConfig+0xbc>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8002296:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002298:	4290      	cmp	r0, r2
 800229a:	d012      	beq.n	80022c2 <TIM_Base_SetConfig+0x2e>
 800229c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80022a0:	d00f      	beq.n	80022c2 <TIM_Base_SetConfig+0x2e>
 80022a2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80022a6:	4290      	cmp	r0, r2
 80022a8:	d00b      	beq.n	80022c2 <TIM_Base_SetConfig+0x2e>
 80022aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022ae:	4290      	cmp	r0, r2
 80022b0:	d007      	beq.n	80022c2 <TIM_Base_SetConfig+0x2e>
 80022b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022b6:	4290      	cmp	r0, r2
 80022b8:	d003      	beq.n	80022c2 <TIM_Base_SetConfig+0x2e>
 80022ba:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80022be:	4290      	cmp	r0, r2
 80022c0:	d118      	bne.n	80022f4 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80022c2:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80022c8:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80022ca:	4a21      	ldr	r2, [pc, #132]	; (8002350 <TIM_Base_SetConfig+0xbc>)
 80022cc:	4290      	cmp	r0, r2
 80022ce:	d037      	beq.n	8002340 <TIM_Base_SetConfig+0xac>
 80022d0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80022d4:	d034      	beq.n	8002340 <TIM_Base_SetConfig+0xac>
 80022d6:	4a1f      	ldr	r2, [pc, #124]	; (8002354 <TIM_Base_SetConfig+0xc0>)
 80022d8:	4290      	cmp	r0, r2
 80022da:	d031      	beq.n	8002340 <TIM_Base_SetConfig+0xac>
 80022dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022e0:	4290      	cmp	r0, r2
 80022e2:	d02d      	beq.n	8002340 <TIM_Base_SetConfig+0xac>
 80022e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022e8:	4290      	cmp	r0, r2
 80022ea:	d029      	beq.n	8002340 <TIM_Base_SetConfig+0xac>
 80022ec:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80022f0:	4290      	cmp	r0, r2
 80022f2:	d025      	beq.n	8002340 <TIM_Base_SetConfig+0xac>
 80022f4:	4a18      	ldr	r2, [pc, #96]	; (8002358 <TIM_Base_SetConfig+0xc4>)
 80022f6:	4290      	cmp	r0, r2
 80022f8:	d022      	beq.n	8002340 <TIM_Base_SetConfig+0xac>
 80022fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022fe:	4290      	cmp	r0, r2
 8002300:	d01e      	beq.n	8002340 <TIM_Base_SetConfig+0xac>
 8002302:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002306:	4290      	cmp	r0, r2
 8002308:	d01a      	beq.n	8002340 <TIM_Base_SetConfig+0xac>
 800230a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800230e:	4290      	cmp	r0, r2
 8002310:	d016      	beq.n	8002340 <TIM_Base_SetConfig+0xac>
 8002312:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002316:	4290      	cmp	r0, r2
 8002318:	d012      	beq.n	8002340 <TIM_Base_SetConfig+0xac>
 800231a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800231e:	4290      	cmp	r0, r2
 8002320:	d00e      	beq.n	8002340 <TIM_Base_SetConfig+0xac>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8002322:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002324:	688b      	ldr	r3, [r1, #8]
 8002326:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002328:	680b      	ldr	r3, [r1, #0]
 800232a:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800232c:	4b08      	ldr	r3, [pc, #32]	; (8002350 <TIM_Base_SetConfig+0xbc>)
 800232e:	4298      	cmp	r0, r3
 8002330:	d00b      	beq.n	800234a <TIM_Base_SetConfig+0xb6>
 8002332:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002336:	4298      	cmp	r0, r3
 8002338:	d007      	beq.n	800234a <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800233a:	2301      	movs	r3, #1
 800233c:	6143      	str	r3, [r0, #20]
}
 800233e:	4770      	bx	lr
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002344:	68ca      	ldr	r2, [r1, #12]
 8002346:	4313      	orrs	r3, r2
 8002348:	e7eb      	b.n	8002322 <TIM_Base_SetConfig+0x8e>
  TIMx->PSC = (uint32_t)Structure->Prescaler;
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800234a:	690b      	ldr	r3, [r1, #16]
 800234c:	6303      	str	r3, [r0, #48]	; 0x30
 800234e:	e7f4      	b.n	800233a <TIM_Base_SetConfig+0xa6>
 8002350:	40010000 	.word	0x40010000
 8002354:	40000400 	.word	0x40000400
 8002358:	40014000 	.word	0x40014000

0800235c <HAL_TIM_PWM_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800235c:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800235e:	4604      	mov	r4, r0
 8002360:	b1a0      	cbz	r0, 800238c <HAL_TIM_PWM_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002362:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002366:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800236a:	b91b      	cbnz	r3, 8002374 <HAL_TIM_PWM_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;  
 800236c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002370:	f003 f932 	bl	80055d8 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 8002374:	2302      	movs	r3, #2
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002376:	6820      	ldr	r0, [r4, #0]
 8002378:	1d21      	adds	r1, r4, #4
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 800237a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800237e:	f7ff ff89 	bl	8002294 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002382:	2301      	movs	r3, #1
  
  return HAL_OK;
 8002384:	2000      	movs	r0, #0
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002386:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 800238a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 800238c:	2001      	movs	r0, #1
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}  
 800238e:	bd10      	pop	{r4, pc}

08002390 <HAL_TIM_Encoder_Init>:
  *                the configuration information for TIM module.
  * @param  sConfig: TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 8002390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002392:	460c      	mov	r4, r1
  uint32_t tmpsmcr = 0;
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002394:	4605      	mov	r5, r0
 8002396:	2800      	cmp	r0, #0
 8002398:	d043      	beq.n	8002422 <HAL_TIM_Encoder_Init+0x92>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 800239a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800239e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023a2:	b91b      	cbnz	r3, 80023ac <HAL_TIM_Encoder_Init+0x1c>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;  
 80023a4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80023a8:	f003 f8b6 	bl	8005518 <HAL_TIM_Encoder_MspInit>
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80023ac:	4629      	mov	r1, r5
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 80023ae:	2302      	movs	r3, #2
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80023b0:	f851 0b04 	ldr.w	r0, [r1], #4
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 80023b4:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80023b8:	6883      	ldr	r3, [r0, #8]
 80023ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023be:	f023 0307 	bic.w	r3, r3, #7
 80023c2:	6083      	str	r3, [r0, #8]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 80023c4:	f7ff ff66 	bl	8002294 <TIM_Base_SetConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023c8:	6828      	ldr	r0, [r5, #0]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80023ca:	6823      	ldr	r3, [r4, #0]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023cc:	6887      	ldr	r7, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80023ce:	6981      	ldr	r1, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80023d0:	431f      	orrs	r7, r3
 80023d2:	69a2      	ldr	r2, [r4, #24]
 80023d4:	f421 7340 	bic.w	r3, r1, #768	; 0x300
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 80023d8:	6921      	ldr	r1, [r4, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80023da:	6a06      	ldr	r6, [r0, #32]
 80023dc:	f023 0303 	bic.w	r3, r3, #3
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 80023e0:	0109      	lsls	r1, r1, #4
 80023e2:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
 80023e6:	68a3      	ldr	r3, [r4, #8]
 80023e8:	4313      	orrs	r3, r2
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 80023ea:	69e2      	ldr	r2, [r4, #28]
 80023ec:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 80023f0:	68e2      	ldr	r2, [r4, #12]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80023f2:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 80023f6:	430a      	orrs	r2, r1
 80023f8:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80023fa:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 80023fe:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8002402:	6961      	ldr	r1, [r4, #20]
 8002404:	4313      	orrs	r3, r2
 8002406:	f026 02aa 	bic.w	r2, r6, #170	; 0xaa
 800240a:	ea42 1201 	orr.w	r2, r2, r1, lsl #4

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 800240e:	6861      	ldr	r1, [r4, #4]
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002410:	6087      	str	r7, [r0, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 8002412:	430a      	orrs	r2, r1
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002414:	6183      	str	r3, [r0, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002416:	2301      	movs	r3, #1

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002418:	6202      	str	r2, [r0, #32]
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
 800241a:	2000      	movs	r0, #0

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800241c:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  
  return HAL_OK;
 8002420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t tmpccer = 0;
  
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002422:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8002424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002428 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002428:	6a03      	ldr	r3, [r0, #32]
 800242a:	f023 0301 	bic.w	r3, r3, #1
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800242e:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002430:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002432:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002434:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002436:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002438:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800243a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800243e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002442:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002444:	f023 0502 	bic.w	r5, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002448:	688b      	ldr	r3, [r1, #8]
 800244a:	432b      	orrs	r3, r5

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800244c:	4d0c      	ldr	r5, [pc, #48]	; (8002480 <TIM_OC1_SetConfig+0x58>)
 800244e:	42a8      	cmp	r0, r5
 8002450:	d009      	beq.n	8002466 <TIM_OC1_SetConfig+0x3e>
 8002452:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002456:	42a8      	cmp	r0, r5
 8002458:	d005      	beq.n	8002466 <TIM_OC1_SetConfig+0x3e>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800245a:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800245c:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800245e:	6184      	str	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002460:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002462:	6203      	str	r3, [r0, #32]
} 
 8002464:	bd70      	pop	{r4, r5, r6, pc}
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002466:	68cd      	ldr	r5, [r1, #12]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002468:	f023 0308 	bic.w	r3, r3, #8
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800246c:	694e      	ldr	r6, [r1, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800246e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002472:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002474:	698d      	ldr	r5, [r1, #24]
 8002476:	4335      	orrs	r5, r6
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002478:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800247c:	432a      	orrs	r2, r5
 800247e:	e7ec      	b.n	800245a <TIM_OC1_SetConfig+0x32>
 8002480:	40010000 	.word	0x40010000

08002484 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002484:	6a03      	ldr	r3, [r0, #32]
 8002486:	f023 0310 	bic.w	r3, r3, #16
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800248a:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800248c:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800248e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002490:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002492:	6984      	ldr	r4, [r0, #24]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002494:	f023 0320 	bic.w	r3, r3, #32
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002498:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800249a:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 800249e:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80024a2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 80024a6:	688d      	ldr	r5, [r1, #8]
 80024a8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80024ac:	4d0e      	ldr	r5, [pc, #56]	; (80024e8 <TIM_OC2_SetConfig+0x64>)
 80024ae:	42a8      	cmp	r0, r5
 80024b0:	d009      	beq.n	80024c6 <TIM_OC2_SetConfig+0x42>
 80024b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80024b6:	42a8      	cmp	r0, r5
 80024b8:	d005      	beq.n	80024c6 <TIM_OC2_SetConfig+0x42>
    tmpcr2 |= (OC_Config->OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024ba:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80024bc:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024be:	6184      	str	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80024c0:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024c2:	6203      	str	r3, [r0, #32]
}
 80024c4:	bd30      	pop	{r4, r5, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 80024c6:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80024c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80024cc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 80024d0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80024d4:	694d      	ldr	r5, [r1, #20]
 80024d6:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80024da:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80024dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80024e0:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 80024e4:	e7e9      	b.n	80024ba <TIM_OC2_SetConfig+0x36>
 80024e6:	bf00      	nop
 80024e8:	40010000 	.word	0x40010000

080024ec <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024ec:	6a03      	ldr	r3, [r0, #32]
 80024ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024f2:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024f4:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024f6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80024f8:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024fa:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80024fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002500:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002502:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8002506:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800250a:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 800250c:	688d      	ldr	r5, [r1, #8]
 800250e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002512:	4d0e      	ldr	r5, [pc, #56]	; (800254c <TIM_OC3_SetConfig+0x60>)
 8002514:	42a8      	cmp	r0, r5
 8002516:	d009      	beq.n	800252c <TIM_OC3_SetConfig+0x40>
 8002518:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800251c:	42a8      	cmp	r0, r5
 800251e:	d005      	beq.n	800252c <TIM_OC3_SetConfig+0x40>
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002520:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002522:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002524:	61c4      	str	r4, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002526:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002528:	6203      	str	r3, [r0, #32]
}
 800252a:	bd30      	pop	{r4, r5, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 800252c:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800252e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002532:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8002536:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 800253a:	694d      	ldr	r5, [r1, #20]
 800253c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8002540:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002542:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8002546:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 800254a:	e7e9      	b.n	8002520 <TIM_OC3_SetConfig+0x34>
 800254c:	40010000 	.word	0x40010000

08002550 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002550:	6a03      	ldr	r3, [r0, #32]
 8002552:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002556:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002558:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800255a:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800255c:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800255e:	69c3      	ldr	r3, [r0, #28]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002560:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002564:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002566:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800256a:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800256e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8002572:	688d      	ldr	r5, [r1, #8]
 8002574:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002578:	4d09      	ldr	r5, [pc, #36]	; (80025a0 <TIM_OC4_SetConfig+0x50>)
 800257a:	42a8      	cmp	r0, r5
 800257c:	d009      	beq.n	8002592 <TIM_OC4_SetConfig+0x42>
 800257e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002582:	42a8      	cmp	r0, r5
 8002584:	d005      	beq.n	8002592 <TIM_OC4_SetConfig+0x42>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002586:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8002588:	61c3      	str	r3, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800258a:	684b      	ldr	r3, [r1, #4]
 800258c:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800258e:	6204      	str	r4, [r0, #32]
}
 8002590:	bd30      	pop	{r4, r5, pc}
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002592:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8002596:	694d      	ldr	r5, [r1, #20]
 8002598:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 800259c:	e7f3      	b.n	8002586 <TIM_OC4_SetConfig+0x36>
 800259e:	bf00      	nop
 80025a0:	40010000 	.word	0x40010000

080025a4 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80025a4:	2301      	movs	r3, #1

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80025a6:	408a      	lsls	r2, r1
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80025a8:	408b      	lsls	r3, r1
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80025aa:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80025ac:	6a04      	ldr	r4, [r0, #32]
 80025ae:	ea24 0303 	bic.w	r3, r4, r3
 80025b2:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80025b4:	6a03      	ldr	r3, [r0, #32]
 80025b6:	ea42 0103 	orr.w	r1, r2, r3
 80025ba:	6201      	str	r1, [r0, #32]
 80025bc:	bd10      	pop	{r4, pc}
	...

080025c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025c0:	b510      	push	{r4, lr}
 80025c2:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025c4:	2201      	movs	r2, #1
 80025c6:	6800      	ldr	r0, [r0, #0]
 80025c8:	f7ff ffec 	bl	80025a4 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80025cc:	6823      	ldr	r3, [r4, #0]
 80025ce:	4a08      	ldr	r2, [pc, #32]	; (80025f0 <HAL_TIM_PWM_Start+0x30>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d003      	beq.n	80025dc <HAL_TIM_PWM_Start+0x1c>
 80025d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025d8:	4293      	cmp	r3, r2
 80025da:	d103      	bne.n	80025e4 <HAL_TIM_PWM_Start+0x24>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025e2:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80025e4:	681a      	ldr	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
} 
 80025e6:	2000      	movs	r0, #0
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80025e8:	f042 0201 	orr.w	r2, r2, #1
 80025ec:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
} 
 80025ee:	bd10      	pop	{r4, pc}
 80025f0:	40010000 	.word	0x40010000

080025f4 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80025f4:	6a03      	ldr	r3, [r0, #32]
 80025f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025fa:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80025fc:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025fe:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002600:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002602:	6d44      	ldr	r4, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002604:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002608:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2; 
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800260a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800260e:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002612:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8002614:	688d      	ldr	r5, [r1, #8]
 8002616:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800261a:	4d09      	ldr	r5, [pc, #36]	; (8002640 <TIM_OC5_SetConfig+0x4c>)
 800261c:	42a8      	cmp	r0, r5
 800261e:	d003      	beq.n	8002628 <TIM_OC5_SetConfig+0x34>
 8002620:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002624:	42a8      	cmp	r0, r5
 8002626:	d104      	bne.n	8002632 <TIM_OC5_SetConfig+0x3e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002628:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 800262c:	694d      	ldr	r5, [r1, #20]
 800262e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002632:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002634:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002636:	6544      	str	r4, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002638:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800263a:	6203      	str	r3, [r0, #32]
 800263c:	bd30      	pop	{r4, r5, pc}
 800263e:	bf00      	nop
 8002640:	40010000 	.word	0x40010000

08002644 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002644:	6a03      	ldr	r3, [r0, #32]
 8002646:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800264a:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800264c:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800264e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002650:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002652:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002654:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx = TIMx->CCMR3;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002658:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2; 
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800265a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800265e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002662:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8002666:	688d      	ldr	r5, [r1, #8]
 8002668:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800266c:	4d08      	ldr	r5, [pc, #32]	; (8002690 <TIM_OC6_SetConfig+0x4c>)
 800266e:	42a8      	cmp	r0, r5
 8002670:	d003      	beq.n	800267a <TIM_OC6_SetConfig+0x36>
 8002672:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002676:	42a8      	cmp	r0, r5
 8002678:	d104      	bne.n	8002684 <TIM_OC6_SetConfig+0x40>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800267a:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 800267e:	694d      	ldr	r5, [r1, #20]
 8002680:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002684:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002686:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002688:	684b      	ldr	r3, [r1, #4]
 800268a:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800268c:	6202      	str	r2, [r0, #32]
 800268e:	bd30      	pop	{r4, r5, pc}
 8002690:	40010000 	.word	0x40010000

08002694 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 8002694:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002696:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 800269a:	4604      	mov	r4, r0
 800269c:	460d      	mov	r5, r1
 800269e:	2002      	movs	r0, #2
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d07b      	beq.n	800279c <HAL_TIM_PWM_ConfigChannel+0x108>
 80026a4:	2301      	movs	r3, #1
  
  htim->State = HAL_TIM_STATE_BUSY;
    
  switch (Channel)
 80026a6:	2a08      	cmp	r2, #8
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
  
  htim->State = HAL_TIM_STATE_BUSY;
 80026a8:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80026ac:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
    
  switch (Channel)
 80026b0:	d03c      	beq.n	800272c <HAL_TIM_PWM_ConfigChannel+0x98>
 80026b2:	d813      	bhi.n	80026dc <HAL_TIM_PWM_ConfigChannel+0x48>
 80026b4:	b34a      	cbz	r2, 800270a <HAL_TIM_PWM_ConfigChannel+0x76>
 80026b6:	2a04      	cmp	r2, #4
 80026b8:	d16a      	bne.n	8002790 <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026ba:	6820      	ldr	r0, [r4, #0]
 80026bc:	f7ff fee2 	bl	8002484 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026c0:	6823      	ldr	r3, [r4, #0]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80026c2:	6929      	ldr	r1, [r5, #16]
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026c4:	699a      	ldr	r2, [r3, #24]
 80026c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026ca:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026cc:	699a      	ldr	r2, [r3, #24]
 80026ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80026d4:	699a      	ldr	r2, [r3, #24]
 80026d6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80026da:	e025      	b.n	8002728 <HAL_TIM_PWM_ConfigChannel+0x94>
  /* Check input state */
  __HAL_LOCK(htim);
  
  htim->State = HAL_TIM_STATE_BUSY;
    
  switch (Channel)
 80026dc:	2a10      	cmp	r2, #16
 80026de:	d036      	beq.n	800274e <HAL_TIM_PWM_ConfigChannel+0xba>
 80026e0:	2a14      	cmp	r2, #20
 80026e2:	d044      	beq.n	800276e <HAL_TIM_PWM_ConfigChannel+0xda>
 80026e4:	2a0c      	cmp	r2, #12
 80026e6:	d153      	bne.n	8002790 <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026e8:	6820      	ldr	r0, [r4, #0]
 80026ea:	f7ff ff31 	bl	8002550 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026ee:	6823      	ldr	r3, [r4, #0]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 80026f0:	6929      	ldr	r1, [r5, #16]
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026f2:	69da      	ldr	r2, [r3, #28]
 80026f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026f8:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026fa:	69da      	ldr	r2, [r3, #28]
 80026fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002700:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8002702:	69da      	ldr	r2, [r3, #28]
 8002704:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002708:	e01f      	b.n	800274a <HAL_TIM_PWM_ConfigChannel+0xb6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800270a:	6820      	ldr	r0, [r4, #0]
 800270c:	f7ff fe8c 	bl	8002428 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002710:	6823      	ldr	r3, [r4, #0]
 8002712:	699a      	ldr	r2, [r3, #24]
 8002714:	f042 0208 	orr.w	r2, r2, #8
 8002718:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800271a:	699a      	ldr	r2, [r3, #24]
 800271c:	f022 0204 	bic.w	r2, r2, #4
 8002720:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002722:	692a      	ldr	r2, [r5, #16]
 8002724:	6999      	ldr	r1, [r3, #24]
 8002726:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002728:	619a      	str	r2, [r3, #24]
    }
    break;
 800272a:	e031      	b.n	8002790 <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800272c:	6820      	ldr	r0, [r4, #0]
 800272e:	f7ff fedd 	bl	80024ec <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002732:	6823      	ldr	r3, [r4, #0]
 8002734:	69da      	ldr	r2, [r3, #28]
 8002736:	f042 0208 	orr.w	r2, r2, #8
 800273a:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800273c:	69da      	ldr	r2, [r3, #28]
 800273e:	f022 0204 	bic.w	r2, r2, #4
 8002742:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002744:	692a      	ldr	r2, [r5, #16]
 8002746:	69d9      	ldr	r1, [r3, #28]
 8002748:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 800274a:	61da      	str	r2, [r3, #28]
    }
    break;
 800274c:	e020      	b.n	8002790 <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800274e:	6820      	ldr	r0, [r4, #0]
 8002750:	f7ff ff50 	bl	80025f4 <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002754:	6823      	ldr	r3, [r4, #0]
 8002756:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002758:	f042 0208 	orr.w	r2, r2, #8
 800275c:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800275e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002760:	f022 0204 	bic.w	r2, r2, #4
 8002764:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8002766:	692a      	ldr	r2, [r5, #16]
 8002768:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800276a:	430a      	orrs	r2, r1
 800276c:	e00f      	b.n	800278e <HAL_TIM_PWM_ConfigChannel+0xfa>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800276e:	6820      	ldr	r0, [r4, #0]
 8002770:	f7ff ff68 	bl	8002644 <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002774:	6823      	ldr	r3, [r4, #0]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8002776:	6909      	ldr	r1, [r1, #16]
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002778:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800277a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800277e:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002780:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002782:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002786:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8002788:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800278a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800278e:	655a      	str	r2, [r3, #84]	; 0x54
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8002790:	2301      	movs	r3, #1
    
  __HAL_UNLOCK(htim);
 8002792:	2000      	movs	r0, #0
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8002794:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 8002798:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 800279c:	bd38      	pop	{r3, r4, r5, pc}
	...

080027a0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80027a0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80027a4:	2b01      	cmp	r3, #1
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80027a6:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80027a8:	d01c      	beq.n	80027e4 <HAL_TIMEx_MasterConfigSynchronization+0x44>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027aa:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80027ac:	4c0e      	ldr	r4, [pc, #56]	; (80027e8 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  
  /* Check input state */
  __HAL_LOCK(htim);

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027ae:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80027b0:	42a2      	cmp	r2, r4

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027b2:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80027b4:	d003      	beq.n	80027be <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 80027b6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80027ba:	42a2      	cmp	r2, r4
 80027bc:	d103      	bne.n	80027c6 <HAL_TIMEx_MasterConfigSynchronization+0x26>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80027be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80027c2:	684c      	ldr	r4, [r1, #4]
 80027c4:	4323      	orrs	r3, r4
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027c6:	680c      	ldr	r4, [r1, #0]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027cc:	6889      	ldr	r1, [r1, #8]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027ce:	4323      	orrs	r3, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80027d0:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027d4:	6053      	str	r3, [r2, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027d6:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 80027d8:	2300      	movs	r3, #0
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80027da:	6091      	str	r1, [r2, #8]

  __HAL_UNLOCK(htim);
 80027dc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 80027e0:	4618      	mov	r0, r3
 80027e2:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80027e4:	2002      	movs	r0, #2
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
  
  return HAL_OK;
} 
 80027e6:	bd30      	pop	{r4, r5, pc}
 80027e8:	40010000 	.word	0x40010000

080027ec <HAL_TIMEx_CommutationCallback>:
 80027ec:	4770      	bx	lr

080027ee <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027ee:	4770      	bx	lr

080027f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80027f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027f4:	9d06      	ldr	r5, [sp, #24]
 80027f6:	4604      	mov	r4, r0
 80027f8:	460f      	mov	r7, r1
 80027fa:	4616      	mov	r6, r2
 80027fc:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027fe:	6821      	ldr	r1, [r4, #0]
 8002800:	69ca      	ldr	r2, [r1, #28]
 8002802:	ea37 0302 	bics.w	r3, r7, r2
 8002806:	bf0c      	ite	eq
 8002808:	2201      	moveq	r2, #1
 800280a:	2200      	movne	r2, #0
 800280c:	42b2      	cmp	r2, r6
 800280e:	d11d      	bne.n	800284c <UART_WaitOnFlagUntilTimeout+0x5c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002810:	1c6b      	adds	r3, r5, #1
 8002812:	d0f5      	beq.n	8002800 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8002814:	b99d      	cbnz	r5, 800283e <UART_WaitOnFlagUntilTimeout+0x4e>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002816:	6823      	ldr	r3, [r4, #0]

        huart->gState = HAL_UART_STATE_READY;
        huart->RxState = HAL_UART_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002818:	2003      	movs	r0, #3
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002820:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	f022 0201 	bic.w	r2, r2, #1
 8002828:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800282a:	2320      	movs	r3, #32
 800282c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002830:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002834:	2300      	movs	r3, #0
 8002836:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800283a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800283e:	f7fd fd91 	bl	8000364 <HAL_GetTick>
 8002842:	ebc8 0000 	rsb	r0, r8, r0
 8002846:	4285      	cmp	r5, r0
 8002848:	d8d9      	bhi.n	80027fe <UART_WaitOnFlagUntilTimeout+0xe>
 800284a:	e7e4      	b.n	8002816 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800284c:	2000      	movs	r0, #0
}
 800284e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002852 <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002852:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002856:	461f      	mov	r7, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002858:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800285c:	4604      	mov	r4, r0
 800285e:	460d      	mov	r5, r1
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002860:	2b20      	cmp	r3, #32
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002862:	4690      	mov	r8, r2
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002864:	d14b      	bne.n	80028fe <HAL_UART_Transmit+0xac>
  {
    if((pData == NULL ) || (Size == 0U))
 8002866:	2900      	cmp	r1, #0
 8002868:	d047      	beq.n	80028fa <HAL_UART_Transmit+0xa8>
 800286a:	2a00      	cmp	r2, #0
 800286c:	d045      	beq.n	80028fa <HAL_UART_Transmit+0xa8>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800286e:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002872:	2b01      	cmp	r3, #1
 8002874:	d043      	beq.n	80028fe <HAL_UART_Transmit+0xac>
 8002876:	2301      	movs	r3, #1
 8002878:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800287c:	2300      	movs	r3, #0
 800287e:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002880:	2321      	movs	r3, #33	; 0x21
 8002882:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002886:	f7fd fd6d 	bl	8000364 <HAL_GetTick>
 800288a:	4606      	mov	r6, r0

    huart->TxXferSize = Size;
 800288c:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8002890:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8002894:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002898:	b292      	uxth	r2, r2
 800289a:	b302      	cbz	r2, 80028de <HAL_UART_Transmit+0x8c>
    {
      huart->TxXferCount--;
 800289c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028a0:	2200      	movs	r2, #0
 80028a2:	9700      	str	r7, [sp, #0]
 80028a4:	2180      	movs	r1, #128	; 0x80

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0U)
    {
      huart->TxXferCount--;
 80028a6:	3b01      	subs	r3, #1
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028a8:	4620      	mov	r0, r4

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0U)
    {
      huart->TxXferCount--;
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028b0:	4633      	mov	r3, r6
 80028b2:	f7ff ff9d 	bl	80027f0 <UART_WaitOnFlagUntilTimeout>
 80028b6:	b108      	cbz	r0, 80028bc <HAL_UART_Transmit+0x6a>
      {
        return HAL_TIMEOUT;
 80028b8:	2003      	movs	r0, #3
 80028ba:	e021      	b.n	8002900 <HAL_UART_Transmit+0xae>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028bc:	68a3      	ldr	r3, [r4, #8]
 80028be:	6822      	ldr	r2, [r4, #0]
 80028c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028c4:	d107      	bne.n	80028d6 <HAL_UART_Transmit+0x84>
 80028c6:	6923      	ldr	r3, [r4, #16]
 80028c8:	b92b      	cbnz	r3, 80028d6 <HAL_UART_Transmit+0x84>
      {
        tmp = (uint16_t*) pData;
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80028ca:	f835 3b02 	ldrh.w	r3, [r5], #2
 80028ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028d2:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2;
 80028d4:	e7de      	b.n	8002894 <HAL_UART_Transmit+0x42>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80028d6:	782b      	ldrb	r3, [r5, #0]
 80028d8:	3501      	adds	r5, #1
 80028da:	6293      	str	r3, [r2, #40]	; 0x28
 80028dc:	e7da      	b.n	8002894 <HAL_UART_Transmit+0x42>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028de:	9700      	str	r7, [sp, #0]
 80028e0:	4633      	mov	r3, r6
 80028e2:	2140      	movs	r1, #64	; 0x40
 80028e4:	4620      	mov	r0, r4
 80028e6:	f7ff ff83 	bl	80027f0 <UART_WaitOnFlagUntilTimeout>
 80028ea:	2800      	cmp	r0, #0
 80028ec:	d1e4      	bne.n	80028b8 <HAL_UART_Transmit+0x66>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028ee:	2320      	movs	r3, #32

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028f0:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028f4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    return HAL_OK;
 80028f8:	e002      	b.n	8002900 <HAL_UART_Transmit+0xae>
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0U))
    {
      return  HAL_ERROR;
 80028fa:	2001      	movs	r0, #1
 80028fc:	e000      	b.n	8002900 <HAL_UART_Transmit+0xae>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80028fe:	2002      	movs	r0, #2
  }
}
 8002900:	b002      	add	sp, #8
 8002902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002908 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart: uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002908:	b538      	push	{r3, r4, r5, lr}
 800290a:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800290c:	6805      	ldr	r5, [r0, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800290e:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002910:	6922      	ldr	r2, [r4, #16]
 8002912:	68a1      	ldr	r1, [r4, #8]
 8002914:	6828      	ldr	r0, [r5, #0]
 8002916:	4311      	orrs	r1, r2
 8002918:	6962      	ldr	r2, [r4, #20]
 800291a:	430a      	orrs	r2, r1
 800291c:	ea42 0103 	orr.w	r1, r2, r3
 8002920:	4a88      	ldr	r2, [pc, #544]	; (8002b44 <UART_SetConfig+0x23c>)
 8002922:	4002      	ands	r2, r0
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002924:	69a0      	ldr	r0, [r4, #24]
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002926:	430a      	orrs	r2, r1
 8002928:	602a      	str	r2, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800292a:	686a      	ldr	r2, [r5, #4]
 800292c:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8002930:	68e2      	ldr	r2, [r4, #12]
 8002932:	430a      	orrs	r2, r1
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002934:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002936:	606a      	str	r2, [r5, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002938:	4301      	orrs	r1, r0
 800293a:	68aa      	ldr	r2, [r5, #8]
 800293c:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002940:	430a      	orrs	r2, r1
 8002942:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002944:	4a80      	ldr	r2, [pc, #512]	; (8002b48 <UART_SetConfig+0x240>)
 8002946:	4295      	cmp	r5, r2
 8002948:	d107      	bne.n	800295a <UART_SetConfig+0x52>
 800294a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800294e:	497f      	ldr	r1, [pc, #508]	; (8002b4c <UART_SetConfig+0x244>)
 8002950:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002954:	f002 0203 	and.w	r2, r2, #3
 8002958:	e009      	b.n	800296e <UART_SetConfig+0x66>
 800295a:	4a7d      	ldr	r2, [pc, #500]	; (8002b50 <UART_SetConfig+0x248>)
 800295c:	4295      	cmp	r5, r2
 800295e:	d10b      	bne.n	8002978 <UART_SetConfig+0x70>
 8002960:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8002964:	497b      	ldr	r1, [pc, #492]	; (8002b54 <UART_SetConfig+0x24c>)
 8002966:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800296a:	f002 020c 	and.w	r2, r2, #12

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800296e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002972:	5c8a      	ldrb	r2, [r1, r2]
 8002974:	d073      	beq.n	8002a5e <UART_SetConfig+0x156>
 8002976:	e0b6      	b.n	8002ae6 <UART_SetConfig+0x1de>
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002978:	4a77      	ldr	r2, [pc, #476]	; (8002b58 <UART_SetConfig+0x250>)
 800297a:	4295      	cmp	r5, r2
 800297c:	d10d      	bne.n	800299a <UART_SetConfig+0x92>
 800297e:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8002982:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002986:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800298a:	2a10      	cmp	r2, #16
 800298c:	f000 8086 	beq.w	8002a9c <UART_SetConfig+0x194>
 8002990:	d95d      	bls.n	8002a4e <UART_SetConfig+0x146>
 8002992:	2a20      	cmp	r2, #32
 8002994:	d078      	beq.n	8002a88 <UART_SetConfig+0x180>
 8002996:	2a30      	cmp	r2, #48	; 0x30
 8002998:	e00e      	b.n	80029b8 <UART_SetConfig+0xb0>
 800299a:	4a70      	ldr	r2, [pc, #448]	; (8002b5c <UART_SetConfig+0x254>)
 800299c:	4295      	cmp	r5, r2
 800299e:	d10d      	bne.n	80029bc <UART_SetConfig+0xb4>
 80029a0:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 80029a4:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80029a8:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 80029ac:	2a40      	cmp	r2, #64	; 0x40
 80029ae:	d075      	beq.n	8002a9c <UART_SetConfig+0x194>
 80029b0:	d94d      	bls.n	8002a4e <UART_SetConfig+0x146>
 80029b2:	2a80      	cmp	r2, #128	; 0x80
 80029b4:	d068      	beq.n	8002a88 <UART_SetConfig+0x180>
 80029b6:	2ac0      	cmp	r2, #192	; 0xc0
 80029b8:	d07c      	beq.n	8002ab4 <UART_SetConfig+0x1ac>
 80029ba:	e087      	b.n	8002acc <UART_SetConfig+0x1c4>
 80029bc:	4a68      	ldr	r2, [pc, #416]	; (8002b60 <UART_SetConfig+0x258>)
 80029be:	4295      	cmp	r5, r2
 80029c0:	d10f      	bne.n	80029e2 <UART_SetConfig+0xda>
 80029c2:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 80029c6:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80029ca:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80029ce:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80029d2:	d063      	beq.n	8002a9c <UART_SetConfig+0x194>
 80029d4:	d93b      	bls.n	8002a4e <UART_SetConfig+0x146>
 80029d6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80029da:	d055      	beq.n	8002a88 <UART_SetConfig+0x180>
 80029dc:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80029e0:	e7ea      	b.n	80029b8 <UART_SetConfig+0xb0>
 80029e2:	4a60      	ldr	r2, [pc, #384]	; (8002b64 <UART_SetConfig+0x25c>)
 80029e4:	4295      	cmp	r5, r2
 80029e6:	d112      	bne.n	8002a0e <UART_SetConfig+0x106>
 80029e8:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 80029ec:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80029f0:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80029f4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80029f8:	d050      	beq.n	8002a9c <UART_SetConfig+0x194>
 80029fa:	d802      	bhi.n	8002a02 <UART_SetConfig+0xfa>
 80029fc:	2a00      	cmp	r2, #0
 80029fe:	d03d      	beq.n	8002a7c <UART_SetConfig+0x174>
 8002a00:	e064      	b.n	8002acc <UART_SetConfig+0x1c4>
 8002a02:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002a06:	d03f      	beq.n	8002a88 <UART_SetConfig+0x180>
 8002a08:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8002a0c:	e7d4      	b.n	80029b8 <UART_SetConfig+0xb0>
 8002a0e:	4a56      	ldr	r2, [pc, #344]	; (8002b68 <UART_SetConfig+0x260>)
 8002a10:	4295      	cmp	r5, r2
 8002a12:	d10f      	bne.n	8002a34 <UART_SetConfig+0x12c>
 8002a14:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8002a18:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002a1c:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8002a20:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002a24:	d03a      	beq.n	8002a9c <UART_SetConfig+0x194>
 8002a26:	d912      	bls.n	8002a4e <UART_SetConfig+0x146>
 8002a28:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002a2c:	d02c      	beq.n	8002a88 <UART_SetConfig+0x180>
 8002a2e:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8002a32:	e7c1      	b.n	80029b8 <UART_SetConfig+0xb0>
 8002a34:	4a4d      	ldr	r2, [pc, #308]	; (8002b6c <UART_SetConfig+0x264>)
 8002a36:	4295      	cmp	r5, r2
 8002a38:	d148      	bne.n	8002acc <UART_SetConfig+0x1c4>
 8002a3a:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 8002a3e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002a42:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8002a46:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002a4a:	d027      	beq.n	8002a9c <UART_SetConfig+0x194>
 8002a4c:	d801      	bhi.n	8002a52 <UART_SetConfig+0x14a>
 8002a4e:	b17a      	cbz	r2, 8002a70 <UART_SetConfig+0x168>
 8002a50:	e03c      	b.n	8002acc <UART_SetConfig+0x1c4>
 8002a52:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002a56:	d017      	beq.n	8002a88 <UART_SetConfig+0x180>
 8002a58:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8002a5c:	e7ac      	b.n	80029b8 <UART_SetConfig+0xb0>

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  {
    switch (clocksource)
 8002a5e:	2a08      	cmp	r2, #8
 8002a60:	d837      	bhi.n	8002ad2 <UART_SetConfig+0x1ca>
 8002a62:	e8df f002 	tbb	[pc, r2]
 8002a66:	0e08      	.short	0x0e08
 8002a68:	361e3614 	.word	0x361e3614
 8002a6c:	3636      	.short	0x3636
 8002a6e:	2a          	.byte	0x2a
 8002a6f:	00          	.byte	0x00

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a74:	d140      	bne.n	8002af8 <UART_SetConfig+0x1f0>
  {
    switch (clocksource)
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002a76:	f7fe fe7b 	bl	8001770 <HAL_RCC_GetPCLK1Freq>
 8002a7a:	e014      	b.n	8002aa6 <UART_SetConfig+0x19e>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a80:	d13d      	bne.n	8002afe <UART_SetConfig+0x1f6>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002a82:	f7fe fe8d 	bl	80017a0 <HAL_RCC_GetPCLK2Freq>
 8002a86:	e00e      	b.n	8002aa6 <UART_SetConfig+0x19e>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a8c:	d13a      	bne.n	8002b04 <UART_SetConfig+0x1fc>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002a8e:	6860      	ldr	r0, [r4, #4]
 8002a90:	0842      	lsrs	r2, r0, #1
 8002a92:	f102 73f4 	add.w	r3, r2, #31981568	; 0x1e80000
 8002a96:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002a9a:	e012      	b.n	8002ac2 <UART_SetConfig+0x1ba>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aa0:	d139      	bne.n	8002b16 <UART_SetConfig+0x20e>
      break;
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002aa2:	f7fe fd77 	bl	8001594 <HAL_RCC_GetSysClockFreq>
 8002aa6:	6863      	ldr	r3, [r4, #4]
 8002aa8:	085a      	lsrs	r2, r3, #1
 8002aaa:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8002aae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ab2:	e008      	b.n	8002ac6 <UART_SetConfig+0x1be>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ab8:	d137      	bne.n	8002b2a <UART_SetConfig+0x222>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002aba:	6860      	ldr	r0, [r4, #4]
 8002abc:	0843      	lsrs	r3, r0, #1
 8002abe:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002ac2:	fbb3 f3f0 	udiv	r3, r3, r0
 8002ac6:	b29b      	uxth	r3, r3
{
  uint32_t tmpreg                     = 0x00000000U;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000U;
  uint16_t usartdiv                   = 0x0000U;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ac8:	2000      	movs	r0, #0
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
 8002aca:	e004      	b.n	8002ad6 <UART_SetConfig+0x1ce>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ad0:	d135      	bne.n	8002b3e <UART_SetConfig+0x236>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002ad2:	2001      	movs	r0, #1
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg                     = 0x00000000U;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000U;
  uint16_t usartdiv                   = 0x0000U;
 8002ad4:	2300      	movs	r3, #0
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ad6:	f3c3 0142 	ubfx	r1, r3, #1, #3
 8002ada:	f023 030f 	bic.w	r3, r3, #15
    huart->Instance->BRR = brrtemp;
 8002ade:	6822      	ldr	r2, [r4, #0]
 8002ae0:	430b      	orrs	r3, r1
 8002ae2:	60d3      	str	r3, [r2, #12]
 8002ae4:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    switch (clocksource)
 8002ae6:	2a08      	cmp	r2, #8
 8002ae8:	d829      	bhi.n	8002b3e <UART_SetConfig+0x236>
 8002aea:	e8df f002 	tbb	[pc, r2]
 8002aee:	0805      	.short	0x0805
 8002af0:	2814280b 	.word	0x2814280b
 8002af4:	2828      	.short	0x2828
 8002af6:	1e          	.byte	0x1e
 8002af7:	00          	.byte	0x00
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002af8:	f7fe fe3a 	bl	8001770 <HAL_RCC_GetPCLK1Freq>
 8002afc:	e00d      	b.n	8002b1a <UART_SetConfig+0x212>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002afe:	f7fe fe4f 	bl	80017a0 <HAL_RCC_GetPCLK2Freq>
 8002b02:	e00a      	b.n	8002b1a <UART_SetConfig+0x212>
      break;
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002b04:	6861      	ldr	r1, [r4, #4]
 8002b06:	084a      	lsrs	r2, r1, #1
 8002b08:	f502 0374 	add.w	r3, r2, #15990784	; 0xf40000
 8002b0c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002b10:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b14:	e00f      	b.n	8002b36 <UART_SetConfig+0x22e>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002b16:	f7fe fd3d 	bl	8001594 <HAL_RCC_GetSysClockFreq>
 8002b1a:	6863      	ldr	r3, [r4, #4]
 8002b1c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002b20:	fbb0 f0f3 	udiv	r0, r0, r3
 8002b24:	b280      	uxth	r0, r0
 8002b26:	60e8      	str	r0, [r5, #12]
 8002b28:	e007      	b.n	8002b3a <UART_SetConfig+0x232>
      break;
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002b2a:	6862      	ldr	r2, [r4, #4]
 8002b2c:	0853      	lsrs	r3, r2, #1
 8002b2e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002b32:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	60eb      	str	r3, [r5, #12]
{
  uint32_t tmpreg                     = 0x00000000U;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000U;
  uint16_t usartdiv                   = 0x0000U;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b3a:	2000      	movs	r0, #0
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
 8002b3c:	bd38      	pop	{r3, r4, r5, pc}
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002b3e:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 8002b40:	bd38      	pop	{r3, r4, r5, pc}
 8002b42:	bf00      	nop
 8002b44:	efff69f3 	.word	0xefff69f3
 8002b48:	40011000 	.word	0x40011000
 8002b4c:	080060c8 	.word	0x080060c8
 8002b50:	40004400 	.word	0x40004400
 8002b54:	080060cc 	.word	0x080060cc
 8002b58:	40004800 	.word	0x40004800
 8002b5c:	40004c00 	.word	0x40004c00
 8002b60:	40005000 	.word	0x40005000
 8002b64:	40011400 	.word	0x40011400
 8002b68:	40007800 	.word	0x40007800
 8002b6c:	40007c00 	.word	0x40007c00

08002b70 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002b72:	07da      	lsls	r2, r3, #31
  * @brief Configure the UART peripheral advanced features
  * @param huart: uart handle
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b74:	b510      	push	{r4, lr}
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b76:	d506      	bpl.n	8002b86 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b78:	6804      	ldr	r4, [r0, #0]
 8002b7a:	6862      	ldr	r2, [r4, #4]
 8002b7c:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8002b80:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002b82:	430a      	orrs	r2, r1
 8002b84:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b86:	079c      	lsls	r4, r3, #30
 8002b88:	d506      	bpl.n	8002b98 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b8a:	6804      	ldr	r4, [r0, #0]
 8002b8c:	6862      	ldr	r2, [r4, #4]
 8002b8e:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8002b92:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002b94:	430a      	orrs	r2, r1
 8002b96:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b98:	0759      	lsls	r1, r3, #29
 8002b9a:	d506      	bpl.n	8002baa <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b9c:	6804      	ldr	r4, [r0, #0]
 8002b9e:	6862      	ldr	r2, [r4, #4]
 8002ba0:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8002ba4:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002baa:	071a      	lsls	r2, r3, #28
 8002bac:	d506      	bpl.n	8002bbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002bae:	6804      	ldr	r4, [r0, #0]
 8002bb0:	6862      	ldr	r2, [r4, #4]
 8002bb2:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8002bb6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002bbc:	06dc      	lsls	r4, r3, #27
 8002bbe:	d506      	bpl.n	8002bce <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002bc0:	6804      	ldr	r4, [r0, #0]
 8002bc2:	68a2      	ldr	r2, [r4, #8]
 8002bc4:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8002bc8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002bce:	0699      	lsls	r1, r3, #26
 8002bd0:	d506      	bpl.n	8002be0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002bd2:	6804      	ldr	r4, [r0, #0]
 8002bd4:	68a2      	ldr	r2, [r4, #8]
 8002bd6:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8002bda:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002be0:	065a      	lsls	r2, r3, #25
 8002be2:	d510      	bpl.n	8002c06 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002be4:	6801      	ldr	r1, [r0, #0]
 8002be6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002be8:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bea:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bee:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002bf2:	ea42 0204 	orr.w	r2, r2, r4
 8002bf6:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bf8:	d105      	bne.n	8002c06 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bfa:	684a      	ldr	r2, [r1, #4]
 8002bfc:	f422 04c0 	bic.w	r4, r2, #6291456	; 0x600000
 8002c00:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002c02:	4322      	orrs	r2, r4
 8002c04:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c06:	061b      	lsls	r3, r3, #24
 8002c08:	d506      	bpl.n	8002c18 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c0a:	6801      	ldr	r1, [r0, #0]
 8002c0c:	684b      	ldr	r3, [r1, #4]
 8002c0e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002c12:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002c14:	4313      	orrs	r3, r2
 8002c16:	604b      	str	r3, [r1, #4]
 8002c18:	bd10      	pop	{r4, pc}

08002c1a <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c1c:	2600      	movs	r6, #0
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c1e:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c20:	66c6      	str	r6, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002c22:	f7fd fb9f 	bl	8000364 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c26:	6823      	ldr	r3, [r4, #0]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002c28:	4605      	mov	r5, r0

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	071a      	lsls	r2, r3, #28
 8002c2e:	d404      	bmi.n	8002c3a <UART_CheckIdleState+0x20>
      /* Timeout Occurred */
      return HAL_TIMEOUT;
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c30:	6823      	ldr	r3, [r4, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	075b      	lsls	r3, r3, #29
 8002c36:	d51a      	bpl.n	8002c6e <UART_CheckIdleState+0x54>
 8002c38:	e00d      	b.n	8002c56 <UART_CheckIdleState+0x3c>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c3a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c3e:	4632      	mov	r2, r6
 8002c40:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	4603      	mov	r3, r0
 8002c48:	4620      	mov	r0, r4
 8002c4a:	f7ff fdd1 	bl	80027f0 <UART_WaitOnFlagUntilTimeout>
 8002c4e:	2800      	cmp	r0, #0
 8002c50:	d0ee      	beq.n	8002c30 <UART_CheckIdleState+0x16>
    {
      /* Timeout Occurred */
      return HAL_TIMEOUT;
 8002c52:	2003      	movs	r0, #3
 8002c54:	e013      	b.n	8002c7e <UART_CheckIdleState+0x64>
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c56:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002c60:	4620      	mov	r0, r4
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	462b      	mov	r3, r5
 8002c66:	f7ff fdc3 	bl	80027f0 <UART_WaitOnFlagUntilTimeout>
 8002c6a:	2800      	cmp	r0, #0
 8002c6c:	d1f1      	bne.n	8002c52 <UART_CheckIdleState+0x38>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8002c6e:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c70:	2000      	movs	r0, #0
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8002c72:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c76:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
 8002c7a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
}
 8002c7e:	b002      	add	sp, #8
 8002c80:	bd70      	pop	{r4, r5, r6, pc}

08002c82 <HAL_UART_Init>:
  *         parameters in the UART_InitTypeDef and creates the associated handle .
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c82:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002c84:	4604      	mov	r4, r0
 8002c86:	b360      	cbz	r0, 8002ce2 <HAL_UART_Init+0x60>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002c88:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002c8c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c90:	b91b      	cbnz	r3, 8002c9a <HAL_UART_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c92:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c96:	f002 fd1d 	bl	80056d4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002c9a:	6822      	ldr	r2, [r4, #0]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c9c:	2324      	movs	r3, #36	; 0x24

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c9e:	4620      	mov	r0, r4

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ca0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002ca4:	6813      	ldr	r3, [r2, #0]
 8002ca6:	f023 0301 	bic.w	r3, r3, #1
 8002caa:	6013      	str	r3, [r2, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cac:	f7ff fe2c 	bl	8002908 <UART_SetConfig>
 8002cb0:	2801      	cmp	r0, #1
 8002cb2:	d016      	beq.n	8002ce2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002cb6:	b113      	cbz	r3, 8002cbe <HAL_UART_Init+0x3c>
  {
    UART_AdvFeatureConfig(huart);
 8002cb8:	4620      	mov	r0, r4
 8002cba:	f7ff ff59 	bl	8002b70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cbe:	6823      	ldr	r3, [r4, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cc0:	4620      	mov	r0, r4
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cc8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cd0:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	f042 0201 	orr.w	r2, r2, #1

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 8002cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002cdc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cde:	f7ff bf9c 	b.w	8002c1a <UART_CheckIdleState>
}
 8002ce2:	2001      	movs	r0, #1
 8002ce4:	bd10      	pop	{r4, pc}
	...

08002ce8 <Emergency_Stop>:
	{HAL_TIM_PWM_Stop(&htim9, TIM_CHANNEL_1);}
}

int Emergency_Stop() {

if (dif_l > STOP_CONDITION || dif_r > STOP_CONDITION || cur_move == PAUSE) //Emergency STOP conditions
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <Emergency_Stop+0x30>)
 8002cea:	f640 62a6 	movw	r2, #3750	; 0xea6
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <Emergency_Stop+0x34>)
 8002cf4:	dc06      	bgt.n	8002d04 <Emergency_Stop+0x1c>
 8002cf6:	490a      	ldr	r1, [pc, #40]	; (8002d20 <Emergency_Stop+0x38>)
 8002cf8:	6809      	ldr	r1, [r1, #0]
 8002cfa:	4291      	cmp	r1, r2
 8002cfc:	dc02      	bgt.n	8002d04 <Emergency_Stop+0x1c>
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	2a04      	cmp	r2, #4
 8002d02:	d106      	bne.n	8002d12 <Emergency_Stop+0x2a>
	  {
		  if (cur_move == FWD || cur_move == PAUSE) //|| l_turnflag == TRUE || r_turnflag == TRUE)
		  {return TRUE;} //stops motors, and breaks out of searching loop
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f033 0304 	bics.w	r3, r3, #4
 8002d0a:	bf0c      	ite	eq
 8002d0c:	2001      	moveq	r0, #1
 8002d0e:	2000      	movne	r0, #0
 8002d10:	4770      	bx	lr
		  //{return TRUE;}
		  //else if (abs(dif_l - dif_r) > 3600) {
			//  return TRUE;
		  //}
	  }
return FALSE;
 8002d12:	2000      	movs	r0, #0
}
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	20002088 	.word	0x20002088
 8002d1c:	200000e8 	.word	0x200000e8
 8002d20:	200020e4 	.word	0x200020e4

08002d24 <Motor_Correction>:
correction = (fl_wall - fr_wall)/P;
}
*/
//else
{
if (l_wall > LEFT_THRESHOLD && r_wall > RIGHT_THRESHOLD) { //both walls available
 8002d24:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 8002d28:	dd04      	ble.n	8002d34 <Motor_Correction+0x10>
 8002d2a:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
 8002d2e:	dd05      	ble.n	8002d3c <Motor_Correction+0x18>
	errorP = (l_wall - (r_wall + WALL_OFFSET)); //dif_rf + 500 for primary
 8002d30:	1a41      	subs	r1, r0, r1
 8002d32:	e019      	b.n	8002d68 <Motor_Correction+0x44>
	//errorD = errorP - oldErrorP;
}
else if (l_wall >= LEFT_THRESHOLD && r_wall <= RIGHT_THRESHOLD) { //only left wall to correct. Optimal reading should be 1600
 8002d34:	d108      	bne.n	8002d48 <Motor_Correction+0x24>
 8002d36:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
 8002d3a:	dc02      	bgt.n	8002d42 <Motor_Correction+0x1e>
	errorP = (l_wall - LEFT_CORRECTION); //75 is correction factor. Left side needs more corrections for some reason
 8002d3c:	f5a0 61af 	sub.w	r1, r0, #1400	; 0x578
 8002d40:	e012      	b.n	8002d68 <Motor_Correction+0x44>
	//errorD = errorP - oldErrorP;
}
else if (l_wall <= LEFT_THRESHOLD && r_wall >= RIGHT_THRESHOLD) {//only right wall to correct. Optimal reading should be 1500. (200 is offset)
	errorP = (RIGHT_CORRECTION - r_wall); //100 is correction factor. Right side needs less correction
 8002d42:	f5c1 61af 	rsb	r1, r1, #1400	; 0x578
 8002d46:	e00f      	b.n	8002d68 <Motor_Correction+0x44>
}
else if (l_wall >= LEFT_THRESHOLD && r_wall <= RIGHT_THRESHOLD) { //only left wall to correct. Optimal reading should be 1600
	errorP = (l_wall - LEFT_CORRECTION); //75 is correction factor. Left side needs more corrections for some reason
	//errorD = errorP - oldErrorP;
}
else if (l_wall <= LEFT_THRESHOLD && r_wall >= RIGHT_THRESHOLD) {//only right wall to correct. Optimal reading should be 1500. (200 is offset)
 8002d48:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
 8002d4c:	daf9      	bge.n	8002d42 <Motor_Correction+0x1e>
	errorP = (RIGHT_CORRECTION - r_wall); //100 is correction factor. Right side needs less correction
	//errorD = errorP - oldErrorP;
}
else if (l_wall <= LEFT_THRESHOLD && r_wall <= RIGHT_THRESHOLD) { //use encoders when there's no walls available
	errorP = ((r_count - prev_r_count) - (l_count - prev_l_count))*5;
 8002d4e:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <Motor_Correction+0x58>)
 8002d50:	6819      	ldr	r1, [r3, #0]
 8002d52:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <Motor_Correction+0x5c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4419      	add	r1, r3
 8002d58:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <Motor_Correction+0x60>)
 8002d5a:	6818      	ldr	r0, [r3, #0]
 8002d5c:	4b0a      	ldr	r3, [pc, #40]	; (8002d88 <Motor_Correction+0x64>)
 8002d5e:	1a09      	subs	r1, r1, r0
 8002d60:	6818      	ldr	r0, [r3, #0]
 8002d62:	1a09      	subs	r1, r1, r0
 8002d64:	eb01 0181 	add.w	r1, r1, r1, lsl #2
}	//when right side has moved more, add more to left side
}
//motor correction adds to left motor
correction = errorP/P; //+ errorD/D; //P and D are tuning parameters
 8002d68:	203c      	movs	r0, #60	; 0x3c
 8002d6a:	fb91 f1f0 	sdiv	r1, r1, r0
//oldErrorP = errorP;
if (abs(correction) < 120) {
 8002d6e:	f101 0377 	add.w	r3, r1, #119	; 0x77
 8002d72:	2bee      	cmp	r3, #238	; 0xee
 8002d74:	bf94      	ite	ls
 8002d76:	4608      	movls	r0, r1
 8002d78:	2000      	movhi	r0, #0
	return correction;
}
else
{return 0;}

}
 8002d7a:	4770      	bx	lr
 8002d7c:	20003160 	.word	0x20003160
 8002d80:	2000439c 	.word	0x2000439c
 8002d84:	20004398 	.word	0x20004398
 8002d88:	200000e4 	.word	0x200000e4

08002d8c <Reset_Counters>:
}
}

void Reset_Counters() {

__HAL_TIM_SET_COUNTER(&htim1, 0); //reset counters
 8002d8c:	4b0d      	ldr	r3, [pc, #52]	; (8002dc4 <Reset_Counters+0x38>)
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	2300      	movs	r3, #0
 8002d92:	6253      	str	r3, [r2, #36]	; 0x24
__HAL_TIM_SET_COUNTER(&htim4, 0);
 8002d94:	4a0c      	ldr	r2, [pc, #48]	; (8002dc8 <Reset_Counters+0x3c>)
 8002d96:	6812      	ldr	r2, [r2, #0]
 8002d98:	6253      	str	r3, [r2, #36]	; 0x24
prev_l_count = 0;
 8002d9a:	4a0c      	ldr	r2, [pc, #48]	; (8002dcc <Reset_Counters+0x40>)
 8002d9c:	6013      	str	r3, [r2, #0]
prev_r_count = 0;
 8002d9e:	4a0c      	ldr	r2, [pc, #48]	; (8002dd0 <Reset_Counters+0x44>)
 8002da0:	6013      	str	r3, [r2, #0]
lenc_diff = 0;
 8002da2:	4a0c      	ldr	r2, [pc, #48]	; (8002dd4 <Reset_Counters+0x48>)
 8002da4:	6013      	str	r3, [r2, #0]
renc_diff = 0;
 8002da6:	4a0c      	ldr	r2, [pc, #48]	; (8002dd8 <Reset_Counters+0x4c>)
 8002da8:	6013      	str	r3, [r2, #0]
l_count = 0;
 8002daa:	4a0c      	ldr	r2, [pc, #48]	; (8002ddc <Reset_Counters+0x50>)
 8002dac:	6013      	str	r3, [r2, #0]
r_count = 0;
 8002dae:	4a0c      	ldr	r2, [pc, #48]	; (8002de0 <Reset_Counters+0x54>)
 8002db0:	6013      	str	r3, [r2, #0]
l_count_corr = 0;
 8002db2:	4a0c      	ldr	r2, [pc, #48]	; (8002de4 <Reset_Counters+0x58>)
 8002db4:	6013      	str	r3, [r2, #0]
r_count_corr = 0;
 8002db6:	4a0c      	ldr	r2, [pc, #48]	; (8002de8 <Reset_Counters+0x5c>)
 8002db8:	6013      	str	r3, [r2, #0]

lenc_diff_corr = 0;
 8002dba:	4a0c      	ldr	r2, [pc, #48]	; (8002dec <Reset_Counters+0x60>)
 8002dbc:	6013      	str	r3, [r2, #0]
renc_diff_corr = 0;
 8002dbe:	4a0c      	ldr	r2, [pc, #48]	; (8002df0 <Reset_Counters+0x64>)
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	4770      	bx	lr
 8002dc4:	200050f8 	.word	0x200050f8
 8002dc8:	200043a0 	.word	0x200043a0
 8002dcc:	2000439c 	.word	0x2000439c
 8002dd0:	20004398 	.word	0x20004398
 8002dd4:	200030b4 	.word	0x200030b4
 8002dd8:	2000108c 	.word	0x2000108c
 8002ddc:	200000e4 	.word	0x200000e4
 8002de0:	20003160 	.word	0x20003160
 8002de4:	200031d0 	.word	0x200031d0
 8002de8:	200030a0 	.word	0x200030a0
 8002dec:	20003164 	.word	0x20003164
 8002df0:	200032d0 	.word	0x200032d0

08002df4 <Clear_Buffers>:
	}

}

void Clear_Buffers() {
	for (int i = 0; i < IR_BUFFER; i++) {
 8002df4:	2300      	movs	r3, #0
		lf_buffer[i] = 0;
		rf_buffer[i] = 0;
		r_buffer[i] = 0;
 8002df6:	4809      	ldr	r0, [pc, #36]	; (8002e1c <Clear_Buffers+0x28>)
		l_buffer[i] = 0;
 8002df8:	4909      	ldr	r1, [pc, #36]	; (8002e20 <Clear_Buffers+0x2c>)

}

void Clear_Buffers() {
	for (int i = 0; i < IR_BUFFER; i++) {
		lf_buffer[i] = 0;
 8002dfa:	461a      	mov	r2, r3
		buff_count = (buff_count + 1) % IR_BUFFER;
	}

}

void Clear_Buffers() {
 8002dfc:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < IR_BUFFER; i++) {
		lf_buffer[i] = 0;
 8002dfe:	4d09      	ldr	r5, [pc, #36]	; (8002e24 <Clear_Buffers+0x30>)
		rf_buffer[i] = 0;
 8002e00:	4c09      	ldr	r4, [pc, #36]	; (8002e28 <Clear_Buffers+0x34>)

}

void Clear_Buffers() {
	for (int i = 0; i < IR_BUFFER; i++) {
		lf_buffer[i] = 0;
 8002e02:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
		rf_buffer[i] = 0;
 8002e06:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		r_buffer[i] = 0;
 8002e0a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		l_buffer[i] = 0;
 8002e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

}

void Clear_Buffers() {
	for (int i = 0; i < IR_BUFFER; i++) {
 8002e12:	3301      	adds	r3, #1
 8002e14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e18:	d1f3      	bne.n	8002e02 <Clear_Buffers+0xe>
		lf_buffer[i] = 0;
		rf_buffer[i] = 0;
		r_buffer[i] = 0;
		l_buffer[i] = 0;
	}
}
 8002e1a:	bd30      	pop	{r4, r5, pc}
 8002e1c:	200010e8 	.word	0x200010e8
 8002e20:	200020f8 	.word	0x200020f8
 8002e24:	200032e4 	.word	0x200032e4
 8002e28:	200000ec 	.word	0x200000ec

08002e2c <Reset_Flags>:

void Reset_Flags() {
 8002e2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	if (reverse_flag == FALSE) {
 8002e30:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8002edc <Reset_Flags+0xb0>
 8002e34:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8002ee0 <Reset_Flags+0xb4>
 8002e38:	f8d9 3000 	ldr.w	r3, [r9]
 8002e3c:	4a1b      	ldr	r2, [pc, #108]	; (8002eac <Reset_Flags+0x80>)
 8002e3e:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 8002ee4 <Reset_Flags+0xb8>
 8002e42:	f8df e0a4 	ldr.w	lr, [pc, #164]	; 8002ee8 <Reset_Flags+0xbc>
 8002e46:	4f1a      	ldr	r7, [pc, #104]	; (8002eb0 <Reset_Flags+0x84>)
 8002e48:	4e1a      	ldr	r6, [pc, #104]	; (8002eb4 <Reset_Flags+0x88>)
 8002e4a:	4d1b      	ldr	r5, [pc, #108]	; (8002eb8 <Reset_Flags+0x8c>)
 8002e4c:	4c1b      	ldr	r4, [pc, #108]	; (8002ebc <Reset_Flags+0x90>)
 8002e4e:	481c      	ldr	r0, [pc, #112]	; (8002ec0 <Reset_Flags+0x94>)
 8002e50:	491c      	ldr	r1, [pc, #112]	; (8002ec4 <Reset_Flags+0x98>)
 8002e52:	b9cb      	cbnz	r3, 8002e88 <Reset_Flags+0x5c>
		done_flag = FALSE;
		reverse_flag = FALSE;

		cur_dir = START_DIR;
		cur_move = FWD; //reset to default direction
		next_move = FWD;
 8002e54:	600b      	str	r3, [r1, #0]
		x_coord = X_START;
 8002e56:	491c      	ldr	r1, [pc, #112]	; (8002ec8 <Reset_Flags+0x9c>)

void Reset_Flags() {

	if (reverse_flag == FALSE) {
		r_turnflag = FALSE; //reset turn flags
		l_turnflag = FALSE;
 8002e58:	6013      	str	r3, [r2, #0]
		dead_flag = ARRIVE;
 8002e5a:	2202      	movs	r2, #2
		reverse_flag = FALSE;

		cur_dir = START_DIR;
		cur_move = FWD; //reset to default direction
		next_move = FWD;
		x_coord = X_START;
 8002e5c:	600b      	str	r3, [r1, #0]
		y_coord = Y_START;
 8002e5e:	491b      	ldr	r1, [pc, #108]	; (8002ecc <Reset_Flags+0xa0>)
		dead_flag = ARRIVE;
		fwd_flag = FALSE;
		l_transition_flag = FALSE;
		r_transition_flag = FALSE;
		transition_flag = FALSE;
		done_flag = FALSE;
 8002e60:	6023      	str	r3, [r4, #0]

		cur_dir = START_DIR;
		cur_move = FWD; //reset to default direction
		next_move = FWD;
		x_coord = X_START;
		y_coord = Y_START;
 8002e62:	600a      	str	r2, [r1, #0]
		r_transition_flag = FALSE;
		transition_flag = FALSE;
		done_flag = FALSE;
		reverse_flag = FALSE;

		cur_dir = START_DIR;
 8002e64:	4c1a      	ldr	r4, [pc, #104]	; (8002ed0 <Reset_Flags+0xa4>)
		cur_move = FWD; //reset to default direction
		next_move = FWD;
		x_coord = X_START;
		y_coord = Y_START;
		prevx = X_START;
 8002e66:	491b      	ldr	r1, [pc, #108]	; (8002ed4 <Reset_Flags+0xa8>)
}

void Reset_Flags() {

	if (reverse_flag == FALSE) {
		r_turnflag = FALSE; //reset turn flags
 8002e68:	f8c8 3000 	str.w	r3, [r8]
		l_turnflag = FALSE;
		dead_flag = ARRIVE;
		fwd_flag = FALSE;
 8002e6c:	f8ce 3000 	str.w	r3, [lr]
		l_transition_flag = FALSE;
 8002e70:	603b      	str	r3, [r7, #0]
		r_transition_flag = FALSE;
 8002e72:	6033      	str	r3, [r6, #0]
		transition_flag = FALSE;
 8002e74:	602b      	str	r3, [r5, #0]
		done_flag = FALSE;
		reverse_flag = FALSE;

		cur_dir = START_DIR;
 8002e76:	6023      	str	r3, [r4, #0]
		cur_move = FWD; //reset to default direction
 8002e78:	6003      	str	r3, [r0, #0]
		next_move = FWD;
		x_coord = X_START;
		y_coord = Y_START;
		prevx = X_START;
 8002e7a:	600b      	str	r3, [r1, #0]
		prevy = Y_START;
 8002e7c:	4b16      	ldr	r3, [pc, #88]	; (8002ed8 <Reset_Flags+0xac>)
void Reset_Flags() {

	if (reverse_flag == FALSE) {
		r_turnflag = FALSE; //reset turn flags
		l_turnflag = FALSE;
		dead_flag = ARRIVE;
 8002e7e:	f8cc 2000 	str.w	r2, [ip]
		cur_move = FWD; //reset to default direction
		next_move = FWD;
		x_coord = X_START;
		y_coord = Y_START;
		prevx = X_START;
		prevy = Y_START;
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	}
	else
	{
		r_turnflag = FALSE; //reset turn flags
 8002e88:	2300      	movs	r3, #0
		l_turnflag = FALSE;
 8002e8a:	6013      	str	r3, [r2, #0]
		dead_flag = ARRIVE;
 8002e8c:	2202      	movs	r2, #2
		prevx = X_START;
		prevy = Y_START;
	}
	else
	{
		r_turnflag = FALSE; //reset turn flags
 8002e8e:	f8c8 3000 	str.w	r3, [r8]
		l_turnflag = FALSE;
		dead_flag = ARRIVE;
 8002e92:	f8cc 2000 	str.w	r2, [ip]
		fwd_flag = FALSE;
 8002e96:	f8ce 3000 	str.w	r3, [lr]
		l_transition_flag = FALSE;
 8002e9a:	603b      	str	r3, [r7, #0]
		r_transition_flag = FALSE;
 8002e9c:	6033      	str	r3, [r6, #0]
		transition_flag = FALSE;
 8002e9e:	602b      	str	r3, [r5, #0]
		done_flag = FALSE;
 8002ea0:	6023      	str	r3, [r4, #0]
		cur_move = FWD; //reset to default direction
 8002ea2:	6003      	str	r3, [r0, #0]
		next_move = FWD;
 8002ea4:	600b      	str	r3, [r1, #0]
 8002ea6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002eaa:	bf00      	nop
 8002eac:	200010e0 	.word	0x200010e0
 8002eb0:	200020f0 	.word	0x200020f0
 8002eb4:	200020dc 	.word	0x200020dc
 8002eb8:	200020e0 	.word	0x200020e0
 8002ebc:	200042e8 	.word	0x200042e8
 8002ec0:	200000e8 	.word	0x200000e8
 8002ec4:	200032c8 	.word	0x200032c8
 8002ec8:	20004300 	.word	0x20004300
 8002ecc:	20000008 	.word	0x20000008
 8002ed0:	200042e0 	.word	0x200042e0
 8002ed4:	200032dc 	.word	0x200032dc
 8002ed8:	200032e0 	.word	0x200032e0
 8002edc:	200042d8 	.word	0x200042d8
 8002ee0:	2000309c 	.word	0x2000309c
 8002ee4:	20000000 	.word	0x20000000
 8002ee8:	200032d4 	.word	0x200032d4

08002eec <Transmit>:

Transmit("\r\n");
}

//takes char array
void Transmit(char message[]) {
 8002eec:	b510      	push	{r4, lr}
 8002eee:	4604      	mov	r4, r0

	int len;
	len=strlen(message);
 8002ef0:	f7fd f98e 	bl	8000210 <strlen>
	HAL_UART_Transmit(&huart1, message, len, 1000);
 8002ef4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ef8:	b282      	uxth	r2, r0
 8002efa:	4621      	mov	r1, r4
 8002efc:	4802      	ldr	r0, [pc, #8]	; (8002f08 <Transmit+0x1c>)
}
 8002efe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//takes char array
void Transmit(char message[]) {

	int len;
	len=strlen(message);
	HAL_UART_Transmit(&huart1, message, len, 1000);
 8002f02:	f7ff bca6 	b.w	8002852 <HAL_UART_Transmit>
 8002f06:	bf00      	nop
 8002f08:	20004aac 	.word	0x20004aac

08002f0c <Send_Debug>:

}

void Send_Debug(void) {

	sprintf(tx_buffer, "L Value: %d  LF Value: %d \r\nRF Value: %d R Value: %d \r\n--------------------- \r\n", dif_l, dif_lf, dif_rf, dif_r); //lf, rf, r);
 8002f0c:	4b25      	ldr	r3, [pc, #148]	; (8002fa4 <Send_Debug+0x98>)
 8002f0e:	4a26      	ldr	r2, [pc, #152]	; (8002fa8 <Send_Debug+0x9c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
	HAL_GPIO_WritePin(GPIOA, RDIC_Pin, direction);

}

void Send_Debug(void) {
 8002f12:	b513      	push	{r0, r1, r4, lr}

	sprintf(tx_buffer, "L Value: %d  LF Value: %d \r\nRF Value: %d R Value: %d \r\n--------------------- \r\n", dif_l, dif_lf, dif_rf, dif_r); //lf, rf, r);
 8002f14:	9301      	str	r3, [sp, #4]
 8002f16:	4b25      	ldr	r3, [pc, #148]	; (8002fac <Send_Debug+0xa0>)
 8002f18:	4c25      	ldr	r4, [pc, #148]	; (8002fb0 <Send_Debug+0xa4>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4925      	ldr	r1, [pc, #148]	; (8002fb4 <Send_Debug+0xa8>)
 8002f1e:	4620      	mov	r0, r4
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	4b25      	ldr	r3, [pc, #148]	; (8002fb8 <Send_Debug+0xac>)
 8002f24:	6812      	ldr	r2, [r2, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f002 fc74 	bl	8005814 <siprintf>
	Transmit(tx_buffer); //transmitm the message above
 8002f2c:	4620      	mov	r0, r4
 8002f2e:	f7ff ffdd 	bl	8002eec <Transmit>
	sprintf(tx_buffer, "Left Count Value: %d \r\nRight Count Value %d \r\n-----------------\r\n", l_count, r_count);
 8002f32:	4b22      	ldr	r3, [pc, #136]	; (8002fbc <Send_Debug+0xb0>)
 8002f34:	4a22      	ldr	r2, [pc, #136]	; (8002fc0 <Send_Debug+0xb4>)
 8002f36:	4620      	mov	r0, r4
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6812      	ldr	r2, [r2, #0]
 8002f3c:	4921      	ldr	r1, [pc, #132]	; (8002fc4 <Send_Debug+0xb8>)
 8002f3e:	f002 fc69 	bl	8005814 <siprintf>
	Transmit(tx_buffer); //transmit the message above
 8002f42:	4620      	mov	r0, r4
 8002f44:	f7ff ffd2 	bl	8002eec <Transmit>
	sprintf(tx_buffer, "Prev_L: %d \r\nPrev R %d \r\n-----------------\r\n", prev_l_count, prev_r_count);
 8002f48:	4b1f      	ldr	r3, [pc, #124]	; (8002fc8 <Send_Debug+0xbc>)
 8002f4a:	4a20      	ldr	r2, [pc, #128]	; (8002fcc <Send_Debug+0xc0>)
 8002f4c:	4620      	mov	r0, r4
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	491f      	ldr	r1, [pc, #124]	; (8002fd0 <Send_Debug+0xc4>)
 8002f54:	f002 fc5e 	bl	8005814 <siprintf>
	Transmit(tx_buffer); //transmit the message above
 8002f58:	4620      	mov	r0, r4
 8002f5a:	f7ff ffc7 	bl	8002eec <Transmit>
	sprintf(tx_buffer, "cur_move: %d \r\nnext_move: %d\r\n-----------------\r\n", cur_move, next_move);
 8002f5e:	4b1d      	ldr	r3, [pc, #116]	; (8002fd4 <Send_Debug+0xc8>)
 8002f60:	4a1d      	ldr	r2, [pc, #116]	; (8002fd8 <Send_Debug+0xcc>)
 8002f62:	4620      	mov	r0, r4
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6812      	ldr	r2, [r2, #0]
 8002f68:	491c      	ldr	r1, [pc, #112]	; (8002fdc <Send_Debug+0xd0>)
 8002f6a:	f002 fc53 	bl	8005814 <siprintf>
	Transmit(tx_buffer);
 8002f6e:	4620      	mov	r0, r4
 8002f70:	f7ff ffbc 	bl	8002eec <Transmit>
	sprintf(tx_buffer, "Current Direction: %d \r\n--------------------- \r\n", cur_dir);
 8002f74:	4b1a      	ldr	r3, [pc, #104]	; (8002fe0 <Send_Debug+0xd4>)
 8002f76:	491b      	ldr	r1, [pc, #108]	; (8002fe4 <Send_Debug+0xd8>)
 8002f78:	4620      	mov	r0, r4
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	f002 fc4a 	bl	8005814 <siprintf>
	Transmit(tx_buffer);
 8002f80:	4620      	mov	r0, r4
 8002f82:	f7ff ffb3 	bl	8002eec <Transmit>
	sprintf(tx_buffer, "X COORD: %d    Y COORD: %d \r\n--------------------- \r\n", x_coord, y_coord);
 8002f86:	4b18      	ldr	r3, [pc, #96]	; (8002fe8 <Send_Debug+0xdc>)
 8002f88:	4a18      	ldr	r2, [pc, #96]	; (8002fec <Send_Debug+0xe0>)
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6812      	ldr	r2, [r2, #0]
 8002f90:	4917      	ldr	r1, [pc, #92]	; (8002ff0 <Send_Debug+0xe4>)
 8002f92:	f002 fc3f 	bl	8005814 <siprintf>
	Transmit(tx_buffer);
 8002f96:	4620      	mov	r0, r4
	//sprintf(tx_buffer, "RIGHT Turn Flag: %d \r\nLEFT Turn Flag: %d \r\n-----------------------", r_turnflag, l_turnflag);
}
 8002f98:	b002      	add	sp, #8
 8002f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	sprintf(tx_buffer, "cur_move: %d \r\nnext_move: %d\r\n-----------------\r\n", cur_move, next_move);
	Transmit(tx_buffer);
	sprintf(tx_buffer, "Current Direction: %d \r\n--------------------- \r\n", cur_dir);
	Transmit(tx_buffer);
	sprintf(tx_buffer, "X COORD: %d    Y COORD: %d \r\n--------------------- \r\n", x_coord, y_coord);
	Transmit(tx_buffer);
 8002f9e:	f7ff bfa5 	b.w	8002eec <Transmit>
 8002fa2:	bf00      	nop
 8002fa4:	200020e4 	.word	0x200020e4
 8002fa8:	20002088 	.word	0x20002088
 8002fac:	200042d4 	.word	0x200042d4
 8002fb0:	2000499c 	.word	0x2000499c
 8002fb4:	080060d9 	.word	0x080060d9
 8002fb8:	200042fc 	.word	0x200042fc
 8002fbc:	20003160 	.word	0x20003160
 8002fc0:	200000e4 	.word	0x200000e4
 8002fc4:	08006129 	.word	0x08006129
 8002fc8:	20004398 	.word	0x20004398
 8002fcc:	2000439c 	.word	0x2000439c
 8002fd0:	0800616b 	.word	0x0800616b
 8002fd4:	200032c8 	.word	0x200032c8
 8002fd8:	200000e8 	.word	0x200000e8
 8002fdc:	08006198 	.word	0x08006198
 8002fe0:	200042e0 	.word	0x200042e0
 8002fe4:	080061ca 	.word	0x080061ca
 8002fe8:	20000008 	.word	0x20000008
 8002fec:	20004300 	.word	0x20004300
 8002ff0:	080061fb 	.word	0x080061fb

08002ff4 <Save_State>:
	stop_flag = TRUE;
}

void Save_State(void) {

	l_debug[dbg_count] = front_l;
 8002ff4:	491d      	ldr	r1, [pc, #116]	; (800306c <Save_State+0x78>)
 8002ff6:	4a1e      	ldr	r2, [pc, #120]	; (8003070 <Save_State+0x7c>)
 8002ff8:	680b      	ldr	r3, [r1, #0]
 8002ffa:	6810      	ldr	r0, [r2, #0]
 8002ffc:	4a1d      	ldr	r2, [pc, #116]	; (8003074 <Save_State+0x80>)
 8002ffe:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	r_debug[dbg_count] = front_r;
 8003002:	4a1d      	ldr	r2, [pc, #116]	; (8003078 <Save_State+0x84>)
 8003004:	6810      	ldr	r0, [r2, #0]
 8003006:	4a1d      	ldr	r2, [pc, #116]	; (800307c <Save_State+0x88>)
 8003008:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	rf_debug[dbg_count] = rf_side;
 800300c:	4a1c      	ldr	r2, [pc, #112]	; (8003080 <Save_State+0x8c>)
 800300e:	6810      	ldr	r0, [r2, #0]
 8003010:	4a1c      	ldr	r2, [pc, #112]	; (8003084 <Save_State+0x90>)
 8003012:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	lf_debug[dbg_count] = lf_side;
 8003016:	4a1c      	ldr	r2, [pc, #112]	; (8003088 <Save_State+0x94>)
 8003018:	6810      	ldr	r0, [r2, #0]
 800301a:	4a1c      	ldr	r2, [pc, #112]	; (800308c <Save_State+0x98>)
 800301c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	cur_debug[dbg_count] = cur_move;
 8003020:	4a1b      	ldr	r2, [pc, #108]	; (8003090 <Save_State+0x9c>)
 8003022:	6810      	ldr	r0, [r2, #0]
 8003024:	4a1b      	ldr	r2, [pc, #108]	; (8003094 <Save_State+0xa0>)
 8003026:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	turn_debug[dbg_count] = next_move;
 800302a:	4a1b      	ldr	r2, [pc, #108]	; (8003098 <Save_State+0xa4>)
 800302c:	6810      	ldr	r0, [r2, #0]
 800302e:	4a1b      	ldr	r2, [pc, #108]	; (800309c <Save_State+0xa8>)
 8003030:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	l_count_debug[dbg_count] = l_count;
 8003034:	4a1a      	ldr	r2, [pc, #104]	; (80030a0 <Save_State+0xac>)
 8003036:	6810      	ldr	r0, [r2, #0]
 8003038:	4a1a      	ldr	r2, [pc, #104]	; (80030a4 <Save_State+0xb0>)
 800303a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	r_count_debug[dbg_count] = r_count;
 800303e:	4a1a      	ldr	r2, [pc, #104]	; (80030a8 <Save_State+0xb4>)
 8003040:	6810      	ldr	r0, [r2, #0]
 8003042:	4a1a      	ldr	r2, [pc, #104]	; (80030ac <Save_State+0xb8>)
 8003044:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	prev_l_debug[dbg_count] = prev_l_count;
 8003048:	4a19      	ldr	r2, [pc, #100]	; (80030b0 <Save_State+0xbc>)
 800304a:	6810      	ldr	r0, [r2, #0]
 800304c:	4a19      	ldr	r2, [pc, #100]	; (80030b4 <Save_State+0xc0>)
 800304e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	prev_r_debug[dbg_count] = prev_r_count;
 8003052:	4a19      	ldr	r2, [pc, #100]	; (80030b8 <Save_State+0xc4>)
 8003054:	6810      	ldr	r0, [r2, #0]
 8003056:	4a19      	ldr	r2, [pc, #100]	; (80030bc <Save_State+0xc8>)
 8003058:	f842 0023 	str.w	r0, [r2, r3, lsl #2]

	dbg_count = (dbg_count+1) % DBG_BUFFER;
 800305c:	3301      	adds	r3, #1
 800305e:	2014      	movs	r0, #20
 8003060:	fb93 f2f0 	sdiv	r2, r3, r0
 8003064:	fb00 3312 	mls	r3, r0, r2, r3
 8003068:	600b      	str	r3, [r1, #0]
 800306a:	4770      	bx	lr
 800306c:	2000316c 	.word	0x2000316c
 8003070:	20003098 	.word	0x20003098
 8003074:	2000208c 	.word	0x2000208c
 8003078:	200042f8 	.word	0x200042f8
 800307c:	200031d4 	.word	0x200031d4
 8003080:	200000e0 	.word	0x200000e0
 8003084:	20003110 	.word	0x20003110
 8003088:	200032d8 	.word	0x200032d8
 800308c:	20003224 	.word	0x20003224
 8003090:	200000e8 	.word	0x200000e8
 8003094:	20004284 	.word	0x20004284
 8003098:	200032c8 	.word	0x200032c8
 800309c:	20003278 	.word	0x20003278
 80030a0:	200000e4 	.word	0x200000e4
 80030a4:	20001090 	.word	0x20001090
 80030a8:	20003160 	.word	0x20003160
 80030ac:	20003180 	.word	0x20003180
 80030b0:	2000439c 	.word	0x2000439c
 80030b4:	20000090 	.word	0x20000090
 80030b8:	20004398 	.word	0x20004398
 80030bc:	200030c0 	.word	0x200030c0

080030c0 <Get_Lowest_Square>:


return;
}

int Get_Lowest_Square(int x, int y) { //gets lowest square
 80030c0:	b5f0      	push	{r4, r5, r6, r7, lr}

int values[5] = {127, 127, 127, 127, 127}; //first value is default 127. Then it goes: up, down, left, right
 80030c2:	4f2e      	ldr	r7, [pc, #184]	; (800317c <Get_Lowest_Square+0xbc>)


return;
}

int Get_Lowest_Square(int x, int y) { //gets lowest square
 80030c4:	b087      	sub	sp, #28
 80030c6:	4604      	mov	r4, r0
 80030c8:	460d      	mov	r5, r1

int values[5] = {127, 127, 127, 127, 127}; //first value is default 127. Then it goes: up, down, left, right
 80030ca:	ae01      	add	r6, sp, #4
int min = 0; //make sure there is default value

if (y > 0 && horiz_walls[x][y-1] != TRUE) { //if row is greater than zero
 80030cc:	2d00      	cmp	r5, #0
return;
}

int Get_Lowest_Square(int x, int y) { //gets lowest square

int values[5] = {127, 127, 127, 127, 127}; //first value is default 127. Then it goes: up, down, left, right
 80030ce:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80030d0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	a901      	add	r1, sp, #4
 80030d6:	4a2a      	ldr	r2, [pc, #168]	; (8003180 <Get_Lowest_Square+0xc0>)
 80030d8:	6033      	str	r3, [r6, #0]
 80030da:	ea4f 0344 	mov.w	r3, r4, lsl #1
int min = 0; //make sure there is default value

if (y > 0 && horiz_walls[x][y-1] != TRUE) { //if row is greater than zero
 80030de:	dc0b      	bgt.n	80030f8 <Get_Lowest_Square+0x38>
	values[1] = maze[x][y - 1]; //up square
}

if (y < Y_MAZE_SIZE - 1 && horiz_walls[x][y] != TRUE) {
 80030e0:	441a      	add	r2, r3
 80030e2:	5d52      	ldrb	r2, [r2, r5]
 80030e4:	2a01      	cmp	r2, #1
 80030e6:	d014      	beq.n	8003112 <Get_Lowest_Square+0x52>
	values[2] = maze[x][y + 1]; //down square
 80030e8:	1c68      	adds	r0, r5, #1
 80030ea:	191a      	adds	r2, r3, r4
 80030ec:	4402      	add	r2, r0
 80030ee:	4825      	ldr	r0, [pc, #148]	; (8003184 <Get_Lowest_Square+0xc4>)
 80030f0:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80030f4:	9203      	str	r2, [sp, #12]
 80030f6:	e00c      	b.n	8003112 <Get_Lowest_Square+0x52>
int Get_Lowest_Square(int x, int y) { //gets lowest square

int values[5] = {127, 127, 127, 127, 127}; //first value is default 127. Then it goes: up, down, left, right
int min = 0; //make sure there is default value

if (y > 0 && horiz_walls[x][y-1] != TRUE) { //if row is greater than zero
 80030f8:	1e68      	subs	r0, r5, #1
 80030fa:	18d6      	adds	r6, r2, r3
 80030fc:	5c36      	ldrb	r6, [r6, r0]
 80030fe:	2e01      	cmp	r6, #1
 8003100:	d005      	beq.n	800310e <Get_Lowest_Square+0x4e>
	values[1] = maze[x][y - 1]; //up square
 8003102:	191e      	adds	r6, r3, r4
 8003104:	4430      	add	r0, r6
 8003106:	4e1f      	ldr	r6, [pc, #124]	; (8003184 <Get_Lowest_Square+0xc4>)
 8003108:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 800310c:	9002      	str	r0, [sp, #8]
}

if (y < Y_MAZE_SIZE - 1 && horiz_walls[x][y] != TRUE) {
 800310e:	2d01      	cmp	r5, #1
 8003110:	d0e6      	beq.n	80030e0 <Get_Lowest_Square+0x20>
	values[2] = maze[x][y + 1]; //down square
}

if (x > 0 && vert_walls[x - 1][y] != TRUE) {
 8003112:	2c00      	cmp	r4, #0
 8003114:	481c      	ldr	r0, [pc, #112]	; (8003188 <Get_Lowest_Square+0xc8>)
 8003116:	dc0d      	bgt.n	8003134 <Get_Lowest_Square+0x74>
	values[3] = maze[x - 1][y]; //left square
}

if (x < X_MAZE_SIZE - 1 && vert_walls[x][y] != TRUE) {
 8003118:	4423      	add	r3, r4
 800311a:	4403      	add	r3, r0
 800311c:	5d5b      	ldrb	r3, [r3, r5]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d016      	beq.n	8003150 <Get_Lowest_Square+0x90>
	values[4] = maze[x + 1][y]; //right square
 8003122:	3401      	adds	r4, #1
 8003124:	4b17      	ldr	r3, [pc, #92]	; (8003184 <Get_Lowest_Square+0xc4>)
 8003126:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800312a:	442c      	add	r4, r5
 800312c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003130:	9305      	str	r3, [sp, #20]
 8003132:	e00d      	b.n	8003150 <Get_Lowest_Square+0x90>

if (y < Y_MAZE_SIZE - 1 && horiz_walls[x][y] != TRUE) {
	values[2] = maze[x][y + 1]; //down square
}

if (x > 0 && vert_walls[x - 1][y] != TRUE) {
 8003134:	1e62      	subs	r2, r4, #1
 8003136:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800313a:	1886      	adds	r6, r0, r2
 800313c:	5d76      	ldrb	r6, [r6, r5]
 800313e:	2e01      	cmp	r6, #1
	values[3] = maze[x - 1][y]; //left square
 8003140:	bf1f      	itttt	ne
 8003142:	1952      	addne	r2, r2, r5
 8003144:	4e0f      	ldrne	r6, [pc, #60]	; (8003184 <Get_Lowest_Square+0xc4>)
 8003146:	f856 2022 	ldrne.w	r2, [r6, r2, lsl #2]
 800314a:	9204      	strne	r2, [sp, #16]
}

if (x < X_MAZE_SIZE - 1 && vert_walls[x][y] != TRUE) {
 800314c:	2c04      	cmp	r4, #4
 800314e:	dde3      	ble.n	8003118 <Get_Lowest_Square+0x58>
	values[4] = maze[x + 1][y]; //right square
}

for (int i = 1; i < 5; i++) { //get the index of the lowest square. Should be 127 by default
 8003150:	2201      	movs	r2, #1
}

int Get_Lowest_Square(int x, int y) { //gets lowest square

int values[5] = {127, 127, 127, 127, 127}; //first value is default 127. Then it goes: up, down, left, right
int min = 0; //make sure there is default value
 8003152:	2300      	movs	r3, #0
if (x < X_MAZE_SIZE - 1 && vert_walls[x][y] != TRUE) {
	values[4] = maze[x + 1][y]; //right square
}

for (int i = 1; i < 5; i++) { //get the index of the lowest square. Should be 127 by default
if(values[i] < values[min]) {
 8003154:	a806      	add	r0, sp, #24
 8003156:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
 800315a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800315e:	f850 0c14 	ldr.w	r0, [r0, #-20]
 8003162:	4284      	cmp	r4, r0
 8003164:	bfb8      	it	lt
 8003166:	4613      	movlt	r3, r2

if (x < X_MAZE_SIZE - 1 && vert_walls[x][y] != TRUE) {
	values[4] = maze[x + 1][y]; //right square
}

for (int i = 1; i < 5; i++) { //get the index of the lowest square. Should be 127 by default
 8003168:	3201      	adds	r2, #1
 800316a:	2a05      	cmp	r2, #5
 800316c:	d1f2      	bne.n	8003154 <Get_Lowest_Square+0x94>
if(values[i] < values[min]) {
	min = i;
}
}

return values[min];
 800316e:	aa06      	add	r2, sp, #24
 8003170:	eb02 0383 	add.w	r3, r2, r3, lsl #2
}
 8003174:	f853 0c14 	ldr.w	r0, [r3, #-20]
 8003178:	b007      	add	sp, #28
 800317a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800317c:	0800609c 	.word	0x0800609c
 8003180:	200042ec 	.word	0x200042ec
 8003184:	200043dc 	.word	0x200043dc
 8003188:	200030a4 	.word	0x200030a4

0800318c <Update_Position>:
	break;

}
}

void Update_Position() { //updates position and direction so read walls is good
 800318c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	visited_squares[x_coord][y_coord] = TRUE;
 800318e:	4c4c      	ldr	r4, [pc, #304]	; (80032c0 <Update_Position+0x134>)
 8003190:	2601      	movs	r6, #1
 8003192:	484c      	ldr	r0, [pc, #304]	; (80032c4 <Update_Position+0x138>)
 8003194:	6823      	ldr	r3, [r4, #0]
 8003196:	6802      	ldr	r2, [r0, #0]
 8003198:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800319c:	4d4a      	ldr	r5, [pc, #296]	; (80032c8 <Update_Position+0x13c>)
 800319e:	4411      	add	r1, r2
 80031a0:	f845 6021 	str.w	r6, [r5, r1, lsl #2]

	if (next_move != DEAD) {
 80031a4:	4949      	ldr	r1, [pc, #292]	; (80032cc <Update_Position+0x140>)
 80031a6:	680e      	ldr	r6, [r1, #0]
 80031a8:	2e03      	cmp	r6, #3
		prevx = x_coord; //save previous values. Used for dead end
 80031aa:	bf1f      	itttt	ne
 80031ac:	4948      	ldrne	r1, [pc, #288]	; (80032d0 <Update_Position+0x144>)
 80031ae:	600b      	strne	r3, [r1, #0]
		prevy = y_coord;
 80031b0:	4948      	ldrne	r1, [pc, #288]	; (80032d4 <Update_Position+0x148>)
 80031b2:	600a      	strne	r2, [r1, #0]
	}

	switch (cur_dir) {
 80031b4:	4948      	ldr	r1, [pc, #288]	; (80032d8 <Update_Position+0x14c>)
 80031b6:	680d      	ldr	r5, [r1, #0]
 80031b8:	2d03      	cmp	r5, #3
 80031ba:	d83d      	bhi.n	8003238 <Update_Position+0xac>
 80031bc:	e8df f005 	tbb	[pc, r5]
 80031c0:	261b0c02 	.word	0x261b0c02
	case NORTH:
		switch(next_move) {
 80031c4:	2e03      	cmp	r6, #3
 80031c6:	d837      	bhi.n	8003238 <Update_Position+0xac>
 80031c8:	e8df f006 	tbb	[pc, r6]
 80031cc:	04260f02 	.word	0x04260f02
		case FWD:
			x_coord = x_coord + NORTH_X;
			y_coord = y_coord + NORTH_Y;
 80031d0:	3a01      	subs	r2, #1
 80031d2:	e008      	b.n	80031e6 <Update_Position+0x5a>
			x_coord = x_coord + EAST_X;
			y_coord = y_coord + EAST_Y;
			cur_dir = EAST;
			break;
		case DEAD:
			cur_dir = SOUTH;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e02d      	b.n	8003234 <Update_Position+0xa8>
			break;
		}
		break;

	case SOUTH:
		switch(next_move) {
 80031d8:	2e03      	cmp	r6, #3
 80031da:	d82d      	bhi.n	8003238 <Update_Position+0xac>
 80031dc:	e8df f006 	tbb	[pc, r6]
 80031e0:	09051c02 	.word	0x09051c02
		case FWD:
			x_coord = x_coord + SOUTH_X;
			y_coord = y_coord + SOUTH_Y;
 80031e4:	3201      	adds	r2, #1
 80031e6:	6002      	str	r2, [r0, #0]
			break;
 80031e8:	e038      	b.n	800325c <Update_Position+0xd0>
			x_coord = x_coord + EAST_X;
			y_coord = y_coord + EAST_Y;
			cur_dir = EAST;
			break;
		case RIGHT:
			x_coord = x_coord + WEST_X;
 80031ea:	3b01      	subs	r3, #1
 80031ec:	6023      	str	r3, [r4, #0]
			y_coord = y_coord + WEST_Y;
			cur_dir = WEST;
 80031ee:	2302      	movs	r3, #2
 80031f0:	e019      	b.n	8003226 <Update_Position+0x9a>
			break;
		case DEAD:
			cur_dir = NORTH;
 80031f2:	2300      	movs	r3, #0
 80031f4:	e01e      	b.n	8003234 <Update_Position+0xa8>
			break;
		}
		break; //bitch retard enema asshole kockface

	case WEST:
		switch(next_move) {
 80031f6:	2e03      	cmp	r6, #3
 80031f8:	d81e      	bhi.n	8003238 <Update_Position+0xac>
 80031fa:	e8df f006 	tbb	[pc, r6]
 80031fe:	1602      	.short	0x1602
 8003200:	0511      	.short	0x0511
		case FWD:
			x_coord = x_coord + WEST_X;
 8003202:	3b01      	subs	r3, #1
 8003204:	6023      	str	r3, [r4, #0]
			y_coord = y_coord + WEST_Y;
			break;
 8003206:	e029      	b.n	800325c <Update_Position+0xd0>
			x_coord = x_coord + NORTH_X;
			y_coord = y_coord + NORTH_Y;
			cur_dir = NORTH;
			break;
		case DEAD:
			cur_dir = EAST;
 8003208:	2303      	movs	r3, #3
 800320a:	e013      	b.n	8003234 <Update_Position+0xa8>
			break;
		}
		break;

	case EAST:
		switch(next_move) {
 800320c:	2e03      	cmp	r6, #3
 800320e:	d813      	bhi.n	8003238 <Update_Position+0xac>
 8003210:	e8df f006 	tbb	[pc, r6]
 8003214:	0f0b0602 	.word	0x0f0b0602
		case FWD:
			x_coord = x_coord + EAST_X;
 8003218:	3301      	adds	r3, #1
 800321a:	6023      	str	r3, [r4, #0]
			y_coord = y_coord + EAST_Y;
			cur_dir = EAST;
 800321c:	2303      	movs	r3, #3
 800321e:	e002      	b.n	8003226 <Update_Position+0x9a>
			break;
		case LEFT:
			x_coord = x_coord + NORTH_X;
			y_coord = y_coord + NORTH_Y;
 8003220:	3a01      	subs	r2, #1
			cur_dir = NORTH;
 8003222:	2300      	movs	r3, #0
			y_coord = y_coord + EAST_Y;
			cur_dir = EAST;
			break;
		case LEFT:
			x_coord = x_coord + NORTH_X;
			y_coord = y_coord + NORTH_Y;
 8003224:	6002      	str	r2, [r0, #0]
			cur_dir = NORTH;
 8003226:	600b      	str	r3, [r1, #0]
			break;
 8003228:	e018      	b.n	800325c <Update_Position+0xd0>
		case RIGHT:
			x_coord = x_coord + SOUTH_X;
			y_coord = y_coord + SOUTH_Y;
 800322a:	3201      	adds	r2, #1
			cur_dir = SOUTH;
 800322c:	2301      	movs	r3, #1
			y_coord = y_coord + NORTH_Y;
			cur_dir = NORTH;
			break;
		case RIGHT:
			x_coord = x_coord + SOUTH_X;
			y_coord = y_coord + SOUTH_Y;
 800322e:	6002      	str	r2, [r0, #0]
 8003230:	e7f9      	b.n	8003226 <Update_Position+0x9a>
			cur_dir = SOUTH;
			break;
		case DEAD:
			cur_dir = WEST;
 8003232:	2302      	movs	r3, #2
 8003234:	600b      	str	r3, [r1, #0]
			break;
 8003236:	e001      	b.n	800323c <Update_Position+0xb0>
		}
		break;
	}

	if (next_move == DEAD) {
 8003238:	2e03      	cmp	r6, #3
 800323a:	d10f      	bne.n	800325c <Update_Position+0xd0>
		x_coord = prevx;
 800323c:	4b24      	ldr	r3, [pc, #144]	; (80032d0 <Update_Position+0x144>)
		y_coord = prevy;
		sprintf(tx_buffer, "|||DEAD END||| \r\nX VALUE: %d  Y VALUE: %d \r\n", x_coord, y_coord);
 800323e:	4927      	ldr	r1, [pc, #156]	; (80032dc <Update_Position+0x150>)
		}
		break;
	}

	if (next_move == DEAD) {
		x_coord = prevx;
 8003240:	681a      	ldr	r2, [r3, #0]
		y_coord = prevy;
 8003242:	4b24      	ldr	r3, [pc, #144]	; (80032d4 <Update_Position+0x148>)
		}
		break;
	}

	if (next_move == DEAD) {
		x_coord = prevx;
 8003244:	6022      	str	r2, [r4, #0]
		y_coord = prevy;
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6003      	str	r3, [r0, #0]
		sprintf(tx_buffer, "|||DEAD END||| \r\nX VALUE: %d  Y VALUE: %d \r\n", x_coord, y_coord);
 800324a:	4825      	ldr	r0, [pc, #148]	; (80032e0 <Update_Position+0x154>)
 800324c:	f002 fae2 	bl	8005814 <siprintf>
		Transmit(tx_buffer);
 8003250:	4823      	ldr	r0, [pc, #140]	; (80032e0 <Update_Position+0x154>)
	}

	sprintf(tx_buffer, "|||DECISION  %d||| X VALUE: %d  Y VALUE: %d  DIRECTION: %d  NEXT: %d \r\n", dbg_count + 1, x_coord, y_coord, cur_dir, next_move);
	Transmit(tx_buffer);

}
 8003252:	b004      	add	sp, #16
 8003254:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

	if (next_move == DEAD) {
		x_coord = prevx;
		y_coord = prevy;
		sprintf(tx_buffer, "|||DEAD END||| \r\nX VALUE: %d  Y VALUE: %d \r\n", x_coord, y_coord);
		Transmit(tx_buffer);
 8003258:	f7ff be48 	b.w	8002eec <Transmit>
		return;
	}


	if (maze[x_coord][y_coord] == 0) {
 800325c:	6822      	ldr	r2, [r4, #0]
 800325e:	6803      	ldr	r3, [r0, #0]
 8003260:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 8003264:	4c1f      	ldr	r4, [pc, #124]	; (80032e4 <Update_Position+0x158>)
 8003266:	4418      	add	r0, r3
 8003268:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800326c:	b9a0      	cbnz	r0, 8003298 <Update_Position+0x10c>
		if (reverse_flag == FALSE) {
 800326e:	481e      	ldr	r0, [pc, #120]	; (80032e8 <Update_Position+0x15c>)
 8003270:	6800      	ldr	r0, [r0, #0]
 8003272:	b9c0      	cbnz	r0, 80032a6 <Update_Position+0x11a>
			done_flag = TRUE;
 8003274:	4c1d      	ldr	r4, [pc, #116]	; (80032ec <Update_Position+0x160>)
 8003276:	2001      	movs	r0, #1
 8003278:	6020      	str	r0, [r4, #0]
			switch (cur_dir) {
 800327a:	680c      	ldr	r4, [r1, #0]
 800327c:	2c03      	cmp	r4, #3
 800327e:	d809      	bhi.n	8003294 <Update_Position+0x108>
 8003280:	e8df f004 	tbb	[pc, r4]
 8003284:	06040207 	.word	0x06040207
			case NORTH: cur_dir = SOUTH; break;
			case SOUTH: cur_dir = NORTH; break;
 8003288:	2000      	movs	r0, #0
 800328a:	e002      	b.n	8003292 <Update_Position+0x106>
			case WEST: cur_dir = EAST; break;
 800328c:	2003      	movs	r0, #3
 800328e:	e000      	b.n	8003292 <Update_Position+0x106>
			case EAST: cur_dir = WEST; break;
 8003290:	2002      	movs	r0, #2
 8003292:	6008      	str	r0, [r1, #0]
			}
			sprintf(tx_buffer, "|||FINAL||| X VALUE: %d  Y VALUE: %d \r\n", x_coord, y_coord);
 8003294:	4916      	ldr	r1, [pc, #88]	; (80032f0 <Update_Position+0x164>)
 8003296:	e7d8      	b.n	800324a <Update_Position+0xbe>
			Transmit(tx_buffer);
			return;
		}

	}
	else if (x_coord < 0 || y_coord < 0 || x_coord >= X_MAZE_SIZE || y_coord >= Y_MAZE_SIZE) {
 8003298:	2a05      	cmp	r2, #5
 800329a:	d801      	bhi.n	80032a0 <Update_Position+0x114>
 800329c:	2b02      	cmp	r3, #2
 800329e:	d902      	bls.n	80032a6 <Update_Position+0x11a>
		stop_flag = TRUE;
 80032a0:	2401      	movs	r4, #1
 80032a2:	4814      	ldr	r0, [pc, #80]	; (80032f4 <Update_Position+0x168>)
 80032a4:	6004      	str	r4, [r0, #0]
	}

	sprintf(tx_buffer, "|||DECISION  %d||| X VALUE: %d  Y VALUE: %d  DIRECTION: %d  NEXT: %d \r\n", dbg_count + 1, x_coord, y_coord, cur_dir, next_move);
 80032a6:	4814      	ldr	r0, [pc, #80]	; (80032f8 <Update_Position+0x16c>)
 80032a8:	6800      	ldr	r0, [r0, #0]
 80032aa:	9602      	str	r6, [sp, #8]
 80032ac:	6809      	ldr	r1, [r1, #0]
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	4613      	mov	r3, r2
 80032b2:	9101      	str	r1, [sp, #4]
 80032b4:	1c42      	adds	r2, r0, #1
 80032b6:	4911      	ldr	r1, [pc, #68]	; (80032fc <Update_Position+0x170>)
 80032b8:	4809      	ldr	r0, [pc, #36]	; (80032e0 <Update_Position+0x154>)
 80032ba:	f002 faab 	bl	8005814 <siprintf>
 80032be:	e7c7      	b.n	8003250 <Update_Position+0xc4>
 80032c0:	20004300 	.word	0x20004300
 80032c4:	20000008 	.word	0x20000008
 80032c8:	200050b0 	.word	0x200050b0
 80032cc:	200032c8 	.word	0x200032c8
 80032d0:	200032dc 	.word	0x200032dc
 80032d4:	200032e0 	.word	0x200032e0
 80032d8:	200042e0 	.word	0x200042e0
 80032dc:	08006396 	.word	0x08006396
 80032e0:	2000499c 	.word	0x2000499c
 80032e4:	200043dc 	.word	0x200043dc
 80032e8:	200042d8 	.word	0x200042d8
 80032ec:	200042e8 	.word	0x200042e8
 80032f0:	08006326 	.word	0x08006326
 80032f4:	20000004 	.word	0x20000004
 80032f8:	2000316c 	.word	0x2000316c
 80032fc:	0800634e 	.word	0x0800634e

08003300 <Calc_Optimal>:
	Transmit(tx_buffer);

}

void Calc_Optimal() {
 8003300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

int x = X_START;
int y = Y_START;

int val = maze[x][y];
int next_values[4] = {-1, -1, -1, -1};
 8003304:	4b71      	ldr	r3, [pc, #452]	; (80034cc <Calc_Optimal+0x1cc>)
	sprintf(tx_buffer, "|||DECISION  %d||| X VALUE: %d  Y VALUE: %d  DIRECTION: %d  NEXT: %d \r\n", dbg_count + 1, x_coord, y_coord, cur_dir, next_move);
	Transmit(tx_buffer);

}

void Calc_Optimal() {
 8003306:	b089      	sub	sp, #36	; 0x24

int val = maze[x][y];
int next_values[4] = {-1, -1, -1, -1};
int index = 0;

optimal_x[counter] = x;
 8003308:	2400      	movs	r4, #0
optimal_y[counter] = y;
 800330a:	2502      	movs	r5, #2

int x = X_START;
int y = Y_START;

int val = maze[x][y];
int next_values[4] = {-1, -1, -1, -1};
 800330c:	f10d 0a10 	add.w	sl, sp, #16
int index = 0;

optimal_x[counter] = x;
 8003310:	4f6f      	ldr	r7, [pc, #444]	; (80034d0 <Calc_Optimal+0x1d0>)
optimal_y[counter] = y;
 8003312:	4e70      	ldr	r6, [pc, #448]	; (80034d4 <Calc_Optimal+0x1d4>)

int val = maze[x][y];
int next_values[4] = {-1, -1, -1, -1};
int index = 0;

optimal_x[counter] = x;
 8003314:	603c      	str	r4, [r7, #0]
optimal_y[counter] = y;
 8003316:	6035      	str	r5, [r6, #0]

int x = X_START;
int y = Y_START;

int val = maze[x][y];
int next_values[4] = {-1, -1, -1, -1};
 8003318:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800331a:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
int index = 0;

optimal_x[counter] = x;
optimal_y[counter] = y;

Floodfill(FALSE);
 800331e:	4620      	mov	r0, r4
 8003320:	f000 f982 	bl	8003628 <Floodfill>

int cur_dir = START_DIR;
int counter = 0;

int x = X_START;
int y = Y_START;
 8003324:	462b      	mov	r3, r5
 8003326:	496c      	ldr	r1, [pc, #432]	; (80034d8 <Calc_Optimal+0x1d8>)

int val = maze[x][y];
int next_values[4] = {-1, -1, -1, -1};
int index = 0;
 8003328:	4620      	mov	r0, r4
const int E[2] = {1, 0};

int cur_dir = START_DIR;
int counter = 0;

int x = X_START;
 800332a:	4622      	mov	r2, r4
const int S[2] = {0, 1};
const int W[2] = {-1, 0};
const int E[2] = {1, 0};

int cur_dir = START_DIR;
int counter = 0;
 800332c:	4625      	mov	r5, r4

Floodfill(FALSE);

while(maze[x][y] != 0) {

next_values[0] = 127;
 800332e:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
	case(0):
			optimal_path[counter] = RIGH;
			cur_dir = NORTH;
	break;
	case(1):
			optimal_path[counter] = LEF;
 8003332:	f04f 0c6c 	mov.w	ip, #108	; 0x6c
 8003336:	9702      	str	r7, [sp, #8]
 8003338:	9603      	str	r6, [sp, #12]
optimal_x[counter] = x;
optimal_y[counter] = y;

Floodfill(FALSE);

while(maze[x][y] != 0) {
 800333a:	0056      	lsls	r6, r2, #1
 800333c:	18b7      	adds	r7, r6, r2
 800333e:	eb07 0803 	add.w	r8, r7, r3
 8003342:	9701      	str	r7, [sp, #4]
 8003344:	4f65      	ldr	r7, [pc, #404]	; (80034dc <Calc_Optimal+0x1dc>)
 8003346:	f857 8028 	ldr.w	r8, [r7, r8, lsl #2]
 800334a:	f1b8 0f00 	cmp.w	r8, #0
 800334e:	f000 809c 	beq.w	800348a <Calc_Optimal+0x18a>
next_values[2] = 127;
next_values[3] = 127;

val = maze[x][y];

if (y > 0 && horiz_walls[x][y-1] != TRUE) { //if row is greater than zero
 8003352:	2b00      	cmp	r3, #0

Floodfill(FALSE);

while(maze[x][y] != 0) {

next_values[0] = 127;
 8003354:	f8cd e010 	str.w	lr, [sp, #16]
next_values[1] = 127;
 8003358:	f8cd e014 	str.w	lr, [sp, #20]
next_values[2] = 127;
 800335c:	f8cd e018 	str.w	lr, [sp, #24]
next_values[3] = 127;
 8003360:	f8cd e01c 	str.w	lr, [sp, #28]

val = maze[x][y];

if (y > 0 && horiz_walls[x][y-1] != TRUE) { //if row is greater than zero
 8003364:	dc10      	bgt.n	8003388 <Calc_Optimal+0x88>
	next_values[0] = maze[x][y-1]; //up square
}

if (y < Y_MAZE_SIZE - 1 && horiz_walls[x][y] != TRUE) {
 8003366:	4f5e      	ldr	r7, [pc, #376]	; (80034e0 <Calc_Optimal+0x1e0>)
 8003368:	eb07 0906 	add.w	r9, r7, r6
 800336c:	f819 9003 	ldrb.w	r9, [r9, r3]
 8003370:	f1b9 0f01 	cmp.w	r9, #1
 8003374:	d01b      	beq.n	80033ae <Calc_Optimal+0xae>
	next_values[1] = maze[x][y+1]; //down square
 8003376:	4416      	add	r6, r2
 8003378:	f103 0901 	add.w	r9, r3, #1
 800337c:	4f57      	ldr	r7, [pc, #348]	; (80034dc <Calc_Optimal+0x1dc>)
 800337e:	444e      	add	r6, r9
 8003380:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8003384:	9605      	str	r6, [sp, #20]
 8003386:	e012      	b.n	80033ae <Calc_Optimal+0xae>
next_values[2] = 127;
next_values[3] = 127;

val = maze[x][y];

if (y > 0 && horiz_walls[x][y-1] != TRUE) { //if row is greater than zero
 8003388:	4f55      	ldr	r7, [pc, #340]	; (80034e0 <Calc_Optimal+0x1e0>)
 800338a:	f103 39ff 	add.w	r9, r3, #4294967295
 800338e:	eb07 0b06 	add.w	fp, r7, r6
 8003392:	f81b b009 	ldrb.w	fp, [fp, r9]
 8003396:	f1bb 0f01 	cmp.w	fp, #1
 800339a:	d006      	beq.n	80033aa <Calc_Optimal+0xaa>
	next_values[0] = maze[x][y-1]; //up square
 800339c:	9f01      	ldr	r7, [sp, #4]
 800339e:	444f      	add	r7, r9
 80033a0:	46b9      	mov	r9, r7
 80033a2:	4f4e      	ldr	r7, [pc, #312]	; (80034dc <Calc_Optimal+0x1dc>)
 80033a4:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
 80033a8:	9704      	str	r7, [sp, #16]
}

if (y < Y_MAZE_SIZE - 1 && horiz_walls[x][y] != TRUE) {
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d0db      	beq.n	8003366 <Calc_Optimal+0x66>
	next_values[1] = maze[x][y+1]; //down square
}

if (x > 0 && vert_walls[x - 1][y] != TRUE) {
 80033ae:	2a00      	cmp	r2, #0
 80033b0:	dc0f      	bgt.n	80033d2 <Calc_Optimal+0xd2>
	next_values[2] = maze[x - 1][y]; //left square
}

if (x < X_MAZE_SIZE - 1 && vert_walls[x][y] != TRUE) {
 80033b2:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 80033b6:	4f4b      	ldr	r7, [pc, #300]	; (80034e4 <Calc_Optimal+0x1e4>)
 80033b8:	443e      	add	r6, r7
 80033ba:	5cf6      	ldrb	r6, [r6, r3]
 80033bc:	2e01      	cmp	r6, #1
 80033be:	d01a      	beq.n	80033f6 <Calc_Optimal+0xf6>
	next_values[3] = maze[x+1][y]; //right square
 80033c0:	1c56      	adds	r6, r2, #1
 80033c2:	4f46      	ldr	r7, [pc, #280]	; (80034dc <Calc_Optimal+0x1dc>)
 80033c4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80033c8:	441e      	add	r6, r3
 80033ca:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 80033ce:	9607      	str	r6, [sp, #28]
 80033d0:	e011      	b.n	80033f6 <Calc_Optimal+0xf6>

if (y < Y_MAZE_SIZE - 1 && horiz_walls[x][y] != TRUE) {
	next_values[1] = maze[x][y+1]; //down square
}

if (x > 0 && vert_walls[x - 1][y] != TRUE) {
 80033d2:	1e56      	subs	r6, r2, #1
 80033d4:	4f43      	ldr	r7, [pc, #268]	; (80034e4 <Calc_Optimal+0x1e4>)
 80033d6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80033da:	eb07 0906 	add.w	r9, r7, r6
 80033de:	f819 9003 	ldrb.w	r9, [r9, r3]
 80033e2:	f1b9 0f01 	cmp.w	r9, #1
	next_values[2] = maze[x - 1][y]; //left square
 80033e6:	bf1f      	itttt	ne
 80033e8:	18f6      	addne	r6, r6, r3
 80033ea:	4f3c      	ldrne	r7, [pc, #240]	; (80034dc <Calc_Optimal+0x1dc>)
 80033ec:	f857 6026 	ldrne.w	r6, [r7, r6, lsl #2]
 80033f0:	9606      	strne	r6, [sp, #24]
}

if (x < X_MAZE_SIZE - 1 && vert_walls[x][y] != TRUE) {
 80033f2:	2a04      	cmp	r2, #4
 80033f4:	dddd      	ble.n	80033b2 <Calc_Optimal+0xb2>
	next_values[3] = maze[x+1][y]; //right square
}

for (int i = 0; i < 4; i++) {
 80033f6:	f04f 0900 	mov.w	r9, #0
	if (next_values[i] == val - 1) {
 80033fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80033fe:	f85a 6029 	ldr.w	r6, [sl, r9, lsl #2]
 8003402:	4546      	cmp	r6, r8
 8003404:	bf08      	it	eq
 8003406:	4648      	moveq	r0, r9

if (x < X_MAZE_SIZE - 1 && vert_walls[x][y] != TRUE) {
	next_values[3] = maze[x+1][y]; //right square
}

for (int i = 0; i < 4; i++) {
 8003408:	f109 0901 	add.w	r9, r9, #1
 800340c:	f1b9 0f04 	cmp.w	r9, #4
 8003410:	d1f5      	bne.n	80033fe <Calc_Optimal+0xfe>
	if (next_values[i] == val - 1) {
		index = i;
	}
}

switch (cur_dir) {
 8003412:	2c02      	cmp	r4, #2
 8003414:	d01d      	beq.n	8003452 <Calc_Optimal+0x152>
 8003416:	2c03      	cmp	r4, #3
 8003418:	d029      	beq.n	800346e <Calc_Optimal+0x16e>
 800341a:	2c01      	cmp	r4, #1
 800341c:	d00c      	beq.n	8003438 <Calc_Optimal+0x138>

case NORTH:
	switch(index) {
 800341e:	2802      	cmp	r0, #2
 8003420:	d005      	beq.n	800342e <Calc_Optimal+0x12e>
 8003422:	2803      	cmp	r0, #3
 8003424:	d006      	beq.n	8003434 <Calc_Optimal+0x134>
 8003426:	2800      	cmp	r0, #0
 8003428:	d13c      	bne.n	80034a4 <Calc_Optimal+0x1a4>
	case(0):
			optimal_path[counter] = FOR;
 800342a:	2466      	movs	r4, #102	; 0x66
 800342c:	e017      	b.n	800345e <Calc_Optimal+0x15e>
	break;
	case(1):
			//NO
	break;
	case(2):
			optimal_path[counter] = LEF;
 800342e:	f881 c000 	strb.w	ip, [r1]
			cur_dir = WEST;
	break;
 8003432:	e045      	b.n	80034c0 <Calc_Optimal+0x1c0>
	case(3):
			optimal_path[counter] = RIGH;
 8003434:	2472      	movs	r4, #114	; 0x72
 8003436:	e026      	b.n	8003486 <Calc_Optimal+0x186>
	break;
	}
break;

case SOUTH:
	switch(index) {
 8003438:	2802      	cmp	r0, #2
 800343a:	d005      	beq.n	8003448 <Calc_Optimal+0x148>
 800343c:	2803      	cmp	r0, #3
 800343e:	d005      	beq.n	800344c <Calc_Optimal+0x14c>
 8003440:	2801      	cmp	r0, #1
 8003442:	d13a      	bne.n	80034ba <Calc_Optimal+0x1ba>
	case(0):
			//NO
	break;
	case(1):
			optimal_path[counter] = FOR;
 8003444:	2466      	movs	r4, #102	; 0x66
 8003446:	e01b      	b.n	8003480 <Calc_Optimal+0x180>
	break;
	case(2):
			optimal_path[counter] = RIGH;
 8003448:	2472      	movs	r4, #114	; 0x72
 800344a:	e00e      	b.n	800346a <Calc_Optimal+0x16a>
			cur_dir = WEST;
	break;
	case(3):
			optimal_path[counter] = LEF;
 800344c:	f881 c000 	strb.w	ip, [r1]
			cur_dir = EAST;
	break;
 8003450:	e039      	b.n	80034c6 <Calc_Optimal+0x1c6>
	}
break;

case WEST:
	switch(index) {
 8003452:	2801      	cmp	r0, #1
 8003454:	d005      	beq.n	8003462 <Calc_Optimal+0x162>
 8003456:	2802      	cmp	r0, #2
 8003458:	d006      	beq.n	8003468 <Calc_Optimal+0x168>
 800345a:	bb88      	cbnz	r0, 80034c0 <Calc_Optimal+0x1c0>
	case(0):
			optimal_path[counter] = RIGH;
 800345c:	2472      	movs	r4, #114	; 0x72
 800345e:	700c      	strb	r4, [r1, #0]
			cur_dir = NORTH;
	break;
 8003460:	e020      	b.n	80034a4 <Calc_Optimal+0x1a4>
	case(1):
			optimal_path[counter] = LEF;
 8003462:	f881 c000 	strb.w	ip, [r1]
			cur_dir = SOUTH;
	break;
 8003466:	e028      	b.n	80034ba <Calc_Optimal+0x1ba>
	case(2):
			optimal_path[counter] = FOR;
 8003468:	2466      	movs	r4, #102	; 0x66
 800346a:	700c      	strb	r4, [r1, #0]
	break;
 800346c:	e028      	b.n	80034c0 <Calc_Optimal+0x1c0>
	break;
	}
break;

case EAST:
	switch(index) {
 800346e:	2801      	cmp	r0, #1
 8003470:	d005      	beq.n	800347e <Calc_Optimal+0x17e>
 8003472:	2803      	cmp	r0, #3
 8003474:	d006      	beq.n	8003484 <Calc_Optimal+0x184>
 8003476:	bb30      	cbnz	r0, 80034c6 <Calc_Optimal+0x1c6>
	case(0):
			optimal_path[counter] = LEF;
 8003478:	f881 c000 	strb.w	ip, [r1]
			cur_dir = NORTH;
	break;
 800347c:	e012      	b.n	80034a4 <Calc_Optimal+0x1a4>
	case(1):
			optimal_path[counter] = RIGH;
 800347e:	2472      	movs	r4, #114	; 0x72
 8003480:	700c      	strb	r4, [r1, #0]
			cur_dir = SOUTH;
	break;
 8003482:	e01a      	b.n	80034ba <Calc_Optimal+0x1ba>
	case(2):
			//NO
	break;
	case(3):
			optimal_path[counter] = FOR;
 8003484:	2466      	movs	r4, #102	; 0x66
 8003486:	700c      	strb	r4, [r1, #0]
	break;
 8003488:	e01d      	b.n	80034c6 <Calc_Optimal+0x1c6>
//Transmit(tx_buffer);
//while loop

}

optimal_count = counter;
 800348a:	4b17      	ldr	r3, [pc, #92]	; (80034e8 <Calc_Optimal+0x1e8>)
optimal_path[counter] = 's';
 800348c:	4812      	ldr	r0, [pc, #72]	; (80034d8 <Calc_Optimal+0x1d8>)
//Transmit(tx_buffer);
//while loop

}

optimal_count = counter;
 800348e:	601d      	str	r5, [r3, #0]
optimal_path[counter] = 's';
 8003490:	2373      	movs	r3, #115	; 0x73
 8003492:	5543      	strb	r3, [r0, r5]
//sprintf(tx_buffer, optimal_path);
//sprintf(tx_buffer, "FINAL:   X VALUE: %d    Y VALUE: %d    DIRECTION: %d   VALUE: %d \r\n", x, y, cur_dir, val);
//Transmit(tx_buffer);
Transmit(optimal_path);
 8003494:	f7ff fd2a 	bl	8002eec <Transmit>
Transmit("\r\n");
 8003498:	4814      	ldr	r0, [pc, #80]	; (80034ec <Calc_Optimal+0x1ec>)

}
 800349a:	b009      	add	sp, #36	; 0x24
 800349c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
optimal_path[counter] = 's';
//sprintf(tx_buffer, optimal_path);
//sprintf(tx_buffer, "FINAL:   X VALUE: %d    Y VALUE: %d    DIRECTION: %d   VALUE: %d \r\n", x, y, cur_dir, val);
//Transmit(tx_buffer);
Transmit(optimal_path);
Transmit("\r\n");
 80034a0:	f7ff bd24 	b.w	8002eec <Transmit>
}

switch (cur_dir) {
case NORTH:
	x = x + N[0];
	y = y + N[1];
 80034a4:	3b01      	subs	r3, #1
break;
 80034a6:	2400      	movs	r4, #0
case EAST:
	x = x + E[0];
	y = y + E[1];
break;
}
counter++;
 80034a8:	3501      	adds	r5, #1
optimal_x[counter] = x;
 80034aa:	9e02      	ldr	r6, [sp, #8]
 80034ac:	3101      	adds	r1, #1
 80034ae:	f846 2025 	str.w	r2, [r6, r5, lsl #2]
optimal_y[counter] = y;
 80034b2:	9e03      	ldr	r6, [sp, #12]
 80034b4:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
 80034b8:	e73f      	b.n	800333a <Calc_Optimal+0x3a>
	x = x + N[0];
	y = y + N[1];
break;
case SOUTH:
	x = x + S[0];
	y = y + S[1];
 80034ba:	3301      	adds	r3, #1
break;
 80034bc:	2401      	movs	r4, #1
 80034be:	e7f3      	b.n	80034a8 <Calc_Optimal+0x1a8>
case WEST:
	x = x + W[0];
 80034c0:	3a01      	subs	r2, #1
	y = y + W[1];
break;
 80034c2:	2402      	movs	r4, #2
 80034c4:	e7f0      	b.n	80034a8 <Calc_Optimal+0x1a8>
case EAST:
	x = x + E[0];
 80034c6:	3201      	adds	r2, #1
	y = y + E[1];
break;
 80034c8:	2403      	movs	r4, #3
 80034ca:	e7ed      	b.n	80034a8 <Calc_Optimal+0x1a8>
 80034cc:	080060b0 	.word	0x080060b0
 80034d0:	20004b80 	.word	0x20004b80
 80034d4:	20004424 	.word	0x20004424
 80034d8:	20005170 	.word	0x20005170
 80034dc:	200043dc 	.word	0x200043dc
 80034e0:	200042ec 	.word	0x200042ec
 80034e4:	200030a4 	.word	0x200030a4
 80034e8:	200020f4 	.word	0x200020f4
 80034ec:	080063db 	.word	0x080063db

080034f0 <Print_Maze>:

	HAL_GPIO_WritePin(GPIOA, GYRO_CS_Pin, GPIO_PIN_RESET);

}

void Print_Maze() {
 80034f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

Floodfill(FALSE);
 80034f2:	2000      	movs	r0, #0

sprintf(tx_buffer, "Floodfill Values: \r\n");
Transmit(tx_buffer);
 80034f4:	2500      	movs	r5, #0

}

void Print_Maze() {

Floodfill(FALSE);
 80034f6:	f000 f897 	bl	8003628 <Floodfill>

sprintf(tx_buffer, "Floodfill Values: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //floodfill values
	for (int j = 0; j < X_MAZE_SIZE; j++) {  //go row by row, that's why y is looped first
		sprintf(tx_buffer, "%d ", maze[j][i]);
 80034fa:	4e3d      	ldr	r6, [pc, #244]	; (80035f0 <Print_Maze+0x100>)

void Print_Maze() {

Floodfill(FALSE);

sprintf(tx_buffer, "Floodfill Values: \r\n");
 80034fc:	493d      	ldr	r1, [pc, #244]	; (80035f4 <Print_Maze+0x104>)
 80034fe:	483e      	ldr	r0, [pc, #248]	; (80035f8 <Print_Maze+0x108>)
 8003500:	f002 f9ac 	bl	800585c <strcpy>
Transmit(tx_buffer);
 8003504:	483c      	ldr	r0, [pc, #240]	; (80035f8 <Print_Maze+0x108>)
 8003506:	f7ff fcf1 	bl	8002eec <Transmit>

	HAL_GPIO_WritePin(GPIOA, GYRO_CS_Pin, GPIO_PIN_RESET);

}

void Print_Maze() {
 800350a:	2400      	movs	r4, #0

sprintf(tx_buffer, "Floodfill Values: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //floodfill values
	for (int j = 0; j < X_MAZE_SIZE; j++) {  //go row by row, that's why y is looped first
		sprintf(tx_buffer, "%d ", maze[j][i]);
 800350c:	19a3      	adds	r3, r4, r6
 800350e:	493b      	ldr	r1, [pc, #236]	; (80035fc <Print_Maze+0x10c>)
 8003510:	4839      	ldr	r0, [pc, #228]	; (80035f8 <Print_Maze+0x108>)
 8003512:	340c      	adds	r4, #12
 8003514:	595a      	ldr	r2, [r3, r5]
 8003516:	f002 f97d 	bl	8005814 <siprintf>
		Transmit(tx_buffer);
 800351a:	4837      	ldr	r0, [pc, #220]	; (80035f8 <Print_Maze+0x108>)
 800351c:	f7ff fce6 	bl	8002eec <Transmit>
Floodfill(FALSE);

sprintf(tx_buffer, "Floodfill Values: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //floodfill values
	for (int j = 0; j < X_MAZE_SIZE; j++) {  //go row by row, that's why y is looped first
 8003520:	2c48      	cmp	r4, #72	; 0x48
 8003522:	d1f3      	bne.n	800350c <Print_Maze+0x1c>
		sprintf(tx_buffer, "%d ", maze[j][i]);
		Transmit(tx_buffer);
	}
	sprintf(tx_buffer, "\r\n \r\n");
 8003524:	4936      	ldr	r1, [pc, #216]	; (8003600 <Print_Maze+0x110>)
 8003526:	3504      	adds	r5, #4
 8003528:	4833      	ldr	r0, [pc, #204]	; (80035f8 <Print_Maze+0x108>)
 800352a:	f002 f997 	bl	800585c <strcpy>
	Transmit(tx_buffer);
 800352e:	4832      	ldr	r0, [pc, #200]	; (80035f8 <Print_Maze+0x108>)
 8003530:	f7ff fcdc 	bl	8002eec <Transmit>

Floodfill(FALSE);

sprintf(tx_buffer, "Floodfill Values: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //floodfill values
 8003534:	2d0c      	cmp	r5, #12
 8003536:	d1e8      	bne.n	800350a <Print_Maze+0x1a>
	}
	sprintf(tx_buffer, "\r\n \r\n");
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Horizontal Walls: \r\n");
 8003538:	4932      	ldr	r1, [pc, #200]	; (8003604 <Print_Maze+0x114>)
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE - 1; i++) { //horizontal walls
 800353a:	2400      	movs	r4, #0
	}
	sprintf(tx_buffer, "\r\n \r\n");
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Horizontal Walls: \r\n");
 800353c:	482e      	ldr	r0, [pc, #184]	; (80035f8 <Print_Maze+0x108>)
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE - 1; i++) { //horizontal walls
	for (int j = 0; j < X_MAZE_SIZE; j++) {
		sprintf(tx_buffer, "%d ", horiz_walls[j][i]);
 800353e:	4f32      	ldr	r7, [pc, #200]	; (8003608 <Print_Maze+0x118>)
	}
	sprintf(tx_buffer, "\r\n \r\n");
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Horizontal Walls: \r\n");
 8003540:	f002 f98c 	bl	800585c <strcpy>
Transmit(tx_buffer);
 8003544:	482c      	ldr	r0, [pc, #176]	; (80035f8 <Print_Maze+0x108>)
 8003546:	f7ff fcd1 	bl	8002eec <Transmit>
void Print_Maze() {

Floodfill(FALSE);

sprintf(tx_buffer, "Floodfill Values: \r\n");
Transmit(tx_buffer);
 800354a:	2500      	movs	r5, #0

sprintf(tx_buffer, "Horizontal Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE - 1; i++) { //horizontal walls
	for (int j = 0; j < X_MAZE_SIZE; j++) {
		sprintf(tx_buffer, "%d ", horiz_walls[j][i]);
 800354c:	193e      	adds	r6, r7, r4
 800354e:	f816 2015 	ldrb.w	r2, [r6, r5, lsl #1]
}

sprintf(tx_buffer, "Horizontal Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE - 1; i++) { //horizontal walls
	for (int j = 0; j < X_MAZE_SIZE; j++) {
 8003552:	3501      	adds	r5, #1
		sprintf(tx_buffer, "%d ", horiz_walls[j][i]);
 8003554:	4929      	ldr	r1, [pc, #164]	; (80035fc <Print_Maze+0x10c>)
 8003556:	4828      	ldr	r0, [pc, #160]	; (80035f8 <Print_Maze+0x108>)
 8003558:	f002 f95c 	bl	8005814 <siprintf>
		Transmit(tx_buffer);
 800355c:	4826      	ldr	r0, [pc, #152]	; (80035f8 <Print_Maze+0x108>)
 800355e:	f7ff fcc5 	bl	8002eec <Transmit>
}

sprintf(tx_buffer, "Horizontal Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE - 1; i++) { //horizontal walls
	for (int j = 0; j < X_MAZE_SIZE; j++) {
 8003562:	2d06      	cmp	r5, #6
 8003564:	d1f3      	bne.n	800354e <Print_Maze+0x5e>
		sprintf(tx_buffer, "%d ", horiz_walls[j][i]);
		Transmit(tx_buffer);
	}
	sprintf(tx_buffer, "\r\n \r\n");
 8003566:	4926      	ldr	r1, [pc, #152]	; (8003600 <Print_Maze+0x110>)
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Horizontal Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE - 1; i++) { //horizontal walls
 8003568:	3401      	adds	r4, #1
	for (int j = 0; j < X_MAZE_SIZE; j++) {
		sprintf(tx_buffer, "%d ", horiz_walls[j][i]);
		Transmit(tx_buffer);
	}
	sprintf(tx_buffer, "\r\n \r\n");
 800356a:	4823      	ldr	r0, [pc, #140]	; (80035f8 <Print_Maze+0x108>)
 800356c:	f002 f976 	bl	800585c <strcpy>
	Transmit(tx_buffer);
 8003570:	4821      	ldr	r0, [pc, #132]	; (80035f8 <Print_Maze+0x108>)
 8003572:	f7ff fcbb 	bl	8002eec <Transmit>
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Horizontal Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE - 1; i++) { //horizontal walls
 8003576:	2c02      	cmp	r4, #2
 8003578:	d1e7      	bne.n	800354a <Print_Maze+0x5a>
	}
	sprintf(tx_buffer, "\r\n \r\n");
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Vertical Walls: \r\n");
 800357a:	4924      	ldr	r1, [pc, #144]	; (800360c <Print_Maze+0x11c>)
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //vertical walls
 800357c:	2400      	movs	r4, #0
	}
	sprintf(tx_buffer, "\r\n \r\n");
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Vertical Walls: \r\n");
 800357e:	481e      	ldr	r0, [pc, #120]	; (80035f8 <Print_Maze+0x108>)
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //vertical walls
	for (int j = 0; j < X_MAZE_SIZE - 1; j++) {
		sprintf(tx_buffer, "%d ", vert_walls[j][i]);
 8003580:	4f23      	ldr	r7, [pc, #140]	; (8003610 <Print_Maze+0x120>)
	}
	sprintf(tx_buffer, "\r\n \r\n");
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Vertical Walls: \r\n");
 8003582:	f002 f96b 	bl	800585c <strcpy>
Transmit(tx_buffer);
 8003586:	481c      	ldr	r0, [pc, #112]	; (80035f8 <Print_Maze+0x108>)
 8003588:	f7ff fcb0 	bl	8002eec <Transmit>
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Horizontal Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE - 1; i++) { //horizontal walls
 800358c:	2500      	movs	r5, #0

sprintf(tx_buffer, "Vertical Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //vertical walls
	for (int j = 0; j < X_MAZE_SIZE - 1; j++) {
		sprintf(tx_buffer, "%d ", vert_walls[j][i]);
 800358e:	193e      	adds	r6, r7, r4
 8003590:	5d72      	ldrb	r2, [r6, r5]
 8003592:	3503      	adds	r5, #3
 8003594:	4919      	ldr	r1, [pc, #100]	; (80035fc <Print_Maze+0x10c>)
 8003596:	4818      	ldr	r0, [pc, #96]	; (80035f8 <Print_Maze+0x108>)
 8003598:	f002 f93c 	bl	8005814 <siprintf>
		Transmit(tx_buffer);
 800359c:	4816      	ldr	r0, [pc, #88]	; (80035f8 <Print_Maze+0x108>)
 800359e:	f7ff fca5 	bl	8002eec <Transmit>
}

sprintf(tx_buffer, "Vertical Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //vertical walls
	for (int j = 0; j < X_MAZE_SIZE - 1; j++) {
 80035a2:	2d0f      	cmp	r5, #15
 80035a4:	d1f4      	bne.n	8003590 <Print_Maze+0xa0>
		sprintf(tx_buffer, "%d ", vert_walls[j][i]);
		Transmit(tx_buffer);
	}
	sprintf(tx_buffer, "\r\n \r\n");
 80035a6:	4916      	ldr	r1, [pc, #88]	; (8003600 <Print_Maze+0x110>)
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Vertical Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //vertical walls
 80035a8:	3401      	adds	r4, #1
	for (int j = 0; j < X_MAZE_SIZE - 1; j++) {
		sprintf(tx_buffer, "%d ", vert_walls[j][i]);
		Transmit(tx_buffer);
	}
	sprintf(tx_buffer, "\r\n \r\n");
 80035aa:	4813      	ldr	r0, [pc, #76]	; (80035f8 <Print_Maze+0x108>)
 80035ac:	f002 f956 	bl	800585c <strcpy>
	Transmit(tx_buffer);
 80035b0:	4811      	ldr	r0, [pc, #68]	; (80035f8 <Print_Maze+0x108>)
 80035b2:	f7ff fc9b 	bl	8002eec <Transmit>
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Vertical Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //vertical walls
 80035b6:	2c03      	cmp	r4, #3
 80035b8:	d1e8      	bne.n	800358c <Print_Maze+0x9c>
	Transmit(tx_buffer);
}

Calc_Optimal(); //generate optimal path
Transmit("Optimal Path: \r\n");
for (int i = 0; i <= optimal_count; i++) {
 80035ba:	2400      	movs	r4, #0
 80035bc:	4d15      	ldr	r5, [pc, #84]	; (8003614 <Print_Maze+0x124>)
	sprintf(tx_buffer, "(%d, %d) \r\n", optimal_x[i], optimal_y[i]);
 80035be:	4e16      	ldr	r6, [pc, #88]	; (8003618 <Print_Maze+0x128>)
	}
	sprintf(tx_buffer, "\r\n \r\n");
	Transmit(tx_buffer);
}

Calc_Optimal(); //generate optimal path
 80035c0:	f7ff fe9e 	bl	8003300 <Calc_Optimal>
Transmit("Optimal Path: \r\n");
for (int i = 0; i <= optimal_count; i++) {
	sprintf(tx_buffer, "(%d, %d) \r\n", optimal_x[i], optimal_y[i]);
 80035c4:	4f15      	ldr	r7, [pc, #84]	; (800361c <Print_Maze+0x12c>)
	sprintf(tx_buffer, "\r\n \r\n");
	Transmit(tx_buffer);
}

Calc_Optimal(); //generate optimal path
Transmit("Optimal Path: \r\n");
 80035c6:	4816      	ldr	r0, [pc, #88]	; (8003620 <Print_Maze+0x130>)
 80035c8:	f7ff fc90 	bl	8002eec <Transmit>
for (int i = 0; i <= optimal_count; i++) {
 80035cc:	682b      	ldr	r3, [r5, #0]
 80035ce:	429c      	cmp	r4, r3
 80035d0:	d80c      	bhi.n	80035ec <Print_Maze+0xfc>
	sprintf(tx_buffer, "(%d, %d) \r\n", optimal_x[i], optimal_y[i]);
 80035d2:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 80035d6:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
	Transmit(tx_buffer);
}

Calc_Optimal(); //generate optimal path
Transmit("Optimal Path: \r\n");
for (int i = 0; i <= optimal_count; i++) {
 80035da:	3401      	adds	r4, #1
	sprintf(tx_buffer, "(%d, %d) \r\n", optimal_x[i], optimal_y[i]);
 80035dc:	4911      	ldr	r1, [pc, #68]	; (8003624 <Print_Maze+0x134>)
 80035de:	4806      	ldr	r0, [pc, #24]	; (80035f8 <Print_Maze+0x108>)
 80035e0:	f002 f918 	bl	8005814 <siprintf>
	Transmit(tx_buffer);
 80035e4:	4804      	ldr	r0, [pc, #16]	; (80035f8 <Print_Maze+0x108>)
 80035e6:	f7ff fc81 	bl	8002eec <Transmit>
 80035ea:	e7ef      	b.n	80035cc <Print_Maze+0xdc>
}


return;
}
 80035ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035ee:	bf00      	nop
 80035f0:	200043dc 	.word	0x200043dc
 80035f4:	080063c3 	.word	0x080063c3
 80035f8:	2000499c 	.word	0x2000499c
 80035fc:	08006311 	.word	0x08006311
 8003600:	080063d8 	.word	0x080063d8
 8003604:	080063de 	.word	0x080063de
 8003608:	200042ec 	.word	0x200042ec
 800360c:	080063f3 	.word	0x080063f3
 8003610:	200030a4 	.word	0x200030a4
 8003614:	200020f4 	.word	0x200020f4
 8003618:	20004424 	.word	0x20004424
 800361c:	20004b80 	.word	0x20004b80
 8003620:	08006406 	.word	0x08006406
 8003624:	08006417 	.word	0x08006417

08003628 <Floodfill>:
}

return values[min];
}

void Floodfill(int reverse) { //int target x, int target y, position is global
 8003628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800362c:	2300      	movs	r3, #0
 800362e:	f5ad 7d4b 	sub.w	sp, sp, #812	; 0x32c
int buffer_counter = 0;
int pathdist = 1;

for (int i = 0; i < X_MAZE_SIZE; i++) { //initialize all values to 127
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
		maze[i][j] = 127;
 8003632:	4c33      	ldr	r4, [pc, #204]	; (8003700 <Floodfill+0xd8>)
 8003634:	227f      	movs	r2, #127	; 0x7f
 8003636:	1919      	adds	r1, r3, r4
 8003638:	511a      	str	r2, [r3, r4]
 800363a:	330c      	adds	r3, #12
 800363c:	4f30      	ldr	r7, [pc, #192]	; (8003700 <Floodfill+0xd8>)
 800363e:	604a      	str	r2, [r1, #4]
int temp_y = 0;

int buffer_counter = 0;
int pathdist = 1;

for (int i = 0; i < X_MAZE_SIZE; i++) { //initialize all values to 127
 8003640:	2b48      	cmp	r3, #72	; 0x48
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
		maze[i][j] = 127;
 8003642:	608a      	str	r2, [r1, #8]
int temp_y = 0;

int buffer_counter = 0;
int pathdist = 1;

for (int i = 0; i < X_MAZE_SIZE; i++) { //initialize all values to 127
 8003644:	d1f7      	bne.n	8003636 <Floodfill+0xe>
 8003646:	2300      	movs	r3, #0
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
		maze[i][j] = 127;
	}
}

if (reverse == TRUE) {
 8003648:	2801      	cmp	r0, #1
		temp_x = x_buffer[i];
		temp_y = y_buffer[i];
		maze[temp_x][temp_y] = pathdist;
	}

	if (maze[x_coord][y_coord] != 127) { //if the algorithm has reached the desired position
 800364a:	4a2e      	ldr	r2, [pc, #184]	; (8003704 <Floodfill+0xdc>)
 800364c:	f04f 0601 	mov.w	r6, #1
		maze[i][j] = 127;
	}
}

if (reverse == TRUE) {
	maze[X_START][Y_START] = 0;
 8003650:	bf08      	it	eq
 8003652:	60bb      	streq	r3, [r7, #8]
 8003654:	f04f 0b0c 	mov.w	fp, #12
}

else
{
	maze[X_FINAL][Y_FINAL] = 0;
 8003658:	bf18      	it	ne
 800365a:	63fb      	strne	r3, [r7, #60]	; 0x3c
			if (maze[i][j] != 127) {
				continue; //if cell has already been updated skip it
			}
			if (Get_Lowest_Square(i, j) != 127) { //if reached, add to buffer
				x_buffer[buffer_counter] = i; //x_ coordinate buffer
				y_buffer[buffer_counter] = j; //y coordinate buffer
 800365c:	f50d 7acc 	add.w	sl, sp, #408	; 0x198
		temp_x = x_buffer[i];
		temp_y = y_buffer[i];
		maze[temp_x][temp_y] = pathdist;
	}

	if (maze[x_coord][y_coord] != 127) { //if the algorithm has reached the desired position
 8003660:	4b29      	ldr	r3, [pc, #164]	; (8003708 <Floodfill+0xe0>)
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800366a:	eb03 0902 	add.w	r9, r3, r2

while(1) {

	buffer_counter = 0;

	for (int i = 0; i < X_MAZE_SIZE; i++) { //loop through all values to see if square has been reached
 800366e:	2400      	movs	r4, #0

}

while(1) {

	buffer_counter = 0;
 8003670:	46a0      	mov	r8, r4
 8003672:	fb0b 7304 	mla	r3, fp, r4, r7
		temp_x = x_buffer[i];
		temp_y = y_buffer[i];
		maze[temp_x][temp_y] = pathdist;
	}

	if (maze[x_coord][y_coord] != 127) { //if the algorithm has reached the desired position
 8003676:	2500      	movs	r5, #0

	buffer_counter = 0;

	for (int i = 0; i < X_MAZE_SIZE; i++) { //loop through all values to see if square has been reached
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
			if (maze[i][j] != 127) {
 8003678:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 800367c:	2a7f      	cmp	r2, #127	; 0x7f
 800367e:	d10e      	bne.n	800369e <Floodfill+0x76>
				continue; //if cell has already been updated skip it
			}
			if (Get_Lowest_Square(i, j) != 127) { //if reached, add to buffer
 8003680:	4629      	mov	r1, r5
 8003682:	4620      	mov	r0, r4
 8003684:	9301      	str	r3, [sp, #4]
 8003686:	f7ff fd1b 	bl	80030c0 <Get_Lowest_Square>
 800368a:	287f      	cmp	r0, #127	; 0x7f
 800368c:	9b01      	ldr	r3, [sp, #4]
				x_buffer[buffer_counter] = i; //x_ coordinate buffer
 800368e:	bf1f      	itttt	ne
 8003690:	aa02      	addne	r2, sp, #8
				y_buffer[buffer_counter] = j; //y coordinate buffer
 8003692:	f84a 5028 	strne.w	r5, [sl, r8, lsl #2]
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
			if (maze[i][j] != 127) {
				continue; //if cell has already been updated skip it
			}
			if (Get_Lowest_Square(i, j) != 127) { //if reached, add to buffer
				x_buffer[buffer_counter] = i; //x_ coordinate buffer
 8003696:	f842 4028 	strne.w	r4, [r2, r8, lsl #2]
				y_buffer[buffer_counter] = j; //y coordinate buffer
				buffer_counter++;
 800369a:	f108 0801 	addne.w	r8, r8, #1
while(1) {

	buffer_counter = 0;

	for (int i = 0; i < X_MAZE_SIZE; i++) { //loop through all values to see if square has been reached
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
 800369e:	3501      	adds	r5, #1
 80036a0:	2d03      	cmp	r5, #3
 80036a2:	d1e9      	bne.n	8003678 <Floodfill+0x50>

while(1) {

	buffer_counter = 0;

	for (int i = 0; i < X_MAZE_SIZE; i++) { //loop through all values to see if square has been reached
 80036a4:	3401      	adds	r4, #1
 80036a6:	2c06      	cmp	r4, #6
 80036a8:	d1e3      	bne.n	8003672 <Floodfill+0x4a>
 80036aa:	2300      	movs	r3, #0
				buffer_counter++;
			}
		}
	}

	for (int i = 0; i < buffer_counter; i++) { //write all buffer coordinates with the path distance
 80036ac:	4598      	cmp	r8, r3
 80036ae:	d00b      	beq.n	80036c8 <Floodfill+0xa0>
		temp_x = x_buffer[i];
		temp_y = y_buffer[i];
		maze[temp_x][temp_y] = pathdist;
 80036b0:	aa02      	add	r2, sp, #8
 80036b2:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
 80036b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
				buffer_counter++;
			}
		}
	}

	for (int i = 0; i < buffer_counter; i++) { //write all buffer coordinates with the path distance
 80036ba:	3301      	adds	r3, #1
		temp_x = x_buffer[i];
		temp_y = y_buffer[i];
		maze[temp_x][temp_y] = pathdist;
 80036bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80036c0:	440a      	add	r2, r1
 80036c2:	f847 6022 	str.w	r6, [r7, r2, lsl #2]
 80036c6:	e7f1      	b.n	80036ac <Floodfill+0x84>
	}

	if (maze[x_coord][y_coord] != 127) { //if the algorithm has reached the desired position
 80036c8:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 80036cc:	2b7f      	cmp	r3, #127	; 0x7f
 80036ce:	d113      	bne.n	80036f8 <Floodfill+0xd0>
		break;
	}
	pathdist++;
 80036d0:	3601      	adds	r6, #1
	if (pathdist > 200) { //prevent infinite loops
 80036d2:	2ec9      	cmp	r6, #201	; 0xc9
 80036d4:	d1cb      	bne.n	800366e <Floodfill+0x46>
		stop_flag = TRUE;
 80036d6:	4b0d      	ldr	r3, [pc, #52]	; (800370c <Floodfill+0xe4>)
 80036d8:	2201      	movs	r2, #1
		sprintf(tx_buffer, "Floodfill Error pathdist: %d \r\n", pathdist);
 80036da:	490d      	ldr	r1, [pc, #52]	; (8003710 <Floodfill+0xe8>)
	if (maze[x_coord][y_coord] != 127) { //if the algorithm has reached the desired position
		break;
	}
	pathdist++;
	if (pathdist > 200) { //prevent infinite loops
		stop_flag = TRUE;
 80036dc:	601a      	str	r2, [r3, #0]
		sprintf(tx_buffer, "Floodfill Error pathdist: %d \r\n", pathdist);
 80036de:	4632      	mov	r2, r6
 80036e0:	480c      	ldr	r0, [pc, #48]	; (8003714 <Floodfill+0xec>)
 80036e2:	f002 f897 	bl	8005814 <siprintf>
		Print_Maze();
 80036e6:	f7ff ff03 	bl	80034f0 <Print_Maze>
		Transmit(tx_buffer);
 80036ea:	480a      	ldr	r0, [pc, #40]	; (8003714 <Floodfill+0xec>)
		break;
	}

	}
//end algorithm while
}
 80036ec:	f50d 7d4b 	add.w	sp, sp, #812	; 0x32c
 80036f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pathdist++;
	if (pathdist > 200) { //prevent infinite loops
		stop_flag = TRUE;
		sprintf(tx_buffer, "Floodfill Error pathdist: %d \r\n", pathdist);
		Print_Maze();
		Transmit(tx_buffer);
 80036f4:	f7ff bbfa 	b.w	8002eec <Transmit>
		break;
	}

	}
//end algorithm while
}
 80036f8:	f50d 7d4b 	add.w	sp, sp, #812	; 0x32c
 80036fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003700:	200043dc 	.word	0x200043dc
 8003704:	20000008 	.word	0x20000008
 8003708:	20004300 	.word	0x20004300
 800370c:	20000004 	.word	0x20000004
 8003710:	08006423 	.word	0x08006423
 8003714:	2000499c 	.word	0x2000499c

08003718 <Reset_Maze>:

void Reset_Maze() {
 8003718:	2300      	movs	r3, #0

	for (int i = 0; i < X_MAZE_SIZE; i++) { //horizontal walls
		for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
			horiz_walls[i][j] = 0;
 800371a:	490f      	ldr	r1, [pc, #60]	; (8003758 <Reset_Maze+0x40>)
 800371c:	461a      	mov	r2, r3
 800371e:	545a      	strb	r2, [r3, r1]
 8003720:	18c8      	adds	r0, r1, r3
 8003722:	3302      	adds	r3, #2
 8003724:	7042      	strb	r2, [r0, #1]
//end algorithm while
}

void Reset_Maze() {

	for (int i = 0; i < X_MAZE_SIZE; i++) { //horizontal walls
 8003726:	2b0c      	cmp	r3, #12
 8003728:	d1f9      	bne.n	800371e <Reset_Maze+0x6>
 800372a:	2300      	movs	r3, #0
		}
	}

	for (int i = 0; i < X_MAZE_SIZE - 1; i++) { //vertical walls
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
			vert_walls[i][j] = 0;
 800372c:	480b      	ldr	r0, [pc, #44]	; (800375c <Reset_Maze+0x44>)
 800372e:	461a      	mov	r2, r3
 8003730:	541a      	strb	r2, [r3, r0]
 8003732:	18c1      	adds	r1, r0, r3
 8003734:	3303      	adds	r3, #3
 8003736:	704a      	strb	r2, [r1, #1]
		for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
			horiz_walls[i][j] = 0;
		}
	}

	for (int i = 0; i < X_MAZE_SIZE - 1; i++) { //vertical walls
 8003738:	2b0f      	cmp	r3, #15
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
			vert_walls[i][j] = 0;
 800373a:	708a      	strb	r2, [r1, #2]
		for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
			horiz_walls[i][j] = 0;
		}
	}

	for (int i = 0; i < X_MAZE_SIZE - 1; i++) { //vertical walls
 800373c:	d1f8      	bne.n	8003730 <Reset_Maze+0x18>
 800373e:	2300      	movs	r3, #0
		}
	}

	for (int i = 0; i < X_MAZE_SIZE; i++) { //set all squares to be unvisited
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
			visited_squares[i][j] = FALSE;
 8003740:	4807      	ldr	r0, [pc, #28]	; (8003760 <Reset_Maze+0x48>)
 8003742:	461a      	mov	r2, r3
 8003744:	1819      	adds	r1, r3, r0
 8003746:	501a      	str	r2, [r3, r0]
 8003748:	330c      	adds	r3, #12
 800374a:	604a      	str	r2, [r1, #4]
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
			vert_walls[i][j] = 0;
		}
	}

	for (int i = 0; i < X_MAZE_SIZE; i++) { //set all squares to be unvisited
 800374c:	2b48      	cmp	r3, #72	; 0x48
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
			visited_squares[i][j] = FALSE;
 800374e:	608a      	str	r2, [r1, #8]
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
			vert_walls[i][j] = 0;
		}
	}

	for (int i = 0; i < X_MAZE_SIZE; i++) { //set all squares to be unvisited
 8003750:	d1f8      	bne.n	8003744 <Reset_Maze+0x2c>
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
			visited_squares[i][j] = FALSE;
		}
	}

	Floodfill(FALSE); //floodfill maze
 8003752:	2000      	movs	r0, #0
 8003754:	f7ff bf68 	b.w	8003628 <Floodfill>
 8003758:	200042ec 	.word	0x200042ec
 800375c:	200030a4 	.word	0x200030a4
 8003760:	200050b0 	.word	0x200050b0

08003764 <Get_Next_Move>:
}

return next;
}

int Get_Next_Move() {
 8003764:	b5f0      	push	{r4, r5, r6, r7, lr}

 //index of lowest move
int next = FWD;
int min = 0;
int values[5] = {127, 127, 127, 127, 127};
 8003766:	4d52      	ldr	r5, [pc, #328]	; (80038b0 <Get_Next_Move+0x14c>)
}

return next;
}

int Get_Next_Move() {
 8003768:	b087      	sub	sp, #28

 //index of lowest move
int next = FWD;
int min = 0;
int values[5] = {127, 127, 127, 127, 127};
 800376a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800376c:	ac01      	add	r4, sp, #4
 800376e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003770:	682b      	ldr	r3, [r5, #0]
 8003772:	4950      	ldr	r1, [pc, #320]	; (80038b4 <Get_Next_Move+0x150>)
 8003774:	6023      	str	r3, [r4, #0]
 8003776:	ac01      	add	r4, sp, #4

if (y_coord > 0 && horiz_walls[x_coord][y_coord-1] != TRUE) { //if row is greater than zero
 8003778:	4b4f      	ldr	r3, [pc, #316]	; (80038b8 <Get_Next_Move+0x154>)
 800377a:	4d50      	ldr	r5, [pc, #320]	; (80038bc <Get_Next_Move+0x158>)
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	b96a      	cbnz	r2, 800379c <Get_Next_Move+0x38>
	values[1] = maze[x_coord][y_coord-1]; //up square
}

if (y_coord < Y_MAZE_SIZE - 1 && horiz_walls[x_coord][y_coord] != TRUE) {
 8003780:	682b      	ldr	r3, [r5, #0]
 8003782:	0058      	lsls	r0, r3, #1
 8003784:	4401      	add	r1, r0
 8003786:	5c89      	ldrb	r1, [r1, r2]
 8003788:	2901      	cmp	r1, #1
 800378a:	d016      	beq.n	80037ba <Get_Next_Move+0x56>
	values[2] = maze[x_coord][y_coord+1]; //down square
 800378c:	1c51      	adds	r1, r2, #1
 800378e:	4403      	add	r3, r0
 8003790:	440b      	add	r3, r1
 8003792:	494b      	ldr	r1, [pc, #300]	; (80038c0 <Get_Next_Move+0x15c>)
 8003794:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003798:	9303      	str	r3, [sp, #12]
 800379a:	e00e      	b.n	80037ba <Get_Next_Move+0x56>
 //index of lowest move
int next = FWD;
int min = 0;
int values[5] = {127, 127, 127, 127, 127};

if (y_coord > 0 && horiz_walls[x_coord][y_coord-1] != TRUE) { //if row is greater than zero
 800379c:	6828      	ldr	r0, [r5, #0]
 800379e:	1e53      	subs	r3, r2, #1
 80037a0:	0046      	lsls	r6, r0, #1
 80037a2:	198f      	adds	r7, r1, r6
 80037a4:	5cff      	ldrb	r7, [r7, r3]
 80037a6:	2f01      	cmp	r7, #1
 80037a8:	d005      	beq.n	80037b6 <Get_Next_Move+0x52>
	values[1] = maze[x_coord][y_coord-1]; //up square
 80037aa:	4430      	add	r0, r6
 80037ac:	4403      	add	r3, r0
 80037ae:	4844      	ldr	r0, [pc, #272]	; (80038c0 <Get_Next_Move+0x15c>)
 80037b0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80037b4:	9302      	str	r3, [sp, #8]
}

if (y_coord < Y_MAZE_SIZE - 1 && horiz_walls[x_coord][y_coord] != TRUE) {
 80037b6:	2a01      	cmp	r2, #1
 80037b8:	d9e2      	bls.n	8003780 <Get_Next_Move+0x1c>
	values[2] = maze[x_coord][y_coord+1]; //down square
}

if (x_coord > 0 && vert_walls[x_coord - 1][y_coord] != TRUE) {
 80037ba:	6829      	ldr	r1, [r5, #0]
 80037bc:	4841      	ldr	r0, [pc, #260]	; (80038c4 <Get_Next_Move+0x160>)
 80037be:	b971      	cbnz	r1, 80037de <Get_Next_Move+0x7a>
	values[3] = maze[x_coord - 1][y_coord]; //left square
}

if (x_coord < X_MAZE_SIZE - 1 && vert_walls[x_coord][y_coord] != TRUE) {
 80037c0:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 80037c4:	4403      	add	r3, r0
 80037c6:	5c9b      	ldrb	r3, [r3, r2]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d016      	beq.n	80037fa <Get_Next_Move+0x96>
	values[4] = maze[x_coord+1][y_coord]; //right square
 80037cc:	1c4b      	adds	r3, r1, #1
 80037ce:	483c      	ldr	r0, [pc, #240]	; (80038c0 <Get_Next_Move+0x15c>)
 80037d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80037d4:	4413      	add	r3, r2
 80037d6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80037da:	9305      	str	r3, [sp, #20]
 80037dc:	e00d      	b.n	80037fa <Get_Next_Move+0x96>

if (y_coord < Y_MAZE_SIZE - 1 && horiz_walls[x_coord][y_coord] != TRUE) {
	values[2] = maze[x_coord][y_coord+1]; //down square
}

if (x_coord > 0 && vert_walls[x_coord - 1][y_coord] != TRUE) {
 80037de:	1e4b      	subs	r3, r1, #1
 80037e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80037e4:	18c5      	adds	r5, r0, r3
 80037e6:	5cad      	ldrb	r5, [r5, r2]
 80037e8:	2d01      	cmp	r5, #1
	values[3] = maze[x_coord - 1][y_coord]; //left square
 80037ea:	bf1f      	itttt	ne
 80037ec:	189b      	addne	r3, r3, r2
 80037ee:	4d34      	ldrne	r5, [pc, #208]	; (80038c0 <Get_Next_Move+0x15c>)
 80037f0:	f855 3023 	ldrne.w	r3, [r5, r3, lsl #2]
 80037f4:	9304      	strne	r3, [sp, #16]
}

if (x_coord < X_MAZE_SIZE - 1 && vert_walls[x_coord][y_coord] != TRUE) {
 80037f6:	2904      	cmp	r1, #4
 80037f8:	d9e2      	bls.n	80037c0 <Get_Next_Move+0x5c>
	values[4] = maze[x_coord+1][y_coord]; //right square
}

for (int i = 1; i < 5; i++) {
 80037fa:	2001      	movs	r0, #1

int Get_Next_Move() {

 //index of lowest move
int next = FWD;
int min = 0;
 80037fc:	2300      	movs	r3, #0
if (x_coord < X_MAZE_SIZE - 1 && vert_walls[x_coord][y_coord] != TRUE) {
	values[4] = maze[x_coord+1][y_coord]; //right square
}

for (int i = 1; i < 5; i++) {
	if(values[i] < values[min]) {
 80037fe:	ad06      	add	r5, sp, #24
 8003800:	f854 6020 	ldr.w	r6, [r4, r0, lsl #2]
 8003804:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8003808:	f855 5c14 	ldr.w	r5, [r5, #-20]
 800380c:	42ae      	cmp	r6, r5
 800380e:	bfb8      	it	lt
 8003810:	4603      	movlt	r3, r0

if (x_coord < X_MAZE_SIZE - 1 && vert_walls[x_coord][y_coord] != TRUE) {
	values[4] = maze[x_coord+1][y_coord]; //right square
}

for (int i = 1; i < 5; i++) {
 8003812:	3001      	adds	r0, #1
 8003814:	2805      	cmp	r0, #5
 8003816:	d1f2      	bne.n	80037fe <Get_Next_Move+0x9a>
	if(values[i] < values[min]) {
		min = i;
	}
}

if (values[min] >= maze[x_coord][y_coord]) { //if lowest available square is higher than current
 8003818:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800381c:	4828      	ldr	r0, [pc, #160]	; (80038c0 <Get_Next_Move+0x15c>)
 800381e:	440a      	add	r2, r1
 8003820:	a906      	add	r1, sp, #24
 8003822:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8003826:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800382a:	f851 1c14 	ldr.w	r1, [r1, #-20]
 800382e:	4291      	cmp	r1, r2
 8003830:	d30a      	bcc.n	8003848 <Get_Next_Move+0xe4>
	//floodfill and recursive call
	Floodfill(reverse_flag);
 8003832:	4b25      	ldr	r3, [pc, #148]	; (80038c8 <Get_Next_Move+0x164>)
 8003834:	6818      	ldr	r0, [r3, #0]
 8003836:	f7ff fef7 	bl	8003628 <Floodfill>
	next = Get_Next_Move();
 800383a:	f7ff ff93 	bl	8003764 <Get_Next_Move>
 800383e:	4604      	mov	r4, r0
	Print_Maze();
 8003840:	f7ff fe56 	bl	80034f0 <Print_Maze>
	return next;
 8003844:	4620      	mov	r0, r4
 8003846:	e030      	b.n	80038aa <Get_Next_Move+0x146>
}

switch(cur_dir) {
 8003848:	4a20      	ldr	r2, [pc, #128]	; (80038cc <Get_Next_Move+0x168>)
 800384a:	6810      	ldr	r0, [r2, #0]
 800384c:	2803      	cmp	r0, #3
 800384e:	d82b      	bhi.n	80038a8 <Get_Next_Move+0x144>
 8003850:	e8df f000 	tbb	[pc, r0]
 8003854:	141e0a02 	.word	0x141e0a02

case NORTH:
	switch(min) {
 8003858:	2b03      	cmp	r3, #3
 800385a:	d021      	beq.n	80038a0 <Get_Next_Move+0x13c>
 800385c:	2b04      	cmp	r3, #4
 800385e:	d00b      	beq.n	8003878 <Get_Next_Move+0x114>
	case 1:
		next = FWD;
		break;
	case 2:
		next = DEAD;
 8003860:	2b02      	cmp	r3, #2
 8003862:	bf08      	it	eq
 8003864:	2003      	moveq	r0, #3
 8003866:	e020      	b.n	80038aa <Get_Next_Move+0x146>
		break;
	}
break;

case SOUTH:
	switch(min) {
 8003868:	2b03      	cmp	r3, #3
 800386a:	d005      	beq.n	8003878 <Get_Next_Move+0x114>
 800386c:	2b04      	cmp	r3, #4
 800386e:	d01c      	beq.n	80038aa <Get_Next_Move+0x146>
}

int Get_Next_Move() {

 //index of lowest move
int next = FWD;
 8003870:	2b01      	cmp	r3, #1
 8003872:	bf08      	it	eq
 8003874:	2003      	moveq	r0, #3
 8003876:	e010      	b.n	800389a <Get_Next_Move+0x136>
		break;
	case 2:
		next = FWD;
		break;
	case 3:
		next = RIGHT;
 8003878:	2002      	movs	r0, #2
		break;
 800387a:	e016      	b.n	80038aa <Get_Next_Move+0x146>
		break;
	}
break;

case EAST:
	switch(min) {
 800387c:	2b02      	cmp	r3, #2
 800387e:	d005      	beq.n	800388c <Get_Next_Move+0x128>
 8003880:	2b03      	cmp	r3, #3
 8003882:	d012      	beq.n	80038aa <Get_Next_Move+0x146>
}

int Get_Next_Move() {

 //index of lowest move
int next = FWD;
 8003884:	3b01      	subs	r3, #1
 8003886:	4258      	negs	r0, r3
 8003888:	4158      	adcs	r0, r3
 800388a:	e00e      	b.n	80038aa <Get_Next_Move+0x146>
	switch(min) {
	case 1:
		next = LEFT;
		break;
	case 2:
		next = RIGHT;
 800388c:	4618      	mov	r0, r3
		break;
 800388e:	e00c      	b.n	80038aa <Get_Next_Move+0x146>
	}
break;


case WEST:
	switch(min) {
 8003890:	2b02      	cmp	r3, #2
 8003892:	d005      	beq.n	80038a0 <Get_Next_Move+0x13c>
 8003894:	2b04      	cmp	r3, #4
 8003896:	d005      	beq.n	80038a4 <Get_Next_Move+0x140>
}

int Get_Next_Move() {

 //index of lowest move
int next = FWD;
 8003898:	2b01      	cmp	r3, #1
 800389a:	bf18      	it	ne
 800389c:	2000      	movne	r0, #0
 800389e:	e004      	b.n	80038aa <Get_Next_Move+0x146>
	switch(min) {
	case 1:
		next = RIGHT;
		break;
	case 2:
		next = LEFT;
 80038a0:	2001      	movs	r0, #1
		break;
 80038a2:	e002      	b.n	80038aa <Get_Next_Move+0x146>
	case 3:
		next = FWD;
		break;
	case 4:
		next = DEAD;
 80038a4:	2003      	movs	r0, #3
		break;
 80038a6:	e000      	b.n	80038aa <Get_Next_Move+0x146>
}

int Get_Next_Move() {

 //index of lowest move
int next = FWD;
 80038a8:	2000      	movs	r0, #0
		}
break;
}

return next;
}
 80038aa:	b007      	add	sp, #28
 80038ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038ae:	bf00      	nop
 80038b0:	0800609c 	.word	0x0800609c
 80038b4:	200042ec 	.word	0x200042ec
 80038b8:	20000008 	.word	0x20000008
 80038bc:	20004300 	.word	0x20004300
 80038c0:	200043dc 	.word	0x200043dc
 80038c4:	200030a4 	.word	0x200030a4
 80038c8:	200042d8 	.word	0x200042d8
 80038cc:	200042e0 	.word	0x200042e0

080038d0 <HAL_SPI_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80038d0:	4770      	bx	lr
	...

080038d4 <Error_Handler>:

void Error_Handler(void)
{
  while(1) 
  {
	  sprintf(tx_buffer, "State: %d", HAL_state);
 80038d4:	4c05      	ldr	r4, [pc, #20]	; (80038ec <Error_Handler+0x18>)
  //wTransferState = TRANSFER_ERROR;
  //HAL_GPIO_TogglePin(GPIOD, LED5_Pin);
}

void Error_Handler(void)
{
 80038d6:	b508      	push	{r3, lr}
  while(1) 
  {
	  sprintf(tx_buffer, "State: %d", HAL_state);
 80038d8:	6822      	ldr	r2, [r4, #0]
 80038da:	4905      	ldr	r1, [pc, #20]	; (80038f0 <Error_Handler+0x1c>)
 80038dc:	4805      	ldr	r0, [pc, #20]	; (80038f4 <Error_Handler+0x20>)
 80038de:	f001 ff99 	bl	8005814 <siprintf>
	  Transmit(tx_buffer);
 80038e2:	4804      	ldr	r0, [pc, #16]	; (80038f4 <Error_Handler+0x20>)
 80038e4:	f7ff fb02 	bl	8002eec <Transmit>
 80038e8:	e7f6      	b.n	80038d8 <Error_Handler+0x4>
 80038ea:	bf00      	nop
 80038ec:	20004304 	.word	0x20004304
 80038f0:	08006443 	.word	0x08006443
 80038f4:	2000499c 	.word	0x2000499c

080038f8 <Program_Flash>:
Set_Right(0, FORWARD);
HAL_Delay(300);

}

void Program_Flash() {
 80038f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

HAL_FLASH_Unlock();
 80038fc:	f7fd fa5e 	bl	8000dbc <HAL_FLASH_Unlock>

EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
EraseInitStruct.Sector        = FLASH_SECTOR_5;
EraseInitStruct.NbSectors     = 1;
 8003900:	2402      	movs	r4, #2
 8003902:	2100      	movs	r1, #0

void Program_Flash() {

HAL_FLASH_Unlock();

EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8003904:	482d      	ldr	r0, [pc, #180]	; (80039bc <Program_Flash+0xc4>)
EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
EraseInitStruct.Sector        = FLASH_SECTOR_5;
EraseInitStruct.NbSectors     = 1;
 8003906:	2205      	movs	r2, #5
 8003908:	2301      	movs	r3, #1
 800390a:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}

if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 800390e:	492c      	ldr	r1, [pc, #176]	; (80039c0 <Program_Flash+0xc8>)
 8003910:	f7fd fb1e 	bl	8000f50 <HAL_FLASHEx_Erase>
 8003914:	b188      	cbz	r0, 800393a <Program_Flash+0x42>
      user can call function 'HAL_FLASH_GetError()'
    */
    /* Infinite loop */
    while (1)
    {
      HAL_GPIO_WritePin(GPIOD, LED5_Pin, ON);
 8003916:	2201      	movs	r2, #1
 8003918:	2102      	movs	r1, #2
 800391a:	482a      	ldr	r0, [pc, #168]	; (80039c4 <Program_Flash+0xcc>)
 800391c:	f7fd fc52 	bl	80011c4 <HAL_GPIO_WritePin>
      HAL_Delay(100);
 8003920:	2064      	movs	r0, #100	; 0x64
 8003922:	f7fc fd25 	bl	8000370 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOD, LED5_Pin, OFF);
 8003926:	2200      	movs	r2, #0
 8003928:	2102      	movs	r1, #2
 800392a:	4826      	ldr	r0, [pc, #152]	; (80039c4 <Program_Flash+0xcc>)
 800392c:	f7fd fc4a 	bl	80011c4 <HAL_GPIO_WritePin>
      HAL_Delay(2000);
 8003930:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003934:	f7fc fd1c 	bl	8000370 <HAL_Delay>
 8003938:	e7ed      	b.n	8003916 <Program_Flash+0x1e>
    }
  }

Address = FLASH_USER_ADDR;
 800393a:	4d23      	ldr	r5, [pc, #140]	; (80039c8 <Program_Flash+0xd0>)
 800393c:	4604      	mov	r4, r0
 800393e:	4b23      	ldr	r3, [pc, #140]	; (80039cc <Program_Flash+0xd4>)
 8003940:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80039d4 <Program_Flash+0xdc>

for (int i = 0; i < X_MAZE_SIZE; i++) {
	for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, horiz_walls[i][j]) == HAL_OK) {
 8003944:	46a8      	mov	r8, r5
      HAL_GPIO_WritePin(GPIOD, LED5_Pin, OFF);
      HAL_Delay(2000);
    }
  }

Address = FLASH_USER_ADDR;
 8003946:	602b      	str	r3, [r5, #0]
 8003948:	1e66      	subs	r6, r4, #1
Set_Right(0, FORWARD);
HAL_Delay(300);

}

void Program_Flash() {
 800394a:	2700      	movs	r7, #0
 800394c:	444e      	add	r6, r9
Address = FLASH_USER_ADDR;

for (int i = 0; i < X_MAZE_SIZE; i++) {
	for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, horiz_walls[i][j]) == HAL_OK) {
 800394e:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8003952:	2300      	movs	r3, #0
 8003954:	6829      	ldr	r1, [r5, #0]
 8003956:	2000      	movs	r0, #0
 8003958:	f7fd fa7a 	bl	8000e50 <HAL_FLASH_Program>
 800395c:	b9b8      	cbnz	r0, 800398e <Program_Flash+0x96>
			Address = Address + 4;
 800395e:	f8d8 3000 	ldr.w	r3, [r8]
  }

Address = FLASH_USER_ADDR;

for (int i = 0; i < X_MAZE_SIZE; i++) {
	for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
 8003962:	3701      	adds	r7, #1

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, horiz_walls[i][j]) == HAL_OK) {
			Address = Address + 4;
 8003964:	3304      	adds	r3, #4
  }

Address = FLASH_USER_ADDR;

for (int i = 0; i < X_MAZE_SIZE; i++) {
	for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
 8003966:	2f02      	cmp	r7, #2

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, horiz_walls[i][j]) == HAL_OK) {
			Address = Address + 4;
 8003968:	f8c8 3000 	str.w	r3, [r8]
  }

Address = FLASH_USER_ADDR;

for (int i = 0; i < X_MAZE_SIZE; i++) {
	for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
 800396c:	d1ef      	bne.n	800394e <Program_Flash+0x56>
 800396e:	e013      	b.n	8003998 <Program_Flash+0xa0>
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) {
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, vert_walls[i][j]) == HAL_OK) {
			Address = Address + 4;
 8003970:	683b      	ldr	r3, [r7, #0]
		}
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) {
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
 8003972:	3601      	adds	r6, #1
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, vert_walls[i][j]) == HAL_OK) {
			Address = Address + 4;
 8003974:	3304      	adds	r3, #4
		}
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) {
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
 8003976:	2e03      	cmp	r6, #3
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, vert_walls[i][j]) == HAL_OK) {
			Address = Address + 4;
 8003978:	603b      	str	r3, [r7, #0]
		}
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) {
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
 800397a:	d018      	beq.n	80039ae <Program_Flash+0xb6>
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, vert_walls[i][j]) == HAL_OK) {
 800397c:	f818 2006 	ldrb.w	r2, [r8, r6]
 8003980:	2300      	movs	r3, #0
 8003982:	6829      	ldr	r1, [r5, #0]
 8003984:	2000      	movs	r0, #0
 8003986:	f7fd fa63 	bl	8000e50 <HAL_FLASH_Program>
 800398a:	2800      	cmp	r0, #0
 800398c:	d0f0      	beq.n	8003970 <Program_Flash+0x78>

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, horiz_walls[i][j]) == HAL_OK) {
			Address = Address + 4;
		}
		else {
			HAL_state = FUCKEDUP;
 800398e:	2245      	movs	r2, #69	; 0x45
 8003990:	4b0f      	ldr	r3, [pc, #60]	; (80039d0 <Program_Flash+0xd8>)
 8003992:	601a      	str	r2, [r3, #0]
			Error_Handler();
 8003994:	f7ff ff9e 	bl	80038d4 <Error_Handler>
 8003998:	3402      	adds	r4, #2
    }
  }

Address = FLASH_USER_ADDR;

for (int i = 0; i < X_MAZE_SIZE; i++) {
 800399a:	2c0c      	cmp	r4, #12
 800399c:	d1d4      	bne.n	8003948 <Program_Flash+0x50>
 800399e:	4604      	mov	r4, r0
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) {
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, vert_walls[i][j]) == HAL_OK) {
 80039a0:	f8df 9034 	ldr.w	r9, [pc, #52]	; 80039d8 <Program_Flash+0xe0>
 80039a4:	4f08      	ldr	r7, [pc, #32]	; (80039c8 <Program_Flash+0xd0>)
      HAL_GPIO_WritePin(GPIOD, LED5_Pin, OFF);
      HAL_Delay(2000);
    }
  }

Address = FLASH_USER_ADDR;
 80039a6:	2600      	movs	r6, #0
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) {
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, vert_walls[i][j]) == HAL_OK) {
 80039a8:	eb09 0804 	add.w	r8, r9, r4
 80039ac:	e7e6      	b.n	800397c <Program_Flash+0x84>
 80039ae:	3403      	adds	r4, #3
			Error_Handler();
		}
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) {
 80039b0:	2c0f      	cmp	r4, #15
 80039b2:	d1f8      	bne.n	80039a6 <Program_Flash+0xae>
		}
	}
}

HAL_FLASH_Lock();
}
 80039b4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			Error_Handler();
		}
	}
}

HAL_FLASH_Lock();
 80039b8:	f7fd ba12 	b.w	8000de0 <HAL_FLASH_Lock>
 80039bc:	20003170 	.word	0x20003170
 80039c0:	200030b8 	.word	0x200030b8
 80039c4:	40020c00 	.word	0x40020c00
 80039c8:	200042e4 	.word	0x200042e4
 80039cc:	08040000 	.word	0x08040000
 80039d0:	20004304 	.word	0x20004304
 80039d4:	200042ec 	.word	0x200042ec
 80039d8:	200030a4 	.word	0x200030a4

080039dc <Start_IR>:
lenc_diff_corr = 0;
renc_diff_corr = 0;

}

void Start_IR() {
 80039dc:	b508      	push	{r3, lr}

adc_conv = FALSE;
 80039de:	2200      	movs	r2, #0
 80039e0:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <Start_IR+0x1c>)
if(HAL_ADC_Start_DMA(&hadc1, ADC_valbuffer, ADC_VAL_BUFFER_LENGTH) != HAL_OK)
 80039e2:	4906      	ldr	r1, [pc, #24]	; (80039fc <Start_IR+0x20>)

}

void Start_IR() {

adc_conv = FALSE;
 80039e4:	601a      	str	r2, [r3, #0]
if(HAL_ADC_Start_DMA(&hadc1, ADC_valbuffer, ADC_VAL_BUFFER_LENGTH) != HAL_OK)
 80039e6:	2220      	movs	r2, #32
 80039e8:	4805      	ldr	r0, [pc, #20]	; (8003a00 <Start_IR+0x24>)
 80039ea:	f7fc fd79 	bl	80004e0 <HAL_ADC_Start_DMA>
 80039ee:	b108      	cbz	r0, 80039f4 <Start_IR+0x18>
  {
     Error_Handler();
 80039f0:	f7ff ff70 	bl	80038d4 <Error_Handler>
 80039f4:	bd08      	pop	{r3, pc}
 80039f6:	bf00      	nop
 80039f8:	20004308 	.word	0x20004308
 80039fc:	20005030 	.word	0x20005030
 8003a00:	20004a64 	.word	0x20004a64

08003a04 <Get_IR>:
     Error_Handler();
  }

}

void Get_IR(int front, int side) { //front and side variables used to save values in a buffer
 8003a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a08:	b085      	sub	sp, #20
 8003a0a:	4680      	mov	r8, r0
 8003a0c:	460f      	mov	r7, r1

	int comp_lf = 0;
	int comp_rf = 0;

	//left sensor
	Start_IR();
 8003a0e:	f7ff ffe5 	bl	80039dc <Start_IR>
	while (adc_conv == FALSE);
 8003a12:	4a6b      	ldr	r2, [pc, #428]	; (8003bc0 <Get_IR+0x1bc>)
 8003a14:	6813      	ldr	r3, [r2, #0]
 8003a16:	4c6a      	ldr	r4, [pc, #424]	; (8003bc0 <Get_IR+0x1bc>)
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0fb      	beq.n	8003a14 <Get_IR+0x10>
	off_l = l;
 8003a1c:	4d69      	ldr	r5, [pc, #420]	; (8003bc4 <Get_IR+0x1c0>)
	HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, ON);
 8003a1e:	2201      	movs	r2, #1
 8003a20:	2120      	movs	r1, #32
 8003a22:	4869      	ldr	r0, [pc, #420]	; (8003bc8 <Get_IR+0x1c4>)
	int comp_rf = 0;

	//left sensor
	Start_IR();
	while (adc_conv == FALSE);
	off_l = l;
 8003a24:	f8d5 b000 	ldr.w	fp, [r5]
	HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, ON);
 8003a28:	f7fd fbcc 	bl	80011c4 <HAL_GPIO_WritePin>
	Start_IR();
 8003a2c:	f7ff ffd6 	bl	80039dc <Start_IR>
	while (adc_conv == FALSE);
 8003a30:	6823      	ldr	r3, [r4, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0fc      	beq.n	8003a30 <Get_IR+0x2c>
	on_l = l;
	HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, OFF);
 8003a36:	2200      	movs	r2, #0
 8003a38:	2120      	movs	r1, #32
 8003a3a:	4863      	ldr	r0, [pc, #396]	; (8003bc8 <Get_IR+0x1c4>)
	while (adc_conv == FALSE);
	off_l = l;
	HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, ON);
	Start_IR();
	while (adc_conv == FALSE);
	on_l = l;
 8003a3c:	682e      	ldr	r6, [r5, #0]
	HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, OFF);
 8003a3e:	f7fd fbc1 	bl	80011c4 <HAL_GPIO_WritePin>

	//right sensor
	Start_IR();
 8003a42:	f7ff ffcb 	bl	80039dc <Start_IR>
	while (adc_conv == FALSE);
 8003a46:	6823      	ldr	r3, [r4, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0fc      	beq.n	8003a46 <Get_IR+0x42>
	off_r = r;
 8003a4c:	4d5f      	ldr	r5, [pc, #380]	; (8003bcc <Get_IR+0x1c8>)
	HAL_GPIO_WritePin(R_EMIT_PORT, R_EMIT_PIN, ON);
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a54:	485e      	ldr	r0, [pc, #376]	; (8003bd0 <Get_IR+0x1cc>)
	HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, OFF);

	//right sensor
	Start_IR();
	while (adc_conv == FALSE);
	off_r = r;
 8003a56:	f8d5 a000 	ldr.w	sl, [r5]
	HAL_GPIO_WritePin(R_EMIT_PORT, R_EMIT_PIN, ON);
 8003a5a:	f7fd fbb3 	bl	80011c4 <HAL_GPIO_WritePin>
	Start_IR();
 8003a5e:	f7ff ffbd 	bl	80039dc <Start_IR>
	while (adc_conv == FALSE);
 8003a62:	6823      	ldr	r3, [r4, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0fc      	beq.n	8003a62 <Get_IR+0x5e>
	on_r = r;
	HAL_GPIO_WritePin(R_EMIT_PORT, R_EMIT_PIN, OFF);
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a6e:	4858      	ldr	r0, [pc, #352]	; (8003bd0 <Get_IR+0x1cc>)
	while (adc_conv == FALSE);
	off_r = r;
	HAL_GPIO_WritePin(R_EMIT_PORT, R_EMIT_PIN, ON);
	Start_IR();
	while (adc_conv == FALSE);
	on_r = r;
 8003a70:	682d      	ldr	r5, [r5, #0]
	HAL_GPIO_WritePin(R_EMIT_PORT, R_EMIT_PIN, OFF);
 8003a72:	f7fd fba7 	bl	80011c4 <HAL_GPIO_WritePin>

	//left front
	Start_IR();
 8003a76:	f7ff ffb1 	bl	80039dc <Start_IR>
	while (adc_conv == FALSE);
 8003a7a:	6823      	ldr	r3, [r4, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0fc      	beq.n	8003a7a <Get_IR+0x76>
	off_lf = lf;
 8003a80:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8003bf8 <Get_IR+0x1f4>
	HAL_GPIO_WritePin(LF_EMIT_PORT, LF_EMIT_PIN, ON);
 8003a84:	2201      	movs	r2, #1
 8003a86:	2110      	movs	r1, #16
 8003a88:	484f      	ldr	r0, [pc, #316]	; (8003bc8 <Get_IR+0x1c4>)
	HAL_GPIO_WritePin(R_EMIT_PORT, R_EMIT_PIN, OFF);

	//left front
	Start_IR();
	while (adc_conv == FALSE);
	off_lf = lf;
 8003a8a:	f8d9 3000 	ldr.w	r3, [r9]
 8003a8e:	9301      	str	r3, [sp, #4]
	HAL_GPIO_WritePin(LF_EMIT_PORT, LF_EMIT_PIN, ON);
 8003a90:	f7fd fb98 	bl	80011c4 <HAL_GPIO_WritePin>
	Start_IR();
 8003a94:	f7ff ffa2 	bl	80039dc <Start_IR>
	while (adc_conv == FALSE);
 8003a98:	6823      	ldr	r3, [r4, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0fc      	beq.n	8003a98 <Get_IR+0x94>
	on_lf = lf;
 8003a9e:	f8d9 3000 	ldr.w	r3, [r9]
	HAL_GPIO_WritePin(LF_EMIT_PORT, LF_EMIT_PIN, OFF);
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2110      	movs	r1, #16
 8003aa6:	4848      	ldr	r0, [pc, #288]	; (8003bc8 <Get_IR+0x1c4>)
	while (adc_conv == FALSE);
	off_lf = lf;
	HAL_GPIO_WritePin(LF_EMIT_PORT, LF_EMIT_PIN, ON);
	Start_IR();
	while (adc_conv == FALSE);
	on_lf = lf;
 8003aa8:	9302      	str	r3, [sp, #8]
	HAL_GPIO_WritePin(LF_EMIT_PORT, LF_EMIT_PIN, OFF);
 8003aaa:	f7fd fb8b 	bl	80011c4 <HAL_GPIO_WritePin>

	//right front
	Start_IR();
 8003aae:	f7ff ff95 	bl	80039dc <Start_IR>
	while (adc_conv == FALSE);
 8003ab2:	6823      	ldr	r3, [r4, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0fc      	beq.n	8003ab2 <Get_IR+0xae>
	off_rf = rf;
 8003ab8:	4b46      	ldr	r3, [pc, #280]	; (8003bd4 <Get_IR+0x1d0>)
	HAL_GPIO_WritePin(RF_EMIT_PORT, RF_EMIT_PIN, ON);
 8003aba:	2201      	movs	r2, #1
 8003abc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ac0:	4843      	ldr	r0, [pc, #268]	; (8003bd0 <Get_IR+0x1cc>)
	HAL_GPIO_WritePin(LF_EMIT_PORT, LF_EMIT_PIN, OFF);

	//right front
	Start_IR();
	while (adc_conv == FALSE);
	off_rf = rf;
 8003ac2:	f8d3 9000 	ldr.w	r9, [r3]
 8003ac6:	9303      	str	r3, [sp, #12]
	HAL_GPIO_WritePin(RF_EMIT_PORT, RF_EMIT_PIN, ON);
 8003ac8:	f7fd fb7c 	bl	80011c4 <HAL_GPIO_WritePin>
	Start_IR();
 8003acc:	f7ff ff86 	bl	80039dc <Start_IR>
 8003ad0:	9b03      	ldr	r3, [sp, #12]
	while (adc_conv == FALSE);
 8003ad2:	6822      	ldr	r2, [r4, #0]
 8003ad4:	2a00      	cmp	r2, #0
 8003ad6:	d0fc      	beq.n	8003ad2 <Get_IR+0xce>
	on_rf = rf;
	HAL_GPIO_WritePin(RF_EMIT_PORT, RF_EMIT_PIN, OFF);
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ade:	483c      	ldr	r0, [pc, #240]	; (8003bd0 <Get_IR+0x1cc>)

	dif_l = on_l - off_l; //val_array[0]
 8003ae0:	ebcb 0606 	rsb	r6, fp, r6
	while (adc_conv == FALSE);
	off_rf = rf;
	HAL_GPIO_WritePin(RF_EMIT_PORT, RF_EMIT_PIN, ON);
	Start_IR();
	while (adc_conv == FALSE);
	on_rf = rf;
 8003ae4:	681c      	ldr	r4, [r3, #0]
	HAL_GPIO_WritePin(RF_EMIT_PORT, RF_EMIT_PIN, OFF);
 8003ae6:	f7fd fb6d 	bl	80011c4 <HAL_GPIO_WritePin>

	dif_l = on_l - off_l; //val_array[0]
 8003aea:	4b3b      	ldr	r3, [pc, #236]	; (8003bd8 <Get_IR+0x1d4>)
	dif_r = on_r - off_r; //val_array[1]
 8003aec:	ebca 0505 	rsb	r5, sl, r5
	dif_rf = on_rf - off_rf; //val_array[2]
 8003af0:	ebc9 0204 	rsb	r2, r9, r4
	dif_lf = on_lf - off_lf; //val_array[3]
 8003af4:	9901      	ldr	r1, [sp, #4]
	Start_IR();
	while (adc_conv == FALSE);
	on_rf = rf;
	HAL_GPIO_WritePin(RF_EMIT_PORT, RF_EMIT_PIN, OFF);

	dif_l = on_l - off_l; //val_array[0]
 8003af6:	601e      	str	r6, [r3, #0]
	dif_r = on_r - off_r; //val_array[1]
	dif_rf = on_rf - off_rf; //val_array[2]
	dif_lf = on_lf - off_lf; //val_array[3]

	//lf and rf transitions
	if (side == TRUE) {
 8003af8:	2f01      	cmp	r7, #1
	while (adc_conv == FALSE);
	on_rf = rf;
	HAL_GPIO_WritePin(RF_EMIT_PORT, RF_EMIT_PIN, OFF);

	dif_l = on_l - off_l; //val_array[0]
	dif_r = on_r - off_r; //val_array[1]
 8003afa:	4b38      	ldr	r3, [pc, #224]	; (8003bdc <Get_IR+0x1d8>)
 8003afc:	601d      	str	r5, [r3, #0]
	dif_rf = on_rf - off_rf; //val_array[2]
 8003afe:	4b38      	ldr	r3, [pc, #224]	; (8003be0 <Get_IR+0x1dc>)
 8003b00:	601a      	str	r2, [r3, #0]
	dif_lf = on_lf - off_lf; //val_array[3]
 8003b02:	9b02      	ldr	r3, [sp, #8]
 8003b04:	eba3 0101 	sub.w	r1, r3, r1
 8003b08:	4b36      	ldr	r3, [pc, #216]	; (8003be4 <Get_IR+0x1e0>)
 8003b0a:	6019      	str	r1, [r3, #0]

	//lf and rf transitions
	if (side == TRUE) {
 8003b0c:	d141      	bne.n	8003b92 <Get_IR+0x18e>
		lf_buffer[buff_count] = dif_lf;
 8003b0e:	4836      	ldr	r0, [pc, #216]	; (8003be8 <Get_IR+0x1e4>)
		rf_buffer[buff_count] = dif_rf;

		comp_lf = lf_buffer[((buff_count - IR_DIFF) + IR_BUFFER) % IR_BUFFER];
 8003b10:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	dif_rf = on_rf - off_rf; //val_array[2]
	dif_lf = on_lf - off_lf; //val_array[3]

	//lf and rf transitions
	if (side == TRUE) {
		lf_buffer[buff_count] = dif_lf;
 8003b14:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8003bfc <Get_IR+0x1f8>
 8003b18:	6803      	ldr	r3, [r0, #0]
		rf_buffer[buff_count] = dif_rf;
 8003b1a:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8003c00 <Get_IR+0x1fc>

		comp_lf = lf_buffer[((buff_count - IR_DIFF) + IR_BUFFER) % IR_BUFFER];
 8003b1e:	f503 7a48 	add.w	sl, r3, #800	; 0x320
	dif_rf = on_rf - off_rf; //val_array[2]
	dif_lf = on_lf - off_lf; //val_array[3]

	//lf and rf transitions
	if (side == TRUE) {
		lf_buffer[buff_count] = dif_lf;
 8003b22:	f84c 1023 	str.w	r1, [ip, r3, lsl #2]
		rf_buffer[buff_count] = dif_rf;
 8003b26:	f849 2023 	str.w	r2, [r9, r3, lsl #2]

		comp_lf = lf_buffer[((buff_count - IR_DIFF) + IR_BUFFER) % IR_BUFFER];
 8003b2a:	fb9a fef4 	sdiv	lr, sl, r4
 8003b2e:	fb04 a41e 	mls	r4, r4, lr, sl
 8003b32:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 8003c04 <Get_IR+0x200>
 8003b36:	f85c c024 	ldr.w	ip, [ip, r4, lsl #2]
		comp_rf = rf_buffer[((buff_count - IR_DIFF) + IR_BUFFER) % IR_BUFFER];
 8003b3a:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]

		if (comp_lf > 10 && abs(dif_lf  - comp_lf) > IR_CHANGE) {
 8003b3e:	f1bc 0f0a 	cmp.w	ip, #10
 8003b42:	dd0a      	ble.n	8003b5a <Get_IR+0x156>
 8003b44:	ebcc 0101 	rsb	r1, ip, r1
 8003b48:	2900      	cmp	r1, #0
 8003b4a:	bfb8      	it	lt
 8003b4c:	4249      	neglt	r1, r1
 8003b4e:	f5b1 7fc8 	cmp.w	r1, #400	; 0x190
 8003b52:	dd02      	ble.n	8003b5a <Get_IR+0x156>
			l_transition_flag = TRUE;
 8003b54:	f8ce 7000 	str.w	r7, [lr]
 8003b58:	e002      	b.n	8003b60 <Get_IR+0x15c>
		}
		else {
			l_transition_flag = FALSE;
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	f8ce 1000 	str.w	r1, [lr]
		}
		if (comp_rf > 10 && abs(dif_rf - comp_rf)  > IR_CHANGE) {
 8003b60:	2c0a      	cmp	r4, #10
 8003b62:	4922      	ldr	r1, [pc, #136]	; (8003bec <Get_IR+0x1e8>)
 8003b64:	dd0b      	ble.n	8003b7e <Get_IR+0x17a>
 8003b66:	ebc4 0902 	rsb	r9, r4, r2
 8003b6a:	f1b9 0f00 	cmp.w	r9, #0
 8003b6e:	bfb8      	it	lt
 8003b70:	f1c9 0900 	rsblt	r9, r9, #0
 8003b74:	f5b9 7fc8 	cmp.w	r9, #400	; 0x190
 8003b78:	dd01      	ble.n	8003b7e <Get_IR+0x17a>
			r_transition_flag = TRUE;
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	e000      	b.n	8003b80 <Get_IR+0x17c>
		}
		else {
			r_transition_flag = FALSE;
 8003b7e:	2200      	movs	r2, #0
 8003b80:	600a      	str	r2, [r1, #0]
		}

		buff_count = (buff_count+1) % IR_BUFFER;
 8003b82:	3301      	adds	r3, #1
 8003b84:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003b88:	fb93 f2f1 	sdiv	r2, r3, r1
 8003b8c:	fb01 3312 	mls	r3, r1, r2, r3
 8003b90:	6003      	str	r3, [r0, #0]
	}

	if (front == TRUE) { //used only for calibration
 8003b92:	f1b8 0f01 	cmp.w	r8, #1
 8003b96:	d10f      	bne.n	8003bb8 <Get_IR+0x1b4>

		l_buffer[buff_count] = dif_l;
 8003b98:	4913      	ldr	r1, [pc, #76]	; (8003be8 <Get_IR+0x1e4>)
		r_buffer[buff_count] = dif_r;
		buff_count = (buff_count + 1) % IR_BUFFER;
 8003b9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		buff_count = (buff_count+1) % IR_BUFFER;
	}

	if (front == TRUE) { //used only for calibration

		l_buffer[buff_count] = dif_l;
 8003b9e:	4a14      	ldr	r2, [pc, #80]	; (8003bf0 <Get_IR+0x1ec>)
 8003ba0:	680b      	ldr	r3, [r1, #0]
 8003ba2:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
		r_buffer[buff_count] = dif_r;
 8003ba6:	4a13      	ldr	r2, [pc, #76]	; (8003bf4 <Get_IR+0x1f0>)
 8003ba8:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
		buff_count = (buff_count + 1) % IR_BUFFER;
 8003bac:	3301      	adds	r3, #1
 8003bae:	fb93 f2f0 	sdiv	r2, r3, r0
 8003bb2:	fb00 3312 	mls	r3, r0, r2, r3
 8003bb6:	600b      	str	r3, [r1, #0]
	}

}
 8003bb8:	b005      	add	sp, #20
 8003bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20004308 	.word	0x20004308
 8003bc4:	200010e4 	.word	0x200010e4
 8003bc8:	40020400 	.word	0x40020400
 8003bcc:	200020ec 	.word	0x200020ec
 8003bd0:	40020800 	.word	0x40020800
 8003bd4:	20003274 	.word	0x20003274
 8003bd8:	20002088 	.word	0x20002088
 8003bdc:	200020e4 	.word	0x200020e4
 8003be0:	200042d4 	.word	0x200042d4
 8003be4:	200042fc 	.word	0x200042fc
 8003be8:	200032cc 	.word	0x200032cc
 8003bec:	200020dc 	.word	0x200020dc
 8003bf0:	200020f8 	.word	0x200020f8
 8003bf4:	200010e8 	.word	0x200010e8
 8003bf8:	200030bc 	.word	0x200030bc
 8003bfc:	200032e4 	.word	0x200032e4
 8003c00:	200000ec 	.word	0x200000ec
 8003c04:	200020f0 	.word	0x200020f0

08003c08 <Correction_Calibrate>:
Set_Left(left, l_dic);
Set_Right(right, r_dic);

}

void Correction_Calibrate() {
 8003c08:	b537      	push	{r0, r1, r2, r4, r5, lr}
//place in middel of mouse
Clear_Buffers();
 8003c0a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8003c0e:	f7ff f8f1 	bl	8002df4 <Clear_Buffers>

int lf = 0;
int rf = 0;

for (int i = 0; i < IR_BUFFER; i++) {
	Get_IR(FALSE, TRUE);
 8003c12:	2101      	movs	r1, #1
 8003c14:	2000      	movs	r0, #0
 8003c16:	f7ff fef5 	bl	8003a04 <Get_IR>
Clear_Buffers();

int lf = 0;
int rf = 0;

for (int i = 0; i < IR_BUFFER; i++) {
 8003c1a:	3c01      	subs	r4, #1
 8003c1c:	d1f9      	bne.n	8003c12 <Correction_Calibrate+0xa>
 8003c1e:	4623      	mov	r3, r4
 8003c20:	4621      	mov	r1, r4
 8003c22:	4622      	mov	r2, r4
	Get_IR(FALSE, TRUE);
}

for (int i = 0; i < IR_BUFFER; i++) {
lf = lf + lf_buffer[i];
 8003c24:	4d0d      	ldr	r5, [pc, #52]	; (8003c5c <Correction_Calibrate+0x54>)
rf = rf + rf_buffer[i];
 8003c26:	4c0e      	ldr	r4, [pc, #56]	; (8003c60 <Correction_Calibrate+0x58>)
for (int i = 0; i < IR_BUFFER; i++) {
	Get_IR(FALSE, TRUE);
}

for (int i = 0; i < IR_BUFFER; i++) {
lf = lf + lf_buffer[i];
 8003c28:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8003c2c:	4402      	add	r2, r0
rf = rf + rf_buffer[i];
 8003c2e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]

for (int i = 0; i < IR_BUFFER; i++) {
	Get_IR(FALSE, TRUE);
}

for (int i = 0; i < IR_BUFFER; i++) {
 8003c32:	3301      	adds	r3, #1
lf = lf + lf_buffer[i];
rf = rf + rf_buffer[i];
 8003c34:	4401      	add	r1, r0

for (int i = 0; i < IR_BUFFER; i++) {
	Get_IR(FALSE, TRUE);
}

for (int i = 0; i < IR_BUFFER; i++) {
 8003c36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c3a:	d1f5      	bne.n	8003c28 <Correction_Calibrate+0x20>
lf = lf + lf_buffer[i];
rf = rf + rf_buffer[i];
}

lf = lf/IR_BUFFER;
 8003c3c:	fb92 f2f3 	sdiv	r2, r2, r3
rf = rf/IR_BUFFER;
 8003c40:	fb91 f3f3 	sdiv	r3, r1, r3

sprintf(tx_buffer, "Correction: \r\nLEFT MIDDLE %d    RIGHT MIDDLE %d      OFFSET(LEFT - RIGHT) %d \r\n", lf, rf, lf - rf);
 8003c44:	1ad1      	subs	r1, r2, r3
 8003c46:	4807      	ldr	r0, [pc, #28]	; (8003c64 <Correction_Calibrate+0x5c>)
 8003c48:	9100      	str	r1, [sp, #0]
 8003c4a:	4907      	ldr	r1, [pc, #28]	; (8003c68 <Correction_Calibrate+0x60>)
 8003c4c:	f001 fde2 	bl	8005814 <siprintf>
Transmit(tx_buffer);
 8003c50:	4804      	ldr	r0, [pc, #16]	; (8003c64 <Correction_Calibrate+0x5c>)

}
 8003c52:	b003      	add	sp, #12
 8003c54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}

lf = lf/IR_BUFFER;
rf = rf/IR_BUFFER;

sprintf(tx_buffer, "Correction: \r\nLEFT MIDDLE %d    RIGHT MIDDLE %d      OFFSET(LEFT - RIGHT) %d \r\n", lf, rf, lf - rf);
Transmit(tx_buffer);
 8003c58:	f7ff b948 	b.w	8002eec <Transmit>
 8003c5c:	200032e4 	.word	0x200032e4
 8003c60:	200000ec 	.word	0x200000ec
 8003c64:	2000499c 	.word	0x2000499c
 8003c68:	0800644d 	.word	0x0800644d

08003c6c <HAL_GPIO_EXTI_Callback>:
}

//button interrupt routine (THIS IS RUN WHEN BUTTONS ARE PRESSED)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (GPIO_Pin == BUTTON2_Pin)
 8003c6c:	2840      	cmp	r0, #64	; 0x40
  }
}

//button interrupt routine (THIS IS RUN WHEN BUTTONS ARE PRESSED)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003c6e:	b508      	push	{r3, lr}
  if (GPIO_Pin == BUTTON2_Pin)
 8003c70:	d116      	bne.n	8003ca0 <HAL_GPIO_EXTI_Callback+0x34>
  {
	  if (debug_flag == FALSE) {
 8003c72:	4b25      	ldr	r3, [pc, #148]	; (8003d08 <HAL_GPIO_EXTI_Callback+0x9c>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	b97b      	cbnz	r3, 8003c98 <HAL_GPIO_EXTI_Callback+0x2c>
	  stop_flag = !stop_flag;
 8003c78:	4a24      	ldr	r2, [pc, #144]	; (8003d0c <HAL_GPIO_EXTI_Callback+0xa0>)
	  HAL_GPIO_TogglePin(GPIOD, LED4_Pin);
 8003c7a:	2104      	movs	r1, #4
 8003c7c:	4824      	ldr	r0, [pc, #144]	; (8003d10 <HAL_GPIO_EXTI_Callback+0xa4>)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (GPIO_Pin == BUTTON2_Pin)
  {
	  if (debug_flag == FALSE) {
	  stop_flag = !stop_flag;
 8003c7e:	6813      	ldr	r3, [r2, #0]
 8003c80:	fab3 f383 	clz	r3, r3
 8003c84:	095b      	lsrs	r3, r3, #5
 8003c86:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_TogglePin(GPIOD, LED4_Pin);
 8003c88:	f7fd faa0 	bl	80011cc <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOD, LED1_Pin);
 8003c8c:	2120      	movs	r1, #32
 8003c8e:	4820      	ldr	r0, [pc, #128]	; (8003d10 <HAL_GPIO_EXTI_Callback+0xa4>)
	  __HAL_TIM_SET_COUNTER(&htim4, 0);
	 debug_flag = !debug_flag;
	 //buzzer_flag = !buzzer_flag;
	 //Set_Buzzer(3375, buzzer_flag);
  }
}
 8003c90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (GPIO_Pin == BUTTON2_Pin)
  {
	  if (debug_flag == FALSE) {
	  stop_flag = !stop_flag;
	  HAL_GPIO_TogglePin(GPIOD, LED4_Pin);
	  HAL_GPIO_TogglePin(GPIOD, LED1_Pin);
 8003c94:	f7fd ba9a 	b.w	80011cc <HAL_GPIO_TogglePin>
	  __HAL_TIM_SET_COUNTER(&htim4, 0);
	 debug_flag = !debug_flag;
	 //buzzer_flag = !buzzer_flag;
	 //Set_Buzzer(3375, buzzer_flag);
  }
}
 8003c98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  }

	  else
	  {
		  //send_debug = !send_debug;
		  Print_Maze();
 8003c9c:	f7ff bc28 	b.w	80034f0 <Print_Maze>
	  }

  }

  if (GPIO_Pin == BUTTON1_Pin)
 8003ca0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003ca4:	d12f      	bne.n	8003d06 <HAL_GPIO_EXTI_Callback+0x9a>
  {
	  if (dif_r > 3600) {
 8003ca6:	4b1b      	ldr	r3, [pc, #108]	; (8003d14 <HAL_GPIO_EXTI_Callback+0xa8>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8003cae:	dd06      	ble.n	8003cbe <HAL_GPIO_EXTI_Callback+0x52>
		  send_debug = !send_debug;
 8003cb0:	4a19      	ldr	r2, [pc, #100]	; (8003d18 <HAL_GPIO_EXTI_Callback+0xac>)
 8003cb2:	6813      	ldr	r3, [r2, #0]
 8003cb4:	fab3 f383 	clz	r3, r3
 8003cb8:	095b      	lsrs	r3, r3, #5
 8003cba:	6013      	str	r3, [r2, #0]
 8003cbc:	e00e      	b.n	8003cdc <HAL_GPIO_EXTI_Callback+0x70>
	  }

	  else if (dif_rf > 3600) {
 8003cbe:	4b17      	ldr	r3, [pc, #92]	; (8003d1c <HAL_GPIO_EXTI_Callback+0xb0>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8003cc6:	dd02      	ble.n	8003cce <HAL_GPIO_EXTI_Callback+0x62>

		  Correction_Calibrate();
 8003cc8:	f7ff ff9e 	bl	8003c08 <Correction_Calibrate>
 8003ccc:	e006      	b.n	8003cdc <HAL_GPIO_EXTI_Callback+0x70>
	  }

	  else if (dif_lf > 3600) {
 8003cce:	4b14      	ldr	r3, [pc, #80]	; (8003d20 <HAL_GPIO_EXTI_Callback+0xb4>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8003cd6:	dd01      	ble.n	8003cdc <HAL_GPIO_EXTI_Callback+0x70>
		  //Reset_Maze();
		  Print_Maze();
 8003cd8:	f7ff fc0a 	bl	80034f0 <Print_Maze>
	  }

	  HAL_GPIO_TogglePin(GPIOD, LED3_Pin);
 8003cdc:	2108      	movs	r1, #8
 8003cde:	480c      	ldr	r0, [pc, #48]	; (8003d10 <HAL_GPIO_EXTI_Callback+0xa4>)
 8003ce0:	f7fd fa74 	bl	80011cc <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOD, LED1_Pin);
 8003ce4:	2120      	movs	r1, #32
 8003ce6:	480a      	ldr	r0, [pc, #40]	; (8003d10 <HAL_GPIO_EXTI_Callback+0xa4>)
 8003ce8:	f7fd fa70 	bl	80011cc <HAL_GPIO_TogglePin>

	  //Calc_Optimal();
	  // Fast_Straights();
	  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8003cec:	4b0d      	ldr	r3, [pc, #52]	; (8003d24 <HAL_GPIO_EXTI_Callback+0xb8>)
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	6253      	str	r3, [r2, #36]	; 0x24
	  __HAL_TIM_SET_COUNTER(&htim4, 0);
 8003cf4:	4a0c      	ldr	r2, [pc, #48]	; (8003d28 <HAL_GPIO_EXTI_Callback+0xbc>)
 8003cf6:	6812      	ldr	r2, [r2, #0]
 8003cf8:	6253      	str	r3, [r2, #36]	; 0x24
	 debug_flag = !debug_flag;
 8003cfa:	4a03      	ldr	r2, [pc, #12]	; (8003d08 <HAL_GPIO_EXTI_Callback+0x9c>)
 8003cfc:	6813      	ldr	r3, [r2, #0]
 8003cfe:	fab3 f383 	clz	r3, r3
 8003d02:	095b      	lsrs	r3, r3, #5
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	bd08      	pop	{r3, pc}
 8003d08:	200042dc 	.word	0x200042dc
 8003d0c:	20000004 	.word	0x20000004
 8003d10:	40020c00 	.word	0x40020c00
 8003d14:	200020e4 	.word	0x200020e4
 8003d18:	20003168 	.word	0x20003168
 8003d1c:	200042d4 	.word	0x200042d4
 8003d20:	200042fc 	.word	0x200042fc
 8003d24:	200050f8 	.word	0x200050f8
 8003d28:	200043a0 	.word	0x200043a0

08003d2c <Read_Walls>:
	Floodfill(FALSE); //floodfill maze
}

void Read_Walls() {

front_l = 0;
 8003d2c:	4a7a      	ldr	r2, [pc, #488]	; (8003f18 <Read_Walls+0x1ec>)
	}

	Floodfill(FALSE); //floodfill maze
}

void Read_Walls() {
 8003d2e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

front_l = 0;
 8003d32:	2300      	movs	r3, #0
front_r = 0;
 8003d34:	4f79      	ldr	r7, [pc, #484]	; (8003f1c <Read_Walls+0x1f0>)
lf_side = 0;
 8003d36:	4e7a      	ldr	r6, [pc, #488]	; (8003f20 <Read_Walls+0x1f4>)
rf_side = 0;
 8003d38:	f04f 0932 	mov.w	r9, #50	; 0x32
 8003d3c:	4d79      	ldr	r5, [pc, #484]	; (8003f24 <Read_Walls+0x1f8>)
 8003d3e:	4690      	mov	r8, r2

for (int i = 0; i < WALL_SAMPLES; i++) {
	Get_IR(FALSE, FALSE);
	front_l = front_l + dif_l;
 8003d40:	4c79      	ldr	r4, [pc, #484]	; (8003f28 <Read_Walls+0x1fc>)
	Floodfill(FALSE); //floodfill maze
}

void Read_Walls() {

front_l = 0;
 8003d42:	6013      	str	r3, [r2, #0]
front_r = 0;
 8003d44:	603b      	str	r3, [r7, #0]
lf_side = 0;
 8003d46:	6033      	str	r3, [r6, #0]
rf_side = 0;
 8003d48:	602b      	str	r3, [r5, #0]

for (int i = 0; i < WALL_SAMPLES; i++) {
	Get_IR(FALSE, FALSE);
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	4608      	mov	r0, r1
 8003d4e:	f7ff fe59 	bl	8003a04 <Get_IR>
	front_l = front_l + dif_l;
 8003d52:	f8d8 2000 	ldr.w	r2, [r8]
 8003d56:	6823      	ldr	r3, [r4, #0]
front_l = 0;
front_r = 0;
lf_side = 0;
rf_side = 0;

for (int i = 0; i < WALL_SAMPLES; i++) {
 8003d58:	f1b9 0901 	subs.w	r9, r9, #1
	Get_IR(FALSE, FALSE);
	front_l = front_l + dif_l;
	front_r = front_r + dif_r;
	lf_side = lf_side + dif_lf;
 8003d5c:	4973      	ldr	r1, [pc, #460]	; (8003f2c <Read_Walls+0x200>)
lf_side = 0;
rf_side = 0;

for (int i = 0; i < WALL_SAMPLES; i++) {
	Get_IR(FALSE, FALSE);
	front_l = front_l + dif_l;
 8003d5e:	eb02 0e03 	add.w	lr, r2, r3
	front_r = front_r + dif_r;
 8003d62:	4a73      	ldr	r2, [pc, #460]	; (8003f30 <Read_Walls+0x204>)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	6812      	ldr	r2, [r2, #0]
	lf_side = lf_side + dif_lf;
 8003d68:	6809      	ldr	r1, [r1, #0]
rf_side = 0;

for (int i = 0; i < WALL_SAMPLES; i++) {
	Get_IR(FALSE, FALSE);
	front_l = front_l + dif_l;
	front_r = front_r + dif_r;
 8003d6a:	4413      	add	r3, r2
	lf_side = lf_side + dif_lf;
	rf_side = rf_side + dif_rf;
 8003d6c:	4871      	ldr	r0, [pc, #452]	; (8003f34 <Read_Walls+0x208>)

for (int i = 0; i < WALL_SAMPLES; i++) {
	Get_IR(FALSE, FALSE);
	front_l = front_l + dif_l;
	front_r = front_r + dif_r;
	lf_side = lf_side + dif_lf;
 8003d6e:	6832      	ldr	r2, [r6, #0]
	rf_side = rf_side + dif_rf;
 8003d70:	6800      	ldr	r0, [r0, #0]

for (int i = 0; i < WALL_SAMPLES; i++) {
	Get_IR(FALSE, FALSE);
	front_l = front_l + dif_l;
	front_r = front_r + dif_r;
	lf_side = lf_side + dif_lf;
 8003d72:	440a      	add	r2, r1
	rf_side = rf_side + dif_rf;
 8003d74:	6829      	ldr	r1, [r5, #0]
lf_side = 0;
rf_side = 0;

for (int i = 0; i < WALL_SAMPLES; i++) {
	Get_IR(FALSE, FALSE);
	front_l = front_l + dif_l;
 8003d76:	f8c8 e000 	str.w	lr, [r8]
	front_r = front_r + dif_r;
	lf_side = lf_side + dif_lf;
	rf_side = rf_side + dif_rf;
 8003d7a:	4408      	add	r0, r1
rf_side = 0;

for (int i = 0; i < WALL_SAMPLES; i++) {
	Get_IR(FALSE, FALSE);
	front_l = front_l + dif_l;
	front_r = front_r + dif_r;
 8003d7c:	603b      	str	r3, [r7, #0]
	lf_side = lf_side + dif_lf;
 8003d7e:	6032      	str	r2, [r6, #0]
	rf_side = rf_side + dif_rf;
 8003d80:	6028      	str	r0, [r5, #0]
front_l = 0;
front_r = 0;
lf_side = 0;
rf_side = 0;

for (int i = 0; i < WALL_SAMPLES; i++) {
 8003d82:	d1e2      	bne.n	8003d4a <Read_Walls+0x1e>
	front_r = front_r + dif_r;
	lf_side = lf_side + dif_lf;
	rf_side = rf_side + dif_rf;
}

front_l = front_l/WALL_SAMPLES;
 8003d84:	2132      	movs	r1, #50	; 0x32
 8003d86:	4d64      	ldr	r5, [pc, #400]	; (8003f18 <Read_Walls+0x1ec>)
 8003d88:	fb9e f4f1 	sdiv	r4, lr, r1
front_r = front_r/WALL_SAMPLES;
 8003d8c:	fb93 f3f1 	sdiv	r3, r3, r1
lf_side = lf_side/WALL_SAMPLES;
 8003d90:	fb92 f2f1 	sdiv	r2, r2, r1
rf_side = rf_side/WALL_SAMPLES;
 8003d94:	fb90 f1f1 	sdiv	r1, r0, r1
 8003d98:	4862      	ldr	r0, [pc, #392]	; (8003f24 <Read_Walls+0x1f8>)
	front_r = front_r + dif_r;
	lf_side = lf_side + dif_lf;
	rf_side = rf_side + dif_rf;
}

front_l = front_l/WALL_SAMPLES;
 8003d9a:	602c      	str	r4, [r5, #0]
front_r = front_r/WALL_SAMPLES;
lf_side = lf_side/WALL_SAMPLES;
rf_side = rf_side/WALL_SAMPLES;
 8003d9c:	6001      	str	r1, [r0, #0]
	lf_side = lf_side + dif_lf;
	rf_side = rf_side + dif_rf;
}

front_l = front_l/WALL_SAMPLES;
front_r = front_r/WALL_SAMPLES;
 8003d9e:	4d5f      	ldr	r5, [pc, #380]	; (8003f1c <Read_Walls+0x1f0>)
lf_side = lf_side/WALL_SAMPLES;
rf_side = rf_side/WALL_SAMPLES;

switch(cur_dir) {
 8003da0:	4865      	ldr	r0, [pc, #404]	; (8003f38 <Read_Walls+0x20c>)
	lf_side = lf_side + dif_lf;
	rf_side = rf_side + dif_rf;
}

front_l = front_l/WALL_SAMPLES;
front_r = front_r/WALL_SAMPLES;
 8003da2:	602b      	str	r3, [r5, #0]
lf_side = lf_side/WALL_SAMPLES;
rf_side = rf_side/WALL_SAMPLES;

switch(cur_dir) {
 8003da4:	6800      	ldr	r0, [r0, #0]
	rf_side = rf_side + dif_rf;
}

front_l = front_l/WALL_SAMPLES;
front_r = front_r/WALL_SAMPLES;
lf_side = lf_side/WALL_SAMPLES;
 8003da6:	4d5e      	ldr	r5, [pc, #376]	; (8003f20 <Read_Walls+0x1f4>)
 8003da8:	602a      	str	r2, [r5, #0]
rf_side = rf_side/WALL_SAMPLES;

switch(cur_dir) {
 8003daa:	2803      	cmp	r0, #3
 8003dac:	f200 80b2 	bhi.w	8003f14 <Read_Walls+0x1e8>
 8003db0:	e8df f000 	tbb	[pc, r0]
 8003db4:	85582b02 	.word	0x85582b02

case NORTH: //facing up
	if (y_coord > 0 && (front_l >= FRONT_THRESHOLD || front_r >= FRONT_THRESHOLD)) { //front sensor
 8003db8:	4860      	ldr	r0, [pc, #384]	; (8003f3c <Read_Walls+0x210>)
 8003dba:	4d61      	ldr	r5, [pc, #388]	; (8003f40 <Read_Walls+0x214>)
 8003dbc:	6800      	ldr	r0, [r0, #0]
 8003dbe:	b168      	cbz	r0, 8003ddc <Read_Walls+0xb0>
 8003dc0:	f5b4 7fc8 	cmp.w	r4, #400	; 0x190
 8003dc4:	da02      	bge.n	8003dcc <Read_Walls+0xa0>
 8003dc6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003dca:	db07      	blt.n	8003ddc <Read_Walls+0xb0>
		horiz_walls[x_coord][y_coord - 1] = 1; //up wall
 8003dcc:	682c      	ldr	r4, [r5, #0]
 8003dce:	4b5d      	ldr	r3, [pc, #372]	; (8003f44 <Read_Walls+0x218>)
 8003dd0:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8003dd4:	2401      	movs	r4, #1
 8003dd6:	4403      	add	r3, r0
 8003dd8:	f803 4c01 	strb.w	r4, [r3, #-1]
	}
	if (x_coord < X_MAZE_SIZE - 1 && rf_side >= RIGHT_THRESHOLD) { //right sensor
 8003ddc:	682b      	ldr	r3, [r5, #0]
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	d904      	bls.n	8003dec <Read_Walls+0xc0>
		vert_walls[x_coord][y_coord] = 1; //right wall
	}
	if (x_coord > 0 && lf_side >= LEFT_THRESHOLD) {  //left sensor
 8003de2:	f5b2 7f96 	cmp.w	r2, #300	; 0x12c
 8003de6:	da0e      	bge.n	8003e06 <Read_Walls+0xda>
 8003de8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

case NORTH: //facing up
	if (y_coord > 0 && (front_l >= FRONT_THRESHOLD || front_r >= FRONT_THRESHOLD)) { //front sensor
		horiz_walls[x_coord][y_coord - 1] = 1; //up wall
	}
	if (x_coord < X_MAZE_SIZE - 1 && rf_side >= RIGHT_THRESHOLD) { //right sensor
 8003dec:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
 8003df0:	db05      	blt.n	8003dfe <Read_Walls+0xd2>
		vert_walls[x_coord][y_coord] = 1; //right wall
 8003df2:	4c55      	ldr	r4, [pc, #340]	; (8003f48 <Read_Walls+0x21c>)
 8003df4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8003df8:	4421      	add	r1, r4
 8003dfa:	2401      	movs	r4, #1
 8003dfc:	540c      	strb	r4, [r1, r0]
	}
	if (x_coord > 0 && lf_side >= LEFT_THRESHOLD) {  //left sensor
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 8088 	beq.w	8003f14 <Read_Walls+0x1e8>
 8003e04:	e7ed      	b.n	8003de2 <Read_Walls+0xb6>
		vert_walls[x_coord - 1][y_coord] = 1; //left wall
 8003e06:	3b01      	subs	r3, #1
 8003e08:	e024      	b.n	8003e54 <Read_Walls+0x128>
	}
	break;

case SOUTH: //facing down
	if (y_coord < Y_MAZE_SIZE - 1 && (front_l >= FRONT_THRESHOLD || front_r >= FRONT_THRESHOLD)) {  //front sensor
 8003e0a:	484c      	ldr	r0, [pc, #304]	; (8003f3c <Read_Walls+0x210>)
 8003e0c:	4d4c      	ldr	r5, [pc, #304]	; (8003f40 <Read_Walls+0x214>)
 8003e0e:	6800      	ldr	r0, [r0, #0]
 8003e10:	2801      	cmp	r0, #1
 8003e12:	d80b      	bhi.n	8003e2c <Read_Walls+0x100>
 8003e14:	f5b4 7fc8 	cmp.w	r4, #400	; 0x190
 8003e18:	da02      	bge.n	8003e20 <Read_Walls+0xf4>
 8003e1a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003e1e:	db05      	blt.n	8003e2c <Read_Walls+0x100>
		horiz_walls[x_coord][y_coord] = 1; //down_wall
 8003e20:	682c      	ldr	r4, [r5, #0]
 8003e22:	4b48      	ldr	r3, [pc, #288]	; (8003f44 <Read_Walls+0x218>)
 8003e24:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8003e28:	2401      	movs	r4, #1
 8003e2a:	541c      	strb	r4, [r3, r0]
		}
	if (x_coord > 0 && rf_side >= RIGHT_THRESHOLD) {  //right sensor
 8003e2c:	682b      	ldr	r3, [r5, #0]
 8003e2e:	b923      	cbnz	r3, 8003e3a <Read_Walls+0x10e>
		vert_walls[x_coord - 1][y_coord] = 1; //left wall
	}
	if (x_coord < X_MAZE_SIZE - 1 && lf_side >= LEFT_THRESHOLD) { //left sensor
 8003e30:	f5b2 7f96 	cmp.w	r2, #300	; 0x12c
 8003e34:	da0e      	bge.n	8003e54 <Read_Walls+0x128>
 8003e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

case SOUTH: //facing down
	if (y_coord < Y_MAZE_SIZE - 1 && (front_l >= FRONT_THRESHOLD || front_r >= FRONT_THRESHOLD)) {  //front sensor
		horiz_walls[x_coord][y_coord] = 1; //down_wall
		}
	if (x_coord > 0 && rf_side >= RIGHT_THRESHOLD) {  //right sensor
 8003e3a:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
 8003e3e:	db06      	blt.n	8003e4e <Read_Walls+0x122>
		vert_walls[x_coord - 1][y_coord] = 1; //left wall
 8003e40:	1e59      	subs	r1, r3, #1
 8003e42:	4c41      	ldr	r4, [pc, #260]	; (8003f48 <Read_Walls+0x21c>)
 8003e44:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003e48:	4421      	add	r1, r4
 8003e4a:	2401      	movs	r4, #1
 8003e4c:	540c      	strb	r4, [r1, r0]
	}
	if (x_coord < X_MAZE_SIZE - 1 && lf_side >= LEFT_THRESHOLD) { //left sensor
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	d860      	bhi.n	8003f14 <Read_Walls+0x1e8>
 8003e52:	e7ed      	b.n	8003e30 <Read_Walls+0x104>
		vert_walls[x_coord][y_coord] = 1; //right wall
 8003e54:	4a3c      	ldr	r2, [pc, #240]	; (8003f48 <Read_Walls+0x21c>)
 8003e56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003e5a:	4413      	add	r3, r2
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	541a      	strb	r2, [r3, r0]
 8003e60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}
	break;

case WEST: //facing left
	if (x_coord > 0 && (front_l >= FRONT_THRESHOLD || front_r >= FRONT_THRESHOLD)) { //front sensor
 8003e64:	4836      	ldr	r0, [pc, #216]	; (8003f40 <Read_Walls+0x214>)
 8003e66:	4e35      	ldr	r6, [pc, #212]	; (8003f3c <Read_Walls+0x210>)
 8003e68:	6805      	ldr	r5, [r0, #0]
 8003e6a:	b16d      	cbz	r5, 8003e88 <Read_Walls+0x15c>
 8003e6c:	f5b4 7fc8 	cmp.w	r4, #400	; 0x190
 8003e70:	da02      	bge.n	8003e78 <Read_Walls+0x14c>
 8003e72:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003e76:	db07      	blt.n	8003e88 <Read_Walls+0x15c>
		vert_walls[x_coord - 1][y_coord] = 1; //left wall
 8003e78:	1e6b      	subs	r3, r5, #1
 8003e7a:	4c33      	ldr	r4, [pc, #204]	; (8003f48 <Read_Walls+0x21c>)
 8003e7c:	6830      	ldr	r0, [r6, #0]
 8003e7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003e82:	4423      	add	r3, r4
 8003e84:	2401      	movs	r4, #1
 8003e86:	541c      	strb	r4, [r3, r0]
	}
	if (y_coord > 0 && rf_side >= RIGHT_THRESHOLD) {  //right sensor
 8003e88:	6830      	ldr	r0, [r6, #0]
 8003e8a:	b920      	cbnz	r0, 8003e96 <Read_Walls+0x16a>
		horiz_walls[x_coord][y_coord - 1] = 1; //up wall
	}
	if (y_coord < Y_MAZE_SIZE - 1 && lf_side >= LEFT_THRESHOLD) {//left sensor
 8003e8c:	f5b2 7f96 	cmp.w	r2, #300	; 0x12c
 8003e90:	da0e      	bge.n	8003eb0 <Read_Walls+0x184>
 8003e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

case WEST: //facing left
	if (x_coord > 0 && (front_l >= FRONT_THRESHOLD || front_r >= FRONT_THRESHOLD)) { //front sensor
		vert_walls[x_coord - 1][y_coord] = 1; //left wall
	}
	if (y_coord > 0 && rf_side >= RIGHT_THRESHOLD) {  //right sensor
 8003e96:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
 8003e9a:	db06      	blt.n	8003eaa <Read_Walls+0x17e>
		horiz_walls[x_coord][y_coord - 1] = 1; //up wall
 8003e9c:	4b29      	ldr	r3, [pc, #164]	; (8003f44 <Read_Walls+0x218>)
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8003ea4:	4403      	add	r3, r0
 8003ea6:	f803 1c01 	strb.w	r1, [r3, #-1]
	}
	if (y_coord < Y_MAZE_SIZE - 1 && lf_side >= LEFT_THRESHOLD) {//left sensor
 8003eaa:	2801      	cmp	r0, #1
 8003eac:	d832      	bhi.n	8003f14 <Read_Walls+0x1e8>
 8003eae:	e7ed      	b.n	8003e8c <Read_Walls+0x160>
		horiz_walls[x_coord][y_coord] = 1; //down wall
 8003eb0:	4b24      	ldr	r3, [pc, #144]	; (8003f44 <Read_Walls+0x218>)
 8003eb2:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	542b      	strb	r3, [r5, r0]
 8003eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}
	break;

case EAST: //facing right
	if (x_coord < X_MAZE_SIZE - 1 && (front_l >= FRONT_THRESHOLD || front_r >= FRONT_THRESHOLD)) { //front sensor
 8003ebe:	4820      	ldr	r0, [pc, #128]	; (8003f40 <Read_Walls+0x214>)
 8003ec0:	4d1e      	ldr	r5, [pc, #120]	; (8003f3c <Read_Walls+0x210>)
 8003ec2:	6800      	ldr	r0, [r0, #0]
 8003ec4:	2804      	cmp	r0, #4
 8003ec6:	d80c      	bhi.n	8003ee2 <Read_Walls+0x1b6>
 8003ec8:	f5b4 7fc8 	cmp.w	r4, #400	; 0x190
 8003ecc:	da02      	bge.n	8003ed4 <Read_Walls+0x1a8>
 8003ece:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003ed2:	db06      	blt.n	8003ee2 <Read_Walls+0x1b6>
		vert_walls[x_coord][y_coord] = 1; //right wall
 8003ed4:	4e1c      	ldr	r6, [pc, #112]	; (8003f48 <Read_Walls+0x21c>)
 8003ed6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8003eda:	682c      	ldr	r4, [r5, #0]
 8003edc:	4433      	add	r3, r6
 8003ede:	2601      	movs	r6, #1
 8003ee0:	551e      	strb	r6, [r3, r4]
		}
	if (y_coord < Y_MAZE_SIZE - 1 && rf_side >= RIGHT_THRESHOLD) { //right sensor
 8003ee2:	682b      	ldr	r3, [r5, #0]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d904      	bls.n	8003ef2 <Read_Walls+0x1c6>
		horiz_walls[x_coord][y_coord] = 1; //down wall
	}
	if (y_coord > 0 && lf_side >= LEFT_THRESHOLD) {  //left sensor
 8003ee8:	f5b2 7f96 	cmp.w	r2, #300	; 0x12c
 8003eec:	da0b      	bge.n	8003f06 <Read_Walls+0x1da>
 8003eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

case EAST: //facing right
	if (x_coord < X_MAZE_SIZE - 1 && (front_l >= FRONT_THRESHOLD || front_r >= FRONT_THRESHOLD)) { //front sensor
		vert_walls[x_coord][y_coord] = 1; //right wall
		}
	if (y_coord < Y_MAZE_SIZE - 1 && rf_side >= RIGHT_THRESHOLD) { //right sensor
 8003ef2:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
		horiz_walls[x_coord][y_coord] = 1; //down wall
 8003ef6:	bfa1      	itttt	ge
 8003ef8:	4912      	ldrge	r1, [pc, #72]	; (8003f44 <Read_Walls+0x218>)
 8003efa:	2401      	movge	r4, #1
 8003efc:	eb01 0140 	addge.w	r1, r1, r0, lsl #1
 8003f00:	54cc      	strbge	r4, [r1, r3]
	}
	if (y_coord > 0 && lf_side >= LEFT_THRESHOLD) {  //left sensor
 8003f02:	b13b      	cbz	r3, 8003f14 <Read_Walls+0x1e8>
 8003f04:	e7f0      	b.n	8003ee8 <Read_Walls+0x1bc>
		horiz_walls[x_coord][y_coord - 1] = 1; //up wall
 8003f06:	4a0f      	ldr	r2, [pc, #60]	; (8003f44 <Read_Walls+0x218>)
 8003f08:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	4403      	add	r3, r0
 8003f10:	f803 2c01 	strb.w	r2, [r3, #-1]
 8003f14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f18:	20003098 	.word	0x20003098
 8003f1c:	200042f8 	.word	0x200042f8
 8003f20:	200032d8 	.word	0x200032d8
 8003f24:	200000e0 	.word	0x200000e0
 8003f28:	20002088 	.word	0x20002088
 8003f2c:	200042fc 	.word	0x200042fc
 8003f30:	200020e4 	.word	0x200020e4
 8003f34:	200042d4 	.word	0x200042d4
 8003f38:	200042e0 	.word	0x200042e0
 8003f3c:	20000008 	.word	0x20000008
 8003f40:	20004300 	.word	0x20004300
 8003f44:	200042ec 	.word	0x200042ec
 8003f48:	200030a4 	.word	0x200030a4

08003f4c <Stop_IR>:
     Error_Handler();
  }

}

void Stop_IR() {
 8003f4c:	b508      	push	{r3, lr}

adc_conv = TRUE;
 8003f4e:	2201      	movs	r2, #1
 8003f50:	4b04      	ldr	r3, [pc, #16]	; (8003f64 <Stop_IR+0x18>)
if(HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 8003f52:	4805      	ldr	r0, [pc, #20]	; (8003f68 <Stop_IR+0x1c>)

}

void Stop_IR() {

adc_conv = TRUE;
 8003f54:	601a      	str	r2, [r3, #0]
if(HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 8003f56:	f7fc fb43 	bl	80005e0 <HAL_ADC_Stop_DMA>
 8003f5a:	b108      	cbz	r0, 8003f60 <Stop_IR+0x14>
  {
     Error_Handler();
 8003f5c:	f7ff fcba 	bl	80038d4 <Error_Handler>
 8003f60:	bd08      	pop	{r3, pc}
 8003f62:	bf00      	nop
 8003f64:	20004308 	.word	0x20004308
 8003f68:	20004a64 	.word	0x20004a64

08003f6c <HAL_ADC_ConvCpltCallback>:

}

//ADC interrupt handler. Runs when all four channels have been converted
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* handle)
{
 8003f6c:	b508      	push	{r3, lr}
	Stop_IR();
 8003f6e:	f7ff ffed 	bl	8003f4c <Stop_IR>
	l = ADC_valbuffer[ADC_VAL_BUFFER_LENGTH - 4];
 8003f72:	4b07      	ldr	r3, [pc, #28]	; (8003f90 <HAL_ADC_ConvCpltCallback+0x24>)
 8003f74:	4a07      	ldr	r2, [pc, #28]	; (8003f94 <HAL_ADC_ConvCpltCallback+0x28>)
 8003f76:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003f78:	6011      	str	r1, [r2, #0]
	r = ADC_valbuffer[ADC_VAL_BUFFER_LENGTH - 1];
 8003f7a:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8003f7c:	4a06      	ldr	r2, [pc, #24]	; (8003f98 <HAL_ADC_ConvCpltCallback+0x2c>)
 8003f7e:	6011      	str	r1, [r2, #0]
	rf = ADC_valbuffer[ADC_VAL_BUFFER_LENGTH - 2];
 8003f80:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003f82:	4a06      	ldr	r2, [pc, #24]	; (8003f9c <HAL_ADC_ConvCpltCallback+0x30>)
 8003f84:	6011      	str	r1, [r2, #0]
	lf = ADC_valbuffer[ADC_VAL_BUFFER_LENGTH - 3];
 8003f86:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003f88:	4b05      	ldr	r3, [pc, #20]	; (8003fa0 <HAL_ADC_ConvCpltCallback+0x34>)
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	bd08      	pop	{r3, pc}
 8003f8e:	bf00      	nop
 8003f90:	20005030 	.word	0x20005030
 8003f94:	200010e4 	.word	0x200010e4
 8003f98:	200020ec 	.word	0x200020ec
 8003f9c:	20003274 	.word	0x20003274
 8003fa0:	200030bc 	.word	0x200030bc

08003fa4 <Set_Left>:
}

void Set_Left(int speed, int direction) {

	//when switching directions, PWM polarity switches
	if (direction == FORWARD) {
 8003fa4:	2901      	cmp	r1, #1
	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	TIM_OC_InitTypeDef tim2config;

	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fa6:	f04f 0200 	mov.w	r2, #0

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	TIM_OC_InitTypeDef tim2config;

	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
 8003faa:	f04f 0360 	mov.w	r3, #96	; 0x60

void Set_Left(int speed, int direction) {

	//when switching directions, PWM polarity switches
	if (direction == FORWARD) {
		speed = 665 - speed;
 8003fae:	bf08      	it	eq
 8003fb0:	f5c0 7026 	rsbeq	r0, r0, #664	; 0x298
		cur_move = FWD; //reset to default direction
		next_move = FWD;
	}
}

void Set_Left(int speed, int direction) {
 8003fb4:	b510      	push	{r4, lr}

	//when switching directions, PWM polarity switches
	if (direction == FORWARD) {
		speed = 665 - speed;
 8003fb6:	bf08      	it	eq
 8003fb8:	3001      	addeq	r0, #1
		cur_move = FWD; //reset to default direction
		next_move = FWD;
	}
}

void Set_Left(int speed, int direction) {
 8003fba:	b088      	sub	sp, #32
 8003fbc:	460c      	mov	r4, r1
	}

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	TIM_OC_InitTypeDef tim2config;

	tim2config.Pulse = speed;
 8003fbe:	9002      	str	r0, [sp, #8]
	tim2config.OCMode = TIM_OCMODE_PWM1;
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
	tim2config.OCFastMode = TIM_OCFAST_DISABLE;
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &tim2config, TIM_CHANNEL_1) != HAL_OK)
 8003fc0:	a901      	add	r1, sp, #4
 8003fc2:	480a      	ldr	r0, [pc, #40]	; (8003fec <Set_Left+0x48>)

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	TIM_OC_InitTypeDef tim2config;

	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
 8003fc4:	9301      	str	r3, [sp, #4]
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fc6:	9203      	str	r2, [sp, #12]
	tim2config.OCFastMode = TIM_OCFAST_DISABLE;
 8003fc8:	9205      	str	r2, [sp, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &tim2config, TIM_CHANNEL_1) != HAL_OK)
 8003fca:	f7fe fb63 	bl	8002694 <HAL_TIM_PWM_ConfigChannel>
 8003fce:	4601      	mov	r1, r0
 8003fd0:	b108      	cbz	r0, 8003fd6 <Set_Left+0x32>
	  {
	     Error_Handler();
 8003fd2:	f7ff fc7f 	bl	80038d4 <Error_Handler>
	  }

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003fd6:	4805      	ldr	r0, [pc, #20]	; (8003fec <Set_Left+0x48>)
 8003fd8:	f7fe faf2 	bl	80025c0 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, LDIC_Pin, direction);
 8003fdc:	2102      	movs	r1, #2
 8003fde:	b2e2      	uxtb	r2, r4
 8003fe0:	4803      	ldr	r0, [pc, #12]	; (8003ff0 <Set_Left+0x4c>)
 8003fe2:	f7fd f8ef 	bl	80011c4 <HAL_GPIO_WritePin>

}
 8003fe6:	b008      	add	sp, #32
 8003fe8:	bd10      	pop	{r4, pc}
 8003fea:	bf00      	nop
 8003fec:	200052b0 	.word	0x200052b0
 8003ff0:	40020000 	.word	0x40020000

08003ff4 <Set_Right>:

//when switching directions, PWM polarity switches
void Set_Right(int speed, int direction) {

	if (direction == FORWARD) {
 8003ff4:	2901      	cmp	r1, #1
	}

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
	TIM_OC_InitTypeDef tim2config;
	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
 8003ff6:	f04f 0360 	mov.w	r3, #96	; 0x60
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
	tim2config.OCFastMode = TIM_OCFAST_DISABLE;

	if (HAL_TIM_PWM_ConfigChannel(&htim2, &tim2config, TIM_CHANNEL_3) != HAL_OK)
 8003ffa:	f04f 0208 	mov.w	r2, #8

//when switching directions, PWM polarity switches
void Set_Right(int speed, int direction) {

	if (direction == FORWARD) {
			speed = 665 - speed;
 8003ffe:	bf08      	it	eq
 8004000:	f5c0 7026 	rsbeq	r0, r0, #664	; 0x298
	HAL_GPIO_WritePin(GPIOA, LDIC_Pin, direction);

}

//when switching directions, PWM polarity switches
void Set_Right(int speed, int direction) {
 8004004:	b510      	push	{r4, lr}
 8004006:	b088      	sub	sp, #32

	if (direction == FORWARD) {
			speed = 665 - speed;
 8004008:	bf08      	it	eq
 800400a:	3001      	addeq	r0, #1
	HAL_GPIO_WritePin(GPIOA, LDIC_Pin, direction);

}

//when switching directions, PWM polarity switches
void Set_Right(int speed, int direction) {
 800400c:	460c      	mov	r4, r1
	}

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
	TIM_OC_InitTypeDef tim2config;
	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
 800400e:	9301      	str	r3, [sp, #4]
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004010:	2300      	movs	r3, #0
			speed = 665 - speed;
	}

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
	TIM_OC_InitTypeDef tim2config;
	tim2config.Pulse = speed;
 8004012:	9002      	str	r0, [sp, #8]
	tim2config.OCMode = TIM_OCMODE_PWM1;
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
	tim2config.OCFastMode = TIM_OCFAST_DISABLE;

	if (HAL_TIM_PWM_ConfigChannel(&htim2, &tim2config, TIM_CHANNEL_3) != HAL_OK)
 8004014:	a901      	add	r1, sp, #4
 8004016:	4809      	ldr	r0, [pc, #36]	; (800403c <Set_Right+0x48>)

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
	TIM_OC_InitTypeDef tim2config;
	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004018:	9303      	str	r3, [sp, #12]
	tim2config.OCFastMode = TIM_OCFAST_DISABLE;
 800401a:	9305      	str	r3, [sp, #20]

	if (HAL_TIM_PWM_ConfigChannel(&htim2, &tim2config, TIM_CHANNEL_3) != HAL_OK)
 800401c:	f7fe fb3a 	bl	8002694 <HAL_TIM_PWM_ConfigChannel>
 8004020:	b108      	cbz	r0, 8004026 <Set_Right+0x32>
	{
	   Error_Handler();
 8004022:	f7ff fc57 	bl	80038d4 <Error_Handler>
	}

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8004026:	2108      	movs	r1, #8
 8004028:	4804      	ldr	r0, [pc, #16]	; (800403c <Set_Right+0x48>)
 800402a:	f7fe fac9 	bl	80025c0 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, RDIC_Pin, direction);
 800402e:	2108      	movs	r1, #8
 8004030:	b2e2      	uxtb	r2, r4
 8004032:	4803      	ldr	r0, [pc, #12]	; (8004040 <Set_Right+0x4c>)
 8004034:	f7fd f8c6 	bl	80011c4 <HAL_GPIO_WritePin>

}
 8004038:	b008      	add	sp, #32
 800403a:	bd10      	pop	{r4, pc}
 800403c:	200052b0 	.word	0x200052b0
 8004040:	40020000 	.word	0x40020000

08004044 <Forward_Search>:
    	} //switch
    } //searching loop

}

void Forward_Search() {
 8004044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	if (transition_flag == TRUE) { //if theres a transition sense. use this position instead
 8004046:	4e55      	ldr	r6, [pc, #340]	; (800419c <Forward_Search+0x158>)
 8004048:	4c55      	ldr	r4, [pc, #340]	; (80041a0 <Forward_Search+0x15c>)
 800404a:	6833      	ldr	r3, [r6, #0]
 800404c:	2b01      	cmp	r3, #1
		if (fwd_flag == FALSE && (lenc_diff_corr >=  300 || renc_diff_corr >= 300)) { //330
 800404e:	6823      	ldr	r3, [r4, #0]

}

void Forward_Search() {

	if (transition_flag == TRUE) { //if theres a transition sense. use this position instead
 8004050:	d154      	bne.n	80040fc <Forward_Search+0xb8>
		if (fwd_flag == FALSE && (lenc_diff_corr >=  300 || renc_diff_corr >= 300)) { //330
 8004052:	b9e3      	cbnz	r3, 800408e <Forward_Search+0x4a>
 8004054:	4b53      	ldr	r3, [pc, #332]	; (80041a4 <Forward_Search+0x160>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800405c:	d204      	bcs.n	8004068 <Forward_Search+0x24>
 800405e:	4b52      	ldr	r3, [pc, #328]	; (80041a8 <Forward_Search+0x164>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004066:	d312      	bcc.n	800408e <Forward_Search+0x4a>

			fwd_flag = TRUE;
 8004068:	2301      	movs	r3, #1
 800406a:	4d50      	ldr	r5, [pc, #320]	; (80041ac <Forward_Search+0x168>)
 800406c:	6023      	str	r3, [r4, #0]

			Read_Walls();
 800406e:	f7ff fe5d 	bl	8003d2c <Read_Walls>
			if (done_flag == TRUE) {
 8004072:	4b4f      	ldr	r3, [pc, #316]	; (80041b0 <Forward_Search+0x16c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d102      	bne.n	8004080 <Forward_Search+0x3c>
				next_move = DEAD;
 800407a:	2303      	movs	r3, #3
 800407c:	602b      	str	r3, [r5, #0]
 800407e:	e004      	b.n	800408a <Forward_Search+0x46>
			}

			else {
			next_move = Get_Next_Move();
 8004080:	f7ff fb70 	bl	8003764 <Get_Next_Move>
 8004084:	6028      	str	r0, [r5, #0]
			Update_Position();
 8004086:	f7ff f881 	bl	800318c <Update_Position>
			}

			Save_State();
 800408a:	f7fe ffb3 	bl	8002ff4 <Save_State>
		}

		if (fwd_flag == TRUE && (lenc_diff_corr >=  580 || renc_diff_corr >= 580)) { //620
 800408e:	6823      	ldr	r3, [r4, #0]
 8004090:	2b01      	cmp	r3, #1
 8004092:	f040 8082 	bne.w	800419a <Forward_Search+0x156>
 8004096:	4b43      	ldr	r3, [pc, #268]	; (80041a4 <Forward_Search+0x160>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 800409e:	d204      	bcs.n	80040aa <Forward_Search+0x66>
 80040a0:	4b41      	ldr	r3, [pc, #260]	; (80041a8 <Forward_Search+0x164>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 80040a8:	d377      	bcc.n	800419a <Forward_Search+0x156>

			fwd_flag = FALSE;
 80040aa:	2500      	movs	r5, #0
			transition_flag = FALSE;

			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, OFF);
 80040ac:	2110      	movs	r1, #16
 80040ae:	4841      	ldr	r0, [pc, #260]	; (80041b4 <Forward_Search+0x170>)
 80040b0:	462a      	mov	r2, r5
			Save_State();
		}

		if (fwd_flag == TRUE && (lenc_diff_corr >=  580 || renc_diff_corr >= 580)) { //620

			fwd_flag = FALSE;
 80040b2:	6025      	str	r5, [r4, #0]
			transition_flag = FALSE;
 80040b4:	6035      	str	r5, [r6, #0]

			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, OFF);
 80040b6:	f7fd f885 	bl	80011c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, LED3_Pin, OFF);
 80040ba:	462a      	mov	r2, r5
 80040bc:	2108      	movs	r1, #8
 80040be:	483d      	ldr	r0, [pc, #244]	; (80041b4 <Forward_Search+0x170>)
 80040c0:	f7fd f880 	bl	80011c4 <HAL_GPIO_WritePin>
			//HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);

			prev_l_count = l_count; // Save encoder values
 80040c4:	4b3c      	ldr	r3, [pc, #240]	; (80041b8 <Forward_Search+0x174>)
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	4b3c      	ldr	r3, [pc, #240]	; (80041bc <Forward_Search+0x178>)
 80040ca:	601a      	str	r2, [r3, #0]
			prev_r_count = r_count;
 80040cc:	4b3c      	ldr	r3, [pc, #240]	; (80041c0 <Forward_Search+0x17c>)
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	4b3c      	ldr	r3, [pc, #240]	; (80041c4 <Forward_Search+0x180>)
 80040d2:	601a      	str	r2, [r3, #0]

			switch (next_move) { //check if motor speeds have to change with next move
 80040d4:	4b35      	ldr	r3, [pc, #212]	; (80041ac <Forward_Search+0x168>)
 80040d6:	681e      	ldr	r6, [r3, #0]
 80040d8:	461c      	mov	r4, r3
 80040da:	2e01      	cmp	r6, #1
 80040dc:	d008      	beq.n	80040f0 <Forward_Search+0xac>
 80040de:	2e02      	cmp	r6, #2
 80040e0:	d158      	bne.n	8004194 <Forward_Search+0x150>

			case RIGHT:
				Set_Left(RIGHT_L, FORWARD); //need to make right pivot
 80040e2:	2101      	movs	r1, #1
 80040e4:	2091      	movs	r0, #145	; 0x91
 80040e6:	f7ff ff5d 	bl	8003fa4 <Set_Left>
				Set_Right(RIGHT_R, FORWARD);
 80040ea:	2101      	movs	r1, #1
 80040ec:	4628      	mov	r0, r5
 80040ee:	e04f      	b.n	8004190 <Forward_Search+0x14c>
				break;

			case LEFT:
				Set_Left(LEFT_L, FORWARD); //need to make left pivot
 80040f0:	4631      	mov	r1, r6
 80040f2:	4628      	mov	r0, r5
 80040f4:	f7ff ff56 	bl	8003fa4 <Set_Left>
				Set_Right(LEFT_R, FORWARD);
 80040f8:	4631      	mov	r1, r6
 80040fa:	e048      	b.n	800418e <Forward_Search+0x14a>
		}
	}

	else { //if theres no transition sensed, then just use absolute position

	if (fwd_flag == FALSE && (lenc_diff >= F_LENC1 || renc_diff >= F_RENC1))
 80040fc:	b9e3      	cbnz	r3, 8004138 <Forward_Search+0xf4>
 80040fe:	4b32      	ldr	r3, [pc, #200]	; (80041c8 <Forward_Search+0x184>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004106:	d204      	bcs.n	8004112 <Forward_Search+0xce>
 8004108:	4b30      	ldr	r3, [pc, #192]	; (80041cc <Forward_Search+0x188>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004110:	d312      	bcc.n	8004138 <Forward_Search+0xf4>
	{
		fwd_flag = TRUE;
 8004112:	2301      	movs	r3, #1
 8004114:	4d25      	ldr	r5, [pc, #148]	; (80041ac <Forward_Search+0x168>)
 8004116:	6023      	str	r3, [r4, #0]

		Read_Walls();
 8004118:	f7ff fe08 	bl	8003d2c <Read_Walls>
		if (done_flag == TRUE) {
 800411c:	4b24      	ldr	r3, [pc, #144]	; (80041b0 <Forward_Search+0x16c>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d102      	bne.n	800412a <Forward_Search+0xe6>
		next_move = DEAD;
 8004124:	2303      	movs	r3, #3
 8004126:	602b      	str	r3, [r5, #0]
 8004128:	e004      	b.n	8004134 <Forward_Search+0xf0>
		}

		else {
		next_move = Get_Next_Move();
 800412a:	f7ff fb1b 	bl	8003764 <Get_Next_Move>
 800412e:	6028      	str	r0, [r5, #0]
		Update_Position();
 8004130:	f7ff f82c 	bl	800318c <Update_Position>
		}

		Save_State();
 8004134:	f7fe ff5e 	bl	8002ff4 <Save_State>
	}

	if (fwd_flag == TRUE && (lenc_diff >= F_LENC2 || renc_diff >= F_RENC2))
 8004138:	6823      	ldr	r3, [r4, #0]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d12d      	bne.n	800419a <Forward_Search+0x156>
 800413e:	4b22      	ldr	r3, [pc, #136]	; (80041c8 <Forward_Search+0x184>)
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	f240 23b6 	movw	r3, #694	; 0x2b6
 8004146:	429a      	cmp	r2, r3
 8004148:	d803      	bhi.n	8004152 <Forward_Search+0x10e>
 800414a:	4a20      	ldr	r2, [pc, #128]	; (80041cc <Forward_Search+0x188>)
 800414c:	6812      	ldr	r2, [r2, #0]
 800414e:	429a      	cmp	r2, r3
 8004150:	d923      	bls.n	800419a <Forward_Search+0x156>
	{ //left and right wheel moving at same speed. If statement checks if distance has been covered

		//HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);

		prev_l_count = l_count; //no change. keep going straight. Save encoder values
 8004152:	4b19      	ldr	r3, [pc, #100]	; (80041b8 <Forward_Search+0x174>)
		prev_r_count = r_count;
		fwd_flag = FALSE;
 8004154:	2700      	movs	r7, #0
	if (fwd_flag == TRUE && (lenc_diff >= F_LENC2 || renc_diff >= F_RENC2))
	{ //left and right wheel moving at same speed. If statement checks if distance has been covered

		//HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);

		prev_l_count = l_count; //no change. keep going straight. Save encoder values
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	4b18      	ldr	r3, [pc, #96]	; (80041bc <Forward_Search+0x178>)
		prev_r_count = r_count;
		fwd_flag = FALSE;
 800415a:	6027      	str	r7, [r4, #0]
	if (fwd_flag == TRUE && (lenc_diff >= F_LENC2 || renc_diff >= F_RENC2))
	{ //left and right wheel moving at same speed. If statement checks if distance has been covered

		//HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);

		prev_l_count = l_count; //no change. keep going straight. Save encoder values
 800415c:	601a      	str	r2, [r3, #0]
		prev_r_count = r_count;
 800415e:	4b18      	ldr	r3, [pc, #96]	; (80041c0 <Forward_Search+0x17c>)
		fwd_flag = FALSE;
		transition_flag = FALSE;
 8004160:	6037      	str	r7, [r6, #0]
	{ //left and right wheel moving at same speed. If statement checks if distance has been covered

		//HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);

		prev_l_count = l_count; //no change. keep going straight. Save encoder values
		prev_r_count = r_count;
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	4b17      	ldr	r3, [pc, #92]	; (80041c4 <Forward_Search+0x180>)
 8004166:	601a      	str	r2, [r3, #0]
		fwd_flag = FALSE;
		transition_flag = FALSE;

		switch (next_move) { //check if motor speeds have to change with next move
 8004168:	4b10      	ldr	r3, [pc, #64]	; (80041ac <Forward_Search+0x168>)
 800416a:	681d      	ldr	r5, [r3, #0]
 800416c:	461c      	mov	r4, r3
 800416e:	2d01      	cmp	r5, #1
 8004170:	d008      	beq.n	8004184 <Forward_Search+0x140>
 8004172:	2d02      	cmp	r5, #2
 8004174:	d10e      	bne.n	8004194 <Forward_Search+0x150>
		case FWD:
			break;

		case RIGHT:
			Set_Left(RIGHT_L, FORWARD); //need to make right pivot
 8004176:	2101      	movs	r1, #1
 8004178:	2091      	movs	r0, #145	; 0x91
 800417a:	f7ff ff13 	bl	8003fa4 <Set_Left>
			Set_Right(RIGHT_R, FORWARD);
 800417e:	2101      	movs	r1, #1
 8004180:	4638      	mov	r0, r7
 8004182:	e005      	b.n	8004190 <Forward_Search+0x14c>
			break;

		case LEFT:
		    Set_Left(LEFT_L, FORWARD); //need to make left pivot
 8004184:	4629      	mov	r1, r5
 8004186:	4638      	mov	r0, r7
 8004188:	f7ff ff0c 	bl	8003fa4 <Set_Left>
		    Set_Right(LEFT_R, FORWARD);
 800418c:	4629      	mov	r1, r5
 800418e:	2087      	movs	r0, #135	; 0x87
 8004190:	f7ff ff30 	bl	8003ff4 <Set_Right>
		    break;

		case DEAD:
		    break;
		}
		cur_move = next_move; //execute next move
 8004194:	6822      	ldr	r2, [r4, #0]
 8004196:	4b0e      	ldr	r3, [pc, #56]	; (80041d0 <Forward_Search+0x18c>)
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800419c:	200020e0 	.word	0x200020e0
 80041a0:	200032d4 	.word	0x200032d4
 80041a4:	20003164 	.word	0x20003164
 80041a8:	200032d0 	.word	0x200032d0
 80041ac:	200032c8 	.word	0x200032c8
 80041b0:	200042e8 	.word	0x200042e8
 80041b4:	40020c00 	.word	0x40020c00
 80041b8:	200000e4 	.word	0x200000e4
 80041bc:	2000439c 	.word	0x2000439c
 80041c0:	20003160 	.word	0x20003160
 80041c4:	20004398 	.word	0x20004398
 80041c8:	200030b4 	.word	0x200030b4
 80041cc:	2000108c 	.word	0x2000108c
 80041d0:	200000e8 	.word	0x200000e8

080041d4 <Left_Search>:
	}
	}
}

void Left_Search() {
 80041d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	if ((l_turnflag == FALSE) && (lenc_diff >= LT_LENC_1 || renc_diff >= LT_RENC_1)) { //finished making turn. left and right wheel don't travel at same speeds
 80041d6:	4c33      	ldr	r4, [pc, #204]	; (80042a4 <Left_Search+0xd0>)
 80041d8:	6823      	ldr	r3, [r4, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d12f      	bne.n	800423e <Left_Search+0x6a>
 80041de:	4b32      	ldr	r3, [pc, #200]	; (80042a8 <Left_Search+0xd4>)
 80041e0:	4d32      	ldr	r5, [pc, #200]	; (80042ac <Left_Search+0xd8>)
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	461f      	mov	r7, r3
 80041e6:	2a27      	cmp	r2, #39	; 0x27
 80041e8:	d803      	bhi.n	80041f2 <Left_Search+0x1e>
 80041ea:	682b      	ldr	r3, [r5, #0]
 80041ec:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 80041f0:	d325      	bcc.n	800423e <Left_Search+0x6a>

		Set_Left(FWD_L, FORWARD); //finish turn by accelerating forward
 80041f2:	2101      	movs	r1, #1
 80041f4:	2078      	movs	r0, #120	; 0x78
 80041f6:	f7ff fed5 	bl	8003fa4 <Set_Left>
		Set_Right(FWD_R, FORWARD);
 80041fa:	2101      	movs	r1, #1
 80041fc:	2087      	movs	r0, #135	; 0x87
 80041fe:	4e2c      	ldr	r6, [pc, #176]	; (80042b0 <Left_Search+0xdc>)
 8004200:	f7ff fef8 	bl	8003ff4 <Set_Right>

		Read_Walls();
 8004204:	f7ff fd92 	bl	8003d2c <Read_Walls>
		if (done_flag == TRUE) {
 8004208:	4b2a      	ldr	r3, [pc, #168]	; (80042b4 <Left_Search+0xe0>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d102      	bne.n	8004216 <Left_Search+0x42>
			next_move = DEAD;
 8004210:	2303      	movs	r3, #3
 8004212:	6033      	str	r3, [r6, #0]
 8004214:	e004      	b.n	8004220 <Left_Search+0x4c>
		}

		else {
			next_move = Get_Next_Move();
 8004216:	f7ff faa5 	bl	8003764 <Get_Next_Move>
 800421a:	6030      	str	r0, [r6, #0]
			Update_Position();
 800421c:	f7fe ffb6 	bl	800318c <Update_Position>
		}

		l_turnflag = TRUE;
 8004220:	2301      	movs	r3, #1
 8004222:	6023      	str	r3, [r4, #0]
		prev_l_count = l_count; //save current counters
 8004224:	4b24      	ldr	r3, [pc, #144]	; (80042b8 <Left_Search+0xe4>)
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	4b24      	ldr	r3, [pc, #144]	; (80042bc <Left_Search+0xe8>)
 800422a:	601a      	str	r2, [r3, #0]
		prev_r_count = r_count;
 800422c:	4b24      	ldr	r3, [pc, #144]	; (80042c0 <Left_Search+0xec>)
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	4b24      	ldr	r3, [pc, #144]	; (80042c4 <Left_Search+0xf0>)
 8004232:	601a      	str	r2, [r3, #0]
		lenc_diff = 0;
 8004234:	2300      	movs	r3, #0
 8004236:	603b      	str	r3, [r7, #0]
		renc_diff = 0;
 8004238:	602b      	str	r3, [r5, #0]

		Save_State();
 800423a:	f7fe fedb 	bl	8002ff4 <Save_State>
	}

	if ((l_turnflag == TRUE) && (lenc_diff >= LT_LENC_2 || renc_diff >= LT_RENC_2)) { //made it to same point
 800423e:	6823      	ldr	r3, [r4, #0]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d12e      	bne.n	80042a2 <Left_Search+0xce>
 8004244:	4b18      	ldr	r3, [pc, #96]	; (80042a8 <Left_Search+0xd4>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 800424c:	d804      	bhi.n	8004258 <Left_Search+0x84>
 800424e:	4b17      	ldr	r3, [pc, #92]	; (80042ac <Left_Search+0xd8>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 8004256:	d924      	bls.n	80042a2 <Left_Search+0xce>

		l_turnflag = FALSE;
 8004258:	2600      	movs	r6, #0
 800425a:	6026      	str	r6, [r4, #0]
		//HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
		Save_State();
 800425c:	f7fe feca 	bl	8002ff4 <Save_State>
		prev_l_count = l_count; //save current counters
 8004260:	4b15      	ldr	r3, [pc, #84]	; (80042b8 <Left_Search+0xe4>)
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	4b15      	ldr	r3, [pc, #84]	; (80042bc <Left_Search+0xe8>)
 8004266:	601a      	str	r2, [r3, #0]
		prev_r_count = r_count;
 8004268:	4b15      	ldr	r3, [pc, #84]	; (80042c0 <Left_Search+0xec>)
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	4b15      	ldr	r3, [pc, #84]	; (80042c4 <Left_Search+0xf0>)
 800426e:	601a      	str	r2, [r3, #0]

		switch (next_move) { //need to change direction or nah
 8004270:	4b0f      	ldr	r3, [pc, #60]	; (80042b0 <Left_Search+0xdc>)
 8004272:	681d      	ldr	r5, [r3, #0]
 8004274:	461c      	mov	r4, r3
 8004276:	2d01      	cmp	r5, #1
 8004278:	d008      	beq.n	800428c <Left_Search+0xb8>
 800427a:	2d02      	cmp	r5, #2
 800427c:	d10e      	bne.n	800429c <Left_Search+0xc8>
			Set_Left(LEFT_L, FORWARD); //need to make right turn again
			Set_Right(LEFT_R, FORWARD);
			break;

		case RIGHT:
			Set_Left(RIGHT_L, FORWARD); //need to make right turn again
 800427e:	2101      	movs	r1, #1
 8004280:	2091      	movs	r0, #145	; 0x91
 8004282:	f7ff fe8f 	bl	8003fa4 <Set_Left>
			Set_Right(RIGHT_R, FORWARD);
 8004286:	2101      	movs	r1, #1
 8004288:	4630      	mov	r0, r6
 800428a:	e005      	b.n	8004298 <Left_Search+0xc4>
		prev_r_count = r_count;

		switch (next_move) { //need to change direction or nah

		case LEFT:
			Set_Left(LEFT_L, FORWARD); //need to make right turn again
 800428c:	4629      	mov	r1, r5
 800428e:	4630      	mov	r0, r6
 8004290:	f7ff fe88 	bl	8003fa4 <Set_Left>
			Set_Right(LEFT_R, FORWARD);
 8004294:	4629      	mov	r1, r5
 8004296:	2087      	movs	r0, #135	; 0x87
			break;

		case RIGHT:
			Set_Left(RIGHT_L, FORWARD); //need to make right turn again
			Set_Right(RIGHT_R, FORWARD);
 8004298:	f7ff feac 	bl	8003ff4 <Set_Right>
			break;

		}
		cur_move = next_move;
 800429c:	6822      	ldr	r2, [r4, #0]
 800429e:	4b0a      	ldr	r3, [pc, #40]	; (80042c8 <Left_Search+0xf4>)
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042a4:	200010e0 	.word	0x200010e0
 80042a8:	200030b4 	.word	0x200030b4
 80042ac:	2000108c 	.word	0x2000108c
 80042b0:	200032c8 	.word	0x200032c8
 80042b4:	200042e8 	.word	0x200042e8
 80042b8:	200000e4 	.word	0x200000e4
 80042bc:	2000439c 	.word	0x2000439c
 80042c0:	20003160 	.word	0x20003160
 80042c4:	20004398 	.word	0x20004398
 80042c8:	200000e8 	.word	0x200000e8

080042cc <Right_Search>:
	} //case LEFT
}
void Right_Search() {
 80042cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	if ((r_turnflag == FALSE) && (lenc_diff >= RT_LENC_1 || renc_diff >= RT_RENC_1)) { //finished making turn. left and right wheel don't travel at same speeds
 80042ce:	4c32      	ldr	r4, [pc, #200]	; (8004398 <Right_Search+0xcc>)
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d12f      	bne.n	8004336 <Right_Search+0x6a>
 80042d6:	4b31      	ldr	r3, [pc, #196]	; (800439c <Right_Search+0xd0>)
 80042d8:	4d31      	ldr	r5, [pc, #196]	; (80043a0 <Right_Search+0xd4>)
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	461f      	mov	r7, r3
 80042de:	f5b2 7fe6 	cmp.w	r2, #460	; 0x1cc
 80042e2:	d202      	bcs.n	80042ea <Right_Search+0x1e>
 80042e4:	682b      	ldr	r3, [r5, #0]
 80042e6:	2b27      	cmp	r3, #39	; 0x27
 80042e8:	d925      	bls.n	8004336 <Right_Search+0x6a>

		Read_Walls();
 80042ea:	f7ff fd1f 	bl	8003d2c <Read_Walls>
		if (done_flag == TRUE) {
 80042ee:	4b2d      	ldr	r3, [pc, #180]	; (80043a4 <Right_Search+0xd8>)
 80042f0:	4e2d      	ldr	r6, [pc, #180]	; (80043a8 <Right_Search+0xdc>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d102      	bne.n	80042fe <Right_Search+0x32>
			next_move = DEAD;
 80042f8:	2303      	movs	r3, #3
 80042fa:	6033      	str	r3, [r6, #0]
 80042fc:	e004      	b.n	8004308 <Right_Search+0x3c>
		}
		else {
			next_move = Get_Next_Move();
 80042fe:	f7ff fa31 	bl	8003764 <Get_Next_Move>
 8004302:	6030      	str	r0, [r6, #0]
			Update_Position();
 8004304:	f7fe ff42 	bl	800318c <Update_Position>
		}

		Set_Left(FWD_L, FORWARD); //finish turn by accelerating forward
 8004308:	2101      	movs	r1, #1
 800430a:	2078      	movs	r0, #120	; 0x78
 800430c:	f7ff fe4a 	bl	8003fa4 <Set_Left>
		Set_Right(FWD_R, FORWARD);
 8004310:	2101      	movs	r1, #1
 8004312:	2087      	movs	r0, #135	; 0x87
 8004314:	f7ff fe6e 	bl	8003ff4 <Set_Right>

		r_turnflag = TRUE;
 8004318:	2301      	movs	r3, #1
 800431a:	6023      	str	r3, [r4, #0]
		prev_l_count = l_count; //save current counters
 800431c:	4b23      	ldr	r3, [pc, #140]	; (80043ac <Right_Search+0xe0>)
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	4b23      	ldr	r3, [pc, #140]	; (80043b0 <Right_Search+0xe4>)
 8004322:	601a      	str	r2, [r3, #0]
		prev_r_count = r_count;
 8004324:	4b23      	ldr	r3, [pc, #140]	; (80043b4 <Right_Search+0xe8>)
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	4b23      	ldr	r3, [pc, #140]	; (80043b8 <Right_Search+0xec>)
 800432a:	601a      	str	r2, [r3, #0]
		lenc_diff = 0;
 800432c:	2300      	movs	r3, #0
 800432e:	603b      	str	r3, [r7, #0]
		renc_diff = 0;
 8004330:	602b      	str	r3, [r5, #0]

		Save_State();
 8004332:	f7fe fe5f 	bl	8002ff4 <Save_State>
	}

	if ((r_turnflag == TRUE) && (lenc_diff >= RT_LENC_2 || renc_diff >= RT_RENC_2)) { //made it to same point. execute next direction
 8004336:	6823      	ldr	r3, [r4, #0]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d12c      	bne.n	8004396 <Right_Search+0xca>
 800433c:	4b17      	ldr	r3, [pc, #92]	; (800439c <Right_Search+0xd0>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 8004344:	d804      	bhi.n	8004350 <Right_Search+0x84>
 8004346:	4b16      	ldr	r3, [pc, #88]	; (80043a0 <Right_Search+0xd4>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 800434e:	d922      	bls.n	8004396 <Right_Search+0xca>

		r_turnflag = FALSE;
		//HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
		prev_l_count = l_count; //save current counters
 8004350:	4b16      	ldr	r3, [pc, #88]	; (80043ac <Right_Search+0xe0>)
		Save_State();
	}

	if ((r_turnflag == TRUE) && (lenc_diff >= RT_LENC_2 || renc_diff >= RT_RENC_2)) { //made it to same point. execute next direction

		r_turnflag = FALSE;
 8004352:	2600      	movs	r6, #0
		//HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
		prev_l_count = l_count; //save current counters
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	4b16      	ldr	r3, [pc, #88]	; (80043b0 <Right_Search+0xe4>)
		Save_State();
	}

	if ((r_turnflag == TRUE) && (lenc_diff >= RT_LENC_2 || renc_diff >= RT_RENC_2)) { //made it to same point. execute next direction

		r_turnflag = FALSE;
 8004358:	6026      	str	r6, [r4, #0]
		//HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
		prev_l_count = l_count; //save current counters
 800435a:	601a      	str	r2, [r3, #0]
		prev_r_count = r_count;
 800435c:	4b15      	ldr	r3, [pc, #84]	; (80043b4 <Right_Search+0xe8>)
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	4b15      	ldr	r3, [pc, #84]	; (80043b8 <Right_Search+0xec>)
 8004362:	601a      	str	r2, [r3, #0]

		switch (next_move) { //need to change direction or nah
 8004364:	4b10      	ldr	r3, [pc, #64]	; (80043a8 <Right_Search+0xdc>)
 8004366:	681d      	ldr	r5, [r3, #0]
 8004368:	461c      	mov	r4, r3
 800436a:	2d01      	cmp	r5, #1
 800436c:	d008      	beq.n	8004380 <Right_Search+0xb4>
 800436e:	2d02      	cmp	r5, #2
 8004370:	d10e      	bne.n	8004390 <Right_Search+0xc4>

		case RIGHT:
			Set_Left(RIGHT_L, FORWARD); //need to make right turn again
 8004372:	2101      	movs	r1, #1
 8004374:	2091      	movs	r0, #145	; 0x91
 8004376:	f7ff fe15 	bl	8003fa4 <Set_Left>
			Set_Right(RIGHT_R, FORWARD);
 800437a:	2101      	movs	r1, #1
 800437c:	4630      	mov	r0, r6
 800437e:	e005      	b.n	800438c <Right_Search+0xc0>
			break;

		case LEFT:
			Set_Left(LEFT_L, FORWARD); //need to make right turn again
 8004380:	4629      	mov	r1, r5
 8004382:	4630      	mov	r0, r6
 8004384:	f7ff fe0e 	bl	8003fa4 <Set_Left>
			Set_Right(LEFT_R, FORWARD);
 8004388:	4629      	mov	r1, r5
 800438a:	2087      	movs	r0, #135	; 0x87
 800438c:	f7ff fe32 	bl	8003ff4 <Set_Right>
			break;

		}
		cur_move = next_move;
 8004390:	6822      	ldr	r2, [r4, #0]
 8004392:	4b0a      	ldr	r3, [pc, #40]	; (80043bc <Right_Search+0xf0>)
 8004394:	601a      	str	r2, [r3, #0]
 8004396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004398:	2000309c 	.word	0x2000309c
 800439c:	200030b4 	.word	0x200030b4
 80043a0:	2000108c 	.word	0x2000108c
 80043a4:	200042e8 	.word	0x200042e8
 80043a8:	200032c8 	.word	0x200032c8
 80043ac:	200000e4 	.word	0x200000e4
 80043b0:	2000439c 	.word	0x2000439c
 80043b4:	20003160 	.word	0x20003160
 80043b8:	20004398 	.word	0x20004398
 80043bc:	200000e8 	.word	0x200000e8

080043c0 <Dead_End_Correct>:
#define EQUAL_VAL 100

void Dead_End_Correct(void) {

 //align while going into square
Get_IR(FALSE, FALSE);
 80043c0:	2100      	movs	r1, #0

}

#define EQUAL_VAL 100

void Dead_End_Correct(void) {
 80043c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

 //align while going into square
Get_IR(FALSE, FALSE);
Reset_Counters();

if (dif_l > FRONT_THRESHOLD || dif_r > FRONT_THRESHOLD) { //if there's a front wall
 80043c6:	4c9d      	ldr	r4, [pc, #628]	; (800463c <Dead_End_Correct+0x27c>)
#define EQUAL_VAL 100

void Dead_End_Correct(void) {

 //align while going into square
Get_IR(FALSE, FALSE);
 80043c8:	4608      	mov	r0, r1
 80043ca:	f7ff fb1b 	bl	8003a04 <Get_IR>
 80043ce:	4e9c      	ldr	r6, [pc, #624]	; (8004640 <Dead_End_Correct+0x280>)
Reset_Counters();
 80043d0:	f7fe fcdc 	bl	8002d8c <Reset_Counters>

if (dif_l > FRONT_THRESHOLD || dif_r > FRONT_THRESHOLD) { //if there's a front wall
 80043d4:	6822      	ldr	r2, [r4, #0]
 80043d6:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 80043da:	dc04      	bgt.n	80043e6 <Dead_End_Correct+0x26>
 80043dc:	6833      	ldr	r3, [r6, #0]
 80043de:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80043e2:	f340 80a2 	ble.w	800452a <Dead_End_Correct+0x16a>

	if (dif_lf >= LEFT_THRESHOLD && dif_rf >= RIGHT_THRESHOLD) { //both left and right wall
 80043e6:	4d97      	ldr	r5, [pc, #604]	; (8004644 <Dead_End_Correct+0x284>)
 80043e8:	682b      	ldr	r3, [r5, #0]
 80043ea:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80043ee:	da04      	bge.n	80043fa <Dead_End_Correct+0x3a>
			Set_Left(FWD_L + m_correction, FORWARD);
			Set_Right(FWD_R - m_correction, FORWARD);
		} while (dif_r < STOP_CONDITION && dif_l < STOP_CONDITION);
	}

	if (dif_lf > LEFT_THRESHOLD && dif_rf <= RIGHT_THRESHOLD) { //just left wall
 80043f0:	682b      	ldr	r3, [r5, #0]
 80043f2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80043f6:	dc27      	bgt.n	8004448 <Dead_End_Correct+0x88>
 80043f8:	e046      	b.n	8004488 <Dead_End_Correct+0xc8>
Get_IR(FALSE, FALSE);
Reset_Counters();

if (dif_l > FRONT_THRESHOLD || dif_r > FRONT_THRESHOLD) { //if there's a front wall

	if (dif_lf >= LEFT_THRESHOLD && dif_rf >= RIGHT_THRESHOLD) { //both left and right wall
 80043fa:	4f93      	ldr	r7, [pc, #588]	; (8004648 <Dead_End_Correct+0x288>)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004402:	dbf5      	blt.n	80043f0 <Dead_End_Correct+0x30>
		do { //both left and right wall
			Get_IR(FALSE, FALSE);
			m_correction = (dif_lf - dif_rf)/30;
 8004404:	f8df 8244 	ldr.w	r8, [pc, #580]	; 800464c <Dead_End_Correct+0x28c>

if (dif_l > FRONT_THRESHOLD || dif_r > FRONT_THRESHOLD) { //if there's a front wall

	if (dif_lf >= LEFT_THRESHOLD && dif_rf >= RIGHT_THRESHOLD) { //both left and right wall
		do { //both left and right wall
			Get_IR(FALSE, FALSE);
 8004408:	2100      	movs	r1, #0
 800440a:	4608      	mov	r0, r1
 800440c:	f7ff fafa 	bl	8003a04 <Get_IR>
			m_correction = (dif_lf - dif_rf)/30;
 8004410:	6838      	ldr	r0, [r7, #0]
 8004412:	682b      	ldr	r3, [r5, #0]
			Set_Left(FWD_L + m_correction, FORWARD);
 8004414:	2101      	movs	r1, #1
if (dif_l > FRONT_THRESHOLD || dif_r > FRONT_THRESHOLD) { //if there's a front wall

	if (dif_lf >= LEFT_THRESHOLD && dif_rf >= RIGHT_THRESHOLD) { //both left and right wall
		do { //both left and right wall
			Get_IR(FALSE, FALSE);
			m_correction = (dif_lf - dif_rf)/30;
 8004416:	1a1b      	subs	r3, r3, r0
 8004418:	201e      	movs	r0, #30
 800441a:	fb93 f0f0 	sdiv	r0, r3, r0
 800441e:	f8c8 0000 	str.w	r0, [r8]
			Set_Left(FWD_L + m_correction, FORWARD);
 8004422:	3078      	adds	r0, #120	; 0x78
 8004424:	f7ff fdbe 	bl	8003fa4 <Set_Left>
			Set_Right(FWD_R - m_correction, FORWARD);
 8004428:	f8d8 0000 	ldr.w	r0, [r8]
 800442c:	2101      	movs	r1, #1
 800442e:	f1c0 0087 	rsb	r0, r0, #135	; 0x87
 8004432:	f7ff fddf 	bl	8003ff4 <Set_Right>
		} while (dif_r < STOP_CONDITION && dif_l < STOP_CONDITION);
 8004436:	6832      	ldr	r2, [r6, #0]
 8004438:	f640 63a5 	movw	r3, #3749	; 0xea5
 800443c:	429a      	cmp	r2, r3
 800443e:	dcd7      	bgt.n	80043f0 <Dead_End_Correct+0x30>
 8004440:	6822      	ldr	r2, [r4, #0]
 8004442:	429a      	cmp	r2, r3
 8004444:	dde0      	ble.n	8004408 <Dead_End_Correct+0x48>
 8004446:	e7d3      	b.n	80043f0 <Dead_End_Correct+0x30>
	}

	if (dif_lf > LEFT_THRESHOLD && dif_rf <= RIGHT_THRESHOLD) { //just left wall
 8004448:	4b7f      	ldr	r3, [pc, #508]	; (8004648 <Dead_End_Correct+0x288>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004450:	dc1a      	bgt.n	8004488 <Dead_End_Correct+0xc8>
		do { //both left and right wall
			Get_IR(FALSE, FALSE);
			m_correction = (dif_lf - 1300)/30;
 8004452:	4f7e      	ldr	r7, [pc, #504]	; (800464c <Dead_End_Correct+0x28c>)
		} while (dif_r < STOP_CONDITION && dif_l < STOP_CONDITION);
	}

	if (dif_lf > LEFT_THRESHOLD && dif_rf <= RIGHT_THRESHOLD) { //just left wall
		do { //both left and right wall
			Get_IR(FALSE, FALSE);
 8004454:	2100      	movs	r1, #0
 8004456:	4608      	mov	r0, r1
 8004458:	f7ff fad4 	bl	8003a04 <Get_IR>
			m_correction = (dif_lf - 1300)/30;
 800445c:	6828      	ldr	r0, [r5, #0]
 800445e:	231e      	movs	r3, #30
			Set_Left(FWD_L + m_correction, FORWARD);
 8004460:	2101      	movs	r1, #1
	}

	if (dif_lf > LEFT_THRESHOLD && dif_rf <= RIGHT_THRESHOLD) { //just left wall
		do { //both left and right wall
			Get_IR(FALSE, FALSE);
			m_correction = (dif_lf - 1300)/30;
 8004462:	f2a0 5014 	subw	r0, r0, #1300	; 0x514
 8004466:	fb90 f0f3 	sdiv	r0, r0, r3
 800446a:	6038      	str	r0, [r7, #0]
			Set_Left(FWD_L + m_correction, FORWARD);
 800446c:	3078      	adds	r0, #120	; 0x78
 800446e:	f7ff fd99 	bl	8003fa4 <Set_Left>
			Set_Right(FWD_R - m_correction, FORWARD);
 8004472:	6838      	ldr	r0, [r7, #0]
 8004474:	2101      	movs	r1, #1
 8004476:	f1c0 0087 	rsb	r0, r0, #135	; 0x87
 800447a:	f7ff fdbb 	bl	8003ff4 <Set_Right>
		} while (dif_r < STOP_CONDITION && dif_l < STOP_CONDITION);
 800447e:	6832      	ldr	r2, [r6, #0]
 8004480:	f640 63a5 	movw	r3, #3749	; 0xea5
 8004484:	429a      	cmp	r2, r3
 8004486:	dd04      	ble.n	8004492 <Dead_End_Correct+0xd2>
	}

	if (dif_lf <= LEFT_THRESHOLD && dif_rf > RIGHT_THRESHOLD) { //just right wall
 8004488:	682b      	ldr	r3, [r5, #0]
 800448a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800448e:	dd04      	ble.n	800449a <Dead_End_Correct+0xda>
 8004490:	e025      	b.n	80044de <Dead_End_Correct+0x11e>
		do { //both left and right wall
			Get_IR(FALSE, FALSE);
			m_correction = (dif_lf - 1300)/30;
			Set_Left(FWD_L + m_correction, FORWARD);
			Set_Right(FWD_R - m_correction, FORWARD);
		} while (dif_r < STOP_CONDITION && dif_l < STOP_CONDITION);
 8004492:	6822      	ldr	r2, [r4, #0]
 8004494:	429a      	cmp	r2, r3
 8004496:	dddd      	ble.n	8004454 <Dead_End_Correct+0x94>
 8004498:	e7f6      	b.n	8004488 <Dead_End_Correct+0xc8>
	}

	if (dif_lf <= LEFT_THRESHOLD && dif_rf > RIGHT_THRESHOLD) { //just right wall
 800449a:	4b6b      	ldr	r3, [pc, #428]	; (8004648 <Dead_End_Correct+0x288>)
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	461d      	mov	r5, r3
 80044a0:	f5b2 7f96 	cmp.w	r2, #300	; 0x12c
 80044a4:	dd1b      	ble.n	80044de <Dead_End_Correct+0x11e>
		do { //both left and right wall
			Get_IR(FALSE, FALSE);
			m_correction = (1300 - dif_rf)/30;
 80044a6:	4f69      	ldr	r7, [pc, #420]	; (800464c <Dead_End_Correct+0x28c>)
		} while (dif_r < STOP_CONDITION && dif_l < STOP_CONDITION);
	}

	if (dif_lf <= LEFT_THRESHOLD && dif_rf > RIGHT_THRESHOLD) { //just right wall
		do { //both left and right wall
			Get_IR(FALSE, FALSE);
 80044a8:	2100      	movs	r1, #0
 80044aa:	4608      	mov	r0, r1
 80044ac:	f7ff faaa 	bl	8003a04 <Get_IR>
			m_correction = (1300 - dif_rf)/30;
 80044b0:	682b      	ldr	r3, [r5, #0]
 80044b2:	201e      	movs	r0, #30
			Set_Left(FWD_L + m_correction, FORWARD);
 80044b4:	2101      	movs	r1, #1
	}

	if (dif_lf <= LEFT_THRESHOLD && dif_rf > RIGHT_THRESHOLD) { //just right wall
		do { //both left and right wall
			Get_IR(FALSE, FALSE);
			m_correction = (1300 - dif_rf)/30;
 80044b6:	f5c3 63a2 	rsb	r3, r3, #1296	; 0x510
 80044ba:	3304      	adds	r3, #4
 80044bc:	fb93 f0f0 	sdiv	r0, r3, r0
 80044c0:	6038      	str	r0, [r7, #0]
			Set_Left(FWD_L + m_correction, FORWARD);
 80044c2:	3078      	adds	r0, #120	; 0x78
 80044c4:	f7ff fd6e 	bl	8003fa4 <Set_Left>
			Set_Right(FWD_R - m_correction, FORWARD);
 80044c8:	6838      	ldr	r0, [r7, #0]
 80044ca:	2101      	movs	r1, #1
 80044cc:	f1c0 0087 	rsb	r0, r0, #135	; 0x87
 80044d0:	f7ff fd90 	bl	8003ff4 <Set_Right>
		} while (dif_r < STOP_CONDITION && dif_l < STOP_CONDITION);
 80044d4:	6832      	ldr	r2, [r6, #0]
 80044d6:	f640 63a5 	movw	r3, #3749	; 0xea5
 80044da:	429a      	cmp	r2, r3
 80044dc:	dd21      	ble.n	8004522 <Dead_End_Correct+0x162>
		r_count = __HAL_TIM_GET_COUNTER(&htim4);
	} while (l_count < 50 && r_count < 50);

}

Set_Left(0, FORWARD);
 80044de:	2101      	movs	r1, #1
 80044e0:	2000      	movs	r0, #0
 80044e2:	f7ff fd5f 	bl	8003fa4 <Set_Left>
Set_Right(0, FORWARD);
 80044e6:	2101      	movs	r1, #1
 80044e8:	2000      	movs	r0, #0
 80044ea:	f7ff fd83 	bl	8003ff4 <Set_Right>

HAL_Delay(250);
 80044ee:	20fa      	movs	r0, #250	; 0xfa
 80044f0:	f7fb ff3e 	bl	8000370 <HAL_Delay>

//Turn to the right if right side is greater
Get_IR(FALSE, FALSE);
 80044f4:	2100      	movs	r1, #0
 80044f6:	4608      	mov	r0, r1
 80044f8:	f7ff fa84 	bl	8003a04 <Get_IR>

if (abs(dif_l - (dif_r + 50)) > EQUAL_VAL) {
 80044fc:	6833      	ldr	r3, [r6, #0]
 80044fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004502:	6823      	ldr	r3, [r4, #0]
 8004504:	1a9b      	subs	r3, r3, r2
 8004506:	2b00      	cmp	r3, #0
 8004508:	bfb8      	it	lt
 800450a:	425b      	neglt	r3, r3
 800450c:	2b64      	cmp	r3, #100	; 0x64
 800450e:	dd54      	ble.n	80045ba <Dead_End_Correct+0x1fa>
	if (dif_r > dif_l) {
		Set_Left(RPIVOT_L, FORWARD); //100
 8004510:	2101      	movs	r1, #1
 8004512:	206e      	movs	r0, #110	; 0x6e
 8004514:	f7ff fd46 	bl	8003fa4 <Set_Left>
		Set_Right(RPIVOT_R, BACKWARD); //140
 8004518:	2100      	movs	r1, #0
 800451a:	2064      	movs	r0, #100	; 0x64
 800451c:	f7ff fd6a 	bl	8003ff4 <Set_Right>
 8004520:	e032      	b.n	8004588 <Dead_End_Correct+0x1c8>
		do { //both left and right wall
			Get_IR(FALSE, FALSE);
			m_correction = (1300 - dif_rf)/30;
			Set_Left(FWD_L + m_correction, FORWARD);
			Set_Right(FWD_R - m_correction, FORWARD);
		} while (dif_r < STOP_CONDITION && dif_l < STOP_CONDITION);
 8004522:	6822      	ldr	r2, [r4, #0]
 8004524:	429a      	cmp	r2, r3
 8004526:	ddbf      	ble.n	80044a8 <Dead_End_Correct+0xe8>
 8004528:	e7d9      	b.n	80044de <Dead_End_Correct+0x11e>
	}
}

else if (dif_l < FRONT_THRESHOLD || dif_r < FRONT_THRESHOLD) { //no front wall
 800452a:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 800452e:	d102      	bne.n	8004536 <Dead_End_Correct+0x176>
 8004530:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004534:	d0d3      	beq.n	80044de <Dead_End_Correct+0x11e>

	do {
		Get_IR(FALSE, FALSE);
		m_correction = (dif_lf - dif_rf)/30;
 8004536:	4f43      	ldr	r7, [pc, #268]	; (8004644 <Dead_End_Correct+0x284>)
 8004538:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8004648 <Dead_End_Correct+0x288>
 800453c:	4d43      	ldr	r5, [pc, #268]	; (800464c <Dead_End_Correct+0x28c>)
}

else if (dif_l < FRONT_THRESHOLD || dif_r < FRONT_THRESHOLD) { //no front wall

	do {
		Get_IR(FALSE, FALSE);
 800453e:	2100      	movs	r1, #0
 8004540:	4608      	mov	r0, r1
 8004542:	f7ff fa5f 	bl	8003a04 <Get_IR>
		m_correction = (dif_lf - dif_rf)/30;
 8004546:	f8d8 0000 	ldr.w	r0, [r8]
 800454a:	683b      	ldr	r3, [r7, #0]
		Set_Left(FWD_L + m_correction, FORWARD);
 800454c:	2101      	movs	r1, #1

else if (dif_l < FRONT_THRESHOLD || dif_r < FRONT_THRESHOLD) { //no front wall

	do {
		Get_IR(FALSE, FALSE);
		m_correction = (dif_lf - dif_rf)/30;
 800454e:	1a1b      	subs	r3, r3, r0
 8004550:	201e      	movs	r0, #30
 8004552:	fb93 f0f0 	sdiv	r0, r3, r0
 8004556:	6028      	str	r0, [r5, #0]
		Set_Left(FWD_L + m_correction, FORWARD);
 8004558:	3078      	adds	r0, #120	; 0x78
 800455a:	f7ff fd23 	bl	8003fa4 <Set_Left>
		Set_Right(FWD_R - m_correction, FORWARD);
 800455e:	6828      	ldr	r0, [r5, #0]
 8004560:	2101      	movs	r1, #1
 8004562:	f1c0 0087 	rsb	r0, r0, #135	; 0x87
 8004566:	f7ff fd45 	bl	8003ff4 <Set_Right>
		l_count = __HAL_TIM_GET_COUNTER(&htim1);
 800456a:	4b39      	ldr	r3, [pc, #228]	; (8004650 <Dead_End_Correct+0x290>)
		r_count = __HAL_TIM_GET_COUNTER(&htim4);
 800456c:	4939      	ldr	r1, [pc, #228]	; (8004654 <Dead_End_Correct+0x294>)
	do {
		Get_IR(FALSE, FALSE);
		m_correction = (dif_lf - dif_rf)/30;
		Set_Left(FWD_L + m_correction, FORWARD);
		Set_Right(FWD_R - m_correction, FORWARD);
		l_count = __HAL_TIM_GET_COUNTER(&htim1);
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004572:	4b39      	ldr	r3, [pc, #228]	; (8004658 <Dead_End_Correct+0x298>)
		r_count = __HAL_TIM_GET_COUNTER(&htim4);
	} while (l_count < 50 && r_count < 50);
 8004574:	2a31      	cmp	r2, #49	; 0x31
	do {
		Get_IR(FALSE, FALSE);
		m_correction = (dif_lf - dif_rf)/30;
		Set_Left(FWD_L + m_correction, FORWARD);
		Set_Right(FWD_R - m_correction, FORWARD);
		l_count = __HAL_TIM_GET_COUNTER(&htim1);
 8004576:	601a      	str	r2, [r3, #0]
		r_count = __HAL_TIM_GET_COUNTER(&htim4);
 8004578:	4b38      	ldr	r3, [pc, #224]	; (800465c <Dead_End_Correct+0x29c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	600b      	str	r3, [r1, #0]
	} while (l_count < 50 && r_count < 50);
 8004580:	d8ad      	bhi.n	80044de <Dead_End_Correct+0x11e>
 8004582:	2b31      	cmp	r3, #49	; 0x31
 8004584:	d9db      	bls.n	800453e <Dead_End_Correct+0x17e>
 8004586:	e7aa      	b.n	80044de <Dead_End_Correct+0x11e>
		Set_Left(LPIVOT_L, FORWARD);
		Set_Right(LPIVOT_R, BACKWARD);
	}

	do { //should be perfectly facing the back wall
		Get_IR(FALSE, FALSE);
 8004588:	2100      	movs	r1, #0
 800458a:	4608      	mov	r0, r1
 800458c:	f7ff fa3a 	bl	8003a04 <Get_IR>
	} while (abs(dif_l - (dif_r + 50)) > EQUAL_VAL);
 8004590:	6833      	ldr	r3, [r6, #0]
 8004592:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	1a9b      	subs	r3, r3, r2
 800459a:	2b00      	cmp	r3, #0
 800459c:	bfb8      	it	lt
 800459e:	425b      	neglt	r3, r3
 80045a0:	2b64      	cmp	r3, #100	; 0x64
 80045a2:	dcf1      	bgt.n	8004588 <Dead_End_Correct+0x1c8>

	Set_Left(0, FORWARD);
 80045a4:	2101      	movs	r1, #1
 80045a6:	2000      	movs	r0, #0
 80045a8:	f7ff fcfc 	bl	8003fa4 <Set_Left>
	Set_Right(0, FORWARD);
 80045ac:	2000      	movs	r0, #0
 80045ae:	2101      	movs	r1, #1
 80045b0:	f7ff fd20 	bl	8003ff4 <Set_Right>

	HAL_Delay(250);
 80045b4:	20fa      	movs	r0, #250	; 0xfa
 80045b6:	f7fb fedb 	bl	8000370 <HAL_Delay>
}

Reset_Counters();
 80045ba:	f7fe fbe7 	bl	8002d8c <Reset_Counters>

//rotate left do 180 degree turn
Set_Left(LPIVOT_L, BACKWARD); //100
 80045be:	2100      	movs	r1, #0
 80045c0:	206e      	movs	r0, #110	; 0x6e
 80045c2:	f7ff fcef 	bl	8003fa4 <Set_Left>
Set_Right(LPIVOT_R, FORWARD); //140
 80045c6:	2101      	movs	r1, #1
 80045c8:	2064      	movs	r0, #100	; 0x64
 80045ca:	f7ff fd13 	bl	8003ff4 <Set_Right>

do {
	r_count = __HAL_TIM_GET_COUNTER(&htim4);
 80045ce:	4b23      	ldr	r3, [pc, #140]	; (800465c <Dead_End_Correct+0x29c>)
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	461d      	mov	r5, r3
 80045d4:	6a53      	ldr	r3, [r2, #36]	; 0x24
} while (r_count < PIVOT_ENC);
 80045d6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80045da:	d3fb      	bcc.n	80045d4 <Dead_End_Correct+0x214>
 80045dc:	4c1d      	ldr	r4, [pc, #116]	; (8004654 <Dead_End_Correct+0x294>)

//floodfill
Set_Left(0, FORWARD);
 80045de:	2101      	movs	r1, #1
 80045e0:	2000      	movs	r0, #0
 80045e2:	6023      	str	r3, [r4, #0]
 80045e4:	f7ff fcde 	bl	8003fa4 <Set_Left>
Set_Right(0, FORWARD);
 80045e8:	2101      	movs	r1, #1
 80045ea:	2000      	movs	r0, #0
 80045ec:	f7ff fd02 	bl	8003ff4 <Set_Right>
Floodfill(reverse_flag);
 80045f0:	4b1b      	ldr	r3, [pc, #108]	; (8004660 <Dead_End_Correct+0x2a0>)
 80045f2:	6818      	ldr	r0, [r3, #0]
 80045f4:	f7ff f818 	bl	8003628 <Floodfill>
Reset_Counters();
 80045f8:	f7fe fbc8 	bl	8002d8c <Reset_Counters>
HAL_Delay(250);
 80045fc:	20fa      	movs	r0, #250	; 0xfa
 80045fe:	f7fb feb7 	bl	8000370 <HAL_Delay>

Set_Left(FWD_L, BACKWARD);
 8004602:	2100      	movs	r1, #0
 8004604:	2078      	movs	r0, #120	; 0x78
 8004606:	f7ff fccd 	bl	8003fa4 <Set_Left>
Set_Right(FWD_R, BACKWARD);
 800460a:	2100      	movs	r1, #0
 800460c:	2087      	movs	r0, #135	; 0x87
 800460e:	f7ff fcf1 	bl	8003ff4 <Set_Right>

//go backward a tad
do {
	r_count = __HAL_TIM_GET_COUNTER(&htim4);
 8004612:	6829      	ldr	r1, [r5, #0]
} while (abs(r_count - 65511) > 0); //65536
 8004614:	f64f 73e7 	movw	r3, #65511	; 0xffe7
Set_Left(FWD_L, BACKWARD);
Set_Right(FWD_R, BACKWARD);

//go backward a tad
do {
	r_count = __HAL_TIM_GET_COUNTER(&htim4);
 8004618:	6a4a      	ldr	r2, [r1, #36]	; 0x24
} while (abs(r_count - 65511) > 0); //65536
 800461a:	429a      	cmp	r2, r3
 800461c:	d1fc      	bne.n	8004618 <Dead_End_Correct+0x258>

Set_Left(0, FORWARD);
 800461e:	2101      	movs	r1, #1
 8004620:	2000      	movs	r0, #0
 8004622:	6023      	str	r3, [r4, #0]
 8004624:	f7ff fcbe 	bl	8003fa4 <Set_Left>
Set_Right(0, FORWARD);
 8004628:	2000      	movs	r0, #0
 800462a:	2101      	movs	r1, #1
 800462c:	f7ff fce2 	bl	8003ff4 <Set_Right>
HAL_Delay(300);
 8004630:	f44f 7096 	mov.w	r0, #300	; 0x12c

}
 8004634:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	r_count = __HAL_TIM_GET_COUNTER(&htim4);
} while (abs(r_count - 65511) > 0); //65536

Set_Left(0, FORWARD);
Set_Right(0, FORWARD);
HAL_Delay(300);
 8004638:	f7fb be9a 	b.w	8000370 <HAL_Delay>
 800463c:	20002088 	.word	0x20002088
 8004640:	200020e4 	.word	0x200020e4
 8004644:	200042fc 	.word	0x200042fc
 8004648:	200042d4 	.word	0x200042d4
 800464c:	200020e8 	.word	0x200020e8
 8004650:	200050f8 	.word	0x200050f8
 8004654:	20003160 	.word	0x20003160
 8004658:	200000e4 	.word	0x200000e4
 800465c:	200043a0 	.word	0x200043a0
 8004660:	200042d8 	.word	0x200042d8

08004664 <Dead_End>:
		}
		cur_move = next_move;
	} //case RIGHT
}

void Dead_End() {
 8004664:	b570      	push	{r4, r5, r6, lr}

	if (dead_flag == ARRIVE) {
 8004666:	4c36      	ldr	r4, [pc, #216]	; (8004740 <Dead_End+0xdc>)
 8004668:	6823      	ldr	r3, [r4, #0]
 800466a:	2b02      	cmp	r3, #2
 800466c:	d119      	bne.n	80046a2 <Dead_End+0x3e>

		Dead_End_Correct(); //should be aligned in middle of square
 800466e:	f7ff fea7 	bl	80043c0 <Dead_End_Correct>
		Print_Maze();
 8004672:	f7fe ff3d 	bl	80034f0 <Print_Maze>
		Reset_Counters();
 8004676:	f7fe fb89 	bl	8002d8c <Reset_Counters>
		Clear_Buffers();
 800467a:	f7fe fbbb 	bl	8002df4 <Clear_Buffers>
		if (done_flag == TRUE) {
 800467e:	4b31      	ldr	r3, [pc, #196]	; (8004744 <Dead_End+0xe0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d103      	bne.n	800468e <Dead_End+0x2a>
			cur_move = PAUSE;
 8004686:	2204      	movs	r2, #4
 8004688:	4b2f      	ldr	r3, [pc, #188]	; (8004748 <Dead_End+0xe4>)
 800468a:	601a      	str	r2, [r3, #0]
 800468c:	e009      	b.n	80046a2 <Dead_End+0x3e>
		}

		else {
		Set_Left(FWD_L, FORWARD);
 800468e:	2101      	movs	r1, #1
 8004690:	2078      	movs	r0, #120	; 0x78
 8004692:	f7ff fc87 	bl	8003fa4 <Set_Left>
		Set_Right(FWD_R, FORWARD); //move forward to next square
 8004696:	2101      	movs	r1, #1
 8004698:	2087      	movs	r0, #135	; 0x87
 800469a:	f7ff fcab 	bl	8003ff4 <Set_Right>
		dead_flag = PEEK;
 800469e:	2300      	movs	r3, #0
 80046a0:	6023      	str	r3, [r4, #0]
		}
	}

	if (dead_flag == PEEK && (lenc_diff >= DEAD_LENC1 || renc_diff >= DEAD_RENC1)) { //get next state
 80046a2:	6823      	ldr	r3, [r4, #0]
 80046a4:	b9db      	cbnz	r3, 80046de <Dead_End+0x7a>
 80046a6:	4b29      	ldr	r3, [pc, #164]	; (800474c <Dead_End+0xe8>)
 80046a8:	4d29      	ldr	r5, [pc, #164]	; (8004750 <Dead_End+0xec>)
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	461e      	mov	r6, r3
 80046ae:	2a8b      	cmp	r2, #139	; 0x8b
 80046b0:	d802      	bhi.n	80046b8 <Dead_End+0x54>
 80046b2:	682b      	ldr	r3, [r5, #0]
 80046b4:	2b8b      	cmp	r3, #139	; 0x8b
 80046b6:	d912      	bls.n	80046de <Dead_End+0x7a>

		dead_flag = EXECUTE;
 80046b8:	2301      	movs	r3, #1
 80046ba:	6023      	str	r3, [r4, #0]
		next_move = Get_Next_Move();
 80046bc:	f7ff f852 	bl	8003764 <Get_Next_Move>
 80046c0:	4b24      	ldr	r3, [pc, #144]	; (8004754 <Dead_End+0xf0>)
 80046c2:	6018      	str	r0, [r3, #0]
		Update_Position();
 80046c4:	f7fe fd62 	bl	800318c <Update_Position>

		prev_l_count = l_count; //save current counters
 80046c8:	4b23      	ldr	r3, [pc, #140]	; (8004758 <Dead_End+0xf4>)
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	4b23      	ldr	r3, [pc, #140]	; (800475c <Dead_End+0xf8>)
 80046ce:	601a      	str	r2, [r3, #0]
		prev_r_count = r_count;
 80046d0:	4b23      	ldr	r3, [pc, #140]	; (8004760 <Dead_End+0xfc>)
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	4b23      	ldr	r3, [pc, #140]	; (8004764 <Dead_End+0x100>)
 80046d6:	601a      	str	r2, [r3, #0]
		lenc_diff = 0;
 80046d8:	2300      	movs	r3, #0
 80046da:	6033      	str	r3, [r6, #0]
		renc_diff = 0;
 80046dc:	602b      	str	r3, [r5, #0]
	}
	//after correction
	if (dead_flag == EXECUTE && (lenc_diff > DEAD_LENC2 || renc_diff >= DEAD_RENC2)) {
 80046de:	6823      	ldr	r3, [r4, #0]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d12c      	bne.n	800473e <Dead_End+0xda>
 80046e4:	4b19      	ldr	r3, [pc, #100]	; (800474c <Dead_End+0xe8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f5b3 7fb7 	cmp.w	r3, #366	; 0x16e
 80046ec:	d204      	bcs.n	80046f8 <Dead_End+0x94>
 80046ee:	4b18      	ldr	r3, [pc, #96]	; (8004750 <Dead_End+0xec>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 80046f6:	d922      	bls.n	800473e <Dead_End+0xda>
		dead_flag = ARRIVE;
 80046f8:	2302      	movs	r3, #2
 80046fa:	6023      	str	r3, [r4, #0]
		prev_l_count = l_count;
 80046fc:	4b16      	ldr	r3, [pc, #88]	; (8004758 <Dead_End+0xf4>)
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	4b16      	ldr	r3, [pc, #88]	; (800475c <Dead_End+0xf8>)
 8004702:	601a      	str	r2, [r3, #0]
		prev_r_count = r_count;
 8004704:	4b16      	ldr	r3, [pc, #88]	; (8004760 <Dead_End+0xfc>)
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	4b16      	ldr	r3, [pc, #88]	; (8004764 <Dead_End+0x100>)
 800470a:	601a      	str	r2, [r3, #0]

		switch (next_move) { //need to change direction or nah
 800470c:	4b11      	ldr	r3, [pc, #68]	; (8004754 <Dead_End+0xf0>)
 800470e:	681d      	ldr	r5, [r3, #0]
 8004710:	461c      	mov	r4, r3
 8004712:	2d01      	cmp	r5, #1
 8004714:	d008      	beq.n	8004728 <Dead_End+0xc4>
 8004716:	2d02      	cmp	r5, #2
 8004718:	d10e      	bne.n	8004738 <Dead_End+0xd4>
		case LEFT:
			Set_Left(LEFT_L, FORWARD); //need to make right turn again
			Set_Right(LEFT_R, FORWARD);
			break;
		case RIGHT:
			Set_Left(RIGHT_L, FORWARD); //need to make right turn again
 800471a:	2101      	movs	r1, #1
 800471c:	2091      	movs	r0, #145	; 0x91
 800471e:	f7ff fc41 	bl	8003fa4 <Set_Left>
			Set_Right(RIGHT_R, FORWARD);
 8004722:	2101      	movs	r1, #1
 8004724:	2000      	movs	r0, #0
 8004726:	e005      	b.n	8004734 <Dead_End+0xd0>
		prev_r_count = r_count;

		switch (next_move) { //need to change direction or nah

		case LEFT:
			Set_Left(LEFT_L, FORWARD); //need to make right turn again
 8004728:	4629      	mov	r1, r5
 800472a:	2000      	movs	r0, #0
 800472c:	f7ff fc3a 	bl	8003fa4 <Set_Left>
			Set_Right(LEFT_R, FORWARD);
 8004730:	4629      	mov	r1, r5
 8004732:	2087      	movs	r0, #135	; 0x87
			break;
		case RIGHT:
			Set_Left(RIGHT_L, FORWARD); //need to make right turn again
			Set_Right(RIGHT_R, FORWARD);
 8004734:	f7ff fc5e 	bl	8003ff4 <Set_Right>
			break;
		}
		cur_move = next_move;
 8004738:	6822      	ldr	r2, [r4, #0]
 800473a:	4b03      	ldr	r3, [pc, #12]	; (8004748 <Dead_End+0xe4>)
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	bd70      	pop	{r4, r5, r6, pc}
 8004740:	20000000 	.word	0x20000000
 8004744:	200042e8 	.word	0x200042e8
 8004748:	200000e8 	.word	0x200000e8
 800474c:	200030b4 	.word	0x200030b4
 8004750:	2000108c 	.word	0x2000108c
 8004754:	200032c8 	.word	0x200032c8
 8004758:	200000e4 	.word	0x200000e4
 800475c:	2000439c 	.word	0x2000439c
 8004760:	20003160 	.word	0x20003160
 8004764:	20004398 	.word	0x20004398

08004768 <Stop>:
	HAL_UART_Receive(&huart1, rx_buffer, len, 5000);
	Transmit("HAHA");
}
*/

void Stop(void) {
 8004768:	b538      	push	{r3, r4, r5, lr}

	Set_Left(0, FORWARD);
 800476a:	2101      	movs	r1, #1
 800476c:	2000      	movs	r0, #0
 800476e:	f7ff fc19 	bl	8003fa4 <Set_Left>
	Set_Right(0, FORWARD); //STOP
 8004772:	2101      	movs	r1, #1
 8004774:	2000      	movs	r0, #0
 8004776:	f7ff fc3d 	bl	8003ff4 <Set_Right>
	if (debug_flag == TRUE) {
 800477a:	4b0f      	ldr	r3, [pc, #60]	; (80047b8 <Stop+0x50>)
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	461c      	mov	r4, r3
 8004780:	2a01      	cmp	r2, #1
 8004782:	d101      	bne.n	8004788 <Stop+0x20>
	//Floodfill(X_START, Y_START);
	Print_Maze();
 8004784:	f7fe feb4 	bl	80034f0 <Print_Maze>
	}
	Reset_Counters();

	debug_flag = FALSE;
 8004788:	2500      	movs	r5, #0
	Set_Right(0, FORWARD); //STOP
	if (debug_flag == TRUE) {
	//Floodfill(X_START, Y_START);
	Print_Maze();
	}
	Reset_Counters();
 800478a:	f7fe faff 	bl	8002d8c <Reset_Counters>

	debug_flag = FALSE;
	//Send_State();
	//Send_Buffers();
	HAL_GPIO_WritePin(GPIOD, LED5_Pin, OFF);
 800478e:	2102      	movs	r1, #2
 8004790:	480a      	ldr	r0, [pc, #40]	; (80047bc <Stop+0x54>)
 8004792:	462a      	mov	r2, r5
	//Floodfill(X_START, Y_START);
	Print_Maze();
	}
	Reset_Counters();

	debug_flag = FALSE;
 8004794:	6025      	str	r5, [r4, #0]
	//Send_State();
	//Send_Buffers();
	HAL_GPIO_WritePin(GPIOD, LED5_Pin, OFF);
 8004796:	f7fc fd15 	bl	80011c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4_Pin, OFF);
 800479a:	462a      	mov	r2, r5
 800479c:	2104      	movs	r1, #4
 800479e:	4807      	ldr	r0, [pc, #28]	; (80047bc <Stop+0x54>)
 80047a0:	f7fc fd10 	bl	80011c4 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(GPIOD, LED3_Pin, OFF);
	//HAL_GPIO_WritePin(GPIOD, LED2_Pin, OFF);
	HAL_GPIO_WritePin(GPIOD, LED1_Pin, ON);
 80047a4:	2201      	movs	r2, #1
 80047a6:	2120      	movs	r1, #32
 80047a8:	4804      	ldr	r0, [pc, #16]	; (80047bc <Stop+0x54>)
 80047aa:	f7fc fd0b 	bl	80011c4 <HAL_GPIO_WritePin>
	stop_flag = TRUE;
 80047ae:	2201      	movs	r2, #1
 80047b0:	4b03      	ldr	r3, [pc, #12]	; (80047c0 <Stop+0x58>)
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	bd38      	pop	{r3, r4, r5, pc}
 80047b6:	bf00      	nop
 80047b8:	200042dc 	.word	0x200042dc
 80047bc:	40020c00 	.word	0x40020c00
 80047c0:	20000004 	.word	0x20000004

080047c4 <Search>:

	sprintf(tx_buffer, "DeadEnd: \r\nLEFT: %d    RIGHT: %d      OFFSET(LEFT - RIGHT): %d \r\n", l_test, r_test, l_test - r_test);
	Transmit(tx_buffer);
}

void Search() {
 80047c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	HAL_GPIO_WritePin(GPIOD, LED5_Pin, ON); //Turn on LEDs to indicate it is searching
 80047c6:	2201      	movs	r2, #1
 80047c8:	2102      	movs	r1, #2
 80047ca:	486a      	ldr	r0, [pc, #424]	; (8004974 <Search+0x1b0>)
 80047cc:	f7fc fcfa 	bl	80011c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED2_Pin, OFF);
 80047d0:	2200      	movs	r2, #0
 80047d2:	2110      	movs	r1, #16
 80047d4:	4867      	ldr	r0, [pc, #412]	; (8004974 <Search+0x1b0>)
 80047d6:	f7fc fcf5 	bl	80011c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4_Pin, OFF);
 80047da:	2200      	movs	r2, #0
 80047dc:	2104      	movs	r1, #4
 80047de:	4865      	ldr	r0, [pc, #404]	; (8004974 <Search+0x1b0>)
 80047e0:	f7fc fcf0 	bl	80011c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED3_Pin, OFF);
 80047e4:	2200      	movs	r2, #0
 80047e6:	2108      	movs	r1, #8
 80047e8:	4862      	ldr	r0, [pc, #392]	; (8004974 <Search+0x1b0>)
 80047ea:	f7fc fceb 	bl	80011c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED1_Pin, OFF);

	HAL_Delay(1000); //delay before start to get finger out of the way

	if (reverse_flag == FALSE) {
 80047ee:	4c62      	ldr	r4, [pc, #392]	; (8004978 <Search+0x1b4>)

	HAL_GPIO_WritePin(GPIOD, LED5_Pin, ON); //Turn on LEDs to indicate it is searching
	HAL_GPIO_WritePin(GPIOD, LED2_Pin, OFF);
	HAL_GPIO_WritePin(GPIOD, LED4_Pin, OFF);
	HAL_GPIO_WritePin(GPIOD, LED3_Pin, OFF);
	HAL_GPIO_WritePin(GPIOD, LED1_Pin, OFF);
 80047f0:	2200      	movs	r2, #0
 80047f2:	2120      	movs	r1, #32
 80047f4:	485f      	ldr	r0, [pc, #380]	; (8004974 <Search+0x1b0>)
 80047f6:	f7fc fce5 	bl	80011c4 <HAL_GPIO_WritePin>

	HAL_Delay(1000); //delay before start to get finger out of the way
 80047fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047fe:	f7fb fdb7 	bl	8000370 <HAL_Delay>

	if (reverse_flag == FALSE) {
 8004802:	6823      	ldr	r3, [r4, #0]
 8004804:	b91b      	cbnz	r3, 800480e <Search+0x4a>
		Reset_Maze();
 8004806:	f7fe ff87 	bl	8003718 <Reset_Maze>
		Read_Walls();
 800480a:	f7ff fa8f 	bl	8003d2c <Read_Walls>
	}

	Clear_Buffers();
 800480e:	f7fe faf1 	bl	8002df4 <Clear_Buffers>
	Reset_Counters();
 8004812:	f7fe fabb 	bl	8002d8c <Reset_Counters>

	Reset_Flags(reverse_flag);
 8004816:	6820      	ldr	r0, [r4, #0]
 8004818:	f7fe fb08 	bl	8002e2c <Reset_Flags>
	Floodfill(reverse_flag);
 800481c:	6820      	ldr	r0, [r4, #0]

    while(1) { //searching loop //while(maze[x_coord][y_coord] != 0)

    	Get_IR(FALSE, TRUE); //get IR readings. True is for saving the buffers

    	if  (cur_move == FWD || r_turnflag == TRUE || l_turnflag == TRUE || dead_flag == EXECUTE || dead_flag == PEEK) {
 800481e:	4c57      	ldr	r4, [pc, #348]	; (800497c <Search+0x1b8>)

	Clear_Buffers();
	Reset_Counters();

	Reset_Flags(reverse_flag);
	Floodfill(reverse_flag);
 8004820:	f7fe ff02 	bl	8003628 <Floodfill>
	Print_Maze();
 8004824:	f7fe fe64 	bl	80034f0 <Print_Maze>
	Send_Debug();
 8004828:	f7fe fb70 	bl	8002f0c <Send_Debug>
 800482c:	4625      	mov	r5, r4
	Update_Position(); //move to next square
 800482e:	f7fe fcad 	bl	800318c <Update_Position>

	HAL_Delay(100); //delay before start to get finger out of the way
 8004832:	2064      	movs	r0, #100	; 0x64
 8004834:	f7fb fd9c 	bl	8000370 <HAL_Delay>

	Set_Left(FWD_L, FORWARD); //start going straight. get moving
 8004838:	2101      	movs	r1, #1
 800483a:	2078      	movs	r0, #120	; 0x78
 800483c:	f7ff fbb2 	bl	8003fa4 <Set_Left>
	Set_Right(FWD_R, FORWARD);
 8004840:	2101      	movs	r1, #1
 8004842:	2087      	movs	r0, #135	; 0x87
 8004844:	f7ff fbd6 	bl	8003ff4 <Set_Right>
    while(1) { //searching loop //while(maze[x_coord][y_coord] != 0)

    	Get_IR(FALSE, TRUE); //get IR readings. True is for saving the buffers

    	if  (cur_move == FWD || r_turnflag == TRUE || l_turnflag == TRUE || dead_flag == EXECUTE || dead_flag == PEEK) {
    		m_correction = Motor_Correction(dif_lf, dif_rf, dif_l, dif_r, FALSE);
 8004848:	4e4d      	ldr	r6, [pc, #308]	; (8004980 <Search+0x1bc>)
	Set_Left(FWD_L, FORWARD); //start going straight. get moving
	Set_Right(FWD_R, FORWARD);

    while(1) { //searching loop //while(maze[x_coord][y_coord] != 0)

    	Get_IR(FALSE, TRUE); //get IR readings. True is for saving the buffers
 800484a:	2101      	movs	r1, #1
 800484c:	2000      	movs	r0, #0
 800484e:	f7ff f8d9 	bl	8003a04 <Get_IR>

    	if  (cur_move == FWD || r_turnflag == TRUE || l_turnflag == TRUE || dead_flag == EXECUTE || dead_flag == PEEK) {
 8004852:	6823      	ldr	r3, [r4, #0]
 8004854:	b15b      	cbz	r3, 800486e <Search+0xaa>
 8004856:	4b4b      	ldr	r3, [pc, #300]	; (8004984 <Search+0x1c0>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d007      	beq.n	800486e <Search+0xaa>
 800485e:	4b4a      	ldr	r3, [pc, #296]	; (8004988 <Search+0x1c4>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d003      	beq.n	800486e <Search+0xaa>
 8004866:	4b49      	ldr	r3, [pc, #292]	; (800498c <Search+0x1c8>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d816      	bhi.n	800489c <Search+0xd8>
    		m_correction = Motor_Correction(dif_lf, dif_rf, dif_l, dif_r, FALSE);
 800486e:	2300      	movs	r3, #0
 8004870:	4a47      	ldr	r2, [pc, #284]	; (8004990 <Search+0x1cc>)
 8004872:	4948      	ldr	r1, [pc, #288]	; (8004994 <Search+0x1d0>)
 8004874:	4848      	ldr	r0, [pc, #288]	; (8004998 <Search+0x1d4>)
 8004876:	4f49      	ldr	r7, [pc, #292]	; (800499c <Search+0x1d8>)
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	6833      	ldr	r3, [r6, #0]
 800487c:	6809      	ldr	r1, [r1, #0]
 800487e:	6812      	ldr	r2, [r2, #0]
 8004880:	6800      	ldr	r0, [r0, #0]
 8004882:	f7fe fa4f 	bl	8002d24 <Motor_Correction>
    		Set_Left(FWD_L + m_correction, FORWARD);
 8004886:	2101      	movs	r1, #1
    while(1) { //searching loop //while(maze[x_coord][y_coord] != 0)

    	Get_IR(FALSE, TRUE); //get IR readings. True is for saving the buffers

    	if  (cur_move == FWD || r_turnflag == TRUE || l_turnflag == TRUE || dead_flag == EXECUTE || dead_flag == PEEK) {
    		m_correction = Motor_Correction(dif_lf, dif_rf, dif_l, dif_r, FALSE);
 8004888:	6038      	str	r0, [r7, #0]
    		Set_Left(FWD_L + m_correction, FORWARD);
 800488a:	3078      	adds	r0, #120	; 0x78
 800488c:	f7ff fb8a 	bl	8003fa4 <Set_Left>
    		Set_Right(FWD_R - m_correction, FORWARD);
 8004890:	6838      	ldr	r0, [r7, #0]
 8004892:	2101      	movs	r1, #1
 8004894:	f1c0 0087 	rsb	r0, r0, #135	; 0x87
 8004898:	f7ff fbac 	bl	8003ff4 <Set_Right>
    		//motor correction for straight part of turn and FWD moving
    	}

    	if (Emergency_Stop() || stop_flag == TRUE) {
 800489c:	f7fe fa24 	bl	8002ce8 <Emergency_Stop>
 80048a0:	b918      	cbnz	r0, 80048aa <Search+0xe6>
 80048a2:	4b3f      	ldr	r3, [pc, #252]	; (80049a0 <Search+0x1dc>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d104      	bne.n	80048b4 <Search+0xf0>
    		Dead_End();
    		break;
    	} //switch
    } //searching loop

}
 80048aa:	b003      	add	sp, #12
 80048ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    		Set_Right(FWD_R - m_correction, FORWARD);
    		//motor correction for straight part of turn and FWD moving
    	}

    	if (Emergency_Stop() || stop_flag == TRUE) {
    		Stop();
 80048b0:	f7ff bf5a 	b.w	8004768 <Stop>
    		break;
    	}

    	l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
 80048b4:	4b3b      	ldr	r3, [pc, #236]	; (80049a4 <Search+0x1e0>)
    	r_count = __HAL_TIM_GET_COUNTER(&htim4);
 80048b6:	4a3c      	ldr	r2, [pc, #240]	; (80049a8 <Search+0x1e4>)
    	if (Emergency_Stop() || stop_flag == TRUE) {
    		Stop();
    		break;
    	}

    	l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
 80048b8:	681b      	ldr	r3, [r3, #0]
    	r_count = __HAL_TIM_GET_COUNTER(&htim4);

    	lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
 80048ba:	483c      	ldr	r0, [pc, #240]	; (80049ac <Search+0x1e8>)
    	if (Emergency_Stop() || stop_flag == TRUE) {
    		Stop();
    		break;
    	}

    	l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
 80048bc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80048be:	4b3c      	ldr	r3, [pc, #240]	; (80049b0 <Search+0x1ec>)

    	lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
    	renc_diff = r_count - prev_r_count;

    	//wall to no wall transition, or no wall to wall transition
    	if (transition_flag == TRUE) {
 80048c0:	f8df e11c 	ldr.w	lr, [pc, #284]	; 80049e0 <Search+0x21c>
    	if (Emergency_Stop() || stop_flag == TRUE) {
    		Stop();
    		break;
    	}

    	l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
 80048c4:	6019      	str	r1, [r3, #0]
    	r_count = __HAL_TIM_GET_COUNTER(&htim4);
 80048c6:	4b3b      	ldr	r3, [pc, #236]	; (80049b4 <Search+0x1f0>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048cc:	6013      	str	r3, [r2, #0]

    	lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
 80048ce:	4a3a      	ldr	r2, [pc, #232]	; (80049b8 <Search+0x1f4>)
 80048d0:	6812      	ldr	r2, [r2, #0]
 80048d2:	1a8a      	subs	r2, r1, r2
 80048d4:	6002      	str	r2, [r0, #0]
    	renc_diff = r_count - prev_r_count;
 80048d6:	4a39      	ldr	r2, [pc, #228]	; (80049bc <Search+0x1f8>)
 80048d8:	4839      	ldr	r0, [pc, #228]	; (80049c0 <Search+0x1fc>)
 80048da:	6812      	ldr	r2, [r2, #0]
 80048dc:	1a9a      	subs	r2, r3, r2
 80048de:	6002      	str	r2, [r0, #0]

    	//wall to no wall transition, or no wall to wall transition
    	if (transition_flag == TRUE) {
 80048e0:	f8de 2000 	ldr.w	r2, [lr]
 80048e4:	2a01      	cmp	r2, #1
 80048e6:	d10a      	bne.n	80048fe <Search+0x13a>
    		lenc_diff_corr = l_count - l_count_corr;
 80048e8:	4a36      	ldr	r2, [pc, #216]	; (80049c4 <Search+0x200>)
 80048ea:	6812      	ldr	r2, [r2, #0]
 80048ec:	1a89      	subs	r1, r1, r2
 80048ee:	4a36      	ldr	r2, [pc, #216]	; (80049c8 <Search+0x204>)
 80048f0:	6011      	str	r1, [r2, #0]
    		renc_diff_corr = r_count - r_count_corr;
 80048f2:	4a36      	ldr	r2, [pc, #216]	; (80049cc <Search+0x208>)
 80048f4:	6812      	ldr	r2, [r2, #0]
 80048f6:	1a9b      	subs	r3, r3, r2
 80048f8:	4a35      	ldr	r2, [pc, #212]	; (80049d0 <Search+0x20c>)
 80048fa:	6013      	str	r3, [r2, #0]
 80048fc:	e025      	b.n	800494a <Search+0x186>
    	}

    	if (transition_flag == FALSE && cur_move == FWD && fwd_flag == FALSE && (r_transition_flag == TRUE || l_transition_flag == TRUE)) {
 80048fe:	bb22      	cbnz	r2, 800494a <Search+0x186>
 8004900:	682a      	ldr	r2, [r5, #0]
 8004902:	bb12      	cbnz	r2, 800494a <Search+0x186>
 8004904:	4a33      	ldr	r2, [pc, #204]	; (80049d4 <Search+0x210>)
 8004906:	6812      	ldr	r2, [r2, #0]
 8004908:	bb3a      	cbnz	r2, 800495a <Search+0x196>
 800490a:	4a33      	ldr	r2, [pc, #204]	; (80049d8 <Search+0x214>)
 800490c:	4833      	ldr	r0, [pc, #204]	; (80049dc <Search+0x218>)
 800490e:	6812      	ldr	r2, [r2, #0]
 8004910:	2a01      	cmp	r2, #1
 8004912:	d002      	beq.n	800491a <Search+0x156>
 8004914:	6807      	ldr	r7, [r0, #0]
 8004916:	2f01      	cmp	r7, #1
 8004918:	d11f      	bne.n	800495a <Search+0x196>
    		l_count_corr = l_count;
 800491a:	4f2a      	ldr	r7, [pc, #168]	; (80049c4 <Search+0x200>)
 800491c:	6039      	str	r1, [r7, #0]
    		r_count_corr = r_count;
 800491e:	492b      	ldr	r1, [pc, #172]	; (80049cc <Search+0x208>)
 8004920:	600b      	str	r3, [r1, #0]
    		transition_flag = TRUE;
 8004922:	2301      	movs	r3, #1
    		lenc_diff_corr = 0;
 8004924:	4928      	ldr	r1, [pc, #160]	; (80049c8 <Search+0x204>)
    	}

    	if (transition_flag == FALSE && cur_move == FWD && fwd_flag == FALSE && (r_transition_flag == TRUE || l_transition_flag == TRUE)) {
    		l_count_corr = l_count;
    		r_count_corr = r_count;
    		transition_flag = TRUE;
 8004926:	f8ce 3000 	str.w	r3, [lr]
    		lenc_diff_corr = 0;
 800492a:	2300      	movs	r3, #0
 800492c:	600b      	str	r3, [r1, #0]
    		renc_diff_corr = 0;
 800492e:	4928      	ldr	r1, [pc, #160]	; (80049d0 <Search+0x20c>)
 8004930:	600b      	str	r3, [r1, #0]
    		if (l_transition_flag == TRUE) {
 8004932:	6803      	ldr	r3, [r0, #0]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d102      	bne.n	800493e <Search+0x17a>
    			HAL_GPIO_WritePin(GPIOD, LED2_Pin, ON);
 8004938:	461a      	mov	r2, r3
 800493a:	2110      	movs	r1, #16
 800493c:	e002      	b.n	8004944 <Search+0x180>
    		}
    		else if (r_transition_flag == TRUE) {
 800493e:	2a01      	cmp	r2, #1
 8004940:	d10b      	bne.n	800495a <Search+0x196>
    			HAL_GPIO_WritePin(GPIOD, LED3_Pin, ON);
 8004942:	2108      	movs	r1, #8
 8004944:	480b      	ldr	r0, [pc, #44]	; (8004974 <Search+0x1b0>)
 8004946:	f7fc fc3d 	bl	80011c4 <HAL_GPIO_WritePin>
    		}
    	}

    	switch (cur_move) { //main case statement. While moving, check distance traveled. If 1 unit has been covered, execute next move
 800494a:	682b      	ldr	r3, [r5, #0]
 800494c:	2b03      	cmp	r3, #3
 800494e:	f63f af7c 	bhi.w	800484a <Search+0x86>
 8004952:	e8df f003 	tbb	[pc, r3]
 8004956:	0802      	.short	0x0802
 8004958:	0b05      	.short	0x0b05
    	//will eventually combine with above statement
    	case FWD:
    		Forward_Search();
 800495a:	f7ff fb73 	bl	8004044 <Forward_Search>
    		break;
 800495e:	e773      	b.n	8004848 <Search+0x84>

    	case RIGHT: //break up turn into turn and accelerate
    		Right_Search();
 8004960:	f7ff fcb4 	bl	80042cc <Right_Search>
    		break;
 8004964:	e770      	b.n	8004848 <Search+0x84>

    	case LEFT:
    		Left_Search();
 8004966:	f7ff fc35 	bl	80041d4 <Left_Search>
    		break;
 800496a:	e76d      	b.n	8004848 <Search+0x84>

    	case DEAD:
    		Dead_End();
 800496c:	f7ff fe7a 	bl	8004664 <Dead_End>
    		break;
 8004970:	e76a      	b.n	8004848 <Search+0x84>
 8004972:	bf00      	nop
 8004974:	40020c00 	.word	0x40020c00
 8004978:	200042d8 	.word	0x200042d8
 800497c:	200000e8 	.word	0x200000e8
 8004980:	200020e4 	.word	0x200020e4
 8004984:	2000309c 	.word	0x2000309c
 8004988:	200010e0 	.word	0x200010e0
 800498c:	20000000 	.word	0x20000000
 8004990:	20002088 	.word	0x20002088
 8004994:	200042d4 	.word	0x200042d4
 8004998:	200042fc 	.word	0x200042fc
 800499c:	200020e8 	.word	0x200020e8
 80049a0:	20000004 	.word	0x20000004
 80049a4:	200050f8 	.word	0x200050f8
 80049a8:	20003160 	.word	0x20003160
 80049ac:	200030b4 	.word	0x200030b4
 80049b0:	200000e4 	.word	0x200000e4
 80049b4:	200043a0 	.word	0x200043a0
 80049b8:	2000439c 	.word	0x2000439c
 80049bc:	20004398 	.word	0x20004398
 80049c0:	2000108c 	.word	0x2000108c
 80049c4:	200031d0 	.word	0x200031d0
 80049c8:	20003164 	.word	0x20003164
 80049cc:	200030a0 	.word	0x200030a0
 80049d0:	200032d0 	.word	0x200032d0
 80049d4:	200032d4 	.word	0x200032d4
 80049d8:	200020dc 	.word	0x200020dc
 80049dc:	200020f0 	.word	0x200020f0
 80049e0:	200020e0 	.word	0x200020e0

080049e4 <Forward_Spd>:
}

Stop();
}

void Forward_Spd(int num, char n_state) {
 80049e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049e8:	4605      	mov	r5, r0
Set_Right(FWD_R - m_correction, FORWARD);
l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
r_count = __HAL_TIM_GET_COUNTER(&htim4);
lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
renc_diff = r_count - prev_r_count;
} while (lenc_diff < F_LENC2*num/8 && renc_diff < F_RENC2*num/8);
 80049ea:	f240 26b7 	movw	r6, #695	; 0x2b7
}

Stop();
}

void Forward_Spd(int num, char n_state) {
 80049ee:	b085      	sub	sp, #20

int l_base_speed = 300; //FWD_L+num*30;
int r_base_speed = 300; //FWD_R+num*30; //500 is max so far


Set_Left(FWD_L, FORWARD); //start slow
 80049f0:	2101      	movs	r1, #1
 80049f2:	2078      	movs	r0, #120	; 0x78
Set_Right(FWD_R - m_correction, FORWARD);
l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
r_count = __HAL_TIM_GET_COUNTER(&htim4);
lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
renc_diff = r_count - prev_r_count;
} while (lenc_diff < F_LENC2*num/8 && renc_diff < F_RENC2*num/8);
 80049f4:	436e      	muls	r6, r5
 80049f6:	2708      	movs	r7, #8

int l_base_speed = 300; //FWD_L+num*30;
int r_base_speed = 300; //FWD_R+num*30; //500 is max so far


Set_Left(FWD_L, FORWARD); //start slow
 80049f8:	f7ff fad4 	bl	8003fa4 <Set_Left>
Set_Right(FWD_R, FORWARD);
 80049fc:	2101      	movs	r1, #1
 80049fe:	2087      	movs	r0, #135	; 0x87
 8004a00:	f7ff faf8 	bl	8003ff4 <Set_Right>

do {
Get_IR(TRUE, TRUE);
m_correction = Motor_Correction(dif_lf, dif_rf, dif_l, dif_r, TRUE);
 8004a04:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 8004be0 <Forward_Spd+0x1fc>
Set_Right(FWD_R - m_correction, FORWARD);
l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
r_count = __HAL_TIM_GET_COUNTER(&htim4);
lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
renc_diff = r_count - prev_r_count;
} while (lenc_diff < F_LENC2*num/8 && renc_diff < F_RENC2*num/8);
 8004a08:	fb96 f7f7 	sdiv	r7, r6, r7

Set_Left(FWD_L, FORWARD); //start slow
Set_Right(FWD_R, FORWARD);

do {
Get_IR(TRUE, TRUE);
 8004a0c:	2101      	movs	r1, #1
m_correction = Motor_Correction(dif_lf, dif_rf, dif_l, dif_r, TRUE);
 8004a0e:	4c6b      	ldr	r4, [pc, #428]	; (8004bbc <Forward_Spd+0x1d8>)
 8004a10:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 8004be4 <Forward_Spd+0x200>

Set_Left(FWD_L, FORWARD); //start slow
Set_Right(FWD_R, FORWARD);

do {
Get_IR(TRUE, TRUE);
 8004a14:	4608      	mov	r0, r1
m_correction = Motor_Correction(dif_lf, dif_rf, dif_l, dif_r, TRUE);
 8004a16:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 8004be8 <Forward_Spd+0x204>

Set_Left(FWD_L, FORWARD); //start slow
Set_Right(FWD_R, FORWARD);

do {
Get_IR(TRUE, TRUE);
 8004a1a:	f7fe fff3 	bl	8003a04 <Get_IR>
m_correction = Motor_Correction(dif_lf, dif_rf, dif_l, dif_r, TRUE);
 8004a1e:	2301      	movs	r3, #1
 8004a20:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8004bec <Forward_Spd+0x208>
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	f8db 2000 	ldr.w	r2, [fp]
 8004a2a:	f8d9 3000 	ldr.w	r3, [r9]
 8004a2e:	f8da 1000 	ldr.w	r1, [sl]
 8004a32:	6820      	ldr	r0, [r4, #0]
 8004a34:	f7fe f976 	bl	8002d24 <Motor_Correction>
Set_Left(FWD_L + m_correction, FORWARD);
 8004a38:	2101      	movs	r1, #1
Set_Left(FWD_L, FORWARD); //start slow
Set_Right(FWD_R, FORWARD);

do {
Get_IR(TRUE, TRUE);
m_correction = Motor_Correction(dif_lf, dif_rf, dif_l, dif_r, TRUE);
 8004a3a:	f8c8 0000 	str.w	r0, [r8]
Set_Left(FWD_L + m_correction, FORWARD);
 8004a3e:	3078      	adds	r0, #120	; 0x78
 8004a40:	f7ff fab0 	bl	8003fa4 <Set_Left>
Set_Right(FWD_R - m_correction, FORWARD);
 8004a44:	f8d8 0000 	ldr.w	r0, [r8]
 8004a48:	2101      	movs	r1, #1
 8004a4a:	f1c0 0087 	rsb	r0, r0, #135	; 0x87
 8004a4e:	f7ff fad1 	bl	8003ff4 <Set_Right>
l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
 8004a52:	4b5b      	ldr	r3, [pc, #364]	; (8004bc0 <Forward_Spd+0x1dc>)
r_count = __HAL_TIM_GET_COUNTER(&htim4);
 8004a54:	485b      	ldr	r0, [pc, #364]	; (8004bc4 <Forward_Spd+0x1e0>)
do {
Get_IR(TRUE, TRUE);
m_correction = Motor_Correction(dif_lf, dif_rf, dif_l, dif_r, TRUE);
Set_Left(FWD_L + m_correction, FORWARD);
Set_Right(FWD_R - m_correction, FORWARD);
l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	9403      	str	r4, [sp, #12]
 8004a5a:	4644      	mov	r4, r8
 8004a5c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004a5e:	4b5a      	ldr	r3, [pc, #360]	; (8004bc8 <Forward_Spd+0x1e4>)
 8004a60:	6019      	str	r1, [r3, #0]
r_count = __HAL_TIM_GET_COUNTER(&htim4);
 8004a62:	4b5a      	ldr	r3, [pc, #360]	; (8004bcc <Forward_Spd+0x1e8>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	6003      	str	r3, [r0, #0]
lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
 8004a6a:	4859      	ldr	r0, [pc, #356]	; (8004bd0 <Forward_Spd+0x1ec>)
 8004a6c:	6800      	ldr	r0, [r0, #0]
 8004a6e:	1a09      	subs	r1, r1, r0
 8004a70:	4858      	ldr	r0, [pc, #352]	; (8004bd4 <Forward_Spd+0x1f0>)
 8004a72:	6001      	str	r1, [r0, #0]
renc_diff = r_count - prev_r_count;
} while (lenc_diff < F_LENC2*num/8 && renc_diff < F_RENC2*num/8);
 8004a74:	42b9      	cmp	r1, r7
Set_Left(FWD_L + m_correction, FORWARD);
Set_Right(FWD_R - m_correction, FORWARD);
l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
r_count = __HAL_TIM_GET_COUNTER(&htim4);
lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
renc_diff = r_count - prev_r_count;
 8004a76:	4858      	ldr	r0, [pc, #352]	; (8004bd8 <Forward_Spd+0x1f4>)
 8004a78:	6800      	ldr	r0, [r0, #0]
 8004a7a:	eba3 0300 	sub.w	r3, r3, r0
 8004a7e:	4857      	ldr	r0, [pc, #348]	; (8004bdc <Forward_Spd+0x1f8>)
 8004a80:	6003      	str	r3, [r0, #0]
} while (lenc_diff < F_LENC2*num/8 && renc_diff < F_RENC2*num/8);
 8004a82:	d310      	bcc.n	8004aa6 <Forward_Spd+0xc2>


Set_Left(l_base_speed, FORWARD); //accellerate to top speed
 8004a84:	2101      	movs	r1, #1
 8004a86:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004a8a:	f7ff fa8b 	bl	8003fa4 <Set_Left>
Set_Right(r_base_speed, FORWARD);
 8004a8e:	2101      	movs	r1, #1
 8004a90:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004a94:	f7ff faae 	bl	8003ff4 <Set_Right>
Set_Left(l_base_speed + m_correction, FORWARD); //accelerate
Set_Right(r_base_speed - m_correction, FORWARD);
Send_Debug();
lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
renc_diff = r_count - prev_r_count;
} while (lenc_diff < F_LENC2*num*7/8 && renc_diff < F_RENC2*num*7/8);
 8004a98:	f241 3301 	movw	r3, #4865	; 0x1301
 8004a9c:	435d      	muls	r5, r3
 8004a9e:	2308      	movs	r3, #8
 8004aa0:	fb95 f5f3 	sdiv	r5, r5, r3
 8004aa4:	e004      	b.n	8004ab0 <Forward_Spd+0xcc>
Set_Right(FWD_R - m_correction, FORWARD);
l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
r_count = __HAL_TIM_GET_COUNTER(&htim4);
lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
renc_diff = r_count - prev_r_count;
} while (lenc_diff < F_LENC2*num/8 && renc_diff < F_RENC2*num/8);
 8004aa6:	42bb      	cmp	r3, r7
 8004aa8:	d3b0      	bcc.n	8004a0c <Forward_Spd+0x28>
 8004aaa:	e7eb      	b.n	8004a84 <Forward_Spd+0xa0>
Set_Left(l_base_speed + m_correction, FORWARD); //accelerate
Set_Right(r_base_speed - m_correction, FORWARD);
Send_Debug();
lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
renc_diff = r_count - prev_r_count;
} while (lenc_diff < F_LENC2*num*7/8 && renc_diff < F_RENC2*num*7/8);
 8004aac:	42ab      	cmp	r3, r5
 8004aae:	d23e      	bcs.n	8004b2e <Forward_Spd+0x14a>

Set_Left(l_base_speed, FORWARD); //accellerate to top speed
Set_Right(r_base_speed, FORWARD);

do {
Get_IR(TRUE, TRUE);
 8004ab0:	2101      	movs	r1, #1
l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
 8004ab2:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8004bc8 <Forward_Spd+0x1e4>
r_count = __HAL_TIM_GET_COUNTER(&htim4);
 8004ab6:	4f45      	ldr	r7, [pc, #276]	; (8004bcc <Forward_Spd+0x1e8>)

Set_Left(l_base_speed, FORWARD); //accellerate to top speed
Set_Right(r_base_speed, FORWARD);

do {
Get_IR(TRUE, TRUE);
 8004ab8:	4608      	mov	r0, r1
l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
r_count = __HAL_TIM_GET_COUNTER(&htim4);
 8004aba:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8004bc4 <Forward_Spd+0x1e0>

Set_Left(l_base_speed, FORWARD); //accellerate to top speed
Set_Right(r_base_speed, FORWARD);

do {
Get_IR(TRUE, TRUE);
 8004abe:	f7fe ffa1 	bl	8003a04 <Get_IR>
l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
 8004ac2:	4b3f      	ldr	r3, [pc, #252]	; (8004bc0 <Forward_Spd+0x1dc>)
r_count = __HAL_TIM_GET_COUNTER(&htim4);
m_correction = Motor_Correction(dif_lf, dif_rf, dif_l, dif_r, TRUE);
 8004ac4:	9803      	ldr	r0, [sp, #12]
Set_Left(l_base_speed, FORWARD); //accellerate to top speed
Set_Right(r_base_speed, FORWARD);

do {
Get_IR(TRUE, TRUE);
l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
 8004ac6:	681b      	ldr	r3, [r3, #0]
r_count = __HAL_TIM_GET_COUNTER(&htim4);
m_correction = Motor_Correction(dif_lf, dif_rf, dif_l, dif_r, TRUE);
 8004ac8:	f8db 2000 	ldr.w	r2, [fp]
Set_Left(l_base_speed, FORWARD); //accellerate to top speed
Set_Right(r_base_speed, FORWARD);

do {
Get_IR(TRUE, TRUE);
l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
r_count = __HAL_TIM_GET_COUNTER(&htim4);
m_correction = Motor_Correction(dif_lf, dif_rf, dif_l, dif_r, TRUE);
 8004ace:	f8da 1000 	ldr.w	r1, [sl]
Set_Left(l_base_speed, FORWARD); //accellerate to top speed
Set_Right(r_base_speed, FORWARD);

do {
Get_IR(TRUE, TRUE);
l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
 8004ad2:	f8c8 3000 	str.w	r3, [r8]
r_count = __HAL_TIM_GET_COUNTER(&htim4);
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	f8c9 3000 	str.w	r3, [r9]
m_correction = Motor_Correction(dif_lf, dif_rf, dif_l, dif_r, TRUE);
 8004ade:	2301      	movs	r3, #1
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	4b3f      	ldr	r3, [pc, #252]	; (8004be0 <Forward_Spd+0x1fc>)
 8004ae4:	6800      	ldr	r0, [r0, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f7fe f91c 	bl	8002d24 <Motor_Correction>
Set_Left(l_base_speed + m_correction, FORWARD); //accelerate
 8004aec:	2101      	movs	r1, #1

do {
Get_IR(TRUE, TRUE);
l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
r_count = __HAL_TIM_GET_COUNTER(&htim4);
m_correction = Motor_Correction(dif_lf, dif_rf, dif_l, dif_r, TRUE);
 8004aee:	6020      	str	r0, [r4, #0]
Set_Left(l_base_speed + m_correction, FORWARD); //accelerate
 8004af0:	f500 7096 	add.w	r0, r0, #300	; 0x12c
 8004af4:	f7ff fa56 	bl	8003fa4 <Set_Left>
Set_Right(r_base_speed - m_correction, FORWARD);
 8004af8:	6820      	ldr	r0, [r4, #0]
 8004afa:	2101      	movs	r1, #1
 8004afc:	f5c0 7096 	rsb	r0, r0, #300	; 0x12c
 8004b00:	f7ff fa78 	bl	8003ff4 <Set_Right>
Send_Debug();
 8004b04:	f7fe fa02 	bl	8002f0c <Send_Debug>
lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
 8004b08:	4b31      	ldr	r3, [pc, #196]	; (8004bd0 <Forward_Spd+0x1ec>)
 8004b0a:	f8d8 2000 	ldr.w	r2, [r8]
 8004b0e:	681b      	ldr	r3, [r3, #0]
renc_diff = r_count - prev_r_count;
 8004b10:	4931      	ldr	r1, [pc, #196]	; (8004bd8 <Forward_Spd+0x1f4>)
r_count = __HAL_TIM_GET_COUNTER(&htim4);
m_correction = Motor_Correction(dif_lf, dif_rf, dif_l, dif_r, TRUE);
Set_Left(l_base_speed + m_correction, FORWARD); //accelerate
Set_Right(r_base_speed - m_correction, FORWARD);
Send_Debug();
lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
 8004b12:	1ad2      	subs	r2, r2, r3
 8004b14:	4b2f      	ldr	r3, [pc, #188]	; (8004bd4 <Forward_Spd+0x1f0>)
renc_diff = r_count - prev_r_count;
 8004b16:	6809      	ldr	r1, [r1, #0]
r_count = __HAL_TIM_GET_COUNTER(&htim4);
m_correction = Motor_Correction(dif_lf, dif_rf, dif_l, dif_r, TRUE);
Set_Left(l_base_speed + m_correction, FORWARD); //accelerate
Set_Right(r_base_speed - m_correction, FORWARD);
Send_Debug();
lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
 8004b18:	601a      	str	r2, [r3, #0]
renc_diff = r_count - prev_r_count;
} while (lenc_diff < F_LENC2*num*7/8 && renc_diff < F_RENC2*num*7/8);
 8004b1a:	42aa      	cmp	r2, r5
m_correction = Motor_Correction(dif_lf, dif_rf, dif_l, dif_r, TRUE);
Set_Left(l_base_speed + m_correction, FORWARD); //accelerate
Set_Right(r_base_speed - m_correction, FORWARD);
Send_Debug();
lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
renc_diff = r_count - prev_r_count;
 8004b1c:	f8d9 3000 	ldr.w	r3, [r9]
 8004b20:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8004bc0 <Forward_Spd+0x1dc>
 8004b24:	eba3 0301 	sub.w	r3, r3, r1
 8004b28:	492c      	ldr	r1, [pc, #176]	; (8004bdc <Forward_Spd+0x1f8>)
 8004b2a:	600b      	str	r3, [r1, #0]
} while (lenc_diff < F_LENC2*num*7/8 && renc_diff < F_RENC2*num*7/8);
 8004b2c:	d3be      	bcc.n	8004aac <Forward_Spd+0xc8>

Set_Left(FWD_L, FORWARD); //decelerate
 8004b2e:	2101      	movs	r1, #1
 8004b30:	2078      	movs	r0, #120	; 0x78
m_correction = Motor_Correction(dif_lf, dif_rf, dif_l, dif_r, TRUE);
Set_Left(FWD_L + m_correction, FORWARD); //decelerate
Set_Right(FWD_R - m_correction, FORWARD);
l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
r_count = __HAL_TIM_GET_COUNTER(&htim4);
lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
 8004b32:	4d27      	ldr	r5, [pc, #156]	; (8004bd0 <Forward_Spd+0x1ec>)
Send_Debug();
lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
renc_diff = r_count - prev_r_count;
} while (lenc_diff < F_LENC2*num*7/8 && renc_diff < F_RENC2*num*7/8);

Set_Left(FWD_L, FORWARD); //decelerate
 8004b34:	f7ff fa36 	bl	8003fa4 <Set_Left>
Set_Right(FWD_R, FORWARD);
 8004b38:	2101      	movs	r1, #1
 8004b3a:	2087      	movs	r0, #135	; 0x87
 8004b3c:	f7ff fa5a 	bl	8003ff4 <Set_Right>

do {
Get_IR(TRUE, TRUE);
 8004b40:	2101      	movs	r1, #1
 8004b42:	4608      	mov	r0, r1
 8004b44:	f7fe ff5e 	bl	8003a04 <Get_IR>
m_correction = Motor_Correction(dif_lf, dif_rf, dif_l, dif_r, TRUE);
 8004b48:	2301      	movs	r3, #1
 8004b4a:	9803      	ldr	r0, [sp, #12]
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	4b24      	ldr	r3, [pc, #144]	; (8004be0 <Forward_Spd+0x1fc>)
 8004b50:	f8db 2000 	ldr.w	r2, [fp]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f8da 1000 	ldr.w	r1, [sl]
 8004b5a:	6800      	ldr	r0, [r0, #0]
 8004b5c:	f7fe f8e2 	bl	8002d24 <Motor_Correction>
Set_Left(FWD_L + m_correction, FORWARD); //decelerate
 8004b60:	2101      	movs	r1, #1
Set_Left(FWD_L, FORWARD); //decelerate
Set_Right(FWD_R, FORWARD);

do {
Get_IR(TRUE, TRUE);
m_correction = Motor_Correction(dif_lf, dif_rf, dif_l, dif_r, TRUE);
 8004b62:	6020      	str	r0, [r4, #0]
Set_Left(FWD_L + m_correction, FORWARD); //decelerate
 8004b64:	3078      	adds	r0, #120	; 0x78
 8004b66:	f7ff fa1d 	bl	8003fa4 <Set_Left>
Set_Right(FWD_R - m_correction, FORWARD);
 8004b6a:	6820      	ldr	r0, [r4, #0]
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	f1c0 0087 	rsb	r0, r0, #135	; 0x87
 8004b72:	f7ff fa3f 	bl	8003ff4 <Set_Right>
l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
 8004b76:	f8d9 3000 	ldr.w	r3, [r9]
r_count = __HAL_TIM_GET_COUNTER(&htim4);
lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
 8004b7a:	6829      	ldr	r1, [r5, #0]
do {
Get_IR(TRUE, TRUE);
m_correction = Motor_Correction(dif_lf, dif_rf, dif_l, dif_r, TRUE);
Set_Left(FWD_L + m_correction, FORWARD); //decelerate
Set_Right(FWD_R - m_correction, FORWARD);
l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
 8004b7c:	6a58      	ldr	r0, [r3, #36]	; 0x24
r_count = __HAL_TIM_GET_COUNTER(&htim4);
 8004b7e:	683b      	ldr	r3, [r7, #0]
lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
 8004b80:	1a41      	subs	r1, r0, r1
renc_diff = r_count - prev_r_count;
 8004b82:	f8df c058 	ldr.w	ip, [pc, #88]	; 8004bdc <Forward_Spd+0x1f8>
Get_IR(TRUE, TRUE);
m_correction = Motor_Correction(dif_lf, dif_rf, dif_l, dif_r, TRUE);
Set_Left(FWD_L + m_correction, FORWARD); //decelerate
Set_Right(FWD_R - m_correction, FORWARD);
l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
r_count = __HAL_TIM_GET_COUNTER(&htim4);
 8004b86:	f8d3 e024 	ldr.w	lr, [r3, #36]	; 0x24
 8004b8a:	4b0e      	ldr	r3, [pc, #56]	; (8004bc4 <Forward_Spd+0x1e0>)
lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
renc_diff = r_count - prev_r_count;
} while (lenc_diff < F_LENC2*num && renc_diff < F_RENC2*num);
 8004b8c:	42b1      	cmp	r1, r6
do {
Get_IR(TRUE, TRUE);
m_correction = Motor_Correction(dif_lf, dif_rf, dif_l, dif_r, TRUE);
Set_Left(FWD_L + m_correction, FORWARD); //decelerate
Set_Right(FWD_R - m_correction, FORWARD);
l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
 8004b8e:	f8c8 0000 	str.w	r0, [r8]
r_count = __HAL_TIM_GET_COUNTER(&htim4);
 8004b92:	f8c3 e000 	str.w	lr, [r3]
lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
 8004b96:	4b0f      	ldr	r3, [pc, #60]	; (8004bd4 <Forward_Spd+0x1f0>)
 8004b98:	6019      	str	r1, [r3, #0]
renc_diff = r_count - prev_r_count;
 8004b9a:	4b0f      	ldr	r3, [pc, #60]	; (8004bd8 <Forward_Spd+0x1f4>)
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	ebc2 020e 	rsb	r2, r2, lr
 8004ba2:	f8cc 2000 	str.w	r2, [ip]
} while (lenc_diff < F_LENC2*num && renc_diff < F_RENC2*num);
 8004ba6:	d306      	bcc.n	8004bb6 <Forward_Spd+0x1d2>

prev_l_count = l_count;
 8004ba8:	4a09      	ldr	r2, [pc, #36]	; (8004bd0 <Forward_Spd+0x1ec>)
prev_r_count = r_count;
 8004baa:	f8c3 e000 	str.w	lr, [r3]
r_count = __HAL_TIM_GET_COUNTER(&htim4);
lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
renc_diff = r_count - prev_r_count;
} while (lenc_diff < F_LENC2*num && renc_diff < F_RENC2*num);

prev_l_count = l_count;
 8004bae:	6010      	str	r0, [r2, #0]
prev_r_count = r_count;

}
 8004bb0:	b005      	add	sp, #20
 8004bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
Set_Right(FWD_R - m_correction, FORWARD);
l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
r_count = __HAL_TIM_GET_COUNTER(&htim4);
lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
renc_diff = r_count - prev_r_count;
} while (lenc_diff < F_LENC2*num && renc_diff < F_RENC2*num);
 8004bb6:	42b2      	cmp	r2, r6
 8004bb8:	d3c2      	bcc.n	8004b40 <Forward_Spd+0x15c>
 8004bba:	e7f5      	b.n	8004ba8 <Forward_Spd+0x1c4>
 8004bbc:	200042fc 	.word	0x200042fc
 8004bc0:	200050f8 	.word	0x200050f8
 8004bc4:	20003160 	.word	0x20003160
 8004bc8:	200000e4 	.word	0x200000e4
 8004bcc:	200043a0 	.word	0x200043a0
 8004bd0:	2000439c 	.word	0x2000439c
 8004bd4:	200030b4 	.word	0x200030b4
 8004bd8:	20004398 	.word	0x20004398
 8004bdc:	2000108c 	.word	0x2000108c
 8004be0:	200020e4 	.word	0x200020e4
 8004be4:	20002088 	.word	0x20002088
 8004be8:	200042d4 	.word	0x200042d4
 8004bec:	200020e8 	.word	0x200020e8

08004bf0 <Left_Spd>:
prev_l_count = l_count;
prev_r_count = r_count;

}

void Left_Spd(int num, char n_state) {
 8004bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

Set_Left(LEFT_L_SR1, FORWARD); //accelerate
 8004bf4:	2101      	movs	r1, #1
prev_l_count = l_count;
prev_r_count = r_count;

}

void Left_Spd(int num, char n_state) {
 8004bf6:	4604      	mov	r4, r0

Set_Left(LEFT_L_SR1, FORWARD); //accelerate
 8004bf8:	2064      	movs	r0, #100	; 0x64
do {
	l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
	r_count = __HAL_TIM_GET_COUNTER(&htim4);
	lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
	renc_diff = r_count - prev_r_count;
} while (lenc_diff < LEFT_LENC_SR1*num && renc_diff < LEFT_RENC_SR1*num);
 8004bfa:	26c8      	movs	r6, #200	; 0xc8

}

void Left_Spd(int num, char n_state) {

Set_Left(LEFT_L_SR1, FORWARD); //accelerate
 8004bfc:	f7ff f9d2 	bl	8003fa4 <Set_Left>
Set_Right(LEFT_R_SR1, FORWARD);
 8004c00:	20c8      	movs	r0, #200	; 0xc8
 8004c02:	2101      	movs	r1, #1
do {
	l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
	r_count = __HAL_TIM_GET_COUNTER(&htim4);
	lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
	renc_diff = r_count - prev_r_count;
} while (lenc_diff < LEFT_LENC_SR1*num && renc_diff < LEFT_RENC_SR1*num);
 8004c04:	4366      	muls	r6, r4
}

void Left_Spd(int num, char n_state) {

Set_Left(LEFT_L_SR1, FORWARD); //accelerate
Set_Right(LEFT_R_SR1, FORWARD);
 8004c06:	f7ff f9f5 	bl	8003ff4 <Set_Right>

do {
	l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
 8004c0a:	4b14      	ldr	r3, [pc, #80]	; (8004c5c <Left_Spd+0x6c>)
	r_count = __HAL_TIM_GET_COUNTER(&htim4);
	lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
 8004c0c:	4a14      	ldr	r2, [pc, #80]	; (8004c60 <Left_Spd+0x70>)
	renc_diff = r_count - prev_r_count;
} while (lenc_diff < LEFT_LENC_SR1*num && renc_diff < LEFT_RENC_SR1*num);
 8004c0e:	f44f 70c8 	mov.w	r0, #400	; 0x190

Set_Left(LEFT_L_SR1, FORWARD); //accelerate
Set_Right(LEFT_R_SR1, FORWARD);

do {
	l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
 8004c12:	681f      	ldr	r7, [r3, #0]
	r_count = __HAL_TIM_GET_COUNTER(&htim4);
 8004c14:	4b13      	ldr	r3, [pc, #76]	; (8004c64 <Left_Spd+0x74>)
	lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
	renc_diff = r_count - prev_r_count;
} while (lenc_diff < LEFT_LENC_SR1*num && renc_diff < LEFT_RENC_SR1*num);
 8004c16:	4360      	muls	r0, r4
Set_Right(LEFT_R_SR1, FORWARD);

do {
	l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
	r_count = __HAL_TIM_GET_COUNTER(&htim4);
	lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
 8004c18:	f8d2 c000 	ldr.w	ip, [r2]
 8004c1c:	4691      	mov	r9, r2
Set_Left(LEFT_L_SR1, FORWARD); //accelerate
Set_Right(LEFT_R_SR1, FORWARD);

do {
	l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
	r_count = __HAL_TIM_GET_COUNTER(&htim4);
 8004c1e:	f8d3 e000 	ldr.w	lr, [r3]
	lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
	renc_diff = r_count - prev_r_count;
 8004c22:	4b11      	ldr	r3, [pc, #68]	; (8004c68 <Left_Spd+0x78>)
 8004c24:	f8d3 8000 	ldr.w	r8, [r3]
 8004c28:	461d      	mov	r5, r3

Set_Left(LEFT_L_SR1, FORWARD); //accelerate
Set_Right(LEFT_R_SR1, FORWARD);

do {
	l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
 8004c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
	r_count = __HAL_TIM_GET_COUNTER(&htim4);
 8004c2c:	f8de 3024 	ldr.w	r3, [lr, #36]	; 0x24
	lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
 8004c30:	ebcc 0402 	rsb	r4, ip, r2
	renc_diff = r_count - prev_r_count;
 8004c34:	ebc8 0103 	rsb	r1, r8, r3
} while (lenc_diff < LEFT_LENC_SR1*num && renc_diff < LEFT_RENC_SR1*num);
 8004c38:	42b4      	cmp	r4, r6
 8004c3a:	d30c      	bcc.n	8004c56 <Left_Spd+0x66>
 8004c3c:	480b      	ldr	r0, [pc, #44]	; (8004c6c <Left_Spd+0x7c>)

prev_l_count = l_count;
 8004c3e:	f8c9 2000 	str.w	r2, [r9]
 8004c42:	6002      	str	r2, [r0, #0]
 8004c44:	480a      	ldr	r0, [pc, #40]	; (8004c70 <Left_Spd+0x80>)
prev_r_count = r_count;
 8004c46:	602b      	str	r3, [r5, #0]
 8004c48:	6003      	str	r3, [r0, #0]
 8004c4a:	480a      	ldr	r0, [pc, #40]	; (8004c74 <Left_Spd+0x84>)
 8004c4c:	6004      	str	r4, [r0, #0]
 8004c4e:	480a      	ldr	r0, [pc, #40]	; (8004c78 <Left_Spd+0x88>)
 8004c50:	6001      	str	r1, [r0, #0]

}
 8004c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
do {
	l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
	r_count = __HAL_TIM_GET_COUNTER(&htim4);
	lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
	renc_diff = r_count - prev_r_count;
} while (lenc_diff < LEFT_LENC_SR1*num && renc_diff < LEFT_RENC_SR1*num);
 8004c56:	4288      	cmp	r0, r1
 8004c58:	d8e7      	bhi.n	8004c2a <Left_Spd+0x3a>
 8004c5a:	e7ef      	b.n	8004c3c <Left_Spd+0x4c>
 8004c5c:	200050f8 	.word	0x200050f8
 8004c60:	2000439c 	.word	0x2000439c
 8004c64:	200043a0 	.word	0x200043a0
 8004c68:	20004398 	.word	0x20004398
 8004c6c:	200000e4 	.word	0x200000e4
 8004c70:	20003160 	.word	0x20003160
 8004c74:	200030b4 	.word	0x200030b4
 8004c78:	2000108c 	.word	0x2000108c

08004c7c <Right_Spd>:
prev_l_count = l_count;
prev_r_count = r_count;

}

void Right_Spd(int num, char n_state) {
 8004c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

Set_Left(RIGHT_L_SR1, FORWARD); //accelerate
 8004c80:	2101      	movs	r1, #1
prev_l_count = l_count;
prev_r_count = r_count;

}

void Right_Spd(int num, char n_state) {
 8004c82:	4606      	mov	r6, r0

Set_Left(RIGHT_L_SR1, FORWARD); //accelerate
 8004c84:	f44f 70a5 	mov.w	r0, #330	; 0x14a
Set_Right(RIGHT_R_SR1, FORWARD);

do {
l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
r_count = __HAL_TIM_GET_COUNTER(&htim4);
lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
 8004c88:	4d23      	ldr	r5, [pc, #140]	; (8004d18 <Right_Spd+0x9c>)

}

void Right_Spd(int num, char n_state) {

Set_Left(RIGHT_L_SR1, FORWARD); //accelerate
 8004c8a:	f7ff f98b 	bl	8003fa4 <Set_Left>
Set_Right(RIGHT_R_SR1, FORWARD);
 8004c8e:	2101      	movs	r1, #1
 8004c90:	2050      	movs	r0, #80	; 0x50

do {
l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
r_count = __HAL_TIM_GET_COUNTER(&htim4);
lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
renc_diff = r_count - prev_r_count;
 8004c92:	4c22      	ldr	r4, [pc, #136]	; (8004d1c <Right_Spd+0xa0>)
}

void Right_Spd(int num, char n_state) {

Set_Left(RIGHT_L_SR1, FORWARD); //accelerate
Set_Right(RIGHT_R_SR1, FORWARD);
 8004c94:	f7ff f9ae 	bl	8003ff4 <Set_Right>

do {
l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
 8004c98:	4b21      	ldr	r3, [pc, #132]	; (8004d20 <Right_Spd+0xa4>)
r_count = __HAL_TIM_GET_COUNTER(&htim4);
lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
renc_diff = r_count - prev_r_count;
} while (lenc_diff < RIGHT_LENC_SR1*num && renc_diff < RIGHT_RENC_SR1*num);
 8004c9a:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8004c9e:	f44f 7e96 	mov.w	lr, #300	; 0x12c

Set_Left(RIGHT_L_SR1, FORWARD); //accelerate
Set_Right(RIGHT_R_SR1, FORWARD);

do {
l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
 8004ca2:	f8d3 c000 	ldr.w	ip, [r3]
r_count = __HAL_TIM_GET_COUNTER(&htim4);
 8004ca6:	4b1f      	ldr	r3, [pc, #124]	; (8004d24 <Right_Spd+0xa8>)
lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
renc_diff = r_count - prev_r_count;
} while (lenc_diff < RIGHT_LENC_SR1*num && renc_diff < RIGHT_RENC_SR1*num);
 8004ca8:	4371      	muls	r1, r6
Set_Right(RIGHT_R_SR1, FORWARD);

do {
l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
r_count = __HAL_TIM_GET_COUNTER(&htim4);
lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
 8004caa:	f8d5 9000 	ldr.w	r9, [r5]
renc_diff = r_count - prev_r_count;
} while (lenc_diff < RIGHT_LENC_SR1*num && renc_diff < RIGHT_RENC_SR1*num);
 8004cae:	fb0e fe06 	mul.w	lr, lr, r6
Set_Left(RIGHT_L_SR1, FORWARD); //accelerate
Set_Right(RIGHT_R_SR1, FORWARD);

do {
l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
r_count = __HAL_TIM_GET_COUNTER(&htim4);
 8004cb2:	f8d3 8000 	ldr.w	r8, [r3]
lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
renc_diff = r_count - prev_r_count;
 8004cb6:	f8d4 a000 	ldr.w	sl, [r4]

Set_Left(RIGHT_L_SR1, FORWARD); //accelerate
Set_Right(RIGHT_R_SR1, FORWARD);

do {
l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
 8004cba:	f8dc 7024 	ldr.w	r7, [ip, #36]	; 0x24
r_count = __HAL_TIM_GET_COUNTER(&htim4);
 8004cbe:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
 8004cc2:	ebc9 0207 	rsb	r2, r9, r7
renc_diff = r_count - prev_r_count;
 8004cc6:	ebca 0300 	rsb	r3, sl, r0
} while (lenc_diff < RIGHT_LENC_SR1*num && renc_diff < RIGHT_RENC_SR1*num);
 8004cca:	428a      	cmp	r2, r1
 8004ccc:	d30e      	bcc.n	8004cec <Right_Spd+0x70>
 8004cce:	f8df e068 	ldr.w	lr, [pc, #104]	; 8004d38 <Right_Spd+0xbc>

if (lenc_diff > RIGHT_LENC_SR1*num) {
 8004cd2:	428a      	cmp	r2, r1
 8004cd4:	f8ce 7000 	str.w	r7, [lr]
 8004cd8:	4f13      	ldr	r7, [pc, #76]	; (8004d28 <Right_Spd+0xac>)
 8004cda:	6038      	str	r0, [r7, #0]
 8004cdc:	4813      	ldr	r0, [pc, #76]	; (8004d2c <Right_Spd+0xb0>)
 8004cde:	6002      	str	r2, [r0, #0]
 8004ce0:	4813      	ldr	r0, [pc, #76]	; (8004d30 <Right_Spd+0xb4>)
 8004ce2:	6003      	str	r3, [r0, #0]
 8004ce4:	d905      	bls.n	8004cf2 <Right_Spd+0x76>
	HAL_GPIO_WritePin(GPIOD, LED2_Pin, ON);
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	2110      	movs	r1, #16
 8004cea:	e009      	b.n	8004d00 <Right_Spd+0x84>
do {
l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
r_count = __HAL_TIM_GET_COUNTER(&htim4);
lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
renc_diff = r_count - prev_r_count;
} while (lenc_diff < RIGHT_LENC_SR1*num && renc_diff < RIGHT_RENC_SR1*num);
 8004cec:	459e      	cmp	lr, r3
 8004cee:	d8e4      	bhi.n	8004cba <Right_Spd+0x3e>
 8004cf0:	e7ed      	b.n	8004cce <Right_Spd+0x52>

if (lenc_diff > RIGHT_LENC_SR1*num) {
	HAL_GPIO_WritePin(GPIOD, LED2_Pin, ON);
}

else if (renc_diff > RIGHT_RENC_SR1*num) {
 8004cf2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004cf6:	4370      	muls	r0, r6
 8004cf8:	4283      	cmp	r3, r0
 8004cfa:	d904      	bls.n	8004d06 <Right_Spd+0x8a>
	HAL_GPIO_WritePin(GPIOD, LED3_Pin, ON);
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	2108      	movs	r1, #8
 8004d00:	480c      	ldr	r0, [pc, #48]	; (8004d34 <Right_Spd+0xb8>)
 8004d02:	f7fc fa5f 	bl	80011c4 <HAL_GPIO_WritePin>
}

prev_l_count = l_count;
 8004d06:	4b0c      	ldr	r3, [pc, #48]	; (8004d38 <Right_Spd+0xbc>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	602b      	str	r3, [r5, #0]
prev_r_count = r_count;
 8004d0c:	4b06      	ldr	r3, [pc, #24]	; (8004d28 <Right_Spd+0xac>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6023      	str	r3, [r4, #0]
 8004d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d16:	bf00      	nop
 8004d18:	2000439c 	.word	0x2000439c
 8004d1c:	20004398 	.word	0x20004398
 8004d20:	200050f8 	.word	0x200050f8
 8004d24:	200043a0 	.word	0x200043a0
 8004d28:	20003160 	.word	0x20003160
 8004d2c:	200030b4 	.word	0x200030b4
 8004d30:	2000108c 	.word	0x2000108c
 8004d34:	40020c00 	.word	0x40020c00
 8004d38:	200000e4 	.word	0x200000e4

08004d3c <Speed_Run>:

Transmit(new_path);
}


void Speed_Run(char path[]) {
 8004d3c:	b570      	push	{r4, r5, r6, lr}

//take optimal path and convert to fast straightaways
int counter = 0;
char ps =  path[counter];
counter++;
char ns = path[counter];
 8004d3e:	4605      	mov	r5, r0

void Speed_Run(char path[]) {

//take optimal path and convert to fast straightaways
int counter = 0;
char ps =  path[counter];
 8004d40:	7806      	ldrb	r6, [r0, #0]
counter++;
char ns = path[counter];
//l_count and r_count

HAL_GPIO_WritePin(GPIOD, LED5_Pin, ON); //Turn on LEDs to indicate it is searching
 8004d42:	2201      	movs	r2, #1
 8004d44:	2102      	movs	r1, #2
 8004d46:	483c      	ldr	r0, [pc, #240]	; (8004e38 <Speed_Run+0xfc>)

//take optimal path and convert to fast straightaways
int counter = 0;
char ps =  path[counter];
counter++;
char ns = path[counter];
 8004d48:	f815 4f01 	ldrb.w	r4, [r5, #1]!
//l_count and r_count

HAL_GPIO_WritePin(GPIOD, LED5_Pin, ON); //Turn on LEDs to indicate it is searching
 8004d4c:	f7fc fa3a 	bl	80011c4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOD, LED2_Pin, OFF);
 8004d50:	2200      	movs	r2, #0
 8004d52:	2110      	movs	r1, #16
 8004d54:	4838      	ldr	r0, [pc, #224]	; (8004e38 <Speed_Run+0xfc>)
 8004d56:	f7fc fa35 	bl	80011c4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOD, LED4_Pin, OFF);
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	2104      	movs	r1, #4
 8004d5e:	4836      	ldr	r0, [pc, #216]	; (8004e38 <Speed_Run+0xfc>)
 8004d60:	f7fc fa30 	bl	80011c4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOD, LED3_Pin, OFF);
 8004d64:	2200      	movs	r2, #0
 8004d66:	2108      	movs	r1, #8
 8004d68:	4833      	ldr	r0, [pc, #204]	; (8004e38 <Speed_Run+0xfc>)
 8004d6a:	f7fc fa2b 	bl	80011c4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOD, LED1_Pin, OFF);
 8004d6e:	4832      	ldr	r0, [pc, #200]	; (8004e38 <Speed_Run+0xfc>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	2120      	movs	r1, #32
 8004d74:	f7fc fa26 	bl	80011c4 <HAL_GPIO_WritePin>

Clear_Buffers();
 8004d78:	f7fe f83c 	bl	8002df4 <Clear_Buffers>
Reset_Counters();
 8004d7c:	f7fe f806 	bl	8002d8c <Reset_Counters>

HAL_Delay(1000); //delay before start to get finger out of the way
 8004d80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d84:	f7fb faf4 	bl	8000370 <HAL_Delay>

while (ps != STOP) {
 8004d88:	2e73      	cmp	r6, #115	; 0x73
 8004d8a:	d051      	beq.n	8004e30 <Speed_Run+0xf4>

switch (ps) {
 8004d8c:	3e62      	subs	r6, #98	; 0x62
 8004d8e:	2e14      	cmp	r6, #20
 8004d90:	d84a      	bhi.n	8004e28 <Speed_Run+0xec>
 8004d92:	e8df f006 	tbb	[pc, r6]
 8004d96:	1e1b      	.short	0x1e1b
 8004d98:	2a492421 	.word	0x2a492421
 8004d9c:	3633302d 	.word	0x3633302d
 8004da0:	3f3c390b 	.word	0x3f3c390b
 8004da4:	490e4542 	.word	0x490e4542
 8004da8:	1611      	.short	0x1611
 8004daa:	27          	.byte	0x27
 8004dab:	00          	.byte	0x00

case L90:
	Left_Spd(1, ns);
 8004dac:	4621      	mov	r1, r4
 8004dae:	2001      	movs	r0, #1
 8004db0:	e004      	b.n	8004dbc <Speed_Run+0x80>
	break;
case R90:
	Right_Spd(1, ns);
 8004db2:	4621      	mov	r1, r4
 8004db4:	2001      	movs	r0, #1
 8004db6:	e006      	b.n	8004dc6 <Speed_Run+0x8a>
	break;
case L180:
	Left_Spd(2, ns);
 8004db8:	4621      	mov	r1, r4
 8004dba:	2002      	movs	r0, #2
 8004dbc:	f7ff ff18 	bl	8004bf0 <Left_Spd>
	break;
 8004dc0:	e032      	b.n	8004e28 <Speed_Run+0xec>
case R180:
	Right_Spd(2, ns);
 8004dc2:	4621      	mov	r1, r4
 8004dc4:	2002      	movs	r0, #2
 8004dc6:	f7ff ff59 	bl	8004c7c <Right_Spd>
	break;
 8004dca:	e02d      	b.n	8004e28 <Speed_Run+0xec>
case FWD1:
	Forward_Spd(1, ns);
 8004dcc:	4621      	mov	r1, r4
 8004dce:	2001      	movs	r0, #1
 8004dd0:	e028      	b.n	8004e24 <Speed_Run+0xe8>
	break;
case FWD2:
	Forward_Spd(2, ns);
 8004dd2:	4621      	mov	r1, r4
 8004dd4:	2002      	movs	r0, #2
 8004dd6:	e025      	b.n	8004e24 <Speed_Run+0xe8>
	break;
case FWD3:
	Forward_Spd(3, ns);
 8004dd8:	4621      	mov	r1, r4
 8004dda:	2003      	movs	r0, #3
 8004ddc:	e022      	b.n	8004e24 <Speed_Run+0xe8>
	break;
case FWD4:
	Forward_Spd(4, ns);
 8004dde:	4621      	mov	r1, r4
 8004de0:	2004      	movs	r0, #4
 8004de2:	e01f      	b.n	8004e24 <Speed_Run+0xe8>
	break;
case FWD5:
	Forward_Spd(5, ns);
 8004de4:	4621      	mov	r1, r4
 8004de6:	2005      	movs	r0, #5
 8004de8:	e01c      	b.n	8004e24 <Speed_Run+0xe8>
	break;
case FWD6:
	Forward_Spd(6, ns);
 8004dea:	4621      	mov	r1, r4
 8004dec:	2006      	movs	r0, #6
 8004dee:	e019      	b.n	8004e24 <Speed_Run+0xe8>
	break;
case FWD7:
	Forward_Spd(7, ns);
 8004df0:	4621      	mov	r1, r4
 8004df2:	2007      	movs	r0, #7
 8004df4:	e016      	b.n	8004e24 <Speed_Run+0xe8>
	break;
case FWD8:
	Forward_Spd(8, ns);
 8004df6:	4621      	mov	r1, r4
 8004df8:	2008      	movs	r0, #8
 8004dfa:	e013      	b.n	8004e24 <Speed_Run+0xe8>
	break;
case FWD9:
	Forward_Spd(9, ns);
 8004dfc:	4621      	mov	r1, r4
 8004dfe:	2009      	movs	r0, #9
 8004e00:	e010      	b.n	8004e24 <Speed_Run+0xe8>
	break;
case FWD10:
	Forward_Spd(10, ns);
 8004e02:	4621      	mov	r1, r4
 8004e04:	200a      	movs	r0, #10
 8004e06:	e00d      	b.n	8004e24 <Speed_Run+0xe8>
	break;
case FWD11:
	Forward_Spd(11, ns);
 8004e08:	4621      	mov	r1, r4
 8004e0a:	200b      	movs	r0, #11
 8004e0c:	e00a      	b.n	8004e24 <Speed_Run+0xe8>
	break;
case FWD12:
	Forward_Spd(12, ns);
 8004e0e:	4621      	mov	r1, r4
 8004e10:	200c      	movs	r0, #12
 8004e12:	e007      	b.n	8004e24 <Speed_Run+0xe8>
	break;
case FWD13:
	Forward_Spd(13, ns);
 8004e14:	4621      	mov	r1, r4
 8004e16:	200d      	movs	r0, #13
 8004e18:	e004      	b.n	8004e24 <Speed_Run+0xe8>
	break;
case FWD14:
	Forward_Spd(14, ns);
 8004e1a:	4621      	mov	r1, r4
 8004e1c:	200e      	movs	r0, #14
 8004e1e:	e001      	b.n	8004e24 <Speed_Run+0xe8>
	break;
case FWD15:
	Forward_Spd(15, ns);
 8004e20:	4621      	mov	r1, r4
 8004e22:	200f      	movs	r0, #15
 8004e24:	f7ff fdde 	bl	80049e4 <Forward_Spd>
	break;
}
counter++;
ps = ns;
 8004e28:	4626      	mov	r6, r4
ns = path[counter];
 8004e2a:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8004e2e:	e7ab      	b.n	8004d88 <Speed_Run+0x4c>
}

Stop();
}
 8004e30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
counter++;
ps = ns;
ns = path[counter];
}

Stop();
 8004e34:	f7ff bc98 	b.w	8004768 <Stop>
 8004e38:	40020c00 	.word	0x40020c00

08004e3c <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e3c:	4b2d      	ldr	r3, [pc, #180]	; (8004ef4 <SystemClock_Config+0xb8>)
 8004e3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e40:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000

return next;
}

void SystemClock_Config(void)
{
 8004e44:	b510      	push	{r4, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e46:	641a      	str	r2, [r3, #64]	; 0x40

return next;
}

void SystemClock_Config(void)
{
 8004e48:	b0b4      	sub	sp, #208	; 0xd0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004e4c:	2402      	movs	r4, #2

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004e4e:	4a2a      	ldr	r2, [pc, #168]	; (8004ef8 <SystemClock_Config+0xbc>)
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 108;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004e50:	a807      	add	r0, sp, #28
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	9b00      	ldr	r3, [sp, #0]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004e5a:	6813      	ldr	r3, [r2, #0]
 8004e5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e64:	6013      	str	r3, [r2, #0]
 8004e66:	6813      	ldr	r3, [r2, #0]

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004e68:	9407      	str	r4, [sp, #28]

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004e6a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004e6e:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 108;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004e70:	9411      	str	r4, [sp, #68]	; 0x44

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004e72:	9301      	str	r3, [sp, #4]
 8004e74:	9b01      	ldr	r3, [sp, #4]

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004e76:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 108;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004e78:	9412      	str	r4, [sp, #72]	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004e7a:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8004e7c:	2310      	movs	r3, #16
 8004e7e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004e80:	2300      	movs	r3, #0
 8004e82:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004e84:	2308      	movs	r3, #8
 8004e86:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 108;
 8004e88:	236c      	movs	r3, #108	; 0x6c
 8004e8a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004e8c:	f7fc f9e6 	bl	800125c <HAL_RCC_OscConfig>
 8004e90:	b108      	cbz	r0, 8004e96 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8004e92:	f7fe fd1f 	bl	80038d4 <Error_Handler>
  }

    /**Activate the Over-Drive mode
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004e96:	f7fc f9a9 	bl	80011ec <HAL_PWREx_EnableOverDrive>
 8004e9a:	2800      	cmp	r0, #0
 8004e9c:	d1f9      	bne.n	8004e92 <SystemClock_Config+0x56>
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004e9e:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004ea0:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8004ea2:	2107      	movs	r1, #7
 8004ea4:	a802      	add	r0, sp, #8
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004ea6:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004eac:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004eae:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004eb0:	9306      	str	r3, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8004eb2:	f7fc fbad 	bl	8001610 <HAL_RCC_ClockConfig>
 8004eb6:	2800      	cmp	r0, #0
 8004eb8:	d1eb      	bne.n	8004e92 <SystemClock_Config+0x56>
  {
    Error_Handler();
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004eba:	2340      	movs	r3, #64	; 0x40
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004ebc:	9024      	str	r0, [sp, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ebe:	a813      	add	r0, sp, #76	; 0x4c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
  {
    Error_Handler();
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004ec0:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ec2:	f7fc fc85 	bl	80017d0 <HAL_RCCEx_PeriphCLKConfig>
 8004ec6:	4604      	mov	r4, r0
 8004ec8:	2800      	cmp	r0, #0
 8004eca:	d1e2      	bne.n	8004e92 <SystemClock_Config+0x56>
    Error_Handler();
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8004ecc:	f7fc fc4a 	bl	8001764 <HAL_RCC_GetHCLKFreq>
 8004ed0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ed4:	fbb0 f0f3 	udiv	r0, r0, r3
 8004ed8:	f7fb fce8 	bl	80008ac <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004edc:	2004      	movs	r0, #4
 8004ede:	f7fb fcfb 	bl	80008d8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004ee2:	4622      	mov	r2, r4
 8004ee4:	4621      	mov	r1, r4
 8004ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8004eea:	f7fb fc9b 	bl	8000824 <HAL_NVIC_SetPriority>
}
 8004eee:	b034      	add	sp, #208	; 0xd0
 8004ef0:	bd10      	pop	{r4, pc}
 8004ef2:	bf00      	nop
 8004ef4:	40023800 	.word	0x40023800
 8004ef8:	40007000 	.word	0x40007000

08004efc <main>:

enum {ADC_VAL_BUFFER_LENGTH = 32}; //DMA Buffer size
uint32_t ADC_valbuffer[ADC_VAL_BUFFER_LENGTH];

int main(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b0ac      	sub	sp, #176	; 0xb0


  /*Configure GPIO pins : RDIC_Pin LDIC_Pin GYRO_CS_Pin */
  GPIO_InitStruct.Pin = RDIC_Pin|LDIC_Pin|GYRO_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f00:	2400      	movs	r4, #0
{
   //STARTUP

  /* MCU Configuration----------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004f02:	f7fb fa1b 	bl	800033c <HAL_Init>
  HAL_GPIO_WritePin(GPIOD, LED1_Pin, GPIO_PIN_SET);


  /*Configure GPIO pins : RDIC_Pin LDIC_Pin GYRO_CS_Pin */
  GPIO_InitStruct.Pin = RDIC_Pin|LDIC_Pin|GYRO_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f06:	2601      	movs	r6, #1

  /* MCU Configuration----------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
  /* Configure the system clock */
  SystemClock_Config();
 8004f08:	f7ff ff98 	bl	8004e3c <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f0c:	4b51      	ldr	r3, [pc, #324]	; (8005054 <main+0x158>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RDIC_Pin|LDIC_Pin, GPIO_PIN_RESET);
 8004f0e:	210a      	movs	r1, #10
 8004f10:	4851      	ldr	r0, [pc, #324]	; (8005058 <main+0x15c>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  //Configure GPIO pins : PC8 PC9
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004f14:	f44f 7940 	mov.w	r9, #768	; 0x300
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004f18:	4d50      	ldr	r5, [pc, #320]	; (800505c <main+0x160>)
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004f1a:	f44f 3780 	mov.w	r7, #65536	; 0x10000
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f1e:	f042 0201 	orr.w	r2, r2, #1
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.NbrOfDiscConversion = 0;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
 8004f22:	f04f 0a04 	mov.w	sl, #4
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f26:	631a      	str	r2, [r3, #48]	; 0x30
 8004f28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f2a:	f002 0201 	and.w	r2, r2, #1
 8004f2e:	9200      	str	r2, [sp, #0]
 8004f30:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f34:	f042 0204 	orr.w	r2, r2, #4
 8004f38:	631a      	str	r2, [r3, #48]	; 0x30
 8004f3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f3c:	f002 0204 	and.w	r2, r2, #4
 8004f40:	9201      	str	r2, [sp, #4]
 8004f42:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f46:	f042 0202 	orr.w	r2, r2, #2
 8004f4a:	631a      	str	r2, [r3, #48]	; 0x30
 8004f4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f4e:	f002 0202 	and.w	r2, r2, #2
 8004f52:	9202      	str	r2, [sp, #8]
 8004f54:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f58:	f042 0210 	orr.w	r2, r2, #16
 8004f5c:	631a      	str	r2, [r3, #48]	; 0x30
 8004f5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f60:	f002 0210 	and.w	r2, r2, #16
 8004f64:	9203      	str	r2, [sp, #12]
 8004f66:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f6a:	f042 0208 	orr.w	r2, r2, #8
 8004f6e:	631a      	str	r2, [r3, #48]	; 0x30

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RDIC_Pin|LDIC_Pin, GPIO_PIN_RESET);
 8004f70:	2200      	movs	r2, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f74:	f003 0308 	and.w	r3, r3, #8
 8004f78:	9304      	str	r3, [sp, #16]
 8004f7a:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RDIC_Pin|LDIC_Pin, GPIO_PIN_RESET);
 8004f7c:	f7fc f922 	bl	80011c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GYRO_CS_Pin, GPIO_PIN_SET);
 8004f80:	2201      	movs	r2, #1
 8004f82:	2110      	movs	r1, #16
 8004f84:	4834      	ldr	r0, [pc, #208]	; (8005058 <main+0x15c>)
 8004f86:	f7fc f91d 	bl	80011c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LED5_Pin|LED4_Pin|LED3_Pin|LED2_Pin , GPIO_PIN_RESET);
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	211e      	movs	r1, #30
 8004f8e:	4834      	ldr	r0, [pc, #208]	; (8005060 <main+0x164>)
 8004f90:	f7fc f918 	bl	80011c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LED1_Pin, GPIO_PIN_SET);
 8004f94:	2201      	movs	r2, #1
 8004f96:	2120      	movs	r1, #32
 8004f98:	4831      	ldr	r0, [pc, #196]	; (8005060 <main+0x164>)
 8004f9a:	f7fc f913 	bl	80011c4 <HAL_GPIO_WritePin>


  /*Configure GPIO pins : RDIC_Pin LDIC_Pin GYRO_CS_Pin */
  GPIO_InitStruct.Pin = RDIC_Pin|LDIC_Pin|GYRO_CS_Pin;
 8004f9e:	231a      	movs	r3, #26
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fa0:	a923      	add	r1, sp, #140	; 0x8c
 8004fa2:	482d      	ldr	r0, [pc, #180]	; (8005058 <main+0x15c>)
  HAL_GPIO_WritePin(GPIOD, LED5_Pin|LED4_Pin|LED3_Pin|LED2_Pin , GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOD, LED1_Pin, GPIO_PIN_SET);


  /*Configure GPIO pins : RDIC_Pin LDIC_Pin GYRO_CS_Pin */
  GPIO_InitStruct.Pin = RDIC_Pin|LDIC_Pin|GYRO_CS_Pin;
 8004fa4:	9323      	str	r3, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fa6:	9624      	str	r6, [sp, #144]	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fa8:	9425      	str	r4, [sp, #148]	; 0x94
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004faa:	9426      	str	r4, [sp, #152]	; 0x98
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fac:	f7fc f81e 	bl	8000fec <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
 8004fb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 8004fb4:	a923      	add	r1, sp, #140	; 0x8c
 8004fb6:	482a      	ldr	r0, [pc, #168]	; (8005060 <main+0x164>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
 8004fb8:	9323      	str	r3, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004fba:	9524      	str	r5, [sp, #144]	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fbc:	9425      	str	r4, [sp, #148]	; 0x94
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 8004fbe:	f7fc f815 	bl	8000fec <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin;
 8004fc2:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);
 8004fc4:	a923      	add	r1, sp, #140	; 0x8c
 8004fc6:	4827      	ldr	r0, [pc, #156]	; (8005064 <main+0x168>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin;
 8004fc8:	9323      	str	r3, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004fca:	9524      	str	r5, [sp, #144]	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fcc:	9425      	str	r4, [sp, #148]	; 0x94
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);
 8004fce:	f7fc f80d 	bl	8000fec <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8004fd2:	4622      	mov	r2, r4
 8004fd4:	2102      	movs	r1, #2
 8004fd6:	2028      	movs	r0, #40	; 0x28

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 8004fd8:	4d23      	ldr	r5, [pc, #140]	; (8005068 <main+0x16c>)
  GPIO_InitStruct.Pin = BUTTON2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8004fda:	f7fb fc23 	bl	8000824 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004fde:	2028      	movs	r0, #40	; 0x28
 8004fe0:	f7fb fc58 	bl	8000894 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8004fe4:	4622      	mov	r2, r4
 8004fe6:	4631      	mov	r1, r6
 8004fe8:	2017      	movs	r0, #23
 8004fea:	f7fb fc1b 	bl	8000824 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004fee:	2017      	movs	r0, #23
 8004ff0:	f7fb fc50 	bl	8000894 <HAL_NVIC_EnableIRQ>

  /*Configure GPIO pins : LED5_Pin LED4_Pin LED3_Pin LED2_Pin 
                           LED1_Pin */
  GPIO_InitStruct.Pin = LED5_Pin|LED4_Pin|LED3_Pin|LED2_Pin 
 8004ff4:	233e      	movs	r3, #62	; 0x3e
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ff6:	a923      	add	r1, sp, #140	; 0x8c
 8004ff8:	4819      	ldr	r0, [pc, #100]	; (8005060 <main+0x164>)
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

  /*Configure GPIO pins : LED5_Pin LED4_Pin LED3_Pin LED2_Pin 
                           LED1_Pin */
  GPIO_InitStruct.Pin = LED5_Pin|LED4_Pin|LED3_Pin|LED2_Pin 
 8004ffa:	9323      	str	r3, [sp, #140]	; 0x8c
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ffc:	9624      	str	r6, [sp, #144]	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ffe:	9425      	str	r4, [sp, #148]	; 0x94
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005000:	9426      	str	r4, [sp, #152]	; 0x98
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005002:	f7fb fff3 	bl	8000fec <HAL_GPIO_Init>
  //Configure GPIO pins : PC8 PC9
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005006:	a923      	add	r1, sp, #140	; 0x8c
 8005008:	4816      	ldr	r0, [pc, #88]	; (8005064 <main+0x168>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  //Configure GPIO pins : PC8 PC9
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800500a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800500e:	9624      	str	r6, [sp, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005010:	9425      	str	r4, [sp, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005012:	9426      	str	r4, [sp, #152]	; 0x98
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005014:	f7fb ffea 	bl	8000fec <HAL_GPIO_Init>

   //Configure GPIO pins : PB4 PB5
      GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005018:	2330      	movs	r3, #48	; 0x30
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800501a:	4814      	ldr	r0, [pc, #80]	; (800506c <main+0x170>)
 800501c:	a923      	add	r1, sp, #140	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

   //Configure GPIO pins : PB4 PB5
      GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800501e:	9624      	str	r6, [sp, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

   //Configure GPIO pins : PB4 PB5
      GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005020:	9323      	str	r3, [sp, #140]	; 0x8c
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005022:	9425      	str	r4, [sp, #148]	; 0x94
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005024:	9426      	str	r4, [sp, #152]	; 0x98
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005026:	f7fb ffe1 	bl	8000fec <HAL_GPIO_Init>
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800502a:	4b11      	ldr	r3, [pc, #68]	; (8005070 <main+0x174>)
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.EOCSelection = DISABLE;

  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800502c:	4628      	mov	r0, r5

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800502e:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8005030:	612e      	str	r6, [r5, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005032:	61ae      	str	r6, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005034:	622c      	str	r4, [r5, #32]
  hadc1.Init.NbrOfDiscConversion = 0;
 8005036:	626c      	str	r4, [r5, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005038:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 800503a:	62ac      	str	r4, [r5, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800503c:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 4;
 800503e:	f8c5 a01c 	str.w	sl, [r5, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8005042:	632e      	str	r6, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = DISABLE;
 8005044:	616c      	str	r4, [r5, #20]
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005046:	e885 0088 	stmia.w	r5, {r3, r7}
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.EOCSelection = DISABLE;

  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800504a:	f7fb f99f 	bl	800038c <HAL_ADC_Init>
 800504e:	b188      	cbz	r0, 8005074 <main+0x178>
  {
    Error_Handler();
 8005050:	f7fe fc40 	bl	80038d4 <Error_Handler>
 8005054:	40023800 	.word	0x40023800
 8005058:	40020000 	.word	0x40020000
 800505c:	10210000 	.word	0x10210000
 8005060:	40020c00 	.word	0x40020c00
 8005064:	40020800 	.word	0x40020800
 8005068:	20004a64 	.word	0x20004a64
 800506c:	40020400 	.word	0x40020400
 8005070:	40012000 	.word	0x40012000
  }


  sConfig.Channel = ADC_CHANNEL_14; //l receiver
 8005074:	230e      	movs	r3, #14
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
  sConfig.Offset = 0;
 8005076:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005078:	a908      	add	r1, sp, #32
 800507a:	4628      	mov	r0, r5
  {
    Error_Handler();
  }


  sConfig.Channel = ADC_CHANNEL_14; //l receiver
 800507c:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 1;
 800507e:	9609      	str	r6, [sp, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8005080:	960a      	str	r6, [sp, #40]	; 0x28
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005082:	f7fb fb1d 	bl	80006c0 <HAL_ADC_ConfigChannel>
 8005086:	2800      	cmp	r0, #0
 8005088:	d1e2      	bne.n	8005050 <main+0x154>
  {

    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_15; //lf receiver
 800508a:	230f      	movs	r3, #15
  sConfig.Rank = 2;
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
  sConfig.Offset = 0;
 800508c:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800508e:	a908      	add	r1, sp, #32
 8005090:	4628      	mov	r0, r5
  {

    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_15; //lf receiver
 8005092:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 2;
 8005094:	2302      	movs	r3, #2
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8005096:	960a      	str	r6, [sp, #40]	; 0x28

    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_15; //lf receiver
  sConfig.Rank = 2;
 8005098:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800509a:	f7fb fb11 	bl	80006c0 <HAL_ADC_ConfigChannel>
 800509e:	2800      	cmp	r0, #0
 80050a0:	d1d6      	bne.n	8005050 <main+0x154>
  {

    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_8; //rf receiver
 80050a2:	2708      	movs	r7, #8
  sConfig.Rank = 3;
 80050a4:	f04f 0803 	mov.w	r8, #3
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
  sConfig.Offset = 0;
 80050a8:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80050aa:	a908      	add	r1, sp, #32
 80050ac:	4628      	mov	r0, r5
  {

    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_8; //rf receiver
 80050ae:	9708      	str	r7, [sp, #32]
  sConfig.Rank = 3;
 80050b0:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80050b4:	960a      	str	r6, [sp, #40]	; 0x28
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80050b6:	f7fb fb03 	bl	80006c0 <HAL_ADC_ConfigChannel>
 80050ba:	2800      	cmp	r0, #0
 80050bc:	d1c8      	bne.n	8005050 <main+0x154>
  {

    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_9; //r receiver
 80050be:	2309      	movs	r3, #9
  sConfig.Rank = 4;
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
  sConfig.Offset = 0;
 80050c0:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80050c2:	a908      	add	r1, sp, #32
 80050c4:	4628      	mov	r0, r5
  {

    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_9; //r receiver
 80050c6:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 4;
 80050c8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80050cc:	960a      	str	r6, [sp, #40]	; 0x28
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80050ce:	f7fb faf7 	bl	80006c0 <HAL_ADC_ConfigChannel>
 80050d2:	2800      	cmp	r0, #0
 80050d4:	d1bc      	bne.n	8005050 <main+0x154>

/* SPI1 init function */
static void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 80050d6:	4b9b      	ldr	r3, [pc, #620]	; (8005344 <main+0x448>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80050d8:	f44f 7482 	mov.w	r4, #260	; 0x104
 80050dc:	4a9a      	ldr	r2, [pc, #616]	; (8005348 <main+0x44c>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80050de:	6098      	str	r0, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80050e0:	6118      	str	r0, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80050e2:	6158      	str	r0, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050e4:	61d8      	str	r0, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80050e6:	6218      	str	r0, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80050e8:	6258      	str	r0, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050ea:	6298      	str	r0, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80050ec:	6318      	str	r0, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;

  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80050ee:	4618      	mov	r0, r3
{

  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80050f0:	f8c3 900c 	str.w	r9, [r3, #12]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80050f4:	635f      	str	r7, [r3, #52]	; 0x34
/* SPI1 init function */
static void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80050f6:	e883 0014 	stmia.w	r3, {r2, r4}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80050fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8005100:	2207      	movs	r2, #7
 8005102:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;

  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005104:	f7fc ff0a 	bl	8001f1c <HAL_SPI_Init>
 8005108:	2800      	cmp	r0, #0
 800510a:	d1a1      	bne.n	8005050 <main+0x154>
//LEFT ENCODER CHANNELS
static void MX_TIM1_Init(void)
{
  TIM_Encoder_InitTypeDef sConfig;

  htim1.Instance = TIM1;
 800510c:	4c8f      	ldr	r4, [pc, #572]	; (800534c <main+0x450>)
  sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
  sConfig.IC2Filter = 0;

  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800510e:	a923      	add	r1, sp, #140	; 0x8c
//LEFT ENCODER CHANNELS
static void MX_TIM1_Init(void)
{
  TIM_Encoder_InitTypeDef sConfig;

  htim1.Instance = TIM1;
 8005110:	4b8f      	ldr	r3, [pc, #572]	; (8005350 <main+0x454>)
  htim1.Init.Prescaler = 0;
 8005112:	6060      	str	r0, [r4, #4]
//LEFT ENCODER CHANNELS
static void MX_TIM1_Init(void)
{
  TIM_Encoder_InitTypeDef sConfig;

  htim1.Instance = TIM1;
 8005114:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 0xffff;
 8005116:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
  TIM_Encoder_InitTypeDef sConfig;

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800511a:	60a0      	str	r0, [r4, #8]
  htim1.Init.Period = 0xffff;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800511c:	6120      	str	r0, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 800511e:	6160      	str	r0, [r4, #20]

  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
  sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005120:	9024      	str	r0, [sp, #144]	; 0x90
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
  sConfig.IC1Filter = 0;
 8005122:	9027      	str	r0, [sp, #156]	; 0x9c

  sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005124:	9028      	str	r0, [sp, #160]	; 0xa0
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
  sConfig.IC2Filter = 0;
 8005126:	902b      	str	r0, [sp, #172]	; 0xac

  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8005128:	4620      	mov	r0, r4
  TIM_Encoder_InitTypeDef sConfig;

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 0xffff;
 800512a:	60e3      	str	r3, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;

  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800512c:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
  sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005130:	9625      	str	r6, [sp, #148]	; 0x94
  sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8005132:	9726      	str	r7, [sp, #152]	; 0x98
  sConfig.IC1Filter = 0;

  sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005134:	9629      	str	r6, [sp, #164]	; 0xa4
  sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8005136:	972a      	str	r7, [sp, #168]	; 0xa8
  sConfig.IC2Filter = 0;

  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8005138:	f7fd f92a 	bl	8002390 <HAL_TIM_Encoder_Init>
 800513c:	2800      	cmp	r0, #0
 800513e:	d187      	bne.n	8005050 <main+0x154>
  {
    Error_Handler();
  }

  if(HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL) != HAL_OK)
 8005140:	213c      	movs	r1, #60	; 0x3c
 8005142:	4620      	mov	r0, r4
 8005144:	f7fc ffbb 	bl	80020be <HAL_TIM_Encoder_Start_IT>
 8005148:	2800      	cmp	r0, #0
 800514a:	d181      	bne.n	8005050 <main+0x154>
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  //uhPrescalerValue = (uint32_t)((SystemCoreClock /2) / 18000000) - 1;

  htim2.Instance = TIM2;
 800514c:	4d81      	ldr	r5, [pc, #516]	; (8005354 <main+0x458>)
  htim2.Init.Prescaler = 5;
 800514e:	2305      	movs	r3, #5
 8005150:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005154:	60a8      	str	r0, [r5, #8]
  htim2.Init.Period = 665;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005156:	6128      	str	r0, [r5, #16]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005158:	4628      	mov	r0, r5
  TIM_OC_InitTypeDef sConfigOC;

  //uhPrescalerValue = (uint32_t)((SystemCoreClock /2) / 18000000) - 1;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 5;
 800515a:	e885 000a 	stmia.w	r5, {r1, r3}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 665;
 800515e:	f240 2399 	movw	r3, #665	; 0x299
 8005162:	60eb      	str	r3, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005164:	f7fd f8fa 	bl	800235c <HAL_TIM_PWM_Init>
 8005168:	2800      	cmp	r0, #0
 800516a:	f47f af71 	bne.w	8005050 <main+0x154>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800516e:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005170:	a905      	add	r1, sp, #20
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005172:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005174:	4628      	mov	r0, r5
 8005176:	f7fd fb13 	bl	80027a0 <HAL_TIMEx_MasterConfigSynchronization>
 800517a:	2800      	cmp	r0, #0
 800517c:	f47f af68 	bne.w	8005050 <main+0x154>
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
 8005180:	2200      	movs	r2, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005182:	f04f 0a60 	mov.w	sl, #96	; 0x60
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005186:	a913      	add	r1, sp, #76	; 0x4c
 8005188:	4628      	mov	r0, r5
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800518a:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  sConfigOC.Pulse = 0;
 800518e:	9214      	str	r2, [sp, #80]	; 0x50
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005190:	9215      	str	r2, [sp, #84]	; 0x54
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005192:	9217      	str	r2, [sp, #92]	; 0x5c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005194:	f7fd fa7e 	bl	8002694 <HAL_TIM_PWM_ConfigChannel>
 8005198:	2800      	cmp	r0, #0
 800519a:	f47f af59 	bne.w	8005050 <main+0x154>
  {
    Error_Handler();
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800519e:	4628      	mov	r0, r5
 80051a0:	463a      	mov	r2, r7
 80051a2:	a913      	add	r1, sp, #76	; 0x4c
 80051a4:	f7fd fa76 	bl	8002694 <HAL_TIM_PWM_ConfigChannel>
 80051a8:	4605      	mov	r5, r0
 80051aa:	2800      	cmp	r0, #0
 80051ac:	f47f af50 	bne.w	8005050 <main+0x154>
  {
    Error_Handler();
  }
  HAL_TIM_MspPostInit(&htim2);
 80051b0:	4868      	ldr	r0, [pc, #416]	; (8005354 <main+0x458>)
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim4.Init.RepetitionCounter = 0;

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80051b2:	2701      	movs	r7, #1

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  HAL_TIM_MspPostInit(&htim2);
 80051b4:	f000 fa44 	bl	8005640 <HAL_TIM_MspPostInit>
//RIGHT ENCODER CHANNELS
static void MX_TIM4_Init(void)
{
	TIM_Encoder_InitTypeDef sConfig;

	htim4.Instance = TIM4;
 80051b8:	4e67      	ldr	r6, [pc, #412]	; (8005358 <main+0x45c>)
 80051ba:	4b68      	ldr	r3, [pc, #416]	; (800535c <main+0x460>)
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
	sConfig.IC2Filter = 0;

	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80051bc:	a91a      	add	r1, sp, #104	; 0x68
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim4.Init.Period = 0xffff;
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim4.Init.RepetitionCounter = 0;

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80051be:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 80051c2:	f04f 0808 	mov.w	r8, #8
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
	sConfig.IC2Filter = 0;

	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80051c6:	4630      	mov	r0, r6
{
	TIM_Encoder_InitTypeDef sConfig;

	htim4.Instance = TIM4;
	htim4.Init.Prescaler = 0;
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051c8:	60b5      	str	r5, [r6, #8]
	htim4.Init.Period = 0xffff;
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051ca:	6135      	str	r5, [r6, #16]
 80051cc:	46b1      	mov	r9, r6
	htim4.Init.RepetitionCounter = 0;
 80051ce:	6175      	str	r5, [r6, #20]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80051d0:	951b      	str	r5, [sp, #108]	; 0x6c
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80051d2:	971c      	str	r7, [sp, #112]	; 0x70
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 80051d4:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
	sConfig.IC1Filter = 0;
 80051d8:	951e      	str	r5, [sp, #120]	; 0x78

	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80051da:	951f      	str	r5, [sp, #124]	; 0x7c
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80051dc:	9720      	str	r7, [sp, #128]	; 0x80
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 80051de:	f8cd 8084 	str.w	r8, [sp, #132]	; 0x84
	sConfig.IC2Filter = 0;
 80051e2:	9522      	str	r5, [sp, #136]	; 0x88
static void MX_TIM4_Init(void)
{
	TIM_Encoder_InitTypeDef sConfig;

	htim4.Instance = TIM4;
	htim4.Init.Prescaler = 0;
 80051e4:	e886 0028 	stmia.w	r6, {r3, r5}
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim4.Init.Period = 0xffff;
 80051e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051ec:	60f3      	str	r3, [r6, #12]
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
	sConfig.IC2Filter = 0;

	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80051ee:	f7fd f8cf 	bl	8002390 <HAL_TIM_Encoder_Init>
 80051f2:	2800      	cmp	r0, #0
 80051f4:	f47f af2c 	bne.w	8005050 <main+0x154>
	{
	  Error_Handler();
	}

	if(HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL) != HAL_OK)
 80051f8:	213c      	movs	r1, #60	; 0x3c
 80051fa:	4630      	mov	r0, r6
 80051fc:	f7fc ff5f 	bl	80020be <HAL_TIM_Encoder_Start_IT>
 8005200:	2800      	cmp	r0, #0
 8005202:	f47f af25 	bne.w	8005050 <main+0x154>
static void MX_TIM9_Init(void)
{

  TIM_OC_InitTypeDef sConfigOC;

  htim9.Instance = TIM9;
 8005206:	4e56      	ldr	r6, [pc, #344]	; (8005360 <main+0x464>)
 8005208:	4b56      	ldr	r3, [pc, #344]	; (8005364 <main+0x468>)
  htim9.Init.Prescaler = 8;
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800520a:	60b0      	str	r0, [r6, #8]
  htim9.Init.Period = 3375;
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800520c:	6130      	str	r0, [r6, #16]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800520e:	4630      	mov	r0, r6
{

  TIM_OC_InitTypeDef sConfigOC;

  htim9.Instance = TIM9;
  htim9.Init.Prescaler = 8;
 8005210:	e886 0108 	stmia.w	r6, {r3, r8}
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim9.Init.Period = 3375;
 8005214:	f640 532f 	movw	r3, #3375	; 0xd2f
 8005218:	60f3      	str	r3, [r6, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800521a:	f7fd f89f 	bl	800235c <HAL_TIM_PWM_Init>
 800521e:	4602      	mov	r2, r0
 8005220:	2800      	cmp	r0, #0
 8005222:	f47f af15 	bne.w	8005050 <main+0x154>
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 1790;
 8005226:	f240 63fe 	movw	r3, #1790	; 0x6fe
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800522a:	900e      	str	r0, [sp, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800522c:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800522e:	a90c      	add	r1, sp, #48	; 0x30
 8005230:	4630      	mov	r0, r6
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005232:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  sConfigOC.Pulse = 1790;
 8005236:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005238:	f7fd fa2c 	bl	8002694 <HAL_TIM_PWM_ConfigChannel>
 800523c:	4605      	mov	r5, r0
 800523e:	2800      	cmp	r0, #0
 8005240:	f47f af06 	bne.w	8005050 <main+0x154>
  {
    Error_Handler();
  }
  HAL_TIM_MspPostInit(&htim9);
 8005244:	4630      	mov	r0, r6
 8005246:	f000 f9fb 	bl	8005640 <HAL_TIM_MspPostInit>
}

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
  huart1.Instance = USART1;
 800524a:	4847      	ldr	r0, [pc, #284]	; (8005368 <main+0x46c>)
  huart1.Init.BaudRate = 115200;
 800524c:	4a47      	ldr	r2, [pc, #284]	; (800536c <main+0x470>)
 800524e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005252:	6085      	str	r5, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005254:	60c5      	str	r5, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005256:	6105      	str	r5, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005258:	6185      	str	r5, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800525a:	61c5      	str	r5, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800525c:	6205      	str	r5, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800525e:	6245      	str	r5, [r0, #36]	; 0x24

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 8005260:	e880 000c 	stmia.w	r0, {r2, r3}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005264:	230c      	movs	r3, #12
 8005266:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005268:	f7fd fd0b 	bl	8002c82 <HAL_UART_Init>
 800526c:	4605      	mov	r5, r0
 800526e:	2800      	cmp	r0, #0
 8005270:	f47f aeee 	bne.w	8005050 <main+0x154>

  //buzzer
  //HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);

  //start PWM for motors
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8005274:	4641      	mov	r1, r8
 8005276:	4837      	ldr	r0, [pc, #220]	; (8005354 <main+0x458>)
 8005278:	f7fd f9a2 	bl	80025c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800527c:	4629      	mov	r1, r5
 800527e:	4835      	ldr	r0, [pc, #212]	; (8005354 <main+0x458>)
 8005280:	f7fd f99e 	bl	80025c0 <HAL_TIM_PWM_Start>

  Set_Left(0, FORWARD); //set mouse to sit
 8005284:	4639      	mov	r1, r7
 8005286:	4628      	mov	r0, r5
 8005288:	f7fe fe8c 	bl	8003fa4 <Set_Left>
  Set_Right(0, FORWARD);
 800528c:	4628      	mov	r0, r5


  //MAIN INFINITE PROGRAM LOOP aka ready loop
  while (1)
  {
	  if (stop_flag == FALSE || debug_flag == TRUE) { //press top button to activate IR sensors
 800528e:	4d38      	ldr	r5, [pc, #224]	; (8005370 <main+0x474>)
  //start PWM for motors
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);

  Set_Left(0, FORWARD); //set mouse to sit
  Set_Right(0, FORWARD);
 8005290:	4639      	mov	r1, r7
  //MAIN INFINITE PROGRAM LOOP aka ready loop
  while (1)
  {
	  if (stop_flag == FALSE || debug_flag == TRUE) { //press top button to activate IR sensors
	  Get_IR(FALSE, FALSE); //get IR sensor readings. diff_x = on_x - off_x
	  l_count = __HAL_TIM_GET_COUNTER(&htim1); //check left and right encoder counts for debug
 8005292:	4f38      	ldr	r7, [pc, #224]	; (8005374 <main+0x478>)
  //start PWM for motors
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);

  Set_Left(0, FORWARD); //set mouse to sit
  Set_Right(0, FORWARD);
 8005294:	f7fe feae 	bl	8003ff4 <Set_Right>
 8005298:	462e      	mov	r6, r5


  //MAIN INFINITE PROGRAM LOOP aka ready loop
  while (1)
  {
	  if (stop_flag == FALSE || debug_flag == TRUE) { //press top button to activate IR sensors
 800529a:	682b      	ldr	r3, [r5, #0]
 800529c:	b11b      	cbz	r3, 80052a6 <main+0x3aa>
 800529e:	4b36      	ldr	r3, [pc, #216]	; (8005378 <main+0x47c>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d134      	bne.n	8005310 <main+0x414>
	  Get_IR(FALSE, FALSE); //get IR sensor readings. diff_x = on_x - off_x
 80052a6:	2100      	movs	r1, #0
 80052a8:	4608      	mov	r0, r1
 80052aa:	f7fe fbab 	bl	8003a04 <Get_IR>
	  l_count = __HAL_TIM_GET_COUNTER(&htim1); //check left and right encoder counts for debug
 80052ae:	6823      	ldr	r3, [r4, #0]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b2:	603b      	str	r3, [r7, #0]
	  r_count = __HAL_TIM_GET_COUNTER(&htim4);
 80052b4:	f8d9 3000 	ldr.w	r3, [r9]
 80052b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052ba:	4b30      	ldr	r3, [pc, #192]	; (800537c <main+0x480>)
 80052bc:	601a      	str	r2, [r3, #0]

	  if (dif_r > 3600) {
 80052be:	4b30      	ldr	r3, [pc, #192]	; (8005380 <main+0x484>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80052c6:	dd07      	ble.n	80052d8 <main+0x3dc>
		  HAL_GPIO_WritePin(GPIOD, LED2_Pin, ON);
 80052c8:	2201      	movs	r2, #1
 80052ca:	2110      	movs	r1, #16
 80052cc:	482d      	ldr	r0, [pc, #180]	; (8005384 <main+0x488>)
 80052ce:	f7fb ff79 	bl	80011c4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, LED5_Pin, OFF);
 80052d2:	2200      	movs	r2, #0
 80052d4:	2102      	movs	r1, #2
 80052d6:	e012      	b.n	80052fe <main+0x402>
	  }
	  else if (dif_rf > 3600 && dif_lf > 3600)
 80052d8:	4b2b      	ldr	r3, [pc, #172]	; (8005388 <main+0x48c>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80052e0:	dd06      	ble.n	80052f0 <main+0x3f4>
 80052e2:	4b2a      	ldr	r3, [pc, #168]	; (800538c <main+0x490>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80052ea:	dd01      	ble.n	80052f0 <main+0x3f4>
	  {
		  HAL_GPIO_WritePin(GPIOD, LED5_Pin, ON);
 80052ec:	2201      	movs	r2, #1
 80052ee:	e000      	b.n	80052f2 <main+0x3f6>
		  HAL_GPIO_WritePin(GPIOD, LED2_Pin, OFF);
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOD, LED5_Pin, OFF);
 80052f0:	2200      	movs	r2, #0
 80052f2:	2102      	movs	r1, #2
 80052f4:	4823      	ldr	r0, [pc, #140]	; (8005384 <main+0x488>)
 80052f6:	f7fb ff65 	bl	80011c4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, LED2_Pin, OFF);
 80052fa:	2200      	movs	r2, #0
 80052fc:	2110      	movs	r1, #16
 80052fe:	4821      	ldr	r0, [pc, #132]	; (8005384 <main+0x488>)
 8005300:	f7fb ff60 	bl	80011c4 <HAL_GPIO_WritePin>
	  }
	  if (send_debug == TRUE) {
 8005304:	4b22      	ldr	r3, [pc, #136]	; (8005390 <main+0x494>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d101      	bne.n	8005310 <main+0x414>
		  Send_Debug();
 800530c:	f7fd fdfe 	bl	8002f0c <Send_Debug>
	  }

	  }

	  if (stop_flag == FALSE && dif_r > 2000) { //debug speed run
 8005310:	6833      	ldr	r3, [r6, #0]
 8005312:	b93b      	cbnz	r3, 8005324 <main+0x428>
 8005314:	4b1a      	ldr	r3, [pc, #104]	; (8005380 <main+0x484>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800531c:	dd02      	ble.n	8005324 <main+0x428>
		  Speed_Run("vs");
 800531e:	481d      	ldr	r0, [pc, #116]	; (8005394 <main+0x498>)
 8005320:	f7ff fd0c 	bl	8004d3c <Speed_Run>
	  }

	  if (stop_flag == FALSE && dif_l > 2000) { //start searching (place finger in front)
 8005324:	6833      	ldr	r3, [r6, #0]
 8005326:	b943      	cbnz	r3, 800533a <main+0x43e>
 8005328:	4b1b      	ldr	r3, [pc, #108]	; (8005398 <main+0x49c>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005330:	dd03      	ble.n	800533a <main+0x43e>
		  Search(); //go to center
 8005332:	f7ff fa47 	bl	80047c4 <Search>
		  Program_Flash(); //end reached. save walls
 8005336:	f7fe fadf 	bl	80038f8 <Program_Flash>
		  //if (done_flag == TRUE) {
			// Search(); //go back
		  //}
	  } //if front wall > 1500
  HAL_Delay(500); //ONLY CHECK FOR FINGER every half second. If you check to quickly it'll never start
 800533a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800533e:	f7fb f817 	bl	8000370 <HAL_Delay>
  } //ready loop
 8005342:	e7aa      	b.n	800529a <main+0x39e>
 8005344:	2000524c 	.word	0x2000524c
 8005348:	40013000 	.word	0x40013000
 800534c:	200050f8 	.word	0x200050f8
 8005350:	40010000 	.word	0x40010000
 8005354:	200052b0 	.word	0x200052b0
 8005358:	200043a0 	.word	0x200043a0
 800535c:	40000800 	.word	0x40000800
 8005360:	20005134 	.word	0x20005134
 8005364:	40014000 	.word	0x40014000
 8005368:	20004aac 	.word	0x20004aac
 800536c:	40011000 	.word	0x40011000
 8005370:	20000004 	.word	0x20000004
 8005374:	200000e4 	.word	0x200000e4
 8005378:	200042dc 	.word	0x200042dc
 800537c:	20003160 	.word	0x20003160
 8005380:	200020e4 	.word	0x200020e4
 8005384:	40020c00 	.word	0x40020c00
 8005388:	200042d4 	.word	0x200042d4
 800538c:	200042fc 	.word	0x200042fc
 8005390:	20003168 	.word	0x20003168
 8005394:	080064df 	.word	0x080064df
 8005398:	20002088 	.word	0x20002088

0800539c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800539c:	b508      	push	{r3, lr}

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800539e:	2003      	movs	r0, #3
 80053a0:	f7fb fa2e 	bl	8000800 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80053a4:	2200      	movs	r2, #0
 80053a6:	f06f 000b 	mvn.w	r0, #11
 80053aa:	4611      	mov	r1, r2
 80053ac:	f7fb fa3a 	bl	8000824 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80053b0:	2200      	movs	r2, #0
 80053b2:	f06f 000a 	mvn.w	r0, #10
 80053b6:	4611      	mov	r1, r2
 80053b8:	f7fb fa34 	bl	8000824 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80053bc:	2200      	movs	r2, #0
 80053be:	f06f 0009 	mvn.w	r0, #9
 80053c2:	4611      	mov	r1, r2
 80053c4:	f7fb fa2e 	bl	8000824 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80053c8:	2200      	movs	r2, #0
 80053ca:	f06f 0004 	mvn.w	r0, #4
 80053ce:	4611      	mov	r1, r2
 80053d0:	f7fb fa28 	bl	8000824 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80053d4:	2200      	movs	r2, #0
 80053d6:	f06f 0003 	mvn.w	r0, #3
 80053da:	4611      	mov	r1, r2
 80053dc:	f7fb fa22 	bl	8000824 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80053e0:	2200      	movs	r2, #0
 80053e2:	f06f 0001 	mvn.w	r0, #1
 80053e6:	4611      	mov	r1, r2
 80053e8:	f7fb fa1c 	bl	8000824 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80053ec:	2200      	movs	r2, #0
 80053ee:	f04f 30ff 	mov.w	r0, #4294967295
 80053f2:	4611      	mov	r1, r2

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80053f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80053f8:	f7fb ba14 	b.w	8000824 <HAL_NVIC_SetPriority>

080053fc <HAL_ADC_MspInit>:
{

  GPIO_InitTypeDef GPIO_InitStruct;
  static DMA_HandleTypeDef  hdma_adc;

  if(hadc->Instance==ADC1)
 80053fc:	6802      	ldr	r2, [r0, #0]
 80053fe:	4b2a      	ldr	r3, [pc, #168]	; (80054a8 <HAL_ADC_MspInit+0xac>)
 8005400:	429a      	cmp	r2, r3

  /* USER CODE END MspInit 1 */
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005402:	b570      	push	{r4, r5, r6, lr}
 8005404:	4606      	mov	r6, r0
 8005406:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;
  static DMA_HandleTypeDef  hdma_adc;

  if(hadc->Instance==ADC1)
 8005408:	d14b      	bne.n	80054a2 <HAL_ADC_MspInit+0xa6>
  {

    __HAL_RCC_ADC1_CLK_ENABLE();
 800540a:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800540e:	2500      	movs	r5, #0
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005410:	2403      	movs	r4, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005412:	a903      	add	r1, sp, #12
  static DMA_HandleTypeDef  hdma_adc;

  if(hadc->Instance==ADC1)
  {

    __HAL_RCC_ADC1_CLK_ENABLE();
 8005414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005416:	4825      	ldr	r0, [pc, #148]	; (80054ac <HAL_ADC_MspInit+0xb0>)
  static DMA_HandleTypeDef  hdma_adc;

  if(hadc->Instance==ADC1)
  {

    __HAL_RCC_ADC1_CLK_ENABLE();
 8005418:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800541c:	645a      	str	r2, [r3, #68]	; 0x44
 800541e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005420:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8005424:	9201      	str	r2, [sp, #4]
 8005426:	9a01      	ldr	r2, [sp, #4]

    /* Enable DMA2 clock */
    __HAL_RCC_DMA2_CLK_ENABLE();
 8005428:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800542a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800542e:	631a      	str	r2, [r3, #48]	; 0x30
 8005430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005432:	9404      	str	r4, [sp, #16]
  {

    __HAL_RCC_ADC1_CLK_ENABLE();

    /* Enable DMA2 clock */
    __HAL_RCC_DMA2_CLK_ENABLE();
 8005434:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005438:	9505      	str	r5, [sp, #20]
  {

    __HAL_RCC_ADC1_CLK_ENABLE();

    /* Enable DMA2 clock */
    __HAL_RCC_DMA2_CLK_ENABLE();
 800543a:	9302      	str	r3, [sp, #8]
 800543c:	9b02      	ldr	r3, [sp, #8]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
 800543e:	2330      	movs	r3, #48	; 0x30
 8005440:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005442:	f7fb fdd3 	bl	8000fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RF_REC_Pin|R_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005446:	a903      	add	r1, sp, #12
 8005448:	4819      	ldr	r0, [pc, #100]	; (80054b0 <HAL_ADC_MspInit+0xb4>)
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = RF_REC_Pin|R_REC_Pin;
 800544a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800544c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800544e:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005450:	f7fb fdcc 	bl	8000fec <HAL_GPIO_Init>

    hdma_adc.Instance = DMA2_Stream0;
 8005454:	4c17      	ldr	r4, [pc, #92]	; (80054b4 <HAL_ADC_MspInit+0xb8>)
 8005456:	4b18      	ldr	r3, [pc, #96]	; (80054b8 <HAL_ADC_MspInit+0xbc>)
    hdma_adc.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    hdma_adc.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
    hdma_adc.Init.MemBurst = DMA_MBURST_SINGLE;
    hdma_adc.Init.PeriphBurst = DMA_PBURST_SINGLE;

    HAL_DMA_Init(&hdma_adc);
 8005458:	4620      	mov	r0, r4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    hdma_adc.Instance = DMA2_Stream0;
    hdma_adc.Init.Channel  = DMA_CHANNEL_0;
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800545a:	60a5      	str	r5, [r4, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800545c:	60e5      	str	r5, [r4, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc.Init.Mode = DMA_CIRCULAR;
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_adc.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800545e:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_adc.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
    hdma_adc.Init.MemBurst = DMA_MBURST_SINGLE;
 8005460:	62e5      	str	r5, [r4, #44]	; 0x2c
    hdma_adc.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005462:	6325      	str	r5, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    hdma_adc.Instance = DMA2_Stream0;
    hdma_adc.Init.Channel  = DMA_CHANNEL_0;
 8005464:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8005468:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800546c:	6123      	str	r3, [r4, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800546e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005472:	6163      	str	r3, [r4, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005474:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005478:	61a3      	str	r3, [r4, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800547a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800547e:	61e3      	str	r3, [r4, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8005480:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005484:	6223      	str	r3, [r4, #32]
    hdma_adc.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    hdma_adc.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8005486:	2301      	movs	r3, #1
 8005488:	62a3      	str	r3, [r4, #40]	; 0x28
    hdma_adc.Init.MemBurst = DMA_MBURST_SINGLE;
    hdma_adc.Init.PeriphBurst = DMA_PBURST_SINGLE;

    HAL_DMA_Init(&hdma_adc);
 800548a:	f7fb fa4d 	bl	8000928 <HAL_DMA_Init>

      /* Associate the initialized DMA handle to the ADC handle */
    __HAL_LINKDMA(hadc, DMA_Handle, hdma_adc);
 800548e:	63b4      	str	r4, [r6, #56]	; 0x38

      /*##-4- Configure the NVIC for DMA #########################################*/
      /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8005490:	2038      	movs	r0, #56	; 0x38
 8005492:	462a      	mov	r2, r5
 8005494:	4629      	mov	r1, r5
    hdma_adc.Init.PeriphBurst = DMA_PBURST_SINGLE;

    HAL_DMA_Init(&hdma_adc);

      /* Associate the initialized DMA handle to the ADC handle */
    __HAL_LINKDMA(hadc, DMA_Handle, hdma_adc);
 8005496:	63a6      	str	r6, [r4, #56]	; 0x38

      /*##-4- Configure the NVIC for DMA #########################################*/
      /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8005498:	f7fb f9c4 	bl	8000824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800549c:	2038      	movs	r0, #56	; 0x38
 800549e:	f7fb f9f9 	bl	8000894 <HAL_NVIC_EnableIRQ>

  }

}
 80054a2:	b008      	add	sp, #32
 80054a4:	bd70      	pop	{r4, r5, r6, pc}
 80054a6:	bf00      	nop
 80054a8:	40012000 	.word	0x40012000
 80054ac:	40020800 	.word	0x40020800
 80054b0:	40020400 	.word	0x40020400
 80054b4:	2000430c 	.word	0x2000430c
 80054b8:	40026410 	.word	0x40026410

080054bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 80054bc:	6802      	ldr	r2, [r0, #0]
 80054be:	4b14      	ldr	r3, [pc, #80]	; (8005510 <HAL_SPI_MspInit+0x54>)
 80054c0:	429a      	cmp	r2, r3


}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80054c2:	b510      	push	{r4, lr}
 80054c4:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 80054c6:	d120      	bne.n	800550a <HAL_SPI_MspInit+0x4e>
  {

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80054c8:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GYRO_SCLK_Pin|GYRO_MISO_Pin|GYRO_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054cc:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054ce:	a901      	add	r1, sp, #4
 80054d0:	4810      	ldr	r0, [pc, #64]	; (8005514 <HAL_SPI_MspInit+0x58>)
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
  {

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80054d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80054d8:	645a      	str	r2, [r3, #68]	; 0x44
 80054da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GYRO_SCLK_Pin|GYRO_MISO_Pin|GYRO_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054dc:	9403      	str	r4, [sp, #12]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
  {

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80054de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	9b00      	ldr	r3, [sp, #0]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GYRO_SCLK_Pin|GYRO_MISO_Pin|GYRO_MOSI_Pin;
 80054e6:	23e0      	movs	r3, #224	; 0xe0
 80054e8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054ea:	2302      	movs	r3, #2
 80054ec:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054ee:	2303      	movs	r3, #3
 80054f0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80054f2:	2305      	movs	r3, #5
 80054f4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054f6:	f7fb fd79 	bl	8000fec <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 80054fa:	2023      	movs	r0, #35	; 0x23
 80054fc:	4622      	mov	r2, r4
 80054fe:	2101      	movs	r1, #1
 8005500:	f7fb f990 	bl	8000824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8005504:	2023      	movs	r0, #35	; 0x23
 8005506:	f7fb f9c5 	bl	8000894 <HAL_NVIC_EnableIRQ>

  }

}
 800550a:	b006      	add	sp, #24
 800550c:	bd10      	pop	{r4, pc}
 800550e:	bf00      	nop
 8005510:	40013000 	.word	0x40013000
 8005514:	40020000 	.word	0x40020000

08005518 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8005518:	6803      	ldr	r3, [r0, #0]
 800551a:	4a29      	ldr	r2, [pc, #164]	; (80055c0 <HAL_TIM_Encoder_MspInit+0xa8>)
 800551c:	4293      	cmp	r3, r2
  }

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim)
{
 800551e:	b570      	push	{r4, r5, r6, lr}
 8005520:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8005522:	d11e      	bne.n	8005562 <HAL_TIM_Encoder_MspInit+0x4a>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005524:	4b27      	ldr	r3, [pc, #156]	; (80055c4 <HAL_TIM_Encoder_MspInit+0xac>)
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = LENC_CHB_Pin|LENC_CHA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005526:	2401      	movs	r4, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005528:	a903      	add	r1, sp, #12
 800552a:	4827      	ldr	r0, [pc, #156]	; (80055c8 <HAL_TIM_Encoder_MspInit+0xb0>)
  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800552c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800552e:	f042 0201 	orr.w	r2, r2, #1
 8005532:	645a      	str	r2, [r3, #68]	; 0x44
 8005534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = LENC_CHB_Pin|LENC_CHA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005536:	9405      	str	r4, [sp, #20]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005538:	f003 0301 	and.w	r3, r3, #1
    */
    GPIO_InitStruct.Pin = LENC_CHB_Pin|LENC_CHA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800553c:	9407      	str	r4, [sp, #28]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800553e:	9301      	str	r3, [sp, #4]
 8005540:	9b01      	ldr	r3, [sp, #4]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = LENC_CHB_Pin|LENC_CHA_Pin;
 8005542:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8005546:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005548:	2302      	movs	r3, #2
 800554a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800554c:	2303      	movs	r3, #3
 800554e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005550:	f7fb fd4c 	bl	8000fec <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 1);
 8005554:	201b      	movs	r0, #27
 8005556:	4622      	mov	r2, r4
 8005558:	2100      	movs	r1, #0
 800555a:	f7fb f963 	bl	8000824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800555e:	201b      	movs	r0, #27
 8005560:	e02a      	b.n	80055b8 <HAL_TIM_Encoder_MspInit+0xa0>


  }
  else if(htim->Instance==TIM4)
 8005562:	4a1a      	ldr	r2, [pc, #104]	; (80055cc <HAL_TIM_Encoder_MspInit+0xb4>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d129      	bne.n	80055bc <HAL_TIM_Encoder_MspInit+0xa4>
  {
      __HAL_RCC_TIM4_CLK_ENABLE();
 8005568:	4b16      	ldr	r3, [pc, #88]	; (80055c4 <HAL_TIM_Encoder_MspInit+0xac>)
      /**TIM4 GPIO Configuration
      PB6     ------> TIM4_CH1
      PB7     ------> TIM4_CH2
      */
      GPIO_InitStruct.Pin = RENCA_Pin;
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800556a:	2402      	movs	r4, #2
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 800556c:	2601      	movs	r6, #1
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800556e:	2503      	movs	r5, #3


  }
  else if(htim->Instance==TIM4)
  {
      __HAL_RCC_TIM4_CLK_ENABLE();
 8005570:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      GPIO_InitStruct.Pin = RENCA_Pin;
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
      HAL_GPIO_Init(RENCA_GPIO_Port, &GPIO_InitStruct);
 8005572:	a903      	add	r1, sp, #12
 8005574:	4816      	ldr	r0, [pc, #88]	; (80055d0 <HAL_TIM_Encoder_MspInit+0xb8>)


  }
  else if(htim->Instance==TIM4)
  {
      __HAL_RCC_TIM4_CLK_ENABLE();
 8005576:	f042 0204 	orr.w	r2, r2, #4
 800557a:	641a      	str	r2, [r3, #64]	; 0x40
 800557c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      /**TIM4 GPIO Configuration
      PB6     ------> TIM4_CH1
      PB7     ------> TIM4_CH2
      */
      GPIO_InitStruct.Pin = RENCA_Pin;
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800557e:	9404      	str	r4, [sp, #16]


  }
  else if(htim->Instance==TIM4)
  {
      __HAL_RCC_TIM4_CLK_ENABLE();
 8005580:	f003 0304 	and.w	r3, r3, #4
      PB6     ------> TIM4_CH1
      PB7     ------> TIM4_CH2
      */
      GPIO_InitStruct.Pin = RENCA_Pin;
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005584:	9605      	str	r6, [sp, #20]
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8005586:	9506      	str	r5, [sp, #24]


  }
  else if(htim->Instance==TIM4)
  {
      __HAL_RCC_TIM4_CLK_ENABLE();
 8005588:	9302      	str	r3, [sp, #8]
 800558a:	9b02      	ldr	r3, [sp, #8]

      /**TIM4 GPIO Configuration
      PB6     ------> TIM4_CH1
      PB7     ------> TIM4_CH2
      */
      GPIO_InitStruct.Pin = RENCA_Pin;
 800558c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005590:	9407      	str	r4, [sp, #28]

      /**TIM4 GPIO Configuration
      PB6     ------> TIM4_CH1
      PB7     ------> TIM4_CH2
      */
      GPIO_InitStruct.Pin = RENCA_Pin;
 8005592:	9303      	str	r3, [sp, #12]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
      HAL_GPIO_Init(RENCA_GPIO_Port, &GPIO_InitStruct);
 8005594:	f7fb fd2a 	bl	8000fec <HAL_GPIO_Init>


      GPIO_InitStruct.Pin = RENCB_Pin;
 8005598:	2340      	movs	r3, #64	; 0x40
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
      HAL_GPIO_Init(RENCB_GPIO_Port, &GPIO_InitStruct);
 800559a:	a903      	add	r1, sp, #12
 800559c:	480d      	ldr	r0, [pc, #52]	; (80055d4 <HAL_TIM_Encoder_MspInit+0xbc>)
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
      HAL_GPIO_Init(RENCA_GPIO_Port, &GPIO_InitStruct);


      GPIO_InitStruct.Pin = RENCB_Pin;
 800559e:	9303      	str	r3, [sp, #12]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055a0:	9404      	str	r4, [sp, #16]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 80055a2:	9605      	str	r6, [sp, #20]
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80055a4:	9506      	str	r5, [sp, #24]
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80055a6:	9407      	str	r4, [sp, #28]
      HAL_GPIO_Init(RENCB_GPIO_Port, &GPIO_InitStruct);
 80055a8:	f7fb fd20 	bl	8000fec <HAL_GPIO_Init>


      HAL_NVIC_SetPriority(TIM4_IRQn, 0, 2);
 80055ac:	201e      	movs	r0, #30
 80055ae:	4622      	mov	r2, r4
 80055b0:	2100      	movs	r1, #0
 80055b2:	f7fb f937 	bl	8000824 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80055b6:	201e      	movs	r0, #30
 80055b8:	f7fb f96c 	bl	8000894 <HAL_NVIC_EnableIRQ>
}
}
 80055bc:	b008      	add	sp, #32
 80055be:	bd70      	pop	{r4, r5, r6, pc}
 80055c0:	40010000 	.word	0x40010000
 80055c4:	40023800 	.word	0x40023800
 80055c8:	40021000 	.word	0x40021000
 80055cc:	40000800 	.word	0x40000800
 80055d0:	40020c00 	.word	0x40020c00
 80055d4:	40020400 	.word	0x40020400

080055d8 <HAL_TIM_PWM_MspInit>:
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM2)
 80055d8:	6803      	ldr	r3, [r0, #0]
      HAL_NVIC_SetPriority(TIM4_IRQn, 0, 2);
      HAL_NVIC_EnableIRQ(TIM4_IRQn);
}
}
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80055da:	b084      	sub	sp, #16

  if(htim_pwm->Instance==TIM2)
 80055dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055e0:	d10b      	bne.n	80055fa <HAL_TIM_PWM_MspInit+0x22>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80055e2:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80055e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055e8:	f042 0201 	orr.w	r2, r2, #1
 80055ec:	641a      	str	r2, [r3, #64]	; 0x40
 80055ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	9301      	str	r3, [sp, #4]
 80055f6:	9b01      	ldr	r3, [sp, #4]
 80055f8:	e01a      	b.n	8005630 <HAL_TIM_PWM_MspInit+0x58>

  }
  else if(htim_pwm->Instance==TIM3)
 80055fa:	4a0e      	ldr	r2, [pc, #56]	; (8005634 <HAL_TIM_PWM_MspInit+0x5c>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d10a      	bne.n	8005616 <HAL_TIM_PWM_MspInit+0x3e>
    {

      /* Peripheral clock enable */
      __HAL_RCC_TIM3_CLK_ENABLE();
 8005600:	4b0d      	ldr	r3, [pc, #52]	; (8005638 <HAL_TIM_PWM_MspInit+0x60>)
 8005602:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005604:	f042 0202 	orr.w	r2, r2, #2
 8005608:	641a      	str	r2, [r3, #64]	; 0x40
 800560a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	9302      	str	r3, [sp, #8]
 8005612:	9b02      	ldr	r3, [sp, #8]
 8005614:	e00c      	b.n	8005630 <HAL_TIM_PWM_MspInit+0x58>

    }

  else if(htim_pwm->Instance==TIM9)
 8005616:	4a09      	ldr	r2, [pc, #36]	; (800563c <HAL_TIM_PWM_MspInit+0x64>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d109      	bne.n	8005630 <HAL_TIM_PWM_MspInit+0x58>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 800561c:	4b06      	ldr	r3, [pc, #24]	; (8005638 <HAL_TIM_PWM_MspInit+0x60>)
 800561e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005620:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005624:	645a      	str	r2, [r3, #68]	; 0x44
 8005626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800562c:	9303      	str	r3, [sp, #12]
 800562e:	9b03      	ldr	r3, [sp, #12]

  }

}
 8005630:	b004      	add	sp, #16
 8005632:	4770      	bx	lr
 8005634:	40000400 	.word	0x40000400
 8005638:	40023800 	.word	0x40023800
 800563c:	40014000 	.word	0x40014000

08005640 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM2)
 8005640:	6803      	ldr	r3, [r0, #0]
 8005642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  }

}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005646:	b530      	push	{r4, r5, lr}
 8005648:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM2)
 800564a:	d10b      	bne.n	8005664 <HAL_TIM_MspPostInit+0x24>

    /**TIM2 GPIO Configuration    
    PA0/WKUP     ------> TIM2_CH1
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = RPWM_Pin|LPWM_Pin;
 800564c:	2305      	movs	r3, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800564e:	a901      	add	r1, sp, #4
 8005650:	481a      	ldr	r0, [pc, #104]	; (80056bc <HAL_TIM_MspPostInit+0x7c>)

    /**TIM2 GPIO Configuration    
    PA0/WKUP     ------> TIM2_CH1
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = RPWM_Pin|LPWM_Pin;
 8005652:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005654:	2302      	movs	r3, #2
 8005656:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005658:	2300      	movs	r3, #0
 800565a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800565c:	2301      	movs	r3, #1
 800565e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005660:	9305      	str	r3, [sp, #20]
 8005662:	e026      	b.n	80056b2 <HAL_TIM_MspPostInit+0x72>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  }

  else if(htim->Instance==TIM3)
 8005664:	4a16      	ldr	r2, [pc, #88]	; (80056c0 <HAL_TIM_MspPostInit+0x80>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d115      	bne.n	8005696 <HAL_TIM_MspPostInit+0x56>
      PC9     ------> TIM3_CH4
      PB4     ------> TIM3_CH1
      PB5     ------> TIM3_CH2
      */
      GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800566a:	2402      	movs	r4, #2
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800566c:	2500      	movs	r5, #0
      PC8     ------> TIM3_CH3
      PC9     ------> TIM3_CH4
      PB4     ------> TIM3_CH1
      PB5     ------> TIM3_CH2
      */
      GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800566e:	f44f 7340 	mov.w	r3, #768	; 0x300
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005672:	a901      	add	r1, sp, #4
 8005674:	4813      	ldr	r0, [pc, #76]	; (80056c4 <HAL_TIM_MspPostInit+0x84>)
      PC8     ------> TIM3_CH3
      PC9     ------> TIM3_CH4
      PB4     ------> TIM3_CH1
      PB5     ------> TIM3_CH2
      */
      GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005676:	9301      	str	r3, [sp, #4]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005678:	9402      	str	r4, [sp, #8]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800567a:	9503      	str	r5, [sp, #12]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800567c:	9504      	str	r5, [sp, #16]
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800567e:	9405      	str	r4, [sp, #20]
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005680:	f7fb fcb4 	bl	8000fec <HAL_GPIO_Init>

      GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005684:	2330      	movs	r3, #48	; 0x30
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005686:	9402      	str	r4, [sp, #8]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005688:	9503      	str	r5, [sp, #12]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800568a:	a901      	add	r1, sp, #4
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

      GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800568c:	9301      	str	r3, [sp, #4]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800568e:	9504      	str	r5, [sp, #16]
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005690:	9405      	str	r4, [sp, #20]
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005692:	480d      	ldr	r0, [pc, #52]	; (80056c8 <HAL_TIM_MspPostInit+0x88>)
 8005694:	e00d      	b.n	80056b2 <HAL_TIM_MspPostInit+0x72>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
    }

  else if(htim->Instance==TIM9)
 8005696:	4a0d      	ldr	r2, [pc, #52]	; (80056cc <HAL_TIM_MspPostInit+0x8c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d10c      	bne.n	80056b6 <HAL_TIM_MspPostInit+0x76>
  {
      /**TIM9 GPIO Configuration
      PE5     ------> TIM9_CH1
      */
      GPIO_InitStruct.Pin = BUZZER_Pin;
 800569c:	2320      	movs	r3, #32
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
      HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800569e:	a901      	add	r1, sp, #4
 80056a0:	480b      	ldr	r0, [pc, #44]	; (80056d0 <HAL_TIM_MspPostInit+0x90>)
  else if(htim->Instance==TIM9)
  {
      /**TIM9 GPIO Configuration
      PE5     ------> TIM9_CH1
      */
      GPIO_InitStruct.Pin = BUZZER_Pin;
 80056a2:	9301      	str	r3, [sp, #4]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056a4:	2302      	movs	r3, #2
 80056a6:	9302      	str	r3, [sp, #8]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056a8:	2300      	movs	r3, #0
 80056aa:	9303      	str	r3, [sp, #12]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056ac:	9304      	str	r3, [sp, #16]
      GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80056ae:	2303      	movs	r3, #3
 80056b0:	9305      	str	r3, [sp, #20]
      HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80056b2:	f7fb fc9b 	bl	8000fec <HAL_GPIO_Init>

  }

}
 80056b6:	b007      	add	sp, #28
 80056b8:	bd30      	pop	{r4, r5, pc}
 80056ba:	bf00      	nop
 80056bc:	40020000 	.word	0x40020000
 80056c0:	40000400 	.word	0x40000400
 80056c4:	40020800 	.word	0x40020800
 80056c8:	40020400 	.word	0x40020400
 80056cc:	40014000 	.word	0x40014000
 80056d0:	40021000 	.word	0x40021000

080056d4 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80056d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80056d6:	6802      	ldr	r2, [r0, #0]
 80056d8:	4b0f      	ldr	r3, [pc, #60]	; (8005718 <HAL_UART_MspInit+0x44>)
 80056da:	429a      	cmp	r2, r3
 80056dc:	d119      	bne.n	8005712 <HAL_UART_MspInit+0x3e>
  {

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80056de:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056e2:	a901      	add	r1, sp, #4
 80056e4:	480d      	ldr	r0, [pc, #52]	; (800571c <HAL_UART_MspInit+0x48>)
  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
  {

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80056e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056e8:	f042 0210 	orr.w	r2, r2, #16
 80056ec:	645a      	str	r2, [r3, #68]	; 0x44
 80056ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f0:	f003 0310 	and.w	r3, r3, #16
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	9b00      	ldr	r3, [sp, #0]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80056f8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80056fc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056fe:	2302      	movs	r3, #2
 8005700:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005702:	2301      	movs	r3, #1
 8005704:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005706:	2303      	movs	r3, #3
 8005708:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800570a:	2307      	movs	r3, #7
 800570c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800570e:	f7fb fc6d 	bl	8000fec <HAL_GPIO_Init>


  }

}
 8005712:	b007      	add	sp, #28
 8005714:	f85d fb04 	ldr.w	pc, [sp], #4
 8005718:	40011000 	.word	0x40011000
 800571c:	40020000 	.word	0x40020000

08005720 <NMI_Handler>:
 8005720:	4770      	bx	lr

08005722 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8005722:	e7fe      	b.n	8005722 <HardFault_Handler>

08005724 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8005724:	e7fe      	b.n	8005724 <MemManage_Handler>

08005726 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8005726:	e7fe      	b.n	8005726 <BusFault_Handler>

08005728 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8005728:	e7fe      	b.n	8005728 <UsageFault_Handler>

0800572a <SVC_Handler>:
 800572a:	4770      	bx	lr

0800572c <DebugMon_Handler>:
 800572c:	4770      	bx	lr

0800572e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800572e:	4770      	bx	lr

08005730 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8005730:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005732:	f7fa fe0f 	bl	8000354 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005736:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 800573a:	f7fb b8da 	b.w	80008f2 <HAL_SYSTICK_IRQHandler>

0800573e <EXTI15_10_IRQHandler>:
  /* USER CODE END SysTick_IRQn 1 */
}

void EXTI15_10_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800573e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005742:	f7fb bd47 	b.w	80011d4 <HAL_GPIO_EXTI_IRQHandler>

08005746 <EXTI9_5_IRQHandler>:
}

void EXTI9_5_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8005746:	2040      	movs	r0, #64	; 0x40
 8005748:	f7fb bd44 	b.w	80011d4 <HAL_GPIO_EXTI_IRQHandler>

0800574c <DMA2_Stream0_IRQHandler>:
}

void DMA2_Stream0_IRQHandler(void)
{
  HAL_DMA_IRQHandler(hadc1.DMA_Handle);
 800574c:	4b01      	ldr	r3, [pc, #4]	; (8005754 <DMA2_Stream0_IRQHandler+0x8>)
 800574e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005750:	f7fb b9f4 	b.w	8000b3c <HAL_DMA_IRQHandler>
 8005754:	20004a64 	.word	0x20004a64

08005758 <SPI1_IRQHandler>:
}

void SPI1_IRQHandler(void)
{
  HAL_SPI_IRQHandler(&hspi1);
 8005758:	4801      	ldr	r0, [pc, #4]	; (8005760 <SPI1_IRQHandler+0x8>)
 800575a:	f7fc bc35 	b.w	8001fc8 <HAL_SPI_IRQHandler>
 800575e:	bf00      	nop
 8005760:	2000524c 	.word	0x2000524c

08005764 <TIM1_CC_IRQHandler>:
}


void TIM1_CC_IRQHandler(void) {

 HAL_TIM_IRQHandler(&htim1);
 8005764:	4801      	ldr	r0, [pc, #4]	; (800576c <TIM1_CC_IRQHandler+0x8>)
 8005766:	f7fc bce6 	b.w	8002136 <HAL_TIM_IRQHandler>
 800576a:	bf00      	nop
 800576c:	200050f8 	.word	0x200050f8

08005770 <TIM4_IRQHandler>:

}

void TIM4_IRQHandler(void) {

 HAL_TIM_IRQHandler(&htim4);
 8005770:	4801      	ldr	r0, [pc, #4]	; (8005778 <TIM4_IRQHandler+0x8>)
 8005772:	f7fc bce0 	b.w	8002136 <HAL_TIM_IRQHandler>
 8005776:	bf00      	nop
 8005778:	200043a0 	.word	0x200043a0

0800577c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800577c:	490f      	ldr	r1, [pc, #60]	; (80057bc <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800577e:	2000      	movs	r0, #0
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005780:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005784:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800578c:	4b0c      	ldr	r3, [pc, #48]	; (80057c0 <SystemInit+0x44>)
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	f042 0201 	orr.w	r2, r2, #1
 8005794:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005796:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800579e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80057a2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80057a4:	4a07      	ldr	r2, [pc, #28]	; (80057c4 <SystemInit+0x48>)
 80057a6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80057ae:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80057b0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80057b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057b6:	608b      	str	r3, [r1, #8]
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	e000ed00 	.word	0xe000ed00
 80057c0:	40023800 	.word	0x40023800
 80057c4:	24003010 	.word	0x24003010

080057c8 <__libc_init_array>:
 80057c8:	b570      	push	{r4, r5, r6, lr}
 80057ca:	4b0e      	ldr	r3, [pc, #56]	; (8005804 <__libc_init_array+0x3c>)
 80057cc:	4c0e      	ldr	r4, [pc, #56]	; (8005808 <__libc_init_array+0x40>)
 80057ce:	1ae4      	subs	r4, r4, r3
 80057d0:	10a4      	asrs	r4, r4, #2
 80057d2:	2500      	movs	r5, #0
 80057d4:	461e      	mov	r6, r3
 80057d6:	42a5      	cmp	r5, r4
 80057d8:	d004      	beq.n	80057e4 <__libc_init_array+0x1c>
 80057da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057de:	4798      	blx	r3
 80057e0:	3501      	adds	r5, #1
 80057e2:	e7f8      	b.n	80057d6 <__libc_init_array+0xe>
 80057e4:	f000 fc4e 	bl	8006084 <_init>
 80057e8:	4c08      	ldr	r4, [pc, #32]	; (800580c <__libc_init_array+0x44>)
 80057ea:	4b09      	ldr	r3, [pc, #36]	; (8005810 <__libc_init_array+0x48>)
 80057ec:	1ae4      	subs	r4, r4, r3
 80057ee:	10a4      	asrs	r4, r4, #2
 80057f0:	2500      	movs	r5, #0
 80057f2:	461e      	mov	r6, r3
 80057f4:	42a5      	cmp	r5, r4
 80057f6:	d004      	beq.n	8005802 <__libc_init_array+0x3a>
 80057f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057fc:	4798      	blx	r3
 80057fe:	3501      	adds	r5, #1
 8005800:	e7f8      	b.n	80057f4 <__libc_init_array+0x2c>
 8005802:	bd70      	pop	{r4, r5, r6, pc}
 8005804:	08006530 	.word	0x08006530
 8005808:	08006530 	.word	0x08006530
 800580c:	08006534 	.word	0x08006534
 8005810:	08006530 	.word	0x08006530

08005814 <siprintf>:
 8005814:	b40e      	push	{r1, r2, r3}
 8005816:	b500      	push	{lr}
 8005818:	b09c      	sub	sp, #112	; 0x70
 800581a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800581e:	ab1d      	add	r3, sp, #116	; 0x74
 8005820:	f8ad 1014 	strh.w	r1, [sp, #20]
 8005824:	9002      	str	r0, [sp, #8]
 8005826:	9006      	str	r0, [sp, #24]
 8005828:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800582c:	480a      	ldr	r0, [pc, #40]	; (8005858 <siprintf+0x44>)
 800582e:	9104      	str	r1, [sp, #16]
 8005830:	9107      	str	r1, [sp, #28]
 8005832:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005836:	f853 2b04 	ldr.w	r2, [r3], #4
 800583a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800583e:	6800      	ldr	r0, [r0, #0]
 8005840:	9301      	str	r3, [sp, #4]
 8005842:	a902      	add	r1, sp, #8
 8005844:	f000 f86c 	bl	8005920 <_svfiprintf_r>
 8005848:	9b02      	ldr	r3, [sp, #8]
 800584a:	2200      	movs	r2, #0
 800584c:	701a      	strb	r2, [r3, #0]
 800584e:	b01c      	add	sp, #112	; 0x70
 8005850:	f85d eb04 	ldr.w	lr, [sp], #4
 8005854:	b003      	add	sp, #12
 8005856:	4770      	bx	lr
 8005858:	20000070 	.word	0x20000070

0800585c <strcpy>:
 800585c:	4603      	mov	r3, r0
 800585e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005862:	f803 2b01 	strb.w	r2, [r3], #1
 8005866:	2a00      	cmp	r2, #0
 8005868:	d1f9      	bne.n	800585e <strcpy+0x2>
 800586a:	4770      	bx	lr

0800586c <__ssputs_r>:
 800586c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005870:	688e      	ldr	r6, [r1, #8]
 8005872:	429e      	cmp	r6, r3
 8005874:	4682      	mov	sl, r0
 8005876:	460c      	mov	r4, r1
 8005878:	4691      	mov	r9, r2
 800587a:	4698      	mov	r8, r3
 800587c:	d83e      	bhi.n	80058fc <__ssputs_r+0x90>
 800587e:	898a      	ldrh	r2, [r1, #12]
 8005880:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005884:	d03a      	beq.n	80058fc <__ssputs_r+0x90>
 8005886:	6825      	ldr	r5, [r4, #0]
 8005888:	6909      	ldr	r1, [r1, #16]
 800588a:	1a6f      	subs	r7, r5, r1
 800588c:	6965      	ldr	r5, [r4, #20]
 800588e:	2302      	movs	r3, #2
 8005890:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005894:	fb95 f5f3 	sdiv	r5, r5, r3
 8005898:	1c7b      	adds	r3, r7, #1
 800589a:	4443      	add	r3, r8
 800589c:	429d      	cmp	r5, r3
 800589e:	bf38      	it	cc
 80058a0:	461d      	movcc	r5, r3
 80058a2:	0553      	lsls	r3, r2, #21
 80058a4:	d50f      	bpl.n	80058c6 <__ssputs_r+0x5a>
 80058a6:	4629      	mov	r1, r5
 80058a8:	f000 fb3e 	bl	8005f28 <_malloc_r>
 80058ac:	4606      	mov	r6, r0
 80058ae:	b198      	cbz	r0, 80058d8 <__ssputs_r+0x6c>
 80058b0:	463a      	mov	r2, r7
 80058b2:	6921      	ldr	r1, [r4, #16]
 80058b4:	f000 fac4 	bl	8005e40 <memcpy>
 80058b8:	89a3      	ldrh	r3, [r4, #12]
 80058ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80058be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058c2:	81a3      	strh	r3, [r4, #12]
 80058c4:	e013      	b.n	80058ee <__ssputs_r+0x82>
 80058c6:	462a      	mov	r2, r5
 80058c8:	f000 fb8c 	bl	8005fe4 <_realloc_r>
 80058cc:	4606      	mov	r6, r0
 80058ce:	b970      	cbnz	r0, 80058ee <__ssputs_r+0x82>
 80058d0:	6921      	ldr	r1, [r4, #16]
 80058d2:	4650      	mov	r0, sl
 80058d4:	f000 fada 	bl	8005e8c <_free_r>
 80058d8:	230c      	movs	r3, #12
 80058da:	f8ca 3000 	str.w	r3, [sl]
 80058de:	89a3      	ldrh	r3, [r4, #12]
 80058e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058e4:	81a3      	strh	r3, [r4, #12]
 80058e6:	f04f 30ff 	mov.w	r0, #4294967295
 80058ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058ee:	6126      	str	r6, [r4, #16]
 80058f0:	6165      	str	r5, [r4, #20]
 80058f2:	443e      	add	r6, r7
 80058f4:	1bed      	subs	r5, r5, r7
 80058f6:	6026      	str	r6, [r4, #0]
 80058f8:	60a5      	str	r5, [r4, #8]
 80058fa:	4646      	mov	r6, r8
 80058fc:	4546      	cmp	r6, r8
 80058fe:	bf28      	it	cs
 8005900:	4646      	movcs	r6, r8
 8005902:	4632      	mov	r2, r6
 8005904:	4649      	mov	r1, r9
 8005906:	6820      	ldr	r0, [r4, #0]
 8005908:	f000 faa5 	bl	8005e56 <memmove>
 800590c:	68a3      	ldr	r3, [r4, #8]
 800590e:	1b9b      	subs	r3, r3, r6
 8005910:	60a3      	str	r3, [r4, #8]
 8005912:	6823      	ldr	r3, [r4, #0]
 8005914:	441e      	add	r6, r3
 8005916:	6026      	str	r6, [r4, #0]
 8005918:	2000      	movs	r0, #0
 800591a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08005920 <_svfiprintf_r>:
 8005920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005924:	b09d      	sub	sp, #116	; 0x74
 8005926:	4680      	mov	r8, r0
 8005928:	9303      	str	r3, [sp, #12]
 800592a:	898b      	ldrh	r3, [r1, #12]
 800592c:	061c      	lsls	r4, r3, #24
 800592e:	460d      	mov	r5, r1
 8005930:	4616      	mov	r6, r2
 8005932:	d50d      	bpl.n	8005950 <_svfiprintf_r+0x30>
 8005934:	690b      	ldr	r3, [r1, #16]
 8005936:	b95b      	cbnz	r3, 8005950 <_svfiprintf_r+0x30>
 8005938:	2140      	movs	r1, #64	; 0x40
 800593a:	f000 faf5 	bl	8005f28 <_malloc_r>
 800593e:	6028      	str	r0, [r5, #0]
 8005940:	6128      	str	r0, [r5, #16]
 8005942:	b918      	cbnz	r0, 800594c <_svfiprintf_r+0x2c>
 8005944:	230c      	movs	r3, #12
 8005946:	f8c8 3000 	str.w	r3, [r8]
 800594a:	e0cd      	b.n	8005ae8 <_svfiprintf_r+0x1c8>
 800594c:	2340      	movs	r3, #64	; 0x40
 800594e:	616b      	str	r3, [r5, #20]
 8005950:	2300      	movs	r3, #0
 8005952:	9309      	str	r3, [sp, #36]	; 0x24
 8005954:	2320      	movs	r3, #32
 8005956:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800595a:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8005af8 <_svfiprintf_r+0x1d8>
 800595e:	2330      	movs	r3, #48	; 0x30
 8005960:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005964:	4637      	mov	r7, r6
 8005966:	463c      	mov	r4, r7
 8005968:	f814 3b01 	ldrb.w	r3, [r4], #1
 800596c:	b91b      	cbnz	r3, 8005976 <_svfiprintf_r+0x56>
 800596e:	ebb7 0906 	subs.w	r9, r7, r6
 8005972:	d010      	beq.n	8005996 <_svfiprintf_r+0x76>
 8005974:	e003      	b.n	800597e <_svfiprintf_r+0x5e>
 8005976:	2b25      	cmp	r3, #37	; 0x25
 8005978:	d0f9      	beq.n	800596e <_svfiprintf_r+0x4e>
 800597a:	4627      	mov	r7, r4
 800597c:	e7f3      	b.n	8005966 <_svfiprintf_r+0x46>
 800597e:	464b      	mov	r3, r9
 8005980:	4632      	mov	r2, r6
 8005982:	4629      	mov	r1, r5
 8005984:	4640      	mov	r0, r8
 8005986:	f7ff ff71 	bl	800586c <__ssputs_r>
 800598a:	3001      	adds	r0, #1
 800598c:	f000 80a7 	beq.w	8005ade <_svfiprintf_r+0x1be>
 8005990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005992:	444b      	add	r3, r9
 8005994:	9309      	str	r3, [sp, #36]	; 0x24
 8005996:	783b      	ldrb	r3, [r7, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	f000 80a0 	beq.w	8005ade <_svfiprintf_r+0x1be>
 800599e:	2300      	movs	r3, #0
 80059a0:	f04f 32ff 	mov.w	r2, #4294967295
 80059a4:	9304      	str	r3, [sp, #16]
 80059a6:	9307      	str	r3, [sp, #28]
 80059a8:	9205      	str	r2, [sp, #20]
 80059aa:	9306      	str	r3, [sp, #24]
 80059ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059b0:	931a      	str	r3, [sp, #104]	; 0x68
 80059b2:	2601      	movs	r6, #1
 80059b4:	2205      	movs	r2, #5
 80059b6:	7821      	ldrb	r1, [r4, #0]
 80059b8:	484e      	ldr	r0, [pc, #312]	; (8005af4 <_svfiprintf_r+0x1d4>)
 80059ba:	f7fa fc31 	bl	8000220 <memchr>
 80059be:	1c67      	adds	r7, r4, #1
 80059c0:	9b04      	ldr	r3, [sp, #16]
 80059c2:	b138      	cbz	r0, 80059d4 <_svfiprintf_r+0xb4>
 80059c4:	4a4b      	ldr	r2, [pc, #300]	; (8005af4 <_svfiprintf_r+0x1d4>)
 80059c6:	1a80      	subs	r0, r0, r2
 80059c8:	fa06 f000 	lsl.w	r0, r6, r0
 80059cc:	4318      	orrs	r0, r3
 80059ce:	9004      	str	r0, [sp, #16]
 80059d0:	463c      	mov	r4, r7
 80059d2:	e7ef      	b.n	80059b4 <_svfiprintf_r+0x94>
 80059d4:	06d9      	lsls	r1, r3, #27
 80059d6:	bf44      	itt	mi
 80059d8:	2220      	movmi	r2, #32
 80059da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80059de:	071a      	lsls	r2, r3, #28
 80059e0:	bf44      	itt	mi
 80059e2:	222b      	movmi	r2, #43	; 0x2b
 80059e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80059e8:	7822      	ldrb	r2, [r4, #0]
 80059ea:	2a2a      	cmp	r2, #42	; 0x2a
 80059ec:	d003      	beq.n	80059f6 <_svfiprintf_r+0xd6>
 80059ee:	9a07      	ldr	r2, [sp, #28]
 80059f0:	2100      	movs	r1, #0
 80059f2:	200a      	movs	r0, #10
 80059f4:	e00b      	b.n	8005a0e <_svfiprintf_r+0xee>
 80059f6:	9a03      	ldr	r2, [sp, #12]
 80059f8:	1d11      	adds	r1, r2, #4
 80059fa:	6812      	ldr	r2, [r2, #0]
 80059fc:	9103      	str	r1, [sp, #12]
 80059fe:	2a00      	cmp	r2, #0
 8005a00:	da10      	bge.n	8005a24 <_svfiprintf_r+0x104>
 8005a02:	4252      	negs	r2, r2
 8005a04:	f043 0002 	orr.w	r0, r3, #2
 8005a08:	9207      	str	r2, [sp, #28]
 8005a0a:	9004      	str	r0, [sp, #16]
 8005a0c:	e00b      	b.n	8005a26 <_svfiprintf_r+0x106>
 8005a0e:	4627      	mov	r7, r4
 8005a10:	3401      	adds	r4, #1
 8005a12:	783b      	ldrb	r3, [r7, #0]
 8005a14:	3b30      	subs	r3, #48	; 0x30
 8005a16:	2b09      	cmp	r3, #9
 8005a18:	d803      	bhi.n	8005a22 <_svfiprintf_r+0x102>
 8005a1a:	fb00 3202 	mla	r2, r0, r2, r3
 8005a1e:	2101      	movs	r1, #1
 8005a20:	e7f5      	b.n	8005a0e <_svfiprintf_r+0xee>
 8005a22:	b101      	cbz	r1, 8005a26 <_svfiprintf_r+0x106>
 8005a24:	9207      	str	r2, [sp, #28]
 8005a26:	783b      	ldrb	r3, [r7, #0]
 8005a28:	2b2e      	cmp	r3, #46	; 0x2e
 8005a2a:	d11e      	bne.n	8005a6a <_svfiprintf_r+0x14a>
 8005a2c:	787b      	ldrb	r3, [r7, #1]
 8005a2e:	2b2a      	cmp	r3, #42	; 0x2a
 8005a30:	d10a      	bne.n	8005a48 <_svfiprintf_r+0x128>
 8005a32:	9b03      	ldr	r3, [sp, #12]
 8005a34:	1d1a      	adds	r2, r3, #4
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	9203      	str	r2, [sp, #12]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	bfb8      	it	lt
 8005a3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a42:	3702      	adds	r7, #2
 8005a44:	9305      	str	r3, [sp, #20]
 8005a46:	e010      	b.n	8005a6a <_svfiprintf_r+0x14a>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	9305      	str	r3, [sp, #20]
 8005a4c:	1c78      	adds	r0, r7, #1
 8005a4e:	4619      	mov	r1, r3
 8005a50:	240a      	movs	r4, #10
 8005a52:	4607      	mov	r7, r0
 8005a54:	3001      	adds	r0, #1
 8005a56:	783a      	ldrb	r2, [r7, #0]
 8005a58:	3a30      	subs	r2, #48	; 0x30
 8005a5a:	2a09      	cmp	r2, #9
 8005a5c:	d803      	bhi.n	8005a66 <_svfiprintf_r+0x146>
 8005a5e:	fb04 2101 	mla	r1, r4, r1, r2
 8005a62:	2301      	movs	r3, #1
 8005a64:	e7f5      	b.n	8005a52 <_svfiprintf_r+0x132>
 8005a66:	b103      	cbz	r3, 8005a6a <_svfiprintf_r+0x14a>
 8005a68:	9105      	str	r1, [sp, #20]
 8005a6a:	2203      	movs	r2, #3
 8005a6c:	7839      	ldrb	r1, [r7, #0]
 8005a6e:	4822      	ldr	r0, [pc, #136]	; (8005af8 <_svfiprintf_r+0x1d8>)
 8005a70:	f7fa fbd6 	bl	8000220 <memchr>
 8005a74:	b140      	cbz	r0, 8005a88 <_svfiprintf_r+0x168>
 8005a76:	2340      	movs	r3, #64	; 0x40
 8005a78:	ebcb 0000 	rsb	r0, fp, r0
 8005a7c:	fa03 f000 	lsl.w	r0, r3, r0
 8005a80:	9b04      	ldr	r3, [sp, #16]
 8005a82:	4318      	orrs	r0, r3
 8005a84:	9004      	str	r0, [sp, #16]
 8005a86:	3701      	adds	r7, #1
 8005a88:	7839      	ldrb	r1, [r7, #0]
 8005a8a:	481c      	ldr	r0, [pc, #112]	; (8005afc <_svfiprintf_r+0x1dc>)
 8005a8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a90:	2206      	movs	r2, #6
 8005a92:	1c7e      	adds	r6, r7, #1
 8005a94:	f7fa fbc4 	bl	8000220 <memchr>
 8005a98:	b188      	cbz	r0, 8005abe <_svfiprintf_r+0x19e>
 8005a9a:	4b19      	ldr	r3, [pc, #100]	; (8005b00 <_svfiprintf_r+0x1e0>)
 8005a9c:	b933      	cbnz	r3, 8005aac <_svfiprintf_r+0x18c>
 8005a9e:	9b03      	ldr	r3, [sp, #12]
 8005aa0:	3307      	adds	r3, #7
 8005aa2:	f023 0307 	bic.w	r3, r3, #7
 8005aa6:	3308      	adds	r3, #8
 8005aa8:	9303      	str	r3, [sp, #12]
 8005aaa:	e014      	b.n	8005ad6 <_svfiprintf_r+0x1b6>
 8005aac:	ab03      	add	r3, sp, #12
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	462a      	mov	r2, r5
 8005ab2:	4b14      	ldr	r3, [pc, #80]	; (8005b04 <_svfiprintf_r+0x1e4>)
 8005ab4:	a904      	add	r1, sp, #16
 8005ab6:	4640      	mov	r0, r8
 8005ab8:	f3af 8000 	nop.w
 8005abc:	e007      	b.n	8005ace <_svfiprintf_r+0x1ae>
 8005abe:	ab03      	add	r3, sp, #12
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	462a      	mov	r2, r5
 8005ac4:	4b0f      	ldr	r3, [pc, #60]	; (8005b04 <_svfiprintf_r+0x1e4>)
 8005ac6:	a904      	add	r1, sp, #16
 8005ac8:	4640      	mov	r0, r8
 8005aca:	f000 f893 	bl	8005bf4 <_printf_i>
 8005ace:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005ad2:	4682      	mov	sl, r0
 8005ad4:	d003      	beq.n	8005ade <_svfiprintf_r+0x1be>
 8005ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ad8:	4453      	add	r3, sl
 8005ada:	9309      	str	r3, [sp, #36]	; 0x24
 8005adc:	e742      	b.n	8005964 <_svfiprintf_r+0x44>
 8005ade:	89ab      	ldrh	r3, [r5, #12]
 8005ae0:	065b      	lsls	r3, r3, #25
 8005ae2:	d401      	bmi.n	8005ae8 <_svfiprintf_r+0x1c8>
 8005ae4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ae6:	e001      	b.n	8005aec <_svfiprintf_r+0x1cc>
 8005ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8005aec:	b01d      	add	sp, #116	; 0x74
 8005aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af2:	bf00      	nop
 8005af4:	080064fc 	.word	0x080064fc
 8005af8:	08006502 	.word	0x08006502
 8005afc:	08006506 	.word	0x08006506
 8005b00:	00000000 	.word	0x00000000
 8005b04:	0800586d 	.word	0x0800586d

08005b08 <_printf_common>:
 8005b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b0c:	4691      	mov	r9, r2
 8005b0e:	461f      	mov	r7, r3
 8005b10:	690a      	ldr	r2, [r1, #16]
 8005b12:	688b      	ldr	r3, [r1, #8]
 8005b14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	bfb8      	it	lt
 8005b1c:	4613      	movlt	r3, r2
 8005b1e:	f8c9 3000 	str.w	r3, [r9]
 8005b22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b26:	4606      	mov	r6, r0
 8005b28:	460c      	mov	r4, r1
 8005b2a:	b112      	cbz	r2, 8005b32 <_printf_common+0x2a>
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	f8c9 3000 	str.w	r3, [r9]
 8005b32:	6823      	ldr	r3, [r4, #0]
 8005b34:	0699      	lsls	r1, r3, #26
 8005b36:	bf42      	ittt	mi
 8005b38:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005b3c:	3302      	addmi	r3, #2
 8005b3e:	f8c9 3000 	strmi.w	r3, [r9]
 8005b42:	6825      	ldr	r5, [r4, #0]
 8005b44:	f015 0506 	ands.w	r5, r5, #6
 8005b48:	d110      	bne.n	8005b6c <_printf_common+0x64>
 8005b4a:	f104 0a19 	add.w	sl, r4, #25
 8005b4e:	e007      	b.n	8005b60 <_printf_common+0x58>
 8005b50:	2301      	movs	r3, #1
 8005b52:	4652      	mov	r2, sl
 8005b54:	4639      	mov	r1, r7
 8005b56:	4630      	mov	r0, r6
 8005b58:	47c0      	blx	r8
 8005b5a:	3001      	adds	r0, #1
 8005b5c:	d01a      	beq.n	8005b94 <_printf_common+0x8c>
 8005b5e:	3501      	adds	r5, #1
 8005b60:	68e3      	ldr	r3, [r4, #12]
 8005b62:	f8d9 2000 	ldr.w	r2, [r9]
 8005b66:	1a9b      	subs	r3, r3, r2
 8005b68:	429d      	cmp	r5, r3
 8005b6a:	dbf1      	blt.n	8005b50 <_printf_common+0x48>
 8005b6c:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005b70:	6822      	ldr	r2, [r4, #0]
 8005b72:	3300      	adds	r3, #0
 8005b74:	bf18      	it	ne
 8005b76:	2301      	movne	r3, #1
 8005b78:	0692      	lsls	r2, r2, #26
 8005b7a:	d50f      	bpl.n	8005b9c <_printf_common+0x94>
 8005b7c:	18e1      	adds	r1, r4, r3
 8005b7e:	1c5a      	adds	r2, r3, #1
 8005b80:	2030      	movs	r0, #48	; 0x30
 8005b82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b86:	4422      	add	r2, r4
 8005b88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b90:	3302      	adds	r3, #2
 8005b92:	e003      	b.n	8005b9c <_printf_common+0x94>
 8005b94:	f04f 30ff 	mov.w	r0, #4294967295
 8005b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ba0:	4639      	mov	r1, r7
 8005ba2:	4630      	mov	r0, r6
 8005ba4:	47c0      	blx	r8
 8005ba6:	3001      	adds	r0, #1
 8005ba8:	d0f4      	beq.n	8005b94 <_printf_common+0x8c>
 8005baa:	6822      	ldr	r2, [r4, #0]
 8005bac:	f8d9 5000 	ldr.w	r5, [r9]
 8005bb0:	68e3      	ldr	r3, [r4, #12]
 8005bb2:	f002 0206 	and.w	r2, r2, #6
 8005bb6:	2a04      	cmp	r2, #4
 8005bb8:	bf08      	it	eq
 8005bba:	1b5d      	subeq	r5, r3, r5
 8005bbc:	6922      	ldr	r2, [r4, #16]
 8005bbe:	68a3      	ldr	r3, [r4, #8]
 8005bc0:	bf0c      	ite	eq
 8005bc2:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bc6:	2500      	movne	r5, #0
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	bfc4      	itt	gt
 8005bcc:	1a9b      	subgt	r3, r3, r2
 8005bce:	18ed      	addgt	r5, r5, r3
 8005bd0:	f04f 0900 	mov.w	r9, #0
 8005bd4:	341a      	adds	r4, #26
 8005bd6:	454d      	cmp	r5, r9
 8005bd8:	d009      	beq.n	8005bee <_printf_common+0xe6>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	4622      	mov	r2, r4
 8005bde:	4639      	mov	r1, r7
 8005be0:	4630      	mov	r0, r6
 8005be2:	47c0      	blx	r8
 8005be4:	3001      	adds	r0, #1
 8005be6:	d0d5      	beq.n	8005b94 <_printf_common+0x8c>
 8005be8:	f109 0901 	add.w	r9, r9, #1
 8005bec:	e7f3      	b.n	8005bd6 <_printf_common+0xce>
 8005bee:	2000      	movs	r0, #0
 8005bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005bf4 <_printf_i>:
 8005bf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005bf8:	4617      	mov	r7, r2
 8005bfa:	7e0a      	ldrb	r2, [r1, #24]
 8005bfc:	b085      	sub	sp, #20
 8005bfe:	2a6e      	cmp	r2, #110	; 0x6e
 8005c00:	4698      	mov	r8, r3
 8005c02:	4606      	mov	r6, r0
 8005c04:	460c      	mov	r4, r1
 8005c06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c08:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005c0c:	f000 80ae 	beq.w	8005d6c <_printf_i+0x178>
 8005c10:	d811      	bhi.n	8005c36 <_printf_i+0x42>
 8005c12:	2a63      	cmp	r2, #99	; 0x63
 8005c14:	d022      	beq.n	8005c5c <_printf_i+0x68>
 8005c16:	d809      	bhi.n	8005c2c <_printf_i+0x38>
 8005c18:	2a00      	cmp	r2, #0
 8005c1a:	f000 80bb 	beq.w	8005d94 <_printf_i+0x1a0>
 8005c1e:	2a58      	cmp	r2, #88	; 0x58
 8005c20:	f040 80ca 	bne.w	8005db8 <_printf_i+0x1c4>
 8005c24:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005c28:	4983      	ldr	r1, [pc, #524]	; (8005e38 <_printf_i+0x244>)
 8005c2a:	e055      	b.n	8005cd8 <_printf_i+0xe4>
 8005c2c:	2a64      	cmp	r2, #100	; 0x64
 8005c2e:	d01e      	beq.n	8005c6e <_printf_i+0x7a>
 8005c30:	2a69      	cmp	r2, #105	; 0x69
 8005c32:	d01c      	beq.n	8005c6e <_printf_i+0x7a>
 8005c34:	e0c0      	b.n	8005db8 <_printf_i+0x1c4>
 8005c36:	2a73      	cmp	r2, #115	; 0x73
 8005c38:	f000 80b0 	beq.w	8005d9c <_printf_i+0x1a8>
 8005c3c:	d809      	bhi.n	8005c52 <_printf_i+0x5e>
 8005c3e:	2a6f      	cmp	r2, #111	; 0x6f
 8005c40:	d02e      	beq.n	8005ca0 <_printf_i+0xac>
 8005c42:	2a70      	cmp	r2, #112	; 0x70
 8005c44:	f040 80b8 	bne.w	8005db8 <_printf_i+0x1c4>
 8005c48:	680a      	ldr	r2, [r1, #0]
 8005c4a:	f042 0220 	orr.w	r2, r2, #32
 8005c4e:	600a      	str	r2, [r1, #0]
 8005c50:	e03e      	b.n	8005cd0 <_printf_i+0xdc>
 8005c52:	2a75      	cmp	r2, #117	; 0x75
 8005c54:	d024      	beq.n	8005ca0 <_printf_i+0xac>
 8005c56:	2a78      	cmp	r2, #120	; 0x78
 8005c58:	d03a      	beq.n	8005cd0 <_printf_i+0xdc>
 8005c5a:	e0ad      	b.n	8005db8 <_printf_i+0x1c4>
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8005c62:	1d11      	adds	r1, r2, #4
 8005c64:	6019      	str	r1, [r3, #0]
 8005c66:	6813      	ldr	r3, [r2, #0]
 8005c68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c6c:	e0a8      	b.n	8005dc0 <_printf_i+0x1cc>
 8005c6e:	6821      	ldr	r1, [r4, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005c76:	d002      	beq.n	8005c7e <_printf_i+0x8a>
 8005c78:	1d11      	adds	r1, r2, #4
 8005c7a:	6019      	str	r1, [r3, #0]
 8005c7c:	e008      	b.n	8005c90 <_printf_i+0x9c>
 8005c7e:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005c82:	f102 0104 	add.w	r1, r2, #4
 8005c86:	6019      	str	r1, [r3, #0]
 8005c88:	d002      	beq.n	8005c90 <_printf_i+0x9c>
 8005c8a:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005c8e:	e000      	b.n	8005c92 <_printf_i+0x9e>
 8005c90:	6813      	ldr	r3, [r2, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	da3c      	bge.n	8005d10 <_printf_i+0x11c>
 8005c96:	222d      	movs	r2, #45	; 0x2d
 8005c98:	425b      	negs	r3, r3
 8005c9a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005c9e:	e037      	b.n	8005d10 <_printf_i+0x11c>
 8005ca0:	6821      	ldr	r1, [r4, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005ca8:	d002      	beq.n	8005cb0 <_printf_i+0xbc>
 8005caa:	1d11      	adds	r1, r2, #4
 8005cac:	6019      	str	r1, [r3, #0]
 8005cae:	e007      	b.n	8005cc0 <_printf_i+0xcc>
 8005cb0:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005cb4:	f102 0104 	add.w	r1, r2, #4
 8005cb8:	6019      	str	r1, [r3, #0]
 8005cba:	d001      	beq.n	8005cc0 <_printf_i+0xcc>
 8005cbc:	8813      	ldrh	r3, [r2, #0]
 8005cbe:	e000      	b.n	8005cc2 <_printf_i+0xce>
 8005cc0:	6813      	ldr	r3, [r2, #0]
 8005cc2:	7e22      	ldrb	r2, [r4, #24]
 8005cc4:	495c      	ldr	r1, [pc, #368]	; (8005e38 <_printf_i+0x244>)
 8005cc6:	2a6f      	cmp	r2, #111	; 0x6f
 8005cc8:	bf14      	ite	ne
 8005cca:	220a      	movne	r2, #10
 8005ccc:	2208      	moveq	r2, #8
 8005cce:	e01b      	b.n	8005d08 <_printf_i+0x114>
 8005cd0:	2278      	movs	r2, #120	; 0x78
 8005cd2:	495a      	ldr	r1, [pc, #360]	; (8005e3c <_printf_i+0x248>)
 8005cd4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005cd8:	6822      	ldr	r2, [r4, #0]
 8005cda:	6818      	ldr	r0, [r3, #0]
 8005cdc:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005ce0:	f100 0504 	add.w	r5, r0, #4
 8005ce4:	601d      	str	r5, [r3, #0]
 8005ce6:	d103      	bne.n	8005cf0 <_printf_i+0xfc>
 8005ce8:	0655      	lsls	r5, r2, #25
 8005cea:	d501      	bpl.n	8005cf0 <_printf_i+0xfc>
 8005cec:	8803      	ldrh	r3, [r0, #0]
 8005cee:	e000      	b.n	8005cf2 <_printf_i+0xfe>
 8005cf0:	6803      	ldr	r3, [r0, #0]
 8005cf2:	07d0      	lsls	r0, r2, #31
 8005cf4:	bf44      	itt	mi
 8005cf6:	f042 0220 	orrmi.w	r2, r2, #32
 8005cfa:	6022      	strmi	r2, [r4, #0]
 8005cfc:	b91b      	cbnz	r3, 8005d06 <_printf_i+0x112>
 8005cfe:	6822      	ldr	r2, [r4, #0]
 8005d00:	f022 0220 	bic.w	r2, r2, #32
 8005d04:	6022      	str	r2, [r4, #0]
 8005d06:	2210      	movs	r2, #16
 8005d08:	2000      	movs	r0, #0
 8005d0a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005d0e:	e001      	b.n	8005d14 <_printf_i+0x120>
 8005d10:	4949      	ldr	r1, [pc, #292]	; (8005e38 <_printf_i+0x244>)
 8005d12:	220a      	movs	r2, #10
 8005d14:	6865      	ldr	r5, [r4, #4]
 8005d16:	60a5      	str	r5, [r4, #8]
 8005d18:	2d00      	cmp	r5, #0
 8005d1a:	db08      	blt.n	8005d2e <_printf_i+0x13a>
 8005d1c:	6820      	ldr	r0, [r4, #0]
 8005d1e:	f020 0004 	bic.w	r0, r0, #4
 8005d22:	6020      	str	r0, [r4, #0]
 8005d24:	b92b      	cbnz	r3, 8005d32 <_printf_i+0x13e>
 8005d26:	2d00      	cmp	r5, #0
 8005d28:	d17d      	bne.n	8005e26 <_printf_i+0x232>
 8005d2a:	4675      	mov	r5, lr
 8005d2c:	e00c      	b.n	8005d48 <_printf_i+0x154>
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d079      	beq.n	8005e26 <_printf_i+0x232>
 8005d32:	4675      	mov	r5, lr
 8005d34:	fbb3 f0f2 	udiv	r0, r3, r2
 8005d38:	fb02 3310 	mls	r3, r2, r0, r3
 8005d3c:	5ccb      	ldrb	r3, [r1, r3]
 8005d3e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005d42:	4603      	mov	r3, r0
 8005d44:	2800      	cmp	r0, #0
 8005d46:	d1f5      	bne.n	8005d34 <_printf_i+0x140>
 8005d48:	2a08      	cmp	r2, #8
 8005d4a:	d10b      	bne.n	8005d64 <_printf_i+0x170>
 8005d4c:	6823      	ldr	r3, [r4, #0]
 8005d4e:	07da      	lsls	r2, r3, #31
 8005d50:	d508      	bpl.n	8005d64 <_printf_i+0x170>
 8005d52:	6923      	ldr	r3, [r4, #16]
 8005d54:	6862      	ldr	r2, [r4, #4]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	bfde      	ittt	le
 8005d5a:	2330      	movle	r3, #48	; 0x30
 8005d5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d60:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d64:	ebc5 030e 	rsb	r3, r5, lr
 8005d68:	6123      	str	r3, [r4, #16]
 8005d6a:	e02e      	b.n	8005dca <_printf_i+0x1d6>
 8005d6c:	6808      	ldr	r0, [r1, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	6949      	ldr	r1, [r1, #20]
 8005d72:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005d76:	d003      	beq.n	8005d80 <_printf_i+0x18c>
 8005d78:	1d10      	adds	r0, r2, #4
 8005d7a:	6018      	str	r0, [r3, #0]
 8005d7c:	6813      	ldr	r3, [r2, #0]
 8005d7e:	e008      	b.n	8005d92 <_printf_i+0x19e>
 8005d80:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d84:	f102 0004 	add.w	r0, r2, #4
 8005d88:	6018      	str	r0, [r3, #0]
 8005d8a:	6813      	ldr	r3, [r2, #0]
 8005d8c:	d001      	beq.n	8005d92 <_printf_i+0x19e>
 8005d8e:	8019      	strh	r1, [r3, #0]
 8005d90:	e000      	b.n	8005d94 <_printf_i+0x1a0>
 8005d92:	6019      	str	r1, [r3, #0]
 8005d94:	2300      	movs	r3, #0
 8005d96:	6123      	str	r3, [r4, #16]
 8005d98:	4675      	mov	r5, lr
 8005d9a:	e016      	b.n	8005dca <_printf_i+0x1d6>
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	1d11      	adds	r1, r2, #4
 8005da0:	6019      	str	r1, [r3, #0]
 8005da2:	6815      	ldr	r5, [r2, #0]
 8005da4:	6862      	ldr	r2, [r4, #4]
 8005da6:	2100      	movs	r1, #0
 8005da8:	4628      	mov	r0, r5
 8005daa:	f7fa fa39 	bl	8000220 <memchr>
 8005dae:	b108      	cbz	r0, 8005db4 <_printf_i+0x1c0>
 8005db0:	1b40      	subs	r0, r0, r5
 8005db2:	6060      	str	r0, [r4, #4]
 8005db4:	6863      	ldr	r3, [r4, #4]
 8005db6:	e004      	b.n	8005dc2 <_printf_i+0x1ce>
 8005db8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dbc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	6123      	str	r3, [r4, #16]
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dca:	f8cd 8000 	str.w	r8, [sp]
 8005dce:	463b      	mov	r3, r7
 8005dd0:	aa03      	add	r2, sp, #12
 8005dd2:	4621      	mov	r1, r4
 8005dd4:	4630      	mov	r0, r6
 8005dd6:	f7ff fe97 	bl	8005b08 <_printf_common>
 8005dda:	3001      	adds	r0, #1
 8005ddc:	d102      	bne.n	8005de4 <_printf_i+0x1f0>
 8005dde:	f04f 30ff 	mov.w	r0, #4294967295
 8005de2:	e026      	b.n	8005e32 <_printf_i+0x23e>
 8005de4:	6923      	ldr	r3, [r4, #16]
 8005de6:	462a      	mov	r2, r5
 8005de8:	4639      	mov	r1, r7
 8005dea:	4630      	mov	r0, r6
 8005dec:	47c0      	blx	r8
 8005dee:	3001      	adds	r0, #1
 8005df0:	d0f5      	beq.n	8005dde <_printf_i+0x1ea>
 8005df2:	6823      	ldr	r3, [r4, #0]
 8005df4:	079b      	lsls	r3, r3, #30
 8005df6:	d510      	bpl.n	8005e1a <_printf_i+0x226>
 8005df8:	2500      	movs	r5, #0
 8005dfa:	f104 0919 	add.w	r9, r4, #25
 8005dfe:	e007      	b.n	8005e10 <_printf_i+0x21c>
 8005e00:	2301      	movs	r3, #1
 8005e02:	464a      	mov	r2, r9
 8005e04:	4639      	mov	r1, r7
 8005e06:	4630      	mov	r0, r6
 8005e08:	47c0      	blx	r8
 8005e0a:	3001      	adds	r0, #1
 8005e0c:	d0e7      	beq.n	8005dde <_printf_i+0x1ea>
 8005e0e:	3501      	adds	r5, #1
 8005e10:	68e3      	ldr	r3, [r4, #12]
 8005e12:	9a03      	ldr	r2, [sp, #12]
 8005e14:	1a9b      	subs	r3, r3, r2
 8005e16:	429d      	cmp	r5, r3
 8005e18:	dbf2      	blt.n	8005e00 <_printf_i+0x20c>
 8005e1a:	68e0      	ldr	r0, [r4, #12]
 8005e1c:	9b03      	ldr	r3, [sp, #12]
 8005e1e:	4298      	cmp	r0, r3
 8005e20:	bfb8      	it	lt
 8005e22:	4618      	movlt	r0, r3
 8005e24:	e005      	b.n	8005e32 <_printf_i+0x23e>
 8005e26:	780b      	ldrb	r3, [r1, #0]
 8005e28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e30:	e78a      	b.n	8005d48 <_printf_i+0x154>
 8005e32:	b005      	add	sp, #20
 8005e34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e38:	0800650d 	.word	0x0800650d
 8005e3c:	0800651e 	.word	0x0800651e

08005e40 <memcpy>:
 8005e40:	b510      	push	{r4, lr}
 8005e42:	1e43      	subs	r3, r0, #1
 8005e44:	440a      	add	r2, r1
 8005e46:	4291      	cmp	r1, r2
 8005e48:	d004      	beq.n	8005e54 <memcpy+0x14>
 8005e4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e52:	e7f8      	b.n	8005e46 <memcpy+0x6>
 8005e54:	bd10      	pop	{r4, pc}

08005e56 <memmove>:
 8005e56:	4288      	cmp	r0, r1
 8005e58:	b510      	push	{r4, lr}
 8005e5a:	eb01 0302 	add.w	r3, r1, r2
 8005e5e:	d801      	bhi.n	8005e64 <memmove+0xe>
 8005e60:	1e42      	subs	r2, r0, #1
 8005e62:	e00b      	b.n	8005e7c <memmove+0x26>
 8005e64:	4298      	cmp	r0, r3
 8005e66:	d2fb      	bcs.n	8005e60 <memmove+0xa>
 8005e68:	1881      	adds	r1, r0, r2
 8005e6a:	1ad2      	subs	r2, r2, r3
 8005e6c:	42d3      	cmn	r3, r2
 8005e6e:	d004      	beq.n	8005e7a <memmove+0x24>
 8005e70:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e74:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005e78:	e7f8      	b.n	8005e6c <memmove+0x16>
 8005e7a:	bd10      	pop	{r4, pc}
 8005e7c:	4299      	cmp	r1, r3
 8005e7e:	d004      	beq.n	8005e8a <memmove+0x34>
 8005e80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e84:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005e88:	e7f8      	b.n	8005e7c <memmove+0x26>
 8005e8a:	bd10      	pop	{r4, pc}

08005e8c <_free_r>:
 8005e8c:	b538      	push	{r3, r4, r5, lr}
 8005e8e:	4605      	mov	r5, r0
 8005e90:	2900      	cmp	r1, #0
 8005e92:	d046      	beq.n	8005f22 <_free_r+0x96>
 8005e94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e98:	1f0c      	subs	r4, r1, #4
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	bfb8      	it	lt
 8005e9e:	18e4      	addlt	r4, r4, r3
 8005ea0:	f000 f8d6 	bl	8006050 <__malloc_lock>
 8005ea4:	4a1f      	ldr	r2, [pc, #124]	; (8005f24 <_free_r+0x98>)
 8005ea6:	6813      	ldr	r3, [r2, #0]
 8005ea8:	4611      	mov	r1, r2
 8005eaa:	b913      	cbnz	r3, 8005eb2 <_free_r+0x26>
 8005eac:	6063      	str	r3, [r4, #4]
 8005eae:	6014      	str	r4, [r2, #0]
 8005eb0:	e032      	b.n	8005f18 <_free_r+0x8c>
 8005eb2:	42a3      	cmp	r3, r4
 8005eb4:	d90e      	bls.n	8005ed4 <_free_r+0x48>
 8005eb6:	6822      	ldr	r2, [r4, #0]
 8005eb8:	18a0      	adds	r0, r4, r2
 8005eba:	4283      	cmp	r3, r0
 8005ebc:	bf04      	itt	eq
 8005ebe:	6818      	ldreq	r0, [r3, #0]
 8005ec0:	685b      	ldreq	r3, [r3, #4]
 8005ec2:	6063      	str	r3, [r4, #4]
 8005ec4:	bf04      	itt	eq
 8005ec6:	1812      	addeq	r2, r2, r0
 8005ec8:	6022      	streq	r2, [r4, #0]
 8005eca:	600c      	str	r4, [r1, #0]
 8005ecc:	e024      	b.n	8005f18 <_free_r+0x8c>
 8005ece:	42a2      	cmp	r2, r4
 8005ed0:	d803      	bhi.n	8005eda <_free_r+0x4e>
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	2a00      	cmp	r2, #0
 8005ed8:	d1f9      	bne.n	8005ece <_free_r+0x42>
 8005eda:	6818      	ldr	r0, [r3, #0]
 8005edc:	1819      	adds	r1, r3, r0
 8005ede:	42a1      	cmp	r1, r4
 8005ee0:	d10b      	bne.n	8005efa <_free_r+0x6e>
 8005ee2:	6821      	ldr	r1, [r4, #0]
 8005ee4:	4401      	add	r1, r0
 8005ee6:	1858      	adds	r0, r3, r1
 8005ee8:	4282      	cmp	r2, r0
 8005eea:	6019      	str	r1, [r3, #0]
 8005eec:	d114      	bne.n	8005f18 <_free_r+0x8c>
 8005eee:	6810      	ldr	r0, [r2, #0]
 8005ef0:	6852      	ldr	r2, [r2, #4]
 8005ef2:	605a      	str	r2, [r3, #4]
 8005ef4:	4401      	add	r1, r0
 8005ef6:	6019      	str	r1, [r3, #0]
 8005ef8:	e00e      	b.n	8005f18 <_free_r+0x8c>
 8005efa:	d902      	bls.n	8005f02 <_free_r+0x76>
 8005efc:	230c      	movs	r3, #12
 8005efe:	602b      	str	r3, [r5, #0]
 8005f00:	e00a      	b.n	8005f18 <_free_r+0x8c>
 8005f02:	6821      	ldr	r1, [r4, #0]
 8005f04:	1860      	adds	r0, r4, r1
 8005f06:	4282      	cmp	r2, r0
 8005f08:	bf04      	itt	eq
 8005f0a:	6810      	ldreq	r0, [r2, #0]
 8005f0c:	6852      	ldreq	r2, [r2, #4]
 8005f0e:	6062      	str	r2, [r4, #4]
 8005f10:	bf04      	itt	eq
 8005f12:	1809      	addeq	r1, r1, r0
 8005f14:	6021      	streq	r1, [r4, #0]
 8005f16:	605c      	str	r4, [r3, #4]
 8005f18:	4628      	mov	r0, r5
 8005f1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f1e:	f000 b898 	b.w	8006052 <__malloc_unlock>
 8005f22:	bd38      	pop	{r3, r4, r5, pc}
 8005f24:	20004370 	.word	0x20004370

08005f28 <_malloc_r>:
 8005f28:	b570      	push	{r4, r5, r6, lr}
 8005f2a:	1ccd      	adds	r5, r1, #3
 8005f2c:	f025 0503 	bic.w	r5, r5, #3
 8005f30:	3508      	adds	r5, #8
 8005f32:	2d0c      	cmp	r5, #12
 8005f34:	bf38      	it	cc
 8005f36:	250c      	movcc	r5, #12
 8005f38:	2d00      	cmp	r5, #0
 8005f3a:	4606      	mov	r6, r0
 8005f3c:	db01      	blt.n	8005f42 <_malloc_r+0x1a>
 8005f3e:	42a9      	cmp	r1, r5
 8005f40:	d902      	bls.n	8005f48 <_malloc_r+0x20>
 8005f42:	230c      	movs	r3, #12
 8005f44:	6033      	str	r3, [r6, #0]
 8005f46:	e046      	b.n	8005fd6 <_malloc_r+0xae>
 8005f48:	f000 f882 	bl	8006050 <__malloc_lock>
 8005f4c:	4b23      	ldr	r3, [pc, #140]	; (8005fdc <_malloc_r+0xb4>)
 8005f4e:	681c      	ldr	r4, [r3, #0]
 8005f50:	461a      	mov	r2, r3
 8005f52:	4621      	mov	r1, r4
 8005f54:	b1a1      	cbz	r1, 8005f80 <_malloc_r+0x58>
 8005f56:	680b      	ldr	r3, [r1, #0]
 8005f58:	1b5b      	subs	r3, r3, r5
 8005f5a:	d40e      	bmi.n	8005f7a <_malloc_r+0x52>
 8005f5c:	2b0b      	cmp	r3, #11
 8005f5e:	d903      	bls.n	8005f68 <_malloc_r+0x40>
 8005f60:	600b      	str	r3, [r1, #0]
 8005f62:	18cc      	adds	r4, r1, r3
 8005f64:	50cd      	str	r5, [r1, r3]
 8005f66:	e01e      	b.n	8005fa6 <_malloc_r+0x7e>
 8005f68:	428c      	cmp	r4, r1
 8005f6a:	bf0d      	iteet	eq
 8005f6c:	6863      	ldreq	r3, [r4, #4]
 8005f6e:	684b      	ldrne	r3, [r1, #4]
 8005f70:	6063      	strne	r3, [r4, #4]
 8005f72:	6013      	streq	r3, [r2, #0]
 8005f74:	bf18      	it	ne
 8005f76:	460c      	movne	r4, r1
 8005f78:	e015      	b.n	8005fa6 <_malloc_r+0x7e>
 8005f7a:	460c      	mov	r4, r1
 8005f7c:	6849      	ldr	r1, [r1, #4]
 8005f7e:	e7e9      	b.n	8005f54 <_malloc_r+0x2c>
 8005f80:	4c17      	ldr	r4, [pc, #92]	; (8005fe0 <_malloc_r+0xb8>)
 8005f82:	6823      	ldr	r3, [r4, #0]
 8005f84:	b91b      	cbnz	r3, 8005f8e <_malloc_r+0x66>
 8005f86:	4630      	mov	r0, r6
 8005f88:	f000 f852 	bl	8006030 <_sbrk_r>
 8005f8c:	6020      	str	r0, [r4, #0]
 8005f8e:	4629      	mov	r1, r5
 8005f90:	4630      	mov	r0, r6
 8005f92:	f000 f84d 	bl	8006030 <_sbrk_r>
 8005f96:	1c43      	adds	r3, r0, #1
 8005f98:	d018      	beq.n	8005fcc <_malloc_r+0xa4>
 8005f9a:	1cc4      	adds	r4, r0, #3
 8005f9c:	f024 0403 	bic.w	r4, r4, #3
 8005fa0:	42a0      	cmp	r0, r4
 8005fa2:	d10d      	bne.n	8005fc0 <_malloc_r+0x98>
 8005fa4:	6025      	str	r5, [r4, #0]
 8005fa6:	4630      	mov	r0, r6
 8005fa8:	f000 f853 	bl	8006052 <__malloc_unlock>
 8005fac:	f104 000b 	add.w	r0, r4, #11
 8005fb0:	1d23      	adds	r3, r4, #4
 8005fb2:	f020 0007 	bic.w	r0, r0, #7
 8005fb6:	1ac3      	subs	r3, r0, r3
 8005fb8:	d00e      	beq.n	8005fd8 <_malloc_r+0xb0>
 8005fba:	425a      	negs	r2, r3
 8005fbc:	50e2      	str	r2, [r4, r3]
 8005fbe:	bd70      	pop	{r4, r5, r6, pc}
 8005fc0:	1a21      	subs	r1, r4, r0
 8005fc2:	4630      	mov	r0, r6
 8005fc4:	f000 f834 	bl	8006030 <_sbrk_r>
 8005fc8:	3001      	adds	r0, #1
 8005fca:	d1eb      	bne.n	8005fa4 <_malloc_r+0x7c>
 8005fcc:	230c      	movs	r3, #12
 8005fce:	6033      	str	r3, [r6, #0]
 8005fd0:	4630      	mov	r0, r6
 8005fd2:	f000 f83e 	bl	8006052 <__malloc_unlock>
 8005fd6:	2000      	movs	r0, #0
 8005fd8:	bd70      	pop	{r4, r5, r6, pc}
 8005fda:	bf00      	nop
 8005fdc:	20004370 	.word	0x20004370
 8005fe0:	2000436c 	.word	0x2000436c

08005fe4 <_realloc_r>:
 8005fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe6:	4607      	mov	r7, r0
 8005fe8:	4615      	mov	r5, r2
 8005fea:	460e      	mov	r6, r1
 8005fec:	b921      	cbnz	r1, 8005ff8 <_realloc_r+0x14>
 8005fee:	4611      	mov	r1, r2
 8005ff0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005ff4:	f7ff bf98 	b.w	8005f28 <_malloc_r>
 8005ff8:	b91a      	cbnz	r2, 8006002 <_realloc_r+0x1e>
 8005ffa:	f7ff ff47 	bl	8005e8c <_free_r>
 8005ffe:	4628      	mov	r0, r5
 8006000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006002:	f000 f827 	bl	8006054 <_malloc_usable_size_r>
 8006006:	4285      	cmp	r5, r0
 8006008:	d90e      	bls.n	8006028 <_realloc_r+0x44>
 800600a:	4629      	mov	r1, r5
 800600c:	4638      	mov	r0, r7
 800600e:	f7ff ff8b 	bl	8005f28 <_malloc_r>
 8006012:	4604      	mov	r4, r0
 8006014:	b150      	cbz	r0, 800602c <_realloc_r+0x48>
 8006016:	4631      	mov	r1, r6
 8006018:	462a      	mov	r2, r5
 800601a:	f7ff ff11 	bl	8005e40 <memcpy>
 800601e:	4631      	mov	r1, r6
 8006020:	4638      	mov	r0, r7
 8006022:	f7ff ff33 	bl	8005e8c <_free_r>
 8006026:	e001      	b.n	800602c <_realloc_r+0x48>
 8006028:	4630      	mov	r0, r6
 800602a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800602c:	4620      	mov	r0, r4
 800602e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006030 <_sbrk_r>:
 8006030:	b538      	push	{r3, r4, r5, lr}
 8006032:	4c06      	ldr	r4, [pc, #24]	; (800604c <_sbrk_r+0x1c>)
 8006034:	2300      	movs	r3, #0
 8006036:	4605      	mov	r5, r0
 8006038:	4608      	mov	r0, r1
 800603a:	6023      	str	r3, [r4, #0]
 800603c:	f000 f814 	bl	8006068 <_sbrk>
 8006040:	1c43      	adds	r3, r0, #1
 8006042:	d102      	bne.n	800604a <_sbrk_r+0x1a>
 8006044:	6823      	ldr	r3, [r4, #0]
 8006046:	b103      	cbz	r3, 800604a <_sbrk_r+0x1a>
 8006048:	602b      	str	r3, [r5, #0]
 800604a:	bd38      	pop	{r3, r4, r5, pc}
 800604c:	200052ec 	.word	0x200052ec

08006050 <__malloc_lock>:
 8006050:	4770      	bx	lr

08006052 <__malloc_unlock>:
 8006052:	4770      	bx	lr

08006054 <_malloc_usable_size_r>:
 8006054:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8006058:	2800      	cmp	r0, #0
 800605a:	bfbe      	ittt	lt
 800605c:	1809      	addlt	r1, r1, r0
 800605e:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 8006062:	18c0      	addlt	r0, r0, r3
 8006064:	3804      	subs	r0, #4
 8006066:	4770      	bx	lr

08006068 <_sbrk>:
 8006068:	4b04      	ldr	r3, [pc, #16]	; (800607c <_sbrk+0x14>)
 800606a:	6819      	ldr	r1, [r3, #0]
 800606c:	4602      	mov	r2, r0
 800606e:	b909      	cbnz	r1, 8006074 <_sbrk+0xc>
 8006070:	4903      	ldr	r1, [pc, #12]	; (8006080 <_sbrk+0x18>)
 8006072:	6019      	str	r1, [r3, #0]
 8006074:	6818      	ldr	r0, [r3, #0]
 8006076:	4402      	add	r2, r0
 8006078:	601a      	str	r2, [r3, #0]
 800607a:	4770      	bx	lr
 800607c:	20004374 	.word	0x20004374
 8006080:	200052f0 	.word	0x200052f0

08006084 <_init>:
 8006084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006086:	bf00      	nop
 8006088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800608a:	bc08      	pop	{r3}
 800608c:	469e      	mov	lr, r3
 800608e:	4770      	bx	lr

08006090 <_fini>:
 8006090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006092:	bf00      	nop
 8006094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006096:	bc08      	pop	{r3}
 8006098:	469e      	mov	lr, r3
 800609a:	4770      	bx	lr


C:\Users\Jonathan\Desktop\micromouse\mm747\Debug\mm747.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ac4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  08006c94  08006c94  00016c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080071d0  080071d0  000171d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080071d4  080071d4  000171d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  20000000  080071d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002a0c  20000080  08007258  00020080  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20002a8c  08007258  00022a8c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  9 .debug_line   00008357  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000178ad  00000000  00000000  00028407  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002e5b  00000000  00000000  0003fcb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000f20  00000000  00000000  00042b10  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001c10  00000000  00000000  00043a30  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000bb83  00000000  00000000  00045640  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000541d  00000000  00000000  000511c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  000565e0  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003234  00000000  00000000  00056660  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006c7c 	.word	0x08006c7c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08006c7c 	.word	0x08006c7c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80002c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80002c6:	e003      	b.n	80002d0 <LoopCopyDataInit>

080002c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80002c8:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80002ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80002cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80002ce:	3104      	adds	r1, #4

080002d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80002d0:	480b      	ldr	r0, [pc, #44]	; (8000300 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80002d2:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80002d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80002d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80002d8:	d3f6      	bcc.n	80002c8 <CopyDataInit>
  ldr  r2, =_sbss
 80002da:	4a0b      	ldr	r2, [pc, #44]	; (8000308 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80002dc:	e002      	b.n	80002e4 <LoopFillZerobss>

080002de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80002de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80002e0:	f842 3b04 	str.w	r3, [r2], #4

080002e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80002e4:	4b09      	ldr	r3, [pc, #36]	; (800030c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80002e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80002e8:	d3f9      	bcc.n	80002de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80002ea:	f006 f843 	bl	8006374 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002ee:	f006 f867 	bl	80063c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002f2:	f005 fb4f 	bl	8005994 <main>
  bx  lr    
 80002f6:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002f8:	20050000 	.word	0x20050000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80002fc:	080071d8 	.word	0x080071d8
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000300:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000304:	20000080 	.word	0x20000080
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000308:	20000080 	.word	0x20000080
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800030c:	20002a8c 	.word	0x20002a8c

08000310 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000310:	e7fe      	b.n	8000310 <ADC_IRQHandler>
	...

08000314 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000314:	4b08      	ldr	r3, [pc, #32]	; (8000338 <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000316:	b510      	push	{r4, lr}
 8000318:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 800031a:	6818      	ldr	r0, [r3, #0]
 800031c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000320:	fbb0 f0f3 	udiv	r0, r0, r3
 8000324:	f000 fad0 	bl	80008c8 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000328:	2200      	movs	r2, #0
 800032a:	4621      	mov	r1, r4
 800032c:	f04f 30ff 	mov.w	r0, #4294967295
 8000330:	f000 fa78 	bl	8000824 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000334:	2000      	movs	r0, #0
 8000336:	bd10      	pop	{r4, pc}
 8000338:	20000018 	.word	0x20000018

0800033c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800033c:	b508      	push	{r3, lr}
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800033e:	2003      	movs	r0, #3
 8000340:	f000 fa5e 	bl	8000800 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000344:	2000      	movs	r0, #0
 8000346:	f7ff ffe5 	bl	8000314 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800034a:	f005 fe3d 	bl	8005fc8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 800034e:	2000      	movs	r0, #0
 8000350:	bd08      	pop	{r3, pc}
	...

08000354 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000354:	4a02      	ldr	r2, [pc, #8]	; (8000360 <HAL_IncTick+0xc>)
 8000356:	6813      	ldr	r3, [r2, #0]
 8000358:	3301      	adds	r3, #1
 800035a:	6013      	str	r3, [r2, #0]
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	200013c8 	.word	0x200013c8

08000364 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000364:	4b01      	ldr	r3, [pc, #4]	; (800036c <HAL_GetTick+0x8>)
 8000366:	6818      	ldr	r0, [r3, #0]
}
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	200013c8 	.word	0x200013c8

08000370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000370:	b513      	push	{r0, r1, r4, lr}
 8000372:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8000374:	f7ff fff6 	bl	8000364 <HAL_GetTick>
 8000378:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800037a:	f7ff fff3 	bl	8000364 <HAL_GetTick>
 800037e:	9b01      	ldr	r3, [sp, #4]
 8000380:	1b00      	subs	r0, r0, r4
 8000382:	4298      	cmp	r0, r3
 8000384:	d3f9      	bcc.n	800037a <HAL_Delay+0xa>
  {
  }
}
 8000386:	b002      	add	sp, #8
 8000388:	bd10      	pop	{r4, pc}
	...

0800038c <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800038c:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800038e:	4604      	mov	r4, r0
 8000390:	2800      	cmp	r0, #0
 8000392:	f000 809e 	beq.w	80004d2 <HAL_ADC_Init+0x146>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000396:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000398:	b923      	cbnz	r3, 80003a4 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800039a:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800039c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80003a0:	f005 fe42 	bl	8006028 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80003a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80003a6:	06db      	lsls	r3, r3, #27
 80003a8:	f100 808e 	bmi.w	80004c8 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80003ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80003ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80003b2:	f023 0302 	bic.w	r3, r3, #2
 80003b6:	f043 0302 	orr.w	r3, r3, #2
 80003ba:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80003bc:	4b46      	ldr	r3, [pc, #280]	; (80004d8 <HAL_ADC_Init+0x14c>)
 80003be:	685a      	ldr	r2, [r3, #4]
 80003c0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80003c4:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80003c6:	6859      	ldr	r1, [r3, #4]
 80003c8:	6862      	ldr	r2, [r4, #4]
 80003ca:	430a      	orrs	r2, r1
 80003cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80003ce:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80003d0:	6921      	ldr	r1, [r4, #16]
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80003d2:	685a      	ldr	r2, [r3, #4]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80003d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80003d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80003da:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80003dc:	685a      	ldr	r2, [r3, #4]
 80003de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80003e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80003e4:	685a      	ldr	r2, [r3, #4]
 80003e6:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80003ea:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80003ec:	68a2      	ldr	r2, [r4, #8]
 80003ee:	6859      	ldr	r1, [r3, #4]
 80003f0:	430a      	orrs	r2, r1
 80003f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80003f4:	689a      	ldr	r2, [r3, #8]
 80003f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80003fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80003fc:	68e2      	ldr	r2, [r4, #12]
 80003fe:	6899      	ldr	r1, [r3, #8]
 8000400:	430a      	orrs	r2, r1
 8000402:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000404:	4a35      	ldr	r2, [pc, #212]	; (80004dc <HAL_ADC_Init+0x150>)
 8000406:	4290      	cmp	r0, r2
 8000408:	d00e      	beq.n	8000428 <HAL_ADC_Init+0x9c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800040a:	6899      	ldr	r1, [r3, #8]
 800040c:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000410:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000412:	689a      	ldr	r2, [r3, #8]
 8000414:	4302      	orrs	r2, r0
 8000416:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000418:	689a      	ldr	r2, [r3, #8]
 800041a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800041e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000420:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000422:	6899      	ldr	r1, [r3, #8]
 8000424:	430a      	orrs	r2, r1
 8000426:	e006      	b.n	8000436 <HAL_ADC_Init+0xaa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000428:	689a      	ldr	r2, [r3, #8]
 800042a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800042e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000430:	689a      	ldr	r2, [r3, #8]
 8000432:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000436:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000438:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800043a:	69a1      	ldr	r1, [r4, #24]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800043c:	f022 0202 	bic.w	r2, r2, #2
 8000440:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000442:	689a      	ldr	r2, [r3, #8]
 8000444:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000448:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800044a:	6a22      	ldr	r2, [r4, #32]
 800044c:	b19a      	cbz	r2, 8000476 <HAL_ADC_Init+0xea>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800044e:	685a      	ldr	r2, [r3, #4]
 8000450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000454:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000456:	685a      	ldr	r2, [r3, #4]
 8000458:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800045c:	605a      	str	r2, [r3, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800045e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000462:	fa92 f2a2 	rbit	r2, r2
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000466:	fab2 f182 	clz	r1, r2
 800046a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800046c:	6858      	ldr	r0, [r3, #4]
 800046e:	3a01      	subs	r2, #1
 8000470:	408a      	lsls	r2, r1
 8000472:	4302      	orrs	r2, r0
 8000474:	e002      	b.n	800047c <HAL_ADC_Init+0xf0>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000476:	685a      	ldr	r2, [r3, #4]
 8000478:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800047c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC parameters */
    ADC_Init(hadc);
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800047e:	2000      	movs	r0, #0
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000482:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000486:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000488:	69e2      	ldr	r2, [r4, #28]
 800048a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800048c:	3a01      	subs	r2, #1
 800048e:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000492:	6b21      	ldr	r1, [r4, #48]	; 0x30
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000494:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000496:	689a      	ldr	r2, [r3, #8]
 8000498:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800049c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800049e:	689a      	ldr	r2, [r3, #8]
 80004a0:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80004a4:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80004a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80004a8:	689a      	ldr	r2, [r3, #8]
 80004aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80004ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80004b0:	689a      	ldr	r2, [r3, #8]
 80004b2:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80004b6:	609a      	str	r2, [r3, #8]
    
    /* Set ADC parameters */
    ADC_Init(hadc);
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80004b8:	6460      	str	r0, [r4, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80004ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80004bc:	f023 0303 	bic.w	r3, r3, #3
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	6423      	str	r3, [r4, #64]	; 0x40
 80004c6:	e000      	b.n	80004ca <HAL_ADC_Init+0x13e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80004c8:	2001      	movs	r0, #1
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80004ca:	2300      	movs	r3, #0
 80004cc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80004d0:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 80004d2:	2001      	movs	r0, #1
  /* Release Lock */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	bf00      	nop
 80004d8:	40012300 	.word	0x40012300
 80004dc:	0f000001 	.word	0x0f000001

080004e0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80004e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80004e2:	4613      	mov	r3, r2
  __IO uint32_t counter = 0;
 80004e4:	2200      	movs	r2, #0
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80004e6:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 80004e8:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80004ea:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80004ee:	2a01      	cmp	r2, #1
 80004f0:	d064      	beq.n	80005bc <HAL_ADC_Start_DMA+0xdc>
 80004f2:	2201      	movs	r2, #1
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80004f4:	6805      	ldr	r5, [r0, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80004f6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80004fa:	68aa      	ldr	r2, [r5, #8]
 80004fc:	07d2      	lsls	r2, r2, #31
 80004fe:	d503      	bpl.n	8000508 <HAL_ADC_Start_DMA+0x28>
      counter--;
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000500:	68aa      	ldr	r2, [r5, #8]
 8000502:	07d0      	lsls	r0, r2, #31
 8000504:	d413      	bmi.n	800052e <HAL_ADC_Start_DMA+0x4e>
 8000506:	e04e      	b.n	80005a6 <HAL_ADC_Start_DMA+0xc6>
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000508:	68aa      	ldr	r2, [r5, #8]
 800050a:	f042 0201 	orr.w	r2, r2, #1
 800050e:	60aa      	str	r2, [r5, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000510:	4a2c      	ldr	r2, [pc, #176]	; (80005c4 <HAL_ADC_Start_DMA+0xe4>)
 8000512:	6810      	ldr	r0, [r2, #0]
 8000514:	4a2c      	ldr	r2, [pc, #176]	; (80005c8 <HAL_ADC_Start_DMA+0xe8>)
 8000516:	fbb0 f0f2 	udiv	r0, r0, r2
 800051a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800051e:	9001      	str	r0, [sp, #4]
    while(counter != 0)
 8000520:	9a01      	ldr	r2, [sp, #4]
 8000522:	2a00      	cmp	r2, #0
 8000524:	d0ec      	beq.n	8000500 <HAL_ADC_Start_DMA+0x20>
    {
      counter--;
 8000526:	9a01      	ldr	r2, [sp, #4]
 8000528:	3a01      	subs	r2, #1
 800052a:	9201      	str	r2, [sp, #4]
 800052c:	e7f8      	b.n	8000520 <HAL_ADC_Start_DMA+0x40>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800052e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000530:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8000534:	f020 0001 	bic.w	r0, r0, #1
 8000538:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800053c:	6420      	str	r0, [r4, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800053e:	686a      	ldr	r2, [r5, #4]
 8000540:	0552      	lsls	r2, r2, #21
 8000542:	d505      	bpl.n	8000550 <HAL_ADC_Start_DMA+0x70>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000544:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000546:	f420 5040 	bic.w	r0, r0, #12288	; 0x3000
 800054a:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800054e:	6420      	str	r0, [r4, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000550:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000552:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000556:	d002      	beq.n	800055e <HAL_ADC_Start_DMA+0x7e>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000558:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800055a:	f022 0206 	bic.w	r2, r2, #6
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800055e:	6462      	str	r2, [r4, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000560:	2200      	movs	r2, #0

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000562:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000564:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000568:	4a18      	ldr	r2, [pc, #96]	; (80005cc <HAL_ADC_Start_DMA+0xec>)
 800056a:	63c2      	str	r2, [r0, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800056c:	4a18      	ldr	r2, [pc, #96]	; (80005d0 <HAL_ADC_Start_DMA+0xf0>)
 800056e:	6402      	str	r2, [r0, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000570:	4a18      	ldr	r2, [pc, #96]	; (80005d4 <HAL_ADC_Start_DMA+0xf4>)
 8000572:	64c2      	str	r2, [r0, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000574:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000578:	602a      	str	r2, [r5, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800057a:	686a      	ldr	r2, [r5, #4]
 800057c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000580:	606a      	str	r2, [r5, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000582:	68aa      	ldr	r2, [r5, #8]
 8000584:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000588:	60aa      	str	r2, [r5, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800058a:	460a      	mov	r2, r1
 800058c:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 8000590:	f000 fa4e 	bl	8000a30 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8000594:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <HAL_ADC_Start_DMA+0xf8>)
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	f013 0f1f 	tst.w	r3, #31
 800059c:	6823      	ldr	r3, [r4, #0]
 800059e:	d004      	beq.n	80005aa <HAL_ADC_Start_DMA+0xca>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80005a0:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <HAL_ADC_Start_DMA+0xfc>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d001      	beq.n	80005aa <HAL_ADC_Start_DMA+0xca>
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80005a6:	2000      	movs	r0, #0
 80005a8:	e009      	b.n	80005be <HAL_ADC_Start_DMA+0xde>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80005aa:	6898      	ldr	r0, [r3, #8]
 80005ac:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80005b0:	d1f9      	bne.n	80005a6 <HAL_ADC_Start_DMA+0xc6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80005b2:	689a      	ldr	r2, [r3, #8]
 80005b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	e000      	b.n	80005be <HAL_ADC_Start_DMA+0xde>
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80005bc:	2002      	movs	r0, #2
    }
  }
  
  /* Return function status */
  return HAL_OK;
}
 80005be:	b003      	add	sp, #12
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop
 80005c4:	20000018 	.word	0x20000018
 80005c8:	000f4240 	.word	0x000f4240
 80005cc:	0800063b 	.word	0x0800063b
 80005d0:	0800069d 	.word	0x0800069d
 80005d4:	080006a9 	.word	0x080006a9
 80005d8:	40012300 	.word	0x40012300
 80005dc:	40012000 	.word	0x40012000

080005e0 <HAL_ADC_Stop_DMA>:
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80005e0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80005e4:	2b01      	cmp	r3, #1
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80005e6:	b510      	push	{r4, lr}
 80005e8:	4604      	mov	r4, r0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80005ea:	d024      	beq.n	8000636 <HAL_ADC_Stop_DMA+0x56>
 80005ec:	2301      	movs	r3, #1
 80005ee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80005f2:	6803      	ldr	r3, [r0, #0]
 80005f4:	689a      	ldr	r2, [r3, #8]
 80005f6:	f022 0201 	bic.w	r2, r2, #1
 80005fa:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80005fc:	689a      	ldr	r2, [r3, #8]
 80005fe:	07d2      	lsls	r2, r2, #31
 8000600:	d414      	bmi.n	800062c <HAL_ADC_Stop_DMA+0x4c>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8000602:	689a      	ldr	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8000604:	6b80      	ldr	r0, [r0, #56]	; 0x38
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8000606:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800060a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800060c:	f000 fa4f 	bl	8000aae <HAL_DMA_Abort>
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8000610:	6822      	ldr	r2, [r4, #0]
 8000612:	6853      	ldr	r3, [r2, #4]
 8000614:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000618:	6053      	str	r3, [r2, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800061a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800061c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000620:	f023 0301 	bic.w	r3, r3, #1
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6423      	str	r3, [r4, #64]	; 0x40
 800062a:	e000      	b.n	800062e <HAL_ADC_Stop_DMA+0x4e>
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800062c:	2000      	movs	r0, #0
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800062e:	2300      	movs	r3, #0
 8000630:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8000634:	bd10      	pop	{r4, pc}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000636:	2002      	movs	r0, #2
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
}
 8000638:	bd10      	pop	{r4, pc}

0800063a <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800063a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800063c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800063e:	f012 0f50 	tst.w	r2, #80	; 0x50
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000642:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000644:	d124      	bne.n	8000690 <ADC_DMAConvCplt+0x56>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000646:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800064c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	6891      	ldr	r1, [r2, #8]
 8000652:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8000656:	d117      	bne.n	8000688 <ADC_DMAConvCplt+0x4e>
 8000658:	6999      	ldr	r1, [r3, #24]
 800065a:	b9a9      	cbnz	r1, 8000688 <ADC_DMAConvCplt+0x4e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800065c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800065e:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 8000662:	d002      	beq.n	800066a <ADC_DMAConvCplt+0x30>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000664:	6891      	ldr	r1, [r2, #8]
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000666:	0549      	lsls	r1, r1, #21
 8000668:	d40e      	bmi.n	8000688 <ADC_DMAConvCplt+0x4e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800066a:	6851      	ldr	r1, [r2, #4]
 800066c:	f021 0120 	bic.w	r1, r1, #32
 8000670:	6051      	str	r1, [r2, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000672:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000674:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000678:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800067a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800067c:	04d2      	lsls	r2, r2, #19
 800067e:	d403      	bmi.n	8000688 <ADC_DMAConvCplt+0x4e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000680:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000682:	f042 0201 	orr.w	r2, r2, #1
 8000686:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 8000688:	4618      	mov	r0, r3
 800068a:	f004 f823 	bl	80046d4 <HAL_ADC_ConvCpltCallback>
 800068e:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  }
}
 8000692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_ADC_ConvCpltCallback(hadc);
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000698:	4718      	bx	r3

0800069a <HAL_ADC_ConvHalfCpltCallback>:
 800069a:	4770      	bx	lr

0800069c <ADC_DMAHalfConvCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800069c:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* Conversion complete callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800069e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80006a0:	f7ff fffb 	bl	800069a <HAL_ADC_ConvHalfCpltCallback>
 80006a4:	bd08      	pop	{r3, pc}

080006a6 <HAL_ADC_ErrorCallback>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80006a6:	4770      	bx	lr

080006a8 <ADC_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80006a8:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80006aa:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80006ac:	2340      	movs	r3, #64	; 0x40
 80006ae:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80006b0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80006b2:	f043 0304 	orr.w	r3, r3, #4
 80006b6:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_ADC_ErrorCallback(hadc); 
 80006b8:	f7ff fff5 	bl	80006a6 <HAL_ADC_ErrorCallback>
 80006bc:	bd08      	pop	{r3, pc}
	...

080006c0 <HAL_ADC_ConfigChannel>:
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  __IO uint32_t counter = 0;
 80006c0:	2300      	movs	r3, #0
  *         the configuration information for the specified ADC.
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80006c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 80006c4:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006c6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d070      	beq.n	80007b0 <HAL_ADC_ConfigChannel+0xf0>
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 80006ce:	680d      	ldr	r5, [r1, #0]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006d0:	2301      	movs	r3, #1
 80006d2:	6804      	ldr	r4, [r0, #0]
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 80006d4:	2d09      	cmp	r5, #9
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006d6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80006da:	b2ae      	uxth	r6, r5
 80006dc:	688f      	ldr	r7, [r1, #8]
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 80006de:	d917      	bls.n	8000710 <HAL_ADC_ConfigChannel+0x50>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80006e0:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 80006e4:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 80006e8:	f1a2 031e 	sub.w	r3, r2, #30
 80006ec:	2207      	movs	r2, #7
 80006ee:	409a      	lsls	r2, r3
 80006f0:	ea2e 0202 	bic.w	r2, lr, r2
 80006f4:	60e2      	str	r2, [r4, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80006f6:	4a3d      	ldr	r2, [pc, #244]	; (80007ec <HAL_ADC_ConfigChannel+0x12c>)
 80006f8:	4295      	cmp	r5, r2
 80006fa:	d103      	bne.n	8000704 <HAL_ADC_ConfigChannel+0x44>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80006fc:	68e3      	ldr	r3, [r4, #12]
 80006fe:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 8000702:	e003      	b.n	800070c <HAL_ADC_ConfigChannel+0x4c>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000704:	68e2      	ldr	r2, [r4, #12]
 8000706:	fa07 f303 	lsl.w	r3, r7, r3
 800070a:	4313      	orrs	r3, r2
 800070c:	60e3      	str	r3, [r4, #12]
 800070e:	e00e      	b.n	800072e <HAL_ADC_ConfigChannel+0x6e>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000710:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000714:	f04f 0e07 	mov.w	lr, #7
 8000718:	6922      	ldr	r2, [r4, #16]
 800071a:	fa0e fe03 	lsl.w	lr, lr, r3
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800071e:	fa07 f303 	lsl.w	r3, r7, r3
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000722:	ea22 020e 	bic.w	r2, r2, lr
 8000726:	6122      	str	r2, [r4, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000728:	6922      	ldr	r2, [r4, #16]
 800072a:	4313      	orrs	r3, r2
 800072c:	6123      	str	r3, [r4, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800072e:	684b      	ldr	r3, [r1, #4]
 8000730:	2b06      	cmp	r3, #6
 8000732:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8000736:	d80d      	bhi.n	8000754 <HAL_ADC_ConfigChannel+0x94>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000738:	4413      	add	r3, r2
 800073a:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800073c:	1f59      	subs	r1, r3, #5
 800073e:	231f      	movs	r3, #31
 8000740:	408b      	lsls	r3, r1
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000742:	fa06 f101 	lsl.w	r1, r6, r1
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000746:	ea27 0303 	bic.w	r3, r7, r3
 800074a:	6363      	str	r3, [r4, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800074c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800074e:	4311      	orrs	r1, r2
 8000750:	6361      	str	r1, [r4, #52]	; 0x34
 8000752:	e01d      	b.n	8000790 <HAL_ADC_ConfigChannel+0xd0>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000754:	2b0c      	cmp	r3, #12
 8000756:	d80e      	bhi.n	8000776 <HAL_ADC_ConfigChannel+0xb6>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000758:	4413      	add	r3, r2
 800075a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800075c:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000760:	231f      	movs	r3, #31
 8000762:	4093      	lsls	r3, r2
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000764:	fa06 f202 	lsl.w	r2, r6, r2
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000768:	ea21 0303 	bic.w	r3, r1, r3
 800076c:	6323      	str	r3, [r4, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800076e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000770:	431a      	orrs	r2, r3
 8000772:	6322      	str	r2, [r4, #48]	; 0x30
 8000774:	e00c      	b.n	8000790 <HAL_ADC_ConfigChannel+0xd0>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000776:	4413      	add	r3, r2
 8000778:	221f      	movs	r2, #31
 800077a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800077c:	3b41      	subs	r3, #65	; 0x41
 800077e:	409a      	lsls	r2, r3
 8000780:	ea27 0202 	bic.w	r2, r7, r2
 8000784:	62e2      	str	r2, [r4, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000786:	fa06 f203 	lsl.w	r2, r6, r3
 800078a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800078c:	430a      	orrs	r2, r1
 800078e:	62e2      	str	r2, [r4, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000790:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <HAL_ADC_ConfigChannel+0x130>)
 8000792:	429c      	cmp	r4, r3
 8000794:	d004      	beq.n	80007a0 <HAL_ADC_ConfigChannel+0xe0>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000796:	2300      	movs	r3, #0
 8000798:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800079c:	4618      	mov	r0, r3
 800079e:	e023      	b.n	80007e8 <HAL_ADC_ConfigChannel+0x128>
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80007a0:	2d12      	cmp	r5, #18
 80007a2:	d107      	bne.n	80007b4 <HAL_ADC_ConfigChannel+0xf4>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80007a4:	4a13      	ldr	r2, [pc, #76]	; (80007f4 <HAL_ADC_ConfigChannel+0x134>)
 80007a6:	6853      	ldr	r3, [r2, #4]
 80007a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007ac:	6053      	str	r3, [r2, #4]
 80007ae:	e7f2      	b.n	8000796 <HAL_ADC_ConfigChannel+0xd6>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80007b0:	2002      	movs	r0, #2
 80007b2:	e019      	b.n	80007e8 <HAL_ADC_ConfigChannel+0x128>
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80007b4:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <HAL_ADC_ConfigChannel+0x12c>)
 80007b6:	429d      	cmp	r5, r3
 80007b8:	d001      	beq.n	80007be <HAL_ADC_ConfigChannel+0xfe>
 80007ba:	2d11      	cmp	r5, #17
 80007bc:	d1eb      	bne.n	8000796 <HAL_ADC_ConfigChannel+0xd6>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80007be:	490d      	ldr	r1, [pc, #52]	; (80007f4 <HAL_ADC_ConfigChannel+0x134>)

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80007c0:	429d      	cmp	r5, r3
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80007c2:	684a      	ldr	r2, [r1, #4]
 80007c4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80007c8:	604a      	str	r2, [r1, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80007ca:	d1e4      	bne.n	8000796 <HAL_ADC_ConfigChannel+0xd6>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <HAL_ADC_ConfigChannel+0x138>)
 80007ce:	4a0b      	ldr	r2, [pc, #44]	; (80007fc <HAL_ADC_ConfigChannel+0x13c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80007d6:	230a      	movs	r3, #10
 80007d8:	4353      	muls	r3, r2
      while(counter != 0)
      {
        counter--;
 80007da:	9301      	str	r3, [sp, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
      while(counter != 0)
 80007dc:	9b01      	ldr	r3, [sp, #4]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d0d9      	beq.n	8000796 <HAL_ADC_ConfigChannel+0xd6>
      {
        counter--;
 80007e2:	9b01      	ldr	r3, [sp, #4]
 80007e4:	3b01      	subs	r3, #1
 80007e6:	e7f8      	b.n	80007da <HAL_ADC_ConfigChannel+0x11a>
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return HAL_OK;
}
 80007e8:	b003      	add	sp, #12
 80007ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ec:	10000012 	.word	0x10000012
 80007f0:	40012000 	.word	0x40012000
 80007f4:	40012300 	.word	0x40012300
 80007f8:	20000018 	.word	0x20000018
 80007fc:	000f4240 	.word	0x000f4240

08000800 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000800:	4a07      	ldr	r2, [pc, #28]	; (8000820 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000802:	0200      	lsls	r0, r0, #8
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000804:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000806:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800080a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800080e:	041b      	lsls	r3, r3, #16
 8000810:	0c1b      	lsrs	r3, r3, #16
 8000812:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800081a:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800081c:	60d3      	str	r3, [r2, #12]
 800081e:	4770      	bx	lr
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000824:	4b19      	ldr	r3, [pc, #100]	; (800088c <HAL_NVIC_SetPriority+0x68>)
 8000826:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000828:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800082c:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800082e:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000832:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000834:	2c04      	cmp	r4, #4
 8000836:	bf28      	it	cs
 8000838:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800083a:	2d06      	cmp	r5, #6

  return (
 800083c:	f04f 0501 	mov.w	r5, #1
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000840:	bf8c      	ite	hi
 8000842:	3b03      	subhi	r3, #3
 8000844:	2300      	movls	r3, #0

  return (
 8000846:	fa05 f404 	lsl.w	r4, r5, r4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800084a:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800084c:	f104 34ff 	add.w	r4, r4, #4294967295
 8000850:	ea04 0401 	and.w	r4, r4, r1
 8000854:	fa04 f403 	lsl.w	r4, r4, r3
 8000858:	fa05 f303 	lsl.w	r3, r5, r3
 800085c:	f103 33ff 	add.w	r3, r3, #4294967295
 8000860:	ea02 0203 	and.w	r2, r2, r3
 8000864:	ea42 0204 	orr.w	r2, r2, r4
 8000868:	ea4f 1202 	mov.w	r2, r2, lsl #4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800086c:	da05      	bge.n	800087a <HAL_NVIC_SetPriority+0x56>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800086e:	f000 000f 	and.w	r0, r0, #15
 8000872:	b2d2      	uxtb	r2, r2
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_NVIC_SetPriority+0x6c>)
 8000876:	541a      	strb	r2, [r3, r0]
 8000878:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800087a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800087e:	b2d2      	uxtb	r2, r2
 8000880:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000884:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000888:	bd30      	pop	{r4, r5, pc}
 800088a:	bf00      	nop
 800088c:	e000ed00 	.word	0xe000ed00
 8000890:	e000ed14 	.word	0xe000ed14

08000894 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000894:	0942      	lsrs	r2, r0, #5
 8000896:	2301      	movs	r3, #1
 8000898:	f000 001f 	and.w	r0, r0, #31
 800089c:	fa03 f000 	lsl.w	r0, r3, r0
 80008a0:	4b01      	ldr	r3, [pc, #4]	; (80008a8 <HAL_NVIC_EnableIRQ+0x14>)
 80008a2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80008a6:	4770      	bx	lr
 80008a8:	e000e100 	.word	0xe000e100

080008ac <HAL_NVIC_DisableIRQ>:
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80008ac:	0943      	lsrs	r3, r0, #5
 80008ae:	2201      	movs	r2, #1
 80008b0:	f000 001f 	and.w	r0, r0, #31
 80008b4:	3320      	adds	r3, #32
 80008b6:	fa02 f000 	lsl.w	r0, r2, r0
 80008ba:	4a02      	ldr	r2, [pc, #8]	; (80008c4 <HAL_NVIC_DisableIRQ+0x18>)
 80008bc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	e000e100 	.word	0xe000e100

080008c8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008c8:	3801      	subs	r0, #1
 80008ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80008ce:	d20a      	bcs.n	80008e6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d2:	21f0      	movs	r1, #240	; 0xf0
 80008d4:	4a06      	ldr	r2, [pc, #24]	; (80008f0 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008d6:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d8:	2000      	movs	r0, #0
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008da:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008de:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008e0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80008e6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	e000e010 	.word	0xe000e010
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80008f6:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	bf0c      	ite	eq
 80008fc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000900:	f022 0204 	bicne.w	r2, r2, #4
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	4770      	bx	lr
 8000908:	e000e010 	.word	0xe000e010

0800090c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800090c:	4770      	bx	lr

0800090e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800090e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000910:	f7ff fffc 	bl	800090c <HAL_SYSTICK_Callback>
 8000914:	bd08      	pop	{r3, pc}
	...

08000918 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000918:	6803      	ldr	r3, [r0, #0]
 800091a:	2118      	movs	r1, #24
 800091c:	b2da      	uxtb	r2, r3
 800091e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000922:	3a10      	subs	r2, #16
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000924:	f023 0303 	bic.w	r3, r3, #3
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000928:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800092c:	4904      	ldr	r1, [pc, #16]	; (8000940 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 800092e:	2a03      	cmp	r2, #3
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000930:	5c89      	ldrb	r1, [r1, r2]
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000932:	bf88      	it	hi
 8000934:	3304      	addhi	r3, #4
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000936:	65c1      	str	r1, [r0, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000938:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 800093a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	08006cb8 	.word	0x08006cb8

08000944 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000944:	b570      	push	{r4, r5, r6, lr}
 8000946:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8000948:	f7ff fd0c 	bl	8000364 <HAL_GetTick>
 800094c:	4605      	mov	r5, r0
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800094e:	2c00      	cmp	r4, #0
 8000950:	d064      	beq.n	8000a1c <HAL_DMA_Init+0xd8>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000952:	2300      	movs	r3, #0

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000954:	6822      	ldr	r2, [r4, #0]
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000956:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800095a:	2302      	movs	r3, #2
 800095c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000960:	6813      	ldr	r3, [r2, #0]
 8000962:	f023 0301 	bic.w	r3, r3, #1
 8000966:	6013      	str	r3, [r2, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000968:	6821      	ldr	r1, [r4, #0]
 800096a:	680b      	ldr	r3, [r1, #0]
 800096c:	07d8      	lsls	r0, r3, #31
 800096e:	d508      	bpl.n	8000982 <HAL_DMA_Init+0x3e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000970:	f7ff fcf8 	bl	8000364 <HAL_GetTick>
 8000974:	1b40      	subs	r0, r0, r5
 8000976:	2805      	cmp	r0, #5
 8000978:	d9f6      	bls.n	8000968 <HAL_DMA_Init+0x24>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800097a:	2320      	movs	r3, #32
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800097c:	2003      	movs	r0, #3
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800097e:	6563      	str	r3, [r4, #84]	; 0x54
 8000980:	e051      	b.n	8000a26 <HAL_DMA_Init+0xe2>
      return HAL_TIMEOUT;
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000982:	680b      	ldr	r3, [r1, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000984:	4a29      	ldr	r2, [pc, #164]	; (8000a2c <HAL_DMA_Init+0xe8>)
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000986:	6865      	ldr	r5, [r4, #4]
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000988:	401a      	ands	r2, r3
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800098a:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800098c:	69a0      	ldr	r0, [r4, #24]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800098e:	431d      	orrs	r5, r3
 8000990:	68e3      	ldr	r3, [r4, #12]
 8000992:	431d      	orrs	r5, r3
 8000994:	6923      	ldr	r3, [r4, #16]
 8000996:	431d      	orrs	r5, r3
 8000998:	6963      	ldr	r3, [r4, #20]
 800099a:	432b      	orrs	r3, r5
 800099c:	69e5      	ldr	r5, [r4, #28]
 800099e:	4303      	orrs	r3, r0
 80009a0:	432b      	orrs	r3, r5
 80009a2:	6a25      	ldr	r5, [r4, #32]
 80009a4:	432b      	orrs	r3, r5
 80009a6:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80009a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80009aa:	2a04      	cmp	r2, #4
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80009ac:	bf01      	itttt	eq
 80009ae:	6b25      	ldreq	r5, [r4, #48]	; 0x30
 80009b0:	6ae6      	ldreq	r6, [r4, #44]	; 0x2c
 80009b2:	4335      	orreq	r5, r6
 80009b4:	432b      	orreq	r3, r5

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80009b6:	2a04      	cmp	r2, #4
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80009b8:	600b      	str	r3, [r1, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80009ba:	694b      	ldr	r3, [r1, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80009bc:	f023 0307 	bic.w	r3, r3, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80009c0:	ea43 0302 	orr.w	r3, r3, r2

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80009c4:	d11c      	bne.n	8000a00 <HAL_DMA_Init+0xbc>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80009c6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80009c8:	4313      	orrs	r3, r2
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80009ca:	b920      	cbnz	r0, 80009d6 <HAL_DMA_Init+0x92>
  {
    switch (tmp)
 80009cc:	2a01      	cmp	r2, #1
 80009ce:	d00b      	beq.n	80009e8 <HAL_DMA_Init+0xa4>
 80009d0:	d313      	bcc.n	80009fa <HAL_DMA_Init+0xb6>
 80009d2:	2a02      	cmp	r2, #2
 80009d4:	e010      	b.n	80009f8 <HAL_DMA_Init+0xb4>
        break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80009d6:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80009da:	d10a      	bne.n	80009f2 <HAL_DMA_Init+0xae>
  {
    switch (tmp)
 80009dc:	2a03      	cmp	r2, #3
 80009de:	d80f      	bhi.n	8000a00 <HAL_DMA_Init+0xbc>
 80009e0:	e8df f002 	tbb	[pc, r2]
 80009e4:	021e0b1e 	.word	0x021e0b1e
        break;
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80009e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80009ea:	f1b2 7fc0 	cmp.w	r2, #25165824	; 0x1800000
 80009ee:	d107      	bne.n	8000a00 <HAL_DMA_Init+0xbc>
 80009f0:	e016      	b.n	8000a20 <HAL_DMA_Init+0xdc>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80009f2:	2a02      	cmp	r2, #2
 80009f4:	d914      	bls.n	8000a20 <HAL_DMA_Init+0xdc>
 80009f6:	2a03      	cmp	r2, #3
 80009f8:	d102      	bne.n	8000a00 <HAL_DMA_Init+0xbc>
      case DMA_FIFO_THRESHOLD_HALFFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80009fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80009fc:	01d2      	lsls	r2, r2, #7
 80009fe:	d40f      	bmi.n	8000a20 <HAL_DMA_Init+0xdc>
      return HAL_ERROR; 
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000a00:	614b      	str	r3, [r1, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000a02:	4620      	mov	r0, r4
 8000a04:	f7ff ff88 	bl	8000918 <DMA_CalcBaseAndBitshift>
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a08:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000a0a:	233f      	movs	r3, #63	; 0x3f
 8000a0c:	4093      	lsls	r3, r2
 8000a0e:	6083      	str	r3, [r0, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a10:	2000      	movs	r0, #0
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a12:	2301      	movs	r3, #1
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a14:	6560      	str	r0, [r4, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a16:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 8000a1a:	bd70      	pop	{r4, r5, r6, pc}
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	bd70      	pop	{r4, r5, r6, pc}
    tmp |= hdma->Init.FIFOThreshold;
    
    if (DMA_CheckFifoParam(hdma) != HAL_OK)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000a20:	2340      	movs	r3, #64	; 0x40
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000a22:	2001      	movs	r0, #1
    tmp |= hdma->Init.FIFOThreshold;
    
    if (DMA_CheckFifoParam(hdma) != HAL_OK)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000a24:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000a26:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 8000a2a:	bd70      	pop	{r4, r5, r6, pc}
 8000a2c:	f010803f 	.word	0xf010803f

08000a30 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a30:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a32:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000a36:	2c01      	cmp	r4, #1
 8000a38:	d037      	beq.n	8000aaa <HAL_DMA_Start_IT+0x7a>
 8000a3a:	2401      	movs	r4, #1
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a3c:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8000a3e:	2500      	movs	r5, #0
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a40:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a44:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8000a48:	2c01      	cmp	r4, #1
 8000a4a:	f04f 0402 	mov.w	r4, #2
 8000a4e:	d128      	bne.n	8000aa2 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a50:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000a54:	6804      	ldr	r4, [r0, #0]
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a56:	6545      	str	r5, [r0, #84]	; 0x54
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000a58:	6825      	ldr	r5, [r4, #0]
 8000a5a:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000a5e:	6025      	str	r5, [r4, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000a60:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000a62:	6883      	ldr	r3, [r0, #8]
 8000a64:	2b40      	cmp	r3, #64	; 0x40
 8000a66:	d102      	bne.n	8000a6e <HAL_DMA_Start_IT+0x3e>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000a68:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000a6a:	60e1      	str	r1, [r4, #12]
 8000a6c:	e001      	b.n	8000a72 <HAL_DMA_Start_IT+0x42>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8000a6e:	60a1      	str	r1, [r4, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000a70:	60e2      	str	r2, [r4, #12]
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a72:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000a74:	233f      	movs	r3, #63	; 0x3f
 8000a76:	4093      	lsls	r3, r2
 8000a78:	60b3      	str	r3, [r6, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000a7a:	6823      	ldr	r3, [r4, #0]
 8000a7c:	f043 0316 	orr.w	r3, r3, #22
 8000a80:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000a82:	6963      	ldr	r3, [r4, #20]
 8000a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a88:	6163      	str	r3, [r4, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000a8a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000a8c:	b11b      	cbz	r3, 8000a96 <HAL_DMA_Start_IT+0x66>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000a8e:	6823      	ldr	r3, [r4, #0]
 8000a90:	f043 0308 	orr.w	r3, r3, #8
 8000a94:	6023      	str	r3, [r4, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000a96:	6823      	ldr	r3, [r4, #0]
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;
 8000a98:	2000      	movs	r0, #0
    {
      hdma->Instance->CR  |= DMA_IT_HT;
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000a9a:	f043 0301 	orr.w	r3, r3, #1
 8000a9e:	6023      	str	r3, [r4, #0]
 8000aa0:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000aa2:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000aa6:	4620      	mov	r0, r4
 8000aa8:	bd70      	pop	{r4, r5, r6, pc}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000aaa:	2002      	movs	r0, #2
    /* Return error status */
    status = HAL_BUSY;
  }
  
  return status;
}
 8000aac:	bd70      	pop	{r4, r5, r6, pc}

08000aae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000aae:	b570      	push	{r4, r5, r6, lr}
 8000ab0:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ab2:	6d85      	ldr	r5, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8000ab4:	f7ff fc56 	bl	8000364 <HAL_GetTick>
 8000ab8:	4606      	mov	r6, r0
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000aba:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	d006      	beq.n	8000ad0 <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ac2:	2380      	movs	r3, #128	; 0x80
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    return HAL_ERROR;
 8000ac4:	2001      	movs	r0, #1
  
  uint32_t tickstart = HAL_GetTick();
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ac6:	6563      	str	r3, [r4, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    return HAL_ERROR;
 8000ace:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ad0:	6823      	ldr	r3, [r4, #0]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	f022 0216 	bic.w	r2, r2, #22
 8000ad8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ada:	695a      	ldr	r2, [r3, #20]
 8000adc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ae0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ae2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000ae4:	b90a      	cbnz	r2, 8000aea <HAL_DMA_Abort+0x3c>
 8000ae6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000ae8:	b11a      	cbz	r2, 8000af2 <HAL_DMA_Abort+0x44>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	f022 0208 	bic.w	r2, r2, #8
 8000af0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	f022 0201 	bic.w	r2, r2, #1
 8000af8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000afa:	6823      	ldr	r3, [r4, #0]
 8000afc:	6818      	ldr	r0, [r3, #0]
 8000afe:	f010 0001 	ands.w	r0, r0, #1
 8000b02:	d00d      	beq.n	8000b20 <HAL_DMA_Abort+0x72>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000b04:	f7ff fc2e 	bl	8000364 <HAL_GetTick>
 8000b08:	1b80      	subs	r0, r0, r6
 8000b0a:	2805      	cmp	r0, #5
 8000b0c:	d9f5      	bls.n	8000afa <HAL_DMA_Abort+0x4c>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000b0e:	2320      	movs	r3, #32
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000b10:	2003      	movs	r0, #3
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000b12:	6563      	str	r3, [r4, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000b14:	2300      	movs	r3, #0
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000b16:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000b1a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
        
        return HAL_TIMEOUT;
 8000b1e:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b20:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000b22:	233f      	movs	r3, #63	; 0x3f
 8000b24:	4093      	lsls	r3, r2
 8000b26:	60ab      	str	r3, [r5, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000b28:	2301      	movs	r3, #1
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b2a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000b2e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  }
  return HAL_OK;
}
 8000b32:	bd70      	pop	{r4, r5, r6, pc}

08000b34 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b34:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d003      	beq.n	8000b44 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b3c:	2380      	movs	r3, #128	; 0x80
 8000b3e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000b40:	2001      	movs	r0, #1
 8000b42:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000b44:	6802      	ldr	r2, [r0, #0]
    return HAL_ERROR;
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000b46:	2305      	movs	r3, #5
 8000b48:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
  }

  return HAL_OK;
 8000b4c:	2000      	movs	r0, #0
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000b4e:	6813      	ldr	r3, [r2, #0]
 8000b50:	f023 0301 	bic.w	r3, r3, #1
 8000b54:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
}
 8000b56:	4770      	bx	lr

08000b58 <HAL_DMA_IRQHandler>:
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8000b58:	2300      	movs	r3, #0
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8000b5c:	9301      	str	r3, [sp, #4]
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b5e:	4604      	mov	r4, r0
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8000b60:	4b59      	ldr	r3, [pc, #356]	; (8000cc8 <HAL_DMA_IRQHandler+0x170>)

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000b62:	6d85      	ldr	r5, [r0, #88]	; 0x58
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8000b64:	681f      	ldr	r7, [r3, #0]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b66:	2308      	movs	r3, #8
 8000b68:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  uint32_t timeout = SystemCoreClock / 9600;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;
 8000b6a:	682e      	ldr	r6, [r5, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b6c:	4093      	lsls	r3, r2
 8000b6e:	421e      	tst	r6, r3
 8000b70:	d00c      	beq.n	8000b8c <HAL_DMA_IRQHandler+0x34>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000b72:	6801      	ldr	r1, [r0, #0]
 8000b74:	6808      	ldr	r0, [r1, #0]
 8000b76:	0740      	lsls	r0, r0, #29
 8000b78:	d508      	bpl.n	8000b8c <HAL_DMA_IRQHandler+0x34>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000b7a:	6808      	ldr	r0, [r1, #0]
 8000b7c:	f020 0004 	bic.w	r0, r0, #4
 8000b80:	6008      	str	r0, [r1, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000b82:	60ab      	str	r3, [r5, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000b84:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b8c:	4b4f      	ldr	r3, [pc, #316]	; (8000ccc <HAL_DMA_IRQHandler+0x174>)
 8000b8e:	4093      	lsls	r3, r2
 8000b90:	421e      	tst	r6, r3
 8000b92:	d008      	beq.n	8000ba6 <HAL_DMA_IRQHandler+0x4e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000b94:	6821      	ldr	r1, [r4, #0]
 8000b96:	6949      	ldr	r1, [r1, #20]
 8000b98:	0609      	lsls	r1, r1, #24
 8000b9a:	d504      	bpl.n	8000ba6 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000b9c:	60ab      	str	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000b9e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ba6:	4b4a      	ldr	r3, [pc, #296]	; (8000cd0 <HAL_DMA_IRQHandler+0x178>)
 8000ba8:	4093      	lsls	r3, r2
 8000baa:	421e      	tst	r6, r3
 8000bac:	d008      	beq.n	8000bc0 <HAL_DMA_IRQHandler+0x68>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000bae:	6821      	ldr	r1, [r4, #0]
 8000bb0:	6809      	ldr	r1, [r1, #0]
 8000bb2:	0788      	lsls	r0, r1, #30
 8000bb4:	d504      	bpl.n	8000bc0 <HAL_DMA_IRQHandler+0x68>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000bb6:	60ab      	str	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000bb8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000bba:	f043 0304 	orr.w	r3, r3, #4
 8000bbe:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000bc0:	2310      	movs	r3, #16
 8000bc2:	fa03 f202 	lsl.w	r2, r3, r2
 8000bc6:	4216      	tst	r6, r2
 8000bc8:	d017      	beq.n	8000bfa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000bca:	6823      	ldr	r3, [r4, #0]
 8000bcc:	6819      	ldr	r1, [r3, #0]
 8000bce:	0709      	lsls	r1, r1, #28
 8000bd0:	d513      	bpl.n	8000bfa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000bd2:	60aa      	str	r2, [r5, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	0350      	lsls	r0, r2, #13
 8000bd8:	d504      	bpl.n	8000be4 <HAL_DMA_IRQHandler+0x8c>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	0319      	lsls	r1, r3, #12
 8000bde:	d508      	bpl.n	8000bf2 <HAL_DMA_IRQHandler+0x9a>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000be0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000be2:	e007      	b.n	8000bf4 <HAL_DMA_IRQHandler+0x9c>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	05d2      	lsls	r2, r2, #23
 8000be8:	d403      	bmi.n	8000bf2 <HAL_DMA_IRQHandler+0x9a>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	f022 0208 	bic.w	r2, r2, #8
 8000bf0:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000bf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000bf4:	b10b      	cbz	r3, 8000bfa <HAL_DMA_IRQHandler+0xa2>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000bf6:	4620      	mov	r0, r4
 8000bf8:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000bfa:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000bfc:	2220      	movs	r2, #32
 8000bfe:	408a      	lsls	r2, r1
 8000c00:	4216      	tst	r6, r2
 8000c02:	d03b      	beq.n	8000c7c <HAL_DMA_IRQHandler+0x124>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000c04:	6823      	ldr	r3, [r4, #0]
 8000c06:	6818      	ldr	r0, [r3, #0]
 8000c08:	06c6      	lsls	r6, r0, #27
 8000c0a:	d537      	bpl.n	8000c7c <HAL_DMA_IRQHandler+0x124>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000c0c:	60aa      	str	r2, [r5, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000c0e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000c12:	2a05      	cmp	r2, #5
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c14:	681a      	ldr	r2, [r3, #0]
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000c16:	d119      	bne.n	8000c4c <HAL_DMA_IRQHandler+0xf4>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c18:	f022 0216 	bic.w	r2, r2, #22
 8000c1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c1e:	695a      	ldr	r2, [r3, #20]
 8000c20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c26:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000c28:	b90a      	cbnz	r2, 8000c2e <HAL_DMA_IRQHandler+0xd6>
 8000c2a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000c2c:	b11a      	cbz	r2, 8000c36 <HAL_DMA_IRQHandler+0xde>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	f022 0208 	bic.w	r2, r2, #8
 8000c34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c36:	233f      	movs	r3, #63	; 0x3f
 8000c38:	408b      	lsls	r3, r1
 8000c3a:	60ab      	str	r3, [r5, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
         
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000c42:	2301      	movs	r3, #1
 8000c44:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	
        if(hdma->XferAbortCallback != NULL)
 8000c48:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000c4a:	e037      	b.n	8000cbc <HAL_DMA_IRQHandler+0x164>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }
      
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c4c:	0350      	lsls	r0, r2, #13
 8000c4e:	d504      	bpl.n	8000c5a <HAL_DMA_IRQHandler+0x102>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	0319      	lsls	r1, r3, #12
 8000c54:	d40e      	bmi.n	8000c74 <HAL_DMA_IRQHandler+0x11c>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000c56:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c58:	e00d      	b.n	8000c76 <HAL_DMA_IRQHandler+0x11e>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000c60:	d108      	bne.n	8000c74 <HAL_DMA_IRQHandler+0x11c>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000c62:	6819      	ldr	r1, [r3, #0]
 8000c64:	f021 0110 	bic.w	r1, r1, #16
 8000c68:	6019      	str	r1, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
          
          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c6a:	2301      	movs	r3, #1
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000c6c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          
          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c70:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        }
        
        if(hdma->XferCpltCallback != NULL)
 8000c74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000c76:	b10b      	cbz	r3, 8000c7c <HAL_DMA_IRQHandler+0x124>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000c7c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000c7e:	b303      	cbz	r3, 8000cc2 <HAL_DMA_IRQHandler+0x16a>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000c80:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000c82:	07da      	lsls	r2, r3, #31
 8000c84:	d519      	bpl.n	8000cba <HAL_DMA_IRQHandler+0x162>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000c86:	2305      	movs	r3, #5
      
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000c88:	6822      	ldr	r2, [r4, #0]
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000c8a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000c8e:	6813      	ldr	r3, [r2, #0]
 8000c90:	f023 0301 	bic.w	r3, r3, #1
 8000c94:	6013      	str	r3, [r2, #0]
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8000c96:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000c9a:	fbb7 f7f3 	udiv	r7, r7, r3
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
      
      do
      {
        if (++count > timeout)
 8000c9e:	9b01      	ldr	r3, [sp, #4]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	429f      	cmp	r7, r3
 8000ca4:	9301      	str	r3, [sp, #4]
 8000ca6:	d302      	bcc.n	8000cae <HAL_DMA_IRQHandler+0x156>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000ca8:	6813      	ldr	r3, [r2, #0]
 8000caa:	07db      	lsls	r3, r3, #31
 8000cac:	d4f7      	bmi.n	8000c9e <HAL_DMA_IRQHandler+0x146>

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000cae:	2300      	movs	r3, #0
 8000cb0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    }
    
    if(hdma->XferErrorCallback != NULL)
 8000cba:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000cbc:	b10b      	cbz	r3, 8000cc2 <HAL_DMA_IRQHandler+0x16a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000cbe:	4620      	mov	r0, r4
 8000cc0:	4798      	blx	r3
    }
  }
}
 8000cc2:	b003      	add	sp, #12
 8000cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000018 	.word	0x20000018
 8000ccc:	00800001 	.word	0x00800001
 8000cd0:	00800004 	.word	0x00800004

08000cd4 <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000cd4:	4909      	ldr	r1, [pc, #36]	; (8000cfc <FLASH_Program_DoubleWord+0x28>)
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000cd6:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000cd8:	690c      	ldr	r4, [r1, #16]
 8000cda:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8000cde:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8000ce0:	690c      	ldr	r4, [r1, #16]
 8000ce2:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8000ce6:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000ce8:	690c      	ldr	r4, [r1, #16]
 8000cea:	f044 0401 	orr.w	r4, r4, #1
 8000cee:	610c      	str	r4, [r1, #16]
  
  *(__IO uint64_t*)Address = Data;
 8000cf0:	e9c0 2300 	strd	r2, r3, [r0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000cf4:	f3bf 8f4f 	dsb	sy
 8000cf8:	bd10      	pop	{r4, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023c00 	.word	0x40023c00

08000d00 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000d00:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <FLASH_Program_Word+0x24>)
 8000d02:	691a      	ldr	r2, [r3, #16]
 8000d04:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000d08:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8000d0a:	691a      	ldr	r2, [r3, #16]
 8000d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d10:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000d12:	691a      	ldr	r2, [r3, #16]
 8000d14:	f042 0201 	orr.w	r2, r2, #1
 8000d18:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 8000d1a:	6001      	str	r1, [r0, #0]
 8000d1c:	f3bf 8f4f 	dsb	sy
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	40023c00 	.word	0x40023c00

08000d28 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <FLASH_Program_HalfWord+0x24>)
 8000d2a:	691a      	ldr	r2, [r3, #16]
 8000d2c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000d30:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8000d32:	691a      	ldr	r2, [r3, #16]
 8000d34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d38:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000d3a:	691a      	ldr	r2, [r3, #16]
 8000d3c:	f042 0201 	orr.w	r2, r2, #1
 8000d40:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 8000d42:	8001      	strh	r1, [r0, #0]
 8000d44:	f3bf 8f4f 	dsb	sy
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	40023c00 	.word	0x40023c00

08000d50 <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <FLASH_Program_Byte+0x20>)
 8000d52:	691a      	ldr	r2, [r3, #16]
 8000d54:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000d58:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8000d5a:	691a      	ldr	r2, [r3, #16]
 8000d5c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000d5e:	691a      	ldr	r2, [r3, #16]
 8000d60:	f042 0201 	orr.w	r2, r2, #1
 8000d64:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t*)Address = Data;
 8000d66:	7001      	strb	r1, [r0, #0]
 8000d68:	f3bf 8f4f 	dsb	sy
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	40023c00 	.word	0x40023c00

08000d74 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8000d74:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <FLASH_SetErrorCode+0x5c>)
 8000d76:	68da      	ldr	r2, [r3, #12]
 8000d78:	0792      	lsls	r2, r2, #30
 8000d7a:	d504      	bpl.n	8000d86 <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8000d7c:	4915      	ldr	r1, [pc, #84]	; (8000dd4 <FLASH_SetErrorCode+0x60>)
 8000d7e:	698a      	ldr	r2, [r1, #24]
 8000d80:	f042 0220 	orr.w	r2, r2, #32
 8000d84:	618a      	str	r2, [r1, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	06db      	lsls	r3, r3, #27
 8000d8a:	d504      	bpl.n	8000d96 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000d8c:	4a11      	ldr	r2, [pc, #68]	; (8000dd4 <FLASH_SetErrorCode+0x60>)
 8000d8e:	6993      	ldr	r3, [r2, #24]
 8000d90:	f043 0310 	orr.w	r3, r3, #16
 8000d94:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <FLASH_SetErrorCode+0x5c>)
 8000d98:	68da      	ldr	r2, [r3, #12]
 8000d9a:	0690      	lsls	r0, r2, #26
 8000d9c:	d504      	bpl.n	8000da8 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000d9e:	490d      	ldr	r1, [pc, #52]	; (8000dd4 <FLASH_SetErrorCode+0x60>)
 8000da0:	698a      	ldr	r2, [r1, #24]
 8000da2:	f042 0208 	orr.w	r2, r2, #8
 8000da6:	618a      	str	r2, [r1, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	0659      	lsls	r1, r3, #25
 8000dac:	d504      	bpl.n	8000db8 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8000dae:	4a09      	ldr	r2, [pc, #36]	; (8000dd4 <FLASH_SetErrorCode+0x60>)
 8000db0:	6993      	ldr	r3, [r2, #24]
 8000db2:	f043 0304 	orr.w	r3, r3, #4
 8000db6:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <FLASH_SetErrorCode+0x5c>)
 8000dba:	68da      	ldr	r2, [r3, #12]
 8000dbc:	0612      	lsls	r2, r2, #24
 8000dbe:	d504      	bpl.n	8000dca <FLASH_SetErrorCode+0x56>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8000dc0:	4904      	ldr	r1, [pc, #16]	; (8000dd4 <FLASH_SetErrorCode+0x60>)
 8000dc2:	698a      	ldr	r2, [r1, #24]
 8000dc4:	f042 0202 	orr.w	r2, r2, #2
 8000dc8:	618a      	str	r2, [r1, #24]
  }
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8000dca:	22f2      	movs	r2, #242	; 0xf2
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	4770      	bx	lr
 8000dd0:	40023c00 	.word	0x40023c00
 8000dd4:	200013cc 	.word	0x200013cc

08000dd8 <HAL_FLASH_Unlock>:
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_FLASH_Unlock+0x1c>)
 8000dda:	691a      	ldr	r2, [r3, #16]
 8000ddc:	2a00      	cmp	r2, #0
 8000dde:	da06      	bge.n	8000dee <HAL_FLASH_Unlock+0x16>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8000de0:	4a05      	ldr	r2, [pc, #20]	; (8000df8 <HAL_FLASH_Unlock+0x20>)
  else
  {
    return HAL_ERROR;
  }
  
  return HAL_OK; 
 8000de2:	2000      	movs	r0, #0
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8000de4:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8000de6:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8000dea:	605a      	str	r2, [r3, #4]
  else
  {
    return HAL_ERROR;
  }
  
  return HAL_OK; 
 8000dec:	4770      	bx	lr
    FLASH->KEYR = FLASH_KEY1;
    FLASH->KEYR = FLASH_KEY2;
  }
  else
  {
    return HAL_ERROR;
 8000dee:	2001      	movs	r0, #1
  }
  
  return HAL_OK; 
}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	40023c00 	.word	0x40023c00
 8000df8:	45670123 	.word	0x45670123

08000dfc <HAL_FLASH_Lock>:
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000dfc:	4a03      	ldr	r2, [pc, #12]	; (8000e0c <HAL_FLASH_Lock+0x10>)
  
  return HAL_OK;  
}
 8000dfe:	2000      	movs	r0, #0
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000e00:	6913      	ldr	r3, [r2, #16]
 8000e02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e06:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
}
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	40023c00 	.word	0x40023c00

08000e10 <FLASH_WaitForLastOperation>:
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
  uint32_t tickstart = 0;
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e10:	2200      	movs	r2, #0
 8000e12:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <FLASH_WaitForLastOperation+0x54>)
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout: maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e18:	619a      	str	r2, [r3, #24]
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000e1a:	4d13      	ldr	r5, [pc, #76]	; (8000e68 <FLASH_WaitForLastOperation+0x58>)
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8000e1c:	f7ff faa2 	bl	8000364 <HAL_GetTick>
 8000e20:	4606      	mov	r6, r0

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000e22:	68eb      	ldr	r3, [r5, #12]
 8000e24:	4a10      	ldr	r2, [pc, #64]	; (8000e68 <FLASH_WaitForLastOperation+0x58>)
 8000e26:	03db      	lsls	r3, r3, #15
 8000e28:	d50a      	bpl.n	8000e40 <FLASH_WaitForLastOperation+0x30>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8000e2a:	1c62      	adds	r2, r4, #1
 8000e2c:	d0f9      	beq.n	8000e22 <FLASH_WaitForLastOperation+0x12>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8000e2e:	b90c      	cbnz	r4, 8000e34 <FLASH_WaitForLastOperation+0x24>
      {
        return HAL_TIMEOUT;
 8000e30:	2003      	movs	r0, #3
 8000e32:	bd70      	pop	{r4, r5, r6, pc}

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
  { 
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8000e34:	f7ff fa96 	bl	8000364 <HAL_GetTick>
 8000e38:	1b80      	subs	r0, r0, r6
 8000e3a:	4284      	cmp	r4, r0
 8000e3c:	d2f1      	bcs.n	8000e22 <FLASH_WaitForLastOperation+0x12>
 8000e3e:	e7f7      	b.n	8000e30 <FLASH_WaitForLastOperation+0x20>
        return HAL_TIMEOUT;
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8000e40:	68d0      	ldr	r0, [r2, #12]
 8000e42:	f010 00f2 	ands.w	r0, r0, #242	; 0xf2
 8000e46:	d003      	beq.n	8000e50 <FLASH_WaitForLastOperation+0x40>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000e48:	f7ff ff94 	bl	8000d74 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000e50:	68d3      	ldr	r3, [r2, #12]
 8000e52:	f013 0301 	ands.w	r3, r3, #1
 8000e56:	d002      	beq.n	8000e5e <FLASH_WaitForLastOperation+0x4e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000e58:	2301      	movs	r3, #1
 8000e5a:	60d3      	str	r3, [r2, #12]
 8000e5c:	bd70      	pop	{r4, r5, r6, pc}
  }

  /* If there is an error flag set */
  return HAL_OK;
 8000e5e:	4618      	mov	r0, r3
  
}  
 8000e60:	bd70      	pop	{r4, r5, r6, pc}
 8000e62:	bf00      	nop
 8000e64:	200013cc 	.word	0x200013cc
 8000e68:	40023c00 	.word	0x40023c00

08000e6c <HAL_FLASH_Program>:
  * @param  Data: specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000e70:	4c1c      	ldr	r4, [pc, #112]	; (8000ee4 <HAL_FLASH_Program+0x78>)
  * @param  Data: specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000e72:	4698      	mov	r8, r3
 8000e74:	4607      	mov	r7, r0
 8000e76:	460d      	mov	r5, r1
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000e78:	7d23      	ldrb	r3, [r4, #20]
  * @param  Data: specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000e7a:	4616      	mov	r6, r2
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d02d      	beq.n	8000edc <HAL_FLASH_Program+0x70>
 8000e80:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e82:	f24c 3050 	movw	r0, #50000	; 0xc350
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000e86:	7523      	strb	r3, [r4, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e88:	f7ff ffc2 	bl	8000e10 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 8000e8c:	bb10      	cbnz	r0, 8000ed4 <HAL_FLASH_Program+0x68>
  {
    switch(TypeProgram)
 8000e8e:	2f03      	cmp	r7, #3
 8000e90:	d817      	bhi.n	8000ec2 <HAL_FLASH_Program+0x56>
 8000e92:	e8df f007 	tbb	[pc, r7]
 8000e96:	0702      	.short	0x0702
 8000e98:	110c      	.short	0x110c
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8000e9a:	b2f1      	uxtb	r1, r6
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	f7ff ff57 	bl	8000d50 <FLASH_Program_Byte>
        break;
 8000ea2:	e00e      	b.n	8000ec2 <HAL_FLASH_Program+0x56>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000ea4:	b2b1      	uxth	r1, r6
 8000ea6:	4628      	mov	r0, r5
 8000ea8:	f7ff ff3e 	bl	8000d28 <FLASH_Program_HalfWord>
        break;
 8000eac:	e009      	b.n	8000ec2 <HAL_FLASH_Program+0x56>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8000eae:	4631      	mov	r1, r6
 8000eb0:	4628      	mov	r0, r5
 8000eb2:	f7ff ff25 	bl	8000d00 <FLASH_Program_Word>
        break;
 8000eb6:	e004      	b.n	8000ec2 <HAL_FLASH_Program+0x56>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 8000eb8:	4632      	mov	r2, r6
 8000eba:	4643      	mov	r3, r8
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	f7ff ff09 	bl	8000cd4 <FLASH_Program_DoubleWord>
      }
      default :
        break;
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ec2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ec6:	f7ff ffa3 	bl	8000e10 <FLASH_WaitForLastOperation>
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8000eca:	4a07      	ldr	r2, [pc, #28]	; (8000ee8 <HAL_FLASH_Program+0x7c>)
 8000ecc:	6913      	ldr	r3, [r2, #16]
 8000ece:	f023 0301 	bic.w	r3, r3, #1
 8000ed2:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	7523      	strb	r3, [r4, #20]

  return status;
 8000ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000edc:	2002      	movs	r0, #2

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);

  return status;
}
 8000ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200013cc 	.word	0x200013cc
 8000ee8:	40023c00 	.word	0x40023c00

08000eec <FLASH_MassErase>:
{
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <FLASH_MassErase+0x24>)
 8000eee:	691a      	ldr	r2, [r3, #16]
 8000ef0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000ef4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 8000ef6:	691a      	ldr	r2, [r3, #16]
 8000ef8:	f042 0204 	orr.w	r2, r2, #4
 8000efc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 8000efe:	691a      	ldr	r2, [r3, #16]
 8000f00:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f04:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8000f08:	6118      	str	r0, [r3, #16]
 8000f0a:	f3bf 8f4f 	dsb	sy
 8000f0e:	4770      	bx	lr
 8000f10:	40023c00 	.word	0x40023c00

08000f14 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8000f14:	b151      	cbz	r1, 8000f2c <FLASH_Erase_Sector+0x18>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8000f16:	2901      	cmp	r1, #1
 8000f18:	d006      	beq.n	8000f28 <FLASH_Erase_Sector+0x14>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8000f1a:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8000f1c:	bf0c      	ite	eq
 8000f1e:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8000f22:	f44f 7140 	movne.w	r1, #768	; 0x300
 8000f26:	e001      	b.n	8000f2c <FLASH_Erase_Sector+0x18>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8000f28:	f44f 7180 	mov.w	r1, #256	; 0x100
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
  }

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <FLASH_Erase_Sector+0x54>)
 8000f2e:	691a      	ldr	r2, [r3, #16]
 8000f30:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000f34:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8000f36:	691a      	ldr	r2, [r3, #16]
 8000f38:	4311      	orrs	r1, r2
 8000f3a:	6119      	str	r1, [r3, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f3c:	2178      	movs	r1, #120	; 0x78
  FLASH->CR &= SECTOR_MASK;
 8000f3e:	691a      	ldr	r2, [r3, #16]
 8000f40:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000f44:	611a      	str	r2, [r3, #16]
 8000f46:	fa91 f1a1 	rbit	r1, r1
  FLASH->CR |= FLASH_CR_SER | (Sector << POSITION_VAL(FLASH_CR_SNB));
 8000f4a:	691a      	ldr	r2, [r3, #16]
 8000f4c:	fab1 f181 	clz	r1, r1
 8000f50:	f042 0202 	orr.w	r2, r2, #2
 8000f54:	4088      	lsls	r0, r1
 8000f56:	4310      	orrs	r0, r2
 8000f58:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8000f5a:	691a      	ldr	r2, [r3, #16]
 8000f5c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f60:	611a      	str	r2, [r3, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f62:	f3bf 8f4f 	dsb	sy
 8000f66:	4770      	bx	lr
 8000f68:	40023c00 	.word	0x40023c00

08000f6c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8000f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t index = 0;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f70:	4e23      	ldr	r6, [pc, #140]	; (8001000 <HAL_FLASHEx_Erase+0x94>)
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8000f72:	4605      	mov	r5, r0
 8000f74:	4688      	mov	r8, r1
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t index = 0;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f76:	7d33      	ldrb	r3, [r6, #20]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d03e      	beq.n	8000ffa <HAL_FLASHEx_Erase+0x8e>
 8000f7c:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f7e:	f24c 3050 	movw	r0, #50000	; 0xc350
{
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t index = 0;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f82:	7533      	strb	r3, [r6, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f84:	f7ff ff44 	bl	8000e10 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 8000f88:	4604      	mov	r4, r0
 8000f8a:	bb88      	cbnz	r0, 8000ff0 <HAL_FLASHEx_Erase+0x84>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8000f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f90:	f8c8 3000 	str.w	r3, [r8]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000f94:	682b      	ldr	r3, [r5, #0]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d10d      	bne.n	8000fb6 <HAL_FLASHEx_Erase+0x4a>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
 8000f9a:	7b28      	ldrb	r0, [r5, #12]
 8000f9c:	f7ff ffa6 	bl	8000eec <FLASH_MassErase>
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fa0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fa4:	f7ff ff34 	bl	8000e10 <FLASH_WaitForLastOperation>
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8000fa8:	4a16      	ldr	r2, [pc, #88]	; (8001004 <HAL_FLASHEx_Erase+0x98>)
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000faa:	4604      	mov	r4, r0
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8000fac:	6913      	ldr	r3, [r2, #16]
 8000fae:	f023 0304 	bic.w	r3, r3, #4
 8000fb2:	6113      	str	r3, [r2, #16]
 8000fb4:	e01c      	b.n	8000ff0 <HAL_FLASHEx_Erase+0x84>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000fb6:	686f      	ldr	r7, [r5, #4]

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8000fb8:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8001004 <HAL_FLASHEx_Erase+0x98>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000fbc:	68aa      	ldr	r2, [r5, #8]
 8000fbe:	686b      	ldr	r3, [r5, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	429f      	cmp	r7, r3
 8000fc4:	d214      	bcs.n	8000ff0 <HAL_FLASHEx_Erase+0x84>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8000fc6:	7b29      	ldrb	r1, [r5, #12]
 8000fc8:	4638      	mov	r0, r7
 8000fca:	f7ff ffa3 	bl	8000f14 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fce:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fd2:	f7ff ff1d 	bl	8000e10 <FLASH_WaitForLastOperation>
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8000fd6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8000fda:	f023 037a 	bic.w	r3, r3, #122	; 0x7a
 8000fde:	f8c9 3010 	str.w	r3, [r9, #16]

        if(status != HAL_OK) 
 8000fe2:	b118      	cbz	r0, 8000fec <HAL_FLASHEx_Erase+0x80>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8000fe4:	f8c8 7000 	str.w	r7, [r8]
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fe8:	4604      	mov	r4, r0

        if(status != HAL_OK) 
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
          break;
 8000fea:	e001      	b.n	8000ff0 <HAL_FLASHEx_Erase+0x84>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000fec:	3701      	adds	r7, #1
 8000fee:	e7e5      	b.n	8000fbc <HAL_FLASHEx_Erase+0x50>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000ff0:	2300      	movs	r3, #0

  return status;
 8000ff2:	4620      	mov	r0, r4
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000ff4:	7533      	strb	r3, [r6, #20]

  return status;
 8000ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
{
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t index = 0;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000ffa:	2002      	movs	r0, #2

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);

  return status;
}
 8000ffc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001000:	200013cc 	.word	0x200013cc
 8001004:	40023c00 	.word	0x40023c00

08001008 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800100c:	680b      	ldr	r3, [r1, #0]
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800100e:	b085      	sub	sp, #20
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001010:	4e6f      	ldr	r6, [pc, #444]	; (80011d0 <HAL_GPIO_Init+0x1c8>)
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001012:	9301      	str	r3, [sp, #4]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001014:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001016:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 80011d8 <HAL_GPIO_Init+0x1d0>
 800101a:	46b6      	mov	lr, r6

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800101c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80011dc <HAL_GPIO_Init+0x1d4>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001020:	2201      	movs	r2, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8001022:	9c01      	ldr	r4, [sp, #4]

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001024:	409a      	lsls	r2, r3
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8001026:	ea32 0404 	bics.w	r4, r2, r4
 800102a:	f040 80c9 	bne.w	80011c0 <HAL_GPIO_Init+0x1b8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800102e:	684c      	ldr	r4, [r1, #4]
 8001030:	f024 0910 	bic.w	r9, r4, #16
 8001034:	f1b9 0f02 	cmp.w	r9, #2
 8001038:	d114      	bne.n	8001064 <HAL_GPIO_Init+0x5c>
 800103a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800103e:	f003 0b07 	and.w	fp, r3, #7
 8001042:	250f      	movs	r5, #15
 8001044:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8001048:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800104c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001050:	fa05 f50b 	lsl.w	r5, r5, fp
 8001054:	ea27 0505 	bic.w	r5, r7, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001058:	690f      	ldr	r7, [r1, #16]
 800105a:	fa07 f70b 	lsl.w	r7, r7, fp
 800105e:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3] = temp;
 8001060:	f8ca 7020 	str.w	r7, [sl, #32]
 8001064:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001068:	2503      	movs	r5, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800106a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800106c:	f004 0b03 	and.w	fp, r4, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001070:	fa05 f50a 	lsl.w	r5, r5, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001074:	f109 39ff 	add.w	r9, r9, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001078:	fa0b fb0a 	lsl.w	fp, fp, sl
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800107c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800107e:	f1b9 0f01 	cmp.w	r9, #1
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001082:	ea07 0705 	and.w	r7, r7, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001086:	ea4b 0707 	orr.w	r7, fp, r7
      GPIOx->MODER = temp;
 800108a:	6007      	str	r7, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800108c:	d812      	bhi.n	80010b4 <HAL_GPIO_Init+0xac>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800108e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001090:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8001094:	68cf      	ldr	r7, [r1, #12]
 8001096:	fa07 f70a 	lsl.w	r7, r7, sl
 800109a:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800109e:	f3c4 1900 	ubfx	r9, r4, #4, #1
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
        GPIOx->OSPEEDR = temp;
 80010a2:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80010a4:	fa09 f903 	lsl.w	r9, r9, r3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010a8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010aa:	ea27 0702 	bic.w	r7, r7, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80010ae:	ea49 0707 	orr.w	r7, r9, r7
        GPIOx->OTYPER = temp;
 80010b2:	6047      	str	r7, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010b4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80010b6:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80010b8:	688f      	ldr	r7, [r1, #8]
 80010ba:	fa07 f70a 	lsl.w	r7, r7, sl
 80010be:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80010c0:	60c5      	str	r5, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010c2:	00e5      	lsls	r5, r4, #3
 80010c4:	d57c      	bpl.n	80011c0 <HAL_GPIO_Init+0x1b8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c6:	f8dc 5044 	ldr.w	r5, [ip, #68]	; 0x44
 80010ca:	f023 0703 	bic.w	r7, r3, #3

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010ce:	f003 0a03 	and.w	sl, r3, #3
 80010d2:	f04f 090f 	mov.w	r9, #15
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d6:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 80010da:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010de:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e2:	f8cc 5044 	str.w	r5, [ip, #68]	; 0x44
 80010e6:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 80010ea:	f8dc 5044 	ldr.w	r5, [ip, #68]	; 0x44
 80010ee:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 80010f2:	9503      	str	r5, [sp, #12]
 80010f4:	9d03      	ldr	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010f6:	fa09 f50a 	lsl.w	r5, r9, sl
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
 80010fa:	f8d7 b008 	ldr.w	fp, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010fe:	ea2b 0905 	bic.w	r9, fp, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001102:	4d34      	ldr	r5, [pc, #208]	; (80011d4 <HAL_GPIO_Init+0x1cc>)
 8001104:	42a8      	cmp	r0, r5
 8001106:	d024      	beq.n	8001152 <HAL_GPIO_Init+0x14a>
 8001108:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800110c:	42a8      	cmp	r0, r5
 800110e:	d022      	beq.n	8001156 <HAL_GPIO_Init+0x14e>
 8001110:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001114:	42a8      	cmp	r0, r5
 8001116:	d020      	beq.n	800115a <HAL_GPIO_Init+0x152>
 8001118:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800111c:	42a8      	cmp	r0, r5
 800111e:	d01e      	beq.n	800115e <HAL_GPIO_Init+0x156>
 8001120:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001124:	42a8      	cmp	r0, r5
 8001126:	d01c      	beq.n	8001162 <HAL_GPIO_Init+0x15a>
 8001128:	4540      	cmp	r0, r8
 800112a:	d01c      	beq.n	8001166 <HAL_GPIO_Init+0x15e>
 800112c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001130:	42a8      	cmp	r0, r5
 8001132:	d01a      	beq.n	800116a <HAL_GPIO_Init+0x162>
 8001134:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001138:	42a8      	cmp	r0, r5
 800113a:	d018      	beq.n	800116e <HAL_GPIO_Init+0x166>
 800113c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001140:	42a8      	cmp	r0, r5
 8001142:	d016      	beq.n	8001172 <HAL_GPIO_Init+0x16a>
 8001144:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001148:	42a8      	cmp	r0, r5
 800114a:	bf14      	ite	ne
 800114c:	250a      	movne	r5, #10
 800114e:	2509      	moveq	r5, #9
 8001150:	e010      	b.n	8001174 <HAL_GPIO_Init+0x16c>
 8001152:	2500      	movs	r5, #0
 8001154:	e00e      	b.n	8001174 <HAL_GPIO_Init+0x16c>
 8001156:	2501      	movs	r5, #1
 8001158:	e00c      	b.n	8001174 <HAL_GPIO_Init+0x16c>
 800115a:	2502      	movs	r5, #2
 800115c:	e00a      	b.n	8001174 <HAL_GPIO_Init+0x16c>
 800115e:	2503      	movs	r5, #3
 8001160:	e008      	b.n	8001174 <HAL_GPIO_Init+0x16c>
 8001162:	2504      	movs	r5, #4
 8001164:	e006      	b.n	8001174 <HAL_GPIO_Init+0x16c>
 8001166:	2505      	movs	r5, #5
 8001168:	e004      	b.n	8001174 <HAL_GPIO_Init+0x16c>
 800116a:	2506      	movs	r5, #6
 800116c:	e002      	b.n	8001174 <HAL_GPIO_Init+0x16c>
 800116e:	2507      	movs	r5, #7
 8001170:	e000      	b.n	8001174 <HAL_GPIO_Init+0x16c>
 8001172:	2508      	movs	r5, #8
 8001174:	fa05 f50a 	lsl.w	r5, r5, sl
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001178:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800117c:	ea45 0509 	orr.w	r5, r5, r9
        SYSCFG->EXTICR[position >> 2] = temp;
 8001180:	60bd      	str	r5, [r7, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8001182:	ea6f 0702 	mvn.w	r7, r2
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001186:	6835      	ldr	r5, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 8001188:	bf0c      	ite	eq
 800118a:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 800118c:	4315      	orrne	r5, r2
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800118e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8001192:	f8ce 5000 	str.w	r5, [lr]

        temp = EXTI->EMR;
 8001196:	f8de 5004 	ldr.w	r5, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 800119a:	bf0c      	ite	eq
 800119c:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 800119e:	4315      	orrne	r5, r2
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011a0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80011a4:	6075      	str	r5, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011a6:	68b5      	ldr	r5, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 80011a8:	bf0c      	ite	eq
 80011aa:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 80011ac:	4315      	orrne	r5, r2
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011ae:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80011b0:	f8ce 5008 	str.w	r5, [lr, #8]

        temp = EXTI->FTSR;
 80011b4:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 80011b8:	bf54      	ite	pl
 80011ba:	403d      	andpl	r5, r7
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 80011bc:	4315      	orrmi	r5, r2
        }
        EXTI->FTSR = temp;
 80011be:	60f5      	str	r5, [r6, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80011c0:	3301      	adds	r3, #1
 80011c2:	2b10      	cmp	r3, #16
 80011c4:	f47f af2c 	bne.w	8001020 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 80011c8:	b005      	add	sp, #20
 80011ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011ce:	bf00      	nop
 80011d0:	40013c00 	.word	0x40013c00
 80011d4:	40020000 	.word	0x40020000
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40021400 	.word	0x40021400

080011e0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e0:	b902      	cbnz	r2, 80011e4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80011e2:	0409      	lsls	r1, r1, #16
 80011e4:	6181      	str	r1, [r0, #24]
 80011e6:	4770      	bx	lr

080011e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011e8:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80011ea:	4b04      	ldr	r3, [pc, #16]	; (80011fc <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80011ec:	6959      	ldr	r1, [r3, #20]
 80011ee:	4201      	tst	r1, r0
 80011f0:	d002      	beq.n	80011f8 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011f2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011f4:	f002 fdce 	bl	8003d94 <HAL_GPIO_EXTI_Callback>
 80011f8:	bd08      	pop	{r3, pc}
 80011fa:	bf00      	nop
 80011fc:	40013c00 	.word	0x40013c00

08001200 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001200:	4b19      	ldr	r3, [pc, #100]	; (8001268 <HAL_PWREx_EnableOverDrive+0x68>)
 8001202:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001204:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001208:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800120a:	641a      	str	r2, [r3, #64]	; 0x40
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800120e:	4c17      	ldr	r4, [pc, #92]	; (800126c <HAL_PWREx_EnableOverDrive+0x6c>)
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001214:	4625      	mov	r5, r4
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001216:	9301      	str	r3, [sp, #4]
 8001218:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800121a:	6823      	ldr	r3, [r4, #0]
 800121c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001220:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001222:	f7ff f89f 	bl	8000364 <HAL_GetTick>
 8001226:	4606      	mov	r6, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001228:	686b      	ldr	r3, [r5, #4]
 800122a:	4c10      	ldr	r4, [pc, #64]	; (800126c <HAL_PWREx_EnableOverDrive+0x6c>)
 800122c:	03da      	lsls	r2, r3, #15
 800122e:	d407      	bmi.n	8001240 <HAL_PWREx_EnableOverDrive+0x40>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001230:	f7ff f898 	bl	8000364 <HAL_GetTick>
 8001234:	1b80      	subs	r0, r0, r6
 8001236:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800123a:	d9f5      	bls.n	8001228 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 800123c:	2003      	movs	r0, #3
 800123e:	e011      	b.n	8001264 <HAL_PWREx_EnableOverDrive+0x64>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001240:	6823      	ldr	r3, [r4, #0]
 8001242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001246:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001248:	f7ff f88c 	bl	8000364 <HAL_GetTick>
 800124c:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800124e:	6863      	ldr	r3, [r4, #4]
 8001250:	039b      	lsls	r3, r3, #14
 8001252:	d406      	bmi.n	8001262 <HAL_PWREx_EnableOverDrive+0x62>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001254:	f7ff f886 	bl	8000364 <HAL_GetTick>
 8001258:	1b40      	subs	r0, r0, r5
 800125a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800125e:	d9f6      	bls.n	800124e <HAL_PWREx_EnableOverDrive+0x4e>
 8001260:	e7ec      	b.n	800123c <HAL_PWREx_EnableOverDrive+0x3c>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001262:	2000      	movs	r0, #0
}
 8001264:	b002      	add	sp, #8
 8001266:	bd70      	pop	{r4, r5, r6, pc}
 8001268:	40023800 	.word	0x40023800
 800126c:	40007000 	.word	0x40007000

08001270 <HAL_RCC_OscConfig>:
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001270:	6803      	ldr	r3, [r0, #0]
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001272:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001274:	4604      	mov	r4, r0
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001276:	07d8      	lsls	r0, r3, #31
 8001278:	d403      	bmi.n	8001282 <HAL_RCC_OscConfig+0x12>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800127a:	6823      	ldr	r3, [r4, #0]
 800127c:	0799      	lsls	r1, r3, #30
 800127e:	d452      	bmi.n	8001326 <HAL_RCC_OscConfig+0xb6>
 8001280:	e0a5      	b.n	80013ce <HAL_RCC_OscConfig+0x15e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001282:	4b96      	ldr	r3, [pc, #600]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	f002 020c 	and.w	r2, r2, #12
 800128a:	2a04      	cmp	r2, #4
 800128c:	d007      	beq.n	800129e <HAL_RCC_OscConfig+0x2e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	f002 020c 	and.w	r2, r2, #12
 8001294:	2a08      	cmp	r2, #8
 8001296:	d10b      	bne.n	80012b0 <HAL_RCC_OscConfig+0x40>
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	025a      	lsls	r2, r3, #9
 800129c:	d508      	bpl.n	80012b0 <HAL_RCC_OscConfig+0x40>
    {
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800129e:	4b8f      	ldr	r3, [pc, #572]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	039b      	lsls	r3, r3, #14
 80012a4:	d5e9      	bpl.n	800127a <HAL_RCC_OscConfig+0xa>
 80012a6:	6863      	ldr	r3, [r4, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1e6      	bne.n	800127a <HAL_RCC_OscConfig+0xa>
      {
        return HAL_ERROR;
 80012ac:	2001      	movs	r0, #1
 80012ae:	e176      	b.n	800159e <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012b0:	6863      	ldr	r3, [r4, #4]
 80012b2:	4d8a      	ldr	r5, [pc, #552]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 80012b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b8:	d013      	beq.n	80012e2 <HAL_RCC_OscConfig+0x72>
 80012ba:	b95b      	cbnz	r3, 80012d4 <HAL_RCC_OscConfig+0x64>
 80012bc:	682b      	ldr	r3, [r5, #0]
 80012be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012c2:	602b      	str	r3, [r5, #0]
 80012c4:	682b      	ldr	r3, [r5, #0]
 80012c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ca:	602b      	str	r3, [r5, #0]
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012cc:	f7ff f84a 	bl	8000364 <HAL_GetTick>
 80012d0:	4606      	mov	r6, r0
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d2:	e024      	b.n	800131e <HAL_RCC_OscConfig+0xae>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012d8:	682b      	ldr	r3, [r5, #0]
 80012da:	d106      	bne.n	80012ea <HAL_RCC_OscConfig+0x7a>
 80012dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012e0:	602b      	str	r3, [r5, #0]
 80012e2:	682b      	ldr	r3, [r5, #0]
 80012e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e8:	e005      	b.n	80012f6 <HAL_RCC_OscConfig+0x86>
 80012ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ee:	602b      	str	r3, [r5, #0]
 80012f0:	682b      	ldr	r3, [r5, #0]
 80012f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012f6:	602b      	str	r3, [r5, #0]
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f8:	f7ff f834 	bl	8000364 <HAL_GetTick>
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fc:	4d77      	ldr	r5, [pc, #476]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fe:	4606      	mov	r6, r0
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001300:	682b      	ldr	r3, [r5, #0]
 8001302:	039f      	lsls	r7, r3, #14
 8001304:	d4b9      	bmi.n	800127a <HAL_RCC_OscConfig+0xa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001306:	f7ff f82d 	bl	8000364 <HAL_GetTick>
 800130a:	1b80      	subs	r0, r0, r6
 800130c:	2864      	cmp	r0, #100	; 0x64
 800130e:	d9f7      	bls.n	8001300 <HAL_RCC_OscConfig+0x90>
          {
            return HAL_TIMEOUT;
 8001310:	2003      	movs	r0, #3
 8001312:	e144      	b.n	800159e <HAL_RCC_OscConfig+0x32e>
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001314:	f7ff f826 	bl	8000364 <HAL_GetTick>
 8001318:	1b80      	subs	r0, r0, r6
 800131a:	2864      	cmp	r0, #100	; 0x64
 800131c:	d8f8      	bhi.n	8001310 <HAL_RCC_OscConfig+0xa0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131e:	682b      	ldr	r3, [r5, #0]
 8001320:	0398      	lsls	r0, r3, #14
 8001322:	d4f7      	bmi.n	8001314 <HAL_RCC_OscConfig+0xa4>
 8001324:	e7a9      	b.n	800127a <HAL_RCC_OscConfig+0xa>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001326:	4b6d      	ldr	r3, [pc, #436]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 8001328:	689a      	ldr	r2, [r3, #8]
 800132a:	f012 0f0c 	tst.w	r2, #12
 800132e:	d007      	beq.n	8001340 <HAL_RCC_OscConfig+0xd0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001330:	689a      	ldr	r2, [r3, #8]
 8001332:	f002 020c 	and.w	r2, r2, #12
 8001336:	2a08      	cmp	r2, #8
 8001338:	d117      	bne.n	800136a <HAL_RCC_OscConfig+0xfa>
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	0259      	lsls	r1, r3, #9
 800133e:	d414      	bmi.n	800136a <HAL_RCC_OscConfig+0xfa>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001340:	4b66      	ldr	r3, [pc, #408]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	0792      	lsls	r2, r2, #30
 8001346:	d502      	bpl.n	800134e <HAL_RCC_OscConfig+0xde>
 8001348:	68e2      	ldr	r2, [r4, #12]
 800134a:	2a01      	cmp	r2, #1
 800134c:	d1ae      	bne.n	80012ac <HAL_RCC_OscConfig+0x3c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800134e:	681a      	ldr	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001350:	21f8      	movs	r1, #248	; 0xf8
 8001352:	fa91 f1a1 	rbit	r1, r1
 8001356:	6920      	ldr	r0, [r4, #16]
 8001358:	fab1 f181 	clz	r1, r1
 800135c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001360:	fa00 f101 	lsl.w	r1, r0, r1
 8001364:	430a      	orrs	r2, r1
 8001366:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001368:	e031      	b.n	80013ce <HAL_RCC_OscConfig+0x15e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800136a:	68e3      	ldr	r3, [r4, #12]
 800136c:	4d5b      	ldr	r5, [pc, #364]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 800136e:	b1f3      	cbz	r3, 80013ae <HAL_RCC_OscConfig+0x13e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001370:	682b      	ldr	r3, [r5, #0]
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001378:	f7fe fff4 	bl	8000364 <HAL_GetTick>
 800137c:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800137e:	682b      	ldr	r3, [r5, #0]
 8001380:	4856      	ldr	r0, [pc, #344]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 8001382:	079b      	lsls	r3, r3, #30
 8001384:	d405      	bmi.n	8001392 <HAL_RCC_OscConfig+0x122>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001386:	f7fe ffed 	bl	8000364 <HAL_GetTick>
 800138a:	1b80      	subs	r0, r0, r6
 800138c:	2802      	cmp	r0, #2
 800138e:	d9f6      	bls.n	800137e <HAL_RCC_OscConfig+0x10e>
 8001390:	e7be      	b.n	8001310 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001392:	6803      	ldr	r3, [r0, #0]
 8001394:	22f8      	movs	r2, #248	; 0xf8
 8001396:	fa92 f2a2 	rbit	r2, r2
 800139a:	6921      	ldr	r1, [r4, #16]
 800139c:	fab2 f282 	clz	r2, r2
 80013a0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80013a4:	fa01 f202 	lsl.w	r2, r1, r2
 80013a8:	4313      	orrs	r3, r2
 80013aa:	6003      	str	r3, [r0, #0]
 80013ac:	e00f      	b.n	80013ce <HAL_RCC_OscConfig+0x15e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ae:	682b      	ldr	r3, [r5, #0]
 80013b0:	f023 0301 	bic.w	r3, r3, #1
 80013b4:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b6:	f7fe ffd5 	bl	8000364 <HAL_GetTick>
 80013ba:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013bc:	682b      	ldr	r3, [r5, #0]
 80013be:	079f      	lsls	r7, r3, #30
 80013c0:	d505      	bpl.n	80013ce <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c2:	f7fe ffcf 	bl	8000364 <HAL_GetTick>
 80013c6:	1b80      	subs	r0, r0, r6
 80013c8:	2802      	cmp	r0, #2
 80013ca:	d9f7      	bls.n	80013bc <HAL_RCC_OscConfig+0x14c>
 80013cc:	e7a0      	b.n	8001310 <HAL_RCC_OscConfig+0xa0>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ce:	6823      	ldr	r3, [r4, #0]
 80013d0:	071e      	lsls	r6, r3, #28
 80013d2:	d403      	bmi.n	80013dc <HAL_RCC_OscConfig+0x16c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013d4:	6823      	ldr	r3, [r4, #0]
 80013d6:	075d      	lsls	r5, r3, #29
 80013d8:	d549      	bpl.n	800146e <HAL_RCC_OscConfig+0x1fe>
 80013da:	e022      	b.n	8001422 <HAL_RCC_OscConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013dc:	6963      	ldr	r3, [r4, #20]
 80013de:	4d3f      	ldr	r5, [pc, #252]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 80013e0:	b17b      	cbz	r3, 8001402 <HAL_RCC_OscConfig+0x192>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013e2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	676b      	str	r3, [r5, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ea:	f7fe ffbb 	bl	8000364 <HAL_GetTick>
 80013ee:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013f0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80013f2:	0798      	lsls	r0, r3, #30
 80013f4:	d4ee      	bmi.n	80013d4 <HAL_RCC_OscConfig+0x164>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013f6:	f7fe ffb5 	bl	8000364 <HAL_GetTick>
 80013fa:	1b80      	subs	r0, r0, r6
 80013fc:	2802      	cmp	r0, #2
 80013fe:	d9f7      	bls.n	80013f0 <HAL_RCC_OscConfig+0x180>
 8001400:	e786      	b.n	8001310 <HAL_RCC_OscConfig+0xa0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001402:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001404:	f023 0301 	bic.w	r3, r3, #1
 8001408:	676b      	str	r3, [r5, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800140a:	f7fe ffab 	bl	8000364 <HAL_GetTick>
 800140e:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001410:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001412:	0799      	lsls	r1, r3, #30
 8001414:	d5de      	bpl.n	80013d4 <HAL_RCC_OscConfig+0x164>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001416:	f7fe ffa5 	bl	8000364 <HAL_GetTick>
 800141a:	1b80      	subs	r0, r0, r6
 800141c:	2802      	cmp	r0, #2
 800141e:	d9f7      	bls.n	8001410 <HAL_RCC_OscConfig+0x1a0>
 8001420:	e776      	b.n	8001310 <HAL_RCC_OscConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	4b2e      	ldr	r3, [pc, #184]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001424:	4d2e      	ldr	r5, [pc, #184]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001426:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001428:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800142c:	641a      	str	r2, [r3, #64]	; 0x40
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001434:	9301      	str	r3, [sp, #4]
 8001436:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001438:	682b      	ldr	r3, [r5, #0]
 800143a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800143e:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001440:	f7fe ff90 	bl	8000364 <HAL_GetTick>
 8001444:	4606      	mov	r6, r0
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001446:	682b      	ldr	r3, [r5, #0]
 8001448:	05da      	lsls	r2, r3, #23
 800144a:	d514      	bpl.n	8001476 <HAL_RCC_OscConfig+0x206>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800144c:	68a3      	ldr	r3, [r4, #8]
 800144e:	4d23      	ldr	r5, [pc, #140]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 8001450:	2b01      	cmp	r3, #1
 8001452:	d116      	bne.n	8001482 <HAL_RCC_OscConfig+0x212>
 8001454:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800145c:	f241 3588 	movw	r5, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001460:	f7fe ff80 	bl	8000364 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001464:	4e1d      	ldr	r6, [pc, #116]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001466:	4607      	mov	r7, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001468:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800146a:	079b      	lsls	r3, r3, #30
 800146c:	d526      	bpl.n	80014bc <HAL_RCC_OscConfig+0x24c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800146e:	69a2      	ldr	r2, [r4, #24]
 8001470:	2a00      	cmp	r2, #0
 8001472:	d137      	bne.n	80014e4 <HAL_RCC_OscConfig+0x274>
 8001474:	e079      	b.n	800156a <HAL_RCC_OscConfig+0x2fa>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001476:	f7fe ff75 	bl	8000364 <HAL_GetTick>
 800147a:	1b80      	subs	r0, r0, r6
 800147c:	2864      	cmp	r0, #100	; 0x64
 800147e:	d9e2      	bls.n	8001446 <HAL_RCC_OscConfig+0x1d6>
 8001480:	e746      	b.n	8001310 <HAL_RCC_OscConfig+0xa0>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001482:	b96b      	cbnz	r3, 80014a0 <HAL_RCC_OscConfig+0x230>
 8001484:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001486:	f241 3788 	movw	r7, #5000	; 0x1388
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800148a:	f023 0301 	bic.w	r3, r3, #1
 800148e:	672b      	str	r3, [r5, #112]	; 0x70
 8001490:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001492:	f023 0304 	bic.w	r3, r3, #4
 8001496:	672b      	str	r3, [r5, #112]	; 0x70
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001498:	f7fe ff64 	bl	8000364 <HAL_GetTick>
 800149c:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800149e:	e019      	b.n	80014d4 <HAL_RCC_OscConfig+0x264>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014a0:	2b05      	cmp	r3, #5
 80014a2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014a4:	d103      	bne.n	80014ae <HAL_RCC_OscConfig+0x23e>
 80014a6:	f043 0304 	orr.w	r3, r3, #4
 80014aa:	672b      	str	r3, [r5, #112]	; 0x70
 80014ac:	e7d2      	b.n	8001454 <HAL_RCC_OscConfig+0x1e4>
 80014ae:	f023 0301 	bic.w	r3, r3, #1
 80014b2:	672b      	str	r3, [r5, #112]	; 0x70
 80014b4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014b6:	f023 0304 	bic.w	r3, r3, #4
 80014ba:	e7ce      	b.n	800145a <HAL_RCC_OscConfig+0x1ea>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014bc:	f7fe ff52 	bl	8000364 <HAL_GetTick>
 80014c0:	1bc0      	subs	r0, r0, r7
 80014c2:	42a8      	cmp	r0, r5
 80014c4:	d9d0      	bls.n	8001468 <HAL_RCC_OscConfig+0x1f8>
 80014c6:	e723      	b.n	8001310 <HAL_RCC_OscConfig+0xa0>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014c8:	f7fe ff4c 	bl	8000364 <HAL_GetTick>
 80014cc:	1b80      	subs	r0, r0, r6
 80014ce:	42b8      	cmp	r0, r7
 80014d0:	f63f af1e 	bhi.w	8001310 <HAL_RCC_OscConfig+0xa0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014d6:	0798      	lsls	r0, r3, #30
 80014d8:	d4f6      	bmi.n	80014c8 <HAL_RCC_OscConfig+0x258>
 80014da:	e7c8      	b.n	800146e <HAL_RCC_OscConfig+0x1fe>
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40007000 	.word	0x40007000
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014e4:	4d2f      	ldr	r5, [pc, #188]	; (80015a4 <HAL_RCC_OscConfig+0x334>)
 80014e6:	68ab      	ldr	r3, [r5, #8]
 80014e8:	f003 030c 	and.w	r3, r3, #12
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	f43f aedd 	beq.w	80012ac <HAL_RCC_OscConfig+0x3c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f2:	682b      	ldr	r3, [r5, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014f4:	2a02      	cmp	r2, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014fa:	602b      	str	r3, [r5, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014fc:	d143      	bne.n	8001586 <HAL_RCC_OscConfig+0x316>
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fe:	f7fe ff31 	bl	8000364 <HAL_GetTick>
 8001502:	4607      	mov	r7, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001504:	682b      	ldr	r3, [r5, #0]
 8001506:	4e27      	ldr	r6, [pc, #156]	; (80015a4 <HAL_RCC_OscConfig+0x334>)
 8001508:	0199      	lsls	r1, r3, #6
 800150a:	d430      	bmi.n	800156e <HAL_RCC_OscConfig+0x2fe>
 800150c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001510:	fa92 f2a2 	rbit	r2, r2
 8001514:	f44f 3340 	mov.w	r3, #196608	; 0x30000
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001518:	fab2 f082 	clz	r0, r2
 800151c:	fa93 f3a3 	rbit	r3, r3
 8001520:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8001524:	fab3 f583 	clz	r5, r3
 8001528:	fa92 f2a2 	rbit	r2, r2
 800152c:	69e3      	ldr	r3, [r4, #28]
 800152e:	fab2 f182 	clz	r1, r2
 8001532:	6a27      	ldr	r7, [r4, #32]
 8001534:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001536:	431f      	orrs	r7, r3
 8001538:	4082      	lsls	r2, r0
 800153a:	f047 5300 	orr.w	r3, r7, #536870912	; 0x20000000
 800153e:	ea43 0002 	orr.w	r0, r3, r2
 8001542:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001544:	085a      	lsrs	r2, r3, #1
 8001546:	3a01      	subs	r2, #1
 8001548:	fa02 f305 	lsl.w	r3, r2, r5
 800154c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800154e:	4303      	orrs	r3, r0
 8001550:	408a      	lsls	r2, r1
 8001552:	4313      	orrs	r3, r2
 8001554:	6073      	str	r3, [r6, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001556:	6833      	ldr	r3, [r6, #0]
 8001558:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800155c:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155e:	f7fe ff01 	bl	8000364 <HAL_GetTick>
 8001562:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001564:	6833      	ldr	r3, [r6, #0]
 8001566:	019a      	lsls	r2, r3, #6
 8001568:	d507      	bpl.n	800157a <HAL_RCC_OscConfig+0x30a>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800156a:	2000      	movs	r0, #0
 800156c:	e017      	b.n	800159e <HAL_RCC_OscConfig+0x32e>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800156e:	f7fe fef9 	bl	8000364 <HAL_GetTick>
 8001572:	1bc0      	subs	r0, r0, r7
 8001574:	2802      	cmp	r0, #2
 8001576:	d9c5      	bls.n	8001504 <HAL_RCC_OscConfig+0x294>
 8001578:	e6ca      	b.n	8001310 <HAL_RCC_OscConfig+0xa0>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800157a:	f7fe fef3 	bl	8000364 <HAL_GetTick>
 800157e:	1b00      	subs	r0, r0, r4
 8001580:	2802      	cmp	r0, #2
 8001582:	d9ef      	bls.n	8001564 <HAL_RCC_OscConfig+0x2f4>
 8001584:	e6c4      	b.n	8001310 <HAL_RCC_OscConfig+0xa0>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001586:	f7fe feed 	bl	8000364 <HAL_GetTick>
 800158a:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800158c:	682b      	ldr	r3, [r5, #0]
 800158e:	019b      	lsls	r3, r3, #6
 8001590:	d5eb      	bpl.n	800156a <HAL_RCC_OscConfig+0x2fa>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001592:	f7fe fee7 	bl	8000364 <HAL_GetTick>
 8001596:	1b00      	subs	r0, r0, r4
 8001598:	2802      	cmp	r0, #2
 800159a:	d9f7      	bls.n	800158c <HAL_RCC_OscConfig+0x31c>
 800159c:	e6b8      	b.n	8001310 <HAL_RCC_OscConfig+0xa0>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800159e:	b003      	add	sp, #12
 80015a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40023800 	.word	0x40023800

080015a8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015a8:	491b      	ldr	r1, [pc, #108]	; (8001618 <HAL_RCC_GetSysClockFreq+0x70>)
 80015aa:	688b      	ldr	r3, [r1, #8]
 80015ac:	f003 030c 	and.w	r3, r3, #12
 80015b0:	2b04      	cmp	r3, #4
 80015b2:	d02c      	beq.n	800160e <HAL_RCC_GetSysClockFreq+0x66>
 80015b4:	2b08      	cmp	r3, #8
 80015b6:	d12c      	bne.n	8001612 <HAL_RCC_GetSysClockFreq+0x6a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015b8:	6848      	ldr	r0, [r1, #4]
 80015ba:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80015be:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015c0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80015c4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80015c8:	684b      	ldr	r3, [r1, #4]
 80015ca:	fa92 f2a2 	rbit	r2, r2
 80015ce:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80015d2:	fab2 f282 	clz	r2, r2
 80015d6:	ea01 0103 	and.w	r1, r1, r3
 80015da:	fa21 f102 	lsr.w	r1, r1, r2
 80015de:	bf14      	ite	ne
 80015e0:	4a0e      	ldrne	r2, [pc, #56]	; (800161c <HAL_RCC_GetSysClockFreq+0x74>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80015e2:	4a0f      	ldreq	r2, [pc, #60]	; (8001620 <HAL_RCC_GetSysClockFreq+0x78>)
 80015e4:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 80015e8:	4a0b      	ldr	r2, [pc, #44]	; (8001618 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80015ea:	fb00 f301 	mul.w	r3, r0, r1
 80015ee:	f44f 3040 	mov.w	r0, #196608	; 0x30000
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 80015f2:	6852      	ldr	r2, [r2, #4]
 80015f4:	fa90 f0a0 	rbit	r0, r0
      
      sysclockfreq = pllvco/pllp;
 80015f8:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 80015fc:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8001600:	fa22 f000 	lsr.w	r0, r2, r0
 8001604:	3001      	adds	r0, #1
 8001606:	0040      	lsls	r0, r0, #1
 8001608:	fbb3 f0f0 	udiv	r0, r3, r0
 800160c:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800160e:	4803      	ldr	r0, [pc, #12]	; (800161c <HAL_RCC_GetSysClockFreq+0x74>)
 8001610:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001612:	4803      	ldr	r0, [pc, #12]	; (8001620 <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800
 800161c:	017d7840 	.word	0x017d7840
 8001620:	00f42400 	.word	0x00f42400

08001624 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001624:	4a50      	ldr	r2, [pc, #320]	; (8001768 <HAL_RCC_ClockConfig+0x144>)
 8001626:	6813      	ldr	r3, [r2, #0]
 8001628:	f003 030f 	and.w	r3, r3, #15
 800162c:	428b      	cmp	r3, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800162e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001632:	4604      	mov	r4, r0
 8001634:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001636:	d30a      	bcc.n	800164e <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
  
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001638:	6821      	ldr	r1, [r4, #0]
 800163a:	0788      	lsls	r0, r1, #30
 800163c:	d514      	bpl.n	8001668 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800163e:	484b      	ldr	r0, [pc, #300]	; (800176c <HAL_RCC_ClockConfig+0x148>)
 8001640:	6883      	ldr	r3, [r0, #8]
 8001642:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001646:	68a3      	ldr	r3, [r4, #8]
 8001648:	4313      	orrs	r3, r2
 800164a:	6083      	str	r3, [r0, #8]
 800164c:	e00c      	b.n	8001668 <HAL_RCC_ClockConfig+0x44>
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164e:	6813      	ldr	r3, [r2, #0]
 8001650:	f023 030f 	bic.w	r3, r3, #15
 8001654:	430b      	orrs	r3, r1
 8001656:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001658:	6813      	ldr	r3, [r2, #0]
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	4299      	cmp	r1, r3
 8001660:	d0ea      	beq.n	8001638 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8001662:	2001      	movs	r0, #1
 8001664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001668:	07c9      	lsls	r1, r1, #31
 800166a:	d406      	bmi.n	800167a <HAL_RCC_ClockConfig+0x56>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800166c:	4a3e      	ldr	r2, [pc, #248]	; (8001768 <HAL_RCC_ClockConfig+0x144>)
 800166e:	6813      	ldr	r3, [r2, #0]
 8001670:	f003 030f 	and.w	r3, r3, #15
 8001674:	429d      	cmp	r5, r3
 8001676:	d342      	bcc.n	80016fe <HAL_RCC_ClockConfig+0xda>
 8001678:	e04b      	b.n	8001712 <HAL_RCC_ClockConfig+0xee>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800167a:	6862      	ldr	r2, [r4, #4]
 800167c:	4b3b      	ldr	r3, [pc, #236]	; (800176c <HAL_RCC_ClockConfig+0x148>)
 800167e:	2a01      	cmp	r2, #1
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001680:	6819      	ldr	r1, [r3, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001682:	d102      	bne.n	800168a <HAL_RCC_ClockConfig+0x66>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001684:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 8001688:	e006      	b.n	8001698 <HAL_RCC_ClockConfig+0x74>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800168a:	2a02      	cmp	r2, #2
 800168c:	d102      	bne.n	8001694 <HAL_RCC_ClockConfig+0x70>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800168e:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 8001692:	e001      	b.n	8001698 <HAL_RCC_ClockConfig+0x74>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001694:	f011 0f02 	tst.w	r1, #2
 8001698:	d0e3      	beq.n	8001662 <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800169a:	6899      	ldr	r1, [r3, #8]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800169c:	f241 3888 	movw	r8, #5000	; 0x1388
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016a0:	4f32      	ldr	r7, [pc, #200]	; (800176c <HAL_RCC_ClockConfig+0x148>)
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016a2:	f021 0103 	bic.w	r1, r1, #3
 80016a6:	430a      	orrs	r2, r1
 80016a8:	609a      	str	r2, [r3, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016aa:	f7fe fe5b 	bl	8000364 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ae:	6863      	ldr	r3, [r4, #4]
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016b0:	4606      	mov	r6, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d10c      	bne.n	80016d0 <HAL_RCC_ClockConfig+0xac>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	f003 030c 	and.w	r3, r3, #12
 80016bc:	2b04      	cmp	r3, #4
 80016be:	d0d5      	beq.n	800166c <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c0:	f7fe fe50 	bl	8000364 <HAL_GetTick>
 80016c4:	1b80      	subs	r0, r0, r6
 80016c6:	4540      	cmp	r0, r8
 80016c8:	d9f5      	bls.n	80016b6 <HAL_RCC_ClockConfig+0x92>
        {
          return HAL_TIMEOUT;
 80016ca:	2003      	movs	r0, #3
 80016cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d10f      	bne.n	80016f4 <HAL_RCC_ClockConfig+0xd0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	f003 030c 	and.w	r3, r3, #12
 80016da:	2b08      	cmp	r3, #8
 80016dc:	d0c6      	beq.n	800166c <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016de:	f7fe fe41 	bl	8000364 <HAL_GetTick>
 80016e2:	1b80      	subs	r0, r0, r6
 80016e4:	4540      	cmp	r0, r8
 80016e6:	d9f5      	bls.n	80016d4 <HAL_RCC_ClockConfig+0xb0>
 80016e8:	e7ef      	b.n	80016ca <HAL_RCC_ClockConfig+0xa6>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ea:	f7fe fe3b 	bl	8000364 <HAL_GetTick>
 80016ee:	1b80      	subs	r0, r0, r6
 80016f0:	4540      	cmp	r0, r8
 80016f2:	d8ea      	bhi.n	80016ca <HAL_RCC_ClockConfig+0xa6>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	f013 0f0c 	tst.w	r3, #12
 80016fa:	d1f6      	bne.n	80016ea <HAL_RCC_ClockConfig+0xc6>
 80016fc:	e7b6      	b.n	800166c <HAL_RCC_ClockConfig+0x48>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016fe:	6813      	ldr	r3, [r2, #0]
 8001700:	f023 030f 	bic.w	r3, r3, #15
 8001704:	432b      	orrs	r3, r5
 8001706:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001708:	6813      	ldr	r3, [r2, #0]
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	429d      	cmp	r5, r3
 8001710:	d1a7      	bne.n	8001662 <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001712:	6821      	ldr	r1, [r4, #0]
 8001714:	074a      	lsls	r2, r1, #29
 8001716:	d506      	bpl.n	8001726 <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001718:	4814      	ldr	r0, [pc, #80]	; (800176c <HAL_RCC_ClockConfig+0x148>)
 800171a:	6883      	ldr	r3, [r0, #8]
 800171c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001720:	68e3      	ldr	r3, [r4, #12]
 8001722:	4313      	orrs	r3, r2
 8001724:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001726:	070b      	lsls	r3, r1, #28
 8001728:	d507      	bpl.n	800173a <HAL_RCC_ClockConfig+0x116>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800172a:	4a10      	ldr	r2, [pc, #64]	; (800176c <HAL_RCC_ClockConfig+0x148>)
 800172c:	6921      	ldr	r1, [r4, #16]
 800172e:	6893      	ldr	r3, [r2, #8]
 8001730:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001734:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001738:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800173a:	f7ff ff35 	bl	80015a8 <HAL_RCC_GetSysClockFreq>
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <HAL_RCC_ClockConfig+0x148>)
 8001740:	22f0      	movs	r2, #240	; 0xf0
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	fa92 f2a2 	rbit	r2, r2
 8001748:	fab2 f282 	clz	r2, r2
 800174c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001750:	40d3      	lsrs	r3, r2
 8001752:	4a07      	ldr	r2, [pc, #28]	; (8001770 <HAL_RCC_ClockConfig+0x14c>)
 8001754:	5cd3      	ldrb	r3, [r2, r3]
 8001756:	40d8      	lsrs	r0, r3
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_RCC_ClockConfig+0x150>)
 800175a:	6018      	str	r0, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800175c:	2000      	movs	r0, #0
 800175e:	f7fe fdd9 	bl	8000314 <HAL_InitTick>
  
  return HAL_OK;
 8001762:	2000      	movs	r0, #0
}
 8001764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001768:	40023c00 	.word	0x40023c00
 800176c:	40023800 	.word	0x40023800
 8001770:	08007182 	.word	0x08007182
 8001774:	20000018 	.word	0x20000018

08001778 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001778:	4b01      	ldr	r3, [pc, #4]	; (8001780 <HAL_RCC_GetHCLKFreq+0x8>)
 800177a:	6818      	ldr	r0, [r3, #0]
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	20000018 	.word	0x20000018

08001784 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001784:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001786:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	fa92 f2a2 	rbit	r2, r2
 8001790:	fab2 f282 	clz	r2, r2
 8001794:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001798:	40d3      	lsrs	r3, r2
 800179a:	4a04      	ldr	r2, [pc, #16]	; (80017ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800179c:	5cd3      	ldrb	r3, [r2, r3]
 800179e:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80017a0:	6810      	ldr	r0, [r2, #0]
}
 80017a2:	40d8      	lsrs	r0, r3
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	40023800 	.word	0x40023800
 80017ac:	08007192 	.word	0x08007192
 80017b0:	20000018 	.word	0x20000018

080017b4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80017b4:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017b6:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	fa92 f2a2 	rbit	r2, r2
 80017c0:	fab2 f282 	clz	r2, r2
 80017c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80017c8:	40d3      	lsrs	r3, r2
 80017ca:	4a04      	ldr	r2, [pc, #16]	; (80017dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80017cc:	5cd3      	ldrb	r3, [r2, r3]
 80017ce:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80017d0:	6810      	ldr	r0, [r2, #0]
} 
 80017d2:	40d8      	lsrs	r0, r3
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800
 80017dc:	08007192 	.word	0x08007192
 80017e0:	20000018 	.word	0x20000018

080017e4 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80017e4:	6803      	ldr	r3, [r0, #0]
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80017e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80017ea:	f013 0601 	ands.w	r6, r3, #1
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80017ee:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80017f0:	d00b      	beq.n	800180a <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80017f2:	4ab6      	ldr	r2, [pc, #728]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80017f4:	6891      	ldr	r1, [r2, #8]
 80017f6:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80017fa:	6091      	str	r1, [r2, #8]
 80017fc:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80017fe:	6891      	ldr	r1, [r2, #8]
 8001800:	4331      	orrs	r1, r6
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tickstart = 0;
  uint32_t tmpreg0 = 0;
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
 8001802:	fab6 f686 	clz	r6, r6
 8001806:	0976      	lsrs	r6, r6, #5
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001808:	6091      	str	r1, [r2, #8]
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800180a:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800180e:	d012      	beq.n	8001836 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001810:	49ae      	ldr	r1, [pc, #696]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001812:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001814:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001818:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800181c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
    {
      plli2sused = 1; 
 8001820:	bf08      	it	eq
 8001822:	2601      	moveq	r6, #1
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001824:	ea42 0205 	orr.w	r2, r2, r5
{
  uint32_t tickstart = 0;
  uint32_t tmpreg0 = 0;
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;
 8001828:	bf16      	itet	ne
 800182a:	fab5 f585 	clzne	r5, r5
 800182e:	2500      	moveq	r5, #0
 8001830:	096d      	lsrne	r5, r5, #5
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001832:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001836:	02d8      	lsls	r0, r3, #11
 8001838:	d511      	bpl.n	800185e <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800183a:	48a4      	ldr	r0, [pc, #656]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800183c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800183e:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001842:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001846:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800184a:	ea42 0201 	orr.w	r2, r2, r1
 800184e:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001852:	d003      	beq.n	800185c <HAL_RCCEx_PeriphCLKConfig+0x78>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 8001854:	2900      	cmp	r1, #0
 8001856:	bf08      	it	eq
 8001858:	2501      	moveq	r5, #1
 800185a:	e000      	b.n	800185e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1; 
 800185c:	2601      	movs	r6, #1
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {    
      plli2sused = 1; 
 800185e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001862:	bf18      	it	ne
 8001864:	2601      	movne	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001866:	0699      	lsls	r1, r3, #26
 8001868:	d55d      	bpl.n	8001926 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800186a:	4b98      	ldr	r3, [pc, #608]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800186c:	4f98      	ldr	r7, [pc, #608]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800186e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001870:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001874:	641a      	str	r2, [r3, #64]	; 0x40
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187c:	9301      	str	r3, [sp, #4]
 800187e:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001886:	603b      	str	r3, [r7, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001888:	f7fe fd6c 	bl	8000364 <HAL_GetTick>
 800188c:	4680      	mov	r8, r0
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	05da      	lsls	r2, r3, #23
 8001892:	d407      	bmi.n	80018a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001894:	f7fe fd66 	bl	8000364 <HAL_GetTick>
 8001898:	ebc8 0000 	rsb	r0, r8, r0
 800189c:	2864      	cmp	r0, #100	; 0x64
 800189e:	d9f6      	bls.n	800188e <HAL_RCCEx_PeriphCLKConfig+0xaa>
      {
        return HAL_TIMEOUT;
 80018a0:	2003      	movs	r0, #3
 80018a2:	e340      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x742>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018a4:	4f89      	ldr	r7, [pc, #548]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80018a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018a8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80018ac:	d10f      	bne.n	80018ce <HAL_RCCEx_PeriphCLKConfig+0xea>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80018ae:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80018b0:	f402 7340 	and.w	r3, r2, #768	; 0x300
 80018b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80018b8:	4b84      	ldr	r3, [pc, #528]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80018ba:	d12b      	bne.n	8001914 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80018bc:	6899      	ldr	r1, [r3, #8]
 80018be:	f421 10f8 	bic.w	r0, r1, #2031616	; 0x1f0000
 80018c2:	f022 4170 	bic.w	r1, r2, #4026531840	; 0xf0000000
 80018c6:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80018ca:	4301      	orrs	r1, r0
 80018cc:	e025      	b.n	800191a <HAL_RCCEx_PeriphCLKConfig+0x136>
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018ce:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80018d0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d0ea      	beq.n	80018ae <HAL_RCCEx_PeriphCLKConfig+0xca>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80018da:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80018e0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80018e4:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80018e6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80018e8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80018ec:	673a      	str	r2, [r7, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80018ee:	673b      	str	r3, [r7, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80018f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018f2:	07db      	lsls	r3, r3, #31
 80018f4:	d5db      	bpl.n	80018ae <HAL_RCCEx_PeriphCLKConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f6:	f7fe fd35 	bl	8000364 <HAL_GetTick>
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018fa:	f241 3988 	movw	r9, #5000	; 0x1388

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fe:	4680      	mov	r8, r0
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001900:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001902:	0798      	lsls	r0, r3, #30
 8001904:	d4d3      	bmi.n	80018ae <HAL_RCCEx_PeriphCLKConfig+0xca>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001906:	f7fe fd2d 	bl	8000364 <HAL_GetTick>
 800190a:	ebc8 0000 	rsb	r0, r8, r0
 800190e:	4548      	cmp	r0, r9
 8001910:	d9f6      	bls.n	8001900 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8001912:	e7c5      	b.n	80018a0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001914:	6899      	ldr	r1, [r3, #8]
 8001916:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800191a:	6099      	str	r1, [r3, #8]
 800191c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001920:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001922:	430a      	orrs	r2, r1
 8001924:	671a      	str	r2, [r3, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001926:	6823      	ldr	r3, [r4, #0]
 8001928:	06d9      	lsls	r1, r3, #27
 800192a:	d50c      	bpl.n	8001946 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800192c:	4a67      	ldr	r2, [pc, #412]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800192e:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001932:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001936:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 800193a:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 800193e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001940:	4301      	orrs	r1, r0
 8001942:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001946:	045a      	lsls	r2, r3, #17
 8001948:	d508      	bpl.n	800195c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800194a:	4860      	ldr	r0, [pc, #384]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800194c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001950:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8001954:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001956:	430a      	orrs	r2, r1
 8001958:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800195c:	041f      	lsls	r7, r3, #16
 800195e:	d508      	bpl.n	8001972 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001960:	485a      	ldr	r0, [pc, #360]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001962:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001966:	f422 2140 	bic.w	r1, r2, #786432	; 0xc0000
 800196a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800196c:	430a      	orrs	r2, r1
 800196e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001972:	03d8      	lsls	r0, r3, #15
 8001974:	d508      	bpl.n	8001988 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001976:	4855      	ldr	r0, [pc, #340]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001978:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800197c:	f422 1140 	bic.w	r1, r2, #3145728	; 0x300000
 8001980:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001982:	430a      	orrs	r2, r1
 8001984:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001988:	0399      	lsls	r1, r3, #14
 800198a:	d508      	bpl.n	800199e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800198c:	484f      	ldr	r0, [pc, #316]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800198e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001992:	f422 0140 	bic.w	r1, r2, #12582912	; 0xc00000
 8001996:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8001998:	430a      	orrs	r2, r1
 800199a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800199e:	065a      	lsls	r2, r3, #25
 80019a0:	d508      	bpl.n	80019b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80019a2:	484a      	ldr	r0, [pc, #296]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80019a4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80019a8:	f022 0103 	bic.w	r1, r2, #3
 80019ac:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80019ae:	430a      	orrs	r2, r1
 80019b0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80019b4:	061f      	lsls	r7, r3, #24
 80019b6:	d508      	bpl.n	80019ca <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80019b8:	4844      	ldr	r0, [pc, #272]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80019ba:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80019be:	f022 010c 	bic.w	r1, r2, #12
 80019c2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80019c4:	430a      	orrs	r2, r1
 80019c6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80019ca:	05d8      	lsls	r0, r3, #23
 80019cc:	d508      	bpl.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80019ce:	483f      	ldr	r0, [pc, #252]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80019d0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80019d4:	f022 0130 	bic.w	r1, r2, #48	; 0x30
 80019d8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80019da:	430a      	orrs	r2, r1
 80019dc:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80019e0:	0599      	lsls	r1, r3, #22
 80019e2:	d508      	bpl.n	80019f6 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80019e4:	4839      	ldr	r0, [pc, #228]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80019e6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80019ea:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 80019ee:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80019f0:	430a      	orrs	r2, r1
 80019f2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80019f6:	055a      	lsls	r2, r3, #21
 80019f8:	d508      	bpl.n	8001a0c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80019fa:	4834      	ldr	r0, [pc, #208]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80019fc:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001a00:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8001a04:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001a06:	430a      	orrs	r2, r1
 8001a08:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001a0c:	051f      	lsls	r7, r3, #20
 8001a0e:	d508      	bpl.n	8001a22 <HAL_RCCEx_PeriphCLKConfig+0x23e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001a10:	482e      	ldr	r0, [pc, #184]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001a12:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001a16:	f422 6140 	bic.w	r1, r2, #3072	; 0xc00
 8001a1a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001a22:	04d8      	lsls	r0, r3, #19
 8001a24:	d508      	bpl.n	8001a38 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001a26:	4829      	ldr	r0, [pc, #164]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001a28:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001a2c:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8001a30:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001a32:	430a      	orrs	r2, r1
 8001a34:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001a38:	0499      	lsls	r1, r3, #18
 8001a3a:	d508      	bpl.n	8001a4e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001a3c:	4823      	ldr	r0, [pc, #140]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001a3e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001a42:	f422 4140 	bic.w	r1, r2, #49152	; 0xc000
 8001a46:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001a4e:	025a      	lsls	r2, r3, #9
 8001a50:	d508      	bpl.n	8001a64 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001a52:	481e      	ldr	r0, [pc, #120]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001a54:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001a58:	f022 6180 	bic.w	r1, r2, #67108864	; 0x4000000
 8001a5c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001a64:	029f      	lsls	r7, r3, #10
 8001a66:	d50c      	bpl.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001a68:	4818      	ldr	r0, [pc, #96]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001a6a:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001a6c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 8001a70:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001a74:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 8001a78:	bf08      	it	eq
 8001a7a:	2501      	moveq	r5, #1
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1; 
 8001a82:	f013 0f08 	tst.w	r3, #8
 8001a86:	bf18      	it	ne
 8001a88:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001a8a:	0358      	lsls	r0, r3, #13
 8001a8c:	d508      	bpl.n	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001a8e:	480f      	ldr	r0, [pc, #60]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001a90:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001a94:	f022 7140 	bic.w	r1, r2, #50331648	; 0x3000000
 8001a98:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001aa0:	0219      	lsls	r1, r3, #8
 8001aa2:	d509      	bpl.n	8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001aa4:	4809      	ldr	r0, [pc, #36]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001aa6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001aaa:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8001aae:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001ab8:	2e01      	cmp	r6, #1
 8001aba:	d00b      	beq.n	8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8001abc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ac0:	d008      	beq.n	8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001ac2:	2d01      	cmp	r5, #1
 8001ac4:	f040 818c 	bne.w	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8001ac8:	e123      	b.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x52e>
 8001aca:	bf00      	nop
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40007000 	.word	0x40007000
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();  
 8001ad4:	4ec8      	ldr	r6, [pc, #800]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8001ad6:	6833      	ldr	r3, [r6, #0]
 8001ad8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001adc:	6033      	str	r3, [r6, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ade:	f7fe fc41 	bl	8000364 <HAL_GetTick>
 8001ae2:	4607      	mov	r7, r0
    
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ae4:	6833      	ldr	r3, [r6, #0]
 8001ae6:	f8df e310 	ldr.w	lr, [pc, #784]	; 8001df8 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8001aea:	011a      	lsls	r2, r3, #4
 8001aec:	d505      	bpl.n	8001afa <HAL_RCCEx_PeriphCLKConfig+0x316>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001aee:	f7fe fc39 	bl	8000364 <HAL_GetTick>
 8001af2:	1bc0      	subs	r0, r0, r7
 8001af4:	2864      	cmp	r0, #100	; 0x64
 8001af6:	d9f5      	bls.n	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8001af8:	e6d2      	b.n	80018a0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001afa:	6827      	ldr	r7, [r4, #0]
 8001afc:	07fb      	lsls	r3, r7, #31
 8001afe:	d53c      	bpl.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x396>
 8001b00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001b02:	bbd3      	cbnz	r3, 8001b7a <HAL_RCCEx_PeriphCLKConfig+0x396>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8001b04:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 8001b08:	f44f 3840 	mov.w	r8, #196608	; 0x30000
 8001b0c:	fa98 f9a8 	rbit	r9, r8
 8001b10:	f04f 6670 	mov.w	r6, #251658240	; 0xf000000
 8001b14:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8001b18:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 8001b1c:	fa96 fca6 	rbit	ip, r6
 8001b20:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 8001b24:	fabc fc8c 	clz	ip, ip
 8001b28:	fa9a faaa 	rbit	sl, sl
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001b2c:	faba fa8a 	clz	sl, sl
 8001b30:	fa98 f8a8 	rbit	r8, r8
 8001b34:	fab8 f888 	clz	r8, r8
 8001b38:	fa96 f6a6 	rbit	r6, r6
 8001b3c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8001b40:	fab6 f686 	clz	r6, r6
 8001b44:	fa93 f3a3 	rbit	r3, r3
 8001b48:	fab3 fb83 	clz	fp, r3
 8001b4c:	6861      	ldr	r1, [r4, #4]
 8001b4e:	68a3      	ldr	r3, [r4, #8]
 8001b50:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8001b54:	fa01 f10a 	lsl.w	r1, r1, sl
 8001b58:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001b5c:	fa03 f30b 	lsl.w	r3, r3, fp
 8001b60:	fa20 f009 	lsr.w	r0, r0, r9
 8001b64:	fa22 f20c 	lsr.w	r2, r2, ip
 8001b68:	430b      	orrs	r3, r1
 8001b6a:	fa00 f108 	lsl.w	r1, r0, r8
 8001b6e:	4319      	orrs	r1, r3
 8001b70:	fa02 f306 	lsl.w	r3, r2, r6
 8001b74:	430b      	orrs	r3, r1
 8001b76:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
    }
        
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001b7a:	033e      	lsls	r6, r7, #12
 8001b7c:	d503      	bpl.n	8001b86 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8001b7e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b84:	d005      	beq.n	8001b92 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8001b86:	02f8      	lsls	r0, r7, #11
 8001b88:	d549      	bpl.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x43a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8001b8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b90:	d145      	bne.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x43a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8001b92:	f8df e264 	ldr.w	lr, [pc, #612]	; 8001df8 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8001b96:	f44f 3840 	mov.w	r8, #196608	; 0x30000
 8001b9a:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 8001b9e:	fa98 f9a8 	rbit	r9, r8
 8001ba2:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8001ba6:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8001baa:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 8001bae:	fa96 fca6 	rbit	ip, r6
 8001bb2:	f647 7bc0 	movw	fp, #32704	; 0x7fc0
 8001bb6:	fabc fc8c 	clz	ip, ip
 8001bba:	fa9b fbab 	rbit	fp, fp
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001bbe:	fabb fb8b 	clz	fp, fp
 8001bc2:	fa98 f8a8 	rbit	r8, r8
 8001bc6:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8001bca:	fab8 f888 	clz	r8, r8
 8001bce:	fa93 f3a3 	rbit	r3, r3
 8001bd2:	fab3 fa83 	clz	sl, r3
 8001bd6:	fa96 f6a6 	rbit	r6, r6
 8001bda:	6863      	ldr	r3, [r4, #4]
 8001bdc:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8001be0:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8001be4:	fab6 f686 	clz	r6, r6
 8001be8:	fa03 f10b 	lsl.w	r1, r3, fp
 8001bec:	68e3      	ldr	r3, [r4, #12]
 8001bee:	fa20 f009 	lsr.w	r0, r0, r9
 8001bf2:	fa22 f20c 	lsr.w	r2, r2, ip
 8001bf6:	fa03 f30a 	lsl.w	r3, r3, sl
 8001bfa:	430b      	orrs	r3, r1
 8001bfc:	fa00 f108 	lsl.w	r1, r0, r8
 8001c00:	4319      	orrs	r1, r3
 8001c02:	fa02 f306 	lsl.w	r3, r2, r6
 8001c06:	430b      	orrs	r3, r1
 8001c08:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8001c0c:	f8de 308c 	ldr.w	r3, [lr, #140]	; 0x8c
 8001c10:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c12:	f023 031f 	bic.w	r3, r3, #31
 8001c16:	3a01      	subs	r2, #1
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	f8ce 308c 	str.w	r3, [lr, #140]	; 0x8c
    }          

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c1e:	01f9      	lsls	r1, r7, #7
 8001c20:	d53c      	bpl.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8001c22:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8001df8 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8001c26:	f04f 6870 	mov.w	r8, #251658240	; 0xf000000
 8001c2a:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 8001c2e:	fa98 f9a8 	rbit	r9, r8
 8001c32:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8001c36:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8001c3a:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 8001c3e:	fa96 fca6 	rbit	ip, r6
 8001c42:	f647 7bc0 	movw	fp, #32704	; 0x7fc0
 8001c46:	fabc fc8c 	clz	ip, ip
 8001c4a:	fa9b fbab 	rbit	fp, fp
 8001c4e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001c52:	fabb fb8b 	clz	fp, fp
 8001c56:	fa93 f3a3 	rbit	r3, r3
 8001c5a:	fab3 fa83 	clz	sl, r3
 8001c5e:	fa98 f8a8 	rbit	r8, r8
 8001c62:	fab8 f888 	clz	r8, r8
 8001c66:	fa96 f6a6 	rbit	r6, r6
 8001c6a:	6863      	ldr	r3, [r4, #4]
 8001c6c:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8001c70:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8001c74:	fab6 f686 	clz	r6, r6
 8001c78:	fa03 f10b 	lsl.w	r1, r3, fp
 8001c7c:	6923      	ldr	r3, [r4, #16]
 8001c7e:	fa20 f009 	lsr.w	r0, r0, r9
 8001c82:	fa22 f20c 	lsr.w	r2, r2, ip
 8001c86:	fa03 f30a 	lsl.w	r3, r3, sl
 8001c8a:	430b      	orrs	r3, r1
 8001c8c:	fa00 f108 	lsl.w	r1, r0, r8
 8001c90:	4319      	orrs	r1, r3
 8001c92:	fa02 f306 	lsl.w	r3, r2, r6
 8001c96:	430b      	orrs	r3, r1
 8001c98:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
    }  
         
    /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001c9c:	01ba      	lsls	r2, r7, #6
 8001c9e:	d526      	bpl.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8001ca0:	f647 7ec0 	movw	lr, #32704	; 0x7fc0
 8001ca4:	fa9e feae 	rbit	lr, lr
 8001ca8:	f44f 3040 	mov.w	r0, #196608	; 0x30000
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001cac:	fabe fe8e 	clz	lr, lr
 8001cb0:	fa90 f0a0 	rbit	r0, r0
 8001cb4:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8001cb8:	fab0 f780 	clz	r7, r0
 8001cbc:	fa92 f2a2 	rbit	r2, r2
 8001cc0:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8001cc4:	fab2 f682 	clz	r6, r2
 8001cc8:	fa93 f3a3 	rbit	r3, r3
 8001ccc:	fab3 f183 	clz	r1, r3
 8001cd0:	6920      	ldr	r0, [r4, #16]
 8001cd2:	6863      	ldr	r3, [r4, #4]
 8001cd4:	68e2      	ldr	r2, [r4, #12]
 8001cd6:	40b8      	lsls	r0, r7
 8001cd8:	fa03 f30e 	lsl.w	r3, r3, lr
 8001cdc:	40b2      	lsls	r2, r6
 8001cde:	4303      	orrs	r3, r0
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	68a3      	ldr	r3, [r4, #8]
 8001ce4:	408b      	lsls	r3, r1
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	4a43      	ldr	r2, [pc, #268]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8001cea:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    } 
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001cee:	4e42      	ldr	r6, [pc, #264]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8001cf0:	6833      	ldr	r3, [r6, #0]
 8001cf2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001cf6:	6033      	str	r3, [r6, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cf8:	f7fe fb34 	bl	8000364 <HAL_GetTick>
 8001cfc:	4607      	mov	r7, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001cfe:	6833      	ldr	r3, [r6, #0]
 8001d00:	011b      	lsls	r3, r3, #4
 8001d02:	f53f aede 	bmi.w	8001ac2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001d06:	f7fe fb2d 	bl	8000364 <HAL_GetTick>
 8001d0a:	1bc0      	subs	r0, r0, r7
 8001d0c:	2864      	cmp	r0, #100	; 0x64
 8001d0e:	d9f6      	bls.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8001d10:	e5c6      	b.n	80018a0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8001d12:	4d39      	ldr	r5, [pc, #228]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8001d14:	682b      	ldr	r3, [r5, #0]
 8001d16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	602b      	str	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d1c:	f7fe fb22 	bl	8000364 <HAL_GetTick>
 8001d20:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001d22:	682b      	ldr	r3, [r5, #0]
 8001d24:	009f      	lsls	r7, r3, #2
 8001d26:	d45d      	bmi.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x600>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001d28:	6825      	ldr	r5, [r4, #0]
 8001d2a:	032e      	lsls	r6, r5, #12
 8001d2c:	d460      	bmi.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8001d2e:	02e8      	lsls	r0, r5, #11
 8001d30:	d464      	bmi.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x618>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001d32:	02a9      	lsls	r1, r5, #10
 8001d34:	f100 80ad 	bmi.w	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001d38:	072a      	lsls	r2, r5, #28
 8001d3a:	d545      	bpl.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8001d3c:	4f2e      	ldr	r7, [pc, #184]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8001d3e:	f04f 6570 	mov.w	r5, #251658240	; 0xf000000
 8001d42:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001d46:	fa95 fca5 	rbit	ip, r5
 8001d4a:	f44f 3640 	mov.w	r6, #196608	; 0x30000
 8001d4e:	fabc fc8c 	clz	ip, ip
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8001d52:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001d56:	fa96 f8a6 	rbit	r8, r6
 8001d5a:	f647 79c0 	movw	r9, #32704	; 0x7fc0
 8001d5e:	fab8 f888 	clz	r8, r8
 8001d62:	fa99 f9a9 	rbit	r9, r9
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001d66:	fab9 f989 	clz	r9, r9
 8001d6a:	fa96 f6a6 	rbit	r6, r6
 8001d6e:	fab6 f686 	clz	r6, r6
 8001d72:	fa95 f5a5 	rbit	r5, r5
 8001d76:	f04f 4ee0 	mov.w	lr, #1879048192	; 0x70000000
 8001d7a:	fab5 f585 	clz	r5, r5
 8001d7e:	fa9e feae 	rbit	lr, lr
 8001d82:	6963      	ldr	r3, [r4, #20]
 8001d84:	fabe fe8e 	clz	lr, lr
 8001d88:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8001d8c:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001d90:	fa03 f109 	lsl.w	r1, r3, r9
 8001d94:	69e3      	ldr	r3, [r4, #28]
 8001d96:	fa20 f008 	lsr.w	r0, r0, r8
 8001d9a:	fa22 f20c 	lsr.w	r2, r2, ip
 8001d9e:	fa03 fe0e 	lsl.w	lr, r3, lr
 8001da2:	fa02 f305 	lsl.w	r3, r2, r5
 8001da6:	ea41 0e0e 	orr.w	lr, r1, lr
 8001daa:	fa00 f106 	lsl.w	r1, r0, r6
 8001dae:	ea4e 0101 	orr.w	r1, lr, r1
 8001db2:	430b      	orrs	r3, r1
 8001db4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001dc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001dc8:	4c0b      	ldr	r4, [pc, #44]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8001dca:	6823      	ldr	r3, [r4, #0]
 8001dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dd2:	f7fe fac7 	bl	8000364 <HAL_GetTick>
 8001dd6:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001dd8:	6823      	ldr	r3, [r4, #0]
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	f140 809c 	bpl.w	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x734>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001de0:	2000      	movs	r0, #0
 8001de2:	e0a0      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x742>
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001de4:	f7fe fabe 	bl	8000364 <HAL_GetTick>
 8001de8:	1b80      	subs	r0, r0, r6
 8001dea:	2864      	cmp	r0, #100	; 0x64
 8001dec:	d999      	bls.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x53e>
 8001dee:	e557      	b.n	80018a0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001df0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001df2:	b133      	cbz	r3, 8001e02 <HAL_RCCEx_PeriphCLKConfig+0x61e>
 8001df4:	e79b      	b.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8001df6:	bf00      	nop
 8001df8:	40023800 	.word	0x40023800
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001dfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d197      	bne.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x54e>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8001e02:	4f4a      	ldr	r7, [pc, #296]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x748>)
 8001e04:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
 8001e08:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001e0c:	fa9c f9ac 	rbit	r9, ip
 8001e10:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8001e14:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8001e18:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001e1c:	fa96 fea6 	rbit	lr, r6
 8001e20:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 8001e24:	fabe fe8e 	clz	lr, lr
 8001e28:	fa9a faaa 	rbit	sl, sl
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001e2c:	faba fa8a 	clz	sl, sl
 8001e30:	fa9c fcac 	rbit	ip, ip
 8001e34:	f04f 6870 	mov.w	r8, #251658240	; 0xf000000
 8001e38:	fabc fc8c 	clz	ip, ip
 8001e3c:	fa98 f8a8 	rbit	r8, r8
 8001e40:	fab8 f888 	clz	r8, r8
 8001e44:	fa96 f6a6 	rbit	r6, r6
 8001e48:	69a1      	ldr	r1, [r4, #24]
 8001e4a:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8001e4e:	6963      	ldr	r3, [r4, #20]
 8001e50:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8001e54:	fa01 f808 	lsl.w	r8, r1, r8
 8001e58:	fa20 f009 	lsr.w	r0, r0, r9
 8001e5c:	fa03 f30a 	lsl.w	r3, r3, sl
 8001e60:	fa22 f20e 	lsr.w	r2, r2, lr
 8001e64:	fab6 f686 	clz	r6, r6
 8001e68:	fa00 f10c 	lsl.w	r1, r0, ip
 8001e6c:	ea43 0308 	orr.w	r3, r3, r8
 8001e70:	4319      	orrs	r1, r3
 8001e72:	fa02 f306 	lsl.w	r3, r2, r6
 8001e76:	430b      	orrs	r3, r1
 8001e78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001e7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e80:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001e82:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001e86:	3a01      	subs	r2, #1
 8001e88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001e90:	e74f      	b.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001e92:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001e94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e98:	f47f af4e 	bne.w	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8001e9c:	4f23      	ldr	r7, [pc, #140]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x748>)
 8001e9e:	f04f 6c70 	mov.w	ip, #251658240	; 0xf000000
 8001ea2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001ea6:	fa9c f9ac 	rbit	r9, ip
 8001eaa:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8001eae:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8001eb2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001eb6:	fa96 fea6 	rbit	lr, r6
 8001eba:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 8001ebe:	fabe fe8e 	clz	lr, lr
 8001ec2:	fa9a faaa 	rbit	sl, sl
 8001ec6:	f44f 3840 	mov.w	r8, #196608	; 0x30000
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001eca:	faba fa8a 	clz	sl, sl
 8001ece:	fa98 f8a8 	rbit	r8, r8
 8001ed2:	fab8 f888 	clz	r8, r8
 8001ed6:	fa9c fcac 	rbit	ip, ip
 8001eda:	fabc fc8c 	clz	ip, ip
 8001ede:	fa96 f6a6 	rbit	r6, r6
 8001ee2:	6a21      	ldr	r1, [r4, #32]
 8001ee4:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8001ee8:	6963      	ldr	r3, [r4, #20]
 8001eea:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8001eee:	fa01 f808 	lsl.w	r8, r1, r8
 8001ef2:	fa20 f009 	lsr.w	r0, r0, r9
 8001ef6:	fa03 f30a 	lsl.w	r3, r3, sl
 8001efa:	fab6 f686 	clz	r6, r6
 8001efe:	fa00 f10c 	lsl.w	r1, r0, ip
 8001f02:	fa22 f20e 	lsr.w	r2, r2, lr
 8001f06:	ea43 0308 	orr.w	r3, r3, r8
 8001f0a:	4319      	orrs	r1, r3
 8001f0c:	fa02 f306 	lsl.w	r3, r2, r6
 8001f10:	430b      	orrs	r3, r1
 8001f12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001f16:	e70f      	b.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x554>
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001f18:	f7fe fa24 	bl	8000364 <HAL_GetTick>
 8001f1c:	1b40      	subs	r0, r0, r5
 8001f1e:	2864      	cmp	r0, #100	; 0x64
 8001f20:	f67f af5a 	bls.w	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8001f24:	e4bc      	b.n	80018a0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 8001f26:	b003      	add	sp, #12
 8001f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f2c:	40023800 	.word	0x40023800

08001f30 <HAL_SPI_IRQHandler>:
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
  uint32_t itsource = hspi->Instance->CR2;
 8001f30:	6803      	ldr	r3, [r0, #0]
 8001f32:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8001f34:	689a      	ldr	r2, [r3, #8]
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001f36:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
  uint32_t itflag   = hspi->Instance->SR;

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8001f38:	f002 0541 	and.w	r5, r2, #65	; 0x41
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001f3c:	b085      	sub	sp, #20
 8001f3e:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
  uint32_t itflag   = hspi->Instance->SR;

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8001f40:	2d01      	cmp	r5, #1
 8001f42:	d103      	bne.n	8001f4c <HAL_SPI_IRQHandler+0x1c>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8001f44:	064d      	lsls	r5, r1, #25
 8001f46:	d501      	bpl.n	8001f4c <HAL_SPI_IRQHandler+0x1c>
  {
    hspi->RxISR(hspi);
 8001f48:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001f4a:	e005      	b.n	8001f58 <HAL_SPI_IRQHandler+0x28>
    return;
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8001f4c:	0795      	lsls	r5, r2, #30
 8001f4e:	d505      	bpl.n	8001f5c <HAL_SPI_IRQHandler+0x2c>
 8001f50:	0608      	lsls	r0, r1, #24
 8001f52:	d503      	bpl.n	8001f5c <HAL_SPI_IRQHandler+0x2c>
  {
    hspi->TxISR(hspi);
 8001f54:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001f56:	4620      	mov	r0, r4
 8001f58:	4798      	blx	r3
    return;
 8001f5a:	e056      	b.n	800200a <HAL_SPI_IRQHandler+0xda>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8001f5c:	f412 7fb0 	tst.w	r2, #352	; 0x160
 8001f60:	d053      	beq.n	800200a <HAL_SPI_IRQHandler+0xda>
 8001f62:	068d      	lsls	r5, r1, #26
 8001f64:	d551      	bpl.n	800200a <HAL_SPI_IRQHandler+0xda>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((itflag & SPI_FLAG_OVR) != RESET)
 8001f66:	0650      	lsls	r0, r2, #25
 8001f68:	d516      	bpl.n	8001f98 <HAL_SPI_IRQHandler+0x68>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001f6a:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8001f6e:	2500      	movs	r5, #0
 8001f70:	2803      	cmp	r0, #3
 8001f72:	d00a      	beq.n	8001f8a <HAL_SPI_IRQHandler+0x5a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001f74:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001f76:	f040 0004 	orr.w	r0, r0, #4
 8001f7a:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f7c:	9500      	str	r5, [sp, #0]
 8001f7e:	68d8      	ldr	r0, [r3, #12]
 8001f80:	9000      	str	r0, [sp, #0]
 8001f82:	6898      	ldr	r0, [r3, #8]
 8001f84:	9000      	str	r0, [sp, #0]
 8001f86:	9800      	ldr	r0, [sp, #0]
 8001f88:	e006      	b.n	8001f98 <HAL_SPI_IRQHandler+0x68>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f8a:	9501      	str	r5, [sp, #4]
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	9201      	str	r2, [sp, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	9301      	str	r3, [sp, #4]
 8001f94:	9b01      	ldr	r3, [sp, #4]
        return;
 8001f96:	e038      	b.n	800200a <HAL_SPI_IRQHandler+0xda>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((itflag & SPI_FLAG_MODF) != RESET)
 8001f98:	0695      	lsls	r5, r2, #26
 8001f9a:	d50c      	bpl.n	8001fb6 <HAL_SPI_IRQHandler+0x86>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001f9c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001f9e:	f040 0001 	orr.w	r0, r0, #1
 8001fa2:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	9002      	str	r0, [sp, #8]
 8001fa8:	6898      	ldr	r0, [r3, #8]
 8001faa:	9002      	str	r0, [sp, #8]
 8001fac:	6818      	ldr	r0, [r3, #0]
 8001fae:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8001fb2:	6018      	str	r0, [r3, #0]
 8001fb4:	9802      	ldr	r0, [sp, #8]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((itflag & SPI_FLAG_FRE) != RESET)
 8001fb6:	05d0      	lsls	r0, r2, #23
 8001fb8:	d508      	bpl.n	8001fcc <HAL_SPI_IRQHandler+0x9c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001fba:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001fbc:	f042 0208 	orr.w	r2, r2, #8
 8001fc0:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	9203      	str	r2, [sp, #12]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	9203      	str	r2, [sp, #12]
 8001fca:	9a03      	ldr	r2, [sp, #12]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fcc:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001fce:	b1e2      	cbz	r2, 800200a <HAL_SPI_IRQHandler+0xda>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001fd6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001fde:	078a      	lsls	r2, r1, #30
 8001fe0:	d010      	beq.n	8002004 <HAL_SPI_IRQHandler+0xd4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001fe2:	685a      	ldr	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001fe4:	6da0      	ldr	r0, [r4, #88]	; 0x58

      hspi->State = HAL_SPI_STATE_READY;
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001fe6:	f022 0203 	bic.w	r2, r2, #3
 8001fea:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001fec:	b118      	cbz	r0, 8001ff6 <HAL_SPI_IRQHandler+0xc6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001fee:	4b08      	ldr	r3, [pc, #32]	; (8002010 <HAL_SPI_IRQHandler+0xe0>)
 8001ff0:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8001ff2:	f7fe fd9f 	bl	8000b34 <HAL_DMA_Abort_IT>
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001ff6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001ff8:	b138      	cbz	r0, 800200a <HAL_SPI_IRQHandler+0xda>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001ffa:	4b05      	ldr	r3, [pc, #20]	; (8002010 <HAL_SPI_IRQHandler+0xe0>)
 8001ffc:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8001ffe:	f7fe fd99 	bl	8000b34 <HAL_DMA_Abort_IT>
 8002002:	e002      	b.n	800200a <HAL_SPI_IRQHandler+0xda>
        }
      }
      else
      {
        /* Call user error callback */
        HAL_SPI_ErrorCallback(hspi);
 8002004:	4620      	mov	r0, r4
 8002006:	f001 ffdd 	bl	8003fc4 <HAL_SPI_ErrorCallback>
      }
    }
    return;
  }
}
 800200a:	b005      	add	sp, #20
 800200c:	bd30      	pop	{r4, r5, pc}
 800200e:	bf00      	nop
 8002010:	08002015 	.word	0x08002015

08002014 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002014:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002016:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800201e:	87c3      	strh	r3, [r0, #62]	; 0x3e

  HAL_SPI_ErrorCallback(hspi);
 8002020:	f001 ffd0 	bl	8003fc4 <HAL_SPI_ErrorCallback>
 8002024:	bd08      	pop	{r3, pc}

08002026 <TIM_TI1_ConfigInputStage>:
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002026:	6a03      	ldr	r3, [r0, #32]
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002028:	b510      	push	{r4, lr}
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800202a:	6a04      	ldr	r4, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800202c:	f023 030a 	bic.w	r3, r3, #10
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002030:	f024 0401 	bic.w	r4, r4, #1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8002034:	4319      	orrs	r1, r3
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002036:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002038:	6984      	ldr	r4, [r0, #24]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800203a:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 800203e:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002042:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002044:	6201      	str	r1, [r0, #32]
 8002046:	bd10      	pop	{r4, pc}

08002048 <TIM_TI2_ConfigInputStage>:
{
uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002048:	6a03      	ldr	r3, [r0, #32]
 800204a:	f023 0310 	bic.w	r3, r3, #16
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800204e:	b510      	push	{r4, lr}
uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002050:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002052:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002054:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002056:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800205a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12);
 800205e:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4);
 8002062:	ea43 1101 	orr.w	r1, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002066:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002068:	6201      	str	r1, [r0, #32]
 800206a:	bd10      	pop	{r4, pc}

0800206c <HAL_TIM_Base_Start>:
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800206c:	6802      	ldr	r2, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800206e:	2302      	movs	r3, #2
 8002070:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002074:	6813      	ldr	r3, [r2, #0]
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	6013      	str	r3, [r2, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800207c:	2301      	movs	r3, #1
 800207e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
}
 8002082:	2000      	movs	r0, #0
 8002084:	4770      	bx	lr

08002086 <HAL_TIM_Base_Stop>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002086:	2302      	movs	r3, #2
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002088:	f241 1211 	movw	r2, #4369	; 0x1111
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800208c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002090:	6803      	ldr	r3, [r0, #0]
 8002092:	6a19      	ldr	r1, [r3, #32]
 8002094:	400a      	ands	r2, r1
 8002096:	b942      	cbnz	r2, 80020aa <HAL_TIM_Base_Stop+0x24>
 8002098:	6a19      	ldr	r1, [r3, #32]
 800209a:	f240 4244 	movw	r2, #1092	; 0x444
 800209e:	400a      	ands	r2, r1
 80020a0:	b91a      	cbnz	r2, 80020aa <HAL_TIM_Base_Stop+0x24>
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	f022 0201 	bic.w	r2, r2, #1
 80020a8:	601a      	str	r2, [r3, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80020aa:	2301      	movs	r3, #1
 80020ac:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
}
 80020b0:	2000      	movs	r0, #0
 80020b2:	4770      	bx	lr

080020b4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020b4:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
  
  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80020b6:	b151      	cbz	r1, 80020ce <HAL_TIM_Encoder_Start_IT+0x1a>
 80020b8:	2904      	cmp	r1, #4
 80020ba:	d114      	bne.n	80020e6 <HAL_TIM_Encoder_Start_IT+0x32>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80020bc:	6a1a      	ldr	r2, [r3, #32]
 80020be:	f022 0210 	bic.w	r2, r2, #16
 80020c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80020c4:	6a1a      	ldr	r2, [r3, #32]
 80020c6:	f042 0210 	orr.w	r2, r2, #16
 80020ca:	621a      	str	r2, [r3, #32]
 80020cc:	e01f      	b.n	800210e <HAL_TIM_Encoder_Start_IT+0x5a>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80020ce:	6a1a      	ldr	r2, [r3, #32]
 80020d0:	f022 0201 	bic.w	r2, r2, #1
 80020d4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80020d6:	6a1a      	ldr	r2, [r3, #32]
 80020d8:	f042 0201 	orr.w	r2, r2, #1
 80020dc:	621a      	str	r2, [r3, #32]
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80020de:	68da      	ldr	r2, [r3, #12]
 80020e0:	f042 0202 	orr.w	r2, r2, #2
 80020e4:	e016      	b.n	8002114 <HAL_TIM_Encoder_Start_IT+0x60>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80020e6:	6a1a      	ldr	r2, [r3, #32]
 80020e8:	f022 0201 	bic.w	r2, r2, #1
 80020ec:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80020ee:	6a1a      	ldr	r2, [r3, #32]
 80020f0:	f042 0201 	orr.w	r2, r2, #1
 80020f4:	621a      	str	r2, [r3, #32]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80020f6:	6a1a      	ldr	r2, [r3, #32]
 80020f8:	f022 0210 	bic.w	r2, r2, #16
 80020fc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80020fe:	6a1a      	ldr	r2, [r3, #32]
 8002100:	f042 0210 	orr.w	r2, r2, #16
 8002104:	621a      	str	r2, [r3, #32]
    }  
    default :
    {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002106:	68da      	ldr	r2, [r3, #12]
 8002108:	f042 0202 	orr.w	r2, r2, #2
 800210c:	60da      	str	r2, [r3, #12]
     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800210e:	68da      	ldr	r2, [r3, #12]
 8002110:	f042 0204 	orr.w	r2, r2, #4
 8002114:	60da      	str	r2, [r3, #12]
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
  
  /* Return function status */
  return HAL_OK;
}
 8002116:	2000      	movs	r0, #0
     break; 
    }
  }
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	f042 0201 	orr.w	r2, r2, #1
 800211e:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
}
 8002120:	4770      	bx	lr

08002122 <HAL_TIM_PeriodElapsedCallback>:
 8002122:	4770      	bx	lr

08002124 <HAL_TIM_OC_DelayElapsedCallback>:
 8002124:	4770      	bx	lr

08002126 <HAL_TIM_IC_CaptureCallback>:
 8002126:	4770      	bx	lr

08002128 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002128:	4770      	bx	lr

0800212a <HAL_TIM_TriggerCallback>:
 800212a:	4770      	bx	lr

0800212c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800212c:	6803      	ldr	r3, [r0, #0]
 800212e:	691a      	ldr	r2, [r3, #16]
 8002130:	0791      	lsls	r1, r2, #30
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002132:	b510      	push	{r4, lr}
 8002134:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002136:	d514      	bpl.n	8002162 <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	0792      	lsls	r2, r2, #30
 800213c:	d511      	bpl.n	8002162 <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800213e:	f06f 0202 	mvn.w	r2, #2
 8002142:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002144:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002146:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002148:	7602      	strb	r2, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800214a:	0799      	lsls	r1, r3, #30
 800214c:	d002      	beq.n	8002154 <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800214e:	f7ff ffea 	bl	8002126 <HAL_TIM_IC_CaptureCallback>
 8002152:	e004      	b.n	800215e <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002154:	f7ff ffe6 	bl	8002124 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002158:	4620      	mov	r0, r4
 800215a:	f7ff ffe5 	bl	8002128 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800215e:	2300      	movs	r3, #0
 8002160:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002162:	6823      	ldr	r3, [r4, #0]
 8002164:	691a      	ldr	r2, [r3, #16]
 8002166:	0752      	lsls	r2, r2, #29
 8002168:	d516      	bpl.n	8002198 <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	0750      	lsls	r0, r2, #29
 800216e:	d513      	bpl.n	8002198 <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002170:	f06f 0204 	mvn.w	r2, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002174:	4620      	mov	r0, r4
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002176:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002178:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 800217a:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800217c:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 800217e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002182:	d002      	beq.n	800218a <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002184:	f7ff ffcf 	bl	8002126 <HAL_TIM_IC_CaptureCallback>
 8002188:	e004      	b.n	8002194 <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800218a:	f7ff ffcb 	bl	8002124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800218e:	4620      	mov	r0, r4
 8002190:	f7ff ffca 	bl	8002128 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002194:	2300      	movs	r3, #0
 8002196:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002198:	6823      	ldr	r3, [r4, #0]
 800219a:	691a      	ldr	r2, [r3, #16]
 800219c:	0711      	lsls	r1, r2, #28
 800219e:	d515      	bpl.n	80021cc <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	0712      	lsls	r2, r2, #28
 80021a4:	d512      	bpl.n	80021cc <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021a6:	f06f 0208 	mvn.w	r2, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80021aa:	4620      	mov	r0, r4
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021ae:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80021b0:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021b2:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80021b4:	079b      	lsls	r3, r3, #30
 80021b6:	d002      	beq.n	80021be <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80021b8:	f7ff ffb5 	bl	8002126 <HAL_TIM_IC_CaptureCallback>
 80021bc:	e004      	b.n	80021c8 <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021be:	f7ff ffb1 	bl	8002124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80021c2:	4620      	mov	r0, r4
 80021c4:	f7ff ffb0 	bl	8002128 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021c8:	2300      	movs	r3, #0
 80021ca:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021cc:	6823      	ldr	r3, [r4, #0]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	06d0      	lsls	r0, r2, #27
 80021d2:	d516      	bpl.n	8002202 <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80021d4:	68da      	ldr	r2, [r3, #12]
 80021d6:	06d1      	lsls	r1, r2, #27
 80021d8:	d513      	bpl.n	8002202 <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021da:	f06f 0210 	mvn.w	r2, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80021de:	4620      	mov	r0, r4
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021e2:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80021e4:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021e6:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80021e8:	f413 7f40 	tst.w	r3, #768	; 0x300
 80021ec:	d002      	beq.n	80021f4 <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80021ee:	f7ff ff9a 	bl	8002126 <HAL_TIM_IC_CaptureCallback>
 80021f2:	e004      	b.n	80021fe <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021f4:	f7ff ff96 	bl	8002124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f8:	4620      	mov	r0, r4
 80021fa:	f7ff ff95 	bl	8002128 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021fe:	2300      	movs	r3, #0
 8002200:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002202:	6823      	ldr	r3, [r4, #0]
 8002204:	691a      	ldr	r2, [r3, #16]
 8002206:	07d2      	lsls	r2, r2, #31
 8002208:	d508      	bpl.n	800221c <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	07d0      	lsls	r0, r2, #31
 800220e:	d505      	bpl.n	800221c <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002210:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002214:	4620      	mov	r0, r4
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002216:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002218:	f7ff ff83 	bl	8002122 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800221c:	6823      	ldr	r3, [r4, #0]
 800221e:	691a      	ldr	r2, [r3, #16]
 8002220:	0611      	lsls	r1, r2, #24
 8002222:	d508      	bpl.n	8002236 <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	0612      	lsls	r2, r2, #24
 8002228:	d505      	bpl.n	8002236 <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800222a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800222e:	4620      	mov	r0, r4
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002230:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002232:	f000 fb86 	bl	8002942 <HAL_TIMEx_BreakCallback>
    }
  }
  
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002236:	6823      	ldr	r3, [r4, #0]
 8002238:	691a      	ldr	r2, [r3, #16]
 800223a:	05d0      	lsls	r0, r2, #23
 800223c:	d508      	bpl.n	8002250 <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	0611      	lsls	r1, r2, #24
 8002242:	d505      	bpl.n	8002250 <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002244:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002248:	4620      	mov	r0, r4
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800224a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800224c:	f000 fb79 	bl	8002942 <HAL_TIMEx_BreakCallback>
    }
  }

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002250:	6823      	ldr	r3, [r4, #0]
 8002252:	691a      	ldr	r2, [r3, #16]
 8002254:	0652      	lsls	r2, r2, #25
 8002256:	d508      	bpl.n	800226a <HAL_TIM_IRQHandler+0x13e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	0650      	lsls	r0, r2, #25
 800225c:	d505      	bpl.n	800226a <HAL_TIM_IRQHandler+0x13e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800225e:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002262:	4620      	mov	r0, r4
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002264:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002266:	f7ff ff60 	bl	800212a <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800226a:	6823      	ldr	r3, [r4, #0]
 800226c:	691a      	ldr	r2, [r3, #16]
 800226e:	0691      	lsls	r1, r2, #26
 8002270:	d50a      	bpl.n	8002288 <HAL_TIM_IRQHandler+0x15c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	0692      	lsls	r2, r2, #26
 8002276:	d507      	bpl.n	8002288 <HAL_TIM_IRQHandler+0x15c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002278:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800227c:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800227e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 8002280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 8002284:	f000 bb5c 	b.w	8002940 <HAL_TIMEx_CommutationCallback>
 8002288:	bd10      	pop	{r4, pc}
	...

0800228c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800228c:	4a2e      	ldr	r2, [pc, #184]	; (8002348 <TIM_Base_SetConfig+0xbc>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 800228e:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002290:	4290      	cmp	r0, r2
 8002292:	d012      	beq.n	80022ba <TIM_Base_SetConfig+0x2e>
 8002294:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002298:	d00f      	beq.n	80022ba <TIM_Base_SetConfig+0x2e>
 800229a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800229e:	4290      	cmp	r0, r2
 80022a0:	d00b      	beq.n	80022ba <TIM_Base_SetConfig+0x2e>
 80022a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022a6:	4290      	cmp	r0, r2
 80022a8:	d007      	beq.n	80022ba <TIM_Base_SetConfig+0x2e>
 80022aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022ae:	4290      	cmp	r0, r2
 80022b0:	d003      	beq.n	80022ba <TIM_Base_SetConfig+0x2e>
 80022b2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80022b6:	4290      	cmp	r0, r2
 80022b8:	d118      	bne.n	80022ec <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80022ba:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80022c0:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80022c2:	4a21      	ldr	r2, [pc, #132]	; (8002348 <TIM_Base_SetConfig+0xbc>)
 80022c4:	4290      	cmp	r0, r2
 80022c6:	d037      	beq.n	8002338 <TIM_Base_SetConfig+0xac>
 80022c8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80022cc:	d034      	beq.n	8002338 <TIM_Base_SetConfig+0xac>
 80022ce:	4a1f      	ldr	r2, [pc, #124]	; (800234c <TIM_Base_SetConfig+0xc0>)
 80022d0:	4290      	cmp	r0, r2
 80022d2:	d031      	beq.n	8002338 <TIM_Base_SetConfig+0xac>
 80022d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022d8:	4290      	cmp	r0, r2
 80022da:	d02d      	beq.n	8002338 <TIM_Base_SetConfig+0xac>
 80022dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022e0:	4290      	cmp	r0, r2
 80022e2:	d029      	beq.n	8002338 <TIM_Base_SetConfig+0xac>
 80022e4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80022e8:	4290      	cmp	r0, r2
 80022ea:	d025      	beq.n	8002338 <TIM_Base_SetConfig+0xac>
 80022ec:	4a18      	ldr	r2, [pc, #96]	; (8002350 <TIM_Base_SetConfig+0xc4>)
 80022ee:	4290      	cmp	r0, r2
 80022f0:	d022      	beq.n	8002338 <TIM_Base_SetConfig+0xac>
 80022f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022f6:	4290      	cmp	r0, r2
 80022f8:	d01e      	beq.n	8002338 <TIM_Base_SetConfig+0xac>
 80022fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022fe:	4290      	cmp	r0, r2
 8002300:	d01a      	beq.n	8002338 <TIM_Base_SetConfig+0xac>
 8002302:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002306:	4290      	cmp	r0, r2
 8002308:	d016      	beq.n	8002338 <TIM_Base_SetConfig+0xac>
 800230a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800230e:	4290      	cmp	r0, r2
 8002310:	d012      	beq.n	8002338 <TIM_Base_SetConfig+0xac>
 8002312:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002316:	4290      	cmp	r0, r2
 8002318:	d00e      	beq.n	8002338 <TIM_Base_SetConfig+0xac>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 800231a:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800231c:	688b      	ldr	r3, [r1, #8]
 800231e:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002320:	680b      	ldr	r3, [r1, #0]
 8002322:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002324:	4b08      	ldr	r3, [pc, #32]	; (8002348 <TIM_Base_SetConfig+0xbc>)
 8002326:	4298      	cmp	r0, r3
 8002328:	d00b      	beq.n	8002342 <TIM_Base_SetConfig+0xb6>
 800232a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800232e:	4298      	cmp	r0, r3
 8002330:	d007      	beq.n	8002342 <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002332:	2301      	movs	r3, #1
 8002334:	6143      	str	r3, [r0, #20]
}
 8002336:	4770      	bx	lr
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800233c:	68ca      	ldr	r2, [r1, #12]
 800233e:	4313      	orrs	r3, r2
 8002340:	e7eb      	b.n	800231a <TIM_Base_SetConfig+0x8e>
  TIMx->PSC = (uint32_t)Structure->Prescaler;
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002342:	690b      	ldr	r3, [r1, #16]
 8002344:	6303      	str	r3, [r0, #48]	; 0x30
 8002346:	e7f4      	b.n	8002332 <TIM_Base_SetConfig+0xa6>
 8002348:	40010000 	.word	0x40010000
 800234c:	40000400 	.word	0x40000400
 8002350:	40014000 	.word	0x40014000

08002354 <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8002354:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002356:	4604      	mov	r4, r0
 8002358:	b180      	cbz	r0, 800237c <HAL_TIM_Base_Init+0x28>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 800235a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800235e:	b90b      	cbnz	r3, 8002364 <HAL_TIM_Base_Init+0x10>
  {  
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002360:	f003 ff22 	bl	80061a8 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002364:	2302      	movs	r3, #2
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002366:	6820      	ldr	r0, [r4, #0]
 8002368:	1d21      	adds	r1, r4, #4
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800236a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800236e:	f7ff ff8d 	bl	800228c <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002372:	2301      	movs	r3, #1
  
  return HAL_OK;
 8002374:	2000      	movs	r0, #0
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002376:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 800237a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 800237c:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 800237e:	bd10      	pop	{r4, pc}

08002380 <HAL_TIM_PWM_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002380:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002382:	4604      	mov	r4, r0
 8002384:	b1a0      	cbz	r0, 80023b0 <HAL_TIM_PWM_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002386:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800238a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800238e:	b91b      	cbnz	r3, 8002398 <HAL_TIM_PWM_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;  
 8002390:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002394:	f003 ff1c 	bl	80061d0 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 8002398:	2302      	movs	r3, #2
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800239a:	6820      	ldr	r0, [r4, #0]
 800239c:	1d21      	adds	r1, r4, #4
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 800239e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80023a2:	f7ff ff73 	bl	800228c <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80023a6:	2301      	movs	r3, #1
  
  return HAL_OK;
 80023a8:	2000      	movs	r0, #0
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80023aa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 80023ae:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 80023b0:	2001      	movs	r0, #1
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}  
 80023b2:	bd10      	pop	{r4, pc}

080023b4 <HAL_TIM_Encoder_Init>:
  *                the configuration information for TIM module.
  * @param  sConfig: TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 80023b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023b6:	460c      	mov	r4, r1
  uint32_t tmpsmcr = 0;
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80023b8:	4605      	mov	r5, r0
 80023ba:	2800      	cmp	r0, #0
 80023bc:	d043      	beq.n	8002446 <HAL_TIM_Encoder_Init+0x92>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 80023be:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80023c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023c6:	b91b      	cbnz	r3, 80023d0 <HAL_TIM_Encoder_Init+0x1c>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;  
 80023c8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80023cc:	f003 fe8c 	bl	80060e8 <HAL_TIM_Encoder_MspInit>
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80023d0:	4629      	mov	r1, r5
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 80023d2:	2302      	movs	r3, #2
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80023d4:	f851 0b04 	ldr.w	r0, [r1], #4
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 80023d8:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80023dc:	6883      	ldr	r3, [r0, #8]
 80023de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e2:	f023 0307 	bic.w	r3, r3, #7
 80023e6:	6083      	str	r3, [r0, #8]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 80023e8:	f7ff ff50 	bl	800228c <TIM_Base_SetConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023ec:	6828      	ldr	r0, [r5, #0]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80023ee:	6823      	ldr	r3, [r4, #0]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023f0:	6887      	ldr	r7, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80023f2:	6981      	ldr	r1, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80023f4:	431f      	orrs	r7, r3
 80023f6:	69a2      	ldr	r2, [r4, #24]
 80023f8:	f421 7340 	bic.w	r3, r1, #768	; 0x300
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 80023fc:	6921      	ldr	r1, [r4, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80023fe:	6a06      	ldr	r6, [r0, #32]
 8002400:	f023 0303 	bic.w	r3, r3, #3
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 8002404:	0109      	lsls	r1, r1, #4
 8002406:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
 800240a:	68a3      	ldr	r3, [r4, #8]
 800240c:	4313      	orrs	r3, r2
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 800240e:	69e2      	ldr	r2, [r4, #28]
 8002410:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8002414:	68e2      	ldr	r2, [r4, #12]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002416:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 800241a:	430a      	orrs	r2, r1
 800241c:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800241e:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 8002422:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8002426:	6961      	ldr	r1, [r4, #20]
 8002428:	4313      	orrs	r3, r2
 800242a:	f026 02aa 	bic.w	r2, r6, #170	; 0xaa
 800242e:	ea42 1201 	orr.w	r2, r2, r1, lsl #4

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 8002432:	6861      	ldr	r1, [r4, #4]
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002434:	6087      	str	r7, [r0, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 8002436:	430a      	orrs	r2, r1
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002438:	6183      	str	r3, [r0, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800243a:	2301      	movs	r3, #1

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800243c:	6202      	str	r2, [r0, #32]
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
 800243e:	2000      	movs	r0, #0

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002440:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  
  return HAL_OK;
 8002444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t tmpccer = 0;
  
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002446:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8002448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800244c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800244c:	6a03      	ldr	r3, [r0, #32]
 800244e:	f023 0301 	bic.w	r3, r3, #1
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002452:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002454:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002456:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002458:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800245a:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800245c:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800245e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8002462:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002466:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002468:	f023 0502 	bic.w	r5, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800246c:	688b      	ldr	r3, [r1, #8]
 800246e:	432b      	orrs	r3, r5

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002470:	4d0c      	ldr	r5, [pc, #48]	; (80024a4 <TIM_OC1_SetConfig+0x58>)
 8002472:	42a8      	cmp	r0, r5
 8002474:	d009      	beq.n	800248a <TIM_OC1_SetConfig+0x3e>
 8002476:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800247a:	42a8      	cmp	r0, r5
 800247c:	d005      	beq.n	800248a <TIM_OC1_SetConfig+0x3e>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800247e:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002480:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002482:	6184      	str	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002484:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002486:	6203      	str	r3, [r0, #32]
} 
 8002488:	bd70      	pop	{r4, r5, r6, pc}
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800248a:	68cd      	ldr	r5, [r1, #12]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800248c:	f023 0308 	bic.w	r3, r3, #8
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002490:	694e      	ldr	r6, [r1, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002492:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002496:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002498:	698d      	ldr	r5, [r1, #24]
 800249a:	4335      	orrs	r5, r6
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800249c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80024a0:	432a      	orrs	r2, r5
 80024a2:	e7ec      	b.n	800247e <TIM_OC1_SetConfig+0x32>
 80024a4:	40010000 	.word	0x40010000

080024a8 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024a8:	6a03      	ldr	r3, [r0, #32]
 80024aa:	f023 0310 	bic.w	r3, r3, #16
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024ae:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024b0:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80024b2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80024b4:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024b6:	6984      	ldr	r4, [r0, #24]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80024b8:	f023 0320 	bic.w	r3, r3, #32
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80024bc:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80024be:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 80024c2:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80024c6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 80024ca:	688d      	ldr	r5, [r1, #8]
 80024cc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80024d0:	4d0e      	ldr	r5, [pc, #56]	; (800250c <TIM_OC2_SetConfig+0x64>)
 80024d2:	42a8      	cmp	r0, r5
 80024d4:	d009      	beq.n	80024ea <TIM_OC2_SetConfig+0x42>
 80024d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80024da:	42a8      	cmp	r0, r5
 80024dc:	d005      	beq.n	80024ea <TIM_OC2_SetConfig+0x42>
    tmpcr2 |= (OC_Config->OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024de:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80024e0:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024e2:	6184      	str	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80024e4:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024e6:	6203      	str	r3, [r0, #32]
}
 80024e8:	bd30      	pop	{r4, r5, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 80024ea:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80024ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80024f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 80024f4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80024f8:	694d      	ldr	r5, [r1, #20]
 80024fa:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80024fe:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002504:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8002508:	e7e9      	b.n	80024de <TIM_OC2_SetConfig+0x36>
 800250a:	bf00      	nop
 800250c:	40010000 	.word	0x40010000

08002510 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002510:	6a03      	ldr	r3, [r0, #32]
 8002512:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002516:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002518:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800251a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800251c:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800251e:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002520:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002524:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002526:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800252a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800252e:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8002530:	688d      	ldr	r5, [r1, #8]
 8002532:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002536:	4d0e      	ldr	r5, [pc, #56]	; (8002570 <TIM_OC3_SetConfig+0x60>)
 8002538:	42a8      	cmp	r0, r5
 800253a:	d009      	beq.n	8002550 <TIM_OC3_SetConfig+0x40>
 800253c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002540:	42a8      	cmp	r0, r5
 8002542:	d005      	beq.n	8002550 <TIM_OC3_SetConfig+0x40>
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002544:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002546:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002548:	61c4      	str	r4, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800254a:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800254c:	6203      	str	r3, [r0, #32]
}
 800254e:	bd30      	pop	{r4, r5, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8002550:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002552:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002556:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 800255a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 800255e:	694d      	ldr	r5, [r1, #20]
 8002560:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8002564:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002566:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 800256a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 800256e:	e7e9      	b.n	8002544 <TIM_OC3_SetConfig+0x34>
 8002570:	40010000 	.word	0x40010000

08002574 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002574:	6a03      	ldr	r3, [r0, #32]
 8002576:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800257a:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800257c:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800257e:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002580:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002582:	69c3      	ldr	r3, [r0, #28]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002584:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002588:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800258a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800258e:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002592:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8002596:	688d      	ldr	r5, [r1, #8]
 8002598:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800259c:	4d09      	ldr	r5, [pc, #36]	; (80025c4 <TIM_OC4_SetConfig+0x50>)
 800259e:	42a8      	cmp	r0, r5
 80025a0:	d009      	beq.n	80025b6 <TIM_OC4_SetConfig+0x42>
 80025a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80025a6:	42a8      	cmp	r0, r5
 80025a8:	d005      	beq.n	80025b6 <TIM_OC4_SetConfig+0x42>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025aa:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80025ac:	61c3      	str	r3, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80025ae:	684b      	ldr	r3, [r1, #4]
 80025b0:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025b2:	6204      	str	r4, [r0, #32]
}
 80025b4:	bd30      	pop	{r4, r5, pc}
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80025b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80025ba:	694d      	ldr	r5, [r1, #20]
 80025bc:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 80025c0:	e7f3      	b.n	80025aa <TIM_OC4_SetConfig+0x36>
 80025c2:	bf00      	nop
 80025c4:	40010000 	.word	0x40010000

080025c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025c8:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 80025ca:	6884      	ldr	r4, [r0, #8]
 80025cc:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 80025d0:	4321      	orrs	r1, r4
 80025d2:	430a      	orrs	r2, r1

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80025d4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025d8:	6083      	str	r3, [r0, #8]
 80025da:	bd10      	pop	{r4, pc}

080025dc <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 80025dc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80025e0:	2b01      	cmp	r3, #1
  * @param  sClockSourceConfig: pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 80025e2:	b510      	push	{r4, lr}
 80025e4:	4604      	mov	r4, r0
 80025e6:	f04f 0002 	mov.w	r0, #2
  uint32_t tmpsmcr = 0;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 80025ea:	f000 8082 	beq.w	80026f2 <HAL_TIM_ConfigClockSource+0x116>
  
  htim->State = HAL_TIM_STATE_BUSY;
 80025ee:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 80025f2:	2301      	movs	r3, #1
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025f4:	6820      	ldr	r0, [r4, #0]
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 80025f6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025fa:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025fc:	4b3d      	ldr	r3, [pc, #244]	; (80026f4 <HAL_TIM_ConfigClockSource+0x118>)
 80025fe:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8002600:	6083      	str	r3, [r0, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8002602:	680b      	ldr	r3, [r1, #0]
 8002604:	2b40      	cmp	r3, #64	; 0x40
 8002606:	d057      	beq.n	80026b8 <HAL_TIM_ConfigClockSource+0xdc>
 8002608:	d814      	bhi.n	8002634 <HAL_TIM_ConfigClockSource+0x58>
 800260a:	2b10      	cmp	r3, #16
 800260c:	d05f      	beq.n	80026ce <HAL_TIM_ConfigClockSource+0xf2>
 800260e:	d807      	bhi.n	8002620 <HAL_TIM_ConfigClockSource+0x44>
 8002610:	2b00      	cmp	r3, #0
 8002612:	d168      	bne.n	80026e6 <HAL_TIM_ConfigClockSource+0x10a>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002614:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800261a:	f043 0307 	orr.w	r3, r3, #7
 800261e:	e061      	b.n	80026e4 <HAL_TIM_ConfigClockSource+0x108>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8002620:	2b20      	cmp	r3, #32
 8002622:	d05a      	beq.n	80026da <HAL_TIM_ConfigClockSource+0xfe>
 8002624:	2b30      	cmp	r3, #48	; 0x30
 8002626:	d15e      	bne.n	80026e6 <HAL_TIM_ConfigClockSource+0x10a>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002628:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800262a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800262e:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8002632:	e057      	b.n	80026e4 <HAL_TIM_ConfigClockSource+0x108>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8002634:	2b70      	cmp	r3, #112	; 0x70
 8002636:	d025      	beq.n	8002684 <HAL_TIM_ConfigClockSource+0xa8>
 8002638:	d80e      	bhi.n	8002658 <HAL_TIM_ConfigClockSource+0x7c>
 800263a:	2b50      	cmp	r3, #80	; 0x50
 800263c:	d030      	beq.n	80026a0 <HAL_TIM_ConfigClockSource+0xc4>
 800263e:	2b60      	cmp	r3, #96	; 0x60
 8002640:	d151      	bne.n	80026e6 <HAL_TIM_ConfigClockSource+0x10a>
      
      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance, 
 8002642:	68ca      	ldr	r2, [r1, #12]
 8002644:	6849      	ldr	r1, [r1, #4]
 8002646:	f7ff fcff 	bl	8002048 <TIM_TI2_ConfigInputStage>
                        sClockSourceConfig->ClockPolarity, 
                        sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800264a:	6822      	ldr	r2, [r4, #0]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800264c:	6893      	ldr	r3, [r2, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800264e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002652:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8002656:	e02d      	b.n	80026b4 <HAL_TIM_ConfigClockSource+0xd8>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8002658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800265c:	d00c      	beq.n	8002678 <HAL_TIM_ConfigClockSource+0x9c>
 800265e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002662:	d140      	bne.n	80026e6 <HAL_TIM_ConfigClockSource+0x10a>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance, 
 8002664:	68cb      	ldr	r3, [r1, #12]
 8002666:	684a      	ldr	r2, [r1, #4]
 8002668:	6889      	ldr	r1, [r1, #8]
 800266a:	f7ff ffad 	bl	80025c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800266e:	6822      	ldr	r2, [r4, #0]
 8002670:	6893      	ldr	r3, [r2, #8]
 8002672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002676:	e01d      	b.n	80026b4 <HAL_TIM_ConfigClockSource+0xd8>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    { 
      assert_param(IS_TIM_INSTANCE(htim->Instance));      
      /* Disable slave mode to clock the prescaler directly with the internal clock */
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002678:	6883      	ldr	r3, [r0, #8]
 800267a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800267e:	f023 0307 	bic.w	r3, r3, #7
 8002682:	e02f      	b.n	80026e4 <HAL_TIM_ConfigClockSource+0x108>
      assert_param(IS_TIM_ETR_INSTANCE(htim->Instance));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance, 
 8002684:	68cb      	ldr	r3, [r1, #12]
 8002686:	684a      	ldr	r2, [r1, #4]
 8002688:	6889      	ldr	r1, [r1, #8]
 800268a:	f7ff ff9d 	bl	80025c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity, 
                        sClockSourceConfig->ClockFilter);
      /* Get the TIMx SMCR register value */
      tmpsmcr = htim->Instance->SMCR;
 800268e:	6822      	ldr	r2, [r4, #0]
 8002690:	6893      	ldr	r3, [r2, #8]
      /* Reset the SMS and TS Bits */
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002696:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800269a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800269e:	e009      	b.n	80026b4 <HAL_TIM_ConfigClockSource+0xd8>
  
      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance, 
 80026a0:	68ca      	ldr	r2, [r1, #12]
 80026a2:	6849      	ldr	r1, [r1, #4]
 80026a4:	f7ff fcbf 	bl	8002026 <TIM_TI1_ConfigInputStage>
                        sClockSourceConfig->ClockPolarity, 
                        sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026a8:	6822      	ldr	r2, [r4, #0]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80026aa:	6893      	ldr	r3, [r2, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80026ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80026b0:	f043 0357 	orr.w	r3, r3, #87	; 0x57
      TIM_ETR_SetConfig(htim->Instance, 
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026b4:	6093      	str	r3, [r2, #8]
    }
    break;
 80026b6:	e016      	b.n	80026e6 <HAL_TIM_ConfigClockSource+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
  
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80026b8:	68ca      	ldr	r2, [r1, #12]
 80026ba:	6849      	ldr	r1, [r1, #4]
 80026bc:	f7ff fcb3 	bl	8002026 <TIM_TI1_ConfigInputStage>
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026c0:	6822      	ldr	r2, [r4, #0]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80026c2:	6893      	ldr	r3, [r2, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80026c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80026c8:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80026cc:	e7f2      	b.n	80026b4 <HAL_TIM_ConfigClockSource+0xd8>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80026ce:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80026d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80026d4:	f043 0317 	orr.w	r3, r3, #23
 80026d8:	e004      	b.n	80026e4 <HAL_TIM_ConfigClockSource+0x108>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80026da:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80026dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80026e0:	f043 0327 	orr.w	r3, r3, #39	; 0x27
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80026e4:	6083      	str	r3, [r0, #8]
    break;
    
    default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 80026e6:	2301      	movs	r3, #1
  
  __HAL_UNLOCK(htim);
 80026e8:	2000      	movs	r0, #0
    break;
    
    default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 80026ea:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80026ee:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 80026f2:	bd10      	pop	{r4, pc}
 80026f4:	fffe0088 	.word	0xfffe0088

080026f8 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80026f8:	2301      	movs	r3, #1

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80026fa:	408a      	lsls	r2, r1
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80026fc:	408b      	lsls	r3, r1
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80026fe:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002700:	6a04      	ldr	r4, [r0, #32]
 8002702:	ea24 0303 	bic.w	r3, r4, r3
 8002706:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002708:	6a03      	ldr	r3, [r0, #32]
 800270a:	ea42 0103 	orr.w	r1, r2, r3
 800270e:	6201      	str	r1, [r0, #32]
 8002710:	bd10      	pop	{r4, pc}
	...

08002714 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002714:	b510      	push	{r4, lr}
 8002716:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002718:	2201      	movs	r2, #1
 800271a:	6800      	ldr	r0, [r0, #0]
 800271c:	f7ff ffec 	bl	80026f8 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8002720:	6823      	ldr	r3, [r4, #0]
 8002722:	4a08      	ldr	r2, [pc, #32]	; (8002744 <HAL_TIM_PWM_Start+0x30>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d003      	beq.n	8002730 <HAL_TIM_PWM_Start+0x1c>
 8002728:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800272c:	4293      	cmp	r3, r2
 800272e:	d103      	bne.n	8002738 <HAL_TIM_PWM_Start+0x24>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002730:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002732:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002736:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002738:	681a      	ldr	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
} 
 800273a:	2000      	movs	r0, #0
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800273c:	f042 0201 	orr.w	r2, r2, #1
 8002740:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
} 
 8002742:	bd10      	pop	{r4, pc}
 8002744:	40010000 	.word	0x40010000

08002748 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002748:	6a03      	ldr	r3, [r0, #32]
 800274a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800274e:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002750:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002752:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002754:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002756:	6d44      	ldr	r4, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002758:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800275c:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2; 
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800275e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8002762:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002766:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8002768:	688d      	ldr	r5, [r1, #8]
 800276a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800276e:	4d09      	ldr	r5, [pc, #36]	; (8002794 <TIM_OC5_SetConfig+0x4c>)
 8002770:	42a8      	cmp	r0, r5
 8002772:	d003      	beq.n	800277c <TIM_OC5_SetConfig+0x34>
 8002774:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002778:	42a8      	cmp	r0, r5
 800277a:	d104      	bne.n	8002786 <TIM_OC5_SetConfig+0x3e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800277c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8002780:	694d      	ldr	r5, [r1, #20]
 8002782:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002786:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002788:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800278a:	6544      	str	r4, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800278c:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800278e:	6203      	str	r3, [r0, #32]
 8002790:	bd30      	pop	{r4, r5, pc}
 8002792:	bf00      	nop
 8002794:	40010000 	.word	0x40010000

08002798 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002798:	6a03      	ldr	r3, [r0, #32]
 800279a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800279e:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80027a0:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027a2:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80027a4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80027a6:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80027a8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx = TIMx->CCMR3;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80027ac:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2; 
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80027ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80027b6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 80027ba:	688d      	ldr	r5, [r1, #8]
 80027bc:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80027c0:	4d08      	ldr	r5, [pc, #32]	; (80027e4 <TIM_OC6_SetConfig+0x4c>)
 80027c2:	42a8      	cmp	r0, r5
 80027c4:	d003      	beq.n	80027ce <TIM_OC6_SetConfig+0x36>
 80027c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80027ca:	42a8      	cmp	r0, r5
 80027cc:	d104      	bne.n	80027d8 <TIM_OC6_SetConfig+0x40>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80027ce:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 80027d2:	694d      	ldr	r5, [r1, #20]
 80027d4:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027d8:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80027da:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80027dc:	684b      	ldr	r3, [r1, #4]
 80027de:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80027e0:	6202      	str	r2, [r0, #32]
 80027e2:	bd30      	pop	{r4, r5, pc}
 80027e4:	40010000 	.word	0x40010000

080027e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 80027e8:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80027ea:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 80027ee:	4604      	mov	r4, r0
 80027f0:	460d      	mov	r5, r1
 80027f2:	2002      	movs	r0, #2
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d07b      	beq.n	80028f0 <HAL_TIM_PWM_ConfigChannel+0x108>
 80027f8:	2301      	movs	r3, #1
  
  htim->State = HAL_TIM_STATE_BUSY;
    
  switch (Channel)
 80027fa:	2a08      	cmp	r2, #8
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
  
  htim->State = HAL_TIM_STATE_BUSY;
 80027fc:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002800:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
    
  switch (Channel)
 8002804:	d03c      	beq.n	8002880 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002806:	d813      	bhi.n	8002830 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002808:	b34a      	cbz	r2, 800285e <HAL_TIM_PWM_ConfigChannel+0x76>
 800280a:	2a04      	cmp	r2, #4
 800280c:	d16a      	bne.n	80028e4 <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800280e:	6820      	ldr	r0, [r4, #0]
 8002810:	f7ff fe4a 	bl	80024a8 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002814:	6823      	ldr	r3, [r4, #0]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002816:	6929      	ldr	r1, [r5, #16]
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002818:	699a      	ldr	r2, [r3, #24]
 800281a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800281e:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002820:	699a      	ldr	r2, [r3, #24]
 8002822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002826:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002828:	699a      	ldr	r2, [r3, #24]
 800282a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800282e:	e025      	b.n	800287c <HAL_TIM_PWM_ConfigChannel+0x94>
  /* Check input state */
  __HAL_LOCK(htim);
  
  htim->State = HAL_TIM_STATE_BUSY;
    
  switch (Channel)
 8002830:	2a10      	cmp	r2, #16
 8002832:	d036      	beq.n	80028a2 <HAL_TIM_PWM_ConfigChannel+0xba>
 8002834:	2a14      	cmp	r2, #20
 8002836:	d044      	beq.n	80028c2 <HAL_TIM_PWM_ConfigChannel+0xda>
 8002838:	2a0c      	cmp	r2, #12
 800283a:	d153      	bne.n	80028e4 <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800283c:	6820      	ldr	r0, [r4, #0]
 800283e:	f7ff fe99 	bl	8002574 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002842:	6823      	ldr	r3, [r4, #0]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8002844:	6929      	ldr	r1, [r5, #16]
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002846:	69da      	ldr	r2, [r3, #28]
 8002848:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800284c:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800284e:	69da      	ldr	r2, [r3, #28]
 8002850:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002854:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8002856:	69da      	ldr	r2, [r3, #28]
 8002858:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800285c:	e01f      	b.n	800289e <HAL_TIM_PWM_ConfigChannel+0xb6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800285e:	6820      	ldr	r0, [r4, #0]
 8002860:	f7ff fdf4 	bl	800244c <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002864:	6823      	ldr	r3, [r4, #0]
 8002866:	699a      	ldr	r2, [r3, #24]
 8002868:	f042 0208 	orr.w	r2, r2, #8
 800286c:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800286e:	699a      	ldr	r2, [r3, #24]
 8002870:	f022 0204 	bic.w	r2, r2, #4
 8002874:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002876:	692a      	ldr	r2, [r5, #16]
 8002878:	6999      	ldr	r1, [r3, #24]
 800287a:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800287c:	619a      	str	r2, [r3, #24]
    }
    break;
 800287e:	e031      	b.n	80028e4 <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002880:	6820      	ldr	r0, [r4, #0]
 8002882:	f7ff fe45 	bl	8002510 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002886:	6823      	ldr	r3, [r4, #0]
 8002888:	69da      	ldr	r2, [r3, #28]
 800288a:	f042 0208 	orr.w	r2, r2, #8
 800288e:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002890:	69da      	ldr	r2, [r3, #28]
 8002892:	f022 0204 	bic.w	r2, r2, #4
 8002896:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002898:	692a      	ldr	r2, [r5, #16]
 800289a:	69d9      	ldr	r1, [r3, #28]
 800289c:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 800289e:	61da      	str	r2, [r3, #28]
    }
    break;
 80028a0:	e020      	b.n	80028e4 <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80028a2:	6820      	ldr	r0, [r4, #0]
 80028a4:	f7ff ff50 	bl	8002748 <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80028a8:	6823      	ldr	r3, [r4, #0]
 80028aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028ac:	f042 0208 	orr.w	r2, r2, #8
 80028b0:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80028b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028b4:	f022 0204 	bic.w	r2, r2, #4
 80028b8:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 80028ba:	692a      	ldr	r2, [r5, #16]
 80028bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80028be:	430a      	orrs	r2, r1
 80028c0:	e00f      	b.n	80028e2 <HAL_TIM_PWM_ConfigChannel+0xfa>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80028c2:	6820      	ldr	r0, [r4, #0]
 80028c4:	f7ff ff68 	bl	8002798 <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80028c8:	6823      	ldr	r3, [r4, #0]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 80028ca:	6909      	ldr	r1, [r1, #16]
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80028cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028d2:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80028d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 80028dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80028e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 80028e4:	2301      	movs	r3, #1
    
  __HAL_UNLOCK(htim);
 80028e6:	2000      	movs	r0, #0
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 80028e8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 80028ec:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 80028f0:	bd38      	pop	{r3, r4, r5, pc}
	...

080028f4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80028f4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80028f8:	2b01      	cmp	r3, #1
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80028fa:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80028fc:	d01c      	beq.n	8002938 <HAL_TIMEx_MasterConfigSynchronization+0x44>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028fe:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002900:	4c0e      	ldr	r4, [pc, #56]	; (800293c <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  
  /* Check input state */
  __HAL_LOCK(htim);

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002902:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002904:	42a2      	cmp	r2, r4

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002906:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002908:	d003      	beq.n	8002912 <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 800290a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800290e:	42a2      	cmp	r2, r4
 8002910:	d103      	bne.n	800291a <HAL_TIMEx_MasterConfigSynchronization+0x26>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002912:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002916:	684c      	ldr	r4, [r1, #4]
 8002918:	4323      	orrs	r3, r4
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800291a:	680c      	ldr	r4, [r1, #0]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800291c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002920:	6889      	ldr	r1, [r1, #8]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002922:	4323      	orrs	r3, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002924:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002928:	6053      	str	r3, [r2, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800292a:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 800292c:	2300      	movs	r3, #0
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800292e:	6091      	str	r1, [r2, #8]

  __HAL_UNLOCK(htim);
 8002930:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 8002934:	4618      	mov	r0, r3
 8002936:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002938:	2002      	movs	r0, #2
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
  
  return HAL_OK;
} 
 800293a:	bd30      	pop	{r4, r5, pc}
 800293c:	40010000 	.word	0x40010000

08002940 <HAL_TIMEx_CommutationCallback>:
 8002940:	4770      	bx	lr

08002942 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002942:	4770      	bx	lr

08002944 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002948:	9d06      	ldr	r5, [sp, #24]
 800294a:	4604      	mov	r4, r0
 800294c:	460f      	mov	r7, r1
 800294e:	4616      	mov	r6, r2
 8002950:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002952:	6821      	ldr	r1, [r4, #0]
 8002954:	69ca      	ldr	r2, [r1, #28]
 8002956:	ea37 0302 	bics.w	r3, r7, r2
 800295a:	bf0c      	ite	eq
 800295c:	2201      	moveq	r2, #1
 800295e:	2200      	movne	r2, #0
 8002960:	42b2      	cmp	r2, r6
 8002962:	d11d      	bne.n	80029a0 <UART_WaitOnFlagUntilTimeout+0x5c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002964:	1c6b      	adds	r3, r5, #1
 8002966:	d0f5      	beq.n	8002954 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8002968:	b99d      	cbnz	r5, 8002992 <UART_WaitOnFlagUntilTimeout+0x4e>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800296a:	6823      	ldr	r3, [r4, #0]

        huart->gState = HAL_UART_STATE_READY;
        huart->RxState = HAL_UART_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800296c:	2003      	movs	r0, #3
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002974:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	f022 0201 	bic.w	r2, r2, #1
 800297c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800297e:	2320      	movs	r3, #32
 8002980:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002984:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002988:	2300      	movs	r3, #0
 800298a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800298e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8002992:	f7fd fce7 	bl	8000364 <HAL_GetTick>
 8002996:	ebc8 0000 	rsb	r0, r8, r0
 800299a:	4285      	cmp	r5, r0
 800299c:	d8d9      	bhi.n	8002952 <UART_WaitOnFlagUntilTimeout+0xe>
 800299e:	e7e4      	b.n	800296a <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80029a0:	2000      	movs	r0, #0
}
 80029a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080029a6 <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029a6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80029aa:	461f      	mov	r7, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80029ac:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029b0:	4604      	mov	r4, r0
 80029b2:	460d      	mov	r5, r1
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80029b4:	2b20      	cmp	r3, #32
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029b6:	4690      	mov	r8, r2
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80029b8:	d14b      	bne.n	8002a52 <HAL_UART_Transmit+0xac>
  {
    if((pData == NULL ) || (Size == 0U))
 80029ba:	2900      	cmp	r1, #0
 80029bc:	d047      	beq.n	8002a4e <HAL_UART_Transmit+0xa8>
 80029be:	2a00      	cmp	r2, #0
 80029c0:	d045      	beq.n	8002a4e <HAL_UART_Transmit+0xa8>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029c2:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d043      	beq.n	8002a52 <HAL_UART_Transmit+0xac>
 80029ca:	2301      	movs	r3, #1
 80029cc:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d0:	2300      	movs	r3, #0
 80029d2:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029d4:	2321      	movs	r3, #33	; 0x21
 80029d6:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80029da:	f7fd fcc3 	bl	8000364 <HAL_GetTick>
 80029de:	4606      	mov	r6, r0

    huart->TxXferSize = Size;
 80029e0:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 80029e4:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80029e8:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80029ec:	b292      	uxth	r2, r2
 80029ee:	b302      	cbz	r2, 8002a32 <HAL_UART_Transmit+0x8c>
    {
      huart->TxXferCount--;
 80029f0:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029f4:	2200      	movs	r2, #0
 80029f6:	9700      	str	r7, [sp, #0]
 80029f8:	2180      	movs	r1, #128	; 0x80

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0U)
    {
      huart->TxXferCount--;
 80029fa:	3b01      	subs	r3, #1
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029fc:	4620      	mov	r0, r4

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0U)
    {
      huart->TxXferCount--;
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a04:	4633      	mov	r3, r6
 8002a06:	f7ff ff9d 	bl	8002944 <UART_WaitOnFlagUntilTimeout>
 8002a0a:	b108      	cbz	r0, 8002a10 <HAL_UART_Transmit+0x6a>
      {
        return HAL_TIMEOUT;
 8002a0c:	2003      	movs	r0, #3
 8002a0e:	e021      	b.n	8002a54 <HAL_UART_Transmit+0xae>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a10:	68a3      	ldr	r3, [r4, #8]
 8002a12:	6822      	ldr	r2, [r4, #0]
 8002a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a18:	d107      	bne.n	8002a2a <HAL_UART_Transmit+0x84>
 8002a1a:	6923      	ldr	r3, [r4, #16]
 8002a1c:	b92b      	cbnz	r3, 8002a2a <HAL_UART_Transmit+0x84>
      {
        tmp = (uint16_t*) pData;
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002a1e:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a26:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2;
 8002a28:	e7de      	b.n	80029e8 <HAL_UART_Transmit+0x42>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002a2a:	782b      	ldrb	r3, [r5, #0]
 8002a2c:	3501      	adds	r5, #1
 8002a2e:	6293      	str	r3, [r2, #40]	; 0x28
 8002a30:	e7da      	b.n	80029e8 <HAL_UART_Transmit+0x42>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a32:	9700      	str	r7, [sp, #0]
 8002a34:	4633      	mov	r3, r6
 8002a36:	2140      	movs	r1, #64	; 0x40
 8002a38:	4620      	mov	r0, r4
 8002a3a:	f7ff ff83 	bl	8002944 <UART_WaitOnFlagUntilTimeout>
 8002a3e:	2800      	cmp	r0, #0
 8002a40:	d1e4      	bne.n	8002a0c <HAL_UART_Transmit+0x66>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a42:	2320      	movs	r3, #32

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a44:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a48:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    return HAL_OK;
 8002a4c:	e002      	b.n	8002a54 <HAL_UART_Transmit+0xae>
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0U))
    {
      return  HAL_ERROR;
 8002a4e:	2001      	movs	r0, #1
 8002a50:	e000      	b.n	8002a54 <HAL_UART_Transmit+0xae>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002a52:	2002      	movs	r0, #2
  }
}
 8002a54:	b002      	add	sp, #8
 8002a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002a5c <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart: uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a5c:	b538      	push	{r3, r4, r5, lr}
 8002a5e:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002a60:	6805      	ldr	r5, [r0, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a62:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002a64:	6922      	ldr	r2, [r4, #16]
 8002a66:	68a1      	ldr	r1, [r4, #8]
 8002a68:	6828      	ldr	r0, [r5, #0]
 8002a6a:	4311      	orrs	r1, r2
 8002a6c:	6962      	ldr	r2, [r4, #20]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	ea42 0103 	orr.w	r1, r2, r3
 8002a74:	4a88      	ldr	r2, [pc, #544]	; (8002c98 <UART_SetConfig+0x23c>)
 8002a76:	4002      	ands	r2, r0
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002a78:	69a0      	ldr	r0, [r4, #24]
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	602a      	str	r2, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a7e:	686a      	ldr	r2, [r5, #4]
 8002a80:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8002a84:	68e2      	ldr	r2, [r4, #12]
 8002a86:	430a      	orrs	r2, r1
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002a88:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a8a:	606a      	str	r2, [r5, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002a8c:	4301      	orrs	r1, r0
 8002a8e:	68aa      	ldr	r2, [r5, #8]
 8002a90:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002a94:	430a      	orrs	r2, r1
 8002a96:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a98:	4a80      	ldr	r2, [pc, #512]	; (8002c9c <UART_SetConfig+0x240>)
 8002a9a:	4295      	cmp	r5, r2
 8002a9c:	d107      	bne.n	8002aae <UART_SetConfig+0x52>
 8002a9e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8002aa2:	497f      	ldr	r1, [pc, #508]	; (8002ca0 <UART_SetConfig+0x244>)
 8002aa4:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002aa8:	f002 0203 	and.w	r2, r2, #3
 8002aac:	e009      	b.n	8002ac2 <UART_SetConfig+0x66>
 8002aae:	4a7d      	ldr	r2, [pc, #500]	; (8002ca4 <UART_SetConfig+0x248>)
 8002ab0:	4295      	cmp	r5, r2
 8002ab2:	d10b      	bne.n	8002acc <UART_SetConfig+0x70>
 8002ab4:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8002ab8:	497b      	ldr	r1, [pc, #492]	; (8002ca8 <UART_SetConfig+0x24c>)
 8002aba:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002abe:	f002 020c 	and.w	r2, r2, #12

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ac2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ac6:	5c8a      	ldrb	r2, [r1, r2]
 8002ac8:	d073      	beq.n	8002bb2 <UART_SetConfig+0x156>
 8002aca:	e0b6      	b.n	8002c3a <UART_SetConfig+0x1de>
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002acc:	4a77      	ldr	r2, [pc, #476]	; (8002cac <UART_SetConfig+0x250>)
 8002ace:	4295      	cmp	r5, r2
 8002ad0:	d10d      	bne.n	8002aee <UART_SetConfig+0x92>
 8002ad2:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8002ad6:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002ada:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8002ade:	2a10      	cmp	r2, #16
 8002ae0:	f000 8086 	beq.w	8002bf0 <UART_SetConfig+0x194>
 8002ae4:	d95d      	bls.n	8002ba2 <UART_SetConfig+0x146>
 8002ae6:	2a20      	cmp	r2, #32
 8002ae8:	d078      	beq.n	8002bdc <UART_SetConfig+0x180>
 8002aea:	2a30      	cmp	r2, #48	; 0x30
 8002aec:	e00e      	b.n	8002b0c <UART_SetConfig+0xb0>
 8002aee:	4a70      	ldr	r2, [pc, #448]	; (8002cb0 <UART_SetConfig+0x254>)
 8002af0:	4295      	cmp	r5, r2
 8002af2:	d10d      	bne.n	8002b10 <UART_SetConfig+0xb4>
 8002af4:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 8002af8:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002afc:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8002b00:	2a40      	cmp	r2, #64	; 0x40
 8002b02:	d075      	beq.n	8002bf0 <UART_SetConfig+0x194>
 8002b04:	d94d      	bls.n	8002ba2 <UART_SetConfig+0x146>
 8002b06:	2a80      	cmp	r2, #128	; 0x80
 8002b08:	d068      	beq.n	8002bdc <UART_SetConfig+0x180>
 8002b0a:	2ac0      	cmp	r2, #192	; 0xc0
 8002b0c:	d07c      	beq.n	8002c08 <UART_SetConfig+0x1ac>
 8002b0e:	e087      	b.n	8002c20 <UART_SetConfig+0x1c4>
 8002b10:	4a68      	ldr	r2, [pc, #416]	; (8002cb4 <UART_SetConfig+0x258>)
 8002b12:	4295      	cmp	r5, r2
 8002b14:	d10f      	bne.n	8002b36 <UART_SetConfig+0xda>
 8002b16:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 8002b1a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002b1e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002b22:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002b26:	d063      	beq.n	8002bf0 <UART_SetConfig+0x194>
 8002b28:	d93b      	bls.n	8002ba2 <UART_SetConfig+0x146>
 8002b2a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002b2e:	d055      	beq.n	8002bdc <UART_SetConfig+0x180>
 8002b30:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002b34:	e7ea      	b.n	8002b0c <UART_SetConfig+0xb0>
 8002b36:	4a60      	ldr	r2, [pc, #384]	; (8002cb8 <UART_SetConfig+0x25c>)
 8002b38:	4295      	cmp	r5, r2
 8002b3a:	d112      	bne.n	8002b62 <UART_SetConfig+0x106>
 8002b3c:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 8002b40:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002b44:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8002b48:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002b4c:	d050      	beq.n	8002bf0 <UART_SetConfig+0x194>
 8002b4e:	d802      	bhi.n	8002b56 <UART_SetConfig+0xfa>
 8002b50:	2a00      	cmp	r2, #0
 8002b52:	d03d      	beq.n	8002bd0 <UART_SetConfig+0x174>
 8002b54:	e064      	b.n	8002c20 <UART_SetConfig+0x1c4>
 8002b56:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002b5a:	d03f      	beq.n	8002bdc <UART_SetConfig+0x180>
 8002b5c:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8002b60:	e7d4      	b.n	8002b0c <UART_SetConfig+0xb0>
 8002b62:	4a56      	ldr	r2, [pc, #344]	; (8002cbc <UART_SetConfig+0x260>)
 8002b64:	4295      	cmp	r5, r2
 8002b66:	d10f      	bne.n	8002b88 <UART_SetConfig+0x12c>
 8002b68:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8002b6c:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002b70:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8002b74:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002b78:	d03a      	beq.n	8002bf0 <UART_SetConfig+0x194>
 8002b7a:	d912      	bls.n	8002ba2 <UART_SetConfig+0x146>
 8002b7c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002b80:	d02c      	beq.n	8002bdc <UART_SetConfig+0x180>
 8002b82:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8002b86:	e7c1      	b.n	8002b0c <UART_SetConfig+0xb0>
 8002b88:	4a4d      	ldr	r2, [pc, #308]	; (8002cc0 <UART_SetConfig+0x264>)
 8002b8a:	4295      	cmp	r5, r2
 8002b8c:	d148      	bne.n	8002c20 <UART_SetConfig+0x1c4>
 8002b8e:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 8002b92:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002b96:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8002b9a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002b9e:	d027      	beq.n	8002bf0 <UART_SetConfig+0x194>
 8002ba0:	d801      	bhi.n	8002ba6 <UART_SetConfig+0x14a>
 8002ba2:	b17a      	cbz	r2, 8002bc4 <UART_SetConfig+0x168>
 8002ba4:	e03c      	b.n	8002c20 <UART_SetConfig+0x1c4>
 8002ba6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002baa:	d017      	beq.n	8002bdc <UART_SetConfig+0x180>
 8002bac:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8002bb0:	e7ac      	b.n	8002b0c <UART_SetConfig+0xb0>

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  {
    switch (clocksource)
 8002bb2:	2a08      	cmp	r2, #8
 8002bb4:	d837      	bhi.n	8002c26 <UART_SetConfig+0x1ca>
 8002bb6:	e8df f002 	tbb	[pc, r2]
 8002bba:	0e08      	.short	0x0e08
 8002bbc:	361e3614 	.word	0x361e3614
 8002bc0:	3636      	.short	0x3636
 8002bc2:	2a          	.byte	0x2a
 8002bc3:	00          	.byte	0x00

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bc8:	d140      	bne.n	8002c4c <UART_SetConfig+0x1f0>
  {
    switch (clocksource)
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002bca:	f7fe fddb 	bl	8001784 <HAL_RCC_GetPCLK1Freq>
 8002bce:	e014      	b.n	8002bfa <UART_SetConfig+0x19e>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bd4:	d13d      	bne.n	8002c52 <UART_SetConfig+0x1f6>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002bd6:	f7fe fded 	bl	80017b4 <HAL_RCC_GetPCLK2Freq>
 8002bda:	e00e      	b.n	8002bfa <UART_SetConfig+0x19e>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002be0:	d13a      	bne.n	8002c58 <UART_SetConfig+0x1fc>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002be2:	6860      	ldr	r0, [r4, #4]
 8002be4:	0842      	lsrs	r2, r0, #1
 8002be6:	f102 73f4 	add.w	r3, r2, #31981568	; 0x1e80000
 8002bea:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002bee:	e012      	b.n	8002c16 <UART_SetConfig+0x1ba>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bf4:	d139      	bne.n	8002c6a <UART_SetConfig+0x20e>
      break;
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002bf6:	f7fe fcd7 	bl	80015a8 <HAL_RCC_GetSysClockFreq>
 8002bfa:	6863      	ldr	r3, [r4, #4]
 8002bfc:	085a      	lsrs	r2, r3, #1
 8002bfe:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8002c02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c06:	e008      	b.n	8002c1a <UART_SetConfig+0x1be>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c0c:	d137      	bne.n	8002c7e <UART_SetConfig+0x222>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002c0e:	6860      	ldr	r0, [r4, #4]
 8002c10:	0843      	lsrs	r3, r0, #1
 8002c12:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002c16:	fbb3 f3f0 	udiv	r3, r3, r0
 8002c1a:	b29b      	uxth	r3, r3
{
  uint32_t tmpreg                     = 0x00000000U;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000U;
  uint16_t usartdiv                   = 0x0000U;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c1c:	2000      	movs	r0, #0
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
 8002c1e:	e004      	b.n	8002c2a <UART_SetConfig+0x1ce>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c24:	d135      	bne.n	8002c92 <UART_SetConfig+0x236>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002c26:	2001      	movs	r0, #1
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg                     = 0x00000000U;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000U;
  uint16_t usartdiv                   = 0x0000U;
 8002c28:	2300      	movs	r3, #0
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c2a:	f3c3 0142 	ubfx	r1, r3, #1, #3
 8002c2e:	f023 030f 	bic.w	r3, r3, #15
    huart->Instance->BRR = brrtemp;
 8002c32:	6822      	ldr	r2, [r4, #0]
 8002c34:	430b      	orrs	r3, r1
 8002c36:	60d3      	str	r3, [r2, #12]
 8002c38:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    switch (clocksource)
 8002c3a:	2a08      	cmp	r2, #8
 8002c3c:	d829      	bhi.n	8002c92 <UART_SetConfig+0x236>
 8002c3e:	e8df f002 	tbb	[pc, r2]
 8002c42:	0805      	.short	0x0805
 8002c44:	2814280b 	.word	0x2814280b
 8002c48:	2828      	.short	0x2828
 8002c4a:	1e          	.byte	0x1e
 8002c4b:	00          	.byte	0x00
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002c4c:	f7fe fd9a 	bl	8001784 <HAL_RCC_GetPCLK1Freq>
 8002c50:	e00d      	b.n	8002c6e <UART_SetConfig+0x212>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002c52:	f7fe fdaf 	bl	80017b4 <HAL_RCC_GetPCLK2Freq>
 8002c56:	e00a      	b.n	8002c6e <UART_SetConfig+0x212>
      break;
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002c58:	6861      	ldr	r1, [r4, #4]
 8002c5a:	084a      	lsrs	r2, r1, #1
 8002c5c:	f502 0374 	add.w	r3, r2, #15990784	; 0xf40000
 8002c60:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002c64:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c68:	e00f      	b.n	8002c8a <UART_SetConfig+0x22e>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002c6a:	f7fe fc9d 	bl	80015a8 <HAL_RCC_GetSysClockFreq>
 8002c6e:	6863      	ldr	r3, [r4, #4]
 8002c70:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002c74:	fbb0 f0f3 	udiv	r0, r0, r3
 8002c78:	b280      	uxth	r0, r0
 8002c7a:	60e8      	str	r0, [r5, #12]
 8002c7c:	e007      	b.n	8002c8e <UART_SetConfig+0x232>
      break;
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002c7e:	6862      	ldr	r2, [r4, #4]
 8002c80:	0853      	lsrs	r3, r2, #1
 8002c82:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002c86:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	60eb      	str	r3, [r5, #12]
{
  uint32_t tmpreg                     = 0x00000000U;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000U;
  uint16_t usartdiv                   = 0x0000U;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c8e:	2000      	movs	r0, #0
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
 8002c90:	bd38      	pop	{r3, r4, r5, pc}
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002c92:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 8002c94:	bd38      	pop	{r3, r4, r5, pc}
 8002c96:	bf00      	nop
 8002c98:	efff69f3 	.word	0xefff69f3
 8002c9c:	40011000 	.word	0x40011000
 8002ca0:	08006cc0 	.word	0x08006cc0
 8002ca4:	40004400 	.word	0x40004400
 8002ca8:	08006cc4 	.word	0x08006cc4
 8002cac:	40004800 	.word	0x40004800
 8002cb0:	40004c00 	.word	0x40004c00
 8002cb4:	40005000 	.word	0x40005000
 8002cb8:	40011400 	.word	0x40011400
 8002cbc:	40007800 	.word	0x40007800
 8002cc0:	40007c00 	.word	0x40007c00

08002cc4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cc4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002cc6:	07da      	lsls	r2, r3, #31
  * @brief Configure the UART peripheral advanced features
  * @param huart: uart handle
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002cc8:	b510      	push	{r4, lr}
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cca:	d506      	bpl.n	8002cda <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ccc:	6804      	ldr	r4, [r0, #0]
 8002cce:	6862      	ldr	r2, [r4, #4]
 8002cd0:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8002cd4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cda:	079c      	lsls	r4, r3, #30
 8002cdc:	d506      	bpl.n	8002cec <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cde:	6804      	ldr	r4, [r0, #0]
 8002ce0:	6862      	ldr	r2, [r4, #4]
 8002ce2:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8002ce6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002cec:	0759      	lsls	r1, r3, #29
 8002cee:	d506      	bpl.n	8002cfe <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002cf0:	6804      	ldr	r4, [r0, #0]
 8002cf2:	6862      	ldr	r2, [r4, #4]
 8002cf4:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8002cf8:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cfe:	071a      	lsls	r2, r3, #28
 8002d00:	d506      	bpl.n	8002d10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d02:	6804      	ldr	r4, [r0, #0]
 8002d04:	6862      	ldr	r2, [r4, #4]
 8002d06:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8002d0a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d10:	06dc      	lsls	r4, r3, #27
 8002d12:	d506      	bpl.n	8002d22 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d14:	6804      	ldr	r4, [r0, #0]
 8002d16:	68a2      	ldr	r2, [r4, #8]
 8002d18:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8002d1c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d22:	0699      	lsls	r1, r3, #26
 8002d24:	d506      	bpl.n	8002d34 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d26:	6804      	ldr	r4, [r0, #0]
 8002d28:	68a2      	ldr	r2, [r4, #8]
 8002d2a:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8002d2e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002d30:	430a      	orrs	r2, r1
 8002d32:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d34:	065a      	lsls	r2, r3, #25
 8002d36:	d510      	bpl.n	8002d5a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d38:	6801      	ldr	r1, [r0, #0]
 8002d3a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002d3c:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d3e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d42:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002d46:	ea42 0204 	orr.w	r2, r2, r4
 8002d4a:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d4c:	d105      	bne.n	8002d5a <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d4e:	684a      	ldr	r2, [r1, #4]
 8002d50:	f422 04c0 	bic.w	r4, r2, #6291456	; 0x600000
 8002d54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002d56:	4322      	orrs	r2, r4
 8002d58:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d5a:	061b      	lsls	r3, r3, #24
 8002d5c:	d506      	bpl.n	8002d6c <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d5e:	6801      	ldr	r1, [r0, #0]
 8002d60:	684b      	ldr	r3, [r1, #4]
 8002d62:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002d66:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	604b      	str	r3, [r1, #4]
 8002d6c:	bd10      	pop	{r4, pc}

08002d6e <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d70:	2600      	movs	r6, #0
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d72:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d74:	66c6      	str	r6, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002d76:	f7fd faf5 	bl	8000364 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d7a:	6823      	ldr	r3, [r4, #0]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002d7c:	4605      	mov	r5, r0

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	071a      	lsls	r2, r3, #28
 8002d82:	d404      	bmi.n	8002d8e <UART_CheckIdleState+0x20>
      /* Timeout Occurred */
      return HAL_TIMEOUT;
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d84:	6823      	ldr	r3, [r4, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	075b      	lsls	r3, r3, #29
 8002d8a:	d51a      	bpl.n	8002dc2 <UART_CheckIdleState+0x54>
 8002d8c:	e00d      	b.n	8002daa <UART_CheckIdleState+0x3c>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d8e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d92:	4632      	mov	r2, r6
 8002d94:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	f7ff fdd1 	bl	8002944 <UART_WaitOnFlagUntilTimeout>
 8002da2:	2800      	cmp	r0, #0
 8002da4:	d0ee      	beq.n	8002d84 <UART_CheckIdleState+0x16>
    {
      /* Timeout Occurred */
      return HAL_TIMEOUT;
 8002da6:	2003      	movs	r0, #3
 8002da8:	e013      	b.n	8002dd2 <UART_CheckIdleState+0x64>
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002daa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002dae:	2200      	movs	r2, #0
 8002db0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002db4:	4620      	mov	r0, r4
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	462b      	mov	r3, r5
 8002dba:	f7ff fdc3 	bl	8002944 <UART_WaitOnFlagUntilTimeout>
 8002dbe:	2800      	cmp	r0, #0
 8002dc0:	d1f1      	bne.n	8002da6 <UART_CheckIdleState+0x38>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8002dc2:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002dc4:	2000      	movs	r0, #0
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8002dc6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002dca:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
 8002dce:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
}
 8002dd2:	b002      	add	sp, #8
 8002dd4:	bd70      	pop	{r4, r5, r6, pc}

08002dd6 <HAL_UART_Init>:
  *         parameters in the UART_InitTypeDef and creates the associated handle .
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dd6:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002dd8:	4604      	mov	r4, r0
 8002dda:	b360      	cbz	r0, 8002e36 <HAL_UART_Init+0x60>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002ddc:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002de0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002de4:	b91b      	cbnz	r3, 8002dee <HAL_UART_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002de6:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dea:	f003 fa6f 	bl	80062cc <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002dee:	6822      	ldr	r2, [r4, #0]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002df0:	2324      	movs	r3, #36	; 0x24

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002df2:	4620      	mov	r0, r4

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002df4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002df8:	6813      	ldr	r3, [r2, #0]
 8002dfa:	f023 0301 	bic.w	r3, r3, #1
 8002dfe:	6013      	str	r3, [r2, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e00:	f7ff fe2c 	bl	8002a5c <UART_SetConfig>
 8002e04:	2801      	cmp	r0, #1
 8002e06:	d016      	beq.n	8002e36 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e0a:	b113      	cbz	r3, 8002e12 <HAL_UART_Init+0x3c>
  {
    UART_AdvFeatureConfig(huart);
 8002e0c:	4620      	mov	r0, r4
 8002e0e:	f7ff ff59 	bl	8002cc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e12:	6823      	ldr	r3, [r4, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e14:	4620      	mov	r0, r4
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e1c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e24:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	f042 0201 	orr.w	r2, r2, #1

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 8002e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002e30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e32:	f7ff bf9c 	b.w	8002d6e <UART_CheckIdleState>
}
 8002e36:	2001      	movs	r0, #1
 8002e38:	bd10      	pop	{r4, pc}
	...

08002e3c <Speed_Set>:
void Speed_Set() {

	/*
	 *Set speed based on number of squares to travel
	 */
	switch(fwd_number) {
 8002e3c:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <Speed_Set+0x30>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	3b01      	subs	r3, #1
 8002e42:	2b0e      	cmp	r3, #14
 8002e44:	d811      	bhi.n	8002e6a <Speed_Set+0x2e>
 8002e46:	e8df f003 	tbb	[pc, r3]
 8002e4a:	0a08      	.short	0x0a08
 8002e4c:	0c0c0c0c 	.word	0x0c0c0c0c
 8002e50:	0c0c0c0c 	.word	0x0c0c0c0c
 8002e54:	0c0c0c0c 	.word	0x0c0c0c0c
 8002e58:	0c          	.byte	0x0c
 8002e59:	00          	.byte	0x00
void SetSpeed(int speed) {
	/*
	 * Set the system motor speed to a certain value. All the speed correction functions will see this value
	 */

	m_speed = speed;
 8002e5a:	22cd      	movs	r2, #205	; 0xcd
 8002e5c:	e003      	b.n	8002e66 <Speed_Set+0x2a>
 8002e5e:	22d2      	movs	r2, #210	; 0xd2
 8002e60:	e001      	b.n	8002e66 <Speed_Set+0x2a>
 8002e62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e66:	4b02      	ldr	r3, [pc, #8]	; (8002e70 <Speed_Set+0x34>)
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	4770      	bx	lr
 8002e6c:	200000b8 	.word	0x200000b8
 8002e70:	20000338 	.word	0x20000338

08002e74 <Motor_Correction>:
	}
	*/

	static int correction = 0;

		if (abs(dif_l - dif_r) > 2500) {
 8002e74:	4b24      	ldr	r3, [pc, #144]	; (8002f08 <Motor_Correction+0x94>)
 8002e76:	4a25      	ldr	r2, [pc, #148]	; (8002f0c <Motor_Correction+0x98>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	1a9b      	subs	r3, r3, r2
 8002e7e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002e82:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8002e86:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8002e8a:	4291      	cmp	r1, r2
 8002e8c:	4a20      	ldr	r2, [pc, #128]	; (8002f10 <Motor_Correction+0x9c>)

		//prev_speed_error = speed_error;
	}
}

int Motor_Correction(int ir_disable) {
 8002e8e:	b510      	push	{r4, lr}
	}
	*/

	static int correction = 0;

		if (abs(dif_l - dif_r) > 2500) {
 8002e90:	dd02      	ble.n	8002e98 <Motor_Correction+0x24>
			errorP = dif_l - dif_r;
 8002e92:	6013      	str	r3, [r2, #0]
			return errorP/50;
 8002e94:	2032      	movs	r0, #50	; 0x32
 8002e96:	e034      	b.n	8002f02 <Motor_Correction+0x8e>
		}

		else if (dif_lf > LEFT_THRESHOLD && dif_rf > RIGHT_THRESHOLD) { //both walls available
 8002e98:	4b1e      	ldr	r3, [pc, #120]	; (8002f14 <Motor_Correction+0xa0>)
 8002e9a:	491f      	ldr	r1, [pc, #124]	; (8002f18 <Motor_Correction+0xa4>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002ea2:	dd07      	ble.n	8002eb4 <Motor_Correction+0x40>
 8002ea4:	680c      	ldr	r4, [r1, #0]
 8002ea6:	f5b4 7f48 	cmp.w	r4, #800	; 0x320
 8002eaa:	dd04      	ble.n	8002eb6 <Motor_Correction+0x42>
			errorP = (dif_lf - (dif_rf + offsets[2])); //dif_rf + 500 for primary
 8002eac:	491b      	ldr	r1, [pc, #108]	; (8002f1c <Motor_Correction+0xa8>)
 8002eae:	6889      	ldr	r1, [r1, #8]
 8002eb0:	4421      	add	r1, r4
 8002eb2:	e010      	b.n	8002ed6 <Motor_Correction+0x62>
			//errorD = errorP - oldErrorP;
		}
		else if (dif_lf >= LEFT_THRESHOLD && dif_rf <= RIGHT_THRESHOLD) { //only left wall to correct. Optimal reading should be 1600
 8002eb4:	d106      	bne.n	8002ec4 <Motor_Correction+0x50>
 8002eb6:	680c      	ldr	r4, [r1, #0]
 8002eb8:	f5b4 7f48 	cmp.w	r4, #800	; 0x320
 8002ebc:	dc02      	bgt.n	8002ec4 <Motor_Correction+0x50>
			errorP = (dif_lf - offsets[0]); //75 is correction factor. Left side needs more corrections for some reason
 8002ebe:	4917      	ldr	r1, [pc, #92]	; (8002f1c <Motor_Correction+0xa8>)
 8002ec0:	6809      	ldr	r1, [r1, #0]
 8002ec2:	e008      	b.n	8002ed6 <Motor_Correction+0x62>
			//errorD = errorP - oldErrorP;
		}
		else if (dif_rf >= RIGHT_THRESHOLD && dif_lf <= LEFT_THRESHOLD ) {//only right wall to correct. Optimal reading should be 1500. (200 is offset)
 8002ec4:	6809      	ldr	r1, [r1, #0]
 8002ec6:	f5b1 7f48 	cmp.w	r1, #800	; 0x320
 8002eca:	db06      	blt.n	8002eda <Motor_Correction+0x66>
 8002ecc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002ed0:	dc15      	bgt.n	8002efe <Motor_Correction+0x8a>
			errorP = (offsets[1] - dif_rf); //100 is correction factor. Right side needs less correction
 8002ed2:	4b12      	ldr	r3, [pc, #72]	; (8002f1c <Motor_Correction+0xa8>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	1a5b      	subs	r3, r3, r1
 8002ed8:	e010      	b.n	8002efc <Motor_Correction+0x88>
			//errorD = errorP - oldErrorP;
		}
		else if (ir_disable == FALSE && dif_lf <= LEFT_THRESHOLD && dif_rf <= RIGHT_THRESHOLD) { //use encoders when there's no walls available
 8002eda:	b980      	cbnz	r0, 8002efe <Motor_Correction+0x8a>
 8002edc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002ee0:	dc0d      	bgt.n	8002efe <Motor_Correction+0x8a>
			//errorP = (r_speed - l_speed)/6;
			errorP = ((r_count - prev_r_count) - (l_count - prev_l_count))*10;
 8002ee2:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <Motor_Correction+0xac>)
 8002ee4:	6819      	ldr	r1, [r3, #0]
 8002ee6:	4b0f      	ldr	r3, [pc, #60]	; (8002f24 <Motor_Correction+0xb0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	440b      	add	r3, r1
 8002eec:	490e      	ldr	r1, [pc, #56]	; (8002f28 <Motor_Correction+0xb4>)
 8002eee:	6809      	ldr	r1, [r1, #0]
 8002ef0:	1a5b      	subs	r3, r3, r1
 8002ef2:	490e      	ldr	r1, [pc, #56]	; (8002f2c <Motor_Correction+0xb8>)
 8002ef4:	6809      	ldr	r1, [r1, #0]
 8002ef6:	1a5b      	subs	r3, r3, r1
 8002ef8:	210a      	movs	r1, #10
 8002efa:	434b      	muls	r3, r1
 8002efc:	6013      	str	r3, [r2, #0]

		}	//when right side has moved more, add more to left side

	correction = errorP/P; //+ errorD/D; //P and D are tuning parameters
 8002efe:	6813      	ldr	r3, [r2, #0]
 8002f00:	205a      	movs	r0, #90	; 0x5a
 8002f02:	fb93 f0f0 	sdiv	r0, r3, r0
	//oldErrorP = errorP;

	return correction;

}
 8002f06:	bd10      	pop	{r4, pc}
 8002f08:	200000a8 	.word	0x200000a8
 8002f0c:	200000b0 	.word	0x200000b0
 8002f10:	200001c4 	.word	0x200001c4
 8002f14:	20000204 	.word	0x20000204
 8002f18:	200000a4 	.word	0x200000a4
 8002f1c:	20000000 	.word	0x20000000
 8002f20:	2000020c 	.word	0x2000020c
 8002f24:	20001454 	.word	0x20001454
 8002f28:	200013e8 	.word	0x200013e8
 8002f2c:	20000b28 	.word	0x20000b28

08002f30 <Reset_Counters>:

void Reset_Counters() {
/*
 * Reset all the counters
 */
	__HAL_TIM_SET_COUNTER(&htim1, 0); //reset counters --left encoder
 8002f30:	4b12      	ldr	r3, [pc, #72]	; (8002f7c <Reset_Counters+0x4c>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	2300      	movs	r3, #0
 8002f36:	6253      	str	r3, [r2, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim4, 0); //right encdoer
 8002f38:	4a11      	ldr	r2, [pc, #68]	; (8002f80 <Reset_Counters+0x50>)
 8002f3a:	6812      	ldr	r2, [r2, #0]
 8002f3c:	6253      	str	r3, [r2, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim5, 0); //time base
 8002f3e:	4a11      	ldr	r2, [pc, #68]	; (8002f84 <Reset_Counters+0x54>)
 8002f40:	6812      	ldr	r2, [r2, #0]
 8002f42:	6253      	str	r3, [r2, #36]	; 0x24

	temp_l = 0;
 8002f44:	4a10      	ldr	r2, [pc, #64]	; (8002f88 <Reset_Counters+0x58>)
 8002f46:	6013      	str	r3, [r2, #0]
	temp_r = 0;
 8002f48:	4a10      	ldr	r2, [pc, #64]	; (8002f8c <Reset_Counters+0x5c>)
 8002f4a:	6013      	str	r3, [r2, #0]
	prev_time_count = 0;
 8002f4c:	4a10      	ldr	r2, [pc, #64]	; (8002f90 <Reset_Counters+0x60>)
 8002f4e:	6013      	str	r3, [r2, #0]

	prev_l_count = 0;
 8002f50:	4a10      	ldr	r2, [pc, #64]	; (8002f94 <Reset_Counters+0x64>)
 8002f52:	6013      	str	r3, [r2, #0]
	prev_r_count = 0;
 8002f54:	4a10      	ldr	r2, [pc, #64]	; (8002f98 <Reset_Counters+0x68>)
 8002f56:	6013      	str	r3, [r2, #0]
	lenc_diff = 0;
 8002f58:	4a10      	ldr	r2, [pc, #64]	; (8002f9c <Reset_Counters+0x6c>)
 8002f5a:	6013      	str	r3, [r2, #0]
	renc_diff = 0;
 8002f5c:	4a10      	ldr	r2, [pc, #64]	; (8002fa0 <Reset_Counters+0x70>)
 8002f5e:	6013      	str	r3, [r2, #0]

	l_count = 0;
 8002f60:	4a10      	ldr	r2, [pc, #64]	; (8002fa4 <Reset_Counters+0x74>)
 8002f62:	6013      	str	r3, [r2, #0]
	r_count = 0;
 8002f64:	4a10      	ldr	r2, [pc, #64]	; (8002fa8 <Reset_Counters+0x78>)
 8002f66:	6013      	str	r3, [r2, #0]
	l_count_corr = 0;
 8002f68:	4a10      	ldr	r2, [pc, #64]	; (8002fac <Reset_Counters+0x7c>)
 8002f6a:	6013      	str	r3, [r2, #0]
	r_count_corr = 0;
 8002f6c:	4a10      	ldr	r2, [pc, #64]	; (8002fb0 <Reset_Counters+0x80>)
 8002f6e:	6013      	str	r3, [r2, #0]

	lenc_diff_corr = 0;
 8002f70:	4a10      	ldr	r2, [pc, #64]	; (8002fb4 <Reset_Counters+0x84>)
 8002f72:	6013      	str	r3, [r2, #0]
	renc_diff_corr = 0;
 8002f74:	4a10      	ldr	r2, [pc, #64]	; (8002fb8 <Reset_Counters+0x88>)
 8002f76:	6013      	str	r3, [r2, #0]
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	20002904 	.word	0x20002904
 8002f80:	20001458 	.word	0x20001458
 8002f84:	200014a0 	.word	0x200014a0
 8002f88:	20000b48 	.word	0x20000b48
 8002f8c:	20000b50 	.word	0x20000b50
 8002f90:	20001494 	.word	0x20001494
 8002f94:	20001454 	.word	0x20001454
 8002f98:	200013e8 	.word	0x200013e8
 8002f9c:	200000bc 	.word	0x200000bc
 8002fa0:	200001e0 	.word	0x200001e0
 8002fa4:	20000b28 	.word	0x20000b28
 8002fa8:	2000020c 	.word	0x2000020c
 8002fac:	20000b24 	.word	0x20000b24
 8002fb0:	20000b5c 	.word	0x20000b5c
 8002fb4:	200001cc 	.word	0x200001cc
 8002fb8:	20000310 	.word	0x20000310

08002fbc <Reset_Time>:

void Reset_Time() {
	/*
	 * Just reset time
	 */
	__HAL_TIM_SET_COUNTER(&htim5, 0); //time base
 8002fbc:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <Reset_Time+0x18>)
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	6253      	str	r3, [r2, #36]	; 0x24

	temp_l = 0;
 8002fc4:	4a04      	ldr	r2, [pc, #16]	; (8002fd8 <Reset_Time+0x1c>)
 8002fc6:	6013      	str	r3, [r2, #0]
	temp_r = 0;
 8002fc8:	4a04      	ldr	r2, [pc, #16]	; (8002fdc <Reset_Time+0x20>)
 8002fca:	6013      	str	r3, [r2, #0]
	prev_time_count = 0;
 8002fcc:	4a04      	ldr	r2, [pc, #16]	; (8002fe0 <Reset_Time+0x24>)
 8002fce:	6013      	str	r3, [r2, #0]
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	200014a0 	.word	0x200014a0
 8002fd8:	20000b48 	.word	0x20000b48
 8002fdc:	20000b50 	.word	0x20000b50
 8002fe0:	20001494 	.word	0x20001494

08002fe4 <Clear_Buffers>:
void Clear_Buffers() {
	/*
	 * Clear the transition buffers, gets rid of glitches when running the maze
	 */

	for (int i = 0; i < IR_BUFFER; i++) {
 8002fe4:	2300      	movs	r3, #0
		lf_buffer[i] = 0;
		rf_buffer[i] = 0;
 8002fe6:	4809      	ldr	r0, [pc, #36]	; (800300c <Clear_Buffers+0x28>)
	}
	*/

}

void Clear_Buffers() {
 8002fe8:	b510      	push	{r4, lr}
	/*
	 * Clear the transition buffers, gets rid of glitches when running the maze
	 */

	for (int i = 0; i < IR_BUFFER; i++) {
		lf_buffer[i] = 0;
 8002fea:	4619      	mov	r1, r3
 8002fec:	4c08      	ldr	r4, [pc, #32]	; (8003010 <Clear_Buffers+0x2c>)
 8002fee:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 8002ff2:	2200      	movs	r2, #0
		rf_buffer[i] = 0;
 8002ff4:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
void Clear_Buffers() {
	/*
	 * Clear the transition buffers, gets rid of glitches when running the maze
	 */

	for (int i = 0; i < IR_BUFFER; i++) {
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ffe:	d1f6      	bne.n	8002fee <Clear_Buffers+0xa>
		lf_buffer[i] = 0;
		rf_buffer[i] = 0;
		r_buffer[i] = 0;
		l_buffer[i] = 0;
	}
	buff_count = 0;
 8003000:	4b04      	ldr	r3, [pc, #16]	; (8003014 <Clear_Buffers+0x30>)
 8003002:	601a      	str	r2, [r3, #0]
	transition_flag = FALSE;
 8003004:	4b04      	ldr	r3, [pc, #16]	; (8003018 <Clear_Buffers+0x34>)
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	bd10      	pop	{r4, pc}
 800300a:	bf00      	nop
 800300c:	20000b64 	.word	0x20000b64
 8003010:	20000350 	.word	0x20000350
 8003014:	20001348 	.word	0x20001348
 8003018:	20000b34 	.word	0x20000b34

0800301c <Reset_Flags>:
}

void Reset_Flags() {

	if (reverse_flag == FALSE) { //if just starting out
 800301c:	4b21      	ldr	r3, [pc, #132]	; (80030a4 <Reset_Flags+0x88>)
 800301e:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 80030dc <Reset_Flags+0xc0>
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4820      	ldr	r0, [pc, #128]	; (80030a8 <Reset_Flags+0x8c>)
 8003026:	4921      	ldr	r1, [pc, #132]	; (80030ac <Reset_Flags+0x90>)
 8003028:	4a21      	ldr	r2, [pc, #132]	; (80030b0 <Reset_Flags+0x94>)
	}
	buff_count = 0;
	transition_flag = FALSE;
}

void Reset_Flags() {
 800302a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800302e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80030e0 <Reset_Flags+0xc4>
 8003032:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80030e4 <Reset_Flags+0xc8>
 8003036:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 80030e8 <Reset_Flags+0xcc>
 800303a:	4f1e      	ldr	r7, [pc, #120]	; (80030b4 <Reset_Flags+0x98>)
 800303c:	4e1e      	ldr	r6, [pc, #120]	; (80030b8 <Reset_Flags+0x9c>)
 800303e:	4d1f      	ldr	r5, [pc, #124]	; (80030bc <Reset_Flags+0xa0>)
 8003040:	4c1f      	ldr	r4, [pc, #124]	; (80030c0 <Reset_Flags+0xa4>)

	if (reverse_flag == FALSE) { //if just starting out
 8003042:	b9eb      	cbnz	r3, 8003080 <Reset_Flags+0x64>
		stop_flag = FALSE;

		cur_dir = START_DIR;
		//
			cur_move = FWD; //reset to default direction
			next_move = FWD;
 8003044:	6013      	str	r3, [r2, #0]
		//
		x_coord = X_START;
 8003046:	4a1f      	ldr	r2, [pc, #124]	; (80030c4 <Reset_Flags+0xa8>)
		dead_flag = ARRIVE;
		fwd_flag = FALSE;
		l_transition_flag = FALSE;
		r_transition_flag = FALSE;
		transition_flag = FALSE;
		done_flag = FALSE;
 8003048:	6003      	str	r3, [r0, #0]
		search_flag = FALSE;
		stop_flag = FALSE;

		cur_dir = START_DIR;
		//
			cur_move = FWD; //reset to default direction
 800304a:	600b      	str	r3, [r1, #0]
		l_transition_flag = FALSE;
		r_transition_flag = FALSE;
		transition_flag = FALSE;
		done_flag = FALSE;

		search_flag = FALSE;
 800304c:	481e      	ldr	r0, [pc, #120]	; (80030c8 <Reset_Flags+0xac>)
		cur_dir = START_DIR;
		//
			cur_move = FWD; //reset to default direction
			next_move = FWD;
		//
		x_coord = X_START;
 800304e:	6013      	str	r3, [r2, #0]
		y_coord = Y_START;
 8003050:	220f      	movs	r2, #15
 8003052:	491e      	ldr	r1, [pc, #120]	; (80030cc <Reset_Flags+0xb0>)
		l_transition_flag = FALSE;
		r_transition_flag = FALSE;
		transition_flag = FALSE;
		done_flag = FALSE;

		search_flag = FALSE;
 8003054:	6003      	str	r3, [r0, #0]
		//
			cur_move = FWD; //reset to default direction
			next_move = FWD;
		//
		x_coord = X_START;
		y_coord = Y_START;
 8003056:	600a      	str	r2, [r1, #0]
		done_flag = FALSE;

		search_flag = FALSE;
		stop_flag = FALSE;

		cur_dir = START_DIR;
 8003058:	481d      	ldr	r0, [pc, #116]	; (80030d0 <Reset_Flags+0xb4>)
			cur_move = FWD; //reset to default direction
			next_move = FWD;
		//
		x_coord = X_START;
		y_coord = Y_START;
		prevx = X_START;
 800305a:	491e      	ldr	r1, [pc, #120]	; (80030d4 <Reset_Flags+0xb8>)
}

void Reset_Flags() {

	if (reverse_flag == FALSE) { //if just starting out
		r_turnflag = FALSE; //reset turn flags
 800305c:	f8c9 3000 	str.w	r3, [r9]
		l_turnflag = FALSE;
 8003060:	f8c8 3000 	str.w	r3, [r8]
		dead_flag = ARRIVE;
 8003064:	f8cc 3000 	str.w	r3, [ip]
		fwd_flag = FALSE;
 8003068:	f8ce 3000 	str.w	r3, [lr]
		l_transition_flag = FALSE;
 800306c:	603b      	str	r3, [r7, #0]
		r_transition_flag = FALSE;
 800306e:	6033      	str	r3, [r6, #0]
		transition_flag = FALSE;
 8003070:	602b      	str	r3, [r5, #0]
		done_flag = FALSE;

		search_flag = FALSE;
		stop_flag = FALSE;
 8003072:	6023      	str	r3, [r4, #0]

		cur_dir = START_DIR;
 8003074:	6003      	str	r3, [r0, #0]
			cur_move = FWD; //reset to default direction
			next_move = FWD;
		//
		x_coord = X_START;
		y_coord = Y_START;
		prevx = X_START;
 8003076:	600b      	str	r3, [r1, #0]
		prevy = Y_START;
 8003078:	4b17      	ldr	r3, [pc, #92]	; (80030d8 <Reset_Flags+0xbc>)
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	}
	else //if in the middle
	{
		r_turnflag = FALSE; //reset turn flags
 8003080:	2300      	movs	r3, #0
 8003082:	f8c9 3000 	str.w	r3, [r9]
		l_turnflag = FALSE;
 8003086:	f8c8 3000 	str.w	r3, [r8]
		dead_flag = ARRIVE;
 800308a:	f8cc 3000 	str.w	r3, [ip]
		fwd_flag = FALSE;
 800308e:	f8ce 3000 	str.w	r3, [lr]
		l_transition_flag = FALSE;
 8003092:	603b      	str	r3, [r7, #0]
		r_transition_flag = FALSE;
 8003094:	6033      	str	r3, [r6, #0]
		transition_flag = FALSE;
 8003096:	602b      	str	r3, [r5, #0]
		stop_flag = FALSE;
 8003098:	6023      	str	r3, [r4, #0]
		done_flag = FALSE;
 800309a:	6003      	str	r3, [r0, #0]
		cur_move = FWD; //reset to default direction
 800309c:	600b      	str	r3, [r1, #0]
		next_move = FWD;
 800309e:	6013      	str	r3, [r2, #0]
 80030a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80030a4:	2000033c 	.word	0x2000033c
 80030a8:	2000031c 	.word	0x2000031c
 80030ac:	20000b3c 	.word	0x20000b3c
 80030b0:	20000b60 	.word	0x20000b60
 80030b4:	20000b4c 	.word	0x20000b4c
 80030b8:	200000c0 	.word	0x200000c0
 80030bc:	20000b34 	.word	0x20000b34
 80030c0:	20000014 	.word	0x20000014
 80030c4:	200001fc 	.word	0x200001fc
 80030c8:	20000b58 	.word	0x20000b58
 80030cc:	20000010 	.word	0x20000010
 80030d0:	20001344 	.word	0x20001344
 80030d4:	200001f4 	.word	0x200001f4
 80030d8:	200001f8 	.word	0x200001f8
 80030dc:	20000320 	.word	0x20000320
 80030e0:	20000200 	.word	0x20000200
 80030e4:	20000308 	.word	0x20000308
 80030e8:	2000009c 	.word	0x2000009c

080030ec <Transmit>:

Transmit("\r\n");
}

//takes char array
void Transmit(char message[]) {
 80030ec:	b510      	push	{r4, lr}
 80030ee:	4604      	mov	r4, r0

	int len;
	len=strlen(message);
 80030f0:	f7fd f88e 	bl	8000210 <strlen>
	HAL_UART_Transmit(&huart1, message, len, 1000);
 80030f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030f8:	b282      	uxth	r2, r0
 80030fa:	4621      	mov	r1, r4
 80030fc:	4802      	ldr	r0, [pc, #8]	; (8003108 <Transmit+0x1c>)
}
 80030fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//takes char array
void Transmit(char message[]) {

	int len;
	len=strlen(message);
	HAL_UART_Transmit(&huart1, message, len, 1000);
 8003102:	f7ff bc50 	b.w	80029a6 <HAL_UART_Transmit>
 8003106:	bf00      	nop
 8003108:	20001f64 	.word	0x20001f64

0800310c <Send_Debug>:

}

void Send_Debug(void) {

	sprintf(tx_buffer, "L Value: %d  LF Value: %d \r\nRF Value: %d R Value: %d \r\n--------------------- \r\n", dif_l, dif_lf, dif_rf, dif_r); //lf, rf, r);
 800310c:	4b10      	ldr	r3, [pc, #64]	; (8003150 <Send_Debug+0x44>)
 800310e:	4a11      	ldr	r2, [pc, #68]	; (8003154 <Send_Debug+0x48>)
 8003110:	681b      	ldr	r3, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, RDIC_Pin, !direction);
#endif

}

void Send_Debug(void) {
 8003112:	b513      	push	{r0, r1, r4, lr}

	sprintf(tx_buffer, "L Value: %d  LF Value: %d \r\nRF Value: %d R Value: %d \r\n--------------------- \r\n", dif_l, dif_lf, dif_rf, dif_r); //lf, rf, r);
 8003114:	9301      	str	r3, [sp, #4]
 8003116:	4b10      	ldr	r3, [pc, #64]	; (8003158 <Send_Debug+0x4c>)
 8003118:	4c10      	ldr	r4, [pc, #64]	; (800315c <Send_Debug+0x50>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4910      	ldr	r1, [pc, #64]	; (8003160 <Send_Debug+0x54>)
 800311e:	4620      	mov	r0, r4
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	4b10      	ldr	r3, [pc, #64]	; (8003164 <Send_Debug+0x58>)
 8003124:	6812      	ldr	r2, [r2, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 f970 	bl	800640c <siprintf>
	Transmit(tx_buffer); //transmitm the message above
 800312c:	4620      	mov	r0, r4
 800312e:	f7ff ffdd 	bl	80030ec <Transmit>
	sprintf(tx_buffer, "Left Count Value: %d \r\nRight Count Value %d \r\n-----------------\r\n", l_count, r_count);
 8003132:	4b0d      	ldr	r3, [pc, #52]	; (8003168 <Send_Debug+0x5c>)
 8003134:	4a0d      	ldr	r2, [pc, #52]	; (800316c <Send_Debug+0x60>)
 8003136:	4620      	mov	r0, r4
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6812      	ldr	r2, [r2, #0]
 800313c:	490c      	ldr	r1, [pc, #48]	; (8003170 <Send_Debug+0x64>)
 800313e:	f003 f965 	bl	800640c <siprintf>
	Transmit(tx_buffer); //transmit the message above
 8003142:	4620      	mov	r0, r4
	//sprintf(tx_buffer, "Current Direction: %d \r\n--------------------- \r\n", cur_dir);
	//Transmit(tx_buffer);
	//sprintf(tx_buffer, "X COORD: %d    Y COORD: %d \r\n--------------------- \r\n", x_coord, y_coord);
	//Transmit(tx_buffer);
	//sprintf(tx_buffer, "RIGHT Turn Flag: %d \r\nLEFT Turn Flag: %d \r\n-----------------------", r_turnflag, l_turnflag);
}
 8003144:	b002      	add	sp, #8
 8003146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Send_Debug(void) {

	sprintf(tx_buffer, "L Value: %d  LF Value: %d \r\nRF Value: %d R Value: %d \r\n--------------------- \r\n", dif_l, dif_lf, dif_rf, dif_r); //lf, rf, r);
	Transmit(tx_buffer); //transmitm the message above
	sprintf(tx_buffer, "Left Count Value: %d \r\nRight Count Value %d \r\n-----------------\r\n", l_count, r_count);
	Transmit(tx_buffer); //transmit the message above
 800314a:	f7ff bfcf 	b.w	80030ec <Transmit>
 800314e:	bf00      	nop
 8003150:	200000b0 	.word	0x200000b0
 8003154:	200000a8 	.word	0x200000a8
 8003158:	200000a4 	.word	0x200000a4
 800315c:	20001e54 	.word	0x20001e54
 8003160:	08006cf6 	.word	0x08006cf6
 8003164:	20000204 	.word	0x20000204
 8003168:	2000020c 	.word	0x2000020c
 800316c:	20000b28 	.word	0x20000b28
 8003170:	08006d46 	.word	0x08006d46

08003174 <Print_Maze>:
	dbg_count = (dbg_count+1) % DBG_BUFFER;
}

//updates the buffer. Read from global buffer

void Print_Maze() {
 8003174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


sprintf(tx_buffer, "Floodfill Values: \r\n");
 8003176:	4941      	ldr	r1, [pc, #260]	; (800327c <Print_Maze+0x108>)
Transmit(tx_buffer);
 8003178:	2500      	movs	r5, #0
//updates the buffer. Read from global buffer

void Print_Maze() {


sprintf(tx_buffer, "Floodfill Values: \r\n");
 800317a:	4841      	ldr	r0, [pc, #260]	; (8003280 <Print_Maze+0x10c>)
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //floodfill values
	for (int j = 0; j < X_MAZE_SIZE; j++) {  //go row by row, that's why y is looped first
		sprintf(tx_buffer, "%d ", maze[j][i]);
 800317c:	4e41      	ldr	r6, [pc, #260]	; (8003284 <Print_Maze+0x110>)
//updates the buffer. Read from global buffer

void Print_Maze() {


sprintf(tx_buffer, "Floodfill Values: \r\n");
 800317e:	f003 f969 	bl	8006454 <strcpy>
Transmit(tx_buffer);
 8003182:	483f      	ldr	r0, [pc, #252]	; (8003280 <Print_Maze+0x10c>)
 8003184:	f7ff ffb2 	bl	80030ec <Transmit>
	dbg_count = (dbg_count+1) % DBG_BUFFER;
}

//updates the buffer. Read from global buffer

void Print_Maze() {
 8003188:	2400      	movs	r4, #0

sprintf(tx_buffer, "Floodfill Values: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //floodfill values
	for (int j = 0; j < X_MAZE_SIZE; j++) {  //go row by row, that's why y is looped first
		sprintf(tx_buffer, "%d ", maze[j][i]);
 800318a:	19a3      	adds	r3, r4, r6
 800318c:	493e      	ldr	r1, [pc, #248]	; (8003288 <Print_Maze+0x114>)
 800318e:	483c      	ldr	r0, [pc, #240]	; (8003280 <Print_Maze+0x10c>)
 8003190:	3440      	adds	r4, #64	; 0x40
 8003192:	595a      	ldr	r2, [r3, r5]
 8003194:	f003 f93a 	bl	800640c <siprintf>
		Transmit(tx_buffer);
 8003198:	4839      	ldr	r0, [pc, #228]	; (8003280 <Print_Maze+0x10c>)
 800319a:	f7ff ffa7 	bl	80030ec <Transmit>


sprintf(tx_buffer, "Floodfill Values: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //floodfill values
	for (int j = 0; j < X_MAZE_SIZE; j++) {  //go row by row, that's why y is looped first
 800319e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80031a2:	d1f2      	bne.n	800318a <Print_Maze+0x16>
		sprintf(tx_buffer, "%d ", maze[j][i]);
		Transmit(tx_buffer);
	}
	sprintf(tx_buffer, "\r\n \r\n");
 80031a4:	4939      	ldr	r1, [pc, #228]	; (800328c <Print_Maze+0x118>)
 80031a6:	3504      	adds	r5, #4
 80031a8:	4835      	ldr	r0, [pc, #212]	; (8003280 <Print_Maze+0x10c>)
 80031aa:	f003 f953 	bl	8006454 <strcpy>
	Transmit(tx_buffer);
 80031ae:	4834      	ldr	r0, [pc, #208]	; (8003280 <Print_Maze+0x10c>)
 80031b0:	f7ff ff9c 	bl	80030ec <Transmit>
void Print_Maze() {


sprintf(tx_buffer, "Floodfill Values: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //floodfill values
 80031b4:	2d40      	cmp	r5, #64	; 0x40
 80031b6:	d1e7      	bne.n	8003188 <Print_Maze+0x14>
	sprintf(tx_buffer, "\r\n \r\n");
	Transmit(tx_buffer);
}


sprintf(tx_buffer, "Horizontal Walls: \r\n");
 80031b8:	4935      	ldr	r1, [pc, #212]	; (8003290 <Print_Maze+0x11c>)
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE - 1; i++) { //horizontal walls
 80031ba:	2400      	movs	r4, #0
	sprintf(tx_buffer, "\r\n \r\n");
	Transmit(tx_buffer);
}


sprintf(tx_buffer, "Horizontal Walls: \r\n");
 80031bc:	4830      	ldr	r0, [pc, #192]	; (8003280 <Print_Maze+0x10c>)
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE - 1; i++) { //horizontal walls
	for (int j = 0; j < X_MAZE_SIZE; j++) {
		sprintf(tx_buffer, "%d ", horiz_walls[j][i]);
 80031be:	4f35      	ldr	r7, [pc, #212]	; (8003294 <Print_Maze+0x120>)
	sprintf(tx_buffer, "\r\n \r\n");
	Transmit(tx_buffer);
}


sprintf(tx_buffer, "Horizontal Walls: \r\n");
 80031c0:	f003 f948 	bl	8006454 <strcpy>
Transmit(tx_buffer);
 80031c4:	482e      	ldr	r0, [pc, #184]	; (8003280 <Print_Maze+0x10c>)
 80031c6:	f7ff ff91 	bl	80030ec <Transmit>

void Print_Maze() {


sprintf(tx_buffer, "Floodfill Values: \r\n");
Transmit(tx_buffer);
 80031ca:	2500      	movs	r5, #0

sprintf(tx_buffer, "Horizontal Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE - 1; i++) { //horizontal walls
	for (int j = 0; j < X_MAZE_SIZE; j++) {
		sprintf(tx_buffer, "%d ", horiz_walls[j][i]);
 80031cc:	193e      	adds	r6, r7, r4
 80031ce:	5d72      	ldrb	r2, [r6, r5]
 80031d0:	350f      	adds	r5, #15
 80031d2:	492d      	ldr	r1, [pc, #180]	; (8003288 <Print_Maze+0x114>)
 80031d4:	482a      	ldr	r0, [pc, #168]	; (8003280 <Print_Maze+0x10c>)
 80031d6:	f003 f919 	bl	800640c <siprintf>
		Transmit(tx_buffer);
 80031da:	4829      	ldr	r0, [pc, #164]	; (8003280 <Print_Maze+0x10c>)
 80031dc:	f7ff ff86 	bl	80030ec <Transmit>


sprintf(tx_buffer, "Horizontal Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE - 1; i++) { //horizontal walls
	for (int j = 0; j < X_MAZE_SIZE; j++) {
 80031e0:	2df0      	cmp	r5, #240	; 0xf0
 80031e2:	d1f4      	bne.n	80031ce <Print_Maze+0x5a>
		sprintf(tx_buffer, "%d ", horiz_walls[j][i]);
		Transmit(tx_buffer);
	}
	sprintf(tx_buffer, "\r\n \r\n");
 80031e4:	4929      	ldr	r1, [pc, #164]	; (800328c <Print_Maze+0x118>)
}


sprintf(tx_buffer, "Horizontal Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE - 1; i++) { //horizontal walls
 80031e6:	3401      	adds	r4, #1
	for (int j = 0; j < X_MAZE_SIZE; j++) {
		sprintf(tx_buffer, "%d ", horiz_walls[j][i]);
		Transmit(tx_buffer);
	}
	sprintf(tx_buffer, "\r\n \r\n");
 80031e8:	4825      	ldr	r0, [pc, #148]	; (8003280 <Print_Maze+0x10c>)
 80031ea:	f003 f933 	bl	8006454 <strcpy>
	Transmit(tx_buffer);
 80031ee:	4824      	ldr	r0, [pc, #144]	; (8003280 <Print_Maze+0x10c>)
 80031f0:	f7ff ff7c 	bl	80030ec <Transmit>
}


sprintf(tx_buffer, "Horizontal Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE - 1; i++) { //horizontal walls
 80031f4:	2c0f      	cmp	r4, #15
 80031f6:	d1e8      	bne.n	80031ca <Print_Maze+0x56>
	}
	sprintf(tx_buffer, "\r\n \r\n");
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Vertical Walls: \r\n");
 80031f8:	4927      	ldr	r1, [pc, #156]	; (8003298 <Print_Maze+0x124>)
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //vertical walls
 80031fa:	2400      	movs	r4, #0
	}
	sprintf(tx_buffer, "\r\n \r\n");
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Vertical Walls: \r\n");
 80031fc:	4820      	ldr	r0, [pc, #128]	; (8003280 <Print_Maze+0x10c>)
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //vertical walls
	for (int j = 0; j < X_MAZE_SIZE - 1; j++) {
		sprintf(tx_buffer, "%d ", vert_walls[j][i]);
 80031fe:	4f27      	ldr	r7, [pc, #156]	; (800329c <Print_Maze+0x128>)
	}
	sprintf(tx_buffer, "\r\n \r\n");
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Vertical Walls: \r\n");
 8003200:	f003 f928 	bl	8006454 <strcpy>
Transmit(tx_buffer);
 8003204:	481e      	ldr	r0, [pc, #120]	; (8003280 <Print_Maze+0x10c>)
 8003206:	f7ff ff71 	bl	80030ec <Transmit>
}


sprintf(tx_buffer, "Horizontal Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE - 1; i++) { //horizontal walls
 800320a:	2500      	movs	r5, #0

sprintf(tx_buffer, "Vertical Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //vertical walls
	for (int j = 0; j < X_MAZE_SIZE - 1; j++) {
		sprintf(tx_buffer, "%d ", vert_walls[j][i]);
 800320c:	193e      	adds	r6, r7, r4
 800320e:	5d72      	ldrb	r2, [r6, r5]
 8003210:	3510      	adds	r5, #16
 8003212:	491d      	ldr	r1, [pc, #116]	; (8003288 <Print_Maze+0x114>)
 8003214:	481a      	ldr	r0, [pc, #104]	; (8003280 <Print_Maze+0x10c>)
 8003216:	f003 f8f9 	bl	800640c <siprintf>
		Transmit(tx_buffer);
 800321a:	4819      	ldr	r0, [pc, #100]	; (8003280 <Print_Maze+0x10c>)
 800321c:	f7ff ff66 	bl	80030ec <Transmit>
}

sprintf(tx_buffer, "Vertical Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //vertical walls
	for (int j = 0; j < X_MAZE_SIZE - 1; j++) {
 8003220:	2df0      	cmp	r5, #240	; 0xf0
 8003222:	d1f4      	bne.n	800320e <Print_Maze+0x9a>
		sprintf(tx_buffer, "%d ", vert_walls[j][i]);
		Transmit(tx_buffer);
	}
	sprintf(tx_buffer, "\r\n \r\n");
 8003224:	4919      	ldr	r1, [pc, #100]	; (800328c <Print_Maze+0x118>)
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Vertical Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //vertical walls
 8003226:	3401      	adds	r4, #1
	for (int j = 0; j < X_MAZE_SIZE - 1; j++) {
		sprintf(tx_buffer, "%d ", vert_walls[j][i]);
		Transmit(tx_buffer);
	}
	sprintf(tx_buffer, "\r\n \r\n");
 8003228:	4815      	ldr	r0, [pc, #84]	; (8003280 <Print_Maze+0x10c>)
 800322a:	f003 f913 	bl	8006454 <strcpy>
	Transmit(tx_buffer);
 800322e:	4814      	ldr	r0, [pc, #80]	; (8003280 <Print_Maze+0x10c>)
 8003230:	f7ff ff5c 	bl	80030ec <Transmit>
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Vertical Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //vertical walls
 8003234:	2c10      	cmp	r4, #16
 8003236:	d1e8      	bne.n	800320a <Print_Maze+0x96>
	}
	sprintf(tx_buffer, "\r\n \r\n");
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Visited Squares: \r\n");
 8003238:	4919      	ldr	r1, [pc, #100]	; (80032a0 <Print_Maze+0x12c>)
Transmit(tx_buffer);
 800323a:	2500      	movs	r5, #0
	}
	sprintf(tx_buffer, "\r\n \r\n");
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Visited Squares: \r\n");
 800323c:	4810      	ldr	r0, [pc, #64]	; (8003280 <Print_Maze+0x10c>)
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //vertical walls
	for (int j = 0; j < X_MAZE_SIZE; j++) {
		sprintf(tx_buffer, "%d ", visited_squares[j][i]);
 800323e:	4e19      	ldr	r6, [pc, #100]	; (80032a4 <Print_Maze+0x130>)
	}
	sprintf(tx_buffer, "\r\n \r\n");
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Visited Squares: \r\n");
 8003240:	f003 f908 	bl	8006454 <strcpy>
Transmit(tx_buffer);
 8003244:	480e      	ldr	r0, [pc, #56]	; (8003280 <Print_Maze+0x10c>)
 8003246:	f7ff ff51 	bl	80030ec <Transmit>
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Vertical Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //vertical walls
 800324a:	2400      	movs	r4, #0

sprintf(tx_buffer, "Visited Squares: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //vertical walls
	for (int j = 0; j < X_MAZE_SIZE; j++) {
		sprintf(tx_buffer, "%d ", visited_squares[j][i]);
 800324c:	19a3      	adds	r3, r4, r6
 800324e:	490e      	ldr	r1, [pc, #56]	; (8003288 <Print_Maze+0x114>)
 8003250:	480b      	ldr	r0, [pc, #44]	; (8003280 <Print_Maze+0x10c>)
 8003252:	3440      	adds	r4, #64	; 0x40
 8003254:	595a      	ldr	r2, [r3, r5]
 8003256:	f003 f8d9 	bl	800640c <siprintf>
		Transmit(tx_buffer);
 800325a:	4809      	ldr	r0, [pc, #36]	; (8003280 <Print_Maze+0x10c>)
 800325c:	f7ff ff46 	bl	80030ec <Transmit>
}

sprintf(tx_buffer, "Visited Squares: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //vertical walls
	for (int j = 0; j < X_MAZE_SIZE; j++) {
 8003260:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8003264:	d1f2      	bne.n	800324c <Print_Maze+0xd8>
		sprintf(tx_buffer, "%d ", visited_squares[j][i]);
		Transmit(tx_buffer);
	}
	sprintf(tx_buffer, "\r\n \r\n");
 8003266:	4909      	ldr	r1, [pc, #36]	; (800328c <Print_Maze+0x118>)
 8003268:	3504      	adds	r5, #4
 800326a:	4805      	ldr	r0, [pc, #20]	; (8003280 <Print_Maze+0x10c>)
 800326c:	f003 f8f2 	bl	8006454 <strcpy>
	Transmit(tx_buffer);
 8003270:	4803      	ldr	r0, [pc, #12]	; (8003280 <Print_Maze+0x10c>)
 8003272:	f7ff ff3b 	bl	80030ec <Transmit>
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Visited Squares: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //vertical walls
 8003276:	2d40      	cmp	r5, #64	; 0x40
 8003278:	d1e7      	bne.n	800324a <Print_Maze+0xd6>
 800327a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800327c:	08006e7d 	.word	0x08006e7d
 8003280:	20001e54 	.word	0x20001e54
 8003284:	200014dc 	.word	0x200014dc
 8003288:	08006db8 	.word	0x08006db8
 800328c:	08006e92 	.word	0x08006e92
 8003290:	08006e98 	.word	0x08006e98
 8003294:	200000c4 	.word	0x200000c4
 8003298:	08006ead 	.word	0x08006ead
 800329c:	20000218 	.word	0x20000218
 80032a0:	08006ec0 	.word	0x08006ec0
 80032a4:	20002504 	.word	0x20002504

080032a8 <Read_Walls_Flash>:
Transmit("Done! \r\n");
#endif
HAL_FLASH_Lock();
}

void Read_Walls_Flash() {
 80032a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
/*
 * Read from the flash memory the maze data
 */

#if DEBUG == TRUE
Transmit("Reading Walls from Flash...... \r\n");
 80032aa:	4826      	ldr	r0, [pc, #152]	; (8003344 <Read_Walls_Flash+0x9c>)
 80032ac:	f7ff ff1e 	bl	80030ec <Transmit>
#endif
Address = WALLS_ADDR;
 80032b0:	4a25      	ldr	r2, [pc, #148]	; (8003348 <Read_Walls_Flash+0xa0>)
 80032b2:	4b26      	ldr	r3, [pc, #152]	; (800334c <Read_Walls_Flash+0xa4>)

for (int i = 0; i < X_MAZE_SIZE; i++) { //read horizontal walls
	for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
		horiz_walls[i][j] = *(__IO uint32_t *)Address;
 80032b4:	4d26      	ldr	r5, [pc, #152]	; (8003350 <Read_Walls_Flash+0xa8>)
 */

#if DEBUG == TRUE
Transmit("Reading Walls from Flash...... \r\n");
#endif
Address = WALLS_ADDR;
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	2200      	movs	r2, #0
Transmit("Done! \r\n");
#endif
HAL_FLASH_Lock();
}

void Read_Walls_Flash() {
 80032ba:	2100      	movs	r1, #0
#endif
Address = WALLS_ADDR;

for (int i = 0; i < X_MAZE_SIZE; i++) { //read horizontal walls
	for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
		horiz_walls[i][j] = *(__IO uint32_t *)Address;
 80032bc:	18ac      	adds	r4, r5, r2
 80032be:	6818      	ldr	r0, [r3, #0]
 80032c0:	f850 6b04 	ldr.w	r6, [r0], #4
 80032c4:	5466      	strb	r6, [r4, r1]
Transmit("Reading Walls from Flash...... \r\n");
#endif
Address = WALLS_ADDR;

for (int i = 0; i < X_MAZE_SIZE; i++) { //read horizontal walls
	for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
 80032c6:	3101      	adds	r1, #1
		horiz_walls[i][j] = *(__IO uint32_t *)Address;
		Address = Address + 4;
 80032c8:	6018      	str	r0, [r3, #0]
Transmit("Reading Walls from Flash...... \r\n");
#endif
Address = WALLS_ADDR;

for (int i = 0; i < X_MAZE_SIZE; i++) { //read horizontal walls
	for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
 80032ca:	290f      	cmp	r1, #15
 80032cc:	d1f7      	bne.n	80032be <Read_Walls_Flash+0x16>
 80032ce:	320f      	adds	r2, #15
#if DEBUG == TRUE
Transmit("Reading Walls from Flash...... \r\n");
#endif
Address = WALLS_ADDR;

for (int i = 0; i < X_MAZE_SIZE; i++) { //read horizontal walls
 80032d0:	2af0      	cmp	r2, #240	; 0xf0
 80032d2:	d1f2      	bne.n	80032ba <Read_Walls_Flash+0x12>
 80032d4:	2200      	movs	r2, #0
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) { //read vertical walls
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
		vert_walls[i][j] = *(__IO uint32_t *)Address; //type conversion
 80032d6:	4d1f      	ldr	r5, [pc, #124]	; (8003354 <Read_Walls_Flash+0xac>)
 */

#if DEBUG == TRUE
Transmit("Reading Walls from Flash...... \r\n");
#endif
Address = WALLS_ADDR;
 80032d8:	2100      	movs	r1, #0
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) { //read vertical walls
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
		vert_walls[i][j] = *(__IO uint32_t *)Address; //type conversion
 80032da:	18ac      	adds	r4, r5, r2
 80032dc:	6818      	ldr	r0, [r3, #0]
 80032de:	f850 6b04 	ldr.w	r6, [r0], #4
 80032e2:	5466      	strb	r6, [r4, r1]
		Address = Address + 4;
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) { //read vertical walls
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
 80032e4:	3101      	adds	r1, #1
		vert_walls[i][j] = *(__IO uint32_t *)Address; //type conversion
		Address = Address + 4;
 80032e6:	6018      	str	r0, [r3, #0]
		Address = Address + 4;
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) { //read vertical walls
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
 80032e8:	2910      	cmp	r1, #16
 80032ea:	d1f7      	bne.n	80032dc <Read_Walls_Flash+0x34>
 80032ec:	3210      	adds	r2, #16
		horiz_walls[i][j] = *(__IO uint32_t *)Address;
		Address = Address + 4;
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) { //read vertical walls
 80032ee:	2af0      	cmp	r2, #240	; 0xf0
 80032f0:	d1f2      	bne.n	80032d8 <Read_Walls_Flash+0x30>
 80032f2:	2000      	movs	r0, #0
	}
}

for (int i = 0; i < X_MAZE_SIZE; i++) { //read visited squares array
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
		visited_squares[i][j] = *(__IO uint32_t *)Address; //type conversion
 80032f4:	4f18      	ldr	r7, [pc, #96]	; (8003358 <Read_Walls_Flash+0xb0>)
 80032f6:	2400      	movs	r4, #0
 80032f8:	19c6      	adds	r6, r0, r7
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	4d13      	ldr	r5, [pc, #76]	; (800334c <Read_Walls_Flash+0xa4>)
 80032fe:	4611      	mov	r1, r2
 8003300:	f851 eb04 	ldr.w	lr, [r1], #4
 8003304:	f846 e024 	str.w	lr, [r6, r4, lsl #2]
		Address = Address + 4;
	}
}

for (int i = 0; i < X_MAZE_SIZE; i++) { //read visited squares array
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
 8003308:	3401      	adds	r4, #1
		visited_squares[i][j] = *(__IO uint32_t *)Address; //type conversion
		Address = Address + 4;
 800330a:	6019      	str	r1, [r3, #0]
		Address = Address + 4;
	}
}

for (int i = 0; i < X_MAZE_SIZE; i++) { //read visited squares array
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
 800330c:	2c10      	cmp	r4, #16
 800330e:	d1f4      	bne.n	80032fa <Read_Walls_Flash+0x52>
 8003310:	3040      	adds	r0, #64	; 0x40
		vert_walls[i][j] = *(__IO uint32_t *)Address; //type conversion
		Address = Address + 4;
	}
}

for (int i = 0; i < X_MAZE_SIZE; i++) { //read visited squares array
 8003312:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003316:	d1ee      	bne.n	80032f6 <Read_Walls_Flash+0x4e>
		visited_squares[i][j] = *(__IO uint32_t *)Address; //type conversion
		Address = Address + 4;
	}
}

final_x = *(__IO uint32_t *)Address; //read final x
 8003318:	6809      	ldr	r1, [r1, #0]
 800331a:	4b10      	ldr	r3, [pc, #64]	; (800335c <Read_Walls_Flash+0xb4>)
 800331c:	6019      	str	r1, [r3, #0]
Address = Address + 4;
 800331e:	f102 0308 	add.w	r3, r2, #8
 8003322:	602b      	str	r3, [r5, #0]
final_y = *(__IO uint32_t *)Address; //read final y
 8003324:	4b0e      	ldr	r3, [pc, #56]	; (8003360 <Read_Walls_Flash+0xb8>)
 8003326:	6891      	ldr	r1, [r2, #8]
 8003328:	6019      	str	r1, [r3, #0]
Address = Address + 4;
 800332a:	f102 030c 	add.w	r3, r2, #12
final_dir = *(__IO int *)Address; //read final direction
 800332e:	68d2      	ldr	r2, [r2, #12]
}

final_x = *(__IO uint32_t *)Address; //read final x
Address = Address + 4;
final_y = *(__IO uint32_t *)Address; //read final y
Address = Address + 4;
 8003330:	602b      	str	r3, [r5, #0]
final_dir = *(__IO int *)Address; //read final direction
 8003332:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <Read_Walls_Flash+0xbc>)
 8003334:	601a      	str	r2, [r3, #0]



#if DEBUG == TRUE
Print_Maze();
 8003336:	f7ff ff1d 	bl	8003174 <Print_Maze>
Transmit("Done! \r\n");
 800333a:	480b      	ldr	r0, [pc, #44]	; (8003368 <Read_Walls_Flash+0xc0>)
#endif
}
 800333c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}



#if DEBUG == TRUE
Print_Maze();
Transmit("Done! \r\n");
 8003340:	f7ff bed4 	b.w	80030ec <Transmit>
 8003344:	08006ed4 	.word	0x08006ed4
 8003348:	08040000 	.word	0x08040000
 800334c:	200001b8 	.word	0x200001b8
 8003350:	200000c4 	.word	0x200000c4
 8003354:	20000218 	.word	0x20000218
 8003358:	20002504 	.word	0x20002504
 800335c:	200001bc 	.word	0x200001bc
 8003360:	200001c0 	.word	0x200001c0
 8003364:	20000208 	.word	0x20000208
 8003368:	08006ef6 	.word	0x08006ef6

0800336c <Get_Lowest_Square>:
Transmit("Optimal Path: \r\n");
*/
return;
}

int Get_Lowest_Square(int x, int y) { //gets lowest square
 800336c:	b5f0      	push	{r4, r5, r6, r7, lr}

/*
 * Return the lowest neighbor around the passed coordinate
 */

int values[5] = {127, 127, 127, 127, 127}; //first value is default 127. Then it goes: up, down, left, right
 800336e:	4f2d      	ldr	r7, [pc, #180]	; (8003424 <Get_Lowest_Square+0xb8>)
Transmit("Optimal Path: \r\n");
*/
return;
}

int Get_Lowest_Square(int x, int y) { //gets lowest square
 8003370:	b087      	sub	sp, #28
 8003372:	4605      	mov	r5, r0
 8003374:	460c      	mov	r4, r1

/*
 * Return the lowest neighbor around the passed coordinate
 */

int values[5] = {127, 127, 127, 127, 127}; //first value is default 127. Then it goes: up, down, left, right
 8003376:	ae01      	add	r6, sp, #4
int min = 0; //make sure there is default value

if (y > 0 && horiz_walls[x][y-1] != TRUE) { //if row is greater than zero
 8003378:	2c00      	cmp	r4, #0

/*
 * Return the lowest neighbor around the passed coordinate
 */

int values[5] = {127, 127, 127, 127, 127}; //first value is default 127. Then it goes: up, down, left, right
 800337a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800337c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	a801      	add	r0, sp, #4
 8003382:	ea4f 1205 	mov.w	r2, r5, lsl #4
 8003386:	6033      	str	r3, [r6, #0]
 8003388:	4e27      	ldr	r6, [pc, #156]	; (8003428 <Get_Lowest_Square+0xbc>)
int min = 0; //make sure there is default value

if (y > 0 && horiz_walls[x][y-1] != TRUE) { //if row is greater than zero
 800338a:	dc0b      	bgt.n	80033a4 <Get_Lowest_Square+0x38>
	values[1] = maze[x][y - 1]; //up square
}

if (y < Y_MAZE_SIZE - 1 && horiz_walls[x][y] != TRUE) {
 800338c:	1b53      	subs	r3, r2, r5
 800338e:	4433      	add	r3, r6
 8003390:	5d1b      	ldrb	r3, [r3, r4]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d013      	beq.n	80033be <Get_Lowest_Square+0x52>
	values[2] = maze[x][y + 1]; //down square
 8003396:	1c63      	adds	r3, r4, #1
 8003398:	4924      	ldr	r1, [pc, #144]	; (800342c <Get_Lowest_Square+0xc0>)
 800339a:	4413      	add	r3, r2
 800339c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80033a0:	9303      	str	r3, [sp, #12]
 80033a2:	e00c      	b.n	80033be <Get_Lowest_Square+0x52>
 */

int values[5] = {127, 127, 127, 127, 127}; //first value is default 127. Then it goes: up, down, left, right
int min = 0; //make sure there is default value

if (y > 0 && horiz_walls[x][y-1] != TRUE) { //if row is greater than zero
 80033a4:	1b51      	subs	r1, r2, r5
 80033a6:	1e63      	subs	r3, r4, #1
 80033a8:	4431      	add	r1, r6
 80033aa:	5cc9      	ldrb	r1, [r1, r3]
 80033ac:	2901      	cmp	r1, #1
	values[1] = maze[x][y - 1]; //up square
 80033ae:	bf1f      	itttt	ne
 80033b0:	189b      	addne	r3, r3, r2
 80033b2:	491e      	ldrne	r1, [pc, #120]	; (800342c <Get_Lowest_Square+0xc0>)
 80033b4:	f851 3023 	ldrne.w	r3, [r1, r3, lsl #2]
 80033b8:	9302      	strne	r3, [sp, #8]
}

if (y < Y_MAZE_SIZE - 1 && horiz_walls[x][y] != TRUE) {
 80033ba:	2c0e      	cmp	r4, #14
 80033bc:	dde6      	ble.n	800338c <Get_Lowest_Square+0x20>
	values[2] = maze[x][y + 1]; //down square
}

if (x > 0 && vert_walls[x - 1][y] != TRUE) {
 80033be:	2d00      	cmp	r5, #0
 80033c0:	491b      	ldr	r1, [pc, #108]	; (8003430 <Get_Lowest_Square+0xc4>)
 80033c2:	dc0b      	bgt.n	80033dc <Get_Lowest_Square+0x70>
	values[3] = maze[x - 1][y]; //left square
}

if (x < X_MAZE_SIZE - 1 && vert_walls[x][y] != TRUE) {
 80033c4:	440a      	add	r2, r1
 80033c6:	5d13      	ldrb	r3, [r2, r4]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d014      	beq.n	80033f6 <Get_Lowest_Square+0x8a>
	values[4] = maze[x + 1][y]; //right square
 80033cc:	3501      	adds	r5, #1
 80033ce:	4b17      	ldr	r3, [pc, #92]	; (800342c <Get_Lowest_Square+0xc0>)
 80033d0:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 80033d4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80033d8:	9305      	str	r3, [sp, #20]
 80033da:	e00c      	b.n	80033f6 <Get_Lowest_Square+0x8a>

if (y < Y_MAZE_SIZE - 1 && horiz_walls[x][y] != TRUE) {
	values[2] = maze[x][y + 1]; //down square
}

if (x > 0 && vert_walls[x - 1][y] != TRUE) {
 80033dc:	1e6b      	subs	r3, r5, #1
 80033de:	011b      	lsls	r3, r3, #4
 80033e0:	18ce      	adds	r6, r1, r3
 80033e2:	5d36      	ldrb	r6, [r6, r4]
 80033e4:	2e01      	cmp	r6, #1
	values[3] = maze[x - 1][y]; //left square
 80033e6:	bf1f      	itttt	ne
 80033e8:	191b      	addne	r3, r3, r4
 80033ea:	4e10      	ldrne	r6, [pc, #64]	; (800342c <Get_Lowest_Square+0xc0>)
 80033ec:	f856 3023 	ldrne.w	r3, [r6, r3, lsl #2]
 80033f0:	9304      	strne	r3, [sp, #16]
}

if (x < X_MAZE_SIZE - 1 && vert_walls[x][y] != TRUE) {
 80033f2:	2d0e      	cmp	r5, #14
 80033f4:	dde6      	ble.n	80033c4 <Get_Lowest_Square+0x58>
	values[4] = maze[x + 1][y]; //right square
}

for (int i = 1; i < 5; i++) { //get the index of the lowest square. Should be 127 by default
 80033f6:	2201      	movs	r2, #1
/*
 * Return the lowest neighbor around the passed coordinate
 */

int values[5] = {127, 127, 127, 127, 127}; //first value is default 127. Then it goes: up, down, left, right
int min = 0; //make sure there is default value
 80033f8:	2300      	movs	r3, #0
if (x < X_MAZE_SIZE - 1 && vert_walls[x][y] != TRUE) {
	values[4] = maze[x + 1][y]; //right square
}

for (int i = 1; i < 5; i++) { //get the index of the lowest square. Should be 127 by default
if(values[i] < values[min]) {
 80033fa:	a906      	add	r1, sp, #24
 80033fc:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8003400:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8003404:	f851 1c14 	ldr.w	r1, [r1, #-20]
 8003408:	428c      	cmp	r4, r1
 800340a:	bfb8      	it	lt
 800340c:	4613      	movlt	r3, r2

if (x < X_MAZE_SIZE - 1 && vert_walls[x][y] != TRUE) {
	values[4] = maze[x + 1][y]; //right square
}

for (int i = 1; i < 5; i++) { //get the index of the lowest square. Should be 127 by default
 800340e:	3201      	adds	r2, #1
 8003410:	2a05      	cmp	r2, #5
 8003412:	d1f2      	bne.n	80033fa <Get_Lowest_Square+0x8e>
if(values[i] < values[min]) {
	min = i;
}
}

return values[min];
 8003414:	aa06      	add	r2, sp, #24
 8003416:	eb02 0383 	add.w	r3, r2, r3, lsl #2
}
 800341a:	f853 0c14 	ldr.w	r0, [r3, #-20]
 800341e:	b007      	add	sp, #28
 8003420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003422:	bf00      	nop
 8003424:	08006c94 	.word	0x08006c94
 8003428:	200000c4 	.word	0x200000c4
 800342c:	200014dc 	.word	0x200014dc
 8003430:	20000218 	.word	0x20000218

08003434 <Floodfill>:

void Floodfill(int reverse, int path_search, int full) { //reverse chooses to set the start or the end as the target. path_search sets the next coordinate on the list as the target
 8003434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003438:	2300      	movs	r3, #0
 800343a:	f5ad 7d4b 	sub.w	sp, sp, #812	; 0x32c
	int buffer_counter = 0; //counter to loop through x_buffer and y_buffer
	int pathdist = 1; //floodfill values

	for (int i = 0; i < X_MAZE_SIZE; i++) { //initialize all values to 127
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
			maze[i][j] = 127;
 800343e:	4e3e      	ldr	r6, [pc, #248]	; (8003538 <Floodfill+0x104>)
 8003440:	277f      	movs	r7, #127	; 0x7f
}

return values[min];
}

void Floodfill(int reverse, int path_search, int full) { //reverse chooses to set the start or the end as the target. path_search sets the next coordinate on the list as the target
 8003442:	9201      	str	r2, [sp, #4]
 8003444:	2200      	movs	r2, #0
	int buffer_counter = 0; //counter to loop through x_buffer and y_buffer
	int pathdist = 1; //floodfill values

	for (int i = 0; i < X_MAZE_SIZE; i++) { //initialize all values to 127
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
			maze[i][j] = 127;
 8003446:	199d      	adds	r5, r3, r6
 8003448:	f845 7022 	str.w	r7, [r5, r2, lsl #2]

	int buffer_counter = 0; //counter to loop through x_buffer and y_buffer
	int pathdist = 1; //floodfill values

	for (int i = 0; i < X_MAZE_SIZE; i++) { //initialize all values to 127
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
 800344c:	3201      	adds	r2, #1
 800344e:	4c3a      	ldr	r4, [pc, #232]	; (8003538 <Floodfill+0x104>)
 8003450:	2a10      	cmp	r2, #16
 8003452:	d1f9      	bne.n	8003448 <Floodfill+0x14>
 8003454:	3340      	adds	r3, #64	; 0x40
	int temp_y = 0;

	int buffer_counter = 0; //counter to loop through x_buffer and y_buffer
	int pathdist = 1; //floodfill values

	for (int i = 0; i < X_MAZE_SIZE; i++) { //initialize all values to 127
 8003456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800345a:	d1f3      	bne.n	8003444 <Floodfill+0x10>
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
			maze[i][j] = 127;
		}
	}

	if (path_search == TRUE) {
 800345c:	2901      	cmp	r1, #1
 800345e:	d109      	bne.n	8003474 <Floodfill+0x40>
		maze[search_x][search_y] = 0;
 8003460:	4b36      	ldr	r3, [pc, #216]	; (800353c <Floodfill+0x108>)
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	4b36      	ldr	r3, [pc, #216]	; (8003540 <Floodfill+0x10c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800346c:	2200      	movs	r2, #0
 800346e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 8003472:	e00d      	b.n	8003490 <Floodfill+0x5c>
	}

	else {
		if (reverse == TRUE) {
 8003474:	2801      	cmp	r0, #1
 8003476:	f04f 0300 	mov.w	r3, #0
			maze[X_START][Y_START] = 0;
 800347a:	bf0f      	iteee	eq
 800347c:	63e3      	streq	r3, [r4, #60]	; 0x3c
		}

		else
		{
			maze[X_FINAL][Y_FINAL] = 0;
 800347e:	f8c4 31dc 	strne.w	r3, [r4, #476]	; 0x1dc
//#if X_MAZE_SIZE == 16
			maze[X_FINAL+1][Y_FINAL] = 0;
 8003482:	f8c4 321c 	strne.w	r3, [r4, #540]	; 0x21c
			maze[X_FINAL][Y_FINAL+1] = 0;
 8003486:	f8c4 31e0 	strne.w	r3, [r4, #480]	; 0x1e0
			maze[X_FINAL+1][Y_FINAL+1] = 0;
 800348a:	bf18      	it	ne
 800348c:	f8c4 3220 	strne.w	r3, [r4, #544]	; 0x220
			temp_y = y_buffer[i];
			maze[temp_x][temp_y] = pathdist;
		}

		if (full == FALSE) {
			if (maze[x_coord][y_coord] != 127) { //if the algorithm has reached the desired position
 8003490:	4b2c      	ldr	r3, [pc, #176]	; (8003544 <Floodfill+0x110>)
 8003492:	2701      	movs	r7, #1
				if (maze[i][j] != 127) {
					continue; //if cell has already been updated skip it
				}
				if (Get_Lowest_Square(i, j) != 127) { //if reached, add to buffer
					x_buffer[buffer_counter] = i; //x_ coordinate buffer
					y_buffer[buffer_counter] = j; //y coordinate buffer
 8003494:	f50d 7acc 	add.w	sl, sp, #408	; 0x198
			temp_y = y_buffer[i];
			maze[temp_x][temp_y] = pathdist;
		}

		if (full == FALSE) {
			if (maze[x_coord][y_coord] != 127) { //if the algorithm has reached the desired position
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	4b2b      	ldr	r3, [pc, #172]	; (8003548 <Floodfill+0x114>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	eb03 1902 	add.w	r9, r3, r2, lsl #4

	while(1) {

		buffer_counter = 0;

		for (int i = 0; i < X_MAZE_SIZE; i++) { //loop through all values to see if square has been reached
 80034a2:	2500      	movs	r5, #0
		}
	}

	while(1) {

		buffer_counter = 0;
 80034a4:	46a8      	mov	r8, r5
 80034a6:	eb04 1b85 	add.w	fp, r4, r5, lsl #6
			temp_y = y_buffer[i];
			maze[temp_x][temp_y] = pathdist;
		}

		if (full == FALSE) {
			if (maze[x_coord][y_coord] != 127) { //if the algorithm has reached the desired position
 80034aa:	2600      	movs	r6, #0

		buffer_counter = 0;

		for (int i = 0; i < X_MAZE_SIZE; i++) { //loop through all values to see if square has been reached
			for (int j = 0; j < Y_MAZE_SIZE; j++) {
				if (maze[i][j] != 127) {
 80034ac:	f85b 2026 	ldr.w	r2, [fp, r6, lsl #2]
 80034b0:	2a7f      	cmp	r2, #127	; 0x7f
 80034b2:	d10c      	bne.n	80034ce <Floodfill+0x9a>
					continue; //if cell has already been updated skip it
				}
				if (Get_Lowest_Square(i, j) != 127) { //if reached, add to buffer
 80034b4:	4631      	mov	r1, r6
 80034b6:	4628      	mov	r0, r5
 80034b8:	f7ff ff58 	bl	800336c <Get_Lowest_Square>
 80034bc:	287f      	cmp	r0, #127	; 0x7f
					x_buffer[buffer_counter] = i; //x_ coordinate buffer
 80034be:	bf1f      	itttt	ne
 80034c0:	ab02      	addne	r3, sp, #8
					y_buffer[buffer_counter] = j; //y coordinate buffer
 80034c2:	f84a 6028 	strne.w	r6, [sl, r8, lsl #2]
			for (int j = 0; j < Y_MAZE_SIZE; j++) {
				if (maze[i][j] != 127) {
					continue; //if cell has already been updated skip it
				}
				if (Get_Lowest_Square(i, j) != 127) { //if reached, add to buffer
					x_buffer[buffer_counter] = i; //x_ coordinate buffer
 80034c6:	f843 5028 	strne.w	r5, [r3, r8, lsl #2]
					y_buffer[buffer_counter] = j; //y coordinate buffer
					buffer_counter++;
 80034ca:	f108 0801 	addne.w	r8, r8, #1
	while(1) {

		buffer_counter = 0;

		for (int i = 0; i < X_MAZE_SIZE; i++) { //loop through all values to see if square has been reached
			for (int j = 0; j < Y_MAZE_SIZE; j++) {
 80034ce:	3601      	adds	r6, #1
 80034d0:	2e10      	cmp	r6, #16
 80034d2:	d1eb      	bne.n	80034ac <Floodfill+0x78>

	while(1) {

		buffer_counter = 0;

		for (int i = 0; i < X_MAZE_SIZE; i++) { //loop through all values to see if square has been reached
 80034d4:	3501      	adds	r5, #1
 80034d6:	2d10      	cmp	r5, #16
 80034d8:	d1e5      	bne.n	80034a6 <Floodfill+0x72>
 80034da:	2100      	movs	r1, #0
					buffer_counter++;
				}
			}
		}

		for (int i = 0; i < buffer_counter; i++) { //write all buffer coordinates with the path distance
 80034dc:	4588      	cmp	r8, r1
 80034de:	d00a      	beq.n	80034f6 <Floodfill+0xc2>
			temp_x = x_buffer[i];
			temp_y = y_buffer[i];
			maze[temp_x][temp_y] = pathdist;
 80034e0:	ab02      	add	r3, sp, #8
 80034e2:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 80034e6:	f85a 3021 	ldr.w	r3, [sl, r1, lsl #2]
					buffer_counter++;
				}
			}
		}

		for (int i = 0; i < buffer_counter; i++) { //write all buffer coordinates with the path distance
 80034ea:	3101      	adds	r1, #1
			temp_x = x_buffer[i];
			temp_y = y_buffer[i];
			maze[temp_x][temp_y] = pathdist;
 80034ec:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80034f0:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
 80034f4:	e7f2      	b.n	80034dc <Floodfill+0xa8>
		}

		if (full == FALSE) {
 80034f6:	9b01      	ldr	r3, [sp, #4]
 80034f8:	b913      	cbnz	r3, 8003500 <Floodfill+0xcc>
			if (maze[x_coord][y_coord] != 127) { //if the algorithm has reached the desired position
 80034fa:	f854 3029 	ldr.w	r3, [r4, r9, lsl #2]
 80034fe:	e000      	b.n	8003502 <Floodfill+0xce>
				break;
			}
		}
		else {

			if (maze[X_START][Y_START] != 127) {
 8003500:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003502:	2b7f      	cmp	r3, #127	; 0x7f
 8003504:	d113      	bne.n	800352e <Floodfill+0xfa>
				break;
			}
		}


		pathdist++;
 8003506:	3701      	adds	r7, #1

		if (pathdist > 200) { //prevent infinite loops
 8003508:	2fc9      	cmp	r7, #201	; 0xc9
 800350a:	d1ca      	bne.n	80034a2 <Floodfill+0x6e>
			stop_flag = TRUE;
 800350c:	4b0f      	ldr	r3, [pc, #60]	; (800354c <Floodfill+0x118>)
 800350e:	2201      	movs	r2, #1
#if DEBUG == TRUE
			sprintf(tx_buffer, "Floodfill Error pathdist: %d \r\n", pathdist);
 8003510:	490f      	ldr	r1, [pc, #60]	; (8003550 <Floodfill+0x11c>)


		pathdist++;

		if (pathdist > 200) { //prevent infinite loops
			stop_flag = TRUE;
 8003512:	601a      	str	r2, [r3, #0]
#if DEBUG == TRUE
			sprintf(tx_buffer, "Floodfill Error pathdist: %d \r\n", pathdist);
 8003514:	463a      	mov	r2, r7
 8003516:	480f      	ldr	r0, [pc, #60]	; (8003554 <Floodfill+0x120>)
 8003518:	f002 ff78 	bl	800640c <siprintf>
			Print_Maze();
 800351c:	f7ff fe2a 	bl	8003174 <Print_Maze>
			Transmit(tx_buffer);
 8003520:	480c      	ldr	r0, [pc, #48]	; (8003554 <Floodfill+0x120>)
			break;
		}

	}
//end algorithm while
}
 8003522:	f50d 7d4b 	add.w	sp, sp, #812	; 0x32c
 8003526:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (pathdist > 200) { //prevent infinite loops
			stop_flag = TRUE;
#if DEBUG == TRUE
			sprintf(tx_buffer, "Floodfill Error pathdist: %d \r\n", pathdist);
			Print_Maze();
			Transmit(tx_buffer);
 800352a:	f7ff bddf 	b.w	80030ec <Transmit>
			break;
		}

	}
//end algorithm while
}
 800352e:	f50d 7d4b 	add.w	sp, sp, #812	; 0x32c
 8003532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003536:	bf00      	nop
 8003538:	200014dc 	.word	0x200014dc
 800353c:	20001498 	.word	0x20001498
 8003540:	2000149c 	.word	0x2000149c
 8003544:	200001fc 	.word	0x200001fc
 8003548:	20000010 	.word	0x20000010
 800354c:	20000014 	.word	0x20000014
 8003550:	08006eff 	.word	0x08006eff
 8003554:	20001e54 	.word	0x20001e54

08003558 <Reset_Maze>:

void Reset_Maze() {
 8003558:	2300      	movs	r3, #0
	 * Resets the entire maze to blank
	 */

	for (int i = 0; i < X_MAZE_SIZE; i++) { //horizontal walls
		for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
			horiz_walls[i][j] = 0;
 800355a:	4817      	ldr	r0, [pc, #92]	; (80035b8 <Reset_Maze+0x60>)

	}
//end algorithm while
}

void Reset_Maze() {
 800355c:	b530      	push	{r4, r5, lr}
	 * Resets the entire maze to blank
	 */

	for (int i = 0; i < X_MAZE_SIZE; i++) { //horizontal walls
		for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
			horiz_walls[i][j] = 0;
 800355e:	461c      	mov	r4, r3

	}
//end algorithm while
}

void Reset_Maze() {
 8003560:	2200      	movs	r2, #0
	 * Resets the entire maze to blank
	 */

	for (int i = 0; i < X_MAZE_SIZE; i++) { //horizontal walls
		for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
			horiz_walls[i][j] = 0;
 8003562:	18c1      	adds	r1, r0, r3
 8003564:	548c      	strb	r4, [r1, r2]
	/*
	 * Resets the entire maze to blank
	 */

	for (int i = 0; i < X_MAZE_SIZE; i++) { //horizontal walls
		for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
 8003566:	3201      	adds	r2, #1
 8003568:	2a0f      	cmp	r2, #15
 800356a:	d1fb      	bne.n	8003564 <Reset_Maze+0xc>
 800356c:	330f      	adds	r3, #15
void Reset_Maze() {
	/*
	 * Resets the entire maze to blank
	 */

	for (int i = 0; i < X_MAZE_SIZE; i++) { //horizontal walls
 800356e:	2bf0      	cmp	r3, #240	; 0xf0
 8003570:	d1f6      	bne.n	8003560 <Reset_Maze+0x8>
 8003572:	2300      	movs	r3, #0
		}
	}

	for (int i = 0; i < X_MAZE_SIZE - 1; i++) { //vertical walls
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
			vert_walls[i][j] = 0;
 8003574:	4811      	ldr	r0, [pc, #68]	; (80035bc <Reset_Maze+0x64>)
 8003576:	461c      	mov	r4, r3

	}
//end algorithm while
}

void Reset_Maze() {
 8003578:	2200      	movs	r2, #0
		}
	}

	for (int i = 0; i < X_MAZE_SIZE - 1; i++) { //vertical walls
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
			vert_walls[i][j] = 0;
 800357a:	18c1      	adds	r1, r0, r3
 800357c:	548c      	strb	r4, [r1, r2]
			horiz_walls[i][j] = 0;
		}
	}

	for (int i = 0; i < X_MAZE_SIZE - 1; i++) { //vertical walls
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
 800357e:	3201      	adds	r2, #1
 8003580:	2a10      	cmp	r2, #16
 8003582:	d1fb      	bne.n	800357c <Reset_Maze+0x24>
 8003584:	3310      	adds	r3, #16
		for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
			horiz_walls[i][j] = 0;
		}
	}

	for (int i = 0; i < X_MAZE_SIZE - 1; i++) { //vertical walls
 8003586:	2bf0      	cmp	r3, #240	; 0xf0
 8003588:	d1f6      	bne.n	8003578 <Reset_Maze+0x20>
 800358a:	2300      	movs	r3, #0
		}
	}

	for (int i = 0; i < X_MAZE_SIZE; i++) { //set all squares to be unvisited
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
			visited_squares[i][j] = FALSE;
 800358c:	4c0c      	ldr	r4, [pc, #48]	; (80035c0 <Reset_Maze+0x68>)
 800358e:	461d      	mov	r5, r3
 8003590:	2200      	movs	r2, #0
 8003592:	1918      	adds	r0, r3, r4
 8003594:	f840 5022 	str.w	r5, [r0, r2, lsl #2]
			vert_walls[i][j] = 0;
		}
	}

	for (int i = 0; i < X_MAZE_SIZE; i++) { //set all squares to be unvisited
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
 8003598:	3201      	adds	r2, #1
			visited_squares[i][j] = FALSE;
 800359a:	2100      	movs	r1, #0
			vert_walls[i][j] = 0;
		}
	}

	for (int i = 0; i < X_MAZE_SIZE; i++) { //set all squares to be unvisited
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
 800359c:	2a10      	cmp	r2, #16
 800359e:	d1f9      	bne.n	8003594 <Reset_Maze+0x3c>
 80035a0:	3340      	adds	r3, #64	; 0x40
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
			vert_walls[i][j] = 0;
		}
	}

	for (int i = 0; i < X_MAZE_SIZE; i++) { //set all squares to be unvisited
 80035a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a6:	d1f3      	bne.n	8003590 <Reset_Maze+0x38>
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
			visited_squares[i][j] = FALSE;
		}
	}

	final_x = 0;
 80035a8:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <Reset_Maze+0x6c>)
 80035aa:	6019      	str	r1, [r3, #0]
	final_y = 0;
 80035ac:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <Reset_Maze+0x70>)
 80035ae:	6019      	str	r1, [r3, #0]
	final_dir = 0;
 80035b0:	4b06      	ldr	r3, [pc, #24]	; (80035cc <Reset_Maze+0x74>)
 80035b2:	6019      	str	r1, [r3, #0]
 80035b4:	bd30      	pop	{r4, r5, pc}
 80035b6:	bf00      	nop
 80035b8:	200000c4 	.word	0x200000c4
 80035bc:	20000218 	.word	0x20000218
 80035c0:	20002504 	.word	0x20002504
 80035c4:	200001bc 	.word	0x200001bc
 80035c8:	200001c0 	.word	0x200001c0
 80035cc:	20000208 	.word	0x20000208

080035d0 <Switch_Direction>:
void Switch_Direction() {
	/*
	 * used at dead end to switch the direction of the mouse
	 */

	switch (cur_dir) {
 80035d0:	4b08      	ldr	r3, [pc, #32]	; (80035f4 <Switch_Direction+0x24>)
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	2a03      	cmp	r2, #3
 80035d6:	d80b      	bhi.n	80035f0 <Switch_Direction+0x20>
 80035d8:	e8df f002 	tbb	[pc, r2]
 80035dc:	08060402 	.word	0x08060402

	case NORTH: cur_dir = SOUTH; break; //update the direction that the mouse is pointing
 80035e0:	2201      	movs	r2, #1
 80035e2:	e004      	b.n	80035ee <Switch_Direction+0x1e>
	case SOUTH: cur_dir = NORTH; break;
 80035e4:	2200      	movs	r2, #0
 80035e6:	e002      	b.n	80035ee <Switch_Direction+0x1e>
	case WEST: cur_dir = EAST; break;
 80035e8:	2203      	movs	r2, #3
 80035ea:	e000      	b.n	80035ee <Switch_Direction+0x1e>
	case EAST: cur_dir = WEST; break;
 80035ec:	2202      	movs	r2, #2
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	20001344 	.word	0x20001344

080035f8 <Update_Position>:
	}
}


void Update_Position() { //
 80035f8:	b5f0      	push	{r4, r5, r6, r7, lr}

	/*
	 * updates position and direction after the next move has been calculate. Run after next move is calculated
	 */

	visited_squares[x_coord][y_coord] = TRUE; //set previous value to be visited
 80035fa:	4c54      	ldr	r4, [pc, #336]	; (800374c <Update_Position+0x154>)
 80035fc:	2601      	movs	r6, #1
 80035fe:	4d54      	ldr	r5, [pc, #336]	; (8003750 <Update_Position+0x158>)
	case EAST: cur_dir = WEST; break;
	}
}


void Update_Position() { //
 8003600:	b085      	sub	sp, #20

	/*
	 * updates position and direction after the next move has been calculate. Run after next move is calculated
	 */

	visited_squares[x_coord][y_coord] = TRUE; //set previous value to be visited
 8003602:	6822      	ldr	r2, [r4, #0]
 8003604:	682b      	ldr	r3, [r5, #0]
 8003606:	4953      	ldr	r1, [pc, #332]	; (8003754 <Update_Position+0x15c>)
 8003608:	eb03 1002 	add.w	r0, r3, r2, lsl #4

	if (next_move != DEAD) {
 800360c:	4f52      	ldr	r7, [pc, #328]	; (8003758 <Update_Position+0x160>)

	/*
	 * updates position and direction after the next move has been calculate. Run after next move is calculated
	 */

	visited_squares[x_coord][y_coord] = TRUE; //set previous value to be visited
 800360e:	f841 6020 	str.w	r6, [r1, r0, lsl #2]

	if (next_move != DEAD) {
 8003612:	6839      	ldr	r1, [r7, #0]
		prevx = x_coord; //save previous values. Used for dead end
		prevy = y_coord;
	}

	switch (cur_dir) { //update position based on direction and next move calculate by floodfill
 8003614:	4e51      	ldr	r6, [pc, #324]	; (800375c <Update_Position+0x164>)
	 * updates position and direction after the next move has been calculate. Run after next move is calculated
	 */

	visited_squares[x_coord][y_coord] = TRUE; //set previous value to be visited

	if (next_move != DEAD) {
 8003616:	2903      	cmp	r1, #3
		prevx = x_coord; //save previous values. Used for dead end
 8003618:	bf1f      	itttt	ne
 800361a:	4851      	ldrne	r0, [pc, #324]	; (8003760 <Update_Position+0x168>)
 800361c:	6002      	strne	r2, [r0, #0]
		prevy = y_coord;
 800361e:	4851      	ldrne	r0, [pc, #324]	; (8003764 <Update_Position+0x16c>)
 8003620:	6003      	strne	r3, [r0, #0]
	}

	switch (cur_dir) { //update position based on direction and next move calculate by floodfill
 8003622:	6830      	ldr	r0, [r6, #0]
 8003624:	2803      	cmp	r0, #3
 8003626:	d84c      	bhi.n	80036c2 <Update_Position+0xca>
 8003628:	e8df f000 	tbb	[pc, r0]
 800362c:	31231002 	.word	0x31231002
		case NORTH: //facing top of maze
			switch(next_move) {
 8003630:	2906      	cmp	r1, #6
 8003632:	d846      	bhi.n	80036c2 <Update_Position+0xca>
 8003634:	e8df f001 	tbb	[pc, r1]
 8003638:	45331504 	.word	0x45331504
 800363c:	4545      	.short	0x4545
 800363e:	06          	.byte	0x06
 800363f:	00          	.byte	0x00
				case FWD:
					x_coord = x_coord + NORTH_X;
					y_coord = y_coord + NORTH_Y;
 8003640:	3b01      	subs	r3, #1
 8003642:	e00c      	b.n	800365e <Update_Position+0x66>
					y_coord = y_coord + EAST_Y;
					cur_dir = EAST;
					break;
				case FWD_SPEED:
					x_coord = x_coord + fwd_number*NORTH_X;
					y_coord = y_coord + fwd_number*NORTH_Y;
 8003644:	4a48      	ldr	r2, [pc, #288]	; (8003768 <Update_Position+0x170>)
 8003646:	6812      	ldr	r2, [r2, #0]
 8003648:	1a9b      	subs	r3, r3, r2
 800364a:	e008      	b.n	800365e <Update_Position+0x66>
					break;
			}
		break;

		case SOUTH: //facing bottom of maze
			switch(next_move) {
 800364c:	2906      	cmp	r1, #6
 800364e:	d838      	bhi.n	80036c2 <Update_Position+0xca>
 8003650:	e8df f001 	tbb	[pc, r1]
 8003654:	37072504 	.word	0x37072504
 8003658:	3737      	.short	0x3737
 800365a:	0b          	.byte	0x0b
 800365b:	00          	.byte	0x00
				case FWD:
					x_coord = x_coord + SOUTH_X;
					y_coord = y_coord + SOUTH_Y;
 800365c:	3301      	adds	r3, #1
 800365e:	602b      	str	r3, [r5, #0]
					break;
 8003660:	e041      	b.n	80036e6 <Update_Position+0xee>
					x_coord = x_coord + EAST_X;
					y_coord = y_coord + EAST_Y;
					cur_dir = EAST;
					break;
				case RIGHT:
					x_coord = x_coord + WEST_X;
 8003662:	3a01      	subs	r2, #1
					y_coord = y_coord + WEST_Y;
					cur_dir = WEST;
 8003664:	2302      	movs	r3, #2
					x_coord = x_coord + EAST_X;
					y_coord = y_coord + EAST_Y;
					cur_dir = EAST;
					break;
				case RIGHT:
					x_coord = x_coord + WEST_X;
 8003666:	6022      	str	r2, [r4, #0]
 8003668:	e020      	b.n	80036ac <Update_Position+0xb4>
					y_coord = y_coord + WEST_Y;
					cur_dir = WEST;
					break;
				case FWD_SPEED:
					x_coord = x_coord + fwd_number*SOUTH_X;
					y_coord = y_coord + fwd_number*SOUTH_Y;
 800366a:	4a3f      	ldr	r2, [pc, #252]	; (8003768 <Update_Position+0x170>)
 800366c:	6812      	ldr	r2, [r2, #0]
 800366e:	4413      	add	r3, r2
 8003670:	e7f5      	b.n	800365e <Update_Position+0x66>
					break;
			}
		break;

		case WEST: //facing left side of maze
			switch(next_move) {
 8003672:	2906      	cmp	r1, #6
 8003674:	d825      	bhi.n	80036c2 <Update_Position+0xca>
 8003676:	e8df f001 	tbb	[pc, r1]
 800367a:	1b04      	.short	0x1b04
 800367c:	24242416 	.word	0x24242416
 8003680:	06          	.byte	0x06
 8003681:	00          	.byte	0x00
				case FWD:
					x_coord = x_coord + WEST_X;
 8003682:	3a01      	subs	r2, #1
 8003684:	e01b      	b.n	80036be <Update_Position+0xc6>
					x_coord = x_coord + NORTH_X;
					y_coord = y_coord + NORTH_Y;
					cur_dir = NORTH;
					break;
				case FWD_SPEED:
					x_coord = x_coord + fwd_number*WEST_X;
 8003686:	4b38      	ldr	r3, [pc, #224]	; (8003768 <Update_Position+0x170>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	1ad2      	subs	r2, r2, r3
 800368c:	e017      	b.n	80036be <Update_Position+0xc6>
					break;
			}
		break;

		case EAST: //facing right side of maze
			switch(next_move) {
 800368e:	2906      	cmp	r1, #6
 8003690:	d817      	bhi.n	80036c2 <Update_Position+0xca>
 8003692:	e8df f001 	tbb	[pc, r1]
 8003696:	0804      	.short	0x0804
 8003698:	1616160d 	.word	0x1616160d
 800369c:	11          	.byte	0x11
 800369d:	00          	.byte	0x00
				case FWD:
					x_coord = x_coord + EAST_X;
 800369e:	3201      	adds	r2, #1
					y_coord = y_coord + EAST_Y;
					cur_dir = EAST;
 80036a0:	2303      	movs	r3, #3
		break;

		case EAST: //facing right side of maze
			switch(next_move) {
				case FWD:
					x_coord = x_coord + EAST_X;
 80036a2:	6022      	str	r2, [r4, #0]
 80036a4:	e002      	b.n	80036ac <Update_Position+0xb4>
					y_coord = y_coord + EAST_Y;
					cur_dir = EAST;
					break;
				case LEFT:
					x_coord = x_coord + NORTH_X;
					y_coord = y_coord + NORTH_Y;
 80036a6:	3b01      	subs	r3, #1
 80036a8:	602b      	str	r3, [r5, #0]
					cur_dir = NORTH;
 80036aa:	2300      	movs	r3, #0
 80036ac:	6033      	str	r3, [r6, #0]
					break;
 80036ae:	e01a      	b.n	80036e6 <Update_Position+0xee>
				case RIGHT:
					x_coord = x_coord + SOUTH_X;
					y_coord = y_coord + SOUTH_Y;
 80036b0:	3301      	adds	r3, #1
 80036b2:	602b      	str	r3, [r5, #0]
					cur_dir = SOUTH;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e7f9      	b.n	80036ac <Update_Position+0xb4>
					break;
				case FWD_SPEED:
					x_coord = x_coord + fwd_number*EAST_X;
 80036b8:	4b2b      	ldr	r3, [pc, #172]	; (8003768 <Update_Position+0x170>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	441a      	add	r2, r3
 80036be:	6022      	str	r2, [r4, #0]
					y_coord = y_coord + fwd_number*EAST_Y;
					break;
 80036c0:	e011      	b.n	80036e6 <Update_Position+0xee>
			}
		break;
	}

	if (next_move == DEAD) { //announce dead ends. Set position to old value
 80036c2:	2903      	cmp	r1, #3
 80036c4:	d10f      	bne.n	80036e6 <Update_Position+0xee>
#if DEBUG == TRUE
		sprintf(tx_buffer, "|||DEAD END||| X VALUE: %d  Y VALUE: %d \r\n", x_coord, y_coord);
 80036c6:	4929      	ldr	r1, [pc, #164]	; (800376c <Update_Position+0x174>)
 80036c8:	4829      	ldr	r0, [pc, #164]	; (8003770 <Update_Position+0x178>)
 80036ca:	f002 fe9f 	bl	800640c <siprintf>
		Transmit(tx_buffer);
 80036ce:	4828      	ldr	r0, [pc, #160]	; (8003770 <Update_Position+0x178>)
 80036d0:	f7ff fd0c 	bl	80030ec <Transmit>
#endif
		Switch_Direction();
 80036d4:	f7ff ff7c 	bl	80035d0 <Switch_Direction>
		x_coord = prevx;
 80036d8:	4b21      	ldr	r3, [pc, #132]	; (8003760 <Update_Position+0x168>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6023      	str	r3, [r4, #0]
		y_coord = prevy;
 80036de:	4b21      	ldr	r3, [pc, #132]	; (8003764 <Update_Position+0x16c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	602b      	str	r3, [r5, #0]
		return;
 80036e4:	e030      	b.n	8003748 <Update_Position+0x150>
	}

	if (maze[x_coord][y_coord] == 0) { //reached target square
 80036e6:	6822      	ldr	r2, [r4, #0]
 80036e8:	682b      	ldr	r3, [r5, #0]
 80036ea:	4922      	ldr	r1, [pc, #136]	; (8003774 <Update_Position+0x17c>)
 80036ec:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 80036f0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80036f4:	b931      	cbnz	r1, 8003704 <Update_Position+0x10c>
		if (search_flag == FALSE) { //reached center
 80036f6:	4b20      	ldr	r3, [pc, #128]	; (8003778 <Update_Position+0x180>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	bb2b      	cbnz	r3, 8003748 <Update_Position+0x150>
			done_flag = TRUE; //tell loop to stop
 80036fc:	2201      	movs	r2, #1
 80036fe:	4b1f      	ldr	r3, [pc, #124]	; (800377c <Update_Position+0x184>)
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	e021      	b.n	8003748 <Update_Position+0x150>
#endif
		//visited_squares[x_coord][y_coord] = TRUE;
		return;
	}

	else if (x_coord < 0 || y_coord < 0 || x_coord >= X_MAZE_SIZE || y_coord >= Y_MAZE_SIZE) {
 8003704:	2a0f      	cmp	r2, #15
 8003706:	d801      	bhi.n	800370c <Update_Position+0x114>
 8003708:	2b0f      	cmp	r3, #15
 800370a:	d909      	bls.n	8003720 <Update_Position+0x128>
		stop_flag = TRUE; //if position is out of maze, stop mouse
 800370c:	2001      	movs	r0, #1
 800370e:	491c      	ldr	r1, [pc, #112]	; (8003780 <Update_Position+0x188>)
 8003710:	6008      	str	r0, [r1, #0]
#if DEBUG == TRUE
		sprintf(tx_buffer, "Position out of Boundary! X VALUE: %d  Y VALUE %d  \r\n", x_coord, y_coord);
 8003712:	491c      	ldr	r1, [pc, #112]	; (8003784 <Update_Position+0x18c>)
 8003714:	4816      	ldr	r0, [pc, #88]	; (8003770 <Update_Position+0x178>)
 8003716:	f002 fe79 	bl	800640c <siprintf>
		Transmit(tx_buffer);
 800371a:	4815      	ldr	r0, [pc, #84]	; (8003770 <Update_Position+0x178>)
 800371c:	f7ff fce6 	bl	80030ec <Transmit>
#endif
	}
#if DEBUG == TRUE  //announce new position
sprintf(tx_buffer, "|||DECISION  %d||| X VALUE: %d  Y VALUE: %d  DIRECTION: %d  NEXT: %d \r\n", dbg_count + 1, x_coord, y_coord, cur_dir, next_move);
 8003720:	4b19      	ldr	r3, [pc, #100]	; (8003788 <Update_Position+0x190>)
 8003722:	491a      	ldr	r1, [pc, #104]	; (800378c <Update_Position+0x194>)
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	3201      	adds	r2, #1
 800372a:	4811      	ldr	r0, [pc, #68]	; (8003770 <Update_Position+0x178>)
 800372c:	9302      	str	r3, [sp, #8]
 800372e:	6833      	ldr	r3, [r6, #0]
 8003730:	9301      	str	r3, [sp, #4]
 8003732:	682b      	ldr	r3, [r5, #0]
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	6823      	ldr	r3, [r4, #0]
 8003738:	f002 fe68 	bl	800640c <siprintf>
Transmit(tx_buffer);
 800373c:	480c      	ldr	r0, [pc, #48]	; (8003770 <Update_Position+0x178>)
#endif

}
 800373e:	b005      	add	sp, #20
 8003740:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		Transmit(tx_buffer);
#endif
	}
#if DEBUG == TRUE  //announce new position
sprintf(tx_buffer, "|||DECISION  %d||| X VALUE: %d  Y VALUE: %d  DIRECTION: %d  NEXT: %d \r\n", dbg_count + 1, x_coord, y_coord, cur_dir, next_move);
Transmit(tx_buffer);
 8003744:	f7ff bcd2 	b.w	80030ec <Transmit>
#endif

}
 8003748:	b005      	add	sp, #20
 800374a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800374c:	200001fc 	.word	0x200001fc
 8003750:	20000010 	.word	0x20000010
 8003754:	20002504 	.word	0x20002504
 8003758:	20000b60 	.word	0x20000b60
 800375c:	20001344 	.word	0x20001344
 8003760:	200001f4 	.word	0x200001f4
 8003764:	200001f8 	.word	0x200001f8
 8003768:	200000b8 	.word	0x200000b8
 800376c:	08006f1f 	.word	0x08006f1f
 8003770:	20001e54 	.word	0x20001e54
 8003774:	200014dc 	.word	0x200014dc
 8003778:	20000b58 	.word	0x20000b58
 800377c:	2000031c 	.word	0x2000031c
 8003780:	20000014 	.word	0x20000014
 8003784:	08006f4a 	.word	0x08006f4a
 8003788:	200000ac 	.word	0x200000ac
 800378c:	08006f80 	.word	0x08006f80

08003790 <Calc_Optimal>:
	int counter = 0; //counter for counting the number of squares

	int x = X_START; //initialize cursor to start square
	int y = Y_START;

	Floodfill(FALSE, FALSE, TRUE);  //floodfill from final value to start value
 8003790:	2100      	movs	r1, #0
 8003792:	2201      	movs	r2, #1
	}
	//HAL_TIM_Base_Stop(&htim5);

}

void Calc_Optimal() { //calculate optimal path based on known walls
 8003794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int counter = 0; //counter for counting the number of squares

	int x = X_START; //initialize cursor to start square
	int y = Y_START;

	Floodfill(FALSE, FALSE, TRUE);  //floodfill from final value to start value
 8003798:	4608      	mov	r0, r1
	}
	//HAL_TIM_Base_Stop(&htim5);

}

void Calc_Optimal() { //calculate optimal path based on known walls
 800379a:	b089      	sub	sp, #36	; 0x24
	int counter = 0; //counter for counting the number of squares

	int x = X_START; //initialize cursor to start square
	int y = Y_START;

	Floodfill(FALSE, FALSE, TRUE);  //floodfill from final value to start value
 800379c:	f7ff fe4a 	bl	8003434 <Floodfill>

	int val = maze[x][y]; //get start maze value
	int next_values[4] = {-1, -1, -1, -1}; //array to hold the next values {up, down , left, right}
 80037a0:	4b6e      	ldr	r3, [pc, #440]	; (800395c <Calc_Optimal+0x1cc>)
 80037a2:	ac04      	add	r4, sp, #16
	//int temp_index[3] = {-1,  -1,  -1}; //array to hold next values, if there's a choice
	//int temp_counter = 0;
	int index = 0;

	optimal_x[counter] = x; //optimal path buffers
	optimal_y[counter] = y;
 80037a4:	4e6e      	ldr	r6, [pc, #440]	; (8003960 <Calc_Optimal+0x1d0>)
	int next_values[4] = {-1, -1, -1, -1}; //array to hold the next values {up, down , left, right}
	//int temp_index[3] = {-1,  -1,  -1}; //array to hold next values, if there's a choice
	//int temp_counter = 0;
	int index = 0;

	optimal_x[counter] = x; //optimal path buffers
 80037a6:	4f6f      	ldr	r7, [pc, #444]	; (8003964 <Calc_Optimal+0x1d4>)
	optimal_y[counter] = y;

	while(maze[x][y] != 0) {

		next_values[0] = 127;
 80037a8:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
 80037ac:	9603      	str	r6, [sp, #12]
			case(0):
					optimal_path[counter] = RIGH;
					cur_dir = NORTH;
			break;
			case(1):
					optimal_path[counter] = LEF;
 80037ae:	f04f 0c6c 	mov.w	ip, #108	; 0x6c
					cur_dir = SOUTH;
			break;
			case(2):
					optimal_path[counter] = FOR;
 80037b2:	f04f 0866 	mov.w	r8, #102	; 0x66
 80037b6:	9702      	str	r7, [sp, #8]
	int y = Y_START;

	Floodfill(FALSE, FALSE, TRUE);  //floodfill from final value to start value

	int val = maze[x][y]; //get start maze value
	int next_values[4] = {-1, -1, -1, -1}; //array to hold the next values {up, down , left, right}
 80037b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//int temp_index[3] = {-1,  -1,  -1}; //array to hold next values, if there's a choice
	//int temp_counter = 0;
	int index = 0;

	optimal_x[counter] = x; //optimal path buffers
 80037be:	2300      	movs	r3, #0
	optimal_y[counter] = y;
 80037c0:	220f      	movs	r2, #15
 80037c2:	4969      	ldr	r1, [pc, #420]	; (8003968 <Calc_Optimal+0x1d8>)
 80037c4:	6032      	str	r2, [r6, #0]
	const int E[2] = {1, 0};

	int cur_dir = START_DIR; //start direction
	int counter = 0; //counter for counting the number of squares

	int x = X_START; //initialize cursor to start square
 80037c6:	4618      	mov	r0, r3
	const int S[2] = {0, 1};
	const int W[2] = {-1, 0};
	const int E[2] = {1, 0};

	int cur_dir = START_DIR; //start direction
	int counter = 0; //counter for counting the number of squares
 80037c8:	461d      	mov	r5, r3
	const int N[2] = {0, -1}; //directions in maze
	const int S[2] = {0, 1};
	const int W[2] = {-1, 0};
	const int E[2] = {1, 0};

	int cur_dir = START_DIR; //start direction
 80037ca:	461c      	mov	r4, r3
	int index = 0;

	optimal_x[counter] = x; //optimal path buffers
	optimal_y[counter] = y;

	while(maze[x][y] != 0) {
 80037cc:	4e67      	ldr	r6, [pc, #412]	; (800396c <Calc_Optimal+0x1dc>)
	int next_values[4] = {-1, -1, -1, -1}; //array to hold the next values {up, down , left, right}
	//int temp_index[3] = {-1,  -1,  -1}; //array to hold next values, if there's a choice
	//int temp_counter = 0;
	int index = 0;

	optimal_x[counter] = x; //optimal path buffers
 80037ce:	603b      	str	r3, [r7, #0]
	optimal_y[counter] = y;

	while(maze[x][y] != 0) {
 80037d0:	ea4f 1a00 	mov.w	sl, r0, lsl #4
 80037d4:	eb0a 0702 	add.w	r7, sl, r2
 80037d8:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 80037dc:	9701      	str	r7, [sp, #4]
 80037de:	2f00      	cmp	r7, #0
 80037e0:	f000 80a0 	beq.w	8003924 <Calc_Optimal+0x194>
		next_values[2] = 127;
		next_values[3] = 127;

		val = maze[x][y];

		if (y > 0 && horiz_walls[x][y-1] != TRUE) { //if row is greater than zero
 80037e4:	2a00      	cmp	r2, #0
	optimal_x[counter] = x; //optimal path buffers
	optimal_y[counter] = y;

	while(maze[x][y] != 0) {

		next_values[0] = 127;
 80037e6:	f8cd e010 	str.w	lr, [sp, #16]
		next_values[1] = 127;
 80037ea:	f8cd e014 	str.w	lr, [sp, #20]
		next_values[2] = 127;
 80037ee:	f8cd e018 	str.w	lr, [sp, #24]
		next_values[3] = 127;
 80037f2:	f8cd e01c 	str.w	lr, [sp, #28]

		val = maze[x][y];

		if (y > 0 && horiz_walls[x][y-1] != TRUE) { //if row is greater than zero
 80037f6:	dc11      	bgt.n	800381c <Calc_Optimal+0x8c>
			next_values[0] = maze[x][y-1]; //up square
		}

		if (y < Y_MAZE_SIZE - 1 && horiz_walls[x][y] != TRUE) {
 80037f8:	ea4f 1a00 	mov.w	sl, r0, lsl #4
 80037fc:	4f5c      	ldr	r7, [pc, #368]	; (8003970 <Calc_Optimal+0x1e0>)
 80037fe:	ebc0 090a 	rsb	r9, r0, sl
 8003802:	44b9      	add	r9, r7
 8003804:	f819 9002 	ldrb.w	r9, [r9, r2]
 8003808:	f1b9 0f01 	cmp.w	r9, #1
 800380c:	d017      	beq.n	800383e <Calc_Optimal+0xae>
			next_values[1] = maze[x][y+1]; //down square
 800380e:	f102 0901 	add.w	r9, r2, #1
 8003812:	44d1      	add	r9, sl
 8003814:	f856 7029 	ldr.w	r7, [r6, r9, lsl #2]
 8003818:	9705      	str	r7, [sp, #20]
 800381a:	e010      	b.n	800383e <Calc_Optimal+0xae>
		next_values[2] = 127;
		next_values[3] = 127;

		val = maze[x][y];

		if (y > 0 && horiz_walls[x][y-1] != TRUE) { //if row is greater than zero
 800381c:	4f54      	ldr	r7, [pc, #336]	; (8003970 <Calc_Optimal+0x1e0>)
 800381e:	ebc0 0b0a 	rsb	fp, r0, sl
 8003822:	f102 39ff 	add.w	r9, r2, #4294967295
 8003826:	44bb      	add	fp, r7
 8003828:	f81b b009 	ldrb.w	fp, [fp, r9]
 800382c:	f1bb 0f01 	cmp.w	fp, #1
			next_values[0] = maze[x][y-1]; //up square
 8003830:	bf1e      	ittt	ne
 8003832:	44d1      	addne	r9, sl
 8003834:	f856 7029 	ldrne.w	r7, [r6, r9, lsl #2]
 8003838:	9704      	strne	r7, [sp, #16]
		}

		if (y < Y_MAZE_SIZE - 1 && horiz_walls[x][y] != TRUE) {
 800383a:	2a0e      	cmp	r2, #14
 800383c:	dddc      	ble.n	80037f8 <Calc_Optimal+0x68>
			next_values[1] = maze[x][y+1]; //down square
		}

		if (x > 0 && vert_walls[x - 1][y] != TRUE) {
 800383e:	2800      	cmp	r0, #0
 8003840:	dc0f      	bgt.n	8003862 <Calc_Optimal+0xd2>
			next_values[2] = maze[x - 1][y]; //left square
		}

		if (x < X_MAZE_SIZE - 1 && vert_walls[x][y] != TRUE) {
 8003842:	4f4c      	ldr	r7, [pc, #304]	; (8003974 <Calc_Optimal+0x1e4>)
 8003844:	eb07 1900 	add.w	r9, r7, r0, lsl #4
 8003848:	f819 9002 	ldrb.w	r9, [r9, r2]
 800384c:	f1b9 0f01 	cmp.w	r9, #1
 8003850:	d019      	beq.n	8003886 <Calc_Optimal+0xf6>
			next_values[3] = maze[x+1][y]; //right square
 8003852:	f100 0901 	add.w	r9, r0, #1
 8003856:	eb02 1909 	add.w	r9, r2, r9, lsl #4
 800385a:	f856 7029 	ldr.w	r7, [r6, r9, lsl #2]
 800385e:	9707      	str	r7, [sp, #28]
 8003860:	e011      	b.n	8003886 <Calc_Optimal+0xf6>

		if (y < Y_MAZE_SIZE - 1 && horiz_walls[x][y] != TRUE) {
			next_values[1] = maze[x][y+1]; //down square
		}

		if (x > 0 && vert_walls[x - 1][y] != TRUE) {
 8003862:	f100 39ff 	add.w	r9, r0, #4294967295
 8003866:	4f43      	ldr	r7, [pc, #268]	; (8003974 <Calc_Optimal+0x1e4>)
 8003868:	ea4f 1909 	mov.w	r9, r9, lsl #4
 800386c:	eb07 0a09 	add.w	sl, r7, r9
 8003870:	f81a a002 	ldrb.w	sl, [sl, r2]
 8003874:	f1ba 0f01 	cmp.w	sl, #1
			next_values[2] = maze[x - 1][y]; //left square
 8003878:	bf1e      	ittt	ne
 800387a:	4491      	addne	r9, r2
 800387c:	f856 7029 	ldrne.w	r7, [r6, r9, lsl #2]
 8003880:	9706      	strne	r7, [sp, #24]
		}

		if (x < X_MAZE_SIZE - 1 && vert_walls[x][y] != TRUE) {
 8003882:	280e      	cmp	r0, #14
 8003884:	dddd      	ble.n	8003842 <Calc_Optimal+0xb2>
			next_values[3] = maze[x+1][y]; //right square
		}

		for (int i = 0; i < 4; i++) { //need to modify to favor straight lines
			if (next_values[i] == val - 1) {
 8003886:	9f01      	ldr	r7, [sp, #4]

		if (x < X_MAZE_SIZE - 1 && vert_walls[x][y] != TRUE) {
			next_values[3] = maze[x+1][y]; //right square
		}

		for (int i = 0; i < 4; i++) { //need to modify to favor straight lines
 8003888:	f04f 0900 	mov.w	r9, #0
			if (next_values[i] == val - 1) {
 800388c:	f107 3aff 	add.w	sl, r7, #4294967295
 8003890:	af04      	add	r7, sp, #16
 8003892:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
 8003896:	4557      	cmp	r7, sl
 8003898:	bf08      	it	eq
 800389a:	464b      	moveq	r3, r9

		if (x < X_MAZE_SIZE - 1 && vert_walls[x][y] != TRUE) {
			next_values[3] = maze[x+1][y]; //right square
		}

		for (int i = 0; i < 4; i++) { //need to modify to favor straight lines
 800389c:	f109 0901 	add.w	r9, r9, #1
 80038a0:	f1b9 0f04 	cmp.w	r9, #4
 80038a4:	d1f4      	bne.n	8003890 <Calc_Optimal+0x100>
			}
			break;
		}
		*/

		switch (cur_dir) {
 80038a6:	2c02      	cmp	r4, #2
 80038a8:	d020      	beq.n	80038ec <Calc_Optimal+0x15c>
 80038aa:	2c03      	cmp	r4, #3
 80038ac:	d02c      	beq.n	8003908 <Calc_Optimal+0x178>
 80038ae:	2c01      	cmp	r4, #1
 80038b0:	d00d      	beq.n	80038ce <Calc_Optimal+0x13e>

		case NORTH:
			switch(index) {
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d005      	beq.n	80038c2 <Calc_Optimal+0x132>
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d006      	beq.n	80038c8 <Calc_Optimal+0x138>
 80038ba:	bbdb      	cbnz	r3, 8003934 <Calc_Optimal+0x1a4>
			case(0):
				optimal_path[counter] = FOR;
 80038bc:	f881 8000 	strb.w	r8, [r1]
			break;
 80038c0:	e038      	b.n	8003934 <Calc_Optimal+0x1a4>
			case(1):
			//NO
			break;
			case(2):
				optimal_path[counter] = LEF;
 80038c2:	f881 c000 	strb.w	ip, [r1]
				cur_dir = WEST;
			break;
 80038c6:	e043      	b.n	8003950 <Calc_Optimal+0x1c0>
			case(3):
					optimal_path[counter] = RIGH;
 80038c8:	2472      	movs	r4, #114	; 0x72
 80038ca:	700c      	strb	r4, [r1, #0]
					cur_dir = EAST;
			break;
 80038cc:	e043      	b.n	8003956 <Calc_Optimal+0x1c6>
			}
		break;

		case SOUTH:
			switch(index) {
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d006      	beq.n	80038e0 <Calc_Optimal+0x150>
 80038d2:	2b03      	cmp	r3, #3
 80038d4:	d007      	beq.n	80038e6 <Calc_Optimal+0x156>
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d137      	bne.n	800394a <Calc_Optimal+0x1ba>
			case(0):
					//NO
			break;
			case(1):
					optimal_path[counter] = FOR;
 80038da:	f881 8000 	strb.w	r8, [r1]
			break;
 80038de:	e034      	b.n	800394a <Calc_Optimal+0x1ba>
			case(2):
					optimal_path[counter] = RIGH;
 80038e0:	2472      	movs	r4, #114	; 0x72
 80038e2:	700c      	strb	r4, [r1, #0]
					cur_dir = WEST;
			break;
 80038e4:	e034      	b.n	8003950 <Calc_Optimal+0x1c0>
			case(3):
					optimal_path[counter] = LEF;
 80038e6:	f881 c000 	strb.w	ip, [r1]
					cur_dir = EAST;
			break;
 80038ea:	e034      	b.n	8003956 <Calc_Optimal+0x1c6>
			}
		break;

		case WEST:
			switch(index) {
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d005      	beq.n	80038fc <Calc_Optimal+0x16c>
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d006      	beq.n	8003902 <Calc_Optimal+0x172>
 80038f4:	bb63      	cbnz	r3, 8003950 <Calc_Optimal+0x1c0>
			case(0):
					optimal_path[counter] = RIGH;
 80038f6:	2472      	movs	r4, #114	; 0x72
 80038f8:	700c      	strb	r4, [r1, #0]
					cur_dir = NORTH;
			break;
 80038fa:	e01b      	b.n	8003934 <Calc_Optimal+0x1a4>
			case(1):
					optimal_path[counter] = LEF;
 80038fc:	f881 c000 	strb.w	ip, [r1]
					cur_dir = SOUTH;
			break;
 8003900:	e023      	b.n	800394a <Calc_Optimal+0x1ba>
			case(2):
					optimal_path[counter] = FOR;
 8003902:	f881 8000 	strb.w	r8, [r1]
			break;
 8003906:	e023      	b.n	8003950 <Calc_Optimal+0x1c0>
			break;
			}
		break;

		case EAST:
			switch(index) {
 8003908:	2b01      	cmp	r3, #1
 800390a:	d005      	beq.n	8003918 <Calc_Optimal+0x188>
 800390c:	2b03      	cmp	r3, #3
 800390e:	d006      	beq.n	800391e <Calc_Optimal+0x18e>
 8003910:	bb0b      	cbnz	r3, 8003956 <Calc_Optimal+0x1c6>
			case(0):
					optimal_path[counter] = LEF;
 8003912:	f881 c000 	strb.w	ip, [r1]
					cur_dir = NORTH;
			break;
 8003916:	e00d      	b.n	8003934 <Calc_Optimal+0x1a4>
			case(1):
					optimal_path[counter] = RIGH;
 8003918:	2472      	movs	r4, #114	; 0x72
 800391a:	700c      	strb	r4, [r1, #0]
					cur_dir = SOUTH;
			break;
 800391c:	e015      	b.n	800394a <Calc_Optimal+0x1ba>
			case(2):
					//NO
			break;
			case(3):
					optimal_path[counter] = FOR;
 800391e:	f881 8000 	strb.w	r8, [r1]
			break;
 8003922:	e018      	b.n	8003956 <Calc_Optimal+0x1c6>
	optimal_x[counter] = x;
	optimal_y[counter] = y;

	}

	optimal_count = counter; //DEBUG
 8003924:	4b14      	ldr	r3, [pc, #80]	; (8003978 <Calc_Optimal+0x1e8>)
	optimal_path[counter] = 's';
 8003926:	4a10      	ldr	r2, [pc, #64]	; (8003968 <Calc_Optimal+0x1d8>)
	optimal_x[counter] = x;
	optimal_y[counter] = y;

	}

	optimal_count = counter; //DEBUG
 8003928:	601d      	str	r5, [r3, #0]
	optimal_path[counter] = 's';
 800392a:	2373      	movs	r3, #115	; 0x73
 800392c:	5553      	strb	r3, [r2, r5]
	}
	Transmit("\r\n");
	#endif
	*/

}
 800392e:	b009      	add	sp, #36	; 0x24
 8003930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}

		switch (cur_dir) { //update the cursor
		case NORTH:
			x = x + N[0];
			y = y + N[1];
 8003934:	3a01      	subs	r2, #1
		break;
 8003936:	2400      	movs	r4, #0
		case EAST:
			x = x + E[0];
			y = y + E[1];
		break;
		}
	counter++;
 8003938:	3501      	adds	r5, #1
	//temp_counter = 0;
	//temp_index[0] = -1; temp_index[1] = -1; temp_index[2] = -1;
	optimal_x[counter] = x;
 800393a:	9f02      	ldr	r7, [sp, #8]
 800393c:	3101      	adds	r1, #1
 800393e:	f847 0025 	str.w	r0, [r7, r5, lsl #2]
	optimal_y[counter] = y;
 8003942:	9f03      	ldr	r7, [sp, #12]
 8003944:	f847 2025 	str.w	r2, [r7, r5, lsl #2]
 8003948:	e742      	b.n	80037d0 <Calc_Optimal+0x40>
			x = x + N[0];
			y = y + N[1];
		break;
		case SOUTH:
			x = x + S[0];
			y = y + S[1];
 800394a:	3201      	adds	r2, #1
		break;
 800394c:	2401      	movs	r4, #1
 800394e:	e7f3      	b.n	8003938 <Calc_Optimal+0x1a8>
		case WEST:
			x = x + W[0];
 8003950:	3801      	subs	r0, #1
			y = y + W[1];
		break;
 8003952:	2402      	movs	r4, #2
 8003954:	e7f0      	b.n	8003938 <Calc_Optimal+0x1a8>
		case EAST:
			x = x + E[0];
 8003956:	3001      	adds	r0, #1
			y = y + E[1];
		break;
 8003958:	2403      	movs	r4, #3
 800395a:	e7ed      	b.n	8003938 <Calc_Optimal+0x1a8>
 800395c:	08006ca8 	.word	0x08006ca8
 8003960:	200018dc 	.word	0x200018dc
 8003964:	20001fd4 	.word	0x20001fd4
 8003968:	2000297c 	.word	0x2000297c
 800396c:	200014dc 	.word	0x200014dc
 8003970:	200000c4 	.word	0x200000c4
 8003974:	20000218 	.word	0x20000218
 8003978:	2000032c 	.word	0x2000032c

0800397c <Mark_Center>:
void Mark_Center() {
	/*
	 * Mark the center of the maze as visited
	 */
	visited_squares[X_FINAL][Y_FINAL] = TRUE;
	final_dir = cur_dir;
 800397c:	4906      	ldr	r1, [pc, #24]	; (8003998 <Mark_Center+0x1c>)

void Mark_Center() {
	/*
	 * Mark the center of the maze as visited
	 */
	visited_squares[X_FINAL][Y_FINAL] = TRUE;
 800397e:	2201      	movs	r2, #1
 8003980:	4b06      	ldr	r3, [pc, #24]	; (800399c <Mark_Center+0x20>)
	final_dir = cur_dir;
 8003982:	6808      	ldr	r0, [r1, #0]
 8003984:	4906      	ldr	r1, [pc, #24]	; (80039a0 <Mark_Center+0x24>)

void Mark_Center() {
	/*
	 * Mark the center of the maze as visited
	 */
	visited_squares[X_FINAL][Y_FINAL] = TRUE;
 8003986:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	final_dir = cur_dir;
 800398a:	6008      	str	r0, [r1, #0]
//#if X_MAZE_SIZE == 16
	visited_squares[X_FINAL+1][Y_FINAL] = TRUE;
 800398c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	visited_squares[X_FINAL][Y_FINAL] = TRUE;
	visited_squares[X_FINAL + 1][Y_FINAL + 1] = TRUE;
 8003990:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	20001344 	.word	0x20001344
 800399c:	20002504 	.word	0x20002504
 80039a0:	20000208 	.word	0x20000208

080039a4 <Fill_Center>:
void Fill_Center() {
	/*
	 * Fill the center walls.
	 */

	final_x = x_coord;
 80039a4:	4b40      	ldr	r3, [pc, #256]	; (8003aa8 <Fill_Center+0x104>)
	final_y = y_coord;
 80039a6:	4941      	ldr	r1, [pc, #260]	; (8003aac <Fill_Center+0x108>)
void Fill_Center() {
	/*
	 * Fill the center walls.
	 */

	final_x = x_coord;
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	4b41      	ldr	r3, [pc, #260]	; (8003ab0 <Fill_Center+0x10c>)
	final_y = y_coord;
//	 #if X_MAZE_SIZE == 16

	switch(final_x) {
 80039ac:	2a07      	cmp	r2, #7
void Fill_Center() {
	/*
	 * Fill the center walls.
	 */

	final_x = x_coord;
 80039ae:	601a      	str	r2, [r3, #0]
	final_y = y_coord;
 80039b0:	4b40      	ldr	r3, [pc, #256]	; (8003ab4 <Fill_Center+0x110>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	600b      	str	r3, [r1, #0]
//	 #if X_MAZE_SIZE == 16

	switch(final_x) {
 80039b6:	d002      	beq.n	80039be <Fill_Center+0x1a>
 80039b8:	2a08      	cmp	r2, #8
 80039ba:	d02f      	beq.n	8003a1c <Fill_Center+0x78>
 80039bc:	4770      	bx	lr

	case X_FINAL:
		switch(final_y) {
 80039be:	2b07      	cmp	r3, #7
 80039c0:	d002      	beq.n	80039c8 <Fill_Center+0x24>
 80039c2:	2b08      	cmp	r3, #8
 80039c4:	d013      	beq.n	80039ee <Fill_Center+0x4a>
 80039c6:	4770      	bx	lr
		case Y_FINAL: //top left
				if (horiz_walls[final_x][final_y - 1] == TRUE) {
 80039c8:	4b3b      	ldr	r3, [pc, #236]	; (8003ab8 <Fill_Center+0x114>)
 80039ca:	493c      	ldr	r1, [pc, #240]	; (8003abc <Fill_Center+0x118>)
 80039cc:	f893 206f 	ldrb.w	r2, [r3, #111]	; 0x6f
 80039d0:	2a01      	cmp	r2, #1
 80039d2:	d108      	bne.n	80039e6 <Fill_Center+0x42>

					horiz_walls[X_FINAL][Y_FINAL - 1] = TRUE; //above left
 80039d4:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
					horiz_walls[X_FINAL+1][Y_FINAL - 1] = TRUE; //above right
 80039d8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
					horiz_walls[X_FINAL][Y_FINAL + 1] = TRUE; //below left
 80039dc:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
					horiz_walls[X_FINAL+1][Y_FINAL + 1] = TRUE; //below right
 80039e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80039e4:	e058      	b.n	8003a98 <Fill_Center+0xf4>
					vert_walls[X_FINAL + 1][Y_FINAL+ 1] = TRUE; //bottom right

				}
				else {
					//horiz_walls[X_FINAL][Y_FINAL - 1] = TRUE;
					horiz_walls[X_FINAL+1][Y_FINAL - 1] = TRUE;
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80039ec:	e031      	b.n	8003a52 <Fill_Center+0xae>
					vert_walls[X_FINAL + 1][Y_FINAL+ 1] = TRUE;
				}
		break;

		case Y_FINAL + 1: //bottom left
		if (horiz_walls[final_x][final_y] == TRUE) {
 80039ee:	4b32      	ldr	r3, [pc, #200]	; (8003ab8 <Fill_Center+0x114>)
 80039f0:	4932      	ldr	r1, [pc, #200]	; (8003abc <Fill_Center+0x118>)
 80039f2:	f893 2071 	ldrb.w	r2, [r3, #113]	; 0x71
 80039f6:	2a01      	cmp	r2, #1
 80039f8:	d10a      	bne.n	8003a10 <Fill_Center+0x6c>

			horiz_walls[X_FINAL][Y_FINAL - 1] = TRUE;
 80039fa:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
			horiz_walls[X_FINAL+1][Y_FINAL - 1] = TRUE;
 80039fe:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
			horiz_walls[X_FINAL][Y_FINAL + 1] = TRUE;
 8003a02:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
			horiz_walls[X_FINAL+1][Y_FINAL + 1] = TRUE;
 8003a06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

			vert_walls[X_FINAL - 1][Y_FINAL] = TRUE;
 8003a0a:	f881 2067 	strb.w	r2, [r1, #103]	; 0x67
 8003a0e:	e045      	b.n	8003a9c <Fill_Center+0xf8>
			vert_walls[X_FINAL + 1][Y_FINAL] = TRUE;
			vert_walls[X_FINAL + 1][Y_FINAL+ 1] = TRUE;

		}
		else {
			horiz_walls[X_FINAL][Y_FINAL - 1] = TRUE;
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
			horiz_walls[X_FINAL+1][Y_FINAL - 1] = TRUE;
 8003a16:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8003a1a:	e01c      	b.n	8003a56 <Fill_Center+0xb2>

	}
	break;

	case X_FINAL + 1:
		switch(final_y) { //top right
 8003a1c:	2b07      	cmp	r3, #7
 8003a1e:	d002      	beq.n	8003a26 <Fill_Center+0x82>
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d01b      	beq.n	8003a5c <Fill_Center+0xb8>
 8003a24:	4770      	bx	lr
		case Y_FINAL:
			if (horiz_walls[final_x][final_y - 1] == TRUE) {
 8003a26:	4b24      	ldr	r3, [pc, #144]	; (8003ab8 <Fill_Center+0x114>)
 8003a28:	4924      	ldr	r1, [pc, #144]	; (8003abc <Fill_Center+0x118>)
 8003a2a:	f893 207e 	ldrb.w	r2, [r3, #126]	; 0x7e
 8003a2e:	2a01      	cmp	r2, #1
 8003a30:	d10c      	bne.n	8003a4c <Fill_Center+0xa8>

				horiz_walls[X_FINAL][Y_FINAL - 1] = TRUE;
 8003a32:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
				horiz_walls[X_FINAL+1][Y_FINAL - 1] = TRUE;
 8003a36:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
				horiz_walls[X_FINAL][Y_FINAL + 1] = TRUE;
 8003a3a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
				horiz_walls[X_FINAL+1][Y_FINAL + 1] = TRUE;
 8003a3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

				vert_walls[X_FINAL - 1][Y_FINAL] = TRUE;
 8003a42:	f881 2067 	strb.w	r2, [r1, #103]	; 0x67
				vert_walls[X_FINAL - 1][Y_FINAL + 1] = TRUE;
 8003a46:	f881 2068 	strb.w	r2, [r1, #104]	; 0x68
 8003a4a:	e029      	b.n	8003aa0 <Fill_Center+0xfc>
				//vert_walls[X_FINAL + 1][Y_FINAL] = TRUE;
				vert_walls[X_FINAL + 1][Y_FINAL+ 1] = TRUE;

			}
			else {
				horiz_walls[X_FINAL][Y_FINAL - 1] = TRUE;
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
				//horiz_walls[X_FINAL+1][Y_FINAL - 1] = TRUE;
				horiz_walls[X_FINAL][Y_FINAL + 1] = TRUE;
 8003a52:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
				horiz_walls[X_FINAL+1][Y_FINAL + 1] = TRUE;
 8003a56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8003a5a:	e01b      	b.n	8003a94 <Fill_Center+0xf0>
				vert_walls[X_FINAL + 1][Y_FINAL+ 1] = TRUE;
			}
			break;

	case Y_FINAL + 1: //bottom right
		if (horiz_walls[final_x][final_y] == TRUE) {
 8003a5c:	4b16      	ldr	r3, [pc, #88]	; (8003ab8 <Fill_Center+0x114>)
 8003a5e:	4917      	ldr	r1, [pc, #92]	; (8003abc <Fill_Center+0x118>)
 8003a60:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8003a64:	2a01      	cmp	r2, #1
 8003a66:	d10e      	bne.n	8003a86 <Fill_Center+0xe2>

			horiz_walls[X_FINAL][Y_FINAL - 1] = TRUE;
 8003a68:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
			horiz_walls[X_FINAL+1][Y_FINAL - 1] = TRUE;
 8003a6c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
			horiz_walls[X_FINAL][Y_FINAL + 1] = TRUE;
 8003a70:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
			horiz_walls[X_FINAL+1][Y_FINAL + 1] = TRUE;
 8003a74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

			vert_walls[X_FINAL - 1][Y_FINAL] = TRUE;
 8003a78:	f881 2067 	strb.w	r2, [r1, #103]	; 0x67
			vert_walls[X_FINAL - 1][Y_FINAL + 1] = TRUE;
 8003a7c:	f881 2068 	strb.w	r2, [r1, #104]	; 0x68
			vert_walls[X_FINAL + 1][Y_FINAL] = TRUE;
 8003a80:	f881 2087 	strb.w	r2, [r1, #135]	; 0x87
 8003a84:	4770      	bx	lr
			//vert_walls[X_FINAL + 1][Y_FINAL+ 1] = TRUE;
		}
		else {
			horiz_walls[X_FINAL][Y_FINAL - 1] = TRUE;
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
			horiz_walls[X_FINAL + 1][Y_FINAL - 1] = TRUE;
 8003a8c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
			horiz_walls[X_FINAL][Y_FINAL + 1] = TRUE;
 8003a90:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
			//horiz_walls[X_FINAL + 1][Y_FINAL + 1] = TRUE;

			vert_walls[X_FINAL - 1][Y_FINAL] = TRUE;
 8003a94:	f881 2067 	strb.w	r2, [r1, #103]	; 0x67
			vert_walls[X_FINAL - 1][Y_FINAL + 1] = TRUE;
 8003a98:	f881 2068 	strb.w	r2, [r1, #104]	; 0x68
			vert_walls[X_FINAL + 1][Y_FINAL] = TRUE;
 8003a9c:	f881 2087 	strb.w	r2, [r1, #135]	; 0x87
			vert_walls[X_FINAL + 1][Y_FINAL+ 1] = TRUE;
 8003aa0:	f881 2088 	strb.w	r2, [r1, #136]	; 0x88
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	200001fc 	.word	0x200001fc
 8003aac:	200001c0 	.word	0x200001c0
 8003ab0:	200001bc 	.word	0x200001bc
 8003ab4:	20000010 	.word	0x20000010
 8003ab8:	200000c4 	.word	0x200000c4
 8003abc:	20000218 	.word	0x20000218

08003ac0 <Get_Coordinate>:
	}
//#endif
}

void Get_Coordinate() { //gets next coordinate to visit
	coordinate_count = 0;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	4a10      	ldr	r2, [pc, #64]	; (8003b04 <Get_Coordinate+0x44>)
	break;
	}
//#endif
}

void Get_Coordinate() { //gets next coordinate to visit
 8003ac4:	b4f0      	push	{r4, r5, r6, r7}
	coordinate_count = 0;
 8003ac6:	6013      	str	r3, [r2, #0]
	for (int i = optimal_count; i > 0; i--) {
 8003ac8:	4b0f      	ldr	r3, [pc, #60]	; (8003b08 <Get_Coordinate+0x48>)

		if (visited_squares[optimal_x[i]][optimal_y[i]] == FALSE) {
 8003aca:	4c10      	ldr	r4, [pc, #64]	; (8003b0c <Get_Coordinate+0x4c>)
//#endif
}

void Get_Coordinate() { //gets next coordinate to visit
	coordinate_count = 0;
	for (int i = optimal_count; i > 0; i--) {
 8003acc:	681b      	ldr	r3, [r3, #0]

		if (visited_squares[optimal_x[i]][optimal_y[i]] == FALSE) {
 8003ace:	4d10      	ldr	r5, [pc, #64]	; (8003b10 <Get_Coordinate+0x50>)
 8003ad0:	4e10      	ldr	r6, [pc, #64]	; (8003b14 <Get_Coordinate+0x54>)
//#endif
}

void Get_Coordinate() { //gets next coordinate to visit
	coordinate_count = 0;
	for (int i = optimal_count; i > 0; i--) {
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	dd12      	ble.n	8003afc <Get_Coordinate+0x3c>

		if (visited_squares[optimal_x[i]][optimal_y[i]] == FALSE) {
 8003ad6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8003ada:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8003ade:	eb01 1700 	add.w	r7, r1, r0, lsl #4
 8003ae2:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 8003ae6:	b93f      	cbnz	r7, 8003af8 <Get_Coordinate+0x38>
			search_x = optimal_x[i];
 8003ae8:	4b0b      	ldr	r3, [pc, #44]	; (8003b18 <Get_Coordinate+0x58>)
 8003aea:	6018      	str	r0, [r3, #0]
			search_y = optimal_y[i];
 8003aec:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <Get_Coordinate+0x5c>)
 8003aee:	6019      	str	r1, [r3, #0]
			coordinate_count++;
 8003af0:	2301      	movs	r3, #1
		}
	}
#if DEBUG == TRUE
	Transmit("All coordinates on optimal path found! \r\n");
#endif
}
 8003af2:	bcf0      	pop	{r4, r5, r6, r7}
	for (int i = optimal_count; i > 0; i--) {

		if (visited_squares[optimal_x[i]][optimal_y[i]] == FALSE) {
			search_x = optimal_x[i];
			search_y = optimal_y[i];
			coordinate_count++;
 8003af4:	6013      	str	r3, [r2, #0]
		}
	}
#if DEBUG == TRUE
	Transmit("All coordinates on optimal path found! \r\n");
#endif
}
 8003af6:	4770      	bx	lr
//#endif
}

void Get_Coordinate() { //gets next coordinate to visit
	coordinate_count = 0;
	for (int i = optimal_count; i > 0; i--) {
 8003af8:	3b01      	subs	r3, #1
 8003afa:	e7ea      	b.n	8003ad2 <Get_Coordinate+0x12>
#endif
			return;
		}
	}
#if DEBUG == TRUE
	Transmit("All coordinates on optimal path found! \r\n");
 8003afc:	4808      	ldr	r0, [pc, #32]	; (8003b20 <Get_Coordinate+0x60>)
#endif
}
 8003afe:	bcf0      	pop	{r4, r5, r6, r7}
#endif
			return;
		}
	}
#if DEBUG == TRUE
	Transmit("All coordinates on optimal path found! \r\n");
 8003b00:	f7ff baf4 	b.w	80030ec <Transmit>
 8003b04:	20001354 	.word	0x20001354
 8003b08:	2000032c 	.word	0x2000032c
 8003b0c:	20001fd4 	.word	0x20001fd4
 8003b10:	200018dc 	.word	0x200018dc
 8003b14:	20002504 	.word	0x20002504
 8003b18:	20001498 	.word	0x20001498
 8003b1c:	2000149c 	.word	0x2000149c
 8003b20:	08006fd6 	.word	0x08006fd6

08003b24 <Turn_On_Lights>:
}
	Stop(); //stop spinning
	HAL_TIM_Base_Stop(&htim5); //stop timer
}

void Turn_On_Lights() { //turn on the top lights
 8003b24:	b510      	push	{r4, lr}

	HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, ON);
 8003b26:	4c1a      	ldr	r4, [pc, #104]	; (8003b90 <Turn_On_Lights+0x6c>)
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b2e:	4620      	mov	r0, r4
 8003b30:	f7fd fb56 	bl	80011e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, ON);
 8003b34:	4620      	mov	r0, r4
 8003b36:	2201      	movs	r2, #1
 8003b38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003b3c:	f7fd fb50 	bl	80011e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, ON);
 8003b40:	4620      	mov	r0, r4
 8003b42:	2201      	movs	r2, #1
 8003b44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b48:	f7fd fb4a 	bl	80011e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, ON);
 8003b4c:	2201      	movs	r2, #1
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, ON);
 8003b4e:	f5a4 6480 	sub.w	r4, r4, #1024	; 0x400
void Turn_On_Lights() { //turn on the top lights

	HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, ON);
	HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, ON);
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, ON);
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, ON);
 8003b52:	4810      	ldr	r0, [pc, #64]	; (8003b94 <Turn_On_Lights+0x70>)
 8003b54:	4611      	mov	r1, r2
 8003b56:	f7fd fb43 	bl	80011e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, ON);
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b62:	f7fd fb3d 	bl	80011e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, ON);
 8003b66:	4620      	mov	r0, r4
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b6e:	f7fd fb37 	bl	80011e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, ON);
 8003b72:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8003b76:	2201      	movs	r2, #1
 8003b78:	4620      	mov	r0, r4
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	f7fd fb30 	bl	80011e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, ON);
 8003b80:	4620      	mov	r0, r4
 8003b82:	2201      	movs	r2, #1
 8003b84:	2102      	movs	r1, #2
}
 8003b86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, ON);
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, ON);
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, ON);
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, ON);
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, ON);
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, ON);
 8003b8a:	f7fd bb29 	b.w	80011e0 <HAL_GPIO_WritePin>
 8003b8e:	bf00      	nop
 8003b90:	40020800 	.word	0x40020800
 8003b94:	40020c00 	.word	0x40020c00

08003b98 <Turn_Off_Lights>:
}

void Turn_Off_Lights() { //turn off the top lights
 8003b98:	b510      	push	{r4, lr}

	HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, OFF);
 8003b9a:	4c1a      	ldr	r4, [pc, #104]	; (8003c04 <Turn_Off_Lights+0x6c>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ba2:	4620      	mov	r0, r4
 8003ba4:	f7fd fb1c 	bl	80011e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, OFF);
 8003ba8:	4620      	mov	r0, r4
 8003baa:	2200      	movs	r2, #0
 8003bac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003bb0:	f7fd fb16 	bl	80011e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, OFF);
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	2200      	movs	r2, #0
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, OFF);
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, OFF);
 8003bb8:	f5a4 6480 	sub.w	r4, r4, #1024	; 0x400

void Turn_Off_Lights() { //turn off the top lights

	HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, OFF);
	HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, OFF);
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, OFF);
 8003bbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003bc0:	f7fd fb0e 	bl	80011e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, OFF);
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	480f      	ldr	r0, [pc, #60]	; (8003c08 <Turn_Off_Lights+0x70>)
 8003bca:	f7fd fb09 	bl	80011e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, OFF);
 8003bce:	4620      	mov	r0, r4
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003bd6:	f7fd fb03 	bl	80011e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, OFF);
 8003bda:	4620      	mov	r0, r4
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, OFF);
 8003bdc:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
	HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, OFF);
	HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, OFF);
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, OFF);
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, OFF);
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, OFF);
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, OFF);
 8003be0:	2200      	movs	r2, #0
 8003be2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003be6:	f7fd fafb 	bl	80011e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, OFF);
 8003bea:	4620      	mov	r0, r4
 8003bec:	2200      	movs	r2, #0
 8003bee:	2101      	movs	r1, #1
 8003bf0:	f7fd faf6 	bl	80011e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	2102      	movs	r1, #2

}
 8003bfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, OFF);
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, OFF);
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, OFF);
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, OFF);
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, OFF);
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8003bfe:	f7fd baef 	b.w	80011e0 <HAL_GPIO_WritePin>
 8003c02:	bf00      	nop
 8003c04:	40020800 	.word	0x40020800
 8003c08:	40020c00 	.word	0x40020c00

08003c0c <Get_Next_Move>:
}

	return count;
}

int Get_Next_Move() {
 8003c0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 */

int next = FWD;
int min = 0;
int values[5] = {127, 127, 127, 127, 127};
fwd_number = 0; //reset fwd_number. used for forward speed
 8003c10:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8003d84 <Get_Next_Move+0x178>
}

	return count;
}

int Get_Next_Move() {
 8003c14:	b087      	sub	sp, #28
 */

int next = FWD;
int min = 0;
int values[5] = {127, 127, 127, 127, 127};
fwd_number = 0; //reset fwd_number. used for forward speed
 8003c16:	2700      	movs	r7, #0

if (y_coord > 0 && horiz_walls[x_coord][y_coord-1] != TRUE) { //if row is greater than zero
 8003c18:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8003d88 <Get_Next_Move+0x17c>
	values[1] = maze[x_coord][y_coord-1]; //up square
 8003c1c:	4d53      	ldr	r5, [pc, #332]	; (8003d6c <Get_Next_Move+0x160>)
 * Floodfill get next move
 */

int next = FWD;
int min = 0;
int values[5] = {127, 127, 127, 127, 127};
 8003c1e:	f8df e16c 	ldr.w	lr, [pc, #364]	; 8003d8c <Get_Next_Move+0x180>
 8003c22:	ac01      	add	r4, sp, #4
fwd_number = 0; //reset fwd_number. used for forward speed
 8003c24:	f8c9 7000 	str.w	r7, [r9]
 * Floodfill get next move
 */

int next = FWD;
int min = 0;
int values[5] = {127, 127, 127, 127, 127};
 8003c28:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003c2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c2e:	f8de 3000 	ldr.w	r3, [lr]
fwd_number = 0; //reset fwd_number. used for forward speed

if (y_coord > 0 && horiz_walls[x_coord][y_coord-1] != TRUE) { //if row is greater than zero
 8003c32:	f8d8 2000 	ldr.w	r2, [r8]
 * Floodfill get next move
 */

int next = FWD;
int min = 0;
int values[5] = {127, 127, 127, 127, 127};
 8003c36:	6023      	str	r3, [r4, #0]
 8003c38:	ac01      	add	r4, sp, #4
 8003c3a:	494d      	ldr	r1, [pc, #308]	; (8003d70 <Get_Next_Move+0x164>)
 8003c3c:	f8df e150 	ldr.w	lr, [pc, #336]	; 8003d90 <Get_Next_Move+0x184>
fwd_number = 0; //reset fwd_number. used for forward speed

if (y_coord > 0 && horiz_walls[x_coord][y_coord-1] != TRUE) { //if row is greater than zero
 8003c40:	b962      	cbnz	r2, 8003c5c <Get_Next_Move+0x50>
	values[1] = maze[x_coord][y_coord-1]; //up square
}

if (y_coord < Y_MAZE_SIZE - 1 && horiz_walls[x_coord][y_coord] != TRUE) {
 8003c42:	680b      	ldr	r3, [r1, #0]
 8003c44:	0118      	lsls	r0, r3, #4
 8003c46:	1ac3      	subs	r3, r0, r3
 8003c48:	4473      	add	r3, lr
 8003c4a:	5c9b      	ldrb	r3, [r3, r2]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d015      	beq.n	8003c7c <Get_Next_Move+0x70>
	values[2] = maze[x_coord][y_coord+1]; //down square
 8003c50:	1c53      	adds	r3, r2, #1
 8003c52:	4403      	add	r3, r0
 8003c54:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8003c58:	9303      	str	r3, [sp, #12]
 8003c5a:	e00f      	b.n	8003c7c <Get_Next_Move+0x70>
int next = FWD;
int min = 0;
int values[5] = {127, 127, 127, 127, 127};
fwd_number = 0; //reset fwd_number. used for forward speed

if (y_coord > 0 && horiz_walls[x_coord][y_coord-1] != TRUE) { //if row is greater than zero
 8003c5c:	680b      	ldr	r3, [r1, #0]
 8003c5e:	1e50      	subs	r0, r2, #1
 8003c60:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 8003c64:	ebc3 030c 	rsb	r3, r3, ip
 8003c68:	4473      	add	r3, lr
 8003c6a:	5c1b      	ldrb	r3, [r3, r0]
 8003c6c:	2b01      	cmp	r3, #1
	values[1] = maze[x_coord][y_coord-1]; //up square
 8003c6e:	bf1e      	ittt	ne
 8003c70:	4460      	addne	r0, ip
 8003c72:	f855 0020 	ldrne.w	r0, [r5, r0, lsl #2]
 8003c76:	9002      	strne	r0, [sp, #8]
}

if (y_coord < Y_MAZE_SIZE - 1 && horiz_walls[x_coord][y_coord] != TRUE) {
 8003c78:	2a0e      	cmp	r2, #14
 8003c7a:	d9e2      	bls.n	8003c42 <Get_Next_Move+0x36>
	values[2] = maze[x_coord][y_coord+1]; //down square
}

if (x_coord > 0 && vert_walls[x_coord - 1][y_coord] != TRUE) {
 8003c7c:	6809      	ldr	r1, [r1, #0]
 8003c7e:	483d      	ldr	r0, [pc, #244]	; (8003d74 <Get_Next_Move+0x168>)
 8003c80:	b959      	cbnz	r1, 8003c9a <Get_Next_Move+0x8e>
	values[3] = maze[x_coord - 1][y_coord]; //left square
}

if (x_coord < X_MAZE_SIZE - 1 && vert_walls[x_coord][y_coord] != TRUE) {
 8003c82:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 8003c86:	5c83      	ldrb	r3, [r0, r2]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d015      	beq.n	8003cb8 <Get_Next_Move+0xac>
	values[4] = maze[x_coord+1][y_coord]; //right square
 8003c8c:	1c4b      	adds	r3, r1, #1
 8003c8e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8003c92:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8003c96:	9305      	str	r3, [sp, #20]
 8003c98:	e00e      	b.n	8003cb8 <Get_Next_Move+0xac>

if (y_coord < Y_MAZE_SIZE - 1 && horiz_walls[x_coord][y_coord] != TRUE) {
	values[2] = maze[x_coord][y_coord+1]; //down square
}

if (x_coord > 0 && vert_walls[x_coord - 1][y_coord] != TRUE) {
 8003c9a:	1e4b      	subs	r3, r1, #1
 8003c9c:	011b      	lsls	r3, r3, #4
 8003c9e:	eb00 0e03 	add.w	lr, r0, r3
 8003ca2:	f81e e002 	ldrb.w	lr, [lr, r2]
 8003ca6:	f1be 0f01 	cmp.w	lr, #1
	values[3] = maze[x_coord - 1][y_coord]; //left square
 8003caa:	bf1e      	ittt	ne
 8003cac:	189b      	addne	r3, r3, r2
 8003cae:	f855 3023 	ldrne.w	r3, [r5, r3, lsl #2]
 8003cb2:	9304      	strne	r3, [sp, #16]
}

if (x_coord < X_MAZE_SIZE - 1 && vert_walls[x_coord][y_coord] != TRUE) {
 8003cb4:	290e      	cmp	r1, #14
 8003cb6:	d9e4      	bls.n	8003c82 <Get_Next_Move+0x76>
	values[4] = maze[x_coord+1][y_coord]; //right square
}

for (int i = 1; i < 5; i++) {
 8003cb8:	f04f 0e01 	mov.w	lr, #1
/*
 * Floodfill get next move
 */

int next = FWD;
int min = 0;
 8003cbc:	2300      	movs	r3, #0
if (x_coord < X_MAZE_SIZE - 1 && vert_walls[x_coord][y_coord] != TRUE) {
	values[4] = maze[x_coord+1][y_coord]; //right square
}

for (int i = 1; i < 5; i++) {
	if(values[i] < values[min]) {
 8003cbe:	a806      	add	r0, sp, #24
 8003cc0:	f854 602e 	ldr.w	r6, [r4, lr, lsl #2]
 8003cc4:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
 8003cc8:	f85c 0c14 	ldr.w	r0, [ip, #-20]
 8003ccc:	4286      	cmp	r6, r0
 8003cce:	bfb8      	it	lt
 8003cd0:	4673      	movlt	r3, lr

if (x_coord < X_MAZE_SIZE - 1 && vert_walls[x_coord][y_coord] != TRUE) {
	values[4] = maze[x_coord+1][y_coord]; //right square
}

for (int i = 1; i < 5; i++) {
 8003cd2:	f10e 0e01 	add.w	lr, lr, #1
 8003cd6:	f1be 0f05 	cmp.w	lr, #5
 8003cda:	d1f0      	bne.n	8003cbe <Get_Next_Move+0xb2>
	if(values[i] < values[min]) {
		min = i;
	}
}

if (values[min] >= maze[x_coord][y_coord]) { //if lowest available square is higher than current
 8003cdc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003ce0:	a906      	add	r1, sp, #24
 8003ce2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8003ce6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8003cea:	f851 1c14 	ldr.w	r1, [r1, #-20]
 8003cee:	4291      	cmp	r1, r2
 8003cf0:	d307      	bcc.n	8003d02 <Get_Next_Move+0xf6>
	//floodfill and recursive call
	Floodfill(reverse_flag, search_flag, FALSE);
 8003cf2:	4b21      	ldr	r3, [pc, #132]	; (8003d78 <Get_Next_Move+0x16c>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	6819      	ldr	r1, [r3, #0]
 8003cf8:	4b20      	ldr	r3, [pc, #128]	; (8003d7c <Get_Next_Move+0x170>)
 8003cfa:	6818      	ldr	r0, [r3, #0]
 8003cfc:	f7ff fb9a 	bl	8003434 <Floodfill>
	next = Get_Next_Move();
	//Print_Maze();
	return next;
 8003d00:	e78d      	b.n	8003c1e <Get_Next_Move+0x12>
}

switch(cur_dir) {  //based on current direction, get next move to execute
 8003d02:	4a1f      	ldr	r2, [pc, #124]	; (8003d80 <Get_Next_Move+0x174>)
 8003d04:	6810      	ldr	r0, [r2, #0]
 8003d06:	2803      	cmp	r0, #3
 8003d08:	d82b      	bhi.n	8003d62 <Get_Next_Move+0x156>
 8003d0a:	e8df f000 	tbb	[pc, r0]
 8003d0e:	0a02      	.short	0x0a02
 8003d10:	141e      	.short	0x141e

case NORTH:
	switch(min) {
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	d021      	beq.n	8003d5a <Get_Next_Move+0x14e>
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d00b      	beq.n	8003d32 <Get_Next_Move+0x126>
	case 1:
		next = FWD;
		break;
	case 2:
		next = DEAD;
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	bf08      	it	eq
 8003d1e:	2003      	moveq	r0, #3
 8003d20:	e020      	b.n	8003d64 <Get_Next_Move+0x158>
		break;
	}
break;

case SOUTH:
	switch(min) {
 8003d22:	2b03      	cmp	r3, #3
 8003d24:	d005      	beq.n	8003d32 <Get_Next_Move+0x126>
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d01c      	beq.n	8003d64 <Get_Next_Move+0x158>

/*
 * Floodfill get next move
 */

int next = FWD;
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	bf08      	it	eq
 8003d2e:	2003      	moveq	r0, #3
 8003d30:	e010      	b.n	8003d54 <Get_Next_Move+0x148>
		break;
	case 2:
		next = FWD;
		break;
	case 3:
		next = RIGHT;
 8003d32:	2002      	movs	r0, #2
		break;
 8003d34:	e016      	b.n	8003d64 <Get_Next_Move+0x158>
		break;
	}
break;

case EAST:
	switch(min) {
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d005      	beq.n	8003d46 <Get_Next_Move+0x13a>
 8003d3a:	2b03      	cmp	r3, #3
 8003d3c:	d012      	beq.n	8003d64 <Get_Next_Move+0x158>

/*
 * Floodfill get next move
 */

int next = FWD;
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	4258      	negs	r0, r3
 8003d42:	4158      	adcs	r0, r3
 8003d44:	e00e      	b.n	8003d64 <Get_Next_Move+0x158>
	switch(min) {
	case 1:
		next = LEFT;
		break;
	case 2:
		next = RIGHT;
 8003d46:	4618      	mov	r0, r3
		break;
 8003d48:	e00c      	b.n	8003d64 <Get_Next_Move+0x158>
	}
break;


case WEST:
	switch(min) {
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d005      	beq.n	8003d5a <Get_Next_Move+0x14e>
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d005      	beq.n	8003d5e <Get_Next_Move+0x152>

/*
 * Floodfill get next move
 */

int next = FWD;
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	bf18      	it	ne
 8003d56:	2000      	movne	r0, #0
 8003d58:	e004      	b.n	8003d64 <Get_Next_Move+0x158>
	switch(min) {
	case 1:
		next = RIGHT;
		break;
	case 2:
		next = LEFT;
 8003d5a:	2001      	movs	r0, #1
		break;
 8003d5c:	e002      	b.n	8003d64 <Get_Next_Move+0x158>
	case 3:
		next = FWD;
		break;
	case 4:
		next = DEAD;
 8003d5e:	2003      	movs	r0, #3
		break;
 8003d60:	e000      	b.n	8003d64 <Get_Next_Move+0x158>

/*
 * Floodfill get next move
 */

int next = FWD;
 8003d62:	2000      	movs	r0, #0
		diag_dir = RIGHT;
	}
	*/

return next;
}
 8003d64:	b007      	add	sp, #28
 8003d66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d6a:	bf00      	nop
 8003d6c:	200014dc 	.word	0x200014dc
 8003d70:	200001fc 	.word	0x200001fc
 8003d74:	20000218 	.word	0x20000218
 8003d78:	20000b58 	.word	0x20000b58
 8003d7c:	2000033c 	.word	0x2000033c
 8003d80:	20001344 	.word	0x20001344
 8003d84:	200000b8 	.word	0x200000b8
 8003d88:	20000010 	.word	0x20000010
 8003d8c:	08006c94 	.word	0x08006c94
 8003d90:	200000c4 	.word	0x200000c4

08003d94 <HAL_GPIO_EXTI_Callback>:
	 __HAL_TIM_SET_COUNTER(&htim1, 0);
	 __HAL_TIM_SET_COUNTER(&htim4, 0);
	 debug_flag = !debug_flag;
  }
#elif MOUSE_REV == 69 //button state machine
  if (GPIO_Pin == BUTTON1_Pin)
 8003d94:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		  }
}
#endif
//button interrupt routine (THIS IS RUN WHEN BUTTONS ARE PRESSED)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d98:	b570      	push	{r4, r5, r6, lr}
	 __HAL_TIM_SET_COUNTER(&htim1, 0);
	 __HAL_TIM_SET_COUNTER(&htim4, 0);
	 debug_flag = !debug_flag;
  }
#elif MOUSE_REV == 69 //button state machine
  if (GPIO_Pin == BUTTON1_Pin)
 8003d9a:	f040 80fe 	bne.w	8003f9a <HAL_GPIO_EXTI_Callback+0x206>
  {
	  Transmit("BUTTON PRESSED \r\n");
	  switch(button_state) {
 8003d9e:	4d7f      	ldr	r5, [pc, #508]	; (8003f9c <HAL_GPIO_EXTI_Callback+0x208>)
	 debug_flag = !debug_flag;
  }
#elif MOUSE_REV == 69 //button state machine
  if (GPIO_Pin == BUTTON1_Pin)
  {
	  Transmit("BUTTON PRESSED \r\n");
 8003da0:	487f      	ldr	r0, [pc, #508]	; (8003fa0 <HAL_GPIO_EXTI_Callback+0x20c>)
 8003da2:	f7ff f9a3 	bl	80030ec <Transmit>
	  switch(button_state) {
 8003da6:	682b      	ldr	r3, [r5, #0]
 8003da8:	2b04      	cmp	r3, #4
 8003daa:	f200 80f6 	bhi.w	8003f9a <HAL_GPIO_EXTI_Callback+0x206>
 8003dae:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003db2:	0005      	.short	0x0005
 8003db4:	00640035 	.word	0x00640035
 8003db8:	00c50094 	.word	0x00c50094
	  case 0: //LED2 , SEND DEBUG
		  send_debug = 1;
 8003dbc:	2601      	movs	r6, #1
 8003dbe:	4b79      	ldr	r3, [pc, #484]	; (8003fa4 <HAL_GPIO_EXTI_Callback+0x210>)
		  stop_flag = 1;
		  dem1 = 0;
 8003dc0:	2400      	movs	r4, #0
		  dem2 = 0;
		  dem3 = 0;
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8003dc2:	2102      	movs	r1, #2
  if (GPIO_Pin == BUTTON1_Pin)
  {
	  Transmit("BUTTON PRESSED \r\n");
	  switch(button_state) {
	  case 0: //LED2 , SEND DEBUG
		  send_debug = 1;
 8003dc4:	601e      	str	r6, [r3, #0]
		  stop_flag = 1;
 8003dc6:	4b78      	ldr	r3, [pc, #480]	; (8003fa8 <HAL_GPIO_EXTI_Callback+0x214>)
		  dem1 = 0;
		  dem2 = 0;
		  dem3 = 0;
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8003dc8:	4622      	mov	r2, r4
 8003dca:	4878      	ldr	r0, [pc, #480]	; (8003fac <HAL_GPIO_EXTI_Callback+0x218>)
  {
	  Transmit("BUTTON PRESSED \r\n");
	  switch(button_state) {
	  case 0: //LED2 , SEND DEBUG
		  send_debug = 1;
		  stop_flag = 1;
 8003dcc:	601e      	str	r6, [r3, #0]
		  dem1 = 0;
 8003dce:	4b78      	ldr	r3, [pc, #480]	; (8003fb0 <HAL_GPIO_EXTI_Callback+0x21c>)
 8003dd0:	601c      	str	r4, [r3, #0]
		  dem2 = 0;
 8003dd2:	4b78      	ldr	r3, [pc, #480]	; (8003fb4 <HAL_GPIO_EXTI_Callback+0x220>)
 8003dd4:	601c      	str	r4, [r3, #0]
		  dem3 = 0;
 8003dd6:	4b78      	ldr	r3, [pc, #480]	; (8003fb8 <HAL_GPIO_EXTI_Callback+0x224>)
 8003dd8:	601c      	str	r4, [r3, #0]
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8003dda:	f7fd fa01 	bl	80011e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, ON);
 8003dde:	4632      	mov	r2, r6
 8003de0:	4631      	mov	r1, r6
 8003de2:	4872      	ldr	r0, [pc, #456]	; (8003fac <HAL_GPIO_EXTI_Callback+0x218>)
 8003de4:	f7fd f9fc 	bl	80011e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, OFF);
 8003de8:	4622      	mov	r2, r4
 8003dea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003dee:	4873      	ldr	r0, [pc, #460]	; (8003fbc <HAL_GPIO_EXTI_Callback+0x228>)
 8003df0:	f7fd f9f6 	bl	80011e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, OFF);
 8003df4:	4622      	mov	r2, r4
 8003df6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003dfa:	4870      	ldr	r0, [pc, #448]	; (8003fbc <HAL_GPIO_EXTI_Callback+0x228>)
 8003dfc:	f7fd f9f0 	bl	80011e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, OFF);
 8003e00:	4622      	mov	r2, r4
 8003e02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e06:	486e      	ldr	r0, [pc, #440]	; (8003fc0 <HAL_GPIO_EXTI_Callback+0x22c>)
 8003e08:	f7fd f9ea 	bl	80011e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, OFF);
 8003e0c:	4622      	mov	r2, r4
 8003e0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e12:	486b      	ldr	r0, [pc, #428]	; (8003fc0 <HAL_GPIO_EXTI_Callback+0x22c>)
 8003e14:	f7fd f9e4 	bl	80011e0 <HAL_GPIO_WritePin>
		  button_state = 1;
 8003e18:	602e      	str	r6, [r5, #0]
		  break;
 8003e1a:	bd70      	pop	{r4, r5, r6, pc}
	  case 1: //LED3 , SEARCH AND SPEED RUN
		  stop_flag = 0;
 8003e1c:	2400      	movs	r4, #0
 8003e1e:	4b62      	ldr	r3, [pc, #392]	; (8003fa8 <HAL_GPIO_EXTI_Callback+0x214>)
		  send_debug = 0;
		  dem1 = 0;
		  dem2 = 0;
		  dem3 = 0;
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8003e20:	2102      	movs	r1, #2
 8003e22:	4862      	ldr	r0, [pc, #392]	; (8003fac <HAL_GPIO_EXTI_Callback+0x218>)
		  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, OFF);
		  HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, OFF);
		  button_state = 1;
		  break;
	  case 1: //LED3 , SEARCH AND SPEED RUN
		  stop_flag = 0;
 8003e24:	601c      	str	r4, [r3, #0]
		  send_debug = 0;
		  dem1 = 0;
		  dem2 = 0;
		  dem3 = 0;
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8003e26:	4622      	mov	r2, r4
		  HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, OFF);
		  button_state = 1;
		  break;
	  case 1: //LED3 , SEARCH AND SPEED RUN
		  stop_flag = 0;
		  send_debug = 0;
 8003e28:	4b5e      	ldr	r3, [pc, #376]	; (8003fa4 <HAL_GPIO_EXTI_Callback+0x210>)
 8003e2a:	601c      	str	r4, [r3, #0]
		  dem1 = 0;
 8003e2c:	4b60      	ldr	r3, [pc, #384]	; (8003fb0 <HAL_GPIO_EXTI_Callback+0x21c>)
 8003e2e:	601c      	str	r4, [r3, #0]
		  dem2 = 0;
 8003e30:	4b60      	ldr	r3, [pc, #384]	; (8003fb4 <HAL_GPIO_EXTI_Callback+0x220>)
 8003e32:	601c      	str	r4, [r3, #0]
		  dem3 = 0;
 8003e34:	4b60      	ldr	r3, [pc, #384]	; (8003fb8 <HAL_GPIO_EXTI_Callback+0x224>)
 8003e36:	601c      	str	r4, [r3, #0]
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8003e38:	f7fd f9d2 	bl	80011e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, OFF);
 8003e3c:	4622      	mov	r2, r4
 8003e3e:	2101      	movs	r1, #1
 8003e40:	485a      	ldr	r0, [pc, #360]	; (8003fac <HAL_GPIO_EXTI_Callback+0x218>)
 8003e42:	f7fd f9cd 	bl	80011e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, ON);
 8003e46:	2201      	movs	r2, #1
 8003e48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e4c:	485b      	ldr	r0, [pc, #364]	; (8003fbc <HAL_GPIO_EXTI_Callback+0x228>)
 8003e4e:	f7fd f9c7 	bl	80011e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, OFF);
 8003e52:	4622      	mov	r2, r4
 8003e54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e58:	4858      	ldr	r0, [pc, #352]	; (8003fbc <HAL_GPIO_EXTI_Callback+0x228>)
 8003e5a:	f7fd f9c1 	bl	80011e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, OFF);
 8003e5e:	4622      	mov	r2, r4
 8003e60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e64:	4856      	ldr	r0, [pc, #344]	; (8003fc0 <HAL_GPIO_EXTI_Callback+0x22c>)
 8003e66:	f7fd f9bb 	bl	80011e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, OFF);
 8003e6a:	4622      	mov	r2, r4
 8003e6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e70:	4853      	ldr	r0, [pc, #332]	; (8003fc0 <HAL_GPIO_EXTI_Callback+0x22c>)
 8003e72:	f7fd f9b5 	bl	80011e0 <HAL_GPIO_WritePin>

		  button_state = 2;
 8003e76:	2302      	movs	r3, #2
 8003e78:	e05e      	b.n	8003f38 <HAL_GPIO_EXTI_Callback+0x1a4>
		  break;

	  case 2: //LED4 , DEM1
		  send_debug = 0;
 8003e7a:	2400      	movs	r4, #0
 8003e7c:	4b49      	ldr	r3, [pc, #292]	; (8003fa4 <HAL_GPIO_EXTI_Callback+0x210>)
		  stop_flag = 1;
 8003e7e:	2601      	movs	r6, #1
		  dem1 = 1;
		  dem2 = 0;
		  dem3 = 0;
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8003e80:	2102      	movs	r1, #2

		  button_state = 2;
		  break;

	  case 2: //LED4 , DEM1
		  send_debug = 0;
 8003e82:	601c      	str	r4, [r3, #0]
		  stop_flag = 1;
		  dem1 = 1;
		  dem2 = 0;
		  dem3 = 0;
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8003e84:	4622      	mov	r2, r4
		  button_state = 2;
		  break;

	  case 2: //LED4 , DEM1
		  send_debug = 0;
		  stop_flag = 1;
 8003e86:	4b48      	ldr	r3, [pc, #288]	; (8003fa8 <HAL_GPIO_EXTI_Callback+0x214>)
		  dem1 = 1;
		  dem2 = 0;
		  dem3 = 0;
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8003e88:	4848      	ldr	r0, [pc, #288]	; (8003fac <HAL_GPIO_EXTI_Callback+0x218>)
		  button_state = 2;
		  break;

	  case 2: //LED4 , DEM1
		  send_debug = 0;
		  stop_flag = 1;
 8003e8a:	601e      	str	r6, [r3, #0]
		  dem1 = 1;
 8003e8c:	4b48      	ldr	r3, [pc, #288]	; (8003fb0 <HAL_GPIO_EXTI_Callback+0x21c>)
 8003e8e:	601e      	str	r6, [r3, #0]
		  dem2 = 0;
 8003e90:	4b48      	ldr	r3, [pc, #288]	; (8003fb4 <HAL_GPIO_EXTI_Callback+0x220>)
 8003e92:	601c      	str	r4, [r3, #0]
		  dem3 = 0;
 8003e94:	4b48      	ldr	r3, [pc, #288]	; (8003fb8 <HAL_GPIO_EXTI_Callback+0x224>)
 8003e96:	601c      	str	r4, [r3, #0]
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8003e98:	f7fd f9a2 	bl	80011e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, OFF);
 8003e9c:	4622      	mov	r2, r4
 8003e9e:	4631      	mov	r1, r6
 8003ea0:	4842      	ldr	r0, [pc, #264]	; (8003fac <HAL_GPIO_EXTI_Callback+0x218>)
 8003ea2:	f7fd f99d 	bl	80011e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, OFF);
 8003ea6:	4622      	mov	r2, r4
 8003ea8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003eac:	4843      	ldr	r0, [pc, #268]	; (8003fbc <HAL_GPIO_EXTI_Callback+0x228>)
 8003eae:	f7fd f997 	bl	80011e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, ON);
 8003eb2:	4632      	mov	r2, r6
 8003eb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003eb8:	4840      	ldr	r0, [pc, #256]	; (8003fbc <HAL_GPIO_EXTI_Callback+0x228>)
 8003eba:	f7fd f991 	bl	80011e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, OFF);
 8003ebe:	4622      	mov	r2, r4
 8003ec0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ec4:	483e      	ldr	r0, [pc, #248]	; (8003fc0 <HAL_GPIO_EXTI_Callback+0x22c>)
 8003ec6:	f7fd f98b 	bl	80011e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, OFF);
 8003eca:	4622      	mov	r2, r4
 8003ecc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003ed0:	483b      	ldr	r0, [pc, #236]	; (8003fc0 <HAL_GPIO_EXTI_Callback+0x22c>)
 8003ed2:	f7fd f985 	bl	80011e0 <HAL_GPIO_WritePin>
		  button_state = 3;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e02e      	b.n	8003f38 <HAL_GPIO_EXTI_Callback+0x1a4>
		  break;
	  case 3: //LED6 , DEM2
		  send_debug = 0;
 8003eda:	2400      	movs	r4, #0
 8003edc:	4b31      	ldr	r3, [pc, #196]	; (8003fa4 <HAL_GPIO_EXTI_Callback+0x210>)
		  stop_flag = 1;
 8003ede:	2601      	movs	r6, #1
		  dem1 = 0;
		  dem2 = 1;
		  dem3 = 0;
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8003ee0:	2102      	movs	r1, #2
		  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, OFF);
		  HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, OFF);
		  button_state = 3;
		  break;
	  case 3: //LED6 , DEM2
		  send_debug = 0;
 8003ee2:	601c      	str	r4, [r3, #0]
		  stop_flag = 1;
		  dem1 = 0;
		  dem2 = 1;
		  dem3 = 0;
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8003ee4:	4622      	mov	r2, r4
		  HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, OFF);
		  button_state = 3;
		  break;
	  case 3: //LED6 , DEM2
		  send_debug = 0;
		  stop_flag = 1;
 8003ee6:	4b30      	ldr	r3, [pc, #192]	; (8003fa8 <HAL_GPIO_EXTI_Callback+0x214>)
		  dem1 = 0;
		  dem2 = 1;
		  dem3 = 0;
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8003ee8:	4830      	ldr	r0, [pc, #192]	; (8003fac <HAL_GPIO_EXTI_Callback+0x218>)
		  HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, OFF);
		  button_state = 3;
		  break;
	  case 3: //LED6 , DEM2
		  send_debug = 0;
		  stop_flag = 1;
 8003eea:	601e      	str	r6, [r3, #0]
		  dem1 = 0;
 8003eec:	4b30      	ldr	r3, [pc, #192]	; (8003fb0 <HAL_GPIO_EXTI_Callback+0x21c>)
 8003eee:	601c      	str	r4, [r3, #0]
		  dem2 = 1;
 8003ef0:	4b30      	ldr	r3, [pc, #192]	; (8003fb4 <HAL_GPIO_EXTI_Callback+0x220>)
 8003ef2:	601e      	str	r6, [r3, #0]
		  dem3 = 0;
 8003ef4:	4b30      	ldr	r3, [pc, #192]	; (8003fb8 <HAL_GPIO_EXTI_Callback+0x224>)
 8003ef6:	601c      	str	r4, [r3, #0]
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8003ef8:	f7fd f972 	bl	80011e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, OFF);
 8003efc:	4622      	mov	r2, r4
 8003efe:	4631      	mov	r1, r6
 8003f00:	482a      	ldr	r0, [pc, #168]	; (8003fac <HAL_GPIO_EXTI_Callback+0x218>)
 8003f02:	f7fd f96d 	bl	80011e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, OFF);
 8003f06:	4622      	mov	r2, r4
 8003f08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f0c:	482b      	ldr	r0, [pc, #172]	; (8003fbc <HAL_GPIO_EXTI_Callback+0x228>)
 8003f0e:	f7fd f967 	bl	80011e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, OFF);
 8003f12:	4622      	mov	r2, r4
 8003f14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f18:	4828      	ldr	r0, [pc, #160]	; (8003fbc <HAL_GPIO_EXTI_Callback+0x228>)
 8003f1a:	f7fd f961 	bl	80011e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, ON);
 8003f1e:	4632      	mov	r2, r6
 8003f20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f24:	4826      	ldr	r0, [pc, #152]	; (8003fc0 <HAL_GPIO_EXTI_Callback+0x22c>)
 8003f26:	f7fd f95b 	bl	80011e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, OFF);
 8003f2a:	4622      	mov	r2, r4
 8003f2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f30:	4823      	ldr	r0, [pc, #140]	; (8003fc0 <HAL_GPIO_EXTI_Callback+0x22c>)
 8003f32:	f7fd f955 	bl	80011e0 <HAL_GPIO_WritePin>
		  button_state = 4;
 8003f36:	2304      	movs	r3, #4
 8003f38:	602b      	str	r3, [r5, #0]
		  break;
 8003f3a:	bd70      	pop	{r4, r5, r6, pc}

	  case 4: //LED7 , DEM3
		  send_debug = 0;
 8003f3c:	2400      	movs	r4, #0
 8003f3e:	4b19      	ldr	r3, [pc, #100]	; (8003fa4 <HAL_GPIO_EXTI_Callback+0x210>)
		  stop_flag = 1;
 8003f40:	2601      	movs	r6, #1
		  dem1 = 0;
		  dem2 = 0;
		  dem3 = 1;
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8003f42:	2102      	movs	r1, #2
		  HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, OFF);
		  button_state = 4;
		  break;

	  case 4: //LED7 , DEM3
		  send_debug = 0;
 8003f44:	601c      	str	r4, [r3, #0]
		  stop_flag = 1;
		  dem1 = 0;
		  dem2 = 0;
		  dem3 = 1;
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8003f46:	4622      	mov	r2, r4
		  button_state = 4;
		  break;

	  case 4: //LED7 , DEM3
		  send_debug = 0;
		  stop_flag = 1;
 8003f48:	4b17      	ldr	r3, [pc, #92]	; (8003fa8 <HAL_GPIO_EXTI_Callback+0x214>)
		  dem1 = 0;
		  dem2 = 0;
		  dem3 = 1;
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8003f4a:	4818      	ldr	r0, [pc, #96]	; (8003fac <HAL_GPIO_EXTI_Callback+0x218>)
		  button_state = 4;
		  break;

	  case 4: //LED7 , DEM3
		  send_debug = 0;
		  stop_flag = 1;
 8003f4c:	601e      	str	r6, [r3, #0]
		  dem1 = 0;
 8003f4e:	4b18      	ldr	r3, [pc, #96]	; (8003fb0 <HAL_GPIO_EXTI_Callback+0x21c>)
 8003f50:	601c      	str	r4, [r3, #0]
		  dem2 = 0;
 8003f52:	4b18      	ldr	r3, [pc, #96]	; (8003fb4 <HAL_GPIO_EXTI_Callback+0x220>)
 8003f54:	601c      	str	r4, [r3, #0]
		  dem3 = 1;
 8003f56:	4b18      	ldr	r3, [pc, #96]	; (8003fb8 <HAL_GPIO_EXTI_Callback+0x224>)
 8003f58:	601e      	str	r6, [r3, #0]
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8003f5a:	f7fd f941 	bl	80011e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, OFF);
 8003f5e:	4622      	mov	r2, r4
 8003f60:	4631      	mov	r1, r6
 8003f62:	4812      	ldr	r0, [pc, #72]	; (8003fac <HAL_GPIO_EXTI_Callback+0x218>)
 8003f64:	f7fd f93c 	bl	80011e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, OFF);
 8003f68:	4622      	mov	r2, r4
 8003f6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f6e:	4813      	ldr	r0, [pc, #76]	; (8003fbc <HAL_GPIO_EXTI_Callback+0x228>)
 8003f70:	f7fd f936 	bl	80011e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, OFF);
 8003f74:	4622      	mov	r2, r4
 8003f76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f7a:	4810      	ldr	r0, [pc, #64]	; (8003fbc <HAL_GPIO_EXTI_Callback+0x228>)
 8003f7c:	f7fd f930 	bl	80011e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, OFF);
 8003f80:	4622      	mov	r2, r4
 8003f82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f86:	480e      	ldr	r0, [pc, #56]	; (8003fc0 <HAL_GPIO_EXTI_Callback+0x22c>)
 8003f88:	f7fd f92a 	bl	80011e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, ON);
 8003f8c:	4632      	mov	r2, r6
 8003f8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f92:	480b      	ldr	r0, [pc, #44]	; (8003fc0 <HAL_GPIO_EXTI_Callback+0x22c>)
 8003f94:	f7fd f924 	bl	80011e0 <HAL_GPIO_WritePin>
		  button_state = 0;
 8003f98:	602c      	str	r4, [r5, #0]
 8003f9a:	bd70      	pop	{r4, r5, r6, pc}
 8003f9c:	200001e4 	.word	0x200001e4
 8003fa0:	08007049 	.word	0x08007049
 8003fa4:	20000324 	.word	0x20000324
 8003fa8:	20000014 	.word	0x20000014
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	20000344 	.word	0x20000344
 8003fb4:	20000348 	.word	0x20000348
 8003fb8:	2000034c 	.word	0x2000034c
 8003fbc:	40020400 	.word	0x40020400
 8003fc0:	40020800 	.word	0x40020800

08003fc4 <HAL_SPI_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003fc4:	4770      	bx	lr
	...

08003fc8 <Error_Handler>:

void Error_Handler(void)
{
  while(1) 
  {
	  sprintf(tx_buffer, "State: %d", HAL_state);
 8003fc8:	4c05      	ldr	r4, [pc, #20]	; (8003fe0 <Error_Handler+0x18>)
  //wTransferState = TRANSFER_ERROR;
  //HAL_GPIO_TogglePin(GPIOD, LED5_Pin);
}

void Error_Handler(void)
{
 8003fca:	b508      	push	{r3, lr}
  while(1) 
  {
	  sprintf(tx_buffer, "State: %d", HAL_state);
 8003fcc:	6822      	ldr	r2, [r4, #0]
 8003fce:	4905      	ldr	r1, [pc, #20]	; (8003fe4 <Error_Handler+0x1c>)
 8003fd0:	4805      	ldr	r0, [pc, #20]	; (8003fe8 <Error_Handler+0x20>)
 8003fd2:	f002 fa1b 	bl	800640c <siprintf>
	  Transmit(tx_buffer);
 8003fd6:	4804      	ldr	r0, [pc, #16]	; (8003fe8 <Error_Handler+0x20>)
 8003fd8:	f7ff f888 	bl	80030ec <Transmit>
 8003fdc:	e7f6      	b.n	8003fcc <Error_Handler+0x4>
 8003fde:	bf00      	nop
 8003fe0:	20000b40 	.word	0x20000b40
 8003fe4:	0800705b 	.word	0x0800705b
 8003fe8:	20001e54 	.word	0x20001e54

08003fec <Program_Walls_Flash>:

}
*/

#define EQUAL_VAL 200
void Program_Walls_Flash() {
 8003fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
/*
 * Program the horizontal walls, vertical walls, squares visited and ending direction into the flash.
 */

#if DEBUG == TRUE
Transmit("Programming Walls in Flash.....\r\n");
 8003ff0:	4851      	ldr	r0, [pc, #324]	; (8004138 <Program_Walls_Flash+0x14c>)
HAL_FLASH_Unlock();

EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
EraseInitStruct.Sector        = FLASH_SECTOR_5;
EraseInitStruct.NbSectors     = 1;
 8003ff2:	2402      	movs	r4, #2
/*
 * Program the horizontal walls, vertical walls, squares visited and ending direction into the flash.
 */

#if DEBUG == TRUE
Transmit("Programming Walls in Flash.....\r\n");
 8003ff4:	f7ff f87a 	bl	80030ec <Transmit>
#endif
HAL_FLASH_Unlock();
 8003ff8:	f7fc feee 	bl	8000dd8 <HAL_FLASH_Unlock>

EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
EraseInitStruct.Sector        = FLASH_SECTOR_5;
EraseInitStruct.NbSectors     = 1;
 8003ffc:	2100      	movs	r1, #0
#if DEBUG == TRUE
Transmit("Programming Walls in Flash.....\r\n");
#endif
HAL_FLASH_Unlock();

EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8003ffe:	484f      	ldr	r0, [pc, #316]	; (800413c <Program_Walls_Flash+0x150>)
EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
EraseInitStruct.Sector        = FLASH_SECTOR_5;
EraseInitStruct.NbSectors     = 1;
 8004000:	2205      	movs	r2, #5
 8004002:	2301      	movs	r3, #1
 8004004:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}

if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8004008:	494d      	ldr	r1, [pc, #308]	; (8004140 <Program_Walls_Flash+0x154>)
 800400a:	f7fc ffaf 	bl	8000f6c <HAL_FLASHEx_Erase>
 800400e:	b178      	cbz	r0, 8004030 <Program_Walls_Flash+0x44>
  {
    while (1)
    {
#if DEBUG == TRUE
      Transmit("Programming Error! \r\n");
 8004010:	484c      	ldr	r0, [pc, #304]	; (8004144 <Program_Walls_Flash+0x158>)
 8004012:	f7ff f86b 	bl	80030ec <Transmit>
#endif
      Turn_On_Lights();
 8004016:	f7ff fd85 	bl	8003b24 <Turn_On_Lights>
      HAL_Delay(1000);
 800401a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800401e:	f7fc f9a7 	bl	8000370 <HAL_Delay>
      Turn_Off_Lights();
 8004022:	f7ff fdb9 	bl	8003b98 <Turn_Off_Lights>
      HAL_Delay(1000);
 8004026:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800402a:	f7fc f9a1 	bl	8000370 <HAL_Delay>
 800402e:	e7ef      	b.n	8004010 <Program_Walls_Flash+0x24>
    }
  }

Address = WALLS_ADDR;
 8004030:	4c45      	ldr	r4, [pc, #276]	; (8004148 <Program_Walls_Flash+0x15c>)
 8004032:	4605      	mov	r5, r0
 8004034:	4b45      	ldr	r3, [pc, #276]	; (800414c <Program_Walls_Flash+0x160>)

for (int i = 0; i < X_MAZE_SIZE; i++) { //program horizontal walls byte by byte
	for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, horiz_walls[i][j]) == HAL_OK) {
 8004036:	4e46      	ldr	r6, [pc, #280]	; (8004150 <Program_Walls_Flash+0x164>)
 8004038:	46a0      	mov	r8, r4
      Turn_Off_Lights();
      HAL_Delay(1000);
    }
  }

Address = WALLS_ADDR;
 800403a:	6023      	str	r3, [r4, #0]

}
*/

#define EQUAL_VAL 200
void Program_Walls_Flash() {
 800403c:	2700      	movs	r7, #0
Address = WALLS_ADDR;

for (int i = 0; i < X_MAZE_SIZE; i++) { //program horizontal walls byte by byte
	for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, horiz_walls[i][j]) == HAL_OK) {
 800403e:	eb06 0905 	add.w	r9, r6, r5
 8004042:	f819 2007 	ldrb.w	r2, [r9, r7]
 8004046:	2300      	movs	r3, #0
 8004048:	6821      	ldr	r1, [r4, #0]
 800404a:	2000      	movs	r0, #0
 800404c:	f7fc ff0e 	bl	8000e6c <HAL_FLASH_Program>
 8004050:	b9b8      	cbnz	r0, 8004082 <Program_Walls_Flash+0x96>
			Address = Address + 4;
 8004052:	f8d8 3000 	ldr.w	r3, [r8]
  }

Address = WALLS_ADDR;

for (int i = 0; i < X_MAZE_SIZE; i++) { //program horizontal walls byte by byte
	for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
 8004056:	3701      	adds	r7, #1

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, horiz_walls[i][j]) == HAL_OK) {
			Address = Address + 4;
 8004058:	3304      	adds	r3, #4
  }

Address = WALLS_ADDR;

for (int i = 0; i < X_MAZE_SIZE; i++) { //program horizontal walls byte by byte
	for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
 800405a:	2f0f      	cmp	r7, #15

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, horiz_walls[i][j]) == HAL_OK) {
			Address = Address + 4;
 800405c:	f8c8 3000 	str.w	r3, [r8]
  }

Address = WALLS_ADDR;

for (int i = 0; i < X_MAZE_SIZE; i++) { //program horizontal walls byte by byte
	for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
 8004060:	d1ef      	bne.n	8004042 <Program_Walls_Flash+0x56>
 8004062:	e013      	b.n	800408c <Program_Walls_Flash+0xa0>
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) { //program vertical walls
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, vert_walls[i][j]) == HAL_OK) {
			Address = Address + 4;
 8004064:	682b      	ldr	r3, [r5, #0]
		}
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) { //program vertical walls
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
 8004066:	3701      	adds	r7, #1
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, vert_walls[i][j]) == HAL_OK) {
			Address = Address + 4;
 8004068:	3304      	adds	r3, #4
		}
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) { //program vertical walls
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
 800406a:	2f10      	cmp	r7, #16
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, vert_walls[i][j]) == HAL_OK) {
			Address = Address + 4;
 800406c:	602b      	str	r3, [r5, #0]
		}
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) { //program vertical walls
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
 800406e:	d018      	beq.n	80040a2 <Program_Walls_Flash+0xb6>
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, vert_walls[i][j]) == HAL_OK) {
 8004070:	f818 2007 	ldrb.w	r2, [r8, r7]
 8004074:	2300      	movs	r3, #0
 8004076:	6821      	ldr	r1, [r4, #0]
 8004078:	2000      	movs	r0, #0
 800407a:	f7fc fef7 	bl	8000e6c <HAL_FLASH_Program>
 800407e:	2800      	cmp	r0, #0
 8004080:	d0f0      	beq.n	8004064 <Program_Walls_Flash+0x78>

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, horiz_walls[i][j]) == HAL_OK) {
			Address = Address + 4;
		}
		else {
			HAL_state = FUCKEDUP;
 8004082:	2245      	movs	r2, #69	; 0x45
 8004084:	4b33      	ldr	r3, [pc, #204]	; (8004154 <Program_Walls_Flash+0x168>)
 8004086:	601a      	str	r2, [r3, #0]
			Error_Handler();
 8004088:	f7ff ff9e 	bl	8003fc8 <Error_Handler>
 800408c:	350f      	adds	r5, #15
    }
  }

Address = WALLS_ADDR;

for (int i = 0; i < X_MAZE_SIZE; i++) { //program horizontal walls byte by byte
 800408e:	2df0      	cmp	r5, #240	; 0xf0
 8004090:	d1d4      	bne.n	800403c <Program_Walls_Flash+0x50>
 8004092:	4606      	mov	r6, r0
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) { //program vertical walls
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, vert_walls[i][j]) == HAL_OK) {
 8004094:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8004168 <Program_Walls_Flash+0x17c>
 8004098:	4d2b      	ldr	r5, [pc, #172]	; (8004148 <Program_Walls_Flash+0x15c>)
      Turn_Off_Lights();
      HAL_Delay(1000);
    }
  }

Address = WALLS_ADDR;
 800409a:	2700      	movs	r7, #0
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) { //program vertical walls
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, vert_walls[i][j]) == HAL_OK) {
 800409c:	eb09 0806 	add.w	r8, r9, r6
 80040a0:	e7e6      	b.n	8004070 <Program_Walls_Flash+0x84>
 80040a2:	3610      	adds	r6, #16
			Error_Handler();
		}
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) { //program vertical walls
 80040a4:	2ef0      	cmp	r6, #240	; 0xf0
 80040a6:	d1f8      	bne.n	800409a <Program_Walls_Flash+0xae>
 80040a8:	4605      	mov	r5, r0
	}
}

for (int i = 0; i < X_MAZE_SIZE; i++) { //program visited array
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, visited_squares[i][j]) == HAL_OK) {
 80040aa:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 800416c <Program_Walls_Flash+0x180>
 80040ae:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8004148 <Program_Walls_Flash+0x15c>
    }
  }

Address = WALLS_ADDR;

for (int i = 0; i < X_MAZE_SIZE; i++) { //program horizontal walls byte by byte
 80040b2:	2600      	movs	r6, #0
	}
}

for (int i = 0; i < X_MAZE_SIZE; i++) { //program visited array
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, visited_squares[i][j]) == HAL_OK) {
 80040b4:	eb05 090a 	add.w	r9, r5, sl
 80040b8:	2300      	movs	r3, #0
 80040ba:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 80040be:	6821      	ldr	r1, [r4, #0]
 80040c0:	2002      	movs	r0, #2
 80040c2:	f7fc fed3 	bl	8000e6c <HAL_FLASH_Program>
 80040c6:	4f20      	ldr	r7, [pc, #128]	; (8004148 <Program_Walls_Flash+0x15c>)
 80040c8:	4603      	mov	r3, r0
 80040ca:	2800      	cmp	r0, #0
 80040cc:	d1d9      	bne.n	8004082 <Program_Walls_Flash+0x96>
			Address = Address + 4;
 80040ce:	f8d8 1000 	ldr.w	r1, [r8]
		}
	}
}

for (int i = 0; i < X_MAZE_SIZE; i++) { //program visited array
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
 80040d2:	3601      	adds	r6, #1
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, visited_squares[i][j]) == HAL_OK) {
			Address = Address + 4;
 80040d4:	3104      	adds	r1, #4
		}
	}
}

for (int i = 0; i < X_MAZE_SIZE; i++) { //program visited array
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
 80040d6:	2e10      	cmp	r6, #16
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, visited_squares[i][j]) == HAL_OK) {
			Address = Address + 4;
 80040d8:	f8c8 1000 	str.w	r1, [r8]
		}
	}
}

for (int i = 0; i < X_MAZE_SIZE; i++) { //program visited array
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
 80040dc:	d1ec      	bne.n	80040b8 <Program_Walls_Flash+0xcc>
 80040de:	3540      	adds	r5, #64	; 0x40
			Error_Handler();
		}
	}
}

for (int i = 0; i < X_MAZE_SIZE; i++) { //program visited array
 80040e0:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80040e4:	d1e5      	bne.n	80040b2 <Program_Walls_Flash+0xc6>
}

/*
 * for returning after floodfill
 */
if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, final_x) == HAL_OK) { //program final x
 80040e6:	4a1c      	ldr	r2, [pc, #112]	; (8004158 <Program_Walls_Flash+0x16c>)
 80040e8:	2002      	movs	r0, #2
 80040ea:	6812      	ldr	r2, [r2, #0]
 80040ec:	f7fc febe 	bl	8000e6c <HAL_FLASH_Program>
 80040f0:	b910      	cbnz	r0, 80040f8 <Program_Walls_Flash+0x10c>
	Address = Address + 4;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	3304      	adds	r3, #4
 80040f6:	603b      	str	r3, [r7, #0]
}

if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, final_y) == HAL_OK) { //program final y
 80040f8:	4b18      	ldr	r3, [pc, #96]	; (800415c <Program_Walls_Flash+0x170>)
 80040fa:	2002      	movs	r0, #2
 80040fc:	6821      	ldr	r1, [r4, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	2300      	movs	r3, #0
 8004102:	4d11      	ldr	r5, [pc, #68]	; (8004148 <Program_Walls_Flash+0x15c>)
 8004104:	f7fc feb2 	bl	8000e6c <HAL_FLASH_Program>
 8004108:	b910      	cbnz	r0, 8004110 <Program_Walls_Flash+0x124>
	Address = Address + 4;
 800410a:	682b      	ldr	r3, [r5, #0]
 800410c:	3304      	adds	r3, #4
 800410e:	602b      	str	r3, [r5, #0]
}

if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, final_dir) == HAL_OK) { //program final direction
 8004110:	4b13      	ldr	r3, [pc, #76]	; (8004160 <Program_Walls_Flash+0x174>)
 8004112:	2002      	movs	r0, #2
 8004114:	6821      	ldr	r1, [r4, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	4d0b      	ldr	r5, [pc, #44]	; (8004148 <Program_Walls_Flash+0x15c>)
 800411a:	17d3      	asrs	r3, r2, #31
 800411c:	f7fc fea6 	bl	8000e6c <HAL_FLASH_Program>
 8004120:	b910      	cbnz	r0, 8004128 <Program_Walls_Flash+0x13c>
	Address = Address + 4;
 8004122:	682b      	ldr	r3, [r5, #0]
 8004124:	3304      	adds	r3, #4
 8004126:	602b      	str	r3, [r5, #0]
}


#if DEBUG == TRUE
Transmit("Done! \r\n");
 8004128:	480e      	ldr	r0, [pc, #56]	; (8004164 <Program_Walls_Flash+0x178>)
 800412a:	f7fe ffdf 	bl	80030ec <Transmit>
#endif
HAL_FLASH_Lock();
}
 800412e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}


#if DEBUG == TRUE
Transmit("Done! \r\n");
#endif
HAL_FLASH_Lock();
 8004132:	f7fc be63 	b.w	8000dfc <HAL_FLASH_Lock>
 8004136:	bf00      	nop
 8004138:	08007065 	.word	0x08007065
 800413c:	20001334 	.word	0x20001334
 8004140:	200001d0 	.word	0x200001d0
 8004144:	08007087 	.word	0x08007087
 8004148:	200001b8 	.word	0x200001b8
 800414c:	08040000 	.word	0x08040000
 8004150:	200000c4 	.word	0x200000c4
 8004154:	20000b40 	.word	0x20000b40
 8004158:	200001bc 	.word	0x200001bc
 800415c:	200001c0 	.word	0x200001c0
 8004160:	20000208 	.word	0x20000208
 8004164:	08006ef6 	.word	0x08006ef6
 8004168:	20000218 	.word	0x20000218
 800416c:	20002504 	.word	0x20002504

08004170 <Start_IR>:
	 */
	__HAL_TIM_SET_COUNTER(&htim1, 0); //reset counters --left encoder
	__HAL_TIM_SET_COUNTER(&htim4, 0); //right encdoer
}

void Start_IR() {
 8004170:	b508      	push	{r3, lr}
	/*
	 * Function used to start the ADC conversion process
	 */

	adc_conv = FALSE;
 8004172:	2200      	movs	r2, #0
 8004174:	4b05      	ldr	r3, [pc, #20]	; (800418c <Start_IR+0x1c>)
	if(HAL_ADC_Start_DMA(&hadc1, ADC_valbuffer, ADC_VAL_BUFFER_LENGTH) != HAL_OK)
 8004176:	4906      	ldr	r1, [pc, #24]	; (8004190 <Start_IR+0x20>)
void Start_IR() {
	/*
	 * Function used to start the ADC conversion process
	 */

	adc_conv = FALSE;
 8004178:	601a      	str	r2, [r3, #0]
	if(HAL_ADC_Start_DMA(&hadc1, ADC_valbuffer, ADC_VAL_BUFFER_LENGTH) != HAL_OK)
 800417a:	2220      	movs	r2, #32
 800417c:	4805      	ldr	r0, [pc, #20]	; (8004194 <Start_IR+0x24>)
 800417e:	f7fc f9af 	bl	80004e0 <HAL_ADC_Start_DMA>
 8004182:	b108      	cbz	r0, 8004188 <Start_IR+0x18>
	  {
		 Error_Handler();
 8004184:	f7ff ff20 	bl	8003fc8 <Error_Handler>
 8004188:	bd08      	pop	{r3, pc}
 800418a:	bf00      	nop
 800418c:	20000314 	.word	0x20000314
 8004190:	20002484 	.word	0x20002484
 8004194:	20001f1c 	.word	0x20001f1c

08004198 <Get_IR>:
		 Error_Handler();
	  }

}

void Get_IR(int front_save, int side_save, int front_disable, int side_disable) { //front and side variables used to save values in a buffer
 8004198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800419c:	460d      	mov	r5, r1
 800419e:	461f      	mov	r7, r3
	int off_lf = 0;

	int comp_lf = 0;
	int comp_rf = 0;

	if (front_disable == FALSE) {
 80041a0:	4616      	mov	r6, r2
 80041a2:	bb22      	cbnz	r2, 80041ee <Get_IR+0x56>
		//left sensor
		Start_IR();
 80041a4:	f7ff ffe4 	bl	8004170 <Start_IR>
		while (adc_conv == FALSE);
 80041a8:	4a63      	ldr	r2, [pc, #396]	; (8004338 <Get_IR+0x1a0>)
 80041aa:	6813      	ldr	r3, [r2, #0]
 80041ac:	f8df 9188 	ldr.w	r9, [pc, #392]	; 8004338 <Get_IR+0x1a0>
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d0fa      	beq.n	80041aa <Get_IR+0x12>
		off_l = l;
 80041b4:	4c61      	ldr	r4, [pc, #388]	; (800433c <Get_IR+0x1a4>)
		HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, ON);
 80041b6:	2201      	movs	r2, #1
 80041b8:	2110      	movs	r1, #16
 80041ba:	4861      	ldr	r0, [pc, #388]	; (8004340 <Get_IR+0x1a8>)

	if (front_disable == FALSE) {
		//left sensor
		Start_IR();
		while (adc_conv == FALSE);
		off_l = l;
 80041bc:	f8d4 8000 	ldr.w	r8, [r4]
		HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, ON);
 80041c0:	f7fd f80e 	bl	80011e0 <HAL_GPIO_WritePin>
		Start_IR();
 80041c4:	f7ff ffd4 	bl	8004170 <Start_IR>
		while (adc_conv == FALSE);
 80041c8:	f8d9 3000 	ldr.w	r3, [r9]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0fb      	beq.n	80041c8 <Get_IR+0x30>
		on_l = l;
 80041d0:	6824      	ldr	r4, [r4, #0]
		HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, OFF);
 80041d2:	2200      	movs	r2, #0
 80041d4:	2110      	movs	r1, #16
 80041d6:	485a      	ldr	r0, [pc, #360]	; (8004340 <Get_IR+0x1a8>)
 80041d8:	f7fd f802 	bl	80011e0 <HAL_GPIO_WritePin>
		dif_l = on_l - off_l; //val_array[0]
 80041dc:	ebc8 0404 	rsb	r4, r8, r4
 80041e0:	4b58      	ldr	r3, [pc, #352]	; (8004344 <Get_IR+0x1ac>)
 80041e2:	601c      	str	r4, [r3, #0]
	}

	//right front
	if (side_disable == FALSE) {
 80041e4:	b12f      	cbz	r7, 80041f2 <Get_IR+0x5a>
		dif_lf = on_lf - off_lf; //val_array[3]
	}

	//right sensor
	if (front_disable == FALSE) {
		Start_IR();
 80041e6:	f7ff ffc3 	bl	8004170 <Start_IR>
		while (adc_conv == FALSE);
 80041ea:	4a53      	ldr	r2, [pc, #332]	; (8004338 <Get_IR+0x1a0>)
 80041ec:	e03d      	b.n	800426a <Get_IR+0xd2>
		HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, OFF);
		dif_l = on_l - off_l; //val_array[0]
	}

	//right front
	if (side_disable == FALSE) {
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d154      	bne.n	800429c <Get_IR+0x104>
		Start_IR();
 80041f2:	f7ff ffbd 	bl	8004170 <Start_IR>
		while (adc_conv == FALSE);
 80041f6:	4a50      	ldr	r2, [pc, #320]	; (8004338 <Get_IR+0x1a0>)
 80041f8:	6813      	ldr	r3, [r2, #0]
 80041fa:	4f4f      	ldr	r7, [pc, #316]	; (8004338 <Get_IR+0x1a0>)
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0fb      	beq.n	80041f8 <Get_IR+0x60>
		off_rf = rf;
 8004200:	4c51      	ldr	r4, [pc, #324]	; (8004348 <Get_IR+0x1b0>)
		HAL_GPIO_WritePin(RF_EMIT_PORT, RF_EMIT_PIN, ON);
 8004202:	2201      	movs	r2, #1
 8004204:	2104      	movs	r1, #4
 8004206:	484e      	ldr	r0, [pc, #312]	; (8004340 <Get_IR+0x1a8>)

	//right front
	if (side_disable == FALSE) {
		Start_IR();
		while (adc_conv == FALSE);
		off_rf = rf;
 8004208:	f8d4 8000 	ldr.w	r8, [r4]
		HAL_GPIO_WritePin(RF_EMIT_PORT, RF_EMIT_PIN, ON);
 800420c:	f7fc ffe8 	bl	80011e0 <HAL_GPIO_WritePin>
		Start_IR();
 8004210:	f7ff ffae 	bl	8004170 <Start_IR>
		while (adc_conv == FALSE);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0fc      	beq.n	8004214 <Get_IR+0x7c>
		on_rf = rf;
 800421a:	6824      	ldr	r4, [r4, #0]
		HAL_GPIO_WritePin(RF_EMIT_PORT, RF_EMIT_PIN, OFF);
 800421c:	2200      	movs	r2, #0
 800421e:	2104      	movs	r1, #4
 8004220:	4847      	ldr	r0, [pc, #284]	; (8004340 <Get_IR+0x1a8>)
 8004222:	f7fc ffdd 	bl	80011e0 <HAL_GPIO_WritePin>
		dif_rf = on_rf - off_rf; //val_array[2]
 8004226:	ebc8 0404 	rsb	r4, r8, r4
 800422a:	4b48      	ldr	r3, [pc, #288]	; (800434c <Get_IR+0x1b4>)
 800422c:	601c      	str	r4, [r3, #0]
	}

	//left front
	if (side_disable == FALSE) {
		Start_IR();
 800422e:	f7ff ff9f 	bl	8004170 <Start_IR>
		while (adc_conv == FALSE);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0fc      	beq.n	8004232 <Get_IR+0x9a>
		off_lf = lf;
 8004238:	4c45      	ldr	r4, [pc, #276]	; (8004350 <Get_IR+0x1b8>)
		HAL_GPIO_WritePin(LF_EMIT_PORT, LF_EMIT_PIN, ON);
 800423a:	2201      	movs	r2, #1
 800423c:	2108      	movs	r1, #8
 800423e:	4840      	ldr	r0, [pc, #256]	; (8004340 <Get_IR+0x1a8>)

	//left front
	if (side_disable == FALSE) {
		Start_IR();
		while (adc_conv == FALSE);
		off_lf = lf;
 8004240:	f8d4 8000 	ldr.w	r8, [r4]
		HAL_GPIO_WritePin(LF_EMIT_PORT, LF_EMIT_PIN, ON);
 8004244:	f7fc ffcc 	bl	80011e0 <HAL_GPIO_WritePin>
		Start_IR();
 8004248:	f7ff ff92 	bl	8004170 <Start_IR>
		while (adc_conv == FALSE);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0fc      	beq.n	800424c <Get_IR+0xb4>
		on_lf = lf;
 8004252:	6824      	ldr	r4, [r4, #0]
		HAL_GPIO_WritePin(LF_EMIT_PORT, LF_EMIT_PIN, OFF);
 8004254:	2200      	movs	r2, #0
 8004256:	2108      	movs	r1, #8
 8004258:	4839      	ldr	r0, [pc, #228]	; (8004340 <Get_IR+0x1a8>)
 800425a:	f7fc ffc1 	bl	80011e0 <HAL_GPIO_WritePin>
		dif_lf = on_lf - off_lf; //val_array[3]
 800425e:	ebc8 0404 	rsb	r4, r8, r4
 8004262:	4b3c      	ldr	r3, [pc, #240]	; (8004354 <Get_IR+0x1bc>)
 8004264:	601c      	str	r4, [r3, #0]
	}

	//right sensor
	if (front_disable == FALSE) {
 8004266:	b9ce      	cbnz	r6, 800429c <Get_IR+0x104>
 8004268:	e7bd      	b.n	80041e6 <Get_IR+0x4e>
		Start_IR();
		while (adc_conv == FALSE);
 800426a:	6813      	ldr	r3, [r2, #0]
 800426c:	4f32      	ldr	r7, [pc, #200]	; (8004338 <Get_IR+0x1a0>)
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0fb      	beq.n	800426a <Get_IR+0xd2>
		off_r = r;
 8004272:	4c39      	ldr	r4, [pc, #228]	; (8004358 <Get_IR+0x1c0>)
		HAL_GPIO_WritePin(R_EMIT_PORT, R_EMIT_PIN, ON);
 8004274:	2201      	movs	r2, #1
 8004276:	2102      	movs	r1, #2
 8004278:	4831      	ldr	r0, [pc, #196]	; (8004340 <Get_IR+0x1a8>)

	//right sensor
	if (front_disable == FALSE) {
		Start_IR();
		while (adc_conv == FALSE);
		off_r = r;
 800427a:	6826      	ldr	r6, [r4, #0]
		HAL_GPIO_WritePin(R_EMIT_PORT, R_EMIT_PIN, ON);
 800427c:	f7fc ffb0 	bl	80011e0 <HAL_GPIO_WritePin>
		Start_IR();
 8004280:	f7ff ff76 	bl	8004170 <Start_IR>
		while (adc_conv == FALSE);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0fc      	beq.n	8004284 <Get_IR+0xec>
		on_r = r;
 800428a:	6824      	ldr	r4, [r4, #0]
		HAL_GPIO_WritePin(R_EMIT_PORT, R_EMIT_PIN, OFF);
 800428c:	2200      	movs	r2, #0
 800428e:	2102      	movs	r1, #2
 8004290:	482b      	ldr	r0, [pc, #172]	; (8004340 <Get_IR+0x1a8>)
 8004292:	f7fc ffa5 	bl	80011e0 <HAL_GPIO_WritePin>
		dif_r = on_r - off_r; //val_array[1]
 8004296:	1ba4      	subs	r4, r4, r6
 8004298:	4b30      	ldr	r3, [pc, #192]	; (800435c <Get_IR+0x1c4>)
 800429a:	601c      	str	r4, [r3, #0]
	}

	//lf and rf transitions
	if (side_save == TRUE) {
 800429c:	2d01      	cmp	r5, #1
 800429e:	d148      	bne.n	8004332 <Get_IR+0x19a>
		lf_buffer[buff_count] = dif_lf;
 80042a0:	4a2c      	ldr	r2, [pc, #176]	; (8004354 <Get_IR+0x1bc>)
 80042a2:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 80042a6:	482e      	ldr	r0, [pc, #184]	; (8004360 <Get_IR+0x1c8>)
 80042a8:	6811      	ldr	r1, [r2, #0]
		rf_buffer[buff_count] = dif_rf;

		if (cur_move == FWD) {
 80042aa:	4c2e      	ldr	r4, [pc, #184]	; (8004364 <Get_IR+0x1cc>)
	}

	//lf and rf transitions
	if (side_save == TRUE) {
		lf_buffer[buff_count] = dif_lf;
		rf_buffer[buff_count] = dif_rf;
 80042ac:	4a27      	ldr	r2, [pc, #156]	; (800434c <Get_IR+0x1b4>)
		dif_r = on_r - off_r; //val_array[1]
	}

	//lf and rf transitions
	if (side_save == TRUE) {
		lf_buffer[buff_count] = dif_lf;
 80042ae:	6803      	ldr	r3, [r0, #0]
 80042b0:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 8004374 <Get_IR+0x1dc>
		rf_buffer[buff_count] = dif_rf;
 80042b4:	6812      	ldr	r2, [r2, #0]
 80042b6:	4f2c      	ldr	r7, [pc, #176]	; (8004368 <Get_IR+0x1d0>)

		if (cur_move == FWD) {
 80042b8:	6824      	ldr	r4, [r4, #0]
		dif_r = on_r - off_r; //val_array[1]
	}

	//lf and rf transitions
	if (side_save == TRUE) {
		lf_buffer[buff_count] = dif_lf;
 80042ba:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
		rf_buffer[buff_count] = dif_rf;
 80042be:	f847 2023 	str.w	r2, [r7, r3, lsl #2]

		if (cur_move == FWD) {
 80042c2:	b934      	cbnz	r4, 80042d2 <Get_IR+0x13a>
			comp_lf = lf_buffer[((buff_count - IR_DIFF) + IR_BUFFER) % IR_BUFFER];
 80042c4:	f103 0564 	add.w	r5, r3, #100	; 0x64
 80042c8:	fb95 f4f6 	sdiv	r4, r5, r6
 80042cc:	fb06 5414 	mls	r4, r6, r4, r5
 80042d0:	e007      	b.n	80042e2 <Get_IR+0x14a>
			comp_rf = rf_buffer[((buff_count - IR_DIFF) + IR_BUFFER) % IR_BUFFER];

		}
		else if (cur_move == FWD_SPEED) {
 80042d2:	2c06      	cmp	r4, #6
 80042d4:	d123      	bne.n	800431e <Get_IR+0x186>
			comp_lf = lf_buffer[((buff_count - IR_DIFF/2) + IR_BUFFER) % IR_BUFFER];
 80042d6:	f503 7496 	add.w	r4, r3, #300	; 0x12c
 80042da:	fb94 f5f6 	sdiv	r5, r4, r6
 80042de:	fb06 4415 	mls	r4, r6, r5, r4
 80042e2:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
			comp_rf = rf_buffer[((buff_count - IR_DIFF/2) + IR_BUFFER) % IR_BUFFER];
 80042e6:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
		}

		if (comp_lf > 10 && abs(dif_lf  - comp_lf) > L_IR_CHANGE) { //send flag for left transition detected
 80042ea:	2d0a      	cmp	r5, #10
 80042ec:	dd0a      	ble.n	8004304 <Get_IR+0x16c>
 80042ee:	1b49      	subs	r1, r1, r5
 80042f0:	f240 55aa 	movw	r5, #1450	; 0x5aa
 80042f4:	2900      	cmp	r1, #0
 80042f6:	bfb8      	it	lt
 80042f8:	4249      	neglt	r1, r1
 80042fa:	42a9      	cmp	r1, r5
			l_transition_flag = TRUE;
 80042fc:	bfc2      	ittt	gt
 80042fe:	2501      	movgt	r5, #1
 8004300:	491a      	ldrgt	r1, [pc, #104]	; (800436c <Get_IR+0x1d4>)
 8004302:	600d      	strgt	r5, [r1, #0]
		}
		if (comp_rf > 10 && abs(dif_rf - comp_rf) > R_IR_CHANGE) { //send flag for right transition detected
 8004304:	2c0a      	cmp	r4, #10
 8004306:	dd0a      	ble.n	800431e <Get_IR+0x186>
 8004308:	1b12      	subs	r2, r2, r4
 800430a:	f240 51aa 	movw	r1, #1450	; 0x5aa
 800430e:	2a00      	cmp	r2, #0
 8004310:	bfb8      	it	lt
 8004312:	4252      	neglt	r2, r2
 8004314:	428a      	cmp	r2, r1
			r_transition_flag = TRUE;
 8004316:	bfc2      	ittt	gt
 8004318:	2101      	movgt	r1, #1
 800431a:	4a15      	ldrgt	r2, [pc, #84]	; (8004370 <Get_IR+0x1d8>)
 800431c:	6011      	strgt	r1, [r2, #0]
		}
		buff_count = (buff_count+1) % IR_BUFFER;  //increase buffer count
 800431e:	3301      	adds	r3, #1
 8004320:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004324:	fb93 f2f1 	sdiv	r2, r3, r1
 8004328:	fb01 3312 	mls	r3, r1, r2, r3
 800432c:	6003      	str	r3, [r0, #0]
		r_buffer[buff_count] = dif_r;
		buff_count = (buff_count + 1) % IR_BUFFER;
	}
	*/

}
 800432e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004336:	bf00      	nop
 8004338:	20000314 	.word	0x20000314
 800433c:	200000a0 	.word	0x200000a0
 8004340:	40020c00 	.word	0x40020c00
 8004344:	200000a8 	.word	0x200000a8
 8004348:	2000030c 	.word	0x2000030c
 800434c:	200000a4 	.word	0x200000a4
 8004350:	200001dc 	.word	0x200001dc
 8004354:	20000204 	.word	0x20000204
 8004358:	20000340 	.word	0x20000340
 800435c:	200000b0 	.word	0x200000b0
 8004360:	20001348 	.word	0x20001348
 8004364:	20000b3c 	.word	0x20000b3c
 8004368:	20000b64 	.word	0x20000b64
 800436c:	20000b4c 	.word	0x20000b4c
 8004370:	200000c0 	.word	0x200000c0
 8004374:	20000350 	.word	0x20000350

08004378 <Update_Sensors>:
		Update_Position();
	}

}

void Update_Sensors(int state) {
 8004378:	b510      	push	{r4, lr}
 800437a:	4c1b      	ldr	r4, [pc, #108]	; (80043e8 <Update_Sensors+0x70>)

	/*
	 * Decide which sensors to update
	 */
	switch(state) {
 800437c:	2806      	cmp	r0, #6
 800437e:	d819      	bhi.n	80043b4 <Update_Sensors+0x3c>
 8004380:	e8df f000 	tbb	[pc, r0]
 8004384:	0f0b0704 	.word	0x0f0b0704
 8004388:	1818      	.short	0x1818
 800438a:	12          	.byte	0x12
 800438b:	00          	.byte	0x00
		case BARE: //disable nothing, save nothing, only correction
			Get_IR(FALSE, FALSE, FALSE, FALSE); //
 800438c:	2300      	movs	r3, #0
 800438e:	461a      	mov	r2, r3
 8004390:	e001      	b.n	8004396 <Update_Sensors+0x1e>
		break;
		case TURN_SEARCH: //disable front, only detect sides
			Get_IR(FALSE, FALSE, TRUE, FALSE);
 8004392:	2300      	movs	r3, #0
 8004394:	2201      	movs	r2, #1
 8004396:	4619      	mov	r1, r3
 8004398:	e009      	b.n	80043ae <Update_Sensors+0x36>
		break;
		case FWD_SEARCH: //forward searching, detect transitions, disable front
			Get_IR(FALSE, TRUE, FALSE, FALSE);
 800439a:	2300      	movs	r3, #0
 800439c:	2101      	movs	r1, #1
 800439e:	461a      	mov	r2, r3
 80043a0:	e005      	b.n	80043ae <Update_Sensors+0x36>
		break;
		case TIME:
			time_count = __HAL_TIM_GET_COUNTER(&htim5); //update time only
 80043a2:	6823      	ldr	r3, [r4, #0]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		break;
 80043a6:	e005      	b.n	80043b4 <Update_Sensors+0x3c>
		case TEST:
			Get_IR(FALSE, TRUE, TRUE, FALSE);
 80043a8:	2201      	movs	r2, #1
 80043aa:	2300      	movs	r3, #0
 80043ac:	4611      	mov	r1, r2
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7ff fef2 	bl	8004198 <Get_IR>
		break;
	}

	time_count = __HAL_TIM_GET_COUNTER(&htim5);
 80043b4:	6823      	ldr	r3, [r4, #0]
	l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
	r_count = __HAL_TIM_GET_COUNTER(&htim4);
 80043b6:	490d      	ldr	r1, [pc, #52]	; (80043ec <Update_Sensors+0x74>)
		case TEST:
			Get_IR(FALSE, TRUE, TRUE, FALSE);
		break;
	}

	time_count = __HAL_TIM_GET_COUNTER(&htim5);
 80043b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043ba:	4b0d      	ldr	r3, [pc, #52]	; (80043f0 <Update_Sensors+0x78>)
 80043bc:	601a      	str	r2, [r3, #0]
	l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
 80043be:	4b0d      	ldr	r3, [pc, #52]	; (80043f4 <Update_Sensors+0x7c>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043c4:	4b0c      	ldr	r3, [pc, #48]	; (80043f8 <Update_Sensors+0x80>)
 80043c6:	601a      	str	r2, [r3, #0]
	r_count = __HAL_TIM_GET_COUNTER(&htim4);
 80043c8:	4b0c      	ldr	r3, [pc, #48]	; (80043fc <Update_Sensors+0x84>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	600b      	str	r3, [r1, #0]
	lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
 80043d0:	490b      	ldr	r1, [pc, #44]	; (8004400 <Update_Sensors+0x88>)
 80043d2:	6809      	ldr	r1, [r1, #0]
 80043d4:	1a52      	subs	r2, r2, r1
 80043d6:	490b      	ldr	r1, [pc, #44]	; (8004404 <Update_Sensors+0x8c>)
 80043d8:	600a      	str	r2, [r1, #0]
	renc_diff = r_count - prev_r_count;
 80043da:	4a0b      	ldr	r2, [pc, #44]	; (8004408 <Update_Sensors+0x90>)
 80043dc:	6812      	ldr	r2, [r2, #0]
 80043de:	1a9b      	subs	r3, r3, r2
 80043e0:	4a0a      	ldr	r2, [pc, #40]	; (800440c <Update_Sensors+0x94>)
 80043e2:	6013      	str	r3, [r2, #0]
 80043e4:	bd10      	pop	{r4, pc}
 80043e6:	bf00      	nop
 80043e8:	200014a0 	.word	0x200014a0
 80043ec:	2000020c 	.word	0x2000020c
 80043f0:	20001450 	.word	0x20001450
 80043f4:	20002904 	.word	0x20002904
 80043f8:	20000b28 	.word	0x20000b28
 80043fc:	20001458 	.word	0x20001458
 8004400:	20001454 	.word	0x20001454
 8004404:	200000bc 	.word	0x200000bc
 8004408:	200013e8 	.word	0x200013e8
 800440c:	200001e0 	.word	0x200001e0

08004410 <Read_Walls>:
	final_x = 0;
	final_y = 0;
	final_dir = 0;
}

void Read_Walls() {
 8004410:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	 * Walls are sampled x number of times, and the average value is taken
	 */

	#define DIFFERENTIAL 3400 //if the left and right emitter don't agree, then ignore the value

	if (visited_squares[x_coord][y_coord] == TRUE) { //if mouse has already visited square, return
 8004414:	4a8b      	ldr	r2, [pc, #556]	; (8004644 <Read_Walls+0x234>)
 8004416:	4c8c      	ldr	r4, [pc, #560]	; (8004648 <Read_Walls+0x238>)
 8004418:	6811      	ldr	r1, [r2, #0]
 800441a:	4690      	mov	r8, r2
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8004422:	498a      	ldr	r1, [pc, #552]	; (800464c <Read_Walls+0x23c>)
 8004424:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004428:	2b01      	cmp	r3, #1
 800442a:	f000 8109 	beq.w	8004640 <Read_Walls+0x230>
 800442e:	f04f 0905 	mov.w	r9, #5
	static int lf_side = 0;
	static int rf_side = 0;

	for (int i = 0; i < WALL_SAMPLES; i++) { //sample infrared values multiple times
		Get_IR(FALSE, FALSE, FALSE, FALSE);
		front_l = front_l + dif_l;
 8004432:	f8df a240 	ldr.w	sl, [pc, #576]	; 8004674 <Read_Walls+0x264>
 8004436:	f8df b240 	ldr.w	fp, [pc, #576]	; 8004678 <Read_Walls+0x268>
	static int front_r = 0;
	static int lf_side = 0;
	static int rf_side = 0;

	for (int i = 0; i < WALL_SAMPLES; i++) { //sample infrared values multiple times
		Get_IR(FALSE, FALSE, FALSE, FALSE);
 800443a:	2300      	movs	r3, #0
		front_l = front_l + dif_l;
		front_r = front_r + dif_r;
 800443c:	4e84      	ldr	r6, [pc, #528]	; (8004650 <Read_Walls+0x240>)
		lf_side = lf_side + dif_lf;
 800443e:	4d85      	ldr	r5, [pc, #532]	; (8004654 <Read_Walls+0x244>)
	static int front_r = 0;
	static int lf_side = 0;
	static int rf_side = 0;

	for (int i = 0; i < WALL_SAMPLES; i++) { //sample infrared values multiple times
		Get_IR(FALSE, FALSE, FALSE, FALSE);
 8004440:	461a      	mov	r2, r3
 8004442:	4619      	mov	r1, r3
 8004444:	4618      	mov	r0, r3
		front_l = front_l + dif_l;
		front_r = front_r + dif_r;
		lf_side = lf_side + dif_lf;
		rf_side = rf_side + dif_rf;
 8004446:	4f84      	ldr	r7, [pc, #528]	; (8004658 <Read_Walls+0x248>)
	static int front_r = 0;
	static int lf_side = 0;
	static int rf_side = 0;

	for (int i = 0; i < WALL_SAMPLES; i++) { //sample infrared values multiple times
		Get_IR(FALSE, FALSE, FALSE, FALSE);
 8004448:	f7ff fea6 	bl	8004198 <Get_IR>
		front_l = front_l + dif_l;
 800444c:	f8da 2000 	ldr.w	r2, [sl]
 8004450:	f8db 3000 	ldr.w	r3, [fp]
	static int front_l = 0;
	static int front_r = 0;
	static int lf_side = 0;
	static int rf_side = 0;

	for (int i = 0; i < WALL_SAMPLES; i++) { //sample infrared values multiple times
 8004454:	f1b9 0901 	subs.w	r9, r9, #1
		Get_IR(FALSE, FALSE, FALSE, FALSE);
		front_l = front_l + dif_l;
		front_r = front_r + dif_r;
 8004458:	6831      	ldr	r1, [r6, #0]
	static int lf_side = 0;
	static int rf_side = 0;

	for (int i = 0; i < WALL_SAMPLES; i++) { //sample infrared values multiple times
		Get_IR(FALSE, FALSE, FALSE, FALSE);
		front_l = front_l + dif_l;
 800445a:	441a      	add	r2, r3
		front_r = front_r + dif_r;
 800445c:	4b7f      	ldr	r3, [pc, #508]	; (800465c <Read_Walls+0x24c>)
		lf_side = lf_side + dif_lf;
 800445e:	4880      	ldr	r0, [pc, #512]	; (8004660 <Read_Walls+0x250>)
	static int rf_side = 0;

	for (int i = 0; i < WALL_SAMPLES; i++) { //sample infrared values multiple times
		Get_IR(FALSE, FALSE, FALSE, FALSE);
		front_l = front_l + dif_l;
		front_r = front_r + dif_r;
 8004460:	681b      	ldr	r3, [r3, #0]
		lf_side = lf_side + dif_lf;
 8004462:	6800      	ldr	r0, [r0, #0]
	static int rf_side = 0;

	for (int i = 0; i < WALL_SAMPLES; i++) { //sample infrared values multiple times
		Get_IR(FALSE, FALSE, FALSE, FALSE);
		front_l = front_l + dif_l;
		front_r = front_r + dif_r;
 8004464:	440b      	add	r3, r1
		lf_side = lf_side + dif_lf;
 8004466:	6829      	ldr	r1, [r5, #0]
		rf_side = rf_side + dif_rf;
 8004468:	f8d7 e000 	ldr.w	lr, [r7]

	for (int i = 0; i < WALL_SAMPLES; i++) { //sample infrared values multiple times
		Get_IR(FALSE, FALSE, FALSE, FALSE);
		front_l = front_l + dif_l;
		front_r = front_r + dif_r;
		lf_side = lf_side + dif_lf;
 800446c:	4408      	add	r0, r1
		rf_side = rf_side + dif_rf;
 800446e:	497d      	ldr	r1, [pc, #500]	; (8004664 <Read_Walls+0x254>)
	static int lf_side = 0;
	static int rf_side = 0;

	for (int i = 0; i < WALL_SAMPLES; i++) { //sample infrared values multiple times
		Get_IR(FALSE, FALSE, FALSE, FALSE);
		front_l = front_l + dif_l;
 8004470:	f8ca 2000 	str.w	r2, [sl]
		front_r = front_r + dif_r;
		lf_side = lf_side + dif_lf;
		rf_side = rf_side + dif_rf;
 8004474:	680f      	ldr	r7, [r1, #0]
	static int rf_side = 0;

	for (int i = 0; i < WALL_SAMPLES; i++) { //sample infrared values multiple times
		Get_IR(FALSE, FALSE, FALSE, FALSE);
		front_l = front_l + dif_l;
		front_r = front_r + dif_r;
 8004476:	6033      	str	r3, [r6, #0]
		lf_side = lf_side + dif_lf;
		rf_side = rf_side + dif_rf;
 8004478:	4477      	add	r7, lr

	for (int i = 0; i < WALL_SAMPLES; i++) { //sample infrared values multiple times
		Get_IR(FALSE, FALSE, FALSE, FALSE);
		front_l = front_l + dif_l;
		front_r = front_r + dif_r;
		lf_side = lf_side + dif_lf;
 800447a:	6028      	str	r0, [r5, #0]
		rf_side = rf_side + dif_rf;
 800447c:	600f      	str	r7, [r1, #0]
	static int front_l = 0;
	static int front_r = 0;
	static int lf_side = 0;
	static int rf_side = 0;

	for (int i = 0; i < WALL_SAMPLES; i++) { //sample infrared values multiple times
 800447e:	d1dc      	bne.n	800443a <Read_Walls+0x2a>
		front_r = front_r + dif_r;
		lf_side = lf_side + dif_lf;
		rf_side = rf_side + dif_rf;
	}

	front_l = front_l/WALL_SAMPLES;
 8004480:	2105      	movs	r1, #5
 8004482:	fb92 f2f1 	sdiv	r2, r2, r1
	front_r = front_r/WALL_SAMPLES;
 8004486:	fb93 f3f1 	sdiv	r3, r3, r1
	lf_side = lf_side/WALL_SAMPLES;
 800448a:	fb90 f0f1 	sdiv	r0, r0, r1
	rf_side = rf_side/WALL_SAMPLES;
 800448e:	fb97 f7f1 	sdiv	r7, r7, r1

	switch(cur_dir) {
 8004492:	4975      	ldr	r1, [pc, #468]	; (8004668 <Read_Walls+0x258>)
 8004494:	6809      	ldr	r1, [r1, #0]
 8004496:	2903      	cmp	r1, #3
 8004498:	f200 80cb 	bhi.w	8004632 <Read_Walls+0x222>
 800449c:	e8df f001 	tbb	[pc, r1]
 80044a0:	96623102 	.word	0x96623102

	case NORTH: //facing up
		if (y_coord > 0 && (front_l >= FRONT_THRESHOLD || front_r >= FRONT_THRESHOLD) && abs(front_l - front_r) < DIFFERENTIAL) { //front sensor
 80044a4:	6821      	ldr	r1, [r4, #0]
 80044a6:	b1b1      	cbz	r1, 80044d6 <Read_Walls+0xc6>
 80044a8:	f5b2 7fe1 	cmp.w	r2, #450	; 0x1c2
 80044ac:	da02      	bge.n	80044b4 <Read_Walls+0xa4>
 80044ae:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 80044b2:	db10      	blt.n	80044d6 <Read_Walls+0xc6>
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	f641 228e 	movw	r2, #6798	; 0x1a8e
 80044ba:	f603 5347 	addw	r3, r3, #3399	; 0xd47
 80044be:	4293      	cmp	r3, r2
 80044c0:	d809      	bhi.n	80044d6 <Read_Walls+0xc6>
			horiz_walls[x_coord][y_coord - 1] = 1; //up wall
 80044c2:	f8d8 3000 	ldr.w	r3, [r8]
 80044c6:	4a69      	ldr	r2, [pc, #420]	; (800466c <Read_Walls+0x25c>)
 80044c8:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80044cc:	4413      	add	r3, r2
 80044ce:	2201      	movs	r2, #1
 80044d0:	440b      	add	r3, r1
 80044d2:	f803 2c01 	strb.w	r2, [r3, #-1]
		}
		if (x_coord < X_MAZE_SIZE - 1 && rf_side >= RIGHT_THRESHOLD) { //right sensor
 80044d6:	f8d8 3000 	ldr.w	r3, [r8]
 80044da:	2b0e      	cmp	r3, #14
 80044dc:	d905      	bls.n	80044ea <Read_Walls+0xda>
			vert_walls[x_coord][y_coord] = 1; //right wall
		}
		if (x_coord > 0 && lf_side >= LEFT_THRESHOLD) {  //left sensor
 80044de:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
 80044e2:	f2c0 80a6 	blt.w	8004632 <Read_Walls+0x222>
			vert_walls[x_coord - 1][y_coord] = 1; //left wall
 80044e6:	3b01      	subs	r3, #1
 80044e8:	e036      	b.n	8004558 <Read_Walls+0x148>

	case NORTH: //facing up
		if (y_coord > 0 && (front_l >= FRONT_THRESHOLD || front_r >= FRONT_THRESHOLD) && abs(front_l - front_r) < DIFFERENTIAL) { //front sensor
			horiz_walls[x_coord][y_coord - 1] = 1; //up wall
		}
		if (x_coord < X_MAZE_SIZE - 1 && rf_side >= RIGHT_THRESHOLD) { //right sensor
 80044ea:	f5b7 7f48 	cmp.w	r7, #800	; 0x320
			vert_walls[x_coord][y_coord] = 1; //right wall
 80044ee:	bfa1      	itttt	ge
 80044f0:	4a5f      	ldrge	r2, [pc, #380]	; (8004670 <Read_Walls+0x260>)
 80044f2:	2401      	movge	r4, #1
 80044f4:	eb02 1203 	addge.w	r2, r2, r3, lsl #4
 80044f8:	5454      	strbge	r4, [r2, r1]
		}
		if (x_coord > 0 && lf_side >= LEFT_THRESHOLD) {  //left sensor
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f000 8099 	beq.w	8004632 <Read_Walls+0x222>
 8004500:	e7ed      	b.n	80044de <Read_Walls+0xce>
			vert_walls[x_coord - 1][y_coord] = 1; //left wall
		}
		break;

	case SOUTH: //facing down
		if (y_coord < Y_MAZE_SIZE - 1 && (front_l >= FRONT_THRESHOLD || front_r >= FRONT_THRESHOLD) && abs(front_l - front_r) < DIFFERENTIAL) {  //front sensor
 8004502:	6821      	ldr	r1, [r4, #0]
 8004504:	290e      	cmp	r1, #14
 8004506:	d814      	bhi.n	8004532 <Read_Walls+0x122>
 8004508:	f5b2 7fe1 	cmp.w	r2, #450	; 0x1c2
 800450c:	da02      	bge.n	8004514 <Read_Walls+0x104>
 800450e:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8004512:	db0e      	blt.n	8004532 <Read_Walls+0x122>
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	f641 228e 	movw	r2, #6798	; 0x1a8e
 800451a:	f603 5347 	addw	r3, r3, #3399	; 0xd47
 800451e:	4293      	cmp	r3, r2
 8004520:	d807      	bhi.n	8004532 <Read_Walls+0x122>
			horiz_walls[x_coord][y_coord] = 1; //down_wall
 8004522:	f8d8 3000 	ldr.w	r3, [r8]
 8004526:	4a51      	ldr	r2, [pc, #324]	; (800466c <Read_Walls+0x25c>)
 8004528:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800452c:	4413      	add	r3, r2
 800452e:	2201      	movs	r2, #1
 8004530:	545a      	strb	r2, [r3, r1]
			}
		if (x_coord > 0 && rf_side >= RIGHT_THRESHOLD) {  //right sensor
 8004532:	f8d8 3000 	ldr.w	r3, [r8]
 8004536:	b91b      	cbnz	r3, 8004540 <Read_Walls+0x130>
			vert_walls[x_coord - 1][y_coord] = 1; //left wall
		}
		if (x_coord < X_MAZE_SIZE - 1 && lf_side >= LEFT_THRESHOLD) { //left sensor
 8004538:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
 800453c:	da0c      	bge.n	8004558 <Read_Walls+0x148>
 800453e:	e078      	b.n	8004632 <Read_Walls+0x222>

	case SOUTH: //facing down
		if (y_coord < Y_MAZE_SIZE - 1 && (front_l >= FRONT_THRESHOLD || front_r >= FRONT_THRESHOLD) && abs(front_l - front_r) < DIFFERENTIAL) {  //front sensor
			horiz_walls[x_coord][y_coord] = 1; //down_wall
			}
		if (x_coord > 0 && rf_side >= RIGHT_THRESHOLD) {  //right sensor
 8004540:	f5b7 7f48 	cmp.w	r7, #800	; 0x320
 8004544:	db05      	blt.n	8004552 <Read_Walls+0x142>
			vert_walls[x_coord - 1][y_coord] = 1; //left wall
 8004546:	4c4a      	ldr	r4, [pc, #296]	; (8004670 <Read_Walls+0x260>)
 8004548:	1e5a      	subs	r2, r3, #1
 800454a:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 800454e:	2401      	movs	r4, #1
 8004550:	5454      	strb	r4, [r2, r1]
		}
		if (x_coord < X_MAZE_SIZE - 1 && lf_side >= LEFT_THRESHOLD) { //left sensor
 8004552:	2b0e      	cmp	r3, #14
 8004554:	d86d      	bhi.n	8004632 <Read_Walls+0x222>
 8004556:	e7ef      	b.n	8004538 <Read_Walls+0x128>
			vert_walls[x_coord][y_coord] = 1; //right wall
 8004558:	4a45      	ldr	r2, [pc, #276]	; (8004670 <Read_Walls+0x260>)
 800455a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800455e:	2201      	movs	r2, #1
 8004560:	545a      	strb	r2, [r3, r1]
 8004562:	e066      	b.n	8004632 <Read_Walls+0x222>
		}
		break;

	case WEST: //facing left
		if (x_coord > 0 && (front_l >= FRONT_THRESHOLD || front_r >= FRONT_THRESHOLD) && abs(front_l - front_r) < DIFFERENTIAL) { //front sensor
 8004564:	f8d8 1000 	ldr.w	r1, [r8]
 8004568:	b1b1      	cbz	r1, 8004598 <Read_Walls+0x188>
 800456a:	f5b2 7fe1 	cmp.w	r2, #450	; 0x1c2
 800456e:	da02      	bge.n	8004576 <Read_Walls+0x166>
 8004570:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8004574:	db10      	blt.n	8004598 <Read_Walls+0x188>
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	f641 228e 	movw	r2, #6798	; 0x1a8e
 800457c:	f603 5347 	addw	r3, r3, #3399	; 0xd47
 8004580:	4293      	cmp	r3, r2
 8004582:	d809      	bhi.n	8004598 <Read_Walls+0x188>
			vert_walls[x_coord - 1][y_coord] = 1; //left wall
 8004584:	f101 3eff 	add.w	lr, r1, #4294967295
 8004588:	4b39      	ldr	r3, [pc, #228]	; (8004670 <Read_Walls+0x260>)
 800458a:	6822      	ldr	r2, [r4, #0]
 800458c:	eb03 130e 	add.w	r3, r3, lr, lsl #4
 8004590:	f04f 0e01 	mov.w	lr, #1
 8004594:	f803 e002 	strb.w	lr, [r3, r2]
		}
		if (y_coord > 0 && rf_side >= RIGHT_THRESHOLD) {  //right sensor
 8004598:	6822      	ldr	r2, [r4, #0]
 800459a:	b94a      	cbnz	r2, 80045b0 <Read_Walls+0x1a0>
			horiz_walls[x_coord][y_coord - 1] = 1; //up wall
		}
		if (y_coord < Y_MAZE_SIZE - 1 && lf_side >= LEFT_THRESHOLD) {//left sensor
 800459c:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
 80045a0:	db47      	blt.n	8004632 <Read_Walls+0x222>
			horiz_walls[x_coord][y_coord] = 1; //down wall
 80045a2:	4b32      	ldr	r3, [pc, #200]	; (800466c <Read_Walls+0x25c>)
 80045a4:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80045a8:	4419      	add	r1, r3
 80045aa:	2301      	movs	r3, #1
 80045ac:	548b      	strb	r3, [r1, r2]
 80045ae:	e040      	b.n	8004632 <Read_Walls+0x222>

	case WEST: //facing left
		if (x_coord > 0 && (front_l >= FRONT_THRESHOLD || front_r >= FRONT_THRESHOLD) && abs(front_l - front_r) < DIFFERENTIAL) { //front sensor
			vert_walls[x_coord - 1][y_coord] = 1; //left wall
		}
		if (y_coord > 0 && rf_side >= RIGHT_THRESHOLD) {  //right sensor
 80045b0:	f5b7 7f48 	cmp.w	r7, #800	; 0x320
 80045b4:	db07      	blt.n	80045c6 <Read_Walls+0x1b6>
			horiz_walls[x_coord][y_coord - 1] = 1; //up wall
 80045b6:	4c2d      	ldr	r4, [pc, #180]	; (800466c <Read_Walls+0x25c>)
 80045b8:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 80045bc:	4423      	add	r3, r4
 80045be:	2401      	movs	r4, #1
 80045c0:	4413      	add	r3, r2
 80045c2:	f803 4c01 	strb.w	r4, [r3, #-1]
		}
		if (y_coord < Y_MAZE_SIZE - 1 && lf_side >= LEFT_THRESHOLD) {//left sensor
 80045c6:	2a0e      	cmp	r2, #14
 80045c8:	d833      	bhi.n	8004632 <Read_Walls+0x222>
 80045ca:	e7e7      	b.n	800459c <Read_Walls+0x18c>
			horiz_walls[x_coord][y_coord] = 1; //down wall
		}
		break;

	case EAST: //facing right
		if (x_coord < X_MAZE_SIZE - 1 && (front_l >= FRONT_THRESHOLD || front_r >= FRONT_THRESHOLD) && abs(front_l - front_r) < DIFFERENTIAL) { //front sensor
 80045cc:	f8d8 1000 	ldr.w	r1, [r8]
 80045d0:	290e      	cmp	r1, #14
 80045d2:	d814      	bhi.n	80045fe <Read_Walls+0x1ee>
 80045d4:	f5b2 7fe1 	cmp.w	r2, #450	; 0x1c2
 80045d8:	da02      	bge.n	80045e0 <Read_Walls+0x1d0>
 80045da:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 80045de:	db0e      	blt.n	80045fe <Read_Walls+0x1ee>
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	f641 228e 	movw	r2, #6798	; 0x1a8e
 80045e6:	f603 5347 	addw	r3, r3, #3399	; 0xd47
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d807      	bhi.n	80045fe <Read_Walls+0x1ee>
			vert_walls[x_coord][y_coord] = 1; //right wall
 80045ee:	4b20      	ldr	r3, [pc, #128]	; (8004670 <Read_Walls+0x260>)
 80045f0:	f04f 0e01 	mov.w	lr, #1
 80045f4:	6822      	ldr	r2, [r4, #0]
 80045f6:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80045fa:	f803 e002 	strb.w	lr, [r3, r2]
			}
		if (y_coord < Y_MAZE_SIZE - 1 && rf_side >= RIGHT_THRESHOLD) { //right sensor
 80045fe:	6823      	ldr	r3, [r4, #0]
 8004600:	2b0e      	cmp	r3, #14
 8004602:	d90b      	bls.n	800461c <Read_Walls+0x20c>
			horiz_walls[x_coord][y_coord] = 1; //down wall
		}
		if (y_coord > 0 && lf_side >= LEFT_THRESHOLD) {  //left sensor
 8004604:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
 8004608:	db13      	blt.n	8004632 <Read_Walls+0x222>
			horiz_walls[x_coord][y_coord - 1] = 1; //up wall
 800460a:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800460e:	4a17      	ldr	r2, [pc, #92]	; (800466c <Read_Walls+0x25c>)
 8004610:	4411      	add	r1, r2
 8004612:	4419      	add	r1, r3
 8004614:	2301      	movs	r3, #1
 8004616:	f801 3c01 	strb.w	r3, [r1, #-1]
 800461a:	e00a      	b.n	8004632 <Read_Walls+0x222>

	case EAST: //facing right
		if (x_coord < X_MAZE_SIZE - 1 && (front_l >= FRONT_THRESHOLD || front_r >= FRONT_THRESHOLD) && abs(front_l - front_r) < DIFFERENTIAL) { //front sensor
			vert_walls[x_coord][y_coord] = 1; //right wall
			}
		if (y_coord < Y_MAZE_SIZE - 1 && rf_side >= RIGHT_THRESHOLD) { //right sensor
 800461c:	f5b7 7f48 	cmp.w	r7, #800	; 0x320
 8004620:	db05      	blt.n	800462e <Read_Walls+0x21e>
			horiz_walls[x_coord][y_coord] = 1; //down wall
 8004622:	4c12      	ldr	r4, [pc, #72]	; (800466c <Read_Walls+0x25c>)
 8004624:	ebc1 1201 	rsb	r2, r1, r1, lsl #4
 8004628:	4422      	add	r2, r4
 800462a:	2401      	movs	r4, #1
 800462c:	54d4      	strb	r4, [r2, r3]
		}
		if (y_coord > 0 && lf_side >= LEFT_THRESHOLD) {  //left sensor
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1e8      	bne.n	8004604 <Read_Walls+0x1f4>
			horiz_walls[x_coord][y_coord - 1] = 1; //up wall
		}
		break;

	}
	front_l = 0; //clear values
 8004632:	2300      	movs	r3, #0
 8004634:	4a0f      	ldr	r2, [pc, #60]	; (8004674 <Read_Walls+0x264>)
 8004636:	6013      	str	r3, [r2, #0]
	front_r = 0;
	lf_side = 0;
	rf_side = 0;
 8004638:	4a0a      	ldr	r2, [pc, #40]	; (8004664 <Read_Walls+0x254>)
		}
		break;

	}
	front_l = 0; //clear values
	front_r = 0;
 800463a:	6033      	str	r3, [r6, #0]
	lf_side = 0;
 800463c:	602b      	str	r3, [r5, #0]
	rf_side = 0;
 800463e:	6013      	str	r3, [r2, #0]
 8004640:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004644:	200001fc 	.word	0x200001fc
 8004648:	20000010 	.word	0x20000010
 800464c:	20002504 	.word	0x20002504
 8004650:	20000334 	.word	0x20000334
 8004654:	20000b38 	.word	0x20000b38
 8004658:	200000a4 	.word	0x200000a4
 800465c:	200000b0 	.word	0x200000b0
 8004660:	20000204 	.word	0x20000204
 8004664:	20000214 	.word	0x20000214
 8004668:	20001344 	.word	0x20001344
 800466c:	200000c4 	.word	0x200000c4
 8004670:	20000218 	.word	0x20000218
 8004674:	20000b20 	.word	0x20000b20
 8004678:	200000a8 	.word	0x200000a8

0800467c <Middle_Cell_Action>:

	/*
	 * What to do when in the middle of the square. Read Walls, calculate next moves and update the position.
	 * If this was the last move. The "DEAD" move will automatically turn around and stop
	 */
	if (done_flag == TRUE) {
 800467c:	4b0a      	ldr	r3, [pc, #40]	; (80046a8 <Middle_Cell_Action+0x2c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b01      	cmp	r3, #1
	}
	cur_move = next_move; //execute next move

}

void Middle_Cell_Action() {
 8004682:	b510      	push	{r4, lr}
 8004684:	4c09      	ldr	r4, [pc, #36]	; (80046ac <Middle_Cell_Action+0x30>)

	/*
	 * What to do when in the middle of the square. Read Walls, calculate next moves and update the position.
	 * If this was the last move. The "DEAD" move will automatically turn around and stop
	 */
	if (done_flag == TRUE) {
 8004686:	d102      	bne.n	800468e <Middle_Cell_Action+0x12>
		next_move = DEAD;
 8004688:	2303      	movs	r3, #3
 800468a:	6023      	str	r3, [r4, #0]
 800468c:	bd10      	pop	{r4, pc}
	}

	else {
		if (cur_move != FWD_SPEED) {
 800468e:	4b08      	ldr	r3, [pc, #32]	; (80046b0 <Middle_Cell_Action+0x34>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2b06      	cmp	r3, #6
 8004694:	d001      	beq.n	800469a <Middle_Cell_Action+0x1e>
			Read_Walls();
 8004696:	f7ff febb 	bl	8004410 <Read_Walls>
		}
		next_move = Get_Next_Move();
 800469a:	f7ff fab7 	bl	8003c0c <Get_Next_Move>
 800469e:	6020      	str	r0, [r4, #0]
		Update_Position();
	}

}
 80046a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	else {
		if (cur_move != FWD_SPEED) {
			Read_Walls();
		}
		next_move = Get_Next_Move();
		Update_Position();
 80046a4:	f7fe bfa8 	b.w	80035f8 <Update_Position>
 80046a8:	2000031c 	.word	0x2000031c
 80046ac:	20000b60 	.word	0x20000b60
 80046b0:	20000b3c 	.word	0x20000b3c

080046b4 <Stop_IR>:
		 Error_Handler();
	  }

}

void Stop_IR() {
 80046b4:	b508      	push	{r3, lr}
	/*
	 * Function used to end the ADC conversion process
	 */

	adc_conv = TRUE;
 80046b6:	2201      	movs	r2, #1
 80046b8:	4b04      	ldr	r3, [pc, #16]	; (80046cc <Stop_IR+0x18>)
	if(HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 80046ba:	4805      	ldr	r0, [pc, #20]	; (80046d0 <Stop_IR+0x1c>)
void Stop_IR() {
	/*
	 * Function used to end the ADC conversion process
	 */

	adc_conv = TRUE;
 80046bc:	601a      	str	r2, [r3, #0]
	if(HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 80046be:	f7fb ff8f 	bl	80005e0 <HAL_ADC_Stop_DMA>
 80046c2:	b108      	cbz	r0, 80046c8 <Stop_IR+0x14>
	  {
		 Error_Handler();
 80046c4:	f7ff fc80 	bl	8003fc8 <Error_Handler>
 80046c8:	bd08      	pop	{r3, pc}
 80046ca:	bf00      	nop
 80046cc:	20000314 	.word	0x20000314
 80046d0:	20001f1c 	.word	0x20001f1c

080046d4 <HAL_ADC_ConvCpltCallback>:

}

//ADC interrupt handler. Runs when all four channels have been converted
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* handle)
{
 80046d4:	b508      	push	{r3, lr}
	Stop_IR();
 80046d6:	f7ff ffed 	bl	80046b4 <Stop_IR>
	l = ADC_valbuffer[ADC_VAL_BUFFER_LENGTH - 4];
 80046da:	4b07      	ldr	r3, [pc, #28]	; (80046f8 <HAL_ADC_ConvCpltCallback+0x24>)
 80046dc:	4a07      	ldr	r2, [pc, #28]	; (80046fc <HAL_ADC_ConvCpltCallback+0x28>)
 80046de:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80046e0:	6011      	str	r1, [r2, #0]
	lf = ADC_valbuffer[ADC_VAL_BUFFER_LENGTH - 3];
 80046e2:	6f59      	ldr	r1, [r3, #116]	; 0x74
 80046e4:	4a06      	ldr	r2, [pc, #24]	; (8004700 <HAL_ADC_ConvCpltCallback+0x2c>)
 80046e6:	6011      	str	r1, [r2, #0]
	rf = ADC_valbuffer[ADC_VAL_BUFFER_LENGTH - 2];
 80046e8:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80046ea:	4a06      	ldr	r2, [pc, #24]	; (8004704 <HAL_ADC_ConvCpltCallback+0x30>)
 80046ec:	6011      	str	r1, [r2, #0]
	r = ADC_valbuffer[ADC_VAL_BUFFER_LENGTH - 1];
 80046ee:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80046f0:	4b05      	ldr	r3, [pc, #20]	; (8004708 <HAL_ADC_ConvCpltCallback+0x34>)
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	bd08      	pop	{r3, pc}
 80046f6:	bf00      	nop
 80046f8:	20002484 	.word	0x20002484
 80046fc:	200000a0 	.word	0x200000a0
 8004700:	200001dc 	.word	0x200001dc
 8004704:	2000030c 	.word	0x2000030c
 8004708:	20000340 	.word	0x20000340

0800470c <Set_Left>:
}

void Set_Left(int speed, int direction) {

	//when switching directions, PWM polarity switches
	if (speed < 0) {
 800470c:	2800      	cmp	r0, #0
	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	TIM_OC_InitTypeDef tim2config;

	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800470e:	f04f 0200 	mov.w	r2, #0

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	TIM_OC_InitTypeDef tim2config;

	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
 8004712:	f04f 0360 	mov.w	r3, #96	; 0x60
void Set_Left(int speed, int direction) {

	//when switching directions, PWM polarity switches
	if (speed < 0) {
		direction = !direction;
		speed = abs(speed);
 8004716:	bfb8      	it	lt
 8004718:	4240      	neglt	r0, r0
		cur_move = FWD; //reset to default direction
		next_move = FWD;
	}
}

void Set_Left(int speed, int direction) {
 800471a:	b510      	push	{r4, lr}
 800471c:	460c      	mov	r4, r1

	//when switching directions, PWM polarity switches
	if (speed < 0) {
		direction = !direction;
 800471e:	bfb8      	it	lt
 8004720:	fab1 f481 	clzlt	r4, r1
		cur_move = FWD; //reset to default direction
		next_move = FWD;
	}
}

void Set_Left(int speed, int direction) {
 8004724:	b088      	sub	sp, #32

	//when switching directions, PWM polarity switches
	if (speed < 0) {
		direction = !direction;
 8004726:	bfb8      	it	lt
 8004728:	0964      	lsrlt	r4, r4, #5

	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
	tim2config.OCFastMode = TIM_OCFAST_DISABLE;
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &tim2config, TIM_CHANNEL_1) != HAL_OK)
 800472a:	a901      	add	r1, sp, #4

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	TIM_OC_InitTypeDef tim2config;

	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
 800472c:	9301      	str	r3, [sp, #4]
	if (speed < 0) {
		direction = !direction;
		speed = abs(speed);
	}

	if (direction == FORWARD) {
 800472e:	2c01      	cmp	r4, #1
	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	TIM_OC_InitTypeDef tim2config;

	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004730:	9203      	str	r2, [sp, #12]
	tim2config.OCFastMode = TIM_OCFAST_DISABLE;
 8004732:	9205      	str	r2, [sp, #20]
		direction = !direction;
		speed = abs(speed);
	}

	if (direction == FORWARD) {
		speed = 665 - speed;
 8004734:	bf04      	itt	eq
 8004736:	f5c0 7026 	rsbeq	r0, r0, #664	; 0x298
 800473a:	3001      	addeq	r0, #1
	}

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	TIM_OC_InitTypeDef tim2config;

	tim2config.Pulse = speed;
 800473c:	9002      	str	r0, [sp, #8]
	tim2config.OCMode = TIM_OCMODE_PWM1;
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
	tim2config.OCFastMode = TIM_OCFAST_DISABLE;
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &tim2config, TIM_CHANNEL_1) != HAL_OK)
 800473e:	4808      	ldr	r0, [pc, #32]	; (8004760 <Set_Left+0x54>)
 8004740:	f7fe f852 	bl	80027e8 <HAL_TIM_PWM_ConfigChannel>
 8004744:	4601      	mov	r1, r0
 8004746:	b108      	cbz	r0, 800474c <Set_Left+0x40>
	  {
	     Error_Handler();
 8004748:	f7ff fc3e 	bl	8003fc8 <Error_Handler>
	  }

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800474c:	4804      	ldr	r0, [pc, #16]	; (8004760 <Set_Left+0x54>)
 800474e:	f7fd ffe1 	bl	8002714 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, LDIC_Pin, direction);
 8004752:	2102      	movs	r1, #2
 8004754:	b2e2      	uxtb	r2, r4
 8004756:	4803      	ldr	r0, [pc, #12]	; (8004764 <Set_Left+0x58>)
 8004758:	f7fc fd42 	bl	80011e0 <HAL_GPIO_WritePin>

}
 800475c:	b008      	add	sp, #32
 800475e:	bd10      	pop	{r4, pc}
 8004760:	20002a4c 	.word	0x20002a4c
 8004764:	40020000 	.word	0x40020000

08004768 <Set_Right>:

//when switching directions, PWM polarity switches
void Set_Right(int speed, int direction) {

	if (speed < 0) {
 8004768:	2800      	cmp	r0, #0
	}

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
	TIM_OC_InitTypeDef tim2config;
	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
 800476a:	f04f 0360 	mov.w	r3, #96	; 0x60
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
	tim2config.OCFastMode = TIM_OCFAST_DISABLE;

	if (HAL_TIM_PWM_ConfigChannel(&htim2, &tim2config, TIM_CHANNEL_3) != HAL_OK)
 800476e:	f04f 0208 	mov.w	r2, #8
//when switching directions, PWM polarity switches
void Set_Right(int speed, int direction) {

	if (speed < 0) {
		direction = !direction;
		speed = abs(speed);
 8004772:	bfb8      	it	lt
 8004774:	4240      	neglt	r0, r0
	HAL_GPIO_WritePin(GPIOA, LDIC_Pin, direction);

}

//when switching directions, PWM polarity switches
void Set_Right(int speed, int direction) {
 8004776:	b510      	push	{r4, lr}
 8004778:	460c      	mov	r4, r1

	if (speed < 0) {
		direction = !direction;
 800477a:	bfb8      	it	lt
 800477c:	fab1 f481 	clzlt	r4, r1
	HAL_GPIO_WritePin(GPIOA, LDIC_Pin, direction);

}

//when switching directions, PWM polarity switches
void Set_Right(int speed, int direction) {
 8004780:	b088      	sub	sp, #32

	if (speed < 0) {
		direction = !direction;
 8004782:	bfb8      	it	lt
 8004784:	0964      	lsrlt	r4, r4, #5
	}

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
	TIM_OC_InitTypeDef tim2config;
	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
 8004786:	9301      	str	r3, [sp, #4]
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004788:	2300      	movs	r3, #0
	if (speed < 0) {
		direction = !direction;
		speed = abs(speed);
	}

	if (direction == FORWARD) {
 800478a:	2c01      	cmp	r4, #1
	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
	tim2config.OCFastMode = TIM_OCFAST_DISABLE;

	if (HAL_TIM_PWM_ConfigChannel(&htim2, &tim2config, TIM_CHANNEL_3) != HAL_OK)
 800478c:	a901      	add	r1, sp, #4

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
	TIM_OC_InitTypeDef tim2config;
	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800478e:	9303      	str	r3, [sp, #12]
		direction = !direction;
		speed = abs(speed);
	}

	if (direction == FORWARD) {
		speed = 665 - speed;
 8004790:	bf08      	it	eq
 8004792:	f5c0 7026 	rsbeq	r0, r0, #664	; 0x298
	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
	TIM_OC_InitTypeDef tim2config;
	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
	tim2config.OCFastMode = TIM_OCFAST_DISABLE;
 8004796:	9305      	str	r3, [sp, #20]
		direction = !direction;
		speed = abs(speed);
	}

	if (direction == FORWARD) {
		speed = 665 - speed;
 8004798:	bf08      	it	eq
 800479a:	3001      	addeq	r0, #1
	}

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
	TIM_OC_InitTypeDef tim2config;
	tim2config.Pulse = speed;
 800479c:	9002      	str	r0, [sp, #8]
	tim2config.OCMode = TIM_OCMODE_PWM1;
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
	tim2config.OCFastMode = TIM_OCFAST_DISABLE;

	if (HAL_TIM_PWM_ConfigChannel(&htim2, &tim2config, TIM_CHANNEL_3) != HAL_OK)
 800479e:	4808      	ldr	r0, [pc, #32]	; (80047c0 <Set_Right+0x58>)
 80047a0:	f7fe f822 	bl	80027e8 <HAL_TIM_PWM_ConfigChannel>
 80047a4:	b108      	cbz	r0, 80047aa <Set_Right+0x42>
	{
	   Error_Handler();
 80047a6:	f7ff fc0f 	bl	8003fc8 <Error_Handler>
	}

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80047aa:	2108      	movs	r1, #8
 80047ac:	4804      	ldr	r0, [pc, #16]	; (80047c0 <Set_Right+0x58>)
 80047ae:	f7fd ffb1 	bl	8002714 <HAL_TIM_PWM_Start>

#if MOUSE_REV == 69
	HAL_GPIO_WritePin(GPIOA, RDIC_Pin, direction);
 80047b2:	2108      	movs	r1, #8
 80047b4:	b2e2      	uxtb	r2, r4
 80047b6:	4803      	ldr	r0, [pc, #12]	; (80047c4 <Set_Right+0x5c>)
 80047b8:	f7fc fd12 	bl	80011e0 <HAL_GPIO_WritePin>
#else
	HAL_GPIO_WritePin(GPIOA, RDIC_Pin, !direction);
#endif

}
 80047bc:	b008      	add	sp, #32
 80047be:	bd10      	pop	{r4, pc}
 80047c0:	20002a4c 	.word	0x20002a4c
 80047c4:	40020000 	.word	0x40020000

080047c8 <Transition>:
		Transition();
		l_turnflag = ARRIVE;
	}
}

void Transition() {
 80047c8:	b538      	push	{r3, r4, r5, lr}

	prev_l_count = l_count; //save current counters
 80047ca:	4b15      	ldr	r3, [pc, #84]	; (8004820 <Transition+0x58>)
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	4b15      	ldr	r3, [pc, #84]	; (8004824 <Transition+0x5c>)
 80047d0:	601a      	str	r2, [r3, #0]
	prev_r_count = r_count;
 80047d2:	4b15      	ldr	r3, [pc, #84]	; (8004828 <Transition+0x60>)
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	4b15      	ldr	r3, [pc, #84]	; (800482c <Transition+0x64>)
 80047d8:	601a      	str	r2, [r3, #0]

	switch (next_move) { //check if motor speeds have to change with next move
 80047da:	4b15      	ldr	r3, [pc, #84]	; (8004830 <Transition+0x68>)
 80047dc:	681c      	ldr	r4, [r3, #0]
 80047de:	461d      	mov	r5, r3
 80047e0:	2c02      	cmp	r4, #2
 80047e2:	d00a      	beq.n	80047fa <Transition+0x32>
 80047e4:	2c06      	cmp	r4, #6
 80047e6:	d011      	beq.n	800480c <Transition+0x44>
 80047e8:	2c01      	cmp	r4, #1
 80047ea:	d114      	bne.n	8004816 <Transition+0x4e>
		case RIGHT:
			Set_Left(RIGHT_L, FORWARD); //need to make right pivot
			Set_Right(RIGHT_R, FORWARD);
			break;
		case LEFT:
			Set_Left(LEFT_L, FORWARD); //need to make left pivot
 80047ec:	4621      	mov	r1, r4
 80047ee:	2000      	movs	r0, #0
 80047f0:	f7ff ff8c 	bl	800470c <Set_Left>
			Set_Right(LEFT_R, FORWARD);
 80047f4:	4621      	mov	r1, r4
 80047f6:	20c8      	movs	r0, #200	; 0xc8
 80047f8:	e005      	b.n	8004806 <Transition+0x3e>
	prev_r_count = r_count;

	switch (next_move) { //check if motor speeds have to change with next move

		case RIGHT:
			Set_Left(RIGHT_L, FORWARD); //need to make right pivot
 80047fa:	2101      	movs	r1, #1
 80047fc:	20c8      	movs	r0, #200	; 0xc8
 80047fe:	f7ff ff85 	bl	800470c <Set_Left>
			Set_Right(RIGHT_R, FORWARD);
 8004802:	2101      	movs	r1, #1
 8004804:	2000      	movs	r0, #0
			break;
		case LEFT:
			Set_Left(LEFT_L, FORWARD); //need to make left pivot
			Set_Right(LEFT_R, FORWARD);
 8004806:	f7ff ffaf 	bl	8004768 <Set_Right>
			break;
 800480a:	e004      	b.n	8004816 <Transition+0x4e>

		case FWD_SPEED:
			Reset_Time();
 800480c:	f7fe fbd6 	bl	8002fbc <Reset_Time>
			HAL_TIM_Base_Start(&htim5); //start timer
 8004810:	4808      	ldr	r0, [pc, #32]	; (8004834 <Transition+0x6c>)
 8004812:	f7fd fc2b 	bl	800206c <HAL_TIM_Base_Start>
			//Speed_Set();
			break;

	}
	cur_move = next_move; //execute next move
 8004816:	682a      	ldr	r2, [r5, #0]
 8004818:	4b07      	ldr	r3, [pc, #28]	; (8004838 <Transition+0x70>)
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	bd38      	pop	{r3, r4, r5, pc}
 800481e:	bf00      	nop
 8004820:	20000b28 	.word	0x20000b28
 8004824:	20001454 	.word	0x20001454
 8004828:	2000020c 	.word	0x2000020c
 800482c:	200013e8 	.word	0x200013e8
 8004830:	20000b60 	.word	0x20000b60
 8004834:	200014a0 	.word	0x200014a0
 8004838:	20000b3c 	.word	0x20000b3c

0800483c <Right_Search>:
			Transition();
		}
	}
}

void Right_Search() {
 800483c:	b510      	push	{r4, lr}

	if (r_turnflag == ARRIVE && lenc_diff >= RT_LENC_1) { //finished making turn. left and right wheel don't travel at same speeds
 800483e:	4c1d      	ldr	r4, [pc, #116]	; (80048b4 <Right_Search+0x78>)
 8004840:	6823      	ldr	r3, [r4, #0]
 8004842:	4622      	mov	r2, r4
 8004844:	b98b      	cbnz	r3, 800486a <Right_Search+0x2e>
 8004846:	4b1c      	ldr	r3, [pc, #112]	; (80048b8 <Right_Search+0x7c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800484e:	d930      	bls.n	80048b2 <Right_Search+0x76>

		Clear_Buffers();
 8004850:	f7fe fbc8 	bl	8002fe4 <Clear_Buffers>
		r_turnflag = PEEK;
 8004854:	2301      	movs	r3, #1
 8004856:	6023      	str	r3, [r4, #0]
		prev_l_count = l_count; //save current counters
 8004858:	4b18      	ldr	r3, [pc, #96]	; (80048bc <Right_Search+0x80>)
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	4b18      	ldr	r3, [pc, #96]	; (80048c0 <Right_Search+0x84>)
 800485e:	601a      	str	r2, [r3, #0]
		prev_r_count = r_count;
 8004860:	4b18      	ldr	r3, [pc, #96]	; (80048c4 <Right_Search+0x88>)
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	4b18      	ldr	r3, [pc, #96]	; (80048c8 <Right_Search+0x8c>)
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	bd10      	pop	{r4, pc}

	}

	else if ((r_turnflag == PEEK) && (lenc_diff >= RT_ENC_2*3/4 || renc_diff >= RT_ENC_2*3/4)) {
 800486a:	2b01      	cmp	r3, #1
 800486c:	d10f      	bne.n	800488e <Right_Search+0x52>
 800486e:	4b12      	ldr	r3, [pc, #72]	; (80048b8 <Right_Search+0x7c>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 8004876:	d804      	bhi.n	8004882 <Right_Search+0x46>
 8004878:	4b14      	ldr	r3, [pc, #80]	; (80048cc <Right_Search+0x90>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 8004880:	d917      	bls.n	80048b2 <Right_Search+0x76>
		r_turnflag = EXECUTE;
 8004882:	2302      	movs	r3, #2
	else if ((r_turnflag == EXECUTE) && (lenc_diff >= RT_ENC_2 || renc_diff >= RT_ENC_2)) { //made it to same point. execute next direction

		r_turnflag = ARRIVE;
		Transition();
	}
}
 8004884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		prev_r_count = r_count;

	}

	else if ((r_turnflag == PEEK) && (lenc_diff >= RT_ENC_2*3/4 || renc_diff >= RT_ENC_2*3/4)) {
		r_turnflag = EXECUTE;
 8004888:	6013      	str	r3, [r2, #0]
		Middle_Cell_Action();
 800488a:	f7ff bef7 	b.w	800467c <Middle_Cell_Action>
	}

	else if ((r_turnflag == EXECUTE) && (lenc_diff >= RT_ENC_2 || renc_diff >= RT_ENC_2)) { //made it to same point. execute next direction
 800488e:	2b02      	cmp	r3, #2
 8004890:	d10f      	bne.n	80048b2 <Right_Search+0x76>
 8004892:	4b09      	ldr	r3, [pc, #36]	; (80048b8 <Right_Search+0x7c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 800489a:	d804      	bhi.n	80048a6 <Right_Search+0x6a>
 800489c:	4b0b      	ldr	r3, [pc, #44]	; (80048cc <Right_Search+0x90>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 80048a4:	d905      	bls.n	80048b2 <Right_Search+0x76>

		r_turnflag = ARRIVE;
 80048a6:	2300      	movs	r3, #0
		Transition();
	}
}
 80048a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Middle_Cell_Action();
	}

	else if ((r_turnflag == EXECUTE) && (lenc_diff >= RT_ENC_2 || renc_diff >= RT_ENC_2)) { //made it to same point. execute next direction

		r_turnflag = ARRIVE;
 80048ac:	6013      	str	r3, [r2, #0]
		Transition();
 80048ae:	f7ff bf8b 	b.w	80047c8 <Transition>
 80048b2:	bd10      	pop	{r4, pc}
 80048b4:	20000200 	.word	0x20000200
 80048b8:	200000bc 	.word	0x200000bc
 80048bc:	20000b28 	.word	0x20000b28
 80048c0:	20001454 	.word	0x20001454
 80048c4:	2000020c 	.word	0x2000020c
 80048c8:	200013e8 	.word	0x200013e8
 80048cc:	200001e0 	.word	0x200001e0

080048d0 <Left_Search>:
		dead_flag = ARRIVE;
		Transition();
	}
}

void Left_Search() {
 80048d0:	b538      	push	{r3, r4, r5, lr}

	if (l_turnflag == ARRIVE && renc_diff >= LT_RENC_1) { //finished making turn. left and right wheel don't travel at same speeds
 80048d2:	4c1b      	ldr	r4, [pc, #108]	; (8004940 <Left_Search+0x70>)
 80048d4:	6823      	ldr	r3, [r4, #0]
 80048d6:	4625      	mov	r5, r4
 80048d8:	b98b      	cbnz	r3, 80048fe <Left_Search+0x2e>
 80048da:	4b1a      	ldr	r3, [pc, #104]	; (8004944 <Left_Search+0x74>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 80048e2:	d92c      	bls.n	800493e <Left_Search+0x6e>

		Clear_Buffers();
 80048e4:	f7fe fb7e 	bl	8002fe4 <Clear_Buffers>
		l_turnflag = PEEK;
 80048e8:	2301      	movs	r3, #1
 80048ea:	6023      	str	r3, [r4, #0]
		prev_l_count = l_count; //save current counters
 80048ec:	4b16      	ldr	r3, [pc, #88]	; (8004948 <Left_Search+0x78>)
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	4b16      	ldr	r3, [pc, #88]	; (800494c <Left_Search+0x7c>)
 80048f2:	601a      	str	r2, [r3, #0]
		prev_r_count = r_count;
 80048f4:	4b16      	ldr	r3, [pc, #88]	; (8004950 <Left_Search+0x80>)
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	4b16      	ldr	r3, [pc, #88]	; (8004954 <Left_Search+0x84>)
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	bd38      	pop	{r3, r4, r5, pc}

	}

	else if ((l_turnflag == PEEK) && (lenc_diff >= LT_ENC_2*3/4 || renc_diff >= LT_ENC_2*3/4)) {
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d10d      	bne.n	800491e <Left_Search+0x4e>
 8004902:	4b15      	ldr	r3, [pc, #84]	; (8004958 <Left_Search+0x88>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800490a:	d804      	bhi.n	8004916 <Left_Search+0x46>
 800490c:	4b0d      	ldr	r3, [pc, #52]	; (8004944 <Left_Search+0x74>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 8004914:	d913      	bls.n	800493e <Left_Search+0x6e>

		Middle_Cell_Action();
 8004916:	f7ff feb1 	bl	800467c <Middle_Cell_Action>
		l_turnflag = EXECUTE;
 800491a:	2302      	movs	r3, #2
 800491c:	e00e      	b.n	800493c <Left_Search+0x6c>
	}

	else if ((l_turnflag == EXECUTE) && (lenc_diff >= LT_ENC_2 || renc_diff >= LT_ENC_2)) { //made it to same point
 800491e:	2b02      	cmp	r3, #2
 8004920:	d10d      	bne.n	800493e <Left_Search+0x6e>
 8004922:	4b0d      	ldr	r3, [pc, #52]	; (8004958 <Left_Search+0x88>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 800492a:	d804      	bhi.n	8004936 <Left_Search+0x66>
 800492c:	4b05      	ldr	r3, [pc, #20]	; (8004944 <Left_Search+0x74>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 8004934:	d903      	bls.n	800493e <Left_Search+0x6e>

		Transition();
 8004936:	f7ff ff47 	bl	80047c8 <Transition>
		l_turnflag = ARRIVE;
 800493a:	2300      	movs	r3, #0
 800493c:	602b      	str	r3, [r5, #0]
 800493e:	bd38      	pop	{r3, r4, r5, pc}
 8004940:	20000308 	.word	0x20000308
 8004944:	200001e0 	.word	0x200001e0
 8004948:	20000b28 	.word	0x20000b28
 800494c:	20001454 	.word	0x20001454
 8004950:	2000020c 	.word	0x2000020c
 8004954:	200013e8 	.word	0x200013e8
 8004958:	200000bc 	.word	0x200000bc

0800495c <Speed_Profiler>:
			break;

	}
}

void Speed_Profiler() {
 800495c:	b570      	push	{r4, r5, r6, lr}
	//static int prev_speed_error = 0;
	static int speed_error = 0;
	static int P_ir = 0;
	static int P_speed = 0;

	if (l_speed < 4000 && r_speed < 4000) { //debounce crazy values
 800495e:	4c1e      	ldr	r4, [pc, #120]	; (80049d8 <Speed_Profiler+0x7c>)
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8004966:	da35      	bge.n	80049d4 <Speed_Profiler+0x78>
 8004968:	4d1c      	ldr	r5, [pc, #112]	; (80049dc <Speed_Profiler+0x80>)
 800496a:	682b      	ldr	r3, [r5, #0]
 800496c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8004970:	da30      	bge.n	80049d4 <Speed_Profiler+0x78>
		m_correction = Motor_Correction(TRUE);
 8004972:	2001      	movs	r0, #1
 8004974:	f7fe fa7e 	bl	8002e74 <Motor_Correction>
		speed_error = (r_speed - l_speed);
 8004978:	6822      	ldr	r2, [r4, #0]
 800497a:	682b      	ldr	r3, [r5, #0]
 800497c:	4918      	ldr	r1, [pc, #96]	; (80049e0 <Speed_Profiler+0x84>)
 800497e:	1a9b      	subs	r3, r3, r2
		//speed_change = speed_error - prev_speed_error;
		if (abs(m_correction) > 8) { //if currently correcting
 8004980:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
 8004984:	4c17      	ldr	r4, [pc, #92]	; (80049e4 <Speed_Profiler+0x88>)
 8004986:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
 800498a:	4d17      	ldr	r5, [pc, #92]	; (80049e8 <Speed_Profiler+0x8c>)
 800498c:	2a08      	cmp	r2, #8
 800498e:	4a17      	ldr	r2, [pc, #92]	; (80049ec <Speed_Profiler+0x90>)
			P_speed = 20; //damp speed correction
 8004990:	bfc9      	itett	gt
 8004992:	2614      	movgt	r6, #20
			P_ir = 2;//m_speed = FWD_L;
		}
		else {
			P_speed = 6; //use more speed correction
 8004994:	2606      	movle	r6, #6
	if (l_speed < 4000 && r_speed < 4000) { //debounce crazy values
		m_correction = Motor_Correction(TRUE);
		speed_error = (r_speed - l_speed);
		//speed_change = speed_error - prev_speed_error;
		if (abs(m_correction) > 8) { //if currently correcting
			P_speed = 20; //damp speed correction
 8004996:	600e      	strgt	r6, [r1, #0]
			P_ir = 2;//m_speed = FWD_L;
 8004998:	2602      	movgt	r6, #2
		}
		else {
			P_speed = 6; //use more speed correction
 800499a:	bfdc      	itt	le
 800499c:	600e      	strle	r6, [r1, #0]
			P_ir = 20;
 800499e:	2614      	movle	r6, #20
		}
		speed_error = speed_error/P_speed;//+ speed_change/D;
 80049a0:	6809      	ldr	r1, [r1, #0]
			P_speed = 20; //damp speed correction
			P_ir = 2;//m_speed = FWD_L;
		}
		else {
			P_speed = 6; //use more speed correction
			P_ir = 20;
 80049a2:	6016      	str	r6, [r2, #0]
		}
		speed_error = speed_error/P_speed;//+ speed_change/D;
		m_correction = m_correction/P_ir;
		Set_Left(m_speed + speed_error + m_correction, FORWARD);
 80049a4:	4e12      	ldr	r6, [pc, #72]	; (80049f0 <Speed_Profiler+0x94>)
		else {
			P_speed = 6; //use more speed correction
			P_ir = 20;
		}
		speed_error = speed_error/P_speed;//+ speed_change/D;
		m_correction = m_correction/P_ir;
 80049a6:	6812      	ldr	r2, [r2, #0]
		}
		else {
			P_speed = 6; //use more speed correction
			P_ir = 20;
		}
		speed_error = speed_error/P_speed;//+ speed_change/D;
 80049a8:	fb93 f3f1 	sdiv	r3, r3, r1
		m_correction = m_correction/P_ir;
 80049ac:	fb90 f2f2 	sdiv	r2, r0, r2
		Set_Left(m_speed + speed_error + m_correction, FORWARD);
 80049b0:	6830      	ldr	r0, [r6, #0]
 80049b2:	2101      	movs	r1, #1
		}
		else {
			P_speed = 6; //use more speed correction
			P_ir = 20;
		}
		speed_error = speed_error/P_speed;//+ speed_change/D;
 80049b4:	602b      	str	r3, [r5, #0]
		m_correction = m_correction/P_ir;
		Set_Left(m_speed + speed_error + m_correction, FORWARD);
 80049b6:	4418      	add	r0, r3
		else {
			P_speed = 6; //use more speed correction
			P_ir = 20;
		}
		speed_error = speed_error/P_speed;//+ speed_change/D;
		m_correction = m_correction/P_ir;
 80049b8:	6022      	str	r2, [r4, #0]
		Set_Left(m_speed + speed_error + m_correction, FORWARD);
 80049ba:	4410      	add	r0, r2
 80049bc:	f7ff fea6 	bl	800470c <Set_Left>
		Set_Right(m_speed - speed_error - m_correction, FORWARD);
 80049c0:	6828      	ldr	r0, [r5, #0]
 80049c2:	6833      	ldr	r3, [r6, #0]
 80049c4:	2101      	movs	r1, #1
 80049c6:	1a1b      	subs	r3, r3, r0
 80049c8:	6820      	ldr	r0, [r4, #0]

		//prev_speed_error = speed_error;
	}
}
 80049ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			P_ir = 20;
		}
		speed_error = speed_error/P_speed;//+ speed_change/D;
		m_correction = m_correction/P_ir;
		Set_Left(m_speed + speed_error + m_correction, FORWARD);
		Set_Right(m_speed - speed_error - m_correction, FORWARD);
 80049ce:	1a18      	subs	r0, r3, r0
 80049d0:	f7ff beca 	b.w	8004768 <Set_Right>
 80049d4:	bd70      	pop	{r4, r5, r6, pc}
 80049d6:	bf00      	nop
 80049d8:	20001358 	.word	0x20001358
 80049dc:	20000b2c 	.word	0x20000b2c
 80049e0:	200001ec 	.word	0x200001ec
 80049e4:	20000330 	.word	0x20000330
 80049e8:	20000b54 	.word	0x20000b54
 80049ec:	2000134c 	.word	0x2000134c
 80049f0:	20000338 	.word	0x20000338

080049f4 <Search_Correction>:

	return correction;

}

void Search_Correction() {
 80049f4:	b538      	push	{r3, r4, r5, lr}
	 * Standard FWD movement correction. Runs when moving forward one square and going straight out of turn
	 */

	m_correction = Motor_Correction(FALSE);

	Set_Left(m_speed + m_correction, FORWARD);
 80049f6:	4d0a      	ldr	r5, [pc, #40]	; (8004a20 <Search_Correction+0x2c>)

	/*
	 * Standard FWD movement correction. Runs when moving forward one square and going straight out of turn
	 */

	m_correction = Motor_Correction(FALSE);
 80049f8:	2000      	movs	r0, #0
 80049fa:	f7fe fa3b 	bl	8002e74 <Motor_Correction>
 80049fe:	4c09      	ldr	r4, [pc, #36]	; (8004a24 <Search_Correction+0x30>)

	Set_Left(m_speed + m_correction, FORWARD);
 8004a00:	682b      	ldr	r3, [r5, #0]
 8004a02:	2101      	movs	r1, #1

	/*
	 * Standard FWD movement correction. Runs when moving forward one square and going straight out of turn
	 */

	m_correction = Motor_Correction(FALSE);
 8004a04:	6020      	str	r0, [r4, #0]

	Set_Left(m_speed + m_correction, FORWARD);
 8004a06:	4418      	add	r0, r3
 8004a08:	f7ff fe80 	bl	800470c <Set_Left>
	Set_Right(m_speed + 4 - m_correction, FORWARD);
 8004a0c:	682b      	ldr	r3, [r5, #0]
 8004a0e:	6820      	ldr	r0, [r4, #0]
 8004a10:	2101      	movs	r1, #1
 8004a12:	3304      	adds	r3, #4
 8004a14:	1a18      	subs	r0, r3, r0

}
 8004a16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 */

	m_correction = Motor_Correction(FALSE);

	Set_Left(m_speed + m_correction, FORWARD);
	Set_Right(m_speed + 4 - m_correction, FORWARD);
 8004a1a:	f7ff bea5 	b.w	8004768 <Set_Right>
 8004a1e:	bf00      	nop
 8004a20:	20000338 	.word	0x20000338
 8004a24:	20000330 	.word	0x20000330

08004a28 <Get_Speed>:
	static int l_change = 0;
	static int r_change = 0;
	static int prev_l_speed = 0;
	static int prev_r_speed = 0;
	static uint32_t braking_distance = 0;
	braking_distance = l_dist*6/8;
 8004a28:	4b31      	ldr	r3, [pc, #196]	; (8004af0 <Get_Speed+0xc8>)

	/*
	 * get speed from encoders and correct in Speed Profiler function
	 */

	time_change = (int) time_count - prev_time_count;
 8004a2a:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8004b24 <Get_Speed+0xfc>
	static int l_change = 0;
	static int r_change = 0;
	static int prev_l_speed = 0;
	static int prev_r_speed = 0;
	static uint32_t braking_distance = 0;
	braking_distance = l_dist*6/8;
 8004a2e:	6818      	ldr	r0, [r3, #0]

	/*
	 * get speed from encoders and correct in Speed Profiler function
	 */

	time_change = (int) time_count - prev_time_count;
 8004a30:	4b30      	ldr	r3, [pc, #192]	; (8004af4 <Get_Speed+0xcc>)
 8004a32:	f8dc 2000 	ldr.w	r2, [ip]
	lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
	renc_diff = r_count - prev_r_count;

}

void Get_Speed() {
 8004a36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	/*
	 * get speed from encoders and correct in Speed Profiler function
	 */

	time_change = (int) time_count - prev_time_count;
 8004a3a:	f8d3 8000 	ldr.w	r8, [r3]
 8004a3e:	4c2e      	ldr	r4, [pc, #184]	; (8004af8 <Get_Speed+0xd0>)
 8004a40:	ebc2 0208 	rsb	r2, r2, r8

	if (time_change > 1000) { //sample every ms
 8004a44:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8

	/*
	 * get speed from encoders and correct in Speed Profiler function
	 */

	time_change = (int) time_count - prev_time_count;
 8004a48:	6022      	str	r2, [r4, #0]

	if (time_change > 1000) { //sample every ms
 8004a4a:	dd20      	ble.n	8004a8e <Get_Speed+0x66>

		l_change = l_count - temp_l;
 8004a4c:	4b2b      	ldr	r3, [pc, #172]	; (8004afc <Get_Speed+0xd4>)
 8004a4e:	4f2c      	ldr	r7, [pc, #176]	; (8004b00 <Get_Speed+0xd8>)
 8004a50:	f8d3 e000 	ldr.w	lr, [r3]
		r_change = r_count - temp_r;
 8004a54:	4b2b      	ldr	r3, [pc, #172]	; (8004b04 <Get_Speed+0xdc>)
 8004a56:	4d2c      	ldr	r5, [pc, #176]	; (8004b08 <Get_Speed+0xe0>)
 8004a58:	681e      	ldr	r6, [r3, #0]

		l_speed = 180*1000000/700*l_change/time_change; // in mm/s
 8004a5a:	683b      	ldr	r3, [r7, #0]
	time_change = (int) time_count - prev_time_count;

	if (time_change > 1000) { //sample every ms

		l_change = l_count - temp_l;
		r_change = r_count - temp_r;
 8004a5c:	6829      	ldr	r1, [r5, #0]

		l_speed = 180*1000000/700*l_change/time_change; // in mm/s
 8004a5e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8004b28 <Get_Speed+0x100>
 8004a62:	ebc3 030e 	rsb	r3, r3, lr
	time_change = (int) time_count - prev_time_count;

	if (time_change > 1000) { //sample every ms

		l_change = l_count - temp_l;
		r_change = r_count - temp_r;
 8004a66:	1a71      	subs	r1, r6, r1

		l_speed = 180*1000000/700*l_change/time_change; // in mm/s
 8004a68:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8004b2c <Get_Speed+0x104>
 8004a6c:	fb09 f303 	mul.w	r3, r9, r3
		r_speed = 180*1000000/700*r_change/time_change; // in mm/s
 8004a70:	fb09 f101 	mul.w	r1, r9, r1
		//l_acceleration = l_speed - prev_l_speed;
		//r_acceleration = r_speed - prev_r_speed;

		prev_time_count = time_count;
 8004a74:	f8cc 8000 	str.w	r8, [ip]
		temp_l = l_count;
 8004a78:	f8c7 e000 	str.w	lr, [r7]
		temp_r = r_count;
 8004a7c:	602e      	str	r6, [r5, #0]
	if (time_change > 1000) { //sample every ms

		l_change = l_count - temp_l;
		r_change = r_count - temp_r;

		l_speed = 180*1000000/700*l_change/time_change; // in mm/s
 8004a7e:	fb93 f3f2 	sdiv	r3, r3, r2
		r_speed = 180*1000000/700*r_change/time_change; // in mm/s
 8004a82:	fb91 f2f2 	sdiv	r2, r1, r2
	if (time_change > 1000) { //sample every ms

		l_change = l_count - temp_l;
		r_change = r_count - temp_r;

		l_speed = 180*1000000/700*l_change/time_change; // in mm/s
 8004a86:	f8ca 3000 	str.w	r3, [sl]
		r_speed = 180*1000000/700*r_change/time_change; // in mm/s
 8004a8a:	4b20      	ldr	r3, [pc, #128]	; (8004b0c <Get_Speed+0xe4>)
 8004a8c:	601a      	str	r2, [r3, #0]

	/*
	  WHEN TO ACCELERATE
	*/

	if (l_dist > ONE_CELL*2) {
 8004a8e:	f5b0 6faf 	cmp.w	r0, #1400	; 0x578
 8004a92:	d924      	bls.n	8004ade <Get_Speed+0xb6>
		if (lenc_diff < ONE_CELL || renc_diff < ONE_CELL) {
 8004a94:	4b1e      	ldr	r3, [pc, #120]	; (8004b10 <Get_Speed+0xe8>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8004a9c:	d321      	bcc.n	8004ae2 <Get_Speed+0xba>
 8004a9e:	4b1d      	ldr	r3, [pc, #116]	; (8004b14 <Get_Speed+0xec>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8004aa6:	d31c      	bcc.n	8004ae2 <Get_Speed+0xba>
	static int l_change = 0;
	static int r_change = 0;
	static int prev_l_speed = 0;
	static int prev_r_speed = 0;
	static uint32_t braking_distance = 0;
	braking_distance = l_dist*6/8;
 8004aa8:	2306      	movs	r3, #6
				Search_Correction();
				return;
			}

			else if ((lenc_diff > ONE_CELL*2/3 || renc_diff > ONE_CELL*2/3) &&
					(l_dist_left > braking_distance || r_dist_left > braking_distance)) {
 8004aaa:	4a1b      	ldr	r2, [pc, #108]	; (8004b18 <Get_Speed+0xf0>)
	static int l_change = 0;
	static int r_change = 0;
	static int prev_l_speed = 0;
	static int prev_r_speed = 0;
	static uint32_t braking_distance = 0;
	braking_distance = l_dist*6/8;
 8004aac:	4343      	muls	r3, r0
		if (lenc_diff < ONE_CELL || renc_diff < ONE_CELL) {
				Search_Correction();
				return;
			}

			else if ((lenc_diff > ONE_CELL*2/3 || renc_diff > ONE_CELL*2/3) &&
 8004aae:	6812      	ldr	r2, [r2, #0]
	static int l_change = 0;
	static int r_change = 0;
	static int prev_l_speed = 0;
	static int prev_r_speed = 0;
	static uint32_t braking_distance = 0;
	braking_distance = l_dist*6/8;
 8004ab0:	08db      	lsrs	r3, r3, #3
		if (lenc_diff < ONE_CELL || renc_diff < ONE_CELL) {
				Search_Correction();
				return;
			}

			else if ((lenc_diff > ONE_CELL*2/3 || renc_diff > ONE_CELL*2/3) &&
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d303      	bcc.n	8004abe <Get_Speed+0x96>
					(l_dist_left > braking_distance || r_dist_left > braking_distance)) {
 8004ab6:	4a19      	ldr	r2, [pc, #100]	; (8004b1c <Get_Speed+0xf4>)
 8004ab8:	6812      	ldr	r2, [r2, #0]
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d20b      	bcs.n	8004ad6 <Get_Speed+0xae>
				Speed_Set();
 8004abe:	f7fe f9bd 	bl	8002e3c <Speed_Set>
				Search_Correction();
 8004ac2:	f7ff ff97 	bl	80049f4 <Search_Correction>

				if (time_change > 1000) {
 8004ac6:	6823      	ldr	r3, [r4, #0]
 8004ac8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004acc:	dd0d      	ble.n	8004aea <Get_Speed+0xc2>
		Search_Correction();
		return;
	}


}
 8004ace:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
					(l_dist_left > braking_distance || r_dist_left > braking_distance)) {
				Speed_Set();
				Search_Correction();

				if (time_change > 1000) {
					Speed_Profiler();
 8004ad2:	f7ff bf43 	b.w	800495c <Speed_Profiler>
void SetSpeed(int speed) {
	/*
	 * Set the system motor speed to a certain value. All the speed correction functions will see this value
	 */

	m_speed = speed;
 8004ad6:	22c8      	movs	r2, #200	; 0xc8
 8004ad8:	4b11      	ldr	r3, [pc, #68]	; (8004b20 <Get_Speed+0xf8>)
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	e001      	b.n	8004ae2 <Get_Speed+0xba>
				return;
			}
	}

	else {
		Speed_Set();
 8004ade:	f7fe f9ad 	bl	8002e3c <Speed_Set>
		Search_Correction();
		return;
	}


}
 8004ae2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			}
	}

	else {
		Speed_Set();
		Search_Correction();
 8004ae6:	f7ff bf85 	b.w	80049f4 <Search_Correction>
 8004aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aee:	bf00      	nop
 8004af0:	200001b4 	.word	0x200001b4
 8004af4:	20001450 	.word	0x20001450
 8004af8:	200001f0 	.word	0x200001f0
 8004afc:	20000b28 	.word	0x20000b28
 8004b00:	20000b48 	.word	0x20000b48
 8004b04:	2000020c 	.word	0x2000020c
 8004b08:	20000b50 	.word	0x20000b50
 8004b0c:	20000b2c 	.word	0x20000b2c
 8004b10:	200000bc 	.word	0x200000bc
 8004b14:	200001e0 	.word	0x200001e0
 8004b18:	200001c8 	.word	0x200001c8
 8004b1c:	20000318 	.word	0x20000318
 8004b20:	20000338 	.word	0x20000338
 8004b24:	20001494 	.word	0x20001494
 8004b28:	0003ec76 	.word	0x0003ec76
 8004b2c:	20001358 	.word	0x20001358

08004b30 <Dead_End_Correct>:
	Set_Left(m_speed + m_correction, FORWARD);
	Set_Right(m_speed + 4 - m_correction, FORWARD);

}

void Dead_End_Correct(void) {
 8004b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

/*
 * Function to align when heading into a dead end (whether open or with a front wall.
 *
 */
Get_IR(FALSE, FALSE, FALSE, FALSE);
 8004b32:	2300      	movs	r3, #0
 8004b34:	4e4c      	ldr	r6, [pc, #304]	; (8004c68 <Dead_End_Correct+0x138>)
 8004b36:	461a      	mov	r2, r3
 8004b38:	4619      	mov	r1, r3
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7ff fb2c 	bl	8004198 <Get_IR>

if (dif_l > FRONT_THRESHOLD || dif_r > FRONT_THRESHOLD) { //if there's a front wall
 8004b40:	4b4a      	ldr	r3, [pc, #296]	; (8004c6c <Dead_End_Correct+0x13c>)
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	461c      	mov	r4, r3
 8004b46:	f5b2 7fe1 	cmp.w	r2, #450	; 0x1c2
 8004b4a:	dc03      	bgt.n	8004b54 <Dead_End_Correct+0x24>
 8004b4c:	6833      	ldr	r3, [r6, #0]
 8004b4e:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8004b52:	dd29      	ble.n	8004ba8 <Dead_End_Correct+0x78>

	do {  //align while going into square
		Get_IR(FALSE, FALSE, FALSE, FALSE);
		Search_Correction();
	} while (dif_r < STOP_CONDITION && dif_l < STOP_CONDITION);
 8004b54:	f640 45b1 	movw	r5, #3249	; 0xcb1
Get_IR(FALSE, FALSE, FALSE, FALSE);

if (dif_l > FRONT_THRESHOLD || dif_r > FRONT_THRESHOLD) { //if there's a front wall

	do {  //align while going into square
		Get_IR(FALSE, FALSE, FALSE, FALSE);
 8004b58:	2300      	movs	r3, #0
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7ff fb1a 	bl	8004198 <Get_IR>
		Search_Correction();
 8004b64:	f7ff ff46 	bl	80049f4 <Search_Correction>
	} while (dif_r < STOP_CONDITION && dif_l < STOP_CONDITION);
 8004b68:	6833      	ldr	r3, [r6, #0]
 8004b6a:	42ab      	cmp	r3, r5
 8004b6c:	dd18      	ble.n	8004ba0 <Dead_End_Correct+0x70>

	} while (l_count < 200 && r_count < 200);

}

Set_Left(0, FORWARD); //pause to settle weight
 8004b6e:	2101      	movs	r1, #1
 8004b70:	2000      	movs	r0, #0
 8004b72:	f7ff fdcb 	bl	800470c <Set_Left>
Set_Right(0, FORWARD);
 8004b76:	2101      	movs	r1, #1
 8004b78:	2000      	movs	r0, #0

int p_correction = 0;

do {
	Update_Sensors(TURN_SEARCH);
	p_correction = (r_count + (int) (l_count - 65536))/5;
 8004b7a:	4d3d      	ldr	r5, [pc, #244]	; (8004c70 <Dead_End_Correct+0x140>)
	} while (l_count < 200 && r_count < 200);

}

Set_Left(0, FORWARD); //pause to settle weight
Set_Right(0, FORWARD);
 8004b7c:	f7ff fdf4 	bl	8004768 <Set_Right>

HAL_Delay(200);
 8004b80:	20c8      	movs	r0, #200	; 0xc8
 8004b82:	f7fb fbf5 	bl	8000370 <HAL_Delay>

int p_correction = 0;

do {
	Update_Sensors(TURN_SEARCH);
	p_correction = (r_count + (int) (l_count - 65536))/5;
 8004b86:	4f3b      	ldr	r7, [pc, #236]	; (8004c74 <Dead_End_Correct+0x144>)

Set_Left(0, FORWARD); //pause to settle weight
Set_Right(0, FORWARD);

HAL_Delay(200);
Reset_Counters();
 8004b88:	f7fe f9d2 	bl	8002f30 <Reset_Counters>

//rotate left do 180 degree turn
Set_Left(130, BACKWARD);
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	2082      	movs	r0, #130	; 0x82
 8004b90:	462e      	mov	r6, r5
 8004b92:	f7ff fdbb 	bl	800470c <Set_Left>
Set_Right(130, FORWARD);
 8004b96:	2101      	movs	r1, #1
 8004b98:	2082      	movs	r0, #130	; 0x82
 8004b9a:	f7ff fde5 	bl	8004768 <Set_Right>
 8004b9e:	e017      	b.n	8004bd0 <Dead_End_Correct+0xa0>
if (dif_l > FRONT_THRESHOLD || dif_r > FRONT_THRESHOLD) { //if there's a front wall

	do {  //align while going into square
		Get_IR(FALSE, FALSE, FALSE, FALSE);
		Search_Correction();
	} while (dif_r < STOP_CONDITION && dif_l < STOP_CONDITION);
 8004ba0:	6823      	ldr	r3, [r4, #0]
 8004ba2:	42ab      	cmp	r3, r5
 8004ba4:	ddd8      	ble.n	8004b58 <Dead_End_Correct+0x28>
 8004ba6:	e7e2      	b.n	8004b6e <Dead_End_Correct+0x3e>
	Reset_Counters();
	do {
		Update_Sensors(BARE);
		Search_Correction();

	} while (l_count < 200 && r_count < 200);
 8004ba8:	4d32      	ldr	r5, [pc, #200]	; (8004c74 <Dead_End_Correct+0x144>)

}

else { //no front wall

	Reset_Counters();
 8004baa:	f7fe f9c1 	bl	8002f30 <Reset_Counters>
	do {
		Update_Sensors(BARE);
		Search_Correction();

	} while (l_count < 200 && r_count < 200);
 8004bae:	4c30      	ldr	r4, [pc, #192]	; (8004c70 <Dead_End_Correct+0x140>)

else { //no front wall

	Reset_Counters();
	do {
		Update_Sensors(BARE);
 8004bb0:	2000      	movs	r0, #0
 8004bb2:	f7ff fbe1 	bl	8004378 <Update_Sensors>
		Search_Correction();
 8004bb6:	f7ff ff1d 	bl	80049f4 <Search_Correction>

	} while (l_count < 200 && r_count < 200);
 8004bba:	682b      	ldr	r3, [r5, #0]
 8004bbc:	2bc7      	cmp	r3, #199	; 0xc7
 8004bbe:	d8d6      	bhi.n	8004b6e <Dead_End_Correct+0x3e>
 8004bc0:	6823      	ldr	r3, [r4, #0]
 8004bc2:	2bc7      	cmp	r3, #199	; 0xc7
 8004bc4:	d9f4      	bls.n	8004bb0 <Dead_End_Correct+0x80>
 8004bc6:	e7d2      	b.n	8004b6e <Dead_End_Correct+0x3e>
	p_correction = (r_count + (int) (l_count - 65536))/5;
	if (abs(p_correction) < 135) {
	Set_Left(130 + p_correction, BACKWARD);
	Set_Right(130 - p_correction, FORWARD);
	}
} while (r_count < PIVOT_ENC);// || abs(dif_lf - dif_rf) > 120);
 8004bc8:	6833      	ldr	r3, [r6, #0]
 8004bca:	f5b3 7fd4 	cmp.w	r3, #424	; 0x1a8
 8004bce:	d81a      	bhi.n	8004c06 <Dead_End_Correct+0xd6>
Set_Right(130, FORWARD);

int p_correction = 0;

do {
	Update_Sensors(TURN_SEARCH);
 8004bd0:	2001      	movs	r0, #1
 8004bd2:	f7ff fbd1 	bl	8004378 <Update_Sensors>
	p_correction = (r_count + (int) (l_count - 65536))/5;
 8004bd6:	683c      	ldr	r4, [r7, #0]
 8004bd8:	682b      	ldr	r3, [r5, #0]
 8004bda:	4423      	add	r3, r4
 8004bdc:	2405      	movs	r4, #5
 8004bde:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8004be2:	fbb3 f4f4 	udiv	r4, r3, r4
	if (abs(p_correction) < 135) {
 8004be6:	f104 0386 	add.w	r3, r4, #134	; 0x86
 8004bea:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8004bee:	d8eb      	bhi.n	8004bc8 <Dead_End_Correct+0x98>
	Set_Left(130 + p_correction, BACKWARD);
 8004bf0:	f104 0082 	add.w	r0, r4, #130	; 0x82
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	f7ff fd89 	bl	800470c <Set_Left>
	Set_Right(130 - p_correction, FORWARD);
 8004bfa:	2101      	movs	r1, #1
 8004bfc:	f1c4 0082 	rsb	r0, r4, #130	; 0x82
 8004c00:	f7ff fdb2 	bl	8004768 <Set_Right>
 8004c04:	e7e0      	b.n	8004bc8 <Dead_End_Correct+0x98>
	}
} while (r_count < PIVOT_ENC);// || abs(dif_lf - dif_rf) > 120);

//pause after rotating
Set_Left(0, FORWARD);
 8004c06:	2101      	movs	r1, #1
 8004c08:	2000      	movs	r0, #0
 8004c0a:	f7ff fd7f 	bl	800470c <Set_Left>
Set_Right(0, FORWARD);
 8004c0e:	2101      	movs	r1, #1
 8004c10:	2000      	movs	r0, #0
 8004c12:	f7ff fda9 	bl	8004768 <Set_Right>
Reset_Counters();
 8004c16:	f7fe f98b 	bl	8002f30 <Reset_Counters>
Print_Maze();
 8004c1a:	f7fe faab 	bl	8003174 <Print_Maze>

//go backward a tad if done
int temp  = 0;
if (done_flag == TRUE) {
 8004c1e:	4b16      	ldr	r3, [pc, #88]	; (8004c78 <Dead_End_Correct+0x148>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d11b      	bne.n	8004c5e <Dead_End_Correct+0x12e>
	HAL_Delay(100);
 8004c26:	2064      	movs	r0, #100	; 0x64
 8004c28:	f7fb fba2 	bl	8000370 <HAL_Delay>
	Set_Left(FWD_L, BACKWARD);
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	20c8      	movs	r0, #200	; 0xc8
 8004c30:	f7ff fd6c 	bl	800470c <Set_Left>
	Set_Right(FWD_R, BACKWARD);
 8004c34:	2100      	movs	r1, #0
 8004c36:	20c8      	movs	r0, #200	; 0xc8
 8004c38:	f7ff fd96 	bl	8004768 <Set_Right>
	do {
		temp++;
		if (temp > 4000000) {
			temp = 0;
		}
		r_count = __HAL_TIM_GET_COUNTER(&htim4);
 8004c3c:	4b0f      	ldr	r3, [pc, #60]	; (8004c7c <Dead_End_Correct+0x14c>)
 8004c3e:	6819      	ldr	r1, [r3, #0]
	} while ((r_count - 65471) > 0); //65536
 8004c40:	f64f 73bf 	movw	r3, #65471	; 0xffbf
	do {
		temp++;
		if (temp > 4000000) {
			temp = 0;
		}
		r_count = __HAL_TIM_GET_COUNTER(&htim4);
 8004c44:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	} while ((r_count - 65471) > 0); //65536
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d1fc      	bne.n	8004c44 <Dead_End_Correct+0x114>
 8004c4a:	4a09      	ldr	r2, [pc, #36]	; (8004c70 <Dead_End_Correct+0x140>)
	Set_Left(0, FORWARD); //settle weight
 8004c4c:	2101      	movs	r1, #1
 8004c4e:	2000      	movs	r0, #0
 8004c50:	6013      	str	r3, [r2, #0]
 8004c52:	f7ff fd5b 	bl	800470c <Set_Left>
	Set_Right(0, FORWARD);
 8004c56:	2101      	movs	r1, #1
 8004c58:	2000      	movs	r0, #0
 8004c5a:	f7ff fd85 	bl	8004768 <Set_Right>
}

HAL_Delay(150);
 8004c5e:	2096      	movs	r0, #150	; 0x96

}
 8004c60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	} while ((r_count - 65471) > 0); //65536
	Set_Left(0, FORWARD); //settle weight
	Set_Right(0, FORWARD);
}

HAL_Delay(150);
 8004c64:	f7fb bb84 	b.w	8000370 <HAL_Delay>
 8004c68:	200000b0 	.word	0x200000b0
 8004c6c:	200000a8 	.word	0x200000a8
 8004c70:	2000020c 	.word	0x2000020c
 8004c74:	20000b28 	.word	0x20000b28
 8004c78:	2000031c 	.word	0x2000031c
 8004c7c:	20001458 	.word	0x20001458

08004c80 <Dead_End>:
		r_turnflag = ARRIVE;
		Transition();
	}
}

void Dead_End() {
 8004c80:	b538      	push	{r3, r4, r5, lr}

	if (dead_flag == ARRIVE) {
 8004c82:	4c28      	ldr	r4, [pc, #160]	; (8004d24 <Dead_End+0xa4>)
 8004c84:	6823      	ldr	r3, [r4, #0]
 8004c86:	b9f3      	cbnz	r3, 8004cc6 <Dead_End+0x46>

		if (done_flag == TRUE) {
 8004c88:	4b27      	ldr	r3, [pc, #156]	; (8004d28 <Dead_End+0xa8>)
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	461d      	mov	r5, r3
 8004c8e:	2a01      	cmp	r2, #1
 8004c90:	d103      	bne.n	8004c9a <Dead_End+0x1a>
			Read_Walls();
 8004c92:	f7ff fbbd 	bl	8004410 <Read_Walls>
			Switch_Direction();
 8004c96:	f7fe fc9b 	bl	80035d0 <Switch_Direction>
		}

		Dead_End_Correct(); //should be aligned in middle of square
 8004c9a:	f7ff ff49 	bl	8004b30 <Dead_End_Correct>
		Floodfill(reverse_flag, search_flag, FALSE);
 8004c9e:	4b23      	ldr	r3, [pc, #140]	; (8004d2c <Dead_End+0xac>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	6819      	ldr	r1, [r3, #0]
 8004ca4:	4b22      	ldr	r3, [pc, #136]	; (8004d30 <Dead_End+0xb0>)
 8004ca6:	6818      	ldr	r0, [r3, #0]
 8004ca8:	f7fe fbc4 	bl	8003434 <Floodfill>
		Reset_Counters();
 8004cac:	f7fe f940 	bl	8002f30 <Reset_Counters>
		Clear_Buffers();
 8004cb0:	f7fe f998 	bl	8002fe4 <Clear_Buffers>
		if (done_flag == TRUE) {
 8004cb4:	682b      	ldr	r3, [r5, #0]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d102      	bne.n	8004cc0 <Dead_End+0x40>
			cur_move = PAUSE;
 8004cba:	2204      	movs	r2, #4
 8004cbc:	4b1d      	ldr	r3, [pc, #116]	; (8004d34 <Dead_End+0xb4>)
 8004cbe:	e01b      	b.n	8004cf8 <Dead_End+0x78>
		}

		else {
		dead_flag = PEEK;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	6023      	str	r3, [r4, #0]
 8004cc4:	bd38      	pop	{r3, r4, r5, pc}
		}
	}

	else if (dead_flag == PEEK && (lenc_diff >= DEAD_ENC1 || renc_diff >= DEAD_ENC1)) { //get next state
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d118      	bne.n	8004cfc <Dead_End+0x7c>
 8004cca:	4b1b      	ldr	r3, [pc, #108]	; (8004d38 <Dead_End+0xb8>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b8b      	cmp	r3, #139	; 0x8b
 8004cd0:	d803      	bhi.n	8004cda <Dead_End+0x5a>
 8004cd2:	4b1a      	ldr	r3, [pc, #104]	; (8004d3c <Dead_End+0xbc>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b8b      	cmp	r3, #139	; 0x8b
 8004cd8:	d922      	bls.n	8004d20 <Dead_End+0xa0>

		dead_flag = EXECUTE;
 8004cda:	2302      	movs	r3, #2
 8004cdc:	6023      	str	r3, [r4, #0]
		next_move = Get_Next_Move();
 8004cde:	f7fe ff95 	bl	8003c0c <Get_Next_Move>
 8004ce2:	4b17      	ldr	r3, [pc, #92]	; (8004d40 <Dead_End+0xc0>)
 8004ce4:	6018      	str	r0, [r3, #0]
		Update_Position();
 8004ce6:	f7fe fc87 	bl	80035f8 <Update_Position>

		prev_l_count = l_count; //save current counters
 8004cea:	4b16      	ldr	r3, [pc, #88]	; (8004d44 <Dead_End+0xc4>)
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	4b16      	ldr	r3, [pc, #88]	; (8004d48 <Dead_End+0xc8>)
 8004cf0:	601a      	str	r2, [r3, #0]
		prev_r_count = r_count;
 8004cf2:	4b16      	ldr	r3, [pc, #88]	; (8004d4c <Dead_End+0xcc>)
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	4b16      	ldr	r3, [pc, #88]	; (8004d50 <Dead_End+0xd0>)
 8004cf8:	601a      	str	r2, [r3, #0]
 8004cfa:	bd38      	pop	{r3, r4, r5, pc}
	}
	//after correction
	else if (dead_flag == EXECUTE && (lenc_diff > DEAD_ENC2 || renc_diff >= DEAD_ENC2)) {
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d10f      	bne.n	8004d20 <Dead_End+0xa0>
 8004d00:	4b0d      	ldr	r3, [pc, #52]	; (8004d38 <Dead_End+0xb8>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 8004d08:	d804      	bhi.n	8004d14 <Dead_End+0x94>
 8004d0a:	4b0c      	ldr	r3, [pc, #48]	; (8004d3c <Dead_End+0xbc>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 8004d12:	d305      	bcc.n	8004d20 <Dead_End+0xa0>
		dead_flag = ARRIVE;
 8004d14:	2300      	movs	r3, #0
 8004d16:	6023      	str	r3, [r4, #0]
		Transition();
	}
}
 8004d18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prev_r_count = r_count;
	}
	//after correction
	else if (dead_flag == EXECUTE && (lenc_diff > DEAD_ENC2 || renc_diff >= DEAD_ENC2)) {
		dead_flag = ARRIVE;
		Transition();
 8004d1c:	f7ff bd54 	b.w	80047c8 <Transition>
 8004d20:	bd38      	pop	{r3, r4, r5, pc}
 8004d22:	bf00      	nop
 8004d24:	20000320 	.word	0x20000320
 8004d28:	2000031c 	.word	0x2000031c
 8004d2c:	20000b58 	.word	0x20000b58
 8004d30:	2000033c 	.word	0x2000033c
 8004d34:	20000b3c 	.word	0x20000b3c
 8004d38:	200000bc 	.word	0x200000bc
 8004d3c:	200001e0 	.word	0x200001e0
 8004d40:	20000b60 	.word	0x20000b60
 8004d44:	20000b28 	.word	0x20000b28
 8004d48:	20001454 	.word	0x20001454
 8004d4c:	2000020c 	.word	0x2000020c
 8004d50:	200013e8 	.word	0x200013e8

08004d54 <Forward_Spd>:
			while(1); //infinite loop
		}
	}
}

void Forward_Spd(uint32_t num, char n_state, int add_distance) {
 8004d54:	b570      	push	{r4, r5, r6, lr}
 8004d56:	4615      	mov	r5, r2
 8004d58:	4604      	mov	r4, r0
	430, 445, 450, 415, 420, //FWD6 - 10
	450, 480, 500, 520, 550 //FWD11 - 15
};

uint32_t distance = 0; //distance to travel on current state
Clear_Buffers();
 8004d5a:	f7fe f943 	bl	8002fe4 <Clear_Buffers>
cur_move = FWD; //for detection transition
 8004d5e:	2200      	movs	r2, #0
 8004d60:	4b24      	ldr	r3, [pc, #144]	; (8004df4 <Forward_Spd+0xa0>)

if (add_distance == TRUE) { //if coming off of a right or left turn
 8004d62:	2d01      	cmp	r5, #1
}

int base = base_speeds[num - 1]; //base speed

//uint32_t speeds[3] = {base, 0, 0}; //left/right base , left/right corrected
Set_Left(m_speed, FORWARD);
 8004d64:	4d24      	ldr	r5, [pc, #144]	; (8004df8 <Forward_Spd+0xa4>)
 8004d66:	f04f 0101 	mov.w	r1, #1
	450, 480, 500, 520, 550 //FWD11 - 15
};

uint32_t distance = 0; //distance to travel on current state
Clear_Buffers();
cur_move = FWD; //for detection transition
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	f44f 732f 	mov.w	r3, #700	; 0x2bc
}

int base = base_speeds[num - 1]; //base speed

//uint32_t speeds[3] = {base, 0, 0}; //left/right base , left/right corrected
Set_Left(m_speed, FORWARD);
 8004d70:	6828      	ldr	r0, [r5, #0]
uint32_t distance = 0; //distance to travel on current state
Clear_Buffers();
cur_move = FWD; //for detection transition

if (add_distance == TRUE) { //if coming off of a right or left turn
	distance = ONE_CELL*num + RT_ENC_2;
 8004d72:	fb03 f404 	mul.w	r4, r3, r4

do {
Update_Sensors(TEST);
Search_Correction();

} while (lenc_diff < distance && renc_diff < distance);
 8004d76:	4e21      	ldr	r6, [pc, #132]	; (8004dfc <Forward_Spd+0xa8>)
uint32_t distance = 0; //distance to travel on current state
Clear_Buffers();
cur_move = FWD; //for detection transition

if (add_distance == TRUE) { //if coming off of a right or left turn
	distance = ONE_CELL*num + RT_ENC_2;
 8004d78:	bf08      	it	eq
 8004d7a:	f204 1495 	addweq	r4, r4, #405	; 0x195
}

int base = base_speeds[num - 1]; //base speed

//uint32_t speeds[3] = {base, 0, 0}; //left/right base , left/right corrected
Set_Left(m_speed, FORWARD);
 8004d7e:	f7ff fcc5 	bl	800470c <Set_Left>
Set_Right(m_speed, FORWARD);
 8004d82:	6828      	ldr	r0, [r5, #0]
 8004d84:	2101      	movs	r1, #1

do {
Update_Sensors(TEST);
Search_Correction();

} while (lenc_diff < distance && renc_diff < distance);
 8004d86:	4d1e      	ldr	r5, [pc, #120]	; (8004e00 <Forward_Spd+0xac>)

int base = base_speeds[num - 1]; //base speed

//uint32_t speeds[3] = {base, 0, 0}; //left/right base , left/right corrected
Set_Left(m_speed, FORWARD);
Set_Right(m_speed, FORWARD);
 8004d88:	f7ff fcee 	bl	8004768 <Set_Right>
Reset_Counters();
 8004d8c:	f7fe f8d0 	bl	8002f30 <Reset_Counters>

do {
Update_Sensors(TEST);
 8004d90:	2006      	movs	r0, #6
 8004d92:	f7ff faf1 	bl	8004378 <Update_Sensors>
Search_Correction();
 8004d96:	f7ff fe2d 	bl	80049f4 <Search_Correction>

} while (lenc_diff < distance && renc_diff < distance);
 8004d9a:	6833      	ldr	r3, [r6, #0]
 8004d9c:	429c      	cmp	r4, r3
 8004d9e:	d902      	bls.n	8004da6 <Forward_Spd+0x52>
 8004da0:	682b      	ldr	r3, [r5, #0]
 8004da2:	429c      	cmp	r4, r3
 8004da4:	d8f4      	bhi.n	8004d90 <Forward_Spd+0x3c>
//while ((transition_flag == FALSE && lenc_diff < distance && renc_diff < distance) ||
		//(transition_flag == TRUE && lenc_diff_corr < FWD_TRANS && renc_diff_corr < FWD_TRANS));


angular_error = l_count - r_count;
 8004da6:	4b17      	ldr	r3, [pc, #92]	; (8004e04 <Forward_Spd+0xb0>)
prev_r_count = r_count; //positive for right, negative for left error

#if DEBUG == TRUE
sprintf(tx_buffer, "Top Speed on Straightaway: %d mm/s \r\n-----------------\r\n", top_speed);
Transmit(tx_buffer);
top_speed = 0;
 8004da8:	2400      	movs	r4, #0
} while (lenc_diff < distance && renc_diff < distance);
//while ((transition_flag == FALSE && lenc_diff < distance && renc_diff < distance) ||
		//(transition_flag == TRUE && lenc_diff_corr < FWD_TRANS && renc_diff_corr < FWD_TRANS));


angular_error = l_count - r_count;
 8004daa:	4d17      	ldr	r5, [pc, #92]	; (8004e08 <Forward_Spd+0xb4>)
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	4b17      	ldr	r3, [pc, #92]	; (8004e0c <Forward_Spd+0xb8>)
prev_l_count = l_count;
prev_r_count = r_count; //positive for right, negative for left error

#if DEBUG == TRUE
sprintf(tx_buffer, "Top Speed on Straightaway: %d mm/s \r\n-----------------\r\n", top_speed);
 8004db0:	4e17      	ldr	r6, [pc, #92]	; (8004e10 <Forward_Spd+0xbc>)
} while (lenc_diff < distance && renc_diff < distance);
//while ((transition_flag == FALSE && lenc_diff < distance && renc_diff < distance) ||
		//(transition_flag == TRUE && lenc_diff_corr < FWD_TRANS && renc_diff_corr < FWD_TRANS));


angular_error = l_count - r_count;
 8004db2:	681b      	ldr	r3, [r3, #0]
prev_l_count = l_count;
prev_r_count = r_count; //positive for right, negative for left error

#if DEBUG == TRUE
sprintf(tx_buffer, "Top Speed on Straightaway: %d mm/s \r\n-----------------\r\n", top_speed);
 8004db4:	4817      	ldr	r0, [pc, #92]	; (8004e14 <Forward_Spd+0xc0>)
} while (lenc_diff < distance && renc_diff < distance);
//while ((transition_flag == FALSE && lenc_diff < distance && renc_diff < distance) ||
		//(transition_flag == TRUE && lenc_diff_corr < FWD_TRANS && renc_diff_corr < FWD_TRANS));


angular_error = l_count - r_count;
 8004db6:	1ad1      	subs	r1, r2, r3
 8004db8:	6029      	str	r1, [r5, #0]
prev_l_count = l_count;
 8004dba:	4917      	ldr	r1, [pc, #92]	; (8004e18 <Forward_Spd+0xc4>)
 8004dbc:	600a      	str	r2, [r1, #0]
prev_r_count = r_count; //positive for right, negative for left error
 8004dbe:	4a17      	ldr	r2, [pc, #92]	; (8004e1c <Forward_Spd+0xc8>)

#if DEBUG == TRUE
sprintf(tx_buffer, "Top Speed on Straightaway: %d mm/s \r\n-----------------\r\n", top_speed);
 8004dc0:	4917      	ldr	r1, [pc, #92]	; (8004e20 <Forward_Spd+0xcc>)
		//(transition_flag == TRUE && lenc_diff_corr < FWD_TRANS && renc_diff_corr < FWD_TRANS));


angular_error = l_count - r_count;
prev_l_count = l_count;
prev_r_count = r_count; //positive for right, negative for left error
 8004dc2:	6013      	str	r3, [r2, #0]

#if DEBUG == TRUE
sprintf(tx_buffer, "Top Speed on Straightaway: %d mm/s \r\n-----------------\r\n", top_speed);
 8004dc4:	6832      	ldr	r2, [r6, #0]
 8004dc6:	f001 fb21 	bl	800640c <siprintf>
Transmit(tx_buffer);
 8004dca:	4812      	ldr	r0, [pc, #72]	; (8004e14 <Forward_Spd+0xc0>)
 8004dcc:	f7fe f98e 	bl	80030ec <Transmit>
top_speed = 0;
sprintf(tx_buffer, "Angular Error: %d \r\n---------------\r\n", angular_error);
 8004dd0:	682a      	ldr	r2, [r5, #0]
 8004dd2:	4914      	ldr	r1, [pc, #80]	; (8004e24 <Forward_Spd+0xd0>)
 8004dd4:	480f      	ldr	r0, [pc, #60]	; (8004e14 <Forward_Spd+0xc0>)
prev_r_count = r_count; //positive for right, negative for left error

#if DEBUG == TRUE
sprintf(tx_buffer, "Top Speed on Straightaway: %d mm/s \r\n-----------------\r\n", top_speed);
Transmit(tx_buffer);
top_speed = 0;
 8004dd6:	6034      	str	r4, [r6, #0]
sprintf(tx_buffer, "Angular Error: %d \r\n---------------\r\n", angular_error);
 8004dd8:	f001 fb18 	bl	800640c <siprintf>
Transmit(tx_buffer);
 8004ddc:	480d      	ldr	r0, [pc, #52]	; (8004e14 <Forward_Spd+0xc0>)
 8004dde:	f7fe f985 	bl	80030ec <Transmit>
#endif
speedrunturn = FALSE;
 8004de2:	4b11      	ldr	r3, [pc, #68]	; (8004e28 <Forward_Spd+0xd4>)
 8004de4:	601c      	str	r4, [r3, #0]
transition_flag = FALSE;
 8004de6:	4b11      	ldr	r3, [pc, #68]	; (8004e2c <Forward_Spd+0xd8>)
 8004de8:	601c      	str	r4, [r3, #0]
Turn_Off_Lights();

}
 8004dea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
sprintf(tx_buffer, "Angular Error: %d \r\n---------------\r\n", angular_error);
Transmit(tx_buffer);
#endif
speedrunturn = FALSE;
transition_flag = FALSE;
Turn_Off_Lights();
 8004dee:	f7fe bed3 	b.w	8003b98 <Turn_Off_Lights>
 8004df2:	bf00      	nop
 8004df4:	20000b3c 	.word	0x20000b3c
 8004df8:	20000338 	.word	0x20000338
 8004dfc:	200000bc 	.word	0x200000bc
 8004e00:	200001e0 	.word	0x200001e0
 8004e04:	20000b28 	.word	0x20000b28
 8004e08:	20000b30 	.word	0x20000b30
 8004e0c:	2000020c 	.word	0x2000020c
 8004e10:	200001d8 	.word	0x200001d8
 8004e14:	20001e54 	.word	0x20001e54
 8004e18:	20001454 	.word	0x20001454
 8004e1c:	200013e8 	.word	0x200013e8
 8004e20:	080070c2 	.word	0x080070c2
 8004e24:	080070fb 	.word	0x080070fb
 8004e28:	200001e8 	.word	0x200001e8
 8004e2c:	20000b34 	.word	0x20000b34

08004e30 <Left_Spd>:

}


void Left_Spd(int num, char n_state) {
 8004e30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//Reset_Encoders();

	Set_Left(FWD_L, FORWARD); //accelerate
	Set_Right(FWD_R, FORWARD);

	if ((n_state == FWD1 || n_state == FWD2 || n_state == FWD3 || n_state == FWD4
 8004e34:	3962      	subs	r1, #98	; 0x62
 8004e36:	4c36      	ldr	r4, [pc, #216]	; (8004f10 <Left_Spd+0xe0>)
	Set_Left(LEFT_L, FORWARD); //accelerate
	Set_Right(LEFT_R, FORWARD);

	do {
	Update_Sensors(NONE);
	} while (renc_diff < 490);// + angular_error/3); //error after a straightaway
 8004e38:	4f36      	ldr	r7, [pc, #216]	; (8004f14 <Left_Spd+0xe4>)
Turn_Off_Lights();

}


void Left_Spd(int num, char n_state) {
 8004e3a:	4606      	mov	r6, r0
	//Reset_Encoders();

	Set_Left(FWD_L, FORWARD); //accelerate
	Set_Right(FWD_R, FORWARD);

	if ((n_state == FWD1 || n_state == FWD2 || n_state == FWD3 || n_state == FWD4
 8004e3c:	b2c9      	uxtb	r1, r1
}


void Left_Spd(int num, char n_state) {

for (int i = 0; i < num; i++) {
 8004e3e:	2500      	movs	r5, #0
 8004e40:	46bb      	mov	fp, r7
 8004e42:	40cc      	lsrs	r4, r1
 8004e44:	2914      	cmp	r1, #20
 8004e46:	f004 0401 	and.w	r4, r4, #1
 8004e4a:	bf88      	it	hi
 8004e4c:	2301      	movhi	r3, #1
 8004e4e:	f084 0401 	eor.w	r4, r4, #1
 8004e52:	bf98      	it	ls
 8004e54:	4623      	movls	r3, r4
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	42b5      	cmp	r5, r6
 8004e5a:	da4d      	bge.n	8004ef8 <Left_Spd+0xc8>

	Set_Left(LEFT_L, FORWARD); //accelerate
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	2000      	movs	r0, #0
 8004e60:	f7ff fc54 	bl	800470c <Set_Left>
	Set_Right(LEFT_R, FORWARD);
 8004e64:	2101      	movs	r1, #1
 8004e66:	20c8      	movs	r0, #200	; 0xc8
 8004e68:	f7ff fc7e 	bl	8004768 <Set_Right>

	do {
	Update_Sensors(NONE);
 8004e6c:	2005      	movs	r0, #5
 8004e6e:	f7ff fa83 	bl	8004378 <Update_Sensors>
	} while (renc_diff < 490);// + angular_error/3); //error after a straightaway
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 8004e78:	d3f8      	bcc.n	8004e6c <Left_Spd+0x3c>

	prev_l_count = l_count;
 8004e7a:	4c27      	ldr	r4, [pc, #156]	; (8004f18 <Left_Spd+0xe8>)
	prev_r_count = r_count;

	//Reset_Encoders();

	Set_Left(FWD_L, FORWARD); //accelerate
 8004e7c:	2101      	movs	r1, #1

	do {
	Update_Sensors(NONE);
	} while (renc_diff < 490);// + angular_error/3); //error after a straightaway

	prev_l_count = l_count;
 8004e7e:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8004f30 <Left_Spd+0x100>
	prev_r_count = r_count;

	//Reset_Encoders();

	Set_Left(FWD_L, FORWARD); //accelerate
 8004e82:	20c8      	movs	r0, #200	; 0xc8

	do {
	Update_Sensors(NONE);
	} while (renc_diff < 490);// + angular_error/3); //error after a straightaway

	prev_l_count = l_count;
 8004e84:	6822      	ldr	r2, [r4, #0]
	prev_r_count = r_count;
 8004e86:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8004f34 <Left_Spd+0x104>

	do {
	Update_Sensors(NONE);
	} while (renc_diff < 490);// + angular_error/3); //error after a straightaway

	prev_l_count = l_count;
 8004e8a:	f8ca 2000 	str.w	r2, [sl]
	prev_r_count = r_count;
 8004e8e:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8004f38 <Left_Spd+0x108>
 8004e92:	f8d9 2000 	ldr.w	r2, [r9]
 8004e96:	f8c8 2000 	str.w	r2, [r8]

	//Reset_Encoders();

	Set_Left(FWD_L, FORWARD); //accelerate
 8004e9a:	f7ff fc37 	bl	800470c <Set_Left>
	Set_Right(FWD_R, FORWARD);
 8004e9e:	2101      	movs	r1, #1
 8004ea0:	20c8      	movs	r0, #200	; 0xc8
 8004ea2:	f7ff fc61 	bl	8004768 <Set_Right>

	if ((n_state == FWD1 || n_state == FWD2 || n_state == FWD3 || n_state == FWD4
 8004ea6:	9b00      	ldr	r3, [sp, #0]
 8004ea8:	b94b      	cbnz	r3, 8004ebe <Left_Spd+0x8e>
		 ||	n_state == FWD5 || n_state == FWD6 || n_state == FWD7 || n_state == FWD8 || n_state == FWD9
		 ||	n_state == FWD10 || n_state == FWD11 || n_state == FWD12 || n_state == FWD13 || n_state == FWD14
		 || n_state == FWD15) && (num < 2 || i > 0) ) { //if the next forward state needs to add distance off turn
 8004eaa:	2e01      	cmp	r6, #1
 8004eac:	dd01      	ble.n	8004eb2 <Left_Spd+0x82>
 8004eae:	2d00      	cmp	r5, #0
 8004eb0:	dd05      	ble.n	8004ebe <Left_Spd+0x8e>
			speedrunturn = TRUE;
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	4b19      	ldr	r3, [pc, #100]	; (8004f1c <Left_Spd+0xec>)
 8004eb6:	601a      	str	r2, [r3, #0]
	sprintf(tx_buffer, "Angular Error: %d \r\n---------------\r\n", angular_error);
	Transmit(tx_buffer);
	#endif


}
 8004eb8:	b003      	add	sp, #12
 8004eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}


	do {
	Update_Sensors(TURN_SEARCH); //only get left and right values
	Search_Correction(); //perform correction
	} while (lenc_diff < LT_ENC_2 && renc_diff < LT_ENC_2);
 8004ebe:	4918      	ldr	r1, [pc, #96]	; (8004f20 <Left_Spd+0xf0>)
			return;
	} //if next state is forward, go directly to FORWARD Speed


	do {
	Update_Sensors(TURN_SEARCH); //only get left and right values
 8004ec0:	2001      	movs	r0, #1
 8004ec2:	9101      	str	r1, [sp, #4]
 8004ec4:	f7ff fa58 	bl	8004378 <Update_Sensors>
	Search_Correction(); //perform correction
 8004ec8:	f7ff fd94 	bl	80049f4 <Search_Correction>
	} while (lenc_diff < LT_ENC_2 && renc_diff < LT_ENC_2);
 8004ecc:	9901      	ldr	r1, [sp, #4]
 8004ece:	680a      	ldr	r2, [r1, #0]
 8004ed0:	f5b2 7fca 	cmp.w	r2, #404	; 0x194
 8004ed4:	d804      	bhi.n	8004ee0 <Left_Spd+0xb0>
 8004ed6:	f8db 2000 	ldr.w	r2, [fp]
 8004eda:	f5b2 7fca 	cmp.w	r2, #404	; 0x194
 8004ede:	d9ef      	bls.n	8004ec0 <Left_Spd+0x90>

	//angular_error = (l_count - prev_l_count) - (r_count - prev_r_count);
	angular_error = 0;
	prev_l_count = l_count;
 8004ee0:	6823      	ldr	r3, [r4, #0]
	Update_Sensors(TURN_SEARCH); //only get left and right values
	Search_Correction(); //perform correction
	} while (lenc_diff < LT_ENC_2 && renc_diff < LT_ENC_2);

	//angular_error = (l_count - prev_l_count) - (r_count - prev_r_count);
	angular_error = 0;
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	4a0f      	ldr	r2, [pc, #60]	; (8004f24 <Left_Spd+0xf4>)
}


void Left_Spd(int num, char n_state) {

for (int i = 0; i < num; i++) {
 8004ee6:	3501      	adds	r5, #1
	Search_Correction(); //perform correction
	} while (lenc_diff < LT_ENC_2 && renc_diff < LT_ENC_2);

	//angular_error = (l_count - prev_l_count) - (r_count - prev_r_count);
	angular_error = 0;
	prev_l_count = l_count;
 8004ee8:	f8ca 3000 	str.w	r3, [sl]
	prev_r_count = r_count;
 8004eec:	f8d9 3000 	ldr.w	r3, [r9]
	Update_Sensors(TURN_SEARCH); //only get left and right values
	Search_Correction(); //perform correction
	} while (lenc_diff < LT_ENC_2 && renc_diff < LT_ENC_2);

	//angular_error = (l_count - prev_l_count) - (r_count - prev_r_count);
	angular_error = 0;
 8004ef0:	6011      	str	r1, [r2, #0]
	prev_l_count = l_count;
	prev_r_count = r_count;
 8004ef2:	f8c8 3000 	str.w	r3, [r8]
 8004ef6:	e7af      	b.n	8004e58 <Left_Spd+0x28>

}

#if DEBUG == TRUE
	sprintf(tx_buffer, "Angular Error: %d \r\n---------------\r\n", angular_error);
 8004ef8:	4b0a      	ldr	r3, [pc, #40]	; (8004f24 <Left_Spd+0xf4>)
 8004efa:	490b      	ldr	r1, [pc, #44]	; (8004f28 <Left_Spd+0xf8>)
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	480b      	ldr	r0, [pc, #44]	; (8004f2c <Left_Spd+0xfc>)
 8004f00:	f001 fa84 	bl	800640c <siprintf>
	Transmit(tx_buffer);
 8004f04:	4809      	ldr	r0, [pc, #36]	; (8004f2c <Left_Spd+0xfc>)
	#endif


}
 8004f06:	b003      	add	sp, #12
 8004f08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

}

#if DEBUG == TRUE
	sprintf(tx_buffer, "Angular Error: %d \r\n---------------\r\n", angular_error);
	Transmit(tx_buffer);
 8004f0c:	f7fe b8ee 	b.w	80030ec <Transmit>
 8004f10:	0010fbef 	.word	0x0010fbef
 8004f14:	200001e0 	.word	0x200001e0
 8004f18:	20000b28 	.word	0x20000b28
 8004f1c:	200001e8 	.word	0x200001e8
 8004f20:	200000bc 	.word	0x200000bc
 8004f24:	20000b30 	.word	0x20000b30
 8004f28:	080070fb 	.word	0x080070fb
 8004f2c:	20001e54 	.word	0x20001e54
 8004f30:	20001454 	.word	0x20001454
 8004f34:	2000020c 	.word	0x2000020c
 8004f38:	200013e8 	.word	0x200013e8

08004f3c <Right_Spd>:
	#endif


}

void Right_Spd(int num, char n_state) {
 8004f3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	prev_r_count = r_count;

	Set_Left(FWD_L, FORWARD); //accelerate
	Set_Right(FWD_R, FORWARD);

	if ((n_state == FWD1 || n_state == FWD2 || n_state == FWD3 || n_state == FWD4
 8004f40:	3962      	subs	r1, #98	; 0x62
 8004f42:	4c36      	ldr	r4, [pc, #216]	; (800501c <Right_Spd+0xe0>)
	Set_Left(RIGHT_L, FORWARD); //accelerate
	Set_Right(RIGHT_R, FORWARD);

	do {
		Update_Sensors(NONE); //only update encoder counts
	} while (lenc_diff < 490); //- angular_error);
 8004f44:	4f36      	ldr	r7, [pc, #216]	; (8005020 <Right_Spd+0xe4>)
	#endif


}

void Right_Spd(int num, char n_state) {
 8004f46:	4606      	mov	r6, r0
	prev_r_count = r_count;

	Set_Left(FWD_L, FORWARD); //accelerate
	Set_Right(FWD_R, FORWARD);

	if ((n_state == FWD1 || n_state == FWD2 || n_state == FWD3 || n_state == FWD4
 8004f48:	b2c9      	uxtb	r1, r1

}

void Right_Spd(int num, char n_state) {

for (int i = 0; i < num; i++) { //maximum of two 90 degree turns in a row
 8004f4a:	2500      	movs	r5, #0
 8004f4c:	46bb      	mov	fp, r7
 8004f4e:	40cc      	lsrs	r4, r1
 8004f50:	2914      	cmp	r1, #20
 8004f52:	f004 0401 	and.w	r4, r4, #1
 8004f56:	bf88      	it	hi
 8004f58:	2301      	movhi	r3, #1
 8004f5a:	f084 0401 	eor.w	r4, r4, #1
 8004f5e:	bf98      	it	ls
 8004f60:	4623      	movls	r3, r4
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	42b5      	cmp	r5, r6
 8004f66:	da4d      	bge.n	8005004 <Right_Spd+0xc8>

	Set_Left(RIGHT_L, FORWARD); //accelerate
 8004f68:	2101      	movs	r1, #1
 8004f6a:	20c8      	movs	r0, #200	; 0xc8
 8004f6c:	f7ff fbce 	bl	800470c <Set_Left>
	Set_Right(RIGHT_R, FORWARD);
 8004f70:	2101      	movs	r1, #1
 8004f72:	2000      	movs	r0, #0
 8004f74:	f7ff fbf8 	bl	8004768 <Set_Right>

	do {
		Update_Sensors(NONE); //only update encoder counts
 8004f78:	2005      	movs	r0, #5
 8004f7a:	f7ff f9fd 	bl	8004378 <Update_Sensors>
	} while (lenc_diff < 490); //- angular_error);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 8004f84:	d3f8      	bcc.n	8004f78 <Right_Spd+0x3c>

	prev_l_count = l_count; //save encoder counts out of turn
 8004f86:	4c27      	ldr	r4, [pc, #156]	; (8005024 <Right_Spd+0xe8>)
	prev_r_count = r_count;

	Set_Left(FWD_L, FORWARD); //accelerate
 8004f88:	2101      	movs	r1, #1

	do {
		Update_Sensors(NONE); //only update encoder counts
	} while (lenc_diff < 490); //- angular_error);

	prev_l_count = l_count; //save encoder counts out of turn
 8004f8a:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 800503c <Right_Spd+0x100>
	prev_r_count = r_count;

	Set_Left(FWD_L, FORWARD); //accelerate
 8004f8e:	20c8      	movs	r0, #200	; 0xc8

	do {
		Update_Sensors(NONE); //only update encoder counts
	} while (lenc_diff < 490); //- angular_error);

	prev_l_count = l_count; //save encoder counts out of turn
 8004f90:	6822      	ldr	r2, [r4, #0]
	prev_r_count = r_count;
 8004f92:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8005040 <Right_Spd+0x104>

	do {
		Update_Sensors(NONE); //only update encoder counts
	} while (lenc_diff < 490); //- angular_error);

	prev_l_count = l_count; //save encoder counts out of turn
 8004f96:	f8ca 2000 	str.w	r2, [sl]
	prev_r_count = r_count;
 8004f9a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8005044 <Right_Spd+0x108>
 8004f9e:	f8d9 2000 	ldr.w	r2, [r9]
 8004fa2:	f8c8 2000 	str.w	r2, [r8]

	Set_Left(FWD_L, FORWARD); //accelerate
 8004fa6:	f7ff fbb1 	bl	800470c <Set_Left>
	Set_Right(FWD_R, FORWARD);
 8004faa:	2101      	movs	r1, #1
 8004fac:	20c8      	movs	r0, #200	; 0xc8
 8004fae:	f7ff fbdb 	bl	8004768 <Set_Right>

	if ((n_state == FWD1 || n_state == FWD2 || n_state == FWD3 || n_state == FWD4
 8004fb2:	9b00      	ldr	r3, [sp, #0]
 8004fb4:	b94b      	cbnz	r3, 8004fca <Right_Spd+0x8e>
	 ||	n_state == FWD5 || n_state == FWD6 || n_state == FWD7 || n_state == FWD8 || n_state == FWD9
	 ||	n_state == FWD10 || n_state == FWD11 || n_state == FWD12 || n_state == FWD13 || n_state == FWD14
	 || n_state == FWD15) && (num < 2 || i > 0) ) { //if the next forward state needs to add distance off turn
 8004fb6:	2e01      	cmp	r6, #1
 8004fb8:	dd01      	ble.n	8004fbe <Right_Spd+0x82>
 8004fba:	2d00      	cmp	r5, #0
 8004fbc:	dd05      	ble.n	8004fca <Right_Spd+0x8e>
		speedrunturn = TRUE;
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	4b19      	ldr	r3, [pc, #100]	; (8005028 <Right_Spd+0xec>)
 8004fc2:	601a      	str	r2, [r3, #0]
#if DEBUG == TRUE
	sprintf(tx_buffer, "Angular Error: %d \r\n---------------\r\n", angular_error);
	Transmit(tx_buffer);
	#endif

}
 8004fc4:	b003      	add	sp, #12
 8004fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	do { //go straight out of turn. will run if there's a left turn next
	Update_Sensors(TURN_SEARCH);
	Search_Correction();
	} while (lenc_diff < RT_ENC_2 && renc_diff < RT_ENC_2);
 8004fca:	4918      	ldr	r1, [pc, #96]	; (800502c <Right_Spd+0xf0>)
		speedrunturn = TRUE;
		return;
	}

	do { //go straight out of turn. will run if there's a left turn next
	Update_Sensors(TURN_SEARCH);
 8004fcc:	2001      	movs	r0, #1
 8004fce:	9101      	str	r1, [sp, #4]
 8004fd0:	f7ff f9d2 	bl	8004378 <Update_Sensors>
	Search_Correction();
 8004fd4:	f7ff fd0e 	bl	80049f4 <Search_Correction>
	} while (lenc_diff < RT_ENC_2 && renc_diff < RT_ENC_2);
 8004fd8:	f8db 2000 	ldr.w	r2, [fp]
 8004fdc:	f5b2 7fca 	cmp.w	r2, #404	; 0x194
 8004fe0:	d804      	bhi.n	8004fec <Right_Spd+0xb0>
 8004fe2:	9901      	ldr	r1, [sp, #4]
 8004fe4:	680a      	ldr	r2, [r1, #0]
 8004fe6:	f5b2 7fca 	cmp.w	r2, #404	; 0x194
 8004fea:	d9ef      	bls.n	8004fcc <Right_Spd+0x90>
	//angular_error = (l_count - prev_l_count) - (r_count - prev_r_count);
	angular_error = 0;

	prev_l_count = l_count;
 8004fec:	6823      	ldr	r3, [r4, #0]
	do { //go straight out of turn. will run if there's a left turn next
	Update_Sensors(TURN_SEARCH);
	Search_Correction();
	} while (lenc_diff < RT_ENC_2 && renc_diff < RT_ENC_2);
	//angular_error = (l_count - prev_l_count) - (r_count - prev_r_count);
	angular_error = 0;
 8004fee:	2100      	movs	r1, #0
 8004ff0:	4a0f      	ldr	r2, [pc, #60]	; (8005030 <Right_Spd+0xf4>)

}

void Right_Spd(int num, char n_state) {

for (int i = 0; i < num; i++) { //maximum of two 90 degree turns in a row
 8004ff2:	3501      	adds	r5, #1
	Search_Correction();
	} while (lenc_diff < RT_ENC_2 && renc_diff < RT_ENC_2);
	//angular_error = (l_count - prev_l_count) - (r_count - prev_r_count);
	angular_error = 0;

	prev_l_count = l_count;
 8004ff4:	f8ca 3000 	str.w	r3, [sl]
	prev_r_count = r_count;
 8004ff8:	f8d9 3000 	ldr.w	r3, [r9]
	do { //go straight out of turn. will run if there's a left turn next
	Update_Sensors(TURN_SEARCH);
	Search_Correction();
	} while (lenc_diff < RT_ENC_2 && renc_diff < RT_ENC_2);
	//angular_error = (l_count - prev_l_count) - (r_count - prev_r_count);
	angular_error = 0;
 8004ffc:	6011      	str	r1, [r2, #0]

	prev_l_count = l_count;
	prev_r_count = r_count;
 8004ffe:	f8c8 3000 	str.w	r3, [r8]
 8005002:	e7af      	b.n	8004f64 <Right_Spd+0x28>

} //end for loop
#if DEBUG == TRUE
	sprintf(tx_buffer, "Angular Error: %d \r\n---------------\r\n", angular_error);
 8005004:	4b0a      	ldr	r3, [pc, #40]	; (8005030 <Right_Spd+0xf4>)
 8005006:	490b      	ldr	r1, [pc, #44]	; (8005034 <Right_Spd+0xf8>)
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	480b      	ldr	r0, [pc, #44]	; (8005038 <Right_Spd+0xfc>)
 800500c:	f001 f9fe 	bl	800640c <siprintf>
	Transmit(tx_buffer);
 8005010:	4809      	ldr	r0, [pc, #36]	; (8005038 <Right_Spd+0xfc>)
	#endif

}
 8005012:	b003      	add	sp, #12
 8005014:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	prev_r_count = r_count;

} //end for loop
#if DEBUG == TRUE
	sprintf(tx_buffer, "Angular Error: %d \r\n---------------\r\n", angular_error);
	Transmit(tx_buffer);
 8005018:	f7fe b868 	b.w	80030ec <Transmit>
 800501c:	0010fbef 	.word	0x0010fbef
 8005020:	200000bc 	.word	0x200000bc
 8005024:	20000b28 	.word	0x20000b28
 8005028:	200001e8 	.word	0x200001e8
 800502c:	200001e0 	.word	0x200001e0
 8005030:	20000b30 	.word	0x20000b30
 8005034:	080070fb 	.word	0x080070fb
 8005038:	20001e54 	.word	0x20001e54
 800503c:	20001454 	.word	0x20001454
 8005040:	2000020c 	.word	0x2000020c
 8005044:	200013e8 	.word	0x200013e8

08005048 <Stop>:
	HAL_UART_Receive(&huart1, rx_buffer, len, 5000);
	Transmit("HAHA");
}
*/

void Stop(void) {
 8005048:	b538      	push	{r3, r4, r5, lr}
	/*
	 * Perform things need to stop.
	 */

	Set_Left(0, FORWARD);
 800504a:	2101      	movs	r1, #1
 800504c:	2000      	movs	r0, #0
 800504e:	f7ff fb5d 	bl	800470c <Set_Left>
	Set_Right(0, FORWARD); //STOP
 8005052:	2101      	movs	r1, #1
 8005054:	2000      	movs	r0, #0
	Reset_Counters();
	Clear_Buffers();
	debug_flag = FALSE;
#if DEBUG == TRUE
	sprintf(tx_buffer, "Stopping...... Stop Flag:  %d\r\n", stop_flag);
 8005056:	4c0c      	ldr	r4, [pc, #48]	; (8005088 <Stop+0x40>)
	/*
	 * Perform things need to stop.
	 */

	Set_Left(0, FORWARD);
	Set_Right(0, FORWARD); //STOP
 8005058:	f7ff fb86 	bl	8004768 <Set_Right>
	Reset_Counters();
	Clear_Buffers();
	debug_flag = FALSE;
#if DEBUG == TRUE
	sprintf(tx_buffer, "Stopping...... Stop Flag:  %d\r\n", stop_flag);
 800505c:	4d0b      	ldr	r5, [pc, #44]	; (800508c <Stop+0x44>)
	 * Perform things need to stop.
	 */

	Set_Left(0, FORWARD);
	Set_Right(0, FORWARD); //STOP
	Reset_Counters();
 800505e:	f7fd ff67 	bl	8002f30 <Reset_Counters>
	Clear_Buffers();
 8005062:	f7fd ffbf 	bl	8002fe4 <Clear_Buffers>
	debug_flag = FALSE;
 8005066:	4b0a      	ldr	r3, [pc, #40]	; (8005090 <Stop+0x48>)
 8005068:	2200      	movs	r2, #0
#if DEBUG == TRUE
	sprintf(tx_buffer, "Stopping...... Stop Flag:  %d\r\n", stop_flag);
 800506a:	490a      	ldr	r1, [pc, #40]	; (8005094 <Stop+0x4c>)
 800506c:	4628      	mov	r0, r5

	Set_Left(0, FORWARD);
	Set_Right(0, FORWARD); //STOP
	Reset_Counters();
	Clear_Buffers();
	debug_flag = FALSE;
 800506e:	601a      	str	r2, [r3, #0]
#if DEBUG == TRUE
	sprintf(tx_buffer, "Stopping...... Stop Flag:  %d\r\n", stop_flag);
 8005070:	6822      	ldr	r2, [r4, #0]
 8005072:	f001 f9cb 	bl	800640c <siprintf>
	Transmit(tx_buffer);
 8005076:	4628      	mov	r0, r5
 8005078:	f7fe f838 	bl	80030ec <Transmit>
#endif
	//Send_State();
	//Send_Debug();
	//Print_Maze();
	Turn_Off_Lights();
 800507c:	f7fe fd8c 	bl	8003b98 <Turn_Off_Lights>
	stop_flag = TRUE;
 8005080:	2301      	movs	r3, #1
 8005082:	6023      	str	r3, [r4, #0]
 8005084:	bd38      	pop	{r3, r4, r5, pc}
 8005086:	bf00      	nop
 8005088:	20000014 	.word	0x20000014
 800508c:	20001e54 	.word	0x20001e54
 8005090:	200001d4 	.word	0x200001d4
 8005094:	08007121 	.word	0x08007121

08005098 <Detect_Transition>:

HAL_Delay(150);

}

void Detect_Transition() {
 8005098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 *
	 * Detect the transitions sensed by the Get_IR functions. If a transition has been detected,
	 * then update the encoder count from that spot.
	 */

	if (transition_flag == TRUE) {
 800509a:	4b31      	ldr	r3, [pc, #196]	; (8005160 <Detect_Transition+0xc8>)
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	2a01      	cmp	r2, #1
 80050a0:	d10e      	bne.n	80050c0 <Detect_Transition+0x28>
		lenc_diff_corr = l_count - l_count_corr; //update corrected encoder counts
 80050a2:	4b30      	ldr	r3, [pc, #192]	; (8005164 <Detect_Transition+0xcc>)
 80050a4:	4a30      	ldr	r2, [pc, #192]	; (8005168 <Detect_Transition+0xd0>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6812      	ldr	r2, [r2, #0]
 80050aa:	1a9b      	subs	r3, r3, r2
 80050ac:	4a2f      	ldr	r2, [pc, #188]	; (800516c <Detect_Transition+0xd4>)
 80050ae:	6013      	str	r3, [r2, #0]
		renc_diff_corr = r_count - r_count_corr;
 80050b0:	4b2f      	ldr	r3, [pc, #188]	; (8005170 <Detect_Transition+0xd8>)
 80050b2:	4a30      	ldr	r2, [pc, #192]	; (8005174 <Detect_Transition+0xdc>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6812      	ldr	r2, [r2, #0]
 80050b8:	1a9b      	subs	r3, r3, r2
 80050ba:	4a2f      	ldr	r2, [pc, #188]	; (8005178 <Detect_Transition+0xe0>)
 80050bc:	6013      	str	r3, [r2, #0]
 80050be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	else if (r_transition_flag == TRUE || l_transition_flag == TRUE) { //detect transition and start counting from there
 80050c0:	4e2e      	ldr	r6, [pc, #184]	; (800517c <Detect_Transition+0xe4>)
 80050c2:	4f2f      	ldr	r7, [pc, #188]	; (8005180 <Detect_Transition+0xe8>)
 80050c4:	6834      	ldr	r4, [r6, #0]
 80050c6:	2c01      	cmp	r4, #1
 80050c8:	d002      	beq.n	80050d0 <Detect_Transition+0x38>
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	2a01      	cmp	r2, #1
 80050ce:	d146      	bne.n	800515e <Detect_Transition+0xc6>
		l_count_corr = l_count; //save current count
 80050d0:	4a24      	ldr	r2, [pc, #144]	; (8005164 <Detect_Transition+0xcc>)
		r_count_corr = r_count;
		transition_flag = TRUE; //enable transition flag
		lenc_diff_corr = 0; //reset corrected difference
		renc_diff_corr = 0;
		if (l_transition_flag == TRUE) { //left leds to represent left
 80050d2:	683d      	ldr	r5, [r7, #0]
		lenc_diff_corr = l_count - l_count_corr; //update corrected encoder counts
		renc_diff_corr = r_count - r_count_corr;
	}

	else if (r_transition_flag == TRUE || l_transition_flag == TRUE) { //detect transition and start counting from there
		l_count_corr = l_count; //save current count
 80050d4:	6811      	ldr	r1, [r2, #0]
 80050d6:	4a24      	ldr	r2, [pc, #144]	; (8005168 <Detect_Transition+0xd0>)
		r_count_corr = r_count;
		transition_flag = TRUE; //enable transition flag
		lenc_diff_corr = 0; //reset corrected difference
		renc_diff_corr = 0;
		if (l_transition_flag == TRUE) { //left leds to represent left
 80050d8:	2d01      	cmp	r5, #1
		lenc_diff_corr = l_count - l_count_corr; //update corrected encoder counts
		renc_diff_corr = r_count - r_count_corr;
	}

	else if (r_transition_flag == TRUE || l_transition_flag == TRUE) { //detect transition and start counting from there
		l_count_corr = l_count; //save current count
 80050da:	6011      	str	r1, [r2, #0]
		r_count_corr = r_count;
 80050dc:	4a24      	ldr	r2, [pc, #144]	; (8005170 <Detect_Transition+0xd8>)
 80050de:	6811      	ldr	r1, [r2, #0]
 80050e0:	4a24      	ldr	r2, [pc, #144]	; (8005174 <Detect_Transition+0xdc>)
 80050e2:	6011      	str	r1, [r2, #0]
		transition_flag = TRUE; //enable transition flag
 80050e4:	f04f 0201 	mov.w	r2, #1
 80050e8:	601a      	str	r2, [r3, #0]
		lenc_diff_corr = 0; //reset corrected difference
 80050ea:	f04f 0300 	mov.w	r3, #0
 80050ee:	4a1f      	ldr	r2, [pc, #124]	; (800516c <Detect_Transition+0xd4>)
 80050f0:	6013      	str	r3, [r2, #0]
		renc_diff_corr = 0;
 80050f2:	4a21      	ldr	r2, [pc, #132]	; (8005178 <Detect_Transition+0xe0>)
 80050f4:	6013      	str	r3, [r2, #0]
		if (l_transition_flag == TRUE) { //left leds to represent left
 80050f6:	d10e      	bne.n	8005116 <Detect_Transition+0x7e>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, ON);
 80050f8:	462a      	mov	r2, r5
 80050fa:	2102      	movs	r1, #2
 80050fc:	4821      	ldr	r0, [pc, #132]	; (8005184 <Detect_Transition+0xec>)
 80050fe:	f7fc f86f 	bl	80011e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, ON);
 8005102:	462a      	mov	r2, r5
 8005104:	4629      	mov	r1, r5
 8005106:	481f      	ldr	r0, [pc, #124]	; (8005184 <Detect_Transition+0xec>)
 8005108:	f7fc f86a 	bl	80011e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, ON);
 800510c:	462a      	mov	r2, r5
 800510e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005112:	481d      	ldr	r0, [pc, #116]	; (8005188 <Detect_Transition+0xf0>)
 8005114:	e011      	b.n	800513a <Detect_Transition+0xa2>

			l_dist_corr = FWD_TRANS - T_OFF;
			r_dist_corr = FWD_TRANS - T_OFF;
		}
		else if (r_transition_flag == TRUE) { //right leds to represent right
 8005116:	2c01      	cmp	r4, #1
 8005118:	d117      	bne.n	800514a <Detect_Transition+0xb2>
			HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, ON);
 800511a:	4622      	mov	r2, r4
 800511c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005120:	481a      	ldr	r0, [pc, #104]	; (800518c <Detect_Transition+0xf4>)
 8005122:	f7fc f85d 	bl	80011e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, ON);
 8005126:	4622      	mov	r2, r4
 8005128:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800512c:	4817      	ldr	r0, [pc, #92]	; (800518c <Detect_Transition+0xf4>)
 800512e:	f7fc f857 	bl	80011e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, ON);
 8005132:	4622      	mov	r2, r4
 8005134:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005138:	4814      	ldr	r0, [pc, #80]	; (800518c <Detect_Transition+0xf4>)
 800513a:	f7fc f851 	bl	80011e0 <HAL_GPIO_WritePin>
			l_dist_corr = FWD_TRANS;
 800513e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8005142:	4a13      	ldr	r2, [pc, #76]	; (8005190 <Detect_Transition+0xf8>)
 8005144:	6013      	str	r3, [r2, #0]
			r_dist_corr = FWD_TRANS;
 8005146:	4a13      	ldr	r2, [pc, #76]	; (8005194 <Detect_Transition+0xfc>)
 8005148:	6013      	str	r3, [r2, #0]
		}
		r_transition_flag = FALSE; //reset transition flags after transition is detected
 800514a:	2300      	movs	r3, #0
 800514c:	6033      	str	r3, [r6, #0]
		l_transition_flag = FALSE;
 800514e:	603b      	str	r3, [r7, #0]
		if (debug_flag == TRUE) { //for debug at competitions
 8005150:	4b11      	ldr	r3, [pc, #68]	; (8005198 <Detect_Transition+0x100>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d102      	bne.n	800515e <Detect_Transition+0xc6>
			Stop(); //stop
 8005158:	f7ff ff76 	bl	8005048 <Stop>
 800515c:	e7fe      	b.n	800515c <Detect_Transition+0xc4>
 800515e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005160:	20000b34 	.word	0x20000b34
 8005164:	20000b28 	.word	0x20000b28
 8005168:	20000b24 	.word	0x20000b24
 800516c:	200001cc 	.word	0x200001cc
 8005170:	2000020c 	.word	0x2000020c
 8005174:	20000b5c 	.word	0x20000b5c
 8005178:	20000310 	.word	0x20000310
 800517c:	200000c0 	.word	0x200000c0
 8005180:	20000b4c 	.word	0x20000b4c
 8005184:	40021000 	.word	0x40021000
 8005188:	40020400 	.word	0x40020400
 800518c:	40020800 	.word	0x40020800
 8005190:	20000210 	.word	0x20000210
 8005194:	20000b44 	.word	0x20000b44
 8005198:	200001d4 	.word	0x200001d4

0800519c <Forward_Speed>:
    		break;
    	} //switch
    } //searching loop
}

void Forward_Speed() {
 800519c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	static int set_flag = FALSE;
	l_dist_left = l_dist - lenc_diff;
 80051a0:	4f36      	ldr	r7, [pc, #216]	; (800527c <Forward_Speed+0xe0>)
 80051a2:	f8df 8100 	ldr.w	r8, [pc, #256]	; 80052a4 <Forward_Speed+0x108>
 80051a6:	f8d7 e000 	ldr.w	lr, [r7]
 80051aa:	f8d8 0000 	ldr.w	r0, [r8]
	r_dist_left = r_dist - renc_diff;
 80051ae:	4d34      	ldr	r5, [pc, #208]	; (8005280 <Forward_Speed+0xe4>)
 80051b0:	4e34      	ldr	r6, [pc, #208]	; (8005284 <Forward_Speed+0xe8>)
}

void Forward_Speed() {

	static int set_flag = FALSE;
	l_dist_left = l_dist - lenc_diff;
 80051b2:	ebc0 030e 	rsb	r3, r0, lr
 80051b6:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 80052a8 <Forward_Speed+0x10c>
	r_dist_left = r_dist - renc_diff;
 80051ba:	6829      	ldr	r1, [r5, #0]
 80051bc:	6832      	ldr	r2, [r6, #0]
}

void Forward_Speed() {

	static int set_flag = FALSE;
	l_dist_left = l_dist - lenc_diff;
 80051be:	f8ca 3000 	str.w	r3, [sl]
	r_dist_left = r_dist - renc_diff;
 80051c2:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 80052ac <Forward_Speed+0x110>
 80051c6:	1a8b      	subs	r3, r1, r2

	if (fwd_flag == FALSE) {
 80051c8:	4c2f      	ldr	r4, [pc, #188]	; (8005288 <Forward_Speed+0xec>)

void Forward_Speed() {

	static int set_flag = FALSE;
	l_dist_left = l_dist - lenc_diff;
	r_dist_left = r_dist - renc_diff;
 80051ca:	f8c9 3000 	str.w	r3, [r9]

	if (fwd_flag == FALSE) {
 80051ce:	6823      	ldr	r3, [r4, #0]
 80051d0:	b95b      	cbnz	r3, 80051ea <Forward_Speed+0x4e>
		if (lenc_diff >= l_dist/4 || renc_diff >= r_dist/4)	{ //start detecting at the beginning of the square
 80051d2:	ebb0 0f9e 	cmp.w	r0, lr, lsr #2
 80051d6:	d202      	bcs.n	80051de <Forward_Speed+0x42>
 80051d8:	ebb2 0f91 	cmp.w	r2, r1, lsr #2
 80051dc:	d34b      	bcc.n	8005276 <Forward_Speed+0xda>
			fwd_flag = TRUE;
 80051de:	2301      	movs	r3, #1
 80051e0:	6023      	str	r3, [r4, #0]
			HAL_TIM_Base_Stop(&htim5); //stop timer for speed
			SetSpeed(FWD_L); //may not brake enough , so set the speed anyway
			Transition();
		}
	}
}
 80051e2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	r_dist_left = r_dist - renc_diff;

	if (fwd_flag == FALSE) {
		if (lenc_diff >= l_dist/4 || renc_diff >= r_dist/4)	{ //start detecting at the beginning of the square
			fwd_flag = TRUE;
			Middle_Cell_Action();
 80051e6:	f7ff ba49 	b.w	800467c <Middle_Cell_Action>
		}
	}

	else if (fwd_flag == TRUE) {
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d143      	bne.n	8005276 <Forward_Speed+0xda>
		Detect_Transition();
 80051ee:	f7ff ff53 	bl	8005098 <Detect_Transition>
		if (transition_flag == TRUE && (lenc_diff_corr >= FWD_TRANS || renc_diff_corr >= FWD_TRANS)) {
 80051f2:	4b26      	ldr	r3, [pc, #152]	; (800528c <Forward_Speed+0xf0>)
 80051f4:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 8005298 <Forward_Speed+0xfc>
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d11c      	bne.n	8005238 <Forward_Speed+0x9c>
 80051fe:	4b24      	ldr	r3, [pc, #144]	; (8005290 <Forward_Speed+0xf4>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8005206:	d204      	bcs.n	8005212 <Forward_Speed+0x76>
 8005208:	4b22      	ldr	r3, [pc, #136]	; (8005294 <Forward_Speed+0xf8>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8005210:	d312      	bcc.n	8005238 <Forward_Speed+0x9c>
			if (l_dist_left < ONE_CELL/2 || r_dist_left < ONE_CELL/2) {
 8005212:	f8da 3000 	ldr.w	r3, [sl]
 8005216:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800521a:	d304      	bcc.n	8005226 <Forward_Speed+0x8a>
 800521c:	f8d9 3000 	ldr.w	r3, [r9]
 8005220:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8005224:	d203      	bcs.n	800522e <Forward_Speed+0x92>
				set_flag = TRUE;
 8005226:	2301      	movs	r3, #1
 8005228:	f8cb 3000 	str.w	r3, [fp]
 800522c:	e00d      	b.n	800524a <Forward_Speed+0xae>
			}
			else {
				Clear_Buffers();
 800522e:	f7fd fed9 	bl	8002fe4 <Clear_Buffers>
				Turn_Off_Lights();
 8005232:	f7fe fcb1 	bl	8003b98 <Turn_Off_Lights>
 8005236:	e008      	b.n	800524a <Forward_Speed+0xae>
			}
		}

		else {
			if (lenc_diff >= l_dist || renc_diff >= r_dist)	{ //left and right wheel moving at same speed. If statement checks if distance has been covered
 8005238:	f8d8 2000 	ldr.w	r2, [r8]
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	429a      	cmp	r2, r3
 8005240:	d2f1      	bcs.n	8005226 <Forward_Speed+0x8a>
 8005242:	6832      	ldr	r2, [r6, #0]
 8005244:	682b      	ldr	r3, [r5, #0]
 8005246:	429a      	cmp	r2, r3
 8005248:	d2ed      	bcs.n	8005226 <Forward_Speed+0x8a>
				set_flag = TRUE;
			}
		}

		if (set_flag == TRUE) {
 800524a:	f8db 3000 	ldr.w	r3, [fp]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d111      	bne.n	8005276 <Forward_Speed+0xda>
			set_flag = FALSE;
 8005252:	2300      	movs	r3, #0
 8005254:	4a10      	ldr	r2, [pc, #64]	; (8005298 <Forward_Speed+0xfc>)
			fwd_flag = FALSE;
 8005256:	6023      	str	r3, [r4, #0]
				set_flag = TRUE;
			}
		}

		if (set_flag == TRUE) {
			set_flag = FALSE;
 8005258:	6013      	str	r3, [r2, #0]
			fwd_flag = FALSE;
			Clear_Buffers();
 800525a:	f7fd fec3 	bl	8002fe4 <Clear_Buffers>
			Turn_Off_Lights();
 800525e:	f7fe fc9b 	bl	8003b98 <Turn_Off_Lights>
			HAL_TIM_Base_Stop(&htim5); //stop timer for speed
 8005262:	480e      	ldr	r0, [pc, #56]	; (800529c <Forward_Speed+0x100>)
 8005264:	f7fc ff0f 	bl	8002086 <HAL_TIM_Base_Stop>
void SetSpeed(int speed) {
	/*
	 * Set the system motor speed to a certain value. All the speed correction functions will see this value
	 */

	m_speed = speed;
 8005268:	4b0d      	ldr	r3, [pc, #52]	; (80052a0 <Forward_Speed+0x104>)
 800526a:	22c8      	movs	r2, #200	; 0xc8
 800526c:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim5); //stop timer for speed
			SetSpeed(FWD_L); //may not brake enough , so set the speed anyway
			Transition();
		}
	}
}
 800526e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			fwd_flag = FALSE;
			Clear_Buffers();
			Turn_Off_Lights();
			HAL_TIM_Base_Stop(&htim5); //stop timer for speed
			SetSpeed(FWD_L); //may not brake enough , so set the speed anyway
			Transition();
 8005272:	f7ff baa9 	b.w	80047c8 <Transition>
 8005276:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800527a:	bf00      	nop
 800527c:	200001b4 	.word	0x200001b4
 8005280:	200000b4 	.word	0x200000b4
 8005284:	200001e0 	.word	0x200001e0
 8005288:	2000009c 	.word	0x2000009c
 800528c:	20000b34 	.word	0x20000b34
 8005290:	200001cc 	.word	0x200001cc
 8005294:	20000310 	.word	0x20000310
 8005298:	20000328 	.word	0x20000328
 800529c:	200014a0 	.word	0x200014a0
 80052a0:	20000338 	.word	0x20000338
 80052a4:	200000bc 	.word	0x200000bc
 80052a8:	200001c8 	.word	0x200001c8
 80052ac:	20000318 	.word	0x20000318

080052b0 <Forward_Search>:
		}
	}
}

void Forward_Search() {
 80052b0:	b508      	push	{r3, lr}

	Detect_Transition(); //sense wall to no wall transition
 80052b2:	f7ff fef1 	bl	8005098 <Detect_Transition>

	if (transition_flag == TRUE) { //if theres a transition sense use this position instead
 80052b6:	4b2a      	ldr	r3, [pc, #168]	; (8005360 <Forward_Search+0xb0>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	4b29      	ldr	r3, [pc, #164]	; (8005364 <Forward_Search+0xb4>)
			if (fwd_flag == FALSE && (lenc_diff_corr >= l_dist_corr*3/4 || renc_diff_corr >= r_dist_corr*3/4)) { //330
 80052be:	681a      	ldr	r2, [r3, #0]

void Forward_Search() {

	Detect_Transition(); //sense wall to no wall transition

	if (transition_flag == TRUE) { //if theres a transition sense use this position instead
 80052c0:	d12d      	bne.n	800531e <Forward_Search+0x6e>
			if (fwd_flag == FALSE && (lenc_diff_corr >= l_dist_corr*3/4 || renc_diff_corr >= r_dist_corr*3/4)) { //330
 80052c2:	b9ba      	cbnz	r2, 80052f4 <Forward_Search+0x44>
 80052c4:	4a28      	ldr	r2, [pc, #160]	; (8005368 <Forward_Search+0xb8>)
 80052c6:	4929      	ldr	r1, [pc, #164]	; (800536c <Forward_Search+0xbc>)
 80052c8:	6812      	ldr	r2, [r2, #0]
 80052ca:	6809      	ldr	r1, [r1, #0]
 80052cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80052d0:	ebb1 0f92 	cmp.w	r1, r2, lsr #2
 80052d4:	d208      	bcs.n	80052e8 <Forward_Search+0x38>
 80052d6:	4a26      	ldr	r2, [pc, #152]	; (8005370 <Forward_Search+0xc0>)
 80052d8:	4926      	ldr	r1, [pc, #152]	; (8005374 <Forward_Search+0xc4>)
 80052da:	6812      	ldr	r2, [r2, #0]
 80052dc:	6809      	ldr	r1, [r1, #0]
 80052de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80052e2:	ebb1 0f92 	cmp.w	r1, r2, lsr #2
 80052e6:	d33a      	bcc.n	800535e <Forward_Search+0xae>
				fwd_flag = TRUE;
 80052e8:	2201      	movs	r2, #1
 80052ea:	601a      	str	r2, [r3, #0]
			fwd_flag = FALSE;
			Clear_Buffers();
			Transition();
		}
	}
}
 80052ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Detect_Transition(); //sense wall to no wall transition

	if (transition_flag == TRUE) { //if theres a transition sense use this position instead
			if (fwd_flag == FALSE && (lenc_diff_corr >= l_dist_corr*3/4 || renc_diff_corr >= r_dist_corr*3/4)) { //330
				fwd_flag = TRUE;
				Middle_Cell_Action();
 80052f0:	f7ff b9c4 	b.w	800467c <Middle_Cell_Action>
			}

			else if (fwd_flag == TRUE && (lenc_diff_corr >= l_dist_corr || renc_diff_corr >= r_dist_corr)) { //620
 80052f4:	2a01      	cmp	r2, #1
 80052f6:	d132      	bne.n	800535e <Forward_Search+0xae>
 80052f8:	4a1c      	ldr	r2, [pc, #112]	; (800536c <Forward_Search+0xbc>)
 80052fa:	6811      	ldr	r1, [r2, #0]
 80052fc:	4a1a      	ldr	r2, [pc, #104]	; (8005368 <Forward_Search+0xb8>)
 80052fe:	6812      	ldr	r2, [r2, #0]
 8005300:	4291      	cmp	r1, r2
 8005302:	d205      	bcs.n	8005310 <Forward_Search+0x60>
 8005304:	4a1b      	ldr	r2, [pc, #108]	; (8005374 <Forward_Search+0xc4>)
 8005306:	6811      	ldr	r1, [r2, #0]
 8005308:	4a19      	ldr	r2, [pc, #100]	; (8005370 <Forward_Search+0xc0>)
 800530a:	6812      	ldr	r2, [r2, #0]
 800530c:	4291      	cmp	r1, r2
 800530e:	d326      	bcc.n	800535e <Forward_Search+0xae>

				fwd_flag = FALSE;
 8005310:	2200      	movs	r2, #0
 8005312:	601a      	str	r2, [r3, #0]
				Clear_Buffers();
 8005314:	f7fd fe66 	bl	8002fe4 <Clear_Buffers>
				Turn_Off_Lights();
 8005318:	f7fe fc3e 	bl	8003b98 <Turn_Off_Lights>
 800531c:	e01b      	b.n	8005356 <Forward_Search+0xa6>
			}
	}

	else { //if theres no transition sensed, then just use absolute position

		if (fwd_flag == FALSE && (lenc_diff >= F_ENC1 || renc_diff >= F_ENC1)) {
 800531e:	b952      	cbnz	r2, 8005336 <Forward_Search+0x86>
 8005320:	4a15      	ldr	r2, [pc, #84]	; (8005378 <Forward_Search+0xc8>)
 8005322:	6812      	ldr	r2, [r2, #0]
 8005324:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 8005328:	d2de      	bcs.n	80052e8 <Forward_Search+0x38>
 800532a:	4a14      	ldr	r2, [pc, #80]	; (800537c <Forward_Search+0xcc>)
 800532c:	6812      	ldr	r2, [r2, #0]
 800532e:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 8005332:	d314      	bcc.n	800535e <Forward_Search+0xae>
 8005334:	e7d8      	b.n	80052e8 <Forward_Search+0x38>
			fwd_flag = TRUE;
			Middle_Cell_Action();
		}

		else if (fwd_flag == TRUE && (lenc_diff >= ONE_CELL || renc_diff >= ONE_CELL)) { //left and right wheel moving at same speed. If statement checks if distance has been covered
 8005336:	2a01      	cmp	r2, #1
 8005338:	d111      	bne.n	800535e <Forward_Search+0xae>
 800533a:	4a0f      	ldr	r2, [pc, #60]	; (8005378 <Forward_Search+0xc8>)
 800533c:	6812      	ldr	r2, [r2, #0]
 800533e:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
 8005342:	d204      	bcs.n	800534e <Forward_Search+0x9e>
 8005344:	4a0d      	ldr	r2, [pc, #52]	; (800537c <Forward_Search+0xcc>)
 8005346:	6812      	ldr	r2, [r2, #0]
 8005348:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
 800534c:	d307      	bcc.n	800535e <Forward_Search+0xae>

			fwd_flag = FALSE;
 800534e:	2200      	movs	r2, #0
 8005350:	601a      	str	r2, [r3, #0]
			Clear_Buffers();
 8005352:	f7fd fe47 	bl	8002fe4 <Clear_Buffers>
			Transition();
		}
	}
}
 8005356:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

		else if (fwd_flag == TRUE && (lenc_diff >= ONE_CELL || renc_diff >= ONE_CELL)) { //left and right wheel moving at same speed. If statement checks if distance has been covered

			fwd_flag = FALSE;
			Clear_Buffers();
			Transition();
 800535a:	f7ff ba35 	b.w	80047c8 <Transition>
 800535e:	bd08      	pop	{r3, pc}
 8005360:	20000b34 	.word	0x20000b34
 8005364:	2000009c 	.word	0x2000009c
 8005368:	20000210 	.word	0x20000210
 800536c:	200001cc 	.word	0x200001cc
 8005370:	20000b44 	.word	0x20000b44
 8005374:	20000310 	.word	0x20000310
 8005378:	200000bc 	.word	0x200000bc
 800537c:	200001e0 	.word	0x200001e0

08005380 <Speed_Run>:
	prev_r_count = r_count;

}

//DONT USE YET
void Speed_Run(char path[]) {
 8005380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

//take optimal path and convert to fast straightaways
start_flag = TRUE;
speedrunturn = FALSE;
angular_error = 0;
 8005384:	4b52      	ldr	r3, [pc, #328]	; (80054d0 <Speed_Run+0x150>)
//DONT USE YET
void Speed_Run(char path[]) {

//take optimal path and convert to fast straightaways
start_flag = TRUE;
speedrunturn = FALSE;
 8005386:	f04f 0800 	mov.w	r8, #0

//DONT USE YET
void Speed_Run(char path[]) {

//take optimal path and convert to fast straightaways
start_flag = TRUE;
 800538a:	f04f 0901 	mov.w	r9, #1
 800538e:	f8df a158 	ldr.w	sl, [pc, #344]	; 80054e8 <Speed_Run+0x168>
speedrunturn = FALSE;
 8005392:	4d50      	ldr	r5, [pc, #320]	; (80054d4 <Speed_Run+0x154>)
angular_error = 0;
int counter = 0;
char ps =  path[counter];
counter++;
char ns = path[counter];
 8005394:	4606      	mov	r6, r0
void Speed_Run(char path[]) {

//take optimal path and convert to fast straightaways
start_flag = TRUE;
speedrunturn = FALSE;
angular_error = 0;
 8005396:	f8c3 8000 	str.w	r8, [r3]
char ps =  path[counter];
counter++;
char ns = path[counter];
//l_count and r_count

HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, ON); //Turn on LEDs to indicate it is searching
 800539a:	464a      	mov	r2, r9

//DONT USE YET
void Speed_Run(char path[]) {

//take optimal path and convert to fast straightaways
start_flag = TRUE;
 800539c:	f8ca 9000 	str.w	r9, [sl]
char ps =  path[counter];
counter++;
char ns = path[counter];
//l_count and r_count

HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, ON); //Turn on LEDs to indicate it is searching
 80053a0:	4649      	mov	r1, r9
//DONT USE YET
void Speed_Run(char path[]) {

//take optimal path and convert to fast straightaways
start_flag = TRUE;
speedrunturn = FALSE;
 80053a2:	f8c5 8000 	str.w	r8, [r5]
angular_error = 0;
int counter = 0;
char ps =  path[counter];
 80053a6:	7807      	ldrb	r7, [r0, #0]
counter++;
char ns = path[counter];
//l_count and r_count

HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, ON); //Turn on LEDs to indicate it is searching
 80053a8:	484b      	ldr	r0, [pc, #300]	; (80054d8 <Speed_Run+0x158>)
speedrunturn = FALSE;
angular_error = 0;
int counter = 0;
char ps =  path[counter];
counter++;
char ns = path[counter];
 80053aa:	f816 4f01 	ldrb.w	r4, [r6, #1]!
//l_count and r_count

HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, ON); //Turn on LEDs to indicate it is searching
 80053ae:	f7fb ff17 	bl	80011e0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, OFF);
 80053b2:	4642      	mov	r2, r8
 80053b4:	4649      	mov	r1, r9
 80053b6:	4849      	ldr	r0, [pc, #292]	; (80054dc <Speed_Run+0x15c>)
 80053b8:	f7fb ff12 	bl	80011e0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, OFF);
 80053bc:	4642      	mov	r2, r8
 80053be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053c2:	4847      	ldr	r0, [pc, #284]	; (80054e0 <Speed_Run+0x160>)
 80053c4:	f7fb ff0c 	bl	80011e0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, OFF);
 80053c8:	4642      	mov	r2, r8
 80053ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80053ce:	4844      	ldr	r0, [pc, #272]	; (80054e0 <Speed_Run+0x160>)
 80053d0:	f7fb ff06 	bl	80011e0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 80053d4:	4642      	mov	r2, r8
 80053d6:	2102      	movs	r1, #2
 80053d8:	4840      	ldr	r0, [pc, #256]	; (80054dc <Speed_Run+0x15c>)
 80053da:	f7fb ff01 	bl	80011e0 <HAL_GPIO_WritePin>

Clear_Buffers();
 80053de:	f7fd fe01 	bl	8002fe4 <Clear_Buffers>
Reset_Counters();
 80053e2:	f7fd fda5 	bl	8002f30 <Reset_Counters>

HAL_TIM_Base_Start(&htim5); //start counter for speed
 80053e6:	483f      	ldr	r0, [pc, #252]	; (80054e4 <Speed_Run+0x164>)
 80053e8:	f7fc fe40 	bl	800206c <HAL_TIM_Base_Start>

HAL_Delay(1000); //delay before start to get finger out of the way
 80053ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80053f0:	f7fa ffbe 	bl	8000370 <HAL_Delay>

while (ps != STOP) {
 80053f4:	2f73      	cmp	r7, #115	; 0x73
 80053f6:	d064      	beq.n	80054c2 <Speed_Run+0x142>

switch (ps) {
 80053f8:	3f62      	subs	r7, #98	; 0x62
 80053fa:	2f14      	cmp	r7, #20
 80053fc:	d859      	bhi.n	80054b2 <Speed_Run+0x132>
 80053fe:	e8df f007 	tbb	[pc, r7]
 8005402:	1f1b      	.short	0x1f1b
 8005404:	2f582723 	.word	0x2f582723
 8005408:	3f3b3733 	.word	0x3f3b3733
 800540c:	4b47430b 	.word	0x4b47430b
 8005410:	580e534f 	.word	0x580e534f
 8005414:	1611      	.short	0x1611
 8005416:	2b          	.byte	0x2b
 8005417:	00          	.byte	0x00

case L90:
	Left_Spd(1, ns);
 8005418:	4621      	mov	r1, r4
 800541a:	2001      	movs	r0, #1
 800541c:	e004      	b.n	8005428 <Speed_Run+0xa8>
	break;
case R90:
	Right_Spd(1, ns);
 800541e:	4621      	mov	r1, r4
 8005420:	2001      	movs	r0, #1
 8005422:	e006      	b.n	8005432 <Speed_Run+0xb2>
	break;
case L180:
	Left_Spd(2, ns);
 8005424:	4621      	mov	r1, r4
 8005426:	2002      	movs	r0, #2
 8005428:	f7ff fd02 	bl	8004e30 <Left_Spd>
	break;
 800542c:	e041      	b.n	80054b2 <Speed_Run+0x132>
case R180:
	Right_Spd(2, ns);
 800542e:	4621      	mov	r1, r4
 8005430:	2002      	movs	r0, #2
 8005432:	f7ff fd83 	bl	8004f3c <Right_Spd>
	break;
 8005436:	e03c      	b.n	80054b2 <Speed_Run+0x132>
case FWD1:
	Forward_Spd(1, ns, speedrunturn);
 8005438:	682a      	ldr	r2, [r5, #0]
 800543a:	4621      	mov	r1, r4
 800543c:	2001      	movs	r0, #1
 800543e:	e036      	b.n	80054ae <Speed_Run+0x12e>
	break;
case FWD2:
	Forward_Spd(2, ns, speedrunturn);
 8005440:	682a      	ldr	r2, [r5, #0]
 8005442:	4621      	mov	r1, r4
 8005444:	2002      	movs	r0, #2
 8005446:	e032      	b.n	80054ae <Speed_Run+0x12e>
	break;
case FWD3:
	Forward_Spd(3, ns, speedrunturn);
 8005448:	682a      	ldr	r2, [r5, #0]
 800544a:	4621      	mov	r1, r4
 800544c:	2003      	movs	r0, #3
 800544e:	e02e      	b.n	80054ae <Speed_Run+0x12e>
	break;
case FWD4:
	Forward_Spd(4, ns, speedrunturn);
 8005450:	682a      	ldr	r2, [r5, #0]
 8005452:	4621      	mov	r1, r4
 8005454:	2004      	movs	r0, #4
 8005456:	e02a      	b.n	80054ae <Speed_Run+0x12e>
	break;
case FWD5:
	Forward_Spd(5, ns, speedrunturn);
 8005458:	682a      	ldr	r2, [r5, #0]
 800545a:	4621      	mov	r1, r4
 800545c:	2005      	movs	r0, #5
 800545e:	e026      	b.n	80054ae <Speed_Run+0x12e>
	break;
case FWD6:
	Forward_Spd(6, ns, speedrunturn);
 8005460:	682a      	ldr	r2, [r5, #0]
 8005462:	4621      	mov	r1, r4
 8005464:	2006      	movs	r0, #6
 8005466:	e022      	b.n	80054ae <Speed_Run+0x12e>
	break;
case FWD7:
	Forward_Spd(7, ns, speedrunturn);
 8005468:	682a      	ldr	r2, [r5, #0]
 800546a:	4621      	mov	r1, r4
 800546c:	2007      	movs	r0, #7
 800546e:	e01e      	b.n	80054ae <Speed_Run+0x12e>
	break;
case FWD8:
	Forward_Spd(8, ns, speedrunturn);
 8005470:	682a      	ldr	r2, [r5, #0]
 8005472:	4621      	mov	r1, r4
 8005474:	2008      	movs	r0, #8
 8005476:	e01a      	b.n	80054ae <Speed_Run+0x12e>
	break;
case FWD9:
	Forward_Spd(9, ns, speedrunturn);
 8005478:	682a      	ldr	r2, [r5, #0]
 800547a:	4621      	mov	r1, r4
 800547c:	2009      	movs	r0, #9
 800547e:	e016      	b.n	80054ae <Speed_Run+0x12e>
	break;
case FWD10:
	Forward_Spd(10, ns, speedrunturn);
 8005480:	682a      	ldr	r2, [r5, #0]
 8005482:	4621      	mov	r1, r4
 8005484:	200a      	movs	r0, #10
 8005486:	e012      	b.n	80054ae <Speed_Run+0x12e>
	break;
case FWD11:
	Forward_Spd(11, ns, speedrunturn);
 8005488:	682a      	ldr	r2, [r5, #0]
 800548a:	4621      	mov	r1, r4
 800548c:	200b      	movs	r0, #11
 800548e:	e00e      	b.n	80054ae <Speed_Run+0x12e>
	break;
case FWD12:
	Forward_Spd(12, ns, speedrunturn);
 8005490:	682a      	ldr	r2, [r5, #0]
 8005492:	4621      	mov	r1, r4
 8005494:	200c      	movs	r0, #12
 8005496:	e00a      	b.n	80054ae <Speed_Run+0x12e>
	break;
case FWD13:
	Forward_Spd(13, ns, speedrunturn);
 8005498:	682a      	ldr	r2, [r5, #0]
 800549a:	4621      	mov	r1, r4
 800549c:	200d      	movs	r0, #13
 800549e:	e006      	b.n	80054ae <Speed_Run+0x12e>
	break;
case FWD14:
	Forward_Spd(14, ns, speedrunturn);
 80054a0:	682a      	ldr	r2, [r5, #0]
 80054a2:	4621      	mov	r1, r4
 80054a4:	200e      	movs	r0, #14
 80054a6:	e002      	b.n	80054ae <Speed_Run+0x12e>
	break;
case FWD15:
	Forward_Spd(15, ns, speedrunturn);
 80054a8:	682a      	ldr	r2, [r5, #0]
 80054aa:	4621      	mov	r1, r4
 80054ac:	200f      	movs	r0, #15
 80054ae:	f7ff fc51 	bl	8004d54 <Forward_Spd>
	break;
}
counter++;
ps = ns;
ns = path[counter];
 80054b2:	f816 3f01 	ldrb.w	r3, [r6, #1]!
start_flag = FALSE;
 80054b6:	2200      	movs	r2, #0
case FWD15:
	Forward_Spd(15, ns, speedrunturn);
	break;
}
counter++;
ps = ns;
 80054b8:	4627      	mov	r7, r4
ns = path[counter];
start_flag = FALSE;
 80054ba:	f8ca 2000 	str.w	r2, [sl]
	Forward_Spd(15, ns, speedrunturn);
	break;
}
counter++;
ps = ns;
ns = path[counter];
 80054be:	461c      	mov	r4, r3
 80054c0:	e798      	b.n	80053f4 <Speed_Run+0x74>
start_flag = FALSE;
}

HAL_TIM_Base_Stop(&htim5); //stop counting seconds
 80054c2:	4808      	ldr	r0, [pc, #32]	; (80054e4 <Speed_Run+0x164>)
 80054c4:	f7fc fddf 	bl	8002086 <HAL_TIM_Base_Stop>
Stop();
}
 80054c8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
ns = path[counter];
start_flag = FALSE;
}

HAL_TIM_Base_Stop(&htim5); //stop counting seconds
Stop();
 80054cc:	f7ff bdbc 	b.w	8005048 <Stop>
 80054d0:	20000b30 	.word	0x20000b30
 80054d4:	200001e8 	.word	0x200001e8
 80054d8:	40020c00 	.word	0x40020c00
 80054dc:	40021000 	.word	0x40021000
 80054e0:	40020400 	.word	0x40020400
 80054e4:	200014a0 	.word	0x200014a0
 80054e8:	2000000c 	.word	0x2000000c

080054ec <Search>:
	Turn_Off_Lights();
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, ON); ///set first led to indicate ready

}

void Search() {
 80054ec:	b570      	push	{r4, r5, r6, lr}

	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80054ee:	2028      	movs	r0, #40	; 0x28
 80054f0:	f7fb f9dc 	bl	80008ac <HAL_NVIC_DisableIRQ>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, ON); //Turn on LEDs to indicate it is searching
 80054f4:	2201      	movs	r2, #1
 80054f6:	484e      	ldr	r0, [pc, #312]	; (8005630 <Search+0x144>)
 80054f8:	4611      	mov	r1, r2
 80054fa:	f7fb fe71 	bl	80011e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, OFF);
 80054fe:	2200      	movs	r2, #0
 8005500:	2101      	movs	r1, #1
 8005502:	484c      	ldr	r0, [pc, #304]	; (8005634 <Search+0x148>)
 8005504:	f7fb fe6c 	bl	80011e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, OFF);
 8005508:	2200      	movs	r2, #0
 800550a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800550e:	484a      	ldr	r0, [pc, #296]	; (8005638 <Search+0x14c>)
 8005510:	f7fb fe66 	bl	80011e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, OFF);
 8005514:	2200      	movs	r2, #0
 8005516:	f44f 7100 	mov.w	r1, #512	; 0x200
 800551a:	4847      	ldr	r0, [pc, #284]	; (8005638 <Search+0x14c>)
 800551c:	f7fb fe60 	bl	80011e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8005520:	2200      	movs	r2, #0
 8005522:	2102      	movs	r1, #2
 8005524:	4843      	ldr	r0, [pc, #268]	; (8005634 <Search+0x148>)
 8005526:	f7fb fe5b 	bl	80011e0 <HAL_GPIO_WritePin>

	HAL_Delay(1000); //delay before start to get finger out of the way
 800552a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800552e:	f7fa ff1f 	bl	8000370 <HAL_Delay>

	if (disable_reset == FALSE) { //if walls are loaded, or at center of maze
 8005532:	4b42      	ldr	r3, [pc, #264]	; (800563c <Search+0x150>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	b91b      	cbnz	r3, 8005540 <Search+0x54>
		Reset_Maze(); //reset walls
 8005538:	f7fe f80e 	bl	8003558 <Reset_Maze>
		Read_Walls(); //read current walls
 800553c:	f7fe ff68 	bl	8004410 <Read_Walls>
			Reset_Time();
			HAL_TIM_Base_Start(&htim5); //start timer
		}
	}
*/
	HAL_TIM_Base_Start(&htim5); //start timer
 8005540:	483f      	ldr	r0, [pc, #252]	; (8005640 <Search+0x154>)
 8005542:	f7fc fd93 	bl	800206c <HAL_TIM_Base_Start>
	Set_Left(FWD_L, FORWARD); //start going straight. get moving
	Set_Right(FWD_R, FORWARD);

    while(1) {

    	if (cur_move == FWD && transition_flag == FALSE) { //if no transitions detected
 8005546:	4c3f      	ldr	r4, [pc, #252]	; (8005644 <Search+0x158>)
			HAL_TIM_Base_Start(&htim5); //start timer
		}
	}
*/
	HAL_TIM_Base_Start(&htim5); //start timer
	Clear_Buffers(); //clear transition buffers
 8005548:	f7fd fd4c 	bl	8002fe4 <Clear_Buffers>
	Reset_Counters(); //clear counters
 800554c:	f7fd fcf0 	bl	8002f30 <Reset_Counters>
 8005550:	4625      	mov	r5, r4

	Reset_Flags(); //reset flags
 8005552:	f7fd fd63 	bl	800301c <Reset_Flags>
	Floodfill(reverse_flag, search_flag, FALSE);
 8005556:	4b3c      	ldr	r3, [pc, #240]	; (8005648 <Search+0x15c>)
 8005558:	2200      	movs	r2, #0
 800555a:	6819      	ldr	r1, [r3, #0]
 800555c:	4b3b      	ldr	r3, [pc, #236]	; (800564c <Search+0x160>)
 800555e:	6818      	ldr	r0, [r3, #0]
 8005560:	f7fd ff68 	bl	8003434 <Floodfill>

	Update_Position(); //move to next square
 8005564:	f7fe f848 	bl	80035f8 <Update_Position>

	Set_Left(FWD_L, FORWARD); //start going straight. get moving
 8005568:	2101      	movs	r1, #1
 800556a:	20c8      	movs	r0, #200	; 0xc8
 800556c:	f7ff f8ce 	bl	800470c <Set_Left>
	Set_Right(FWD_R, FORWARD);
 8005570:	2101      	movs	r1, #1
 8005572:	20c8      	movs	r0, #200	; 0xc8
 8005574:	f7ff f8f8 	bl	8004768 <Set_Right>

    	if (cur_move == FWD && transition_flag == FALSE) { //if no transitions detected
    		Update_Sensors(FWD_SEARCH); //detect transitions

    	}
    	else if ((cur_move == RIGHT && r_turnflag == 0) || (cur_move == LEFT && l_turnflag == 0)) { //just get encoders
 8005578:	4e35      	ldr	r6, [pc, #212]	; (8005650 <Search+0x164>)
	Set_Left(FWD_L, FORWARD); //start going straight. get moving
	Set_Right(FWD_R, FORWARD);

    while(1) {

    	if (cur_move == FWD && transition_flag == FALSE) { //if no transitions detected
 800557a:	6820      	ldr	r0, [r4, #0]
 800557c:	b920      	cbnz	r0, 8005588 <Search+0x9c>
 800557e:	4b35      	ldr	r3, [pc, #212]	; (8005654 <Search+0x168>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	b99b      	cbnz	r3, 80055ac <Search+0xc0>
    		Update_Sensors(FWD_SEARCH); //detect transitions
 8005584:	2002      	movs	r0, #2
 8005586:	e012      	b.n	80055ae <Search+0xc2>

    	}
    	else if ((cur_move == RIGHT && r_turnflag == 0) || (cur_move == LEFT && l_turnflag == 0)) { //just get encoders
 8005588:	2802      	cmp	r0, #2
 800558a:	d102      	bne.n	8005592 <Search+0xa6>
 800558c:	4b32      	ldr	r3, [pc, #200]	; (8005658 <Search+0x16c>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	e002      	b.n	8005598 <Search+0xac>
 8005592:	2801      	cmp	r0, #1
 8005594:	d103      	bne.n	800559e <Search+0xb2>
 8005596:	6833      	ldr	r3, [r6, #0]
 8005598:	b943      	cbnz	r3, 80055ac <Search+0xc0>
    		Update_Sensors(NONE);
 800559a:	2005      	movs	r0, #5
 800559c:	e007      	b.n	80055ae <Search+0xc2>
    	}

    	else if (cur_move == FWD_SPEED) {
 800559e:	2806      	cmp	r0, #6
 80055a0:	d104      	bne.n	80055ac <Search+0xc0>
    		Update_Sensors(TEST); //gets side sensors and time
 80055a2:	f7fe fee9 	bl	8004378 <Update_Sensors>
    		Get_Speed(); //calculates speed and corrects
 80055a6:	f7ff fa3f 	bl	8004a28 <Get_Speed>
 80055aa:	e002      	b.n	80055b2 <Search+0xc6>
    	}

    	else {
    		Update_Sensors(TURN_SEARCH); //get side sensors for correction
 80055ac:	2001      	movs	r0, #1
 80055ae:	f7fe fee3 	bl	8004378 <Update_Sensors>
    	}

    	if  (cur_move == FWD || r_turnflag > 0 || l_turnflag > 0 || dead_flag > 0) {
 80055b2:	682b      	ldr	r3, [r5, #0]
 80055b4:	b153      	cbz	r3, 80055cc <Search+0xe0>
 80055b6:	4a28      	ldr	r2, [pc, #160]	; (8005658 <Search+0x16c>)
 80055b8:	6812      	ldr	r2, [r2, #0]
 80055ba:	2a00      	cmp	r2, #0
 80055bc:	dc06      	bgt.n	80055cc <Search+0xe0>
 80055be:	6832      	ldr	r2, [r6, #0]
 80055c0:	2a00      	cmp	r2, #0
 80055c2:	dc03      	bgt.n	80055cc <Search+0xe0>
 80055c4:	4a25      	ldr	r2, [pc, #148]	; (800565c <Search+0x170>)
 80055c6:	6812      	ldr	r2, [r2, #0]
 80055c8:	2a00      	cmp	r2, #0
 80055ca:	dd02      	ble.n	80055d2 <Search+0xe6>
    		//Get_Speed();
    		Search_Correction(); //motor correction
 80055cc:	f7ff fa12 	bl	80049f4 <Search_Correction>
 80055d0:	e009      	b.n	80055e6 <Search+0xfa>

    	}

    	else if (cur_move == PAUSE || stop_flag == TRUE) { //function used to be crash detection. Done flag uses this to stop
 80055d2:	2b04      	cmp	r3, #4
 80055d4:	d003      	beq.n	80055de <Search+0xf2>
 80055d6:	4b22      	ldr	r3, [pc, #136]	; (8005660 <Search+0x174>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d103      	bne.n	80055e6 <Search+0xfa>
    	case DEAD:
    		Dead_End();
    		break;
    	} //switch
    } //searching loop
}
 80055de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    		Search_Correction(); //motor correction

    	}

    	else if (cur_move == PAUSE || stop_flag == TRUE) { //function used to be crash detection. Done flag uses this to stop
    		Stop(); //stop the motors
 80055e2:	f7ff bd31 	b.w	8005048 <Stop>
    		break; //break out of while loop
    	}

    	switch (cur_move) { //main case statement. While moving, check distance traveled. If 1 unit has been covered, execute next move
 80055e6:	682b      	ldr	r3, [r5, #0]
 80055e8:	2b06      	cmp	r3, #6
 80055ea:	d8c6      	bhi.n	800557a <Search+0x8e>
 80055ec:	a201      	add	r2, pc, #4	; (adr r2, 80055f4 <Search+0x108>)
 80055ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f2:	bf00      	nop
 80055f4:	08005617 	.word	0x08005617
 80055f8:	08005623 	.word	0x08005623
 80055fc:	0800561d 	.word	0x0800561d
 8005600:	08005629 	.word	0x08005629
 8005604:	0800557b 	.word	0x0800557b
 8005608:	0800557b 	.word	0x0800557b
 800560c:	08005611 	.word	0x08005611

    	case FWD_SPEED:
    		Forward_Speed();
 8005610:	f7ff fdc4 	bl	800519c <Forward_Speed>
    		break;
 8005614:	e7b0      	b.n	8005578 <Search+0x8c>

    	case FWD:
    		Forward_Search();
 8005616:	f7ff fe4b 	bl	80052b0 <Forward_Search>
    		break;
 800561a:	e7ad      	b.n	8005578 <Search+0x8c>
    	case RIGHT: //break up turn into turn and accelerate
    		Right_Search();
 800561c:	f7ff f90e 	bl	800483c <Right_Search>
    		break;
 8005620:	e7aa      	b.n	8005578 <Search+0x8c>
    	case LEFT:
    		Left_Search();
 8005622:	f7ff f955 	bl	80048d0 <Left_Search>
    		break;
 8005626:	e7a7      	b.n	8005578 <Search+0x8c>
    	case DEAD:
    		Dead_End();
 8005628:	f7ff fb2a 	bl	8004c80 <Dead_End>
    		break;
 800562c:	e7a4      	b.n	8005578 <Search+0x8c>
 800562e:	bf00      	nop
 8005630:	40020c00 	.word	0x40020c00
 8005634:	40021000 	.word	0x40021000
 8005638:	40020400 	.word	0x40020400
 800563c:	20001350 	.word	0x20001350
 8005640:	200014a0 	.word	0x200014a0
 8005644:	20000b3c 	.word	0x20000b3c
 8005648:	20000b58 	.word	0x20000b58
 800564c:	2000033c 	.word	0x2000033c
 8005650:	20000308 	.word	0x20000308
 8005654:	20000b34 	.word	0x20000b34
 8005658:	20000200 	.word	0x20000200
 800565c:	20000320 	.word	0x20000320
 8005660:	20000014 	.word	0x20000014

08005664 <Run_Maze>:

  HAL_Delay(300); //ONLY CHECK FOR FINGER every half second. If you check to quickly it'll never start
  } //ready loop
} //main function

void Run_Maze() { //function to run maze. will only speed run if all walls are found
 8005664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	if (disable_reset == FALSE) {
 8005666:	4b2c      	ldr	r3, [pc, #176]	; (8005718 <Run_Maze+0xb4>)
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	461d      	mov	r5, r3
 800566c:	b90a      	cbnz	r2, 8005672 <Run_Maze+0xe>
		Reset_Maze();
 800566e:	f7fd ff73 	bl	8003558 <Reset_Maze>
	}
	Calc_Optimal(); //calculate the optimal path
	Get_Coordinate(); //function to see if all coordinates on optimal path are visited.

	while (coordinate_count > 0) { //if all walls found go directly to speed run
		reverse_flag = FALSE;
 8005672:	4c2a      	ldr	r4, [pc, #168]	; (800571c <Run_Maze+0xb8>)
void Run_Maze() { //function to run maze. will only speed run if all walls are found

	if (disable_reset == FALSE) {
		Reset_Maze();
	}
	Calc_Optimal(); //calculate the optimal path
 8005674:	f7fe f88c 	bl	8003790 <Calc_Optimal>
	Get_Coordinate(); //function to see if all coordinates on optimal path are visited.

	while (coordinate_count > 0) { //if all walls found go directly to speed run
 8005678:	4e29      	ldr	r6, [pc, #164]	; (8005720 <Run_Maze+0xbc>)

	if (disable_reset == FALSE) {
		Reset_Maze();
	}
	Calc_Optimal(); //calculate the optimal path
	Get_Coordinate(); //function to see if all coordinates on optimal path are visited.
 800567a:	f7fe fa21 	bl	8003ac0 <Get_Coordinate>
 800567e:	4627      	mov	r7, r4

	while (coordinate_count > 0) { //if all walls found go directly to speed run
 8005680:	6833      	ldr	r3, [r6, #0]
 8005682:	b32b      	cbz	r3, 80056d0 <Run_Maze+0x6c>
		reverse_flag = FALSE;
 8005684:	2300      	movs	r3, #0
 8005686:	6023      	str	r3, [r4, #0]
		Search(); //reached the end
 8005688:	f7ff ff30 	bl	80054ec <Search>
		HAL_TIM_Base_Stop(&htim5);
 800568c:	4825      	ldr	r0, [pc, #148]	; (8005724 <Run_Maze+0xc0>)
 800568e:	f7fc fcfa 	bl	8002086 <HAL_TIM_Base_Stop>
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005692:	2028      	movs	r0, #40	; 0x28
 8005694:	f7fb f8fe 	bl	8000894 <HAL_NVIC_EnableIRQ>
		Mark_Center(); //mark the target squares
 8005698:	f7fe f970 	bl	800397c <Mark_Center>
		Fill_Center(); //fill the walls around the center squares
 800569c:	f7fe f982 	bl	80039a4 <Fill_Center>
		Program_Walls_Flash(); //program in walls before going home
 80056a0:	f7fe fca4 	bl	8003fec <Program_Walls_Flash>
		if (done_flag == TRUE) {
 80056a4:	4b20      	ldr	r3, [pc, #128]	; (8005728 <Run_Maze+0xc4>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2b01      	cmp	r3, #1
			disable_reset = TRUE;
 80056aa:	bf08      	it	eq
 80056ac:	602b      	streq	r3, [r5, #0]
		}
#if DEBUG == TRUE
		//Print_Maze();
#endif
		reverse_flag = TRUE;
 80056ae:	2301      	movs	r3, #1
 80056b0:	603b      	str	r3, [r7, #0]
		Search(); //go backb
 80056b2:	f7ff ff1b 	bl	80054ec <Search>
		HAL_TIM_Base_Stop(&htim5);
 80056b6:	481b      	ldr	r0, [pc, #108]	; (8005724 <Run_Maze+0xc0>)
 80056b8:	f7fc fce5 	bl	8002086 <HAL_TIM_Base_Stop>
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80056bc:	2028      	movs	r0, #40	; 0x28
 80056be:	f7fb f8e9 	bl	8000894 <HAL_NVIC_EnableIRQ>
		#if DEBUG == TRUE
		//Print_Maze();
		#endif
		Program_Walls_Flash();
 80056c2:	f7fe fc93 	bl	8003fec <Program_Walls_Flash>
		Calc_Optimal();
 80056c6:	f7fe f863 	bl	8003790 <Calc_Optimal>
		Get_Coordinate();
 80056ca:	f7fe f9f9 	bl	8003ac0 <Get_Coordinate>
 80056ce:	e7d7      	b.n	8005680 <Run_Maze+0x1c>
	}

	Turn_On_Lights(); //turn on lights to show that its ready to speed run
 80056d0:	f7fe fa28 	bl	8003b24 <Turn_On_Lights>

	stop_flag = TRUE;
 80056d4:	4b15      	ldr	r3, [pc, #84]	; (800572c <Run_Maze+0xc8>)
 80056d6:	2201      	movs	r2, #1
 80056d8:	461c      	mov	r4, r3
 80056da:	601a      	str	r2, [r3, #0]
	do {
		HAL_Delay(100);
 80056dc:	2064      	movs	r0, #100	; 0x64
 80056de:	f7fa fe47 	bl	8000370 <HAL_Delay>
	} while(stop_flag == TRUE); //wait for button press
 80056e2:	6823      	ldr	r3, [r4, #0]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d0f9      	beq.n	80056dc <Run_Maze+0x78>

	reverse_flag = FALSE;
 80056e8:	2300      	movs	r3, #0
 80056ea:	4d0c      	ldr	r5, [pc, #48]	; (800571c <Run_Maze+0xb8>)
	Search();
	reverse_flag = TRUE;
 80056ec:	2401      	movs	r4, #1
	stop_flag = TRUE;
	do {
		HAL_Delay(100);
	} while(stop_flag == TRUE); //wait for button press

	reverse_flag = FALSE;
 80056ee:	602b      	str	r3, [r5, #0]
	Search();
 80056f0:	f7ff fefc 	bl	80054ec <Search>
	reverse_flag = TRUE;
 80056f4:	602c      	str	r4, [r5, #0]
	Search();
 80056f6:	f7ff fef9 	bl	80054ec <Search>
	reverse_flag = TRUE;
	stop_flag = FALSE;
	Search(); //go back
	reverse_flag = FALSE;
	*/
	Turn_On_Lights(); //flash lights
 80056fa:	f7fe fa13 	bl	8003b24 <Turn_On_Lights>
	HAL_Delay(500);
 80056fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005702:	f7fa fe35 	bl	8000370 <HAL_Delay>
	Turn_Off_Lights();
 8005706:	f7fe fa47 	bl	8003b98 <Turn_Off_Lights>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, ON); ///set first led to indicate ready
 800570a:	4622      	mov	r2, r4
 800570c:	2102      	movs	r1, #2
 800570e:	4808      	ldr	r0, [pc, #32]	; (8005730 <Run_Maze+0xcc>)

}
 8005710:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	reverse_flag = FALSE;
	*/
	Turn_On_Lights(); //flash lights
	HAL_Delay(500);
	Turn_Off_Lights();
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, ON); ///set first led to indicate ready
 8005714:	f7fb bd64 	b.w	80011e0 <HAL_GPIO_WritePin>
 8005718:	20001350 	.word	0x20001350
 800571c:	2000033c 	.word	0x2000033c
 8005720:	20001354 	.word	0x20001354
 8005724:	200014a0 	.word	0x200014a0
 8005728:	2000031c 	.word	0x2000031c
 800572c:	20000014 	.word	0x20000014
 8005730:	40021000 	.word	0x40021000

08005734 <Measure_Speed>:

	m_speed = speed;

}

void Measure_Speed() { //from pwm 100 to 600, get speed in mm/s
 8005734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005738:	b0bd      	sub	sp, #244	; 0xf4
	static int prev_right_speed = 0;

	Reset_Counters();
	HAL_TIM_Base_Start(&htim5); //start timer
	Set_Left(FWD_L, FORWARD);
	Set_Right(FWD_R, FORWARD);
 800573a:	246e      	movs	r4, #110	; 0x6e
	int left_acceleration = 0;
	int right_acceleration = 0;
	static int prev_left_speed = 0;
	static int prev_right_speed = 0;

	Reset_Counters();
 800573c:	f7fd fbf8 	bl	8002f30 <Reset_Counters>
	HAL_TIM_Base_Start(&htim5); //start timer
 8005740:	4840      	ldr	r0, [pc, #256]	; (8005844 <Measure_Speed+0x110>)
 8005742:	ae09      	add	r6, sp, #36	; 0x24
 8005744:	f7fc fc92 	bl	800206c <HAL_TIM_Base_Start>
	Set_Left(FWD_L, FORWARD);
 8005748:	2101      	movs	r1, #1
 800574a:	20c8      	movs	r0, #200	; 0xc8
	Set_Right(FWD_R, FORWARD);
 800574c:	4637      	mov	r7, r6
	static int prev_left_speed = 0;
	static int prev_right_speed = 0;

	Reset_Counters();
	HAL_TIM_Base_Start(&htim5); //start timer
	Set_Left(FWD_L, FORWARD);
 800574e:	f7fe ffdd 	bl	800470c <Set_Left>
	Set_Right(FWD_R, FORWARD);
 8005752:	2101      	movs	r1, #1
 8005754:	20c8      	movs	r0, #200	; 0xc8
 8005756:	f7ff f807 	bl	8004768 <Set_Right>

for (int i = 1; i <= 50; i++) { //start speed loop

	Set_Left(100 + 10*i, FORWARD); //start motors
 800575a:	2101      	movs	r1, #1
 800575c:	4620      	mov	r0, r4
 800575e:	f7fe ffd5 	bl	800470c <Set_Left>
	Set_Right(100 + 10*i, FORWARD);
	HAL_Delay(5); //let accelerate
	debug_count = 0; //reset debug count
 8005762:	2500      	movs	r5, #0
	Set_Right(FWD_R, FORWARD);

for (int i = 1; i <= 50; i++) { //start speed loop

	Set_Left(100 + 10*i, FORWARD); //start motors
	Set_Right(100 + 10*i, FORWARD);
 8005764:	2101      	movs	r1, #1
 8005766:	4620      	mov	r0, r4
		Update_Sensors(TIME);
		//if (l_count > ONE_CELL*4 || r_count > ONE_CELL*4) {
			//break;
		//}

		if (time_count - prev_time_count > 20000) { //sample every 20 ms
 8005768:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8005858 <Measure_Speed+0x124>
	Set_Right(FWD_R, FORWARD);

for (int i = 1; i <= 50; i++) { //start speed loop

	Set_Left(100 + 10*i, FORWARD); //start motors
	Set_Right(100 + 10*i, FORWARD);
 800576c:	f7fe fffc 	bl	8004768 <Set_Right>
	HAL_Delay(5); //let accelerate
 8005770:	2005      	movs	r0, #5
 8005772:	f7fa fdfd 	bl	8000370 <HAL_Delay>
	debug_count = 0; //reset debug count

	while (debug_count < SAMPLES) { //sample five times
 8005776:	2d0a      	cmp	r5, #10
 8005778:	d033      	beq.n	80057e2 <Measure_Speed+0xae>

		Update_Sensors(TIME);
 800577a:	2003      	movs	r0, #3
 800577c:	f7fe fdfc 	bl	8004378 <Update_Sensors>
		//if (l_count > ONE_CELL*4 || r_count > ONE_CELL*4) {
			//break;
		//}

		if (time_count - prev_time_count > 20000) { //sample every 20 ms
 8005780:	4b31      	ldr	r3, [pc, #196]	; (8005848 <Measure_Speed+0x114>)
 8005782:	f8d8 1000 	ldr.w	r1, [r8]
 8005786:	f8d3 a000 	ldr.w	sl, [r3]
 800578a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800578e:	ebc1 010a 	rsb	r1, r1, sl
 8005792:	4299      	cmp	r1, r3
 8005794:	d9ef      	bls.n	8005776 <Measure_Speed+0x42>

			left_speed = 180*1000000/700*(l_count - temp_l)/(time_count - prev_time_count); // in mm/s
 8005796:	4b2d      	ldr	r3, [pc, #180]	; (800584c <Measure_Speed+0x118>)
 8005798:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 8005868 <Measure_Speed+0x134>
 800579c:	f8d3 9000 	ldr.w	r9, [r3]
			right_speed = 180*1000000/700*(r_count - temp_r)/(time_count - prev_time_count); // in mm/s
 80057a0:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 800586c <Measure_Speed+0x138>
 80057a4:	4b2a      	ldr	r3, [pc, #168]	; (8005850 <Measure_Speed+0x11c>)
				//Transmit(tx_buffer);
				//sprintf(tx_buffer, "L Count %d    R Count: %d \r\n-------------------------- \r\n \r\n", l_count, r_count);
				//Transmit(tx_buffer);
				//debug_count = 0;
			}
			current_speeds[debug_count] = (left_speed + right_speed)/2;
 80057a6:	f8dc 2000 	ldr.w	r2, [ip]
		//}

		if (time_count - prev_time_count > 20000) { //sample every 20 ms

			left_speed = 180*1000000/700*(l_count - temp_l)/(time_count - prev_time_count); // in mm/s
			right_speed = 180*1000000/700*(r_count - temp_r)/(time_count - prev_time_count); // in mm/s
 80057aa:	f8d3 e000 	ldr.w	lr, [r3]
				//Transmit(tx_buffer);
				//sprintf(tx_buffer, "L Count %d    R Count: %d \r\n-------------------------- \r\n \r\n", l_count, r_count);
				//Transmit(tx_buffer);
				//debug_count = 0;
			}
			current_speeds[debug_count] = (left_speed + right_speed)/2;
 80057ae:	f8db 0000 	ldr.w	r0, [fp]
 80057b2:	ebc2 0209 	rsb	r2, r2, r9
 80057b6:	4b27      	ldr	r3, [pc, #156]	; (8005854 <Measure_Speed+0x120>)
 80057b8:	ebc0 000e 	rsb	r0, r0, lr
			debug_count++; //increase debug count
			prev_time_count = time_count;
			temp_l = l_count;
 80057bc:	f8cc 9000 	str.w	r9, [ip]
				//Transmit(tx_buffer);
				//sprintf(tx_buffer, "L Count %d    R Count: %d \r\n-------------------------- \r\n \r\n", l_count, r_count);
				//Transmit(tx_buffer);
				//debug_count = 0;
			}
			current_speeds[debug_count] = (left_speed + right_speed)/2;
 80057c0:	435a      	muls	r2, r3
 80057c2:	4358      	muls	r0, r3
			debug_count++; //increase debug count
			prev_time_count = time_count;
 80057c4:	4b24      	ldr	r3, [pc, #144]	; (8005858 <Measure_Speed+0x124>)
			temp_l = l_count;
			temp_r = r_count;
 80057c6:	f8cb e000 	str.w	lr, [fp]
				//Transmit(tx_buffer);
				//debug_count = 0;
			}
			current_speeds[debug_count] = (left_speed + right_speed)/2;
			debug_count++; //increase debug count
			prev_time_count = time_count;
 80057ca:	f8c3 a000 	str.w	sl, [r3]
				//Transmit(tx_buffer);
				//sprintf(tx_buffer, "L Count %d    R Count: %d \r\n-------------------------- \r\n \r\n", l_count, r_count);
				//Transmit(tx_buffer);
				//debug_count = 0;
			}
			current_speeds[debug_count] = (left_speed + right_speed)/2;
 80057ce:	fbb2 f2f1 	udiv	r2, r2, r1
 80057d2:	fbb0 f1f1 	udiv	r1, r0, r1
 80057d6:	440a      	add	r2, r1
 80057d8:	1052      	asrs	r2, r2, #1
 80057da:	f84d 2025 	str.w	r2, [sp, r5, lsl #2]
			debug_count++; //increase debug count
 80057de:	3501      	adds	r5, #1
 80057e0:	e7c9      	b.n	8005776 <Measure_Speed+0x42>
 80057e2:	f857 3f04 	ldr.w	r3, [r7, #4]!
	Set_Left(100 + 10*i, FORWARD); //start motors
	Set_Right(100 + 10*i, FORWARD);
	HAL_Delay(5); //let accelerate
	debug_count = 0; //reset debug count

	while (debug_count < SAMPLES) { //sample five times
 80057e6:	2200      	movs	r2, #0
			prev_left_speed = left_speed;
			prev_right_speed = right_speed;
		} //endif
	} //end while
	for (int j = 0; j < 10; j++) {
		top_speeds[i - 1] = top_speeds[i - 1] + current_speeds[j];
 80057e8:	f85d 1022 	ldr.w	r1, [sp, r2, lsl #2]
			temp_r = r_count;
			prev_left_speed = left_speed;
			prev_right_speed = right_speed;
		} //endif
	} //end while
	for (int j = 0; j < 10; j++) {
 80057ec:	3201      	adds	r2, #1
 80057ee:	2a0a      	cmp	r2, #10
		top_speeds[i - 1] = top_speeds[i - 1] + current_speeds[j];
 80057f0:	440b      	add	r3, r1
			temp_r = r_count;
			prev_left_speed = left_speed;
			prev_right_speed = right_speed;
		} //endif
	} //end while
	for (int j = 0; j < 10; j++) {
 80057f2:	d1f9      	bne.n	80057e8 <Measure_Speed+0xb4>
		top_speeds[i - 1] = top_speeds[i - 1] + current_speeds[j];
	}
	top_speeds[i - 1] = top_speeds[i - 1]/SAMPLES; //get average of five values and store into top_speed array
 80057f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80057f8:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < SAMPLES; i++) {
 80057fa:	2300      	movs	r3, #0
		current_speeds[i] = 0;
 80057fc:	461a      	mov	r2, r3
 80057fe:	f84d 2023 	str.w	r2, [sp, r3, lsl #2]
	} //end while
	for (int j = 0; j < 10; j++) {
		top_speeds[i - 1] = top_speeds[i - 1] + current_speeds[j];
	}
	top_speeds[i - 1] = top_speeds[i - 1]/SAMPLES; //get average of five values and store into top_speed array
	for (int i = 0; i < SAMPLES; i++) {
 8005802:	3301      	adds	r3, #1
 8005804:	2b0a      	cmp	r3, #10
 8005806:	d1fa      	bne.n	80057fe <Measure_Speed+0xca>
 8005808:	340a      	adds	r4, #10
	Reset_Counters();
	HAL_TIM_Base_Start(&htim5); //start timer
	Set_Left(FWD_L, FORWARD);
	Set_Right(FWD_R, FORWARD);

for (int i = 1; i <= 50; i++) { //start speed loop
 800580a:	f240 2362 	movw	r3, #610	; 0x262
 800580e:	429c      	cmp	r4, r3
 8005810:	d1a3      	bne.n	800575a <Measure_Speed+0x26>
		current_speeds[i] = 0;
	}
}
	Stop(); //stop spinning

	Transmit("PWM VALUE |||||  APPROXIMATE SPEED \r\n "); //output results, can be formatted into csv
 8005812:	256e      	movs	r5, #110	; 0x6e
	top_speeds[i - 1] = top_speeds[i - 1]/SAMPLES; //get average of five values and store into top_speed array
	for (int i = 0; i < SAMPLES; i++) {
		current_speeds[i] = 0;
	}
}
	Stop(); //stop spinning
 8005814:	f7ff fc18 	bl	8005048 <Stop>

	Transmit("PWM VALUE |||||  APPROXIMATE SPEED \r\n "); //output results, can be formatted into csv
 8005818:	4810      	ldr	r0, [pc, #64]	; (800585c <Measure_Speed+0x128>)
 800581a:	f7fd fc67 	bl	80030ec <Transmit>
	for (int i = 0; i < 50; i++) {
		sprintf(tx_buffer, "%d  ---  %d mm/s \r\n", 100 + 10*(i+1), top_speeds[i]);
 800581e:	462a      	mov	r2, r5
 8005820:	f856 3f04 	ldr.w	r3, [r6, #4]!
 8005824:	490e      	ldr	r1, [pc, #56]	; (8005860 <Measure_Speed+0x12c>)
 8005826:	350a      	adds	r5, #10
 8005828:	480e      	ldr	r0, [pc, #56]	; (8005864 <Measure_Speed+0x130>)
 800582a:	f000 fdef 	bl	800640c <siprintf>
		Transmit(tx_buffer);
 800582e:	480d      	ldr	r0, [pc, #52]	; (8005864 <Measure_Speed+0x130>)
 8005830:	f7fd fc5c 	bl	80030ec <Transmit>
	}
}
	Stop(); //stop spinning

	Transmit("PWM VALUE |||||  APPROXIMATE SPEED \r\n "); //output results, can be formatted into csv
	for (int i = 0; i < 50; i++) {
 8005834:	42a5      	cmp	r5, r4
 8005836:	d1f2      	bne.n	800581e <Measure_Speed+0xea>
		sprintf(tx_buffer, "%d  ---  %d mm/s \r\n", 100 + 10*(i+1), top_speeds[i]);
		Transmit(tx_buffer);
	}
	HAL_TIM_Base_Stop(&htim5); //stop timer
 8005838:	4802      	ldr	r0, [pc, #8]	; (8005844 <Measure_Speed+0x110>)
}
 800583a:	b03d      	add	sp, #244	; 0xf4
 800583c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	Transmit("PWM VALUE |||||  APPROXIMATE SPEED \r\n "); //output results, can be formatted into csv
	for (int i = 0; i < 50; i++) {
		sprintf(tx_buffer, "%d  ---  %d mm/s \r\n", 100 + 10*(i+1), top_speeds[i]);
		Transmit(tx_buffer);
	}
	HAL_TIM_Base_Stop(&htim5); //stop timer
 8005840:	f7fc bc21 	b.w	8002086 <HAL_TIM_Base_Stop>
 8005844:	200014a0 	.word	0x200014a0
 8005848:	20001450 	.word	0x20001450
 800584c:	20000b28 	.word	0x20000b28
 8005850:	2000020c 	.word	0x2000020c
 8005854:	0003ec76 	.word	0x0003ec76
 8005858:	20001494 	.word	0x20001494
 800585c:	08007141 	.word	0x08007141
 8005860:	08007168 	.word	0x08007168
 8005864:	20001e54 	.word	0x20001e54
 8005868:	20000b48 	.word	0x20000b48
 800586c:	20000b50 	.word	0x20000b50

08005870 <Motor_Test>:
Transmit(fast_path);
Transmit("\r\n");
#endif
}

void Motor_Test() {
 8005870:	b570      	push	{r4, r5, r6, lr}
	static uint32_t prev_left_speed = 0;
	static uint32_t prev_right_speed = 0;
	static int average_l, average_r;
	int debug_count = 0;

	Reset_Counters();
 8005872:	f7fd fb5d 	bl	8002f30 <Reset_Counters>
	HAL_TIM_Base_Start(&htim5); //start timer
 8005876:	4814      	ldr	r0, [pc, #80]	; (80058c8 <Motor_Test+0x58>)
 8005878:	f7fc fbf8 	bl	800206c <HAL_TIM_Base_Start>
	Set_Left(FWD_L, FORWARD);
	Set_Right(FWD_R, FORWARD);
 800587c:	2402      	movs	r4, #2
	static int average_l, average_r;
	int debug_count = 0;

	Reset_Counters();
	HAL_TIM_Base_Start(&htim5); //start timer
	Set_Left(FWD_L, FORWARD);
 800587e:	2101      	movs	r1, #1
 8005880:	20c8      	movs	r0, #200	; 0xc8

	while (1) {

		Update_Sensors(FWD_SEARCH);
		Search_Correction();
		if (l_count > ONE_CELL*4 || r_count > ONE_CELL*4) { //GO Four squares
 8005882:	4d12      	ldr	r5, [pc, #72]	; (80058cc <Motor_Test+0x5c>)
	static int average_l, average_r;
	int debug_count = 0;

	Reset_Counters();
	HAL_TIM_Base_Start(&htim5); //start timer
	Set_Left(FWD_L, FORWARD);
 8005884:	f7fe ff42 	bl	800470c <Set_Left>

	while (1) {

		Update_Sensors(FWD_SEARCH);
		Search_Correction();
		if (l_count > ONE_CELL*4 || r_count > ONE_CELL*4) { //GO Four squares
 8005888:	4e11      	ldr	r6, [pc, #68]	; (80058d0 <Motor_Test+0x60>)
	int debug_count = 0;

	Reset_Counters();
	HAL_TIM_Base_Start(&htim5); //start timer
	Set_Left(FWD_L, FORWARD);
	Set_Right(FWD_R, FORWARD);
 800588a:	2101      	movs	r1, #1
 800588c:	20c8      	movs	r0, #200	; 0xc8
 800588e:	f7fe ff6b 	bl	8004768 <Set_Right>

for (int i = 0; i < 2; i++) { //go back and forth

	while (1) {

		Update_Sensors(FWD_SEARCH);
 8005892:	2002      	movs	r0, #2
 8005894:	f7fe fd70 	bl	8004378 <Update_Sensors>
		Search_Correction();
 8005898:	f7ff f8ac 	bl	80049f4 <Search_Correction>
		if (l_count > ONE_CELL*4 || r_count > ONE_CELL*4) { //GO Four squares
 800589c:	682b      	ldr	r3, [r5, #0]
 800589e:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 80058a2:	d803      	bhi.n	80058ac <Motor_Test+0x3c>
 80058a4:	6833      	ldr	r3, [r6, #0]
 80058a6:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 80058aa:	d9f2      	bls.n	8005892 <Motor_Test+0x22>
			debug_count++;

		} //endif
		*/
	} //end while
Dead_End_Correct();
 80058ac:	f7ff f940 	bl	8004b30 <Dead_End_Correct>
Reset_Counters();
 80058b0:	f7fd fb3e 	bl	8002f30 <Reset_Counters>
	Reset_Counters();
	HAL_TIM_Base_Start(&htim5); //start timer
	Set_Left(FWD_L, FORWARD);
	Set_Right(FWD_R, FORWARD);

for (int i = 0; i < 2; i++) { //go back and forth
 80058b4:	3c01      	subs	r4, #1
 80058b6:	d1ec      	bne.n	8005892 <Motor_Test+0x22>
		*/
	} //end while
Dead_End_Correct();
Reset_Counters();
}
	Stop(); //stop spinning
 80058b8:	f7ff fbc6 	bl	8005048 <Stop>
	HAL_TIM_Base_Stop(&htim5); //stop timer
 80058bc:	4802      	ldr	r0, [pc, #8]	; (80058c8 <Motor_Test+0x58>)
}
 80058be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	} //end while
Dead_End_Correct();
Reset_Counters();
}
	Stop(); //stop spinning
	HAL_TIM_Base_Stop(&htim5); //stop timer
 80058c2:	f7fc bbe0 	b.w	8002086 <HAL_TIM_Base_Stop>
 80058c6:	bf00      	nop
 80058c8:	200014a0 	.word	0x200014a0
 80058cc:	20000b28 	.word	0x20000b28
 80058d0:	2000020c 	.word	0x2000020c

080058d4 <SystemClock_Config_old>:
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80058d4:	4b2d      	ldr	r3, [pc, #180]	; (800598c <SystemClock_Config_old+0xb8>)
 80058d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

void SystemClock_Config_old(void)
{
 80058dc:	b510      	push	{r4, lr}
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80058de:	641a      	str	r2, [r3, #64]	; 0x40
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

void SystemClock_Config_old(void)
{
 80058e0:	b0b4      	sub	sp, #208	; 0xd0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80058e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80058e4:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 8;
	RCC_OscInitStruct.PLL.PLLN = 216;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80058e6:	a807      	add	r0, sp, #28
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80058e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	9b00      	ldr	r3, [sp, #0]

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80058f0:	4b27      	ldr	r3, [pc, #156]	; (8005990 <SystemClock_Config_old+0xbc>)
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80058f8:	601a      	str	r2, [r3, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80058fc:	9407      	str	r4, [sp, #28]

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80058fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = 16;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005902:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 8;
	RCC_OscInitStruct.PLL.PLLN = 216;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005904:	9411      	str	r4, [sp, #68]	; 0x44

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005906:	9301      	str	r3, [sp, #4]
 8005908:	9b01      	ldr	r3, [sp, #4]

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800590a:	2301      	movs	r3, #1
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 8;
	RCC_OscInitStruct.PLL.PLLN = 216;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800590c:	9412      	str	r4, [sp, #72]	; 0x48
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800590e:	930a      	str	r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8005910:	2310      	movs	r3, #16
 8005912:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005914:	2300      	movs	r3, #0
 8005916:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8005918:	2308      	movs	r3, #8
 800591a:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 216;
 800591c:	23d8      	movs	r3, #216	; 0xd8
 800591e:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005920:	f7fb fca6 	bl	8001270 <HAL_RCC_OscConfig>
 8005924:	b108      	cbz	r0, 800592a <SystemClock_Config_old+0x56>
	{
		Error_Handler();
 8005926:	f7fe fb4f 	bl	8003fc8 <Error_Handler>
	  }

	/**Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800592a:	f7fb fc69 	bl	8001200 <HAL_PWREx_EnableOverDrive>
 800592e:	2800      	cmp	r0, #0
 8005930:	d1f9      	bne.n	8005926 <SystemClock_Config_old+0x52>
		Error_Handler();
	  }

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8005932:	230f      	movs	r3, #15
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005934:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8005936:	2107      	movs	r1, #7
 8005938:	a802      	add	r0, sp, #8
		Error_Handler();
	  }

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 800593a:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800593c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
	  }

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005940:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005942:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005948:	9306      	str	r3, [sp, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800594a:	f7fb fe6b 	bl	8001624 <HAL_RCC_ClockConfig>
 800594e:	2800      	cmp	r0, #0
 8005950:	d1e9      	bne.n	8005926 <SystemClock_Config_old+0x52>
	{
		Error_Handler();
	}

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005952:	2340      	movs	r3, #64	; 0x40
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005954:	9024      	str	r0, [sp, #144]	; 0x90
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005956:	a813      	add	r0, sp, #76	; 0x4c
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
	{
		Error_Handler();
	}

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005958:	9313      	str	r3, [sp, #76]	; 0x4c
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800595a:	f7fb ff43 	bl	80017e4 <HAL_RCCEx_PeriphCLKConfig>
 800595e:	4604      	mov	r4, r0
 8005960:	2800      	cmp	r0, #0
 8005962:	d1e0      	bne.n	8005926 <SystemClock_Config_old+0x52>
		Error_Handler();
	}

	    /**Configure the Systick interrupt time
	    */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8005964:	f7fb ff08 	bl	8001778 <HAL_RCC_GetHCLKFreq>
 8005968:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800596c:	fbb0 f0f3 	udiv	r0, r0, r3
 8005970:	f7fa ffaa 	bl	80008c8 <HAL_SYSTICK_Config>

	    /**Configure the Systick
	    */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8005974:	2004      	movs	r0, #4
 8005976:	f7fa ffbd 	bl	80008f4 <HAL_SYSTICK_CLKSourceConfig>

	  /* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800597a:	4622      	mov	r2, r4
 800597c:	4621      	mov	r1, r4
 800597e:	f04f 30ff 	mov.w	r0, #4294967295
 8005982:	f7fa ff4f 	bl	8000824 <HAL_NVIC_SetPriority>
}
 8005986:	b034      	add	sp, #208	; 0xd0
 8005988:	bd10      	pop	{r4, pc}
 800598a:	bf00      	nop
 800598c:	40023800 	.word	0x40023800
 8005990:	40007000 	.word	0x40007000

08005994 <main>:

enum {ADC_VAL_BUFFER_LENGTH = 32}; //DMA Buffer size
uint32_t ADC_valbuffer[ADC_VAL_BUFFER_LENGTH];

int main(void)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b0ac      	sub	sp, #176	; 0xb0


  /*Configure GPIO pins : RDIC_Pin LDIC_Pin GYRO_CS_Pin */
  GPIO_InitStruct.Pin = RDIC_Pin|LDIC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005998:	2400      	movs	r4, #0
{
   //STARTUP

  /* MCU Configuration----------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800599a:	f7fa fccf 	bl	800033c <HAL_Init>
#endif


  /*Configure GPIO pins : RDIC_Pin LDIC_Pin GYRO_CS_Pin */
  GPIO_InitStruct.Pin = RDIC_Pin|LDIC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800599e:	2601      	movs	r6, #1

  /* MCU Configuration----------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
  /* Configure the system clock */
  SystemClock_Config();
 80059a0:	f7ff ff98 	bl	80058d4 <SystemClock_Config_old>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80059a4:	4b72      	ldr	r3, [pc, #456]	; (8005b70 <main+0x1dc>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LDIC_Pin, GPIO_PIN_RESET);
 80059a6:	2102      	movs	r1, #2
 80059a8:	4872      	ldr	r0, [pc, #456]	; (8005b74 <main+0x1e0>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80059aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
#if MOUSE_REV == 69

  GPIO_InitStruct.Pin = LF_EMIT_PIN | L_EMIT_PIN | R_EMIT_PIN | RF_EMIT_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80059ac:	f04f 0802 	mov.w	r8, #2
   HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
#endif

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80059b0:	4d71      	ldr	r5, [pc, #452]	; (8005b78 <main+0x1e4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = LED2_Pin |LED1_Pin;
 80059b2:	2703      	movs	r7, #3
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80059b4:	f042 0201 	orr.w	r2, r2, #1
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.NbrOfDiscConversion = 0;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
 80059b8:	f04f 0904 	mov.w	r9, #4
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80059bc:	631a      	str	r2, [r3, #48]	; 0x30
 80059be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059c0:	f002 0201 	and.w	r2, r2, #1
 80059c4:	9200      	str	r2, [sp, #0]
 80059c6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80059c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059ca:	f042 0204 	orr.w	r2, r2, #4
 80059ce:	631a      	str	r2, [r3, #48]	; 0x30
 80059d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059d2:	f002 0204 	and.w	r2, r2, #4
 80059d6:	9201      	str	r2, [sp, #4]
 80059d8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80059da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059dc:	f042 0202 	orr.w	r2, r2, #2
 80059e0:	631a      	str	r2, [r3, #48]	; 0x30
 80059e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059e4:	f002 0202 	and.w	r2, r2, #2
 80059e8:	9202      	str	r2, [sp, #8]
 80059ea:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80059ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059ee:	f042 0210 	orr.w	r2, r2, #16
 80059f2:	631a      	str	r2, [r3, #48]	; 0x30
 80059f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059f6:	f002 0210 	and.w	r2, r2, #16
 80059fa:	9203      	str	r2, [sp, #12]
 80059fc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80059fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a00:	f042 0208 	orr.w	r2, r2, #8
 8005a04:	631a      	str	r2, [r3, #48]	; 0x30

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LDIC_Pin, GPIO_PIN_RESET);
 8005a06:	2200      	movs	r2, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0a:	f003 0308 	and.w	r3, r3, #8
 8005a0e:	9304      	str	r3, [sp, #16]
 8005a10:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LDIC_Pin, GPIO_PIN_RESET);
 8005a12:	f7fb fbe5 	bl	80011e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, RDIC_Pin, GPIO_PIN_RESET);
 8005a16:	2200      	movs	r2, #0
 8005a18:	2108      	movs	r1, #8
 8005a1a:	4856      	ldr	r0, [pc, #344]	; (8005b74 <main+0x1e0>)
 8005a1c:	f7fb fbe0 	bl	80011e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8005a20:	2201      	movs	r2, #1
 8005a22:	2102      	movs	r1, #2
 8005a24:	4855      	ldr	r0, [pc, #340]	; (8005b7c <main+0x1e8>)
 8005a26:	f7fb fbdb 	bl	80011e0 <HAL_GPIO_WritePin>

#if MOUSE_REV == 69
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	2102      	movs	r1, #2
 8005a2e:	4853      	ldr	r0, [pc, #332]	; (8005b7c <main+0x1e8>)
 8005a30:	f7fb fbd6 	bl	80011e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8005a34:	2200      	movs	r2, #0
 8005a36:	2101      	movs	r1, #1
 8005a38:	4850      	ldr	r0, [pc, #320]	; (8005b7c <main+0x1e8>)
 8005a3a:	f7fb fbd1 	bl	80011e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a44:	484e      	ldr	r0, [pc, #312]	; (8005b80 <main+0x1ec>)
 8005a46:	f7fb fbcb 	bl	80011e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a50:	484b      	ldr	r0, [pc, #300]	; (8005b80 <main+0x1ec>)
 8005a52:	f7fb fbc5 	bl	80011e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8005a56:	2200      	movs	r2, #0
 8005a58:	2101      	movs	r1, #1
 8005a5a:	484a      	ldr	r0, [pc, #296]	; (8005b84 <main+0x1f0>)
 8005a5c:	f7fb fbc0 	bl	80011e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8005a60:	2200      	movs	r2, #0
 8005a62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005a66:	4848      	ldr	r0, [pc, #288]	; (8005b88 <main+0x1f4>)
 8005a68:	f7fb fbba 	bl	80011e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005a72:	4845      	ldr	r0, [pc, #276]	; (8005b88 <main+0x1f4>)
 8005a74:	f7fb fbb4 	bl	80011e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a7e:	4842      	ldr	r0, [pc, #264]	; (8005b88 <main+0x1f4>)
 8005a80:	f7fb fbae 	bl	80011e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED9_GPIO_Port, LED9_Pin, GPIO_PIN_RESET);
 8005a84:	2200      	movs	r2, #0
 8005a86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a8a:	483d      	ldr	r0, [pc, #244]	; (8005b80 <main+0x1ec>)
 8005a8c:	f7fb fba8 	bl	80011e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LED5_Pin|LED4_Pin|LED3_Pin|LED2_Pin , GPIO_PIN_RESET);
#endif


  /*Configure GPIO pins : RDIC_Pin LDIC_Pin GYRO_CS_Pin */
  GPIO_InitStruct.Pin = RDIC_Pin|LDIC_Pin;
 8005a90:	230a      	movs	r3, #10
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a92:	a923      	add	r1, sp, #140	; 0x8c
 8005a94:	4837      	ldr	r0, [pc, #220]	; (8005b74 <main+0x1e0>)
  HAL_GPIO_WritePin(GPIOD, LED5_Pin|LED4_Pin|LED3_Pin|LED2_Pin , GPIO_PIN_RESET);
#endif


  /*Configure GPIO pins : RDIC_Pin LDIC_Pin GYRO_CS_Pin */
  GPIO_InitStruct.Pin = RDIC_Pin|LDIC_Pin;
 8005a96:	9323      	str	r3, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a98:	9624      	str	r6, [sp, #144]	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a9a:	9425      	str	r4, [sp, #148]	; 0x94
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a9c:	9426      	str	r4, [sp, #152]	; 0x98
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a9e:	f7fb fab3 	bl	8001008 <HAL_GPIO_Init>
   GPIO_InitStruct.Pull = GPIO_NOPULL;
   HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
#endif

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
 8005aa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 8005aa6:	a923      	add	r1, sp, #140	; 0x8c
 8005aa8:	4836      	ldr	r0, [pc, #216]	; (8005b84 <main+0x1f0>)
   GPIO_InitStruct.Pull = GPIO_NOPULL;
   HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
#endif

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
 8005aaa:	9323      	str	r3, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005aac:	9524      	str	r5, [sp, #144]	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aae:	9425      	str	r4, [sp, #148]	; 0x94
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 8005ab0:	f7fb faaa 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin;
 8005ab4:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);
 8005ab6:	a923      	add	r1, sp, #140	; 0x8c
 8005ab8:	4833      	ldr	r0, [pc, #204]	; (8005b88 <main+0x1f4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin;
 8005aba:	9323      	str	r3, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005abc:	9524      	str	r5, [sp, #144]	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005abe:	9425      	str	r4, [sp, #148]	; 0x94
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);
 8005ac0:	f7fb faa2 	bl	8001008 <HAL_GPIO_Init>

#if MOUSE_REV == 69

#endif

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8005ac4:	4622      	mov	r2, r4
 8005ac6:	2102      	movs	r1, #2
 8005ac8:	2028      	movs	r0, #40	; 0x28

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 8005aca:	4d30      	ldr	r5, [pc, #192]	; (8005b8c <main+0x1f8>)

#if MOUSE_REV == 69

#endif

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8005acc:	f7fa feaa 	bl	8000824 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005ad0:	2028      	movs	r0, #40	; 0x28
 8005ad2:	f7fa fedf 	bl	8000894 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8005ad6:	4622      	mov	r2, r4
 8005ad8:	4631      	mov	r1, r6
 8005ada:	2017      	movs	r0, #23
 8005adc:	f7fa fea2 	bl	8000824 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005ae0:	2017      	movs	r0, #23
 8005ae2:	f7fa fed7 	bl	8000894 <HAL_NVIC_EnableIRQ>

  //Configure GPIO pins : PC8 PC9
#if MOUSE_REV == 69

  GPIO_InitStruct.Pin = LF_EMIT_PIN | L_EMIT_PIN | R_EMIT_PIN | RF_EMIT_PIN;
 8005ae6:	231e      	movs	r3, #30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005ae8:	a923      	add	r1, sp, #140	; 0x8c
 8005aea:	4826      	ldr	r0, [pc, #152]	; (8005b84 <main+0x1f0>)
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

  //Configure GPIO pins : PC8 PC9
#if MOUSE_REV == 69

  GPIO_InitStruct.Pin = LF_EMIT_PIN | L_EMIT_PIN | R_EMIT_PIN | RF_EMIT_PIN;
 8005aec:	9323      	str	r3, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005aee:	9624      	str	r6, [sp, #144]	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005af0:	9425      	str	r4, [sp, #148]	; 0x94
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005af2:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005af6:	f7fb fa87 	bl	8001008 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|LED9_Pin;
 8005afa:	f44f 530c 	mov.w	r3, #8960	; 0x2300
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005afe:	a923      	add	r1, sp, #140	; 0x8c
 8005b00:	481f      	ldr	r0, [pc, #124]	; (8005b80 <main+0x1ec>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|LED9_Pin;
 8005b02:	9323      	str	r3, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b04:	9624      	str	r6, [sp, #144]	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b06:	9425      	str	r4, [sp, #148]	; 0x94
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b08:	9426      	str	r4, [sp, #152]	; 0x98
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b0a:	f7fb fa7d 	bl	8001008 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LED6_Pin|LED7_Pin|LED8_Pin;
 8005b0e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b12:	a923      	add	r1, sp, #140	; 0x8c
 8005b14:	481c      	ldr	r0, [pc, #112]	; (8005b88 <main+0x1f4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = LED6_Pin|LED7_Pin|LED8_Pin;
 8005b16:	9323      	str	r3, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b18:	9624      	str	r6, [sp, #144]	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b1a:	9425      	str	r4, [sp, #148]	; 0x94
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b1c:	9426      	str	r4, [sp, #152]	; 0x98
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b1e:	f7fb fa73 	bl	8001008 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005b22:	a923      	add	r1, sp, #140	; 0x8c
 8005b24:	4817      	ldr	r0, [pc, #92]	; (8005b84 <main+0x1f0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = LED5_Pin;
 8005b26:	9623      	str	r6, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b28:	9624      	str	r6, [sp, #144]	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b2a:	9425      	str	r4, [sp, #148]	; 0x94
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b2c:	9426      	str	r4, [sp, #152]	; 0x98
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005b2e:	f7fb fa6b 	bl	8001008 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LED2_Pin |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005b32:	4812      	ldr	r0, [pc, #72]	; (8005b7c <main+0x1e8>)
 8005b34:	a923      	add	r1, sp, #140	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = LED2_Pin |LED1_Pin;
 8005b36:	9723      	str	r7, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b38:	9624      	str	r6, [sp, #144]	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b3a:	9425      	str	r4, [sp, #148]	; 0x94
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b3c:	9426      	str	r4, [sp, #152]	; 0x98
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005b3e:	f7fb fa63 	bl	8001008 <HAL_GPIO_Init>
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005b42:	4b13      	ldr	r3, [pc, #76]	; (8005b90 <main+0x1fc>)
 8005b44:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.EOCSelection = DISABLE;

  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005b48:	4628      	mov	r0, r5

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005b4a:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8005b4c:	612e      	str	r6, [r5, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005b4e:	61ae      	str	r6, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005b50:	622c      	str	r4, [r5, #32]
  hadc1.Init.NbrOfDiscConversion = 0;
 8005b52:	626c      	str	r4, [r5, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005b54:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 8005b56:	62ac      	str	r4, [r5, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005b58:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 4;
 8005b5a:	f8c5 901c 	str.w	r9, [r5, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8005b5e:	632e      	str	r6, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = DISABLE;
 8005b60:	616c      	str	r4, [r5, #20]
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005b62:	e885 4008 	stmia.w	r5, {r3, lr}
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.EOCSelection = DISABLE;

  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005b66:	f7fa fc11 	bl	800038c <HAL_ADC_Init>
 8005b6a:	b198      	cbz	r0, 8005b94 <main+0x200>
  {
    Error_Handler();
 8005b6c:	f7fe fa2c 	bl	8003fc8 <Error_Handler>
 8005b70:	40023800 	.word	0x40023800
 8005b74:	40020000 	.word	0x40020000
 8005b78:	10210000 	.word	0x10210000
 8005b7c:	40021000 	.word	0x40021000
 8005b80:	40020400 	.word	0x40020400
 8005b84:	40020c00 	.word	0x40020c00
 8005b88:	40020800 	.word	0x40020800
 8005b8c:	20001f1c 	.word	0x20001f1c
 8005b90:	40012000 	.word	0x40012000
  }


  sConfig.Channel = ADC_CHANNEL_14; //l receiver
 8005b94:	230e      	movs	r3, #14
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8005b96:	9011      	str	r0, [sp, #68]	; 0x44
  sConfig.Offset = 0;
 8005b98:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005b9a:	a90f      	add	r1, sp, #60	; 0x3c
 8005b9c:	4628      	mov	r0, r5
  {
    Error_Handler();
  }


  sConfig.Channel = ADC_CHANNEL_14; //l receiver
 8005b9e:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfig.Rank = 1;
 8005ba0:	9610      	str	r6, [sp, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005ba2:	f7fa fd8d 	bl	80006c0 <HAL_ADC_ConfigChannel>
 8005ba6:	2800      	cmp	r0, #0
 8005ba8:	d1e0      	bne.n	8005b6c <main+0x1d8>
  {

    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_15; //lf receiver
 8005baa:	230f      	movs	r3, #15
  sConfig.Rank = 2;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8005bac:	9011      	str	r0, [sp, #68]	; 0x44
  sConfig.Offset = 0;
 8005bae:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005bb0:	a90f      	add	r1, sp, #60	; 0x3c
 8005bb2:	4628      	mov	r0, r5
  {

    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_15; //lf receiver
 8005bb4:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfig.Rank = 2;
 8005bb6:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005bba:	f7fa fd81 	bl	80006c0 <HAL_ADC_ConfigChannel>
 8005bbe:	2800      	cmp	r0, #0
 8005bc0:	d1d4      	bne.n	8005b6c <main+0x1d8>
  {

    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_8; //rf receiver
 8005bc2:	f04f 0808 	mov.w	r8, #8
  sConfig.Rank = 3;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8005bc6:	9011      	str	r0, [sp, #68]	; 0x44
  sConfig.Offset = 0;
 8005bc8:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005bca:	a90f      	add	r1, sp, #60	; 0x3c
 8005bcc:	4628      	mov	r0, r5
  {

    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_8; //rf receiver
 8005bce:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  sConfig.Rank = 3;
 8005bd2:	9710      	str	r7, [sp, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005bd4:	f7fa fd74 	bl	80006c0 <HAL_ADC_ConfigChannel>
 8005bd8:	2800      	cmp	r0, #0
 8005bda:	d1c7      	bne.n	8005b6c <main+0x1d8>
  {

    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_9; //r receiver
 8005bdc:	2309      	movs	r3, #9
  sConfig.Rank = 4;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8005bde:	9011      	str	r0, [sp, #68]	; 0x44
  sConfig.Offset = 0;
 8005be0:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005be2:	a90f      	add	r1, sp, #60	; 0x3c
 8005be4:	4628      	mov	r0, r5
  {

    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_9; //r receiver
 8005be6:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfig.Rank = 4;
 8005be8:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005bec:	f7fa fd68 	bl	80006c0 <HAL_ADC_ConfigChannel>
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	d1bb      	bne.n	8005b6c <main+0x1d8>
//LEFT ENCODER CHANNELS
static void MX_TIM1_Init(void)
{
  TIM_Encoder_InitTypeDef sConfig;

  htim1.Instance = TIM1;
 8005bf4:	4cb6      	ldr	r4, [pc, #728]	; (8005ed0 <main+0x53c>)
  sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
  sConfig.IC2Filter = 0;

  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8005bf6:	a923      	add	r1, sp, #140	; 0x8c
//LEFT ENCODER CHANNELS
static void MX_TIM1_Init(void)
{
  TIM_Encoder_InitTypeDef sConfig;

  htim1.Instance = TIM1;
 8005bf8:	4bb6      	ldr	r3, [pc, #728]	; (8005ed4 <main+0x540>)
  htim1.Init.Prescaler = 0;
 8005bfa:	6060      	str	r0, [r4, #4]
//LEFT ENCODER CHANNELS
static void MX_TIM1_Init(void)
{
  TIM_Encoder_InitTypeDef sConfig;

  htim1.Instance = TIM1;
 8005bfc:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 0xffff;
 8005bfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
  TIM_Encoder_InitTypeDef sConfig;

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c02:	60a0      	str	r0, [r4, #8]
  htim1.Init.Period = 0xffff;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c04:	6120      	str	r0, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8005c06:	6160      	str	r0, [r4, #20]

  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
  sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005c08:	9024      	str	r0, [sp, #144]	; 0x90
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
  sConfig.IC1Filter = 0;
 8005c0a:	9027      	str	r0, [sp, #156]	; 0x9c

  sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005c0c:	9028      	str	r0, [sp, #160]	; 0xa0
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
  sConfig.IC2Filter = 0;
 8005c0e:	902b      	str	r0, [sp, #172]	; 0xac

  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8005c10:	4620      	mov	r0, r4
  TIM_Encoder_InitTypeDef sConfig;

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 0xffff;
 8005c12:	60e3      	str	r3, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;

  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005c14:	9723      	str	r7, [sp, #140]	; 0x8c
  sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005c16:	9625      	str	r6, [sp, #148]	; 0x94
  sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8005c18:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
  sConfig.IC1Filter = 0;

  sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005c1c:	9629      	str	r6, [sp, #164]	; 0xa4
  sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8005c1e:	f8cd 80a8 	str.w	r8, [sp, #168]	; 0xa8
  sConfig.IC2Filter = 0;

  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8005c22:	f7fc fbc7 	bl	80023b4 <HAL_TIM_Encoder_Init>
 8005c26:	2800      	cmp	r0, #0
 8005c28:	d1a0      	bne.n	8005b6c <main+0x1d8>
  {
    Error_Handler();
  }

  if(HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL) != HAL_OK)
 8005c2a:	213c      	movs	r1, #60	; 0x3c
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	f7fc fa41 	bl	80020b4 <HAL_TIM_Encoder_Start_IT>
 8005c32:	2800      	cmp	r0, #0
 8005c34:	d19a      	bne.n	8005b6c <main+0x1d8>
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  //uhPrescalerValue = (uint32_t)((SystemCoreClock /2) / 18000000) - 1;

  htim2.Instance = TIM2;
 8005c36:	4ca8      	ldr	r4, [pc, #672]	; (8005ed8 <main+0x544>)
 8005c38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 3;
 8005c3c:	e884 0088 	stmia.w	r4, {r3, r7}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 665;
 8005c40:	f240 2399 	movw	r3, #665	; 0x299

  //uhPrescalerValue = (uint32_t)((SystemCoreClock /2) / 18000000) - 1;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 3;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c44:	60a0      	str	r0, [r4, #8]
  htim2.Init.Period = 665;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c46:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005c48:	4620      	mov	r0, r4
  //uhPrescalerValue = (uint32_t)((SystemCoreClock /2) / 18000000) - 1;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 3;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 665;
 8005c4a:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005c4c:	f7fc fb98 	bl	8002380 <HAL_TIM_PWM_Init>
 8005c50:	2800      	cmp	r0, #0
 8005c52:	d18b      	bne.n	8005b6c <main+0x1d8>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c54:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005c56:	a908      	add	r1, sp, #32
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c58:	900a      	str	r0, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	f7fc fe4a 	bl	80028f4 <HAL_TIMEx_MasterConfigSynchronization>
 8005c60:	4602      	mov	r2, r0
 8005c62:	2800      	cmp	r0, #0
 8005c64:	d182      	bne.n	8005b6c <main+0x1d8>
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005c66:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8005c68:	9014      	str	r0, [sp, #80]	; 0x50
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005c6a:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005c6c:	a913      	add	r1, sp, #76	; 0x4c
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005c6e:	9017      	str	r0, [sp, #92]	; 0x5c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005c70:	4620      	mov	r0, r4
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005c72:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005c74:	f7fc fdb8 	bl	80027e8 <HAL_TIM_PWM_ConfigChannel>
 8005c78:	2800      	cmp	r0, #0
 8005c7a:	f47f af77 	bne.w	8005b6c <main+0x1d8>
  {
    Error_Handler();
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005c7e:	4642      	mov	r2, r8
 8005c80:	a913      	add	r1, sp, #76	; 0x4c
 8005c82:	4620      	mov	r0, r4
 8005c84:	f7fc fdb0 	bl	80027e8 <HAL_TIM_PWM_ConfigChannel>
 8005c88:	4605      	mov	r5, r0
 8005c8a:	2800      	cmp	r0, #0
 8005c8c:	f47f af6e 	bne.w	8005b6c <main+0x1d8>
  {
    Error_Handler();
  }

  HAL_TIM_MspPostInit(&htim2);
 8005c90:	4620      	mov	r0, r4
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim5.Instance = TIM5;
 8005c92:	4c92      	ldr	r4, [pc, #584]	; (8005edc <main+0x548>)
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }

  HAL_TIM_MspPostInit(&htim2);
 8005c94:	f000 fad0 	bl	8006238 <HAL_TIM_MspPostInit>

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim5.Instance = TIM5;
  htim5.Init.Prescaler = CLOCK_SPEED; //or 2160000 microsecond counter
 8005c98:	4891      	ldr	r0, [pc, #580]	; (8005ee0 <main+0x54c>)
 8005c9a:	23d8      	movs	r3, #216	; 0xd8
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c9c:	60a5      	str	r5, [r4, #8]
  htim5.Init.Period = 0xffffffff;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c9e:	6125      	str	r5, [r4, #16]

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim5.Instance = TIM5;
  htim5.Init.Prescaler = CLOCK_SPEED; //or 2160000 microsecond counter
 8005ca0:	e884 0009 	stmia.w	r4, {r0, r3}
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 0xffffffff;
 8005ca4:	f04f 33ff 	mov.w	r3, #4294967295
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005ca8:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig;

  htim5.Instance = TIM5;
  htim5.Init.Prescaler = CLOCK_SPEED; //or 2160000 microsecond counter
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 0xffffffff;
 8005caa:	60e3      	str	r3, [r4, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005cac:	f7fc fb52 	bl	8002354 <HAL_TIM_Base_Init>
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	f47f af5b 	bne.w	8005b6c <main+0x1d8>
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005cb6:	a92c      	add	r1, sp, #176	; 0xb0
 8005cb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005cbc:	4620      	mov	r0, r4
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005cbe:	f841 3d84 	str.w	r3, [r1, #-132]!
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005cc2:	f7fc fc8b 	bl	80025dc <HAL_TIM_ConfigClockSource>
 8005cc6:	2800      	cmp	r0, #0
 8005cc8:	f47f af50 	bne.w	8005b6c <main+0x1d8>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ccc:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005cce:	a905      	add	r1, sp, #20
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005cd0:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	f7fc fe0e 	bl	80028f4 <HAL_TIMEx_MasterConfigSynchronization>
 8005cd8:	2800      	cmp	r0, #0
 8005cda:	f47f af47 	bne.w	8005b6c <main+0x1d8>
//RIGHT ENCODER CHANNELS
static void MX_TIM4_Init(void)
{
	TIM_Encoder_InitTypeDef sConfig;

	htim4.Instance = TIM4;
 8005cde:	4c81      	ldr	r4, [pc, #516]	; (8005ee4 <main+0x550>)
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim4.Init.RepetitionCounter = 0;

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005ce0:	2501      	movs	r5, #1
//RIGHT ENCODER CHANNELS
static void MX_TIM4_Init(void)
{
	TIM_Encoder_InitTypeDef sConfig;

	htim4.Instance = TIM4;
 8005ce2:	4b81      	ldr	r3, [pc, #516]	; (8005ee8 <main+0x554>)
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
	sConfig.IC2Filter = 0;

	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005ce4:	a91a      	add	r1, sp, #104	; 0x68
static void MX_TIM4_Init(void)
{
	TIM_Encoder_InitTypeDef sConfig;

	htim4.Instance = TIM4;
	htim4.Init.Prescaler = 0;
 8005ce6:	6060      	str	r0, [r4, #4]
//RIGHT ENCODER CHANNELS
static void MX_TIM4_Init(void)
{
	TIM_Encoder_InitTypeDef sConfig;

	htim4.Instance = TIM4;
 8005ce8:	6023      	str	r3, [r4, #0]
	htim4.Init.Prescaler = 0;
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim4.Init.Period = 0xffff;
 8005cea:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
	TIM_Encoder_InitTypeDef sConfig;

	htim4.Instance = TIM4;
	htim4.Init.Prescaler = 0;
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cee:	60a0      	str	r0, [r4, #8]
	htim4.Init.Period = 0xffff;
 8005cf0:	60e3      	str	r3, [r4, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim4.Init.RepetitionCounter = 0;

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005cf2:	2303      	movs	r3, #3

	htim4.Instance = TIM4;
	htim4.Init.Prescaler = 0;
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim4.Init.Period = 0xffff;
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005cf4:	6120      	str	r0, [r4, #16]
	htim4.Init.RepetitionCounter = 0;
 8005cf6:	6160      	str	r0, [r4, #20]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005cf8:	901b      	str	r0, [sp, #108]	; 0x6c
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
	sConfig.IC1Filter = 0;
 8005cfa:	901e      	str	r0, [sp, #120]	; 0x78

	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005cfc:	901f      	str	r0, [sp, #124]	; 0x7c
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
	sConfig.IC2Filter = 0;
 8005cfe:	9022      	str	r0, [sp, #136]	; 0x88

	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005d00:	4620      	mov	r0, r4
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim4.Init.Period = 0xffff;
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim4.Init.RepetitionCounter = 0;

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005d02:	931a      	str	r3, [sp, #104]	; 0x68
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005d04:	951c      	str	r5, [sp, #112]	; 0x70
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8005d06:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
	sConfig.IC1Filter = 0;

	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005d0a:	9520      	str	r5, [sp, #128]	; 0x80
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8005d0c:	f8cd 8084 	str.w	r8, [sp, #132]	; 0x84
	sConfig.IC2Filter = 0;

	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005d10:	f7fc fb50 	bl	80023b4 <HAL_TIM_Encoder_Init>
 8005d14:	2800      	cmp	r0, #0
 8005d16:	f47f af29 	bne.w	8005b6c <main+0x1d8>
	{
	  Error_Handler();
	}

	if(HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL) != HAL_OK)
 8005d1a:	213c      	movs	r1, #60	; 0x3c
 8005d1c:	4620      	mov	r0, r4
 8005d1e:	f7fc f9c9 	bl	80020b4 <HAL_TIM_Encoder_Start_IT>
 8005d22:	2800      	cmp	r0, #0
 8005d24:	f47f af22 	bne.w	8005b6c <main+0x1d8>
}

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
  huart1.Instance = USART1;
 8005d28:	4b70      	ldr	r3, [pc, #448]	; (8005eec <main+0x558>)
  huart1.Init.BaudRate = 115200;
 8005d2a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005d2e:	4970      	ldr	r1, [pc, #448]	; (8005ef0 <main+0x55c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005d30:	6098      	str	r0, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005d32:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005d34:	6118      	str	r0, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d36:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d38:	61d8      	str	r0, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005d3a:	6218      	str	r0, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005d3c:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005d3e:	4618      	mov	r0, r3

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 8005d40:	e883 0006 	stmia.w	r3, {r1, r2}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005d44:	220c      	movs	r2, #12
 8005d46:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005d48:	f7fd f845 	bl	8002dd6 <HAL_UART_Init>
 8005d4c:	4604      	mov	r4, r0
 8005d4e:	2800      	cmp	r0, #0
 8005d50:	f47f af0c 	bne.w	8005b6c <main+0x1d8>

  //buzzer
  //HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);

  //start PWM for motors
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8005d54:	4641      	mov	r1, r8
 8005d56:	4860      	ldr	r0, [pc, #384]	; (8005ed8 <main+0x544>)
 8005d58:	f7fc fcdc 	bl	8002714 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8005d5c:	4621      	mov	r1, r4
 8005d5e:	485e      	ldr	r0, [pc, #376]	; (8005ed8 <main+0x544>)
 8005d60:	f7fc fcd8 	bl	8002714 <HAL_TIM_PWM_Start>

  Set_Left(0, FORWARD); //set mouse to sit
 8005d64:	4620      	mov	r0, r4
 8005d66:	4629      	mov	r1, r5
 8005d68:	4e62      	ldr	r6, [pc, #392]	; (8005ef4 <main+0x560>)
 8005d6a:	f7fe fccf 	bl	800470c <Set_Left>
  Set_Right(0, FORWARD);
 8005d6e:	4620      	mov	r0, r4
 8005d70:	4629      	mov	r1, r5
 8005d72:	4c61      	ldr	r4, [pc, #388]	; (8005ef8 <main+0x564>)
 8005d74:	f7fe fcf8 	bl	8004768 <Set_Right>
void SetSpeed(int speed) {
	/*
	 * Set the system motor speed to a certain value. All the speed correction functions will see this value
	 */

	m_speed = speed;
 8005d78:	22c8      	movs	r2, #200	; 0xc8
 8005d7a:	4b60      	ldr	r3, [pc, #384]	; (8005efc <main+0x568>)
 8005d7c:	601a      	str	r2, [r3, #0]

  //MAIN INFINITE PROGRAM LOOP aka ready loop
  while (1)
  {

	  if (stop_flag == FALSE || send_debug == TRUE || dem1 == TRUE || dem2 == TRUE || dem3 == TRUE) { //press top button to activate IR sensors
 8005d7e:	4d60      	ldr	r5, [pc, #384]	; (8005f00 <main+0x56c>)
 8005d80:	f8df 8194 	ldr.w	r8, [pc, #404]	; 8005f18 <main+0x584>
 8005d84:	682b      	ldr	r3, [r5, #0]
 8005d86:	4f5f      	ldr	r7, [pc, #380]	; (8005f04 <main+0x570>)
 8005d88:	b163      	cbz	r3, 8005da4 <main+0x410>
 8005d8a:	f8d8 3000 	ldr.w	r3, [r8]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d008      	beq.n	8005da4 <main+0x410>
 8005d92:	6833      	ldr	r3, [r6, #0]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d005      	beq.n	8005da4 <main+0x410>
 8005d98:	6823      	ldr	r3, [r4, #0]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d002      	beq.n	8005da4 <main+0x410>
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d108      	bne.n	8005db6 <main+0x422>
		Update_Sensors(BARE);
 8005da4:	2000      	movs	r0, #0
 8005da6:	f7fe fae7 	bl	8004378 <Update_Sensors>
	    if (send_debug == TRUE) {
 8005daa:	f8d8 3000 	ldr.w	r3, [r8]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d101      	bne.n	8005db6 <main+0x422>
	  	  Send_Debug();
 8005db2:	f7fd f9ab 	bl	800310c <Send_Debug>
	  }

	  /*
	   * LED3
	   */
	  if (stop_flag == FALSE && dif_r > 2000) { //read walls from memory
 8005db6:	f8d5 8000 	ldr.w	r8, [r5]
 8005dba:	f1b8 0f00 	cmp.w	r8, #0
 8005dbe:	d119      	bne.n	8005df4 <main+0x460>
 8005dc0:	4b51      	ldr	r3, [pc, #324]	; (8005f08 <main+0x574>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005dc8:	dd14      	ble.n	8005df4 <main+0x460>

		  Read_Walls_Flash();
 8005dca:	f7fd fa6d 	bl	80032a8 <Read_Walls_Flash>
		  Print_Maze();
 8005dce:	f7fd f9d1 	bl	8003174 <Print_Maze>
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, ON);
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	2102      	movs	r1, #2
 8005dd6:	484d      	ldr	r0, [pc, #308]	; (8005f0c <main+0x578>)
 8005dd8:	f7fb fa02 	bl	80011e0 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8005ddc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005de0:	f7fa fac6 	bl	8000370 <HAL_Delay>
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, OFF);
 8005de4:	4642      	mov	r2, r8
 8005de6:	2102      	movs	r1, #2
 8005de8:	4848      	ldr	r0, [pc, #288]	; (8005f0c <main+0x578>)
 8005dea:	f7fb f9f9 	bl	80011e0 <HAL_GPIO_WritePin>
		  disable_reset = TRUE;
 8005dee:	2201      	movs	r2, #1
 8005df0:	4b47      	ldr	r3, [pc, #284]	; (8005f10 <main+0x57c>)
 8005df2:	601a      	str	r2, [r3, #0]
	  }

	  if (stop_flag == FALSE && dif_l > 2000) { //start searching (place finger in front)
 8005df4:	682b      	ldr	r3, [r5, #0]
 8005df6:	b933      	cbnz	r3, 8005e06 <main+0x472>
 8005df8:	4b46      	ldr	r3, [pc, #280]	; (8005f14 <main+0x580>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005e00:	dd01      	ble.n	8005e06 <main+0x472>
		  Run_Maze();
 8005e02:	f7ff fc2f 	bl	8005664 <Run_Maze>
	  }

	  /*
	   * LED4
	   */
	  if (dem1 == TRUE && dif_l > 2000) { //test going straight without correction
 8005e06:	f8d6 8000 	ldr.w	r8, [r6]
 8005e0a:	f1b8 0f01 	cmp.w	r8, #1
 8005e0e:	d122      	bne.n	8005e56 <main+0x4c2>
 8005e10:	4b40      	ldr	r3, [pc, #256]	; (8005f14 <main+0x580>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005e18:	dd1d      	ble.n	8005e56 <main+0x4c2>
		  Turn_On_Lights();
 8005e1a:	f7fd fe83 	bl	8003b24 <Turn_On_Lights>
		  HAL_Delay(1000);
 8005e1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e22:	f7fa faa5 	bl	8000370 <HAL_Delay>
		  Turn_Off_Lights();
 8005e26:	f7fd feb7 	bl	8003b98 <Turn_Off_Lights>
		  //Speed_Run("ds");

		  Set_Left(FWD_L, FORWARD);
 8005e2a:	4641      	mov	r1, r8
 8005e2c:	20c8      	movs	r0, #200	; 0xc8
 8005e2e:	f7fe fc6d 	bl	800470c <Set_Left>
		  Set_Right(FWD_R, FORWARD);
 8005e32:	4641      	mov	r1, r8
 8005e34:	20c8      	movs	r0, #200	; 0xc8
 8005e36:	f7fe fc97 	bl	8004768 <Set_Right>
		  HAL_Delay(4000);
 8005e3a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005e3e:	f7fa fa97 	bl	8000370 <HAL_Delay>
		  Set_Right(0, 0);
 8005e42:	2100      	movs	r1, #0
 8005e44:	4608      	mov	r0, r1
 8005e46:	f7fe fc8f 	bl	8004768 <Set_Right>
		  Set_Left(0, 0);
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	4608      	mov	r0, r1
 8005e4e:	f7fe fc5d 	bl	800470c <Set_Left>

		  dem1 = FALSE;
 8005e52:	2300      	movs	r3, #0
 8005e54:	6033      	str	r3, [r6, #0]
	  }

	  if (dem1 == TRUE && dif_r > 2000) { //test correction
 8005e56:	f8d6 a000 	ldr.w	sl, [r6]
 8005e5a:	f1ba 0f01 	cmp.w	sl, #1
 8005e5e:	d114      	bne.n	8005e8a <main+0x4f6>
 8005e60:	4b29      	ldr	r3, [pc, #164]	; (8005f08 <main+0x574>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005e68:	dd0f      	ble.n	8005e8a <main+0x4f6>
		  reverse_flag = FALSE;
 8005e6a:	f04f 0800 	mov.w	r8, #0
 8005e6e:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8005f1c <main+0x588>
		  stop_flag = FALSE;
 8005e72:	f8c5 8000 	str.w	r8, [r5]

		  dem1 = FALSE;
	  }

	  if (dem1 == TRUE && dif_r > 2000) { //test correction
		  reverse_flag = FALSE;
 8005e76:	f8c9 8000 	str.w	r8, [r9]
		  stop_flag = FALSE;
		  Search(); //reached the end
 8005e7a:	f7ff fb37 	bl	80054ec <Search>
		  reverse_flag = TRUE;
 8005e7e:	f8c9 a000 	str.w	sl, [r9]
		  stop_flag = FALSE;
 8005e82:	f8c5 8000 	str.w	r8, [r5]
		  Search();
 8005e86:	f7ff fb31 	bl	80054ec <Search>
	 }

	  /*
	   * LED6
	   */
	  if (dem2 == TRUE && dif_l > 2000) { //debug options
 8005e8a:	6825      	ldr	r5, [r4, #0]
 8005e8c:	2d01      	cmp	r5, #1
 8005e8e:	d115      	bne.n	8005ebc <main+0x528>
 8005e90:	4b20      	ldr	r3, [pc, #128]	; (8005f14 <main+0x580>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005e98:	dd10      	ble.n	8005ebc <main+0x528>
		  Turn_On_Lights();
 8005e9a:	f7fd fe43 	bl	8003b24 <Turn_On_Lights>
		  HAL_Delay(1000);
 8005e9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ea2:	f7fa fa65 	bl	8000370 <HAL_Delay>
		  Turn_Off_Lights();
 8005ea6:	f7fd fe77 	bl	8003b98 <Turn_Off_Lights>
		  //Speed_Run("blbs");
		  Measure_Speed();
 8005eaa:	f7ff fc43 	bl	8005734 <Measure_Speed>
		  dem2 = FALSE;
 8005eae:	2300      	movs	r3, #0
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, ON);
 8005eb0:	462a      	mov	r2, r5
 8005eb2:	2102      	movs	r1, #2
 8005eb4:	4815      	ldr	r0, [pc, #84]	; (8005f0c <main+0x578>)
		  Turn_On_Lights();
		  HAL_Delay(1000);
		  Turn_Off_Lights();
		  //Speed_Run("blbs");
		  Measure_Speed();
		  dem2 = FALSE;
 8005eb6:	6023      	str	r3, [r4, #0]
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, ON);
 8005eb8:	f7fb f992 	bl	80011e0 <HAL_GPIO_WritePin>
	  }

	  if (dem2 == TRUE && dif_r > 2000) { //debug options
 8005ebc:	6825      	ldr	r5, [r4, #0]
 8005ebe:	2d01      	cmp	r5, #1
 8005ec0:	d13f      	bne.n	8005f42 <main+0x5ae>
 8005ec2:	4b11      	ldr	r3, [pc, #68]	; (8005f08 <main+0x574>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005eca:	dd3a      	ble.n	8005f42 <main+0x5ae>
 8005ecc:	e028      	b.n	8005f20 <main+0x58c>
 8005ece:	bf00      	nop
 8005ed0:	20002904 	.word	0x20002904
 8005ed4:	40010000 	.word	0x40010000
 8005ed8:	20002a4c 	.word	0x20002a4c
 8005edc:	200014a0 	.word	0x200014a0
 8005ee0:	40000c00 	.word	0x40000c00
 8005ee4:	20001458 	.word	0x20001458
 8005ee8:	40000800 	.word	0x40000800
 8005eec:	20001f64 	.word	0x20001f64
 8005ef0:	40011000 	.word	0x40011000
 8005ef4:	20000344 	.word	0x20000344
 8005ef8:	20000348 	.word	0x20000348
 8005efc:	20000338 	.word	0x20000338
 8005f00:	20000014 	.word	0x20000014
 8005f04:	2000034c 	.word	0x2000034c
 8005f08:	200000b0 	.word	0x200000b0
 8005f0c:	40021000 	.word	0x40021000
 8005f10:	20001350 	.word	0x20001350
 8005f14:	200000a8 	.word	0x200000a8
 8005f18:	20000324 	.word	0x20000324
 8005f1c:	2000033c 	.word	0x2000033c
		  Turn_On_Lights();
 8005f20:	f7fd fe00 	bl	8003b24 <Turn_On_Lights>
		  HAL_Delay(1000);
 8005f24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005f28:	f7fa fa22 	bl	8000370 <HAL_Delay>
		  Turn_Off_Lights();
 8005f2c:	f7fd fe34 	bl	8003b98 <Turn_Off_Lights>
		  Motor_Test();
 8005f30:	f7ff fc9e 	bl	8005870 <Motor_Test>
		  dem2 = FALSE;
 8005f34:	2300      	movs	r3, #0
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, ON);
 8005f36:	462a      	mov	r2, r5
 8005f38:	2102      	movs	r1, #2
 8005f3a:	481e      	ldr	r0, [pc, #120]	; (8005fb4 <main+0x620>)
	  if (dem2 == TRUE && dif_r > 2000) { //debug options
		  Turn_On_Lights();
		  HAL_Delay(1000);
		  Turn_Off_Lights();
		  Motor_Test();
		  dem2 = FALSE;
 8005f3c:	6023      	str	r3, [r4, #0]
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, ON);
 8005f3e:	f7fb f94f 	bl	80011e0 <HAL_GPIO_WritePin>
	  }
	  /*
	  	   * LED7
	  	   */
	  if (dem3 == TRUE && dif_l > 2000) { //debug options
 8005f42:	683d      	ldr	r5, [r7, #0]
 8005f44:	2d01      	cmp	r5, #1
 8005f46:	d116      	bne.n	8005f76 <main+0x5e2>
 8005f48:	4b1b      	ldr	r3, [pc, #108]	; (8005fb8 <main+0x624>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005f50:	dd11      	ble.n	8005f76 <main+0x5e2>
		  Turn_On_Lights();
 8005f52:	f7fd fde7 	bl	8003b24 <Turn_On_Lights>
		  HAL_Delay(1000);
 8005f56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005f5a:	f7fa fa09 	bl	8000370 <HAL_Delay>
		  Turn_Off_Lights();
 8005f5e:	f7fd fe1b 	bl	8003b98 <Turn_Off_Lights>
		  Speed_Run("bs");
 8005f62:	4816      	ldr	r0, [pc, #88]	; (8005fbc <main+0x628>)
 8005f64:	f7ff fa0c 	bl	8005380 <Speed_Run>
		  dem2 = FALSE;
 8005f68:	2300      	movs	r3, #0
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, ON);
 8005f6a:	462a      	mov	r2, r5
 8005f6c:	2102      	movs	r1, #2
 8005f6e:	4811      	ldr	r0, [pc, #68]	; (8005fb4 <main+0x620>)
	  if (dem3 == TRUE && dif_l > 2000) { //debug options
		  Turn_On_Lights();
		  HAL_Delay(1000);
		  Turn_Off_Lights();
		  Speed_Run("bs");
		  dem2 = FALSE;
 8005f70:	6023      	str	r3, [r4, #0]
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, ON);
 8005f72:	f7fb f935 	bl	80011e0 <HAL_GPIO_WritePin>
	  }

	  if (dem3 == TRUE && dif_r > 2000) { //debug options
 8005f76:	683d      	ldr	r5, [r7, #0]
 8005f78:	2d01      	cmp	r5, #1
 8005f7a:	d116      	bne.n	8005faa <main+0x616>
 8005f7c:	4b10      	ldr	r3, [pc, #64]	; (8005fc0 <main+0x62c>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005f84:	dd11      	ble.n	8005faa <main+0x616>
		  Turn_On_Lights();
 8005f86:	f7fd fdcd 	bl	8003b24 <Turn_On_Lights>
		  HAL_Delay(1000);
 8005f8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005f8e:	f7fa f9ef 	bl	8000370 <HAL_Delay>
		  Turn_Off_Lights();
 8005f92:	f7fd fe01 	bl	8003b98 <Turn_Off_Lights>
		  Speed_Run("cs");
 8005f96:	480b      	ldr	r0, [pc, #44]	; (8005fc4 <main+0x630>)
 8005f98:	f7ff f9f2 	bl	8005380 <Speed_Run>
		  dem2 = FALSE;
 8005f9c:	2300      	movs	r3, #0
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, ON);
 8005f9e:	462a      	mov	r2, r5
 8005fa0:	2102      	movs	r1, #2
 8005fa2:	4804      	ldr	r0, [pc, #16]	; (8005fb4 <main+0x620>)
	  if (dem3 == TRUE && dif_r > 2000) { //debug options
		  Turn_On_Lights();
		  HAL_Delay(1000);
		  Turn_Off_Lights();
		  Speed_Run("cs");
		  dem2 = FALSE;
 8005fa4:	6023      	str	r3, [r4, #0]
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, ON);
 8005fa6:	f7fb f91b 	bl	80011e0 <HAL_GPIO_WritePin>
	  }

  HAL_Delay(300); //ONLY CHECK FOR FINGER every half second. If you check to quickly it'll never start
 8005faa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005fae:	f7fa f9df 	bl	8000370 <HAL_Delay>
  } //ready loop
 8005fb2:	e6e4      	b.n	8005d7e <main+0x3ea>
 8005fb4:	40021000 	.word	0x40021000
 8005fb8:	200000a8 	.word	0x200000a8
 8005fbc:	0800717c 	.word	0x0800717c
 8005fc0:	200000b0 	.word	0x200000b0
 8005fc4:	0800717f 	.word	0x0800717f

08005fc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005fc8:	b508      	push	{r3, lr}

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005fca:	2003      	movs	r0, #3
 8005fcc:	f7fa fc18 	bl	8000800 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f06f 000b 	mvn.w	r0, #11
 8005fd6:	4611      	mov	r1, r2
 8005fd8:	f7fa fc24 	bl	8000824 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f06f 000a 	mvn.w	r0, #10
 8005fe2:	4611      	mov	r1, r2
 8005fe4:	f7fa fc1e 	bl	8000824 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f06f 0009 	mvn.w	r0, #9
 8005fee:	4611      	mov	r1, r2
 8005ff0:	f7fa fc18 	bl	8000824 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f06f 0004 	mvn.w	r0, #4
 8005ffa:	4611      	mov	r1, r2
 8005ffc:	f7fa fc12 	bl	8000824 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8006000:	2200      	movs	r2, #0
 8006002:	f06f 0003 	mvn.w	r0, #3
 8006006:	4611      	mov	r1, r2
 8006008:	f7fa fc0c 	bl	8000824 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800600c:	2200      	movs	r2, #0
 800600e:	f06f 0001 	mvn.w	r0, #1
 8006012:	4611      	mov	r1, r2
 8006014:	f7fa fc06 	bl	8000824 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8006018:	2200      	movs	r2, #0
 800601a:	f04f 30ff 	mov.w	r0, #4294967295
 800601e:	4611      	mov	r1, r2

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006020:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8006024:	f7fa bbfe 	b.w	8000824 <HAL_NVIC_SetPriority>

08006028 <HAL_ADC_MspInit>:
{

  GPIO_InitTypeDef GPIO_InitStruct;
  static DMA_HandleTypeDef  hdma_adc;

  if(hadc->Instance==ADC1)
 8006028:	6802      	ldr	r2, [r0, #0]
 800602a:	4b2a      	ldr	r3, [pc, #168]	; (80060d4 <HAL_ADC_MspInit+0xac>)
 800602c:	429a      	cmp	r2, r3

  /* USER CODE END MspInit 1 */
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800602e:	b570      	push	{r4, r5, r6, lr}
 8006030:	4606      	mov	r6, r0
 8006032:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;
  static DMA_HandleTypeDef  hdma_adc;

  if(hadc->Instance==ADC1)
 8006034:	d14b      	bne.n	80060ce <HAL_ADC_MspInit+0xa6>
  {

    __HAL_RCC_ADC1_CLK_ENABLE();
 8006036:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800603a:	2500      	movs	r5, #0
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800603c:	2403      	movs	r4, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800603e:	a903      	add	r1, sp, #12
  static DMA_HandleTypeDef  hdma_adc;

  if(hadc->Instance==ADC1)
  {

    __HAL_RCC_ADC1_CLK_ENABLE();
 8006040:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006042:	4825      	ldr	r0, [pc, #148]	; (80060d8 <HAL_ADC_MspInit+0xb0>)
  static DMA_HandleTypeDef  hdma_adc;

  if(hadc->Instance==ADC1)
  {

    __HAL_RCC_ADC1_CLK_ENABLE();
 8006044:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006048:	645a      	str	r2, [r3, #68]	; 0x44
 800604a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800604c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8006050:	9201      	str	r2, [sp, #4]
 8006052:	9a01      	ldr	r2, [sp, #4]

    /* Enable DMA2 clock */
    __HAL_RCC_DMA2_CLK_ENABLE();
 8006054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006056:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800605a:	631a      	str	r2, [r3, #48]	; 0x30
 800605c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800605e:	9404      	str	r4, [sp, #16]
  {

    __HAL_RCC_ADC1_CLK_ENABLE();

    /* Enable DMA2 clock */
    __HAL_RCC_DMA2_CLK_ENABLE();
 8006060:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006064:	9505      	str	r5, [sp, #20]
  {

    __HAL_RCC_ADC1_CLK_ENABLE();

    /* Enable DMA2 clock */
    __HAL_RCC_DMA2_CLK_ENABLE();
 8006066:	9302      	str	r3, [sp, #8]
 8006068:	9b02      	ldr	r3, [sp, #8]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
 800606a:	2330      	movs	r3, #48	; 0x30
 800606c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800606e:	f7fa ffcb 	bl	8001008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RF_REC_Pin|R_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006072:	a903      	add	r1, sp, #12
 8006074:	4819      	ldr	r0, [pc, #100]	; (80060dc <HAL_ADC_MspInit+0xb4>)
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = RF_REC_Pin|R_REC_Pin;
 8006076:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006078:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800607a:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800607c:	f7fa ffc4 	bl	8001008 <HAL_GPIO_Init>

    hdma_adc.Instance = DMA2_Stream0;
 8006080:	4c17      	ldr	r4, [pc, #92]	; (80060e0 <HAL_ADC_MspInit+0xb8>)
 8006082:	4b18      	ldr	r3, [pc, #96]	; (80060e4 <HAL_ADC_MspInit+0xbc>)
    hdma_adc.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    hdma_adc.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
    hdma_adc.Init.MemBurst = DMA_MBURST_SINGLE;
    hdma_adc.Init.PeriphBurst = DMA_PBURST_SINGLE;

    HAL_DMA_Init(&hdma_adc);
 8006084:	4620      	mov	r0, r4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    hdma_adc.Instance = DMA2_Stream0;
    hdma_adc.Init.Channel  = DMA_CHANNEL_0;
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006086:	60a5      	str	r5, [r4, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8006088:	60e5      	str	r5, [r4, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc.Init.Mode = DMA_CIRCULAR;
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_adc.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800608a:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_adc.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
    hdma_adc.Init.MemBurst = DMA_MBURST_SINGLE;
 800608c:	62e5      	str	r5, [r4, #44]	; 0x2c
    hdma_adc.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800608e:	6325      	str	r5, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    hdma_adc.Instance = DMA2_Stream0;
    hdma_adc.Init.Channel  = DMA_CHANNEL_0;
 8006090:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8006094:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006098:	6123      	str	r3, [r4, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800609a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800609e:	6163      	str	r3, [r4, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80060a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80060a4:	61a3      	str	r3, [r4, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80060a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060aa:	61e3      	str	r3, [r4, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 80060ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060b0:	6223      	str	r3, [r4, #32]
    hdma_adc.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    hdma_adc.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80060b2:	2301      	movs	r3, #1
 80060b4:	62a3      	str	r3, [r4, #40]	; 0x28
    hdma_adc.Init.MemBurst = DMA_MBURST_SINGLE;
    hdma_adc.Init.PeriphBurst = DMA_PBURST_SINGLE;

    HAL_DMA_Init(&hdma_adc);
 80060b6:	f7fa fc45 	bl	8000944 <HAL_DMA_Init>

      /* Associate the initialized DMA handle to the ADC handle */
    __HAL_LINKDMA(hadc, DMA_Handle, hdma_adc);
 80060ba:	63b4      	str	r4, [r6, #56]	; 0x38

      /*##-4- Configure the NVIC for DMA #########################################*/
      /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80060bc:	2038      	movs	r0, #56	; 0x38
 80060be:	462a      	mov	r2, r5
 80060c0:	4629      	mov	r1, r5
    hdma_adc.Init.PeriphBurst = DMA_PBURST_SINGLE;

    HAL_DMA_Init(&hdma_adc);

      /* Associate the initialized DMA handle to the ADC handle */
    __HAL_LINKDMA(hadc, DMA_Handle, hdma_adc);
 80060c2:	63a6      	str	r6, [r4, #56]	; 0x38

      /*##-4- Configure the NVIC for DMA #########################################*/
      /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80060c4:	f7fa fbae 	bl	8000824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80060c8:	2038      	movs	r0, #56	; 0x38
 80060ca:	f7fa fbe3 	bl	8000894 <HAL_NVIC_EnableIRQ>

  }

}
 80060ce:	b008      	add	sp, #32
 80060d0:	bd70      	pop	{r4, r5, r6, pc}
 80060d2:	bf00      	nop
 80060d4:	40012000 	.word	0x40012000
 80060d8:	40020800 	.word	0x40020800
 80060dc:	40020400 	.word	0x40020400
 80060e0:	2000135c 	.word	0x2000135c
 80060e4:	40026410 	.word	0x40026410

080060e8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 80060e8:	6803      	ldr	r3, [r0, #0]
 80060ea:	4a29      	ldr	r2, [pc, #164]	; (8006190 <HAL_TIM_Encoder_MspInit+0xa8>)
 80060ec:	4293      	cmp	r3, r2
  }

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim)
{
 80060ee:	b570      	push	{r4, r5, r6, lr}
 80060f0:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 80060f2:	d11e      	bne.n	8006132 <HAL_TIM_Encoder_MspInit+0x4a>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80060f4:	4b27      	ldr	r3, [pc, #156]	; (8006194 <HAL_TIM_Encoder_MspInit+0xac>)
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = LENC_CHB_Pin|LENC_CHA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80060f6:	2401      	movs	r4, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80060f8:	a903      	add	r1, sp, #12
 80060fa:	4827      	ldr	r0, [pc, #156]	; (8006198 <HAL_TIM_Encoder_MspInit+0xb0>)
  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80060fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060fe:	f042 0201 	orr.w	r2, r2, #1
 8006102:	645a      	str	r2, [r3, #68]	; 0x44
 8006104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = LENC_CHB_Pin|LENC_CHA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006106:	9405      	str	r4, [sp, #20]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006108:	f003 0301 	and.w	r3, r3, #1
    */
    GPIO_InitStruct.Pin = LENC_CHB_Pin|LENC_CHA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800610c:	9407      	str	r4, [sp, #28]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800610e:	9301      	str	r3, [sp, #4]
 8006110:	9b01      	ldr	r3, [sp, #4]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = LENC_CHB_Pin|LENC_CHA_Pin;
 8006112:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006116:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006118:	2302      	movs	r3, #2
 800611a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800611c:	2303      	movs	r3, #3
 800611e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006120:	f7fa ff72 	bl	8001008 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 1);
 8006124:	201b      	movs	r0, #27
 8006126:	4622      	mov	r2, r4
 8006128:	2100      	movs	r1, #0
 800612a:	f7fa fb7b 	bl	8000824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800612e:	201b      	movs	r0, #27
 8006130:	e02a      	b.n	8006188 <HAL_TIM_Encoder_MspInit+0xa0>


  }
  else if(htim->Instance==TIM4)
 8006132:	4a1a      	ldr	r2, [pc, #104]	; (800619c <HAL_TIM_Encoder_MspInit+0xb4>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d129      	bne.n	800618c <HAL_TIM_Encoder_MspInit+0xa4>
  {
      __HAL_RCC_TIM4_CLK_ENABLE();
 8006138:	4b16      	ldr	r3, [pc, #88]	; (8006194 <HAL_TIM_Encoder_MspInit+0xac>)
      /**TIM4 GPIO Configuration
      PB6     ------> TIM4_CH1
      PB7     ------> TIM4_CH2
      */
      GPIO_InitStruct.Pin = RENCA_Pin;
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800613a:	2402      	movs	r4, #2
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 800613c:	2601      	movs	r6, #1
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800613e:	2503      	movs	r5, #3


  }
  else if(htim->Instance==TIM4)
  {
      __HAL_RCC_TIM4_CLK_ENABLE();
 8006140:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      GPIO_InitStruct.Pin = RENCA_Pin;
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
      HAL_GPIO_Init(RENCA_GPIO_Port, &GPIO_InitStruct);
 8006142:	a903      	add	r1, sp, #12
 8006144:	4816      	ldr	r0, [pc, #88]	; (80061a0 <HAL_TIM_Encoder_MspInit+0xb8>)


  }
  else if(htim->Instance==TIM4)
  {
      __HAL_RCC_TIM4_CLK_ENABLE();
 8006146:	f042 0204 	orr.w	r2, r2, #4
 800614a:	641a      	str	r2, [r3, #64]	; 0x40
 800614c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      /**TIM4 GPIO Configuration
      PB6     ------> TIM4_CH1
      PB7     ------> TIM4_CH2
      */
      GPIO_InitStruct.Pin = RENCA_Pin;
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800614e:	9404      	str	r4, [sp, #16]


  }
  else if(htim->Instance==TIM4)
  {
      __HAL_RCC_TIM4_CLK_ENABLE();
 8006150:	f003 0304 	and.w	r3, r3, #4
      PB6     ------> TIM4_CH1
      PB7     ------> TIM4_CH2
      */
      GPIO_InitStruct.Pin = RENCA_Pin;
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006154:	9605      	str	r6, [sp, #20]
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8006156:	9506      	str	r5, [sp, #24]


  }
  else if(htim->Instance==TIM4)
  {
      __HAL_RCC_TIM4_CLK_ENABLE();
 8006158:	9302      	str	r3, [sp, #8]
 800615a:	9b02      	ldr	r3, [sp, #8]

      /**TIM4 GPIO Configuration
      PB6     ------> TIM4_CH1
      PB7     ------> TIM4_CH2
      */
      GPIO_InitStruct.Pin = RENCA_Pin;
 800615c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006160:	9407      	str	r4, [sp, #28]

      /**TIM4 GPIO Configuration
      PB6     ------> TIM4_CH1
      PB7     ------> TIM4_CH2
      */
      GPIO_InitStruct.Pin = RENCA_Pin;
 8006162:	9303      	str	r3, [sp, #12]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
      HAL_GPIO_Init(RENCA_GPIO_Port, &GPIO_InitStruct);
 8006164:	f7fa ff50 	bl	8001008 <HAL_GPIO_Init>


      GPIO_InitStruct.Pin = RENCB_Pin;
 8006168:	2380      	movs	r3, #128	; 0x80
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
      HAL_GPIO_Init(RENCB_GPIO_Port, &GPIO_InitStruct);
 800616a:	a903      	add	r1, sp, #12
 800616c:	480d      	ldr	r0, [pc, #52]	; (80061a4 <HAL_TIM_Encoder_MspInit+0xbc>)
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
      HAL_GPIO_Init(RENCA_GPIO_Port, &GPIO_InitStruct);


      GPIO_InitStruct.Pin = RENCB_Pin;
 800616e:	9303      	str	r3, [sp, #12]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006170:	9404      	str	r4, [sp, #16]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006172:	9605      	str	r6, [sp, #20]
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8006174:	9506      	str	r5, [sp, #24]
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006176:	9407      	str	r4, [sp, #28]
      HAL_GPIO_Init(RENCB_GPIO_Port, &GPIO_InitStruct);
 8006178:	f7fa ff46 	bl	8001008 <HAL_GPIO_Init>


      HAL_NVIC_SetPriority(TIM4_IRQn, 0, 2);
 800617c:	201e      	movs	r0, #30
 800617e:	4622      	mov	r2, r4
 8006180:	2100      	movs	r1, #0
 8006182:	f7fa fb4f 	bl	8000824 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006186:	201e      	movs	r0, #30
 8006188:	f7fa fb84 	bl	8000894 <HAL_NVIC_EnableIRQ>
}
}
 800618c:	b008      	add	sp, #32
 800618e:	bd70      	pop	{r4, r5, r6, pc}
 8006190:	40010000 	.word	0x40010000
 8006194:	40023800 	.word	0x40023800
 8006198:	40021000 	.word	0x40021000
 800619c:	40000800 	.word	0x40000800
 80061a0:	40020c00 	.word	0x40020c00
 80061a4:	40020400 	.word	0x40020400

080061a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM5)
 80061a8:	6802      	ldr	r2, [r0, #0]
      HAL_NVIC_EnableIRQ(TIM4_IRQn);
}
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80061aa:	b082      	sub	sp, #8

  if(htim_base->Instance==TIM5)
 80061ac:	4b07      	ldr	r3, [pc, #28]	; (80061cc <HAL_TIM_Base_MspInit+0x24>)
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d10a      	bne.n	80061c8 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80061b2:	f503 330b 	add.w	r3, r3, #142336	; 0x22c00
 80061b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061b8:	f042 0208 	orr.w	r2, r2, #8
 80061bc:	641a      	str	r2, [r3, #64]	; 0x40
 80061be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c0:	f003 0308 	and.w	r3, r3, #8
 80061c4:	9301      	str	r3, [sp, #4]
 80061c6:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80061c8:	b002      	add	sp, #8
 80061ca:	4770      	bx	lr
 80061cc:	40000c00 	.word	0x40000c00

080061d0 <HAL_TIM_PWM_MspInit>:
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM2)
 80061d0:	6803      	ldr	r3, [r0, #0]
  /* USER CODE END TIM5_MspInit 1 */
  }

}
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80061d2:	b084      	sub	sp, #16

  if(htim_pwm->Instance==TIM2)
 80061d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061d8:	d10b      	bne.n	80061f2 <HAL_TIM_PWM_MspInit+0x22>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80061da:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80061de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061e0:	f042 0201 	orr.w	r2, r2, #1
 80061e4:	641a      	str	r2, [r3, #64]	; 0x40
 80061e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	9301      	str	r3, [sp, #4]
 80061ee:	9b01      	ldr	r3, [sp, #4]
 80061f0:	e01a      	b.n	8006228 <HAL_TIM_PWM_MspInit+0x58>

  }
  else if(htim_pwm->Instance==TIM3)
 80061f2:	4a0e      	ldr	r2, [pc, #56]	; (800622c <HAL_TIM_PWM_MspInit+0x5c>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d10a      	bne.n	800620e <HAL_TIM_PWM_MspInit+0x3e>
    {

      /* Peripheral clock enable */
      __HAL_RCC_TIM3_CLK_ENABLE();
 80061f8:	4b0d      	ldr	r3, [pc, #52]	; (8006230 <HAL_TIM_PWM_MspInit+0x60>)
 80061fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061fc:	f042 0202 	orr.w	r2, r2, #2
 8006200:	641a      	str	r2, [r3, #64]	; 0x40
 8006202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006204:	f003 0302 	and.w	r3, r3, #2
 8006208:	9302      	str	r3, [sp, #8]
 800620a:	9b02      	ldr	r3, [sp, #8]
 800620c:	e00c      	b.n	8006228 <HAL_TIM_PWM_MspInit+0x58>

    }

  else if(htim_pwm->Instance==TIM9)
 800620e:	4a09      	ldr	r2, [pc, #36]	; (8006234 <HAL_TIM_PWM_MspInit+0x64>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d109      	bne.n	8006228 <HAL_TIM_PWM_MspInit+0x58>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8006214:	4b06      	ldr	r3, [pc, #24]	; (8006230 <HAL_TIM_PWM_MspInit+0x60>)
 8006216:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006218:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800621c:	645a      	str	r2, [r3, #68]	; 0x44
 800621e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006224:	9303      	str	r3, [sp, #12]
 8006226:	9b03      	ldr	r3, [sp, #12]

  }

}
 8006228:	b004      	add	sp, #16
 800622a:	4770      	bx	lr
 800622c:	40000400 	.word	0x40000400
 8006230:	40023800 	.word	0x40023800
 8006234:	40014000 	.word	0x40014000

08006238 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM2)
 8006238:	6803      	ldr	r3, [r0, #0]
 800623a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  }

}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800623e:	b530      	push	{r4, r5, lr}
 8006240:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM2)
 8006242:	d10b      	bne.n	800625c <HAL_TIM_MspPostInit+0x24>

    /**TIM2 GPIO Configuration    
    PA0/WKUP     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = RPWM_Pin|LPWM_Pin;
 8006244:	2305      	movs	r3, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006246:	a901      	add	r1, sp, #4
 8006248:	481a      	ldr	r0, [pc, #104]	; (80062b4 <HAL_TIM_MspPostInit+0x7c>)

    /**TIM2 GPIO Configuration    
    PA0/WKUP     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = RPWM_Pin|LPWM_Pin;
 800624a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800624c:	2302      	movs	r3, #2
 800624e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006250:	2300      	movs	r3, #0
 8006252:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8006254:	2301      	movs	r3, #1
 8006256:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006258:	9305      	str	r3, [sp, #20]
 800625a:	e026      	b.n	80062aa <HAL_TIM_MspPostInit+0x72>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  }

  else if(htim->Instance==TIM3)
 800625c:	4a16      	ldr	r2, [pc, #88]	; (80062b8 <HAL_TIM_MspPostInit+0x80>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d115      	bne.n	800628e <HAL_TIM_MspPostInit+0x56>
      PC9     ------> TIM3_CH4
      PB4     ------> TIM3_CH1
      PB5     ------> TIM3_CH2
      */
      GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006262:	2402      	movs	r4, #2
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006264:	2500      	movs	r5, #0
      PC8     ------> TIM3_CH3
      PC9     ------> TIM3_CH4
      PB4     ------> TIM3_CH1
      PB5     ------> TIM3_CH2
      */
      GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006266:	f44f 7340 	mov.w	r3, #768	; 0x300
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800626a:	a901      	add	r1, sp, #4
 800626c:	4813      	ldr	r0, [pc, #76]	; (80062bc <HAL_TIM_MspPostInit+0x84>)
      PC8     ------> TIM3_CH3
      PC9     ------> TIM3_CH4
      PB4     ------> TIM3_CH1
      PB5     ------> TIM3_CH2
      */
      GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800626e:	9301      	str	r3, [sp, #4]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006270:	9402      	str	r4, [sp, #8]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006272:	9503      	str	r5, [sp, #12]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006274:	9504      	str	r5, [sp, #16]
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006276:	9405      	str	r4, [sp, #20]
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006278:	f7fa fec6 	bl	8001008 <HAL_GPIO_Init>

      GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800627c:	2330      	movs	r3, #48	; 0x30
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800627e:	9402      	str	r4, [sp, #8]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006280:	9503      	str	r5, [sp, #12]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006282:	a901      	add	r1, sp, #4
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

      GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006284:	9301      	str	r3, [sp, #4]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006286:	9504      	str	r5, [sp, #16]
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006288:	9405      	str	r4, [sp, #20]
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800628a:	480d      	ldr	r0, [pc, #52]	; (80062c0 <HAL_TIM_MspPostInit+0x88>)
 800628c:	e00d      	b.n	80062aa <HAL_TIM_MspPostInit+0x72>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
    }

  else if(htim->Instance==TIM9)
 800628e:	4a0d      	ldr	r2, [pc, #52]	; (80062c4 <HAL_TIM_MspPostInit+0x8c>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d10c      	bne.n	80062ae <HAL_TIM_MspPostInit+0x76>
  {
      /**TIM9 GPIO Configuration
      PE5     ------> TIM9_CH1
      */
      GPIO_InitStruct.Pin = BUZZER_Pin;
 8006294:	2320      	movs	r3, #32
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
      HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8006296:	a901      	add	r1, sp, #4
 8006298:	480b      	ldr	r0, [pc, #44]	; (80062c8 <HAL_TIM_MspPostInit+0x90>)
  else if(htim->Instance==TIM9)
  {
      /**TIM9 GPIO Configuration
      PE5     ------> TIM9_CH1
      */
      GPIO_InitStruct.Pin = BUZZER_Pin;
 800629a:	9301      	str	r3, [sp, #4]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800629c:	2302      	movs	r3, #2
 800629e:	9302      	str	r3, [sp, #8]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062a0:	2300      	movs	r3, #0
 80062a2:	9303      	str	r3, [sp, #12]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062a4:	9304      	str	r3, [sp, #16]
      GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80062a6:	2303      	movs	r3, #3
 80062a8:	9305      	str	r3, [sp, #20]
      HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80062aa:	f7fa fead 	bl	8001008 <HAL_GPIO_Init>

  }

}
 80062ae:	b007      	add	sp, #28
 80062b0:	bd30      	pop	{r4, r5, pc}
 80062b2:	bf00      	nop
 80062b4:	40020000 	.word	0x40020000
 80062b8:	40000400 	.word	0x40000400
 80062bc:	40020800 	.word	0x40020800
 80062c0:	40020400 	.word	0x40020400
 80062c4:	40014000 	.word	0x40014000
 80062c8:	40021000 	.word	0x40021000

080062cc <HAL_UART_MspInit>:
  /* USER CODE END TIM5_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80062cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80062ce:	6802      	ldr	r2, [r0, #0]
 80062d0:	4b0f      	ldr	r3, [pc, #60]	; (8006310 <HAL_UART_MspInit+0x44>)
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d119      	bne.n	800630a <HAL_UART_MspInit+0x3e>
  {

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80062d6:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062da:	a901      	add	r1, sp, #4
 80062dc:	480d      	ldr	r0, [pc, #52]	; (8006314 <HAL_UART_MspInit+0x48>)
  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
  {

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80062de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062e0:	f042 0210 	orr.w	r2, r2, #16
 80062e4:	645a      	str	r2, [r3, #68]	; 0x44
 80062e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e8:	f003 0310 	and.w	r3, r3, #16
 80062ec:	9300      	str	r3, [sp, #0]
 80062ee:	9b00      	ldr	r3, [sp, #0]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80062f0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80062f4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062f6:	2302      	movs	r3, #2
 80062f8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80062fa:	2301      	movs	r3, #1
 80062fc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062fe:	2303      	movs	r3, #3
 8006300:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006302:	2307      	movs	r3, #7
 8006304:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006306:	f7fa fe7f 	bl	8001008 <HAL_GPIO_Init>


  }

}
 800630a:	b007      	add	sp, #28
 800630c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006310:	40011000 	.word	0x40011000
 8006314:	40020000 	.word	0x40020000

08006318 <NMI_Handler>:
 8006318:	4770      	bx	lr

0800631a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800631a:	e7fe      	b.n	800631a <HardFault_Handler>

0800631c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800631c:	e7fe      	b.n	800631c <MemManage_Handler>

0800631e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800631e:	e7fe      	b.n	800631e <BusFault_Handler>

08006320 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8006320:	e7fe      	b.n	8006320 <UsageFault_Handler>

08006322 <SVC_Handler>:
 8006322:	4770      	bx	lr

08006324 <DebugMon_Handler>:
 8006324:	4770      	bx	lr

08006326 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8006326:	4770      	bx	lr

08006328 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8006328:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800632a:	f7fa f813 	bl	8000354 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800632e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 8006332:	f7fa baec 	b.w	800090e <HAL_SYSTICK_IRQHandler>

08006336 <EXTI15_10_IRQHandler>:
  /* USER CODE END SysTick_IRQn 1 */
}

void EXTI15_10_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8006336:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800633a:	f7fa bf55 	b.w	80011e8 <HAL_GPIO_EXTI_IRQHandler>

0800633e <EXTI9_5_IRQHandler>:
//#if MOUSE_REV == 69
	//HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
//#else

//#endif
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800633e:	2040      	movs	r0, #64	; 0x40
 8006340:	f7fa bf52 	b.w	80011e8 <HAL_GPIO_EXTI_IRQHandler>

08006344 <DMA2_Stream0_IRQHandler>:

}

void DMA2_Stream0_IRQHandler(void)
{
  HAL_DMA_IRQHandler(hadc1.DMA_Handle);
 8006344:	4b01      	ldr	r3, [pc, #4]	; (800634c <DMA2_Stream0_IRQHandler+0x8>)
 8006346:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006348:	f7fa bc06 	b.w	8000b58 <HAL_DMA_IRQHandler>
 800634c:	20001f1c 	.word	0x20001f1c

08006350 <SPI1_IRQHandler>:
}

void SPI1_IRQHandler(void)
{
  HAL_SPI_IRQHandler(&hspi1);
 8006350:	4801      	ldr	r0, [pc, #4]	; (8006358 <SPI1_IRQHandler+0x8>)
 8006352:	f7fb bded 	b.w	8001f30 <HAL_SPI_IRQHandler>
 8006356:	bf00      	nop
 8006358:	200029e8 	.word	0x200029e8

0800635c <TIM1_CC_IRQHandler>:
}


void TIM1_CC_IRQHandler(void) {

 HAL_TIM_IRQHandler(&htim1);
 800635c:	4801      	ldr	r0, [pc, #4]	; (8006364 <TIM1_CC_IRQHandler+0x8>)
 800635e:	f7fb bee5 	b.w	800212c <HAL_TIM_IRQHandler>
 8006362:	bf00      	nop
 8006364:	20002904 	.word	0x20002904

08006368 <TIM4_IRQHandler>:

}

void TIM4_IRQHandler(void) {

 HAL_TIM_IRQHandler(&htim4);
 8006368:	4801      	ldr	r0, [pc, #4]	; (8006370 <TIM4_IRQHandler+0x8>)
 800636a:	f7fb bedf 	b.w	800212c <HAL_TIM_IRQHandler>
 800636e:	bf00      	nop
 8006370:	20001458 	.word	0x20001458

08006374 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006374:	490f      	ldr	r1, [pc, #60]	; (80063b4 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006376:	2000      	movs	r0, #0
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006378:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800637c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006384:	4b0c      	ldr	r3, [pc, #48]	; (80063b8 <SystemInit+0x44>)
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	f042 0201 	orr.w	r2, r2, #1
 800638c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800638e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8006396:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800639a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800639c:	4a07      	ldr	r2, [pc, #28]	; (80063bc <SystemInit+0x48>)
 800639e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80063a6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80063a8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80063aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80063ae:	608b      	str	r3, [r1, #8]
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	e000ed00 	.word	0xe000ed00
 80063b8:	40023800 	.word	0x40023800
 80063bc:	24003010 	.word	0x24003010

080063c0 <__libc_init_array>:
 80063c0:	b570      	push	{r4, r5, r6, lr}
 80063c2:	4b0e      	ldr	r3, [pc, #56]	; (80063fc <__libc_init_array+0x3c>)
 80063c4:	4c0e      	ldr	r4, [pc, #56]	; (8006400 <__libc_init_array+0x40>)
 80063c6:	1ae4      	subs	r4, r4, r3
 80063c8:	10a4      	asrs	r4, r4, #2
 80063ca:	2500      	movs	r5, #0
 80063cc:	461e      	mov	r6, r3
 80063ce:	42a5      	cmp	r5, r4
 80063d0:	d004      	beq.n	80063dc <__libc_init_array+0x1c>
 80063d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063d6:	4798      	blx	r3
 80063d8:	3501      	adds	r5, #1
 80063da:	e7f8      	b.n	80063ce <__libc_init_array+0xe>
 80063dc:	f000 fc4e 	bl	8006c7c <_init>
 80063e0:	4c08      	ldr	r4, [pc, #32]	; (8006404 <__libc_init_array+0x44>)
 80063e2:	4b09      	ldr	r3, [pc, #36]	; (8006408 <__libc_init_array+0x48>)
 80063e4:	1ae4      	subs	r4, r4, r3
 80063e6:	10a4      	asrs	r4, r4, #2
 80063e8:	2500      	movs	r5, #0
 80063ea:	461e      	mov	r6, r3
 80063ec:	42a5      	cmp	r5, r4
 80063ee:	d004      	beq.n	80063fa <__libc_init_array+0x3a>
 80063f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063f4:	4798      	blx	r3
 80063f6:	3501      	adds	r5, #1
 80063f8:	e7f8      	b.n	80063ec <__libc_init_array+0x2c>
 80063fa:	bd70      	pop	{r4, r5, r6, pc}
 80063fc:	080071d0 	.word	0x080071d0
 8006400:	080071d0 	.word	0x080071d0
 8006404:	080071d4 	.word	0x080071d4
 8006408:	080071d0 	.word	0x080071d0

0800640c <siprintf>:
 800640c:	b40e      	push	{r1, r2, r3}
 800640e:	b500      	push	{lr}
 8006410:	b09c      	sub	sp, #112	; 0x70
 8006412:	f44f 7102 	mov.w	r1, #520	; 0x208
 8006416:	ab1d      	add	r3, sp, #116	; 0x74
 8006418:	f8ad 1014 	strh.w	r1, [sp, #20]
 800641c:	9002      	str	r0, [sp, #8]
 800641e:	9006      	str	r0, [sp, #24]
 8006420:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006424:	480a      	ldr	r0, [pc, #40]	; (8006450 <siprintf+0x44>)
 8006426:	9104      	str	r1, [sp, #16]
 8006428:	9107      	str	r1, [sp, #28]
 800642a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800642e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006432:	f8ad 1016 	strh.w	r1, [sp, #22]
 8006436:	6800      	ldr	r0, [r0, #0]
 8006438:	9301      	str	r3, [sp, #4]
 800643a:	a902      	add	r1, sp, #8
 800643c:	f000 f86c 	bl	8006518 <_svfiprintf_r>
 8006440:	9b02      	ldr	r3, [sp, #8]
 8006442:	2200      	movs	r2, #0
 8006444:	701a      	strb	r2, [r3, #0]
 8006446:	b01c      	add	sp, #112	; 0x70
 8006448:	f85d eb04 	ldr.w	lr, [sp], #4
 800644c:	b003      	add	sp, #12
 800644e:	4770      	bx	lr
 8006450:	2000007c 	.word	0x2000007c

08006454 <strcpy>:
 8006454:	4603      	mov	r3, r0
 8006456:	f811 2b01 	ldrb.w	r2, [r1], #1
 800645a:	f803 2b01 	strb.w	r2, [r3], #1
 800645e:	2a00      	cmp	r2, #0
 8006460:	d1f9      	bne.n	8006456 <strcpy+0x2>
 8006462:	4770      	bx	lr

08006464 <__ssputs_r>:
 8006464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006468:	688e      	ldr	r6, [r1, #8]
 800646a:	429e      	cmp	r6, r3
 800646c:	4682      	mov	sl, r0
 800646e:	460c      	mov	r4, r1
 8006470:	4691      	mov	r9, r2
 8006472:	4698      	mov	r8, r3
 8006474:	d83e      	bhi.n	80064f4 <__ssputs_r+0x90>
 8006476:	898a      	ldrh	r2, [r1, #12]
 8006478:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800647c:	d03a      	beq.n	80064f4 <__ssputs_r+0x90>
 800647e:	6825      	ldr	r5, [r4, #0]
 8006480:	6909      	ldr	r1, [r1, #16]
 8006482:	1a6f      	subs	r7, r5, r1
 8006484:	6965      	ldr	r5, [r4, #20]
 8006486:	2302      	movs	r3, #2
 8006488:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800648c:	fb95 f5f3 	sdiv	r5, r5, r3
 8006490:	1c7b      	adds	r3, r7, #1
 8006492:	4443      	add	r3, r8
 8006494:	429d      	cmp	r5, r3
 8006496:	bf38      	it	cc
 8006498:	461d      	movcc	r5, r3
 800649a:	0553      	lsls	r3, r2, #21
 800649c:	d50f      	bpl.n	80064be <__ssputs_r+0x5a>
 800649e:	4629      	mov	r1, r5
 80064a0:	f000 fb3e 	bl	8006b20 <_malloc_r>
 80064a4:	4606      	mov	r6, r0
 80064a6:	b198      	cbz	r0, 80064d0 <__ssputs_r+0x6c>
 80064a8:	463a      	mov	r2, r7
 80064aa:	6921      	ldr	r1, [r4, #16]
 80064ac:	f000 fac4 	bl	8006a38 <memcpy>
 80064b0:	89a3      	ldrh	r3, [r4, #12]
 80064b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80064b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ba:	81a3      	strh	r3, [r4, #12]
 80064bc:	e013      	b.n	80064e6 <__ssputs_r+0x82>
 80064be:	462a      	mov	r2, r5
 80064c0:	f000 fb8c 	bl	8006bdc <_realloc_r>
 80064c4:	4606      	mov	r6, r0
 80064c6:	b970      	cbnz	r0, 80064e6 <__ssputs_r+0x82>
 80064c8:	6921      	ldr	r1, [r4, #16]
 80064ca:	4650      	mov	r0, sl
 80064cc:	f000 fada 	bl	8006a84 <_free_r>
 80064d0:	230c      	movs	r3, #12
 80064d2:	f8ca 3000 	str.w	r3, [sl]
 80064d6:	89a3      	ldrh	r3, [r4, #12]
 80064d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064dc:	81a3      	strh	r3, [r4, #12]
 80064de:	f04f 30ff 	mov.w	r0, #4294967295
 80064e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064e6:	6126      	str	r6, [r4, #16]
 80064e8:	6165      	str	r5, [r4, #20]
 80064ea:	443e      	add	r6, r7
 80064ec:	1bed      	subs	r5, r5, r7
 80064ee:	6026      	str	r6, [r4, #0]
 80064f0:	60a5      	str	r5, [r4, #8]
 80064f2:	4646      	mov	r6, r8
 80064f4:	4546      	cmp	r6, r8
 80064f6:	bf28      	it	cs
 80064f8:	4646      	movcs	r6, r8
 80064fa:	4632      	mov	r2, r6
 80064fc:	4649      	mov	r1, r9
 80064fe:	6820      	ldr	r0, [r4, #0]
 8006500:	f000 faa5 	bl	8006a4e <memmove>
 8006504:	68a3      	ldr	r3, [r4, #8]
 8006506:	1b9b      	subs	r3, r3, r6
 8006508:	60a3      	str	r3, [r4, #8]
 800650a:	6823      	ldr	r3, [r4, #0]
 800650c:	441e      	add	r6, r3
 800650e:	6026      	str	r6, [r4, #0]
 8006510:	2000      	movs	r0, #0
 8006512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08006518 <_svfiprintf_r>:
 8006518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651c:	b09d      	sub	sp, #116	; 0x74
 800651e:	4680      	mov	r8, r0
 8006520:	9303      	str	r3, [sp, #12]
 8006522:	898b      	ldrh	r3, [r1, #12]
 8006524:	061c      	lsls	r4, r3, #24
 8006526:	460d      	mov	r5, r1
 8006528:	4616      	mov	r6, r2
 800652a:	d50d      	bpl.n	8006548 <_svfiprintf_r+0x30>
 800652c:	690b      	ldr	r3, [r1, #16]
 800652e:	b95b      	cbnz	r3, 8006548 <_svfiprintf_r+0x30>
 8006530:	2140      	movs	r1, #64	; 0x40
 8006532:	f000 faf5 	bl	8006b20 <_malloc_r>
 8006536:	6028      	str	r0, [r5, #0]
 8006538:	6128      	str	r0, [r5, #16]
 800653a:	b918      	cbnz	r0, 8006544 <_svfiprintf_r+0x2c>
 800653c:	230c      	movs	r3, #12
 800653e:	f8c8 3000 	str.w	r3, [r8]
 8006542:	e0cd      	b.n	80066e0 <_svfiprintf_r+0x1c8>
 8006544:	2340      	movs	r3, #64	; 0x40
 8006546:	616b      	str	r3, [r5, #20]
 8006548:	2300      	movs	r3, #0
 800654a:	9309      	str	r3, [sp, #36]	; 0x24
 800654c:	2320      	movs	r3, #32
 800654e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006552:	f8df b19c 	ldr.w	fp, [pc, #412]	; 80066f0 <_svfiprintf_r+0x1d8>
 8006556:	2330      	movs	r3, #48	; 0x30
 8006558:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800655c:	4637      	mov	r7, r6
 800655e:	463c      	mov	r4, r7
 8006560:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006564:	b91b      	cbnz	r3, 800656e <_svfiprintf_r+0x56>
 8006566:	ebb7 0906 	subs.w	r9, r7, r6
 800656a:	d010      	beq.n	800658e <_svfiprintf_r+0x76>
 800656c:	e003      	b.n	8006576 <_svfiprintf_r+0x5e>
 800656e:	2b25      	cmp	r3, #37	; 0x25
 8006570:	d0f9      	beq.n	8006566 <_svfiprintf_r+0x4e>
 8006572:	4627      	mov	r7, r4
 8006574:	e7f3      	b.n	800655e <_svfiprintf_r+0x46>
 8006576:	464b      	mov	r3, r9
 8006578:	4632      	mov	r2, r6
 800657a:	4629      	mov	r1, r5
 800657c:	4640      	mov	r0, r8
 800657e:	f7ff ff71 	bl	8006464 <__ssputs_r>
 8006582:	3001      	adds	r0, #1
 8006584:	f000 80a7 	beq.w	80066d6 <_svfiprintf_r+0x1be>
 8006588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800658a:	444b      	add	r3, r9
 800658c:	9309      	str	r3, [sp, #36]	; 0x24
 800658e:	783b      	ldrb	r3, [r7, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	f000 80a0 	beq.w	80066d6 <_svfiprintf_r+0x1be>
 8006596:	2300      	movs	r3, #0
 8006598:	f04f 32ff 	mov.w	r2, #4294967295
 800659c:	9304      	str	r3, [sp, #16]
 800659e:	9307      	str	r3, [sp, #28]
 80065a0:	9205      	str	r2, [sp, #20]
 80065a2:	9306      	str	r3, [sp, #24]
 80065a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065a8:	931a      	str	r3, [sp, #104]	; 0x68
 80065aa:	2601      	movs	r6, #1
 80065ac:	2205      	movs	r2, #5
 80065ae:	7821      	ldrb	r1, [r4, #0]
 80065b0:	484e      	ldr	r0, [pc, #312]	; (80066ec <_svfiprintf_r+0x1d4>)
 80065b2:	f7f9 fe35 	bl	8000220 <memchr>
 80065b6:	1c67      	adds	r7, r4, #1
 80065b8:	9b04      	ldr	r3, [sp, #16]
 80065ba:	b138      	cbz	r0, 80065cc <_svfiprintf_r+0xb4>
 80065bc:	4a4b      	ldr	r2, [pc, #300]	; (80066ec <_svfiprintf_r+0x1d4>)
 80065be:	1a80      	subs	r0, r0, r2
 80065c0:	fa06 f000 	lsl.w	r0, r6, r0
 80065c4:	4318      	orrs	r0, r3
 80065c6:	9004      	str	r0, [sp, #16]
 80065c8:	463c      	mov	r4, r7
 80065ca:	e7ef      	b.n	80065ac <_svfiprintf_r+0x94>
 80065cc:	06d9      	lsls	r1, r3, #27
 80065ce:	bf44      	itt	mi
 80065d0:	2220      	movmi	r2, #32
 80065d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80065d6:	071a      	lsls	r2, r3, #28
 80065d8:	bf44      	itt	mi
 80065da:	222b      	movmi	r2, #43	; 0x2b
 80065dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80065e0:	7822      	ldrb	r2, [r4, #0]
 80065e2:	2a2a      	cmp	r2, #42	; 0x2a
 80065e4:	d003      	beq.n	80065ee <_svfiprintf_r+0xd6>
 80065e6:	9a07      	ldr	r2, [sp, #28]
 80065e8:	2100      	movs	r1, #0
 80065ea:	200a      	movs	r0, #10
 80065ec:	e00b      	b.n	8006606 <_svfiprintf_r+0xee>
 80065ee:	9a03      	ldr	r2, [sp, #12]
 80065f0:	1d11      	adds	r1, r2, #4
 80065f2:	6812      	ldr	r2, [r2, #0]
 80065f4:	9103      	str	r1, [sp, #12]
 80065f6:	2a00      	cmp	r2, #0
 80065f8:	da10      	bge.n	800661c <_svfiprintf_r+0x104>
 80065fa:	4252      	negs	r2, r2
 80065fc:	f043 0002 	orr.w	r0, r3, #2
 8006600:	9207      	str	r2, [sp, #28]
 8006602:	9004      	str	r0, [sp, #16]
 8006604:	e00b      	b.n	800661e <_svfiprintf_r+0x106>
 8006606:	4627      	mov	r7, r4
 8006608:	3401      	adds	r4, #1
 800660a:	783b      	ldrb	r3, [r7, #0]
 800660c:	3b30      	subs	r3, #48	; 0x30
 800660e:	2b09      	cmp	r3, #9
 8006610:	d803      	bhi.n	800661a <_svfiprintf_r+0x102>
 8006612:	fb00 3202 	mla	r2, r0, r2, r3
 8006616:	2101      	movs	r1, #1
 8006618:	e7f5      	b.n	8006606 <_svfiprintf_r+0xee>
 800661a:	b101      	cbz	r1, 800661e <_svfiprintf_r+0x106>
 800661c:	9207      	str	r2, [sp, #28]
 800661e:	783b      	ldrb	r3, [r7, #0]
 8006620:	2b2e      	cmp	r3, #46	; 0x2e
 8006622:	d11e      	bne.n	8006662 <_svfiprintf_r+0x14a>
 8006624:	787b      	ldrb	r3, [r7, #1]
 8006626:	2b2a      	cmp	r3, #42	; 0x2a
 8006628:	d10a      	bne.n	8006640 <_svfiprintf_r+0x128>
 800662a:	9b03      	ldr	r3, [sp, #12]
 800662c:	1d1a      	adds	r2, r3, #4
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	9203      	str	r2, [sp, #12]
 8006632:	2b00      	cmp	r3, #0
 8006634:	bfb8      	it	lt
 8006636:	f04f 33ff 	movlt.w	r3, #4294967295
 800663a:	3702      	adds	r7, #2
 800663c:	9305      	str	r3, [sp, #20]
 800663e:	e010      	b.n	8006662 <_svfiprintf_r+0x14a>
 8006640:	2300      	movs	r3, #0
 8006642:	9305      	str	r3, [sp, #20]
 8006644:	1c78      	adds	r0, r7, #1
 8006646:	4619      	mov	r1, r3
 8006648:	240a      	movs	r4, #10
 800664a:	4607      	mov	r7, r0
 800664c:	3001      	adds	r0, #1
 800664e:	783a      	ldrb	r2, [r7, #0]
 8006650:	3a30      	subs	r2, #48	; 0x30
 8006652:	2a09      	cmp	r2, #9
 8006654:	d803      	bhi.n	800665e <_svfiprintf_r+0x146>
 8006656:	fb04 2101 	mla	r1, r4, r1, r2
 800665a:	2301      	movs	r3, #1
 800665c:	e7f5      	b.n	800664a <_svfiprintf_r+0x132>
 800665e:	b103      	cbz	r3, 8006662 <_svfiprintf_r+0x14a>
 8006660:	9105      	str	r1, [sp, #20]
 8006662:	2203      	movs	r2, #3
 8006664:	7839      	ldrb	r1, [r7, #0]
 8006666:	4822      	ldr	r0, [pc, #136]	; (80066f0 <_svfiprintf_r+0x1d8>)
 8006668:	f7f9 fdda 	bl	8000220 <memchr>
 800666c:	b140      	cbz	r0, 8006680 <_svfiprintf_r+0x168>
 800666e:	2340      	movs	r3, #64	; 0x40
 8006670:	ebcb 0000 	rsb	r0, fp, r0
 8006674:	fa03 f000 	lsl.w	r0, r3, r0
 8006678:	9b04      	ldr	r3, [sp, #16]
 800667a:	4318      	orrs	r0, r3
 800667c:	9004      	str	r0, [sp, #16]
 800667e:	3701      	adds	r7, #1
 8006680:	7839      	ldrb	r1, [r7, #0]
 8006682:	481c      	ldr	r0, [pc, #112]	; (80066f4 <_svfiprintf_r+0x1dc>)
 8006684:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006688:	2206      	movs	r2, #6
 800668a:	1c7e      	adds	r6, r7, #1
 800668c:	f7f9 fdc8 	bl	8000220 <memchr>
 8006690:	b188      	cbz	r0, 80066b6 <_svfiprintf_r+0x19e>
 8006692:	4b19      	ldr	r3, [pc, #100]	; (80066f8 <_svfiprintf_r+0x1e0>)
 8006694:	b933      	cbnz	r3, 80066a4 <_svfiprintf_r+0x18c>
 8006696:	9b03      	ldr	r3, [sp, #12]
 8006698:	3307      	adds	r3, #7
 800669a:	f023 0307 	bic.w	r3, r3, #7
 800669e:	3308      	adds	r3, #8
 80066a0:	9303      	str	r3, [sp, #12]
 80066a2:	e014      	b.n	80066ce <_svfiprintf_r+0x1b6>
 80066a4:	ab03      	add	r3, sp, #12
 80066a6:	9300      	str	r3, [sp, #0]
 80066a8:	462a      	mov	r2, r5
 80066aa:	4b14      	ldr	r3, [pc, #80]	; (80066fc <_svfiprintf_r+0x1e4>)
 80066ac:	a904      	add	r1, sp, #16
 80066ae:	4640      	mov	r0, r8
 80066b0:	f3af 8000 	nop.w
 80066b4:	e007      	b.n	80066c6 <_svfiprintf_r+0x1ae>
 80066b6:	ab03      	add	r3, sp, #12
 80066b8:	9300      	str	r3, [sp, #0]
 80066ba:	462a      	mov	r2, r5
 80066bc:	4b0f      	ldr	r3, [pc, #60]	; (80066fc <_svfiprintf_r+0x1e4>)
 80066be:	a904      	add	r1, sp, #16
 80066c0:	4640      	mov	r0, r8
 80066c2:	f000 f893 	bl	80067ec <_printf_i>
 80066c6:	f1b0 3fff 	cmp.w	r0, #4294967295
 80066ca:	4682      	mov	sl, r0
 80066cc:	d003      	beq.n	80066d6 <_svfiprintf_r+0x1be>
 80066ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066d0:	4453      	add	r3, sl
 80066d2:	9309      	str	r3, [sp, #36]	; 0x24
 80066d4:	e742      	b.n	800655c <_svfiprintf_r+0x44>
 80066d6:	89ab      	ldrh	r3, [r5, #12]
 80066d8:	065b      	lsls	r3, r3, #25
 80066da:	d401      	bmi.n	80066e0 <_svfiprintf_r+0x1c8>
 80066dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066de:	e001      	b.n	80066e4 <_svfiprintf_r+0x1cc>
 80066e0:	f04f 30ff 	mov.w	r0, #4294967295
 80066e4:	b01d      	add	sp, #116	; 0x74
 80066e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ea:	bf00      	nop
 80066ec:	0800719c 	.word	0x0800719c
 80066f0:	080071a2 	.word	0x080071a2
 80066f4:	080071a6 	.word	0x080071a6
 80066f8:	00000000 	.word	0x00000000
 80066fc:	08006465 	.word	0x08006465

08006700 <_printf_common>:
 8006700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006704:	4691      	mov	r9, r2
 8006706:	461f      	mov	r7, r3
 8006708:	690a      	ldr	r2, [r1, #16]
 800670a:	688b      	ldr	r3, [r1, #8]
 800670c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006710:	4293      	cmp	r3, r2
 8006712:	bfb8      	it	lt
 8006714:	4613      	movlt	r3, r2
 8006716:	f8c9 3000 	str.w	r3, [r9]
 800671a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800671e:	4606      	mov	r6, r0
 8006720:	460c      	mov	r4, r1
 8006722:	b112      	cbz	r2, 800672a <_printf_common+0x2a>
 8006724:	3301      	adds	r3, #1
 8006726:	f8c9 3000 	str.w	r3, [r9]
 800672a:	6823      	ldr	r3, [r4, #0]
 800672c:	0699      	lsls	r1, r3, #26
 800672e:	bf42      	ittt	mi
 8006730:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006734:	3302      	addmi	r3, #2
 8006736:	f8c9 3000 	strmi.w	r3, [r9]
 800673a:	6825      	ldr	r5, [r4, #0]
 800673c:	f015 0506 	ands.w	r5, r5, #6
 8006740:	d110      	bne.n	8006764 <_printf_common+0x64>
 8006742:	f104 0a19 	add.w	sl, r4, #25
 8006746:	e007      	b.n	8006758 <_printf_common+0x58>
 8006748:	2301      	movs	r3, #1
 800674a:	4652      	mov	r2, sl
 800674c:	4639      	mov	r1, r7
 800674e:	4630      	mov	r0, r6
 8006750:	47c0      	blx	r8
 8006752:	3001      	adds	r0, #1
 8006754:	d01a      	beq.n	800678c <_printf_common+0x8c>
 8006756:	3501      	adds	r5, #1
 8006758:	68e3      	ldr	r3, [r4, #12]
 800675a:	f8d9 2000 	ldr.w	r2, [r9]
 800675e:	1a9b      	subs	r3, r3, r2
 8006760:	429d      	cmp	r5, r3
 8006762:	dbf1      	blt.n	8006748 <_printf_common+0x48>
 8006764:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006768:	6822      	ldr	r2, [r4, #0]
 800676a:	3300      	adds	r3, #0
 800676c:	bf18      	it	ne
 800676e:	2301      	movne	r3, #1
 8006770:	0692      	lsls	r2, r2, #26
 8006772:	d50f      	bpl.n	8006794 <_printf_common+0x94>
 8006774:	18e1      	adds	r1, r4, r3
 8006776:	1c5a      	adds	r2, r3, #1
 8006778:	2030      	movs	r0, #48	; 0x30
 800677a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800677e:	4422      	add	r2, r4
 8006780:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006784:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006788:	3302      	adds	r3, #2
 800678a:	e003      	b.n	8006794 <_printf_common+0x94>
 800678c:	f04f 30ff 	mov.w	r0, #4294967295
 8006790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006794:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006798:	4639      	mov	r1, r7
 800679a:	4630      	mov	r0, r6
 800679c:	47c0      	blx	r8
 800679e:	3001      	adds	r0, #1
 80067a0:	d0f4      	beq.n	800678c <_printf_common+0x8c>
 80067a2:	6822      	ldr	r2, [r4, #0]
 80067a4:	f8d9 5000 	ldr.w	r5, [r9]
 80067a8:	68e3      	ldr	r3, [r4, #12]
 80067aa:	f002 0206 	and.w	r2, r2, #6
 80067ae:	2a04      	cmp	r2, #4
 80067b0:	bf08      	it	eq
 80067b2:	1b5d      	subeq	r5, r3, r5
 80067b4:	6922      	ldr	r2, [r4, #16]
 80067b6:	68a3      	ldr	r3, [r4, #8]
 80067b8:	bf0c      	ite	eq
 80067ba:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067be:	2500      	movne	r5, #0
 80067c0:	4293      	cmp	r3, r2
 80067c2:	bfc4      	itt	gt
 80067c4:	1a9b      	subgt	r3, r3, r2
 80067c6:	18ed      	addgt	r5, r5, r3
 80067c8:	f04f 0900 	mov.w	r9, #0
 80067cc:	341a      	adds	r4, #26
 80067ce:	454d      	cmp	r5, r9
 80067d0:	d009      	beq.n	80067e6 <_printf_common+0xe6>
 80067d2:	2301      	movs	r3, #1
 80067d4:	4622      	mov	r2, r4
 80067d6:	4639      	mov	r1, r7
 80067d8:	4630      	mov	r0, r6
 80067da:	47c0      	blx	r8
 80067dc:	3001      	adds	r0, #1
 80067de:	d0d5      	beq.n	800678c <_printf_common+0x8c>
 80067e0:	f109 0901 	add.w	r9, r9, #1
 80067e4:	e7f3      	b.n	80067ce <_printf_common+0xce>
 80067e6:	2000      	movs	r0, #0
 80067e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080067ec <_printf_i>:
 80067ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067f0:	4617      	mov	r7, r2
 80067f2:	7e0a      	ldrb	r2, [r1, #24]
 80067f4:	b085      	sub	sp, #20
 80067f6:	2a6e      	cmp	r2, #110	; 0x6e
 80067f8:	4698      	mov	r8, r3
 80067fa:	4606      	mov	r6, r0
 80067fc:	460c      	mov	r4, r1
 80067fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006800:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006804:	f000 80ae 	beq.w	8006964 <_printf_i+0x178>
 8006808:	d811      	bhi.n	800682e <_printf_i+0x42>
 800680a:	2a63      	cmp	r2, #99	; 0x63
 800680c:	d022      	beq.n	8006854 <_printf_i+0x68>
 800680e:	d809      	bhi.n	8006824 <_printf_i+0x38>
 8006810:	2a00      	cmp	r2, #0
 8006812:	f000 80bb 	beq.w	800698c <_printf_i+0x1a0>
 8006816:	2a58      	cmp	r2, #88	; 0x58
 8006818:	f040 80ca 	bne.w	80069b0 <_printf_i+0x1c4>
 800681c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006820:	4983      	ldr	r1, [pc, #524]	; (8006a30 <_printf_i+0x244>)
 8006822:	e055      	b.n	80068d0 <_printf_i+0xe4>
 8006824:	2a64      	cmp	r2, #100	; 0x64
 8006826:	d01e      	beq.n	8006866 <_printf_i+0x7a>
 8006828:	2a69      	cmp	r2, #105	; 0x69
 800682a:	d01c      	beq.n	8006866 <_printf_i+0x7a>
 800682c:	e0c0      	b.n	80069b0 <_printf_i+0x1c4>
 800682e:	2a73      	cmp	r2, #115	; 0x73
 8006830:	f000 80b0 	beq.w	8006994 <_printf_i+0x1a8>
 8006834:	d809      	bhi.n	800684a <_printf_i+0x5e>
 8006836:	2a6f      	cmp	r2, #111	; 0x6f
 8006838:	d02e      	beq.n	8006898 <_printf_i+0xac>
 800683a:	2a70      	cmp	r2, #112	; 0x70
 800683c:	f040 80b8 	bne.w	80069b0 <_printf_i+0x1c4>
 8006840:	680a      	ldr	r2, [r1, #0]
 8006842:	f042 0220 	orr.w	r2, r2, #32
 8006846:	600a      	str	r2, [r1, #0]
 8006848:	e03e      	b.n	80068c8 <_printf_i+0xdc>
 800684a:	2a75      	cmp	r2, #117	; 0x75
 800684c:	d024      	beq.n	8006898 <_printf_i+0xac>
 800684e:	2a78      	cmp	r2, #120	; 0x78
 8006850:	d03a      	beq.n	80068c8 <_printf_i+0xdc>
 8006852:	e0ad      	b.n	80069b0 <_printf_i+0x1c4>
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800685a:	1d11      	adds	r1, r2, #4
 800685c:	6019      	str	r1, [r3, #0]
 800685e:	6813      	ldr	r3, [r2, #0]
 8006860:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006864:	e0a8      	b.n	80069b8 <_printf_i+0x1cc>
 8006866:	6821      	ldr	r1, [r4, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800686e:	d002      	beq.n	8006876 <_printf_i+0x8a>
 8006870:	1d11      	adds	r1, r2, #4
 8006872:	6019      	str	r1, [r3, #0]
 8006874:	e008      	b.n	8006888 <_printf_i+0x9c>
 8006876:	f011 0f40 	tst.w	r1, #64	; 0x40
 800687a:	f102 0104 	add.w	r1, r2, #4
 800687e:	6019      	str	r1, [r3, #0]
 8006880:	d002      	beq.n	8006888 <_printf_i+0x9c>
 8006882:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006886:	e000      	b.n	800688a <_printf_i+0x9e>
 8006888:	6813      	ldr	r3, [r2, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	da3c      	bge.n	8006908 <_printf_i+0x11c>
 800688e:	222d      	movs	r2, #45	; 0x2d
 8006890:	425b      	negs	r3, r3
 8006892:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006896:	e037      	b.n	8006908 <_printf_i+0x11c>
 8006898:	6821      	ldr	r1, [r4, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	f011 0f80 	tst.w	r1, #128	; 0x80
 80068a0:	d002      	beq.n	80068a8 <_printf_i+0xbc>
 80068a2:	1d11      	adds	r1, r2, #4
 80068a4:	6019      	str	r1, [r3, #0]
 80068a6:	e007      	b.n	80068b8 <_printf_i+0xcc>
 80068a8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80068ac:	f102 0104 	add.w	r1, r2, #4
 80068b0:	6019      	str	r1, [r3, #0]
 80068b2:	d001      	beq.n	80068b8 <_printf_i+0xcc>
 80068b4:	8813      	ldrh	r3, [r2, #0]
 80068b6:	e000      	b.n	80068ba <_printf_i+0xce>
 80068b8:	6813      	ldr	r3, [r2, #0]
 80068ba:	7e22      	ldrb	r2, [r4, #24]
 80068bc:	495c      	ldr	r1, [pc, #368]	; (8006a30 <_printf_i+0x244>)
 80068be:	2a6f      	cmp	r2, #111	; 0x6f
 80068c0:	bf14      	ite	ne
 80068c2:	220a      	movne	r2, #10
 80068c4:	2208      	moveq	r2, #8
 80068c6:	e01b      	b.n	8006900 <_printf_i+0x114>
 80068c8:	2278      	movs	r2, #120	; 0x78
 80068ca:	495a      	ldr	r1, [pc, #360]	; (8006a34 <_printf_i+0x248>)
 80068cc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80068d0:	6822      	ldr	r2, [r4, #0]
 80068d2:	6818      	ldr	r0, [r3, #0]
 80068d4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80068d8:	f100 0504 	add.w	r5, r0, #4
 80068dc:	601d      	str	r5, [r3, #0]
 80068de:	d103      	bne.n	80068e8 <_printf_i+0xfc>
 80068e0:	0655      	lsls	r5, r2, #25
 80068e2:	d501      	bpl.n	80068e8 <_printf_i+0xfc>
 80068e4:	8803      	ldrh	r3, [r0, #0]
 80068e6:	e000      	b.n	80068ea <_printf_i+0xfe>
 80068e8:	6803      	ldr	r3, [r0, #0]
 80068ea:	07d0      	lsls	r0, r2, #31
 80068ec:	bf44      	itt	mi
 80068ee:	f042 0220 	orrmi.w	r2, r2, #32
 80068f2:	6022      	strmi	r2, [r4, #0]
 80068f4:	b91b      	cbnz	r3, 80068fe <_printf_i+0x112>
 80068f6:	6822      	ldr	r2, [r4, #0]
 80068f8:	f022 0220 	bic.w	r2, r2, #32
 80068fc:	6022      	str	r2, [r4, #0]
 80068fe:	2210      	movs	r2, #16
 8006900:	2000      	movs	r0, #0
 8006902:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8006906:	e001      	b.n	800690c <_printf_i+0x120>
 8006908:	4949      	ldr	r1, [pc, #292]	; (8006a30 <_printf_i+0x244>)
 800690a:	220a      	movs	r2, #10
 800690c:	6865      	ldr	r5, [r4, #4]
 800690e:	60a5      	str	r5, [r4, #8]
 8006910:	2d00      	cmp	r5, #0
 8006912:	db08      	blt.n	8006926 <_printf_i+0x13a>
 8006914:	6820      	ldr	r0, [r4, #0]
 8006916:	f020 0004 	bic.w	r0, r0, #4
 800691a:	6020      	str	r0, [r4, #0]
 800691c:	b92b      	cbnz	r3, 800692a <_printf_i+0x13e>
 800691e:	2d00      	cmp	r5, #0
 8006920:	d17d      	bne.n	8006a1e <_printf_i+0x232>
 8006922:	4675      	mov	r5, lr
 8006924:	e00c      	b.n	8006940 <_printf_i+0x154>
 8006926:	2b00      	cmp	r3, #0
 8006928:	d079      	beq.n	8006a1e <_printf_i+0x232>
 800692a:	4675      	mov	r5, lr
 800692c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006930:	fb02 3310 	mls	r3, r2, r0, r3
 8006934:	5ccb      	ldrb	r3, [r1, r3]
 8006936:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800693a:	4603      	mov	r3, r0
 800693c:	2800      	cmp	r0, #0
 800693e:	d1f5      	bne.n	800692c <_printf_i+0x140>
 8006940:	2a08      	cmp	r2, #8
 8006942:	d10b      	bne.n	800695c <_printf_i+0x170>
 8006944:	6823      	ldr	r3, [r4, #0]
 8006946:	07da      	lsls	r2, r3, #31
 8006948:	d508      	bpl.n	800695c <_printf_i+0x170>
 800694a:	6923      	ldr	r3, [r4, #16]
 800694c:	6862      	ldr	r2, [r4, #4]
 800694e:	429a      	cmp	r2, r3
 8006950:	bfde      	ittt	le
 8006952:	2330      	movle	r3, #48	; 0x30
 8006954:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006958:	f105 35ff 	addle.w	r5, r5, #4294967295
 800695c:	ebc5 030e 	rsb	r3, r5, lr
 8006960:	6123      	str	r3, [r4, #16]
 8006962:	e02e      	b.n	80069c2 <_printf_i+0x1d6>
 8006964:	6808      	ldr	r0, [r1, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	6949      	ldr	r1, [r1, #20]
 800696a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800696e:	d003      	beq.n	8006978 <_printf_i+0x18c>
 8006970:	1d10      	adds	r0, r2, #4
 8006972:	6018      	str	r0, [r3, #0]
 8006974:	6813      	ldr	r3, [r2, #0]
 8006976:	e008      	b.n	800698a <_printf_i+0x19e>
 8006978:	f010 0f40 	tst.w	r0, #64	; 0x40
 800697c:	f102 0004 	add.w	r0, r2, #4
 8006980:	6018      	str	r0, [r3, #0]
 8006982:	6813      	ldr	r3, [r2, #0]
 8006984:	d001      	beq.n	800698a <_printf_i+0x19e>
 8006986:	8019      	strh	r1, [r3, #0]
 8006988:	e000      	b.n	800698c <_printf_i+0x1a0>
 800698a:	6019      	str	r1, [r3, #0]
 800698c:	2300      	movs	r3, #0
 800698e:	6123      	str	r3, [r4, #16]
 8006990:	4675      	mov	r5, lr
 8006992:	e016      	b.n	80069c2 <_printf_i+0x1d6>
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	1d11      	adds	r1, r2, #4
 8006998:	6019      	str	r1, [r3, #0]
 800699a:	6815      	ldr	r5, [r2, #0]
 800699c:	6862      	ldr	r2, [r4, #4]
 800699e:	2100      	movs	r1, #0
 80069a0:	4628      	mov	r0, r5
 80069a2:	f7f9 fc3d 	bl	8000220 <memchr>
 80069a6:	b108      	cbz	r0, 80069ac <_printf_i+0x1c0>
 80069a8:	1b40      	subs	r0, r0, r5
 80069aa:	6060      	str	r0, [r4, #4]
 80069ac:	6863      	ldr	r3, [r4, #4]
 80069ae:	e004      	b.n	80069ba <_printf_i+0x1ce>
 80069b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069b4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80069b8:	2301      	movs	r3, #1
 80069ba:	6123      	str	r3, [r4, #16]
 80069bc:	2300      	movs	r3, #0
 80069be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069c2:	f8cd 8000 	str.w	r8, [sp]
 80069c6:	463b      	mov	r3, r7
 80069c8:	aa03      	add	r2, sp, #12
 80069ca:	4621      	mov	r1, r4
 80069cc:	4630      	mov	r0, r6
 80069ce:	f7ff fe97 	bl	8006700 <_printf_common>
 80069d2:	3001      	adds	r0, #1
 80069d4:	d102      	bne.n	80069dc <_printf_i+0x1f0>
 80069d6:	f04f 30ff 	mov.w	r0, #4294967295
 80069da:	e026      	b.n	8006a2a <_printf_i+0x23e>
 80069dc:	6923      	ldr	r3, [r4, #16]
 80069de:	462a      	mov	r2, r5
 80069e0:	4639      	mov	r1, r7
 80069e2:	4630      	mov	r0, r6
 80069e4:	47c0      	blx	r8
 80069e6:	3001      	adds	r0, #1
 80069e8:	d0f5      	beq.n	80069d6 <_printf_i+0x1ea>
 80069ea:	6823      	ldr	r3, [r4, #0]
 80069ec:	079b      	lsls	r3, r3, #30
 80069ee:	d510      	bpl.n	8006a12 <_printf_i+0x226>
 80069f0:	2500      	movs	r5, #0
 80069f2:	f104 0919 	add.w	r9, r4, #25
 80069f6:	e007      	b.n	8006a08 <_printf_i+0x21c>
 80069f8:	2301      	movs	r3, #1
 80069fa:	464a      	mov	r2, r9
 80069fc:	4639      	mov	r1, r7
 80069fe:	4630      	mov	r0, r6
 8006a00:	47c0      	blx	r8
 8006a02:	3001      	adds	r0, #1
 8006a04:	d0e7      	beq.n	80069d6 <_printf_i+0x1ea>
 8006a06:	3501      	adds	r5, #1
 8006a08:	68e3      	ldr	r3, [r4, #12]
 8006a0a:	9a03      	ldr	r2, [sp, #12]
 8006a0c:	1a9b      	subs	r3, r3, r2
 8006a0e:	429d      	cmp	r5, r3
 8006a10:	dbf2      	blt.n	80069f8 <_printf_i+0x20c>
 8006a12:	68e0      	ldr	r0, [r4, #12]
 8006a14:	9b03      	ldr	r3, [sp, #12]
 8006a16:	4298      	cmp	r0, r3
 8006a18:	bfb8      	it	lt
 8006a1a:	4618      	movlt	r0, r3
 8006a1c:	e005      	b.n	8006a2a <_printf_i+0x23e>
 8006a1e:	780b      	ldrb	r3, [r1, #0]
 8006a20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a28:	e78a      	b.n	8006940 <_printf_i+0x154>
 8006a2a:	b005      	add	sp, #20
 8006a2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a30:	080071ad 	.word	0x080071ad
 8006a34:	080071be 	.word	0x080071be

08006a38 <memcpy>:
 8006a38:	b510      	push	{r4, lr}
 8006a3a:	1e43      	subs	r3, r0, #1
 8006a3c:	440a      	add	r2, r1
 8006a3e:	4291      	cmp	r1, r2
 8006a40:	d004      	beq.n	8006a4c <memcpy+0x14>
 8006a42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a4a:	e7f8      	b.n	8006a3e <memcpy+0x6>
 8006a4c:	bd10      	pop	{r4, pc}

08006a4e <memmove>:
 8006a4e:	4288      	cmp	r0, r1
 8006a50:	b510      	push	{r4, lr}
 8006a52:	eb01 0302 	add.w	r3, r1, r2
 8006a56:	d801      	bhi.n	8006a5c <memmove+0xe>
 8006a58:	1e42      	subs	r2, r0, #1
 8006a5a:	e00b      	b.n	8006a74 <memmove+0x26>
 8006a5c:	4298      	cmp	r0, r3
 8006a5e:	d2fb      	bcs.n	8006a58 <memmove+0xa>
 8006a60:	1881      	adds	r1, r0, r2
 8006a62:	1ad2      	subs	r2, r2, r3
 8006a64:	42d3      	cmn	r3, r2
 8006a66:	d004      	beq.n	8006a72 <memmove+0x24>
 8006a68:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a6c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006a70:	e7f8      	b.n	8006a64 <memmove+0x16>
 8006a72:	bd10      	pop	{r4, pc}
 8006a74:	4299      	cmp	r1, r3
 8006a76:	d004      	beq.n	8006a82 <memmove+0x34>
 8006a78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a7c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006a80:	e7f8      	b.n	8006a74 <memmove+0x26>
 8006a82:	bd10      	pop	{r4, pc}

08006a84 <_free_r>:
 8006a84:	b538      	push	{r3, r4, r5, lr}
 8006a86:	4605      	mov	r5, r0
 8006a88:	2900      	cmp	r1, #0
 8006a8a:	d046      	beq.n	8006b1a <_free_r+0x96>
 8006a8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a90:	1f0c      	subs	r4, r1, #4
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	bfb8      	it	lt
 8006a96:	18e4      	addlt	r4, r4, r3
 8006a98:	f000 f8d6 	bl	8006c48 <__malloc_lock>
 8006a9c:	4a1f      	ldr	r2, [pc, #124]	; (8006b1c <_free_r+0x98>)
 8006a9e:	6813      	ldr	r3, [r2, #0]
 8006aa0:	4611      	mov	r1, r2
 8006aa2:	b913      	cbnz	r3, 8006aaa <_free_r+0x26>
 8006aa4:	6063      	str	r3, [r4, #4]
 8006aa6:	6014      	str	r4, [r2, #0]
 8006aa8:	e032      	b.n	8006b10 <_free_r+0x8c>
 8006aaa:	42a3      	cmp	r3, r4
 8006aac:	d90e      	bls.n	8006acc <_free_r+0x48>
 8006aae:	6822      	ldr	r2, [r4, #0]
 8006ab0:	18a0      	adds	r0, r4, r2
 8006ab2:	4283      	cmp	r3, r0
 8006ab4:	bf04      	itt	eq
 8006ab6:	6818      	ldreq	r0, [r3, #0]
 8006ab8:	685b      	ldreq	r3, [r3, #4]
 8006aba:	6063      	str	r3, [r4, #4]
 8006abc:	bf04      	itt	eq
 8006abe:	1812      	addeq	r2, r2, r0
 8006ac0:	6022      	streq	r2, [r4, #0]
 8006ac2:	600c      	str	r4, [r1, #0]
 8006ac4:	e024      	b.n	8006b10 <_free_r+0x8c>
 8006ac6:	42a2      	cmp	r2, r4
 8006ac8:	d803      	bhi.n	8006ad2 <_free_r+0x4e>
 8006aca:	4613      	mov	r3, r2
 8006acc:	685a      	ldr	r2, [r3, #4]
 8006ace:	2a00      	cmp	r2, #0
 8006ad0:	d1f9      	bne.n	8006ac6 <_free_r+0x42>
 8006ad2:	6818      	ldr	r0, [r3, #0]
 8006ad4:	1819      	adds	r1, r3, r0
 8006ad6:	42a1      	cmp	r1, r4
 8006ad8:	d10b      	bne.n	8006af2 <_free_r+0x6e>
 8006ada:	6821      	ldr	r1, [r4, #0]
 8006adc:	4401      	add	r1, r0
 8006ade:	1858      	adds	r0, r3, r1
 8006ae0:	4282      	cmp	r2, r0
 8006ae2:	6019      	str	r1, [r3, #0]
 8006ae4:	d114      	bne.n	8006b10 <_free_r+0x8c>
 8006ae6:	6810      	ldr	r0, [r2, #0]
 8006ae8:	6852      	ldr	r2, [r2, #4]
 8006aea:	605a      	str	r2, [r3, #4]
 8006aec:	4401      	add	r1, r0
 8006aee:	6019      	str	r1, [r3, #0]
 8006af0:	e00e      	b.n	8006b10 <_free_r+0x8c>
 8006af2:	d902      	bls.n	8006afa <_free_r+0x76>
 8006af4:	230c      	movs	r3, #12
 8006af6:	602b      	str	r3, [r5, #0]
 8006af8:	e00a      	b.n	8006b10 <_free_r+0x8c>
 8006afa:	6821      	ldr	r1, [r4, #0]
 8006afc:	1860      	adds	r0, r4, r1
 8006afe:	4282      	cmp	r2, r0
 8006b00:	bf04      	itt	eq
 8006b02:	6810      	ldreq	r0, [r2, #0]
 8006b04:	6852      	ldreq	r2, [r2, #4]
 8006b06:	6062      	str	r2, [r4, #4]
 8006b08:	bf04      	itt	eq
 8006b0a:	1809      	addeq	r1, r1, r0
 8006b0c:	6021      	streq	r1, [r4, #0]
 8006b0e:	605c      	str	r4, [r3, #4]
 8006b10:	4628      	mov	r0, r5
 8006b12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b16:	f000 b898 	b.w	8006c4a <__malloc_unlock>
 8006b1a:	bd38      	pop	{r3, r4, r5, pc}
 8006b1c:	200013c0 	.word	0x200013c0

08006b20 <_malloc_r>:
 8006b20:	b570      	push	{r4, r5, r6, lr}
 8006b22:	1ccd      	adds	r5, r1, #3
 8006b24:	f025 0503 	bic.w	r5, r5, #3
 8006b28:	3508      	adds	r5, #8
 8006b2a:	2d0c      	cmp	r5, #12
 8006b2c:	bf38      	it	cc
 8006b2e:	250c      	movcc	r5, #12
 8006b30:	2d00      	cmp	r5, #0
 8006b32:	4606      	mov	r6, r0
 8006b34:	db01      	blt.n	8006b3a <_malloc_r+0x1a>
 8006b36:	42a9      	cmp	r1, r5
 8006b38:	d902      	bls.n	8006b40 <_malloc_r+0x20>
 8006b3a:	230c      	movs	r3, #12
 8006b3c:	6033      	str	r3, [r6, #0]
 8006b3e:	e046      	b.n	8006bce <_malloc_r+0xae>
 8006b40:	f000 f882 	bl	8006c48 <__malloc_lock>
 8006b44:	4b23      	ldr	r3, [pc, #140]	; (8006bd4 <_malloc_r+0xb4>)
 8006b46:	681c      	ldr	r4, [r3, #0]
 8006b48:	461a      	mov	r2, r3
 8006b4a:	4621      	mov	r1, r4
 8006b4c:	b1a1      	cbz	r1, 8006b78 <_malloc_r+0x58>
 8006b4e:	680b      	ldr	r3, [r1, #0]
 8006b50:	1b5b      	subs	r3, r3, r5
 8006b52:	d40e      	bmi.n	8006b72 <_malloc_r+0x52>
 8006b54:	2b0b      	cmp	r3, #11
 8006b56:	d903      	bls.n	8006b60 <_malloc_r+0x40>
 8006b58:	600b      	str	r3, [r1, #0]
 8006b5a:	18cc      	adds	r4, r1, r3
 8006b5c:	50cd      	str	r5, [r1, r3]
 8006b5e:	e01e      	b.n	8006b9e <_malloc_r+0x7e>
 8006b60:	428c      	cmp	r4, r1
 8006b62:	bf0d      	iteet	eq
 8006b64:	6863      	ldreq	r3, [r4, #4]
 8006b66:	684b      	ldrne	r3, [r1, #4]
 8006b68:	6063      	strne	r3, [r4, #4]
 8006b6a:	6013      	streq	r3, [r2, #0]
 8006b6c:	bf18      	it	ne
 8006b6e:	460c      	movne	r4, r1
 8006b70:	e015      	b.n	8006b9e <_malloc_r+0x7e>
 8006b72:	460c      	mov	r4, r1
 8006b74:	6849      	ldr	r1, [r1, #4]
 8006b76:	e7e9      	b.n	8006b4c <_malloc_r+0x2c>
 8006b78:	4c17      	ldr	r4, [pc, #92]	; (8006bd8 <_malloc_r+0xb8>)
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	b91b      	cbnz	r3, 8006b86 <_malloc_r+0x66>
 8006b7e:	4630      	mov	r0, r6
 8006b80:	f000 f852 	bl	8006c28 <_sbrk_r>
 8006b84:	6020      	str	r0, [r4, #0]
 8006b86:	4629      	mov	r1, r5
 8006b88:	4630      	mov	r0, r6
 8006b8a:	f000 f84d 	bl	8006c28 <_sbrk_r>
 8006b8e:	1c43      	adds	r3, r0, #1
 8006b90:	d018      	beq.n	8006bc4 <_malloc_r+0xa4>
 8006b92:	1cc4      	adds	r4, r0, #3
 8006b94:	f024 0403 	bic.w	r4, r4, #3
 8006b98:	42a0      	cmp	r0, r4
 8006b9a:	d10d      	bne.n	8006bb8 <_malloc_r+0x98>
 8006b9c:	6025      	str	r5, [r4, #0]
 8006b9e:	4630      	mov	r0, r6
 8006ba0:	f000 f853 	bl	8006c4a <__malloc_unlock>
 8006ba4:	f104 000b 	add.w	r0, r4, #11
 8006ba8:	1d23      	adds	r3, r4, #4
 8006baa:	f020 0007 	bic.w	r0, r0, #7
 8006bae:	1ac3      	subs	r3, r0, r3
 8006bb0:	d00e      	beq.n	8006bd0 <_malloc_r+0xb0>
 8006bb2:	425a      	negs	r2, r3
 8006bb4:	50e2      	str	r2, [r4, r3]
 8006bb6:	bd70      	pop	{r4, r5, r6, pc}
 8006bb8:	1a21      	subs	r1, r4, r0
 8006bba:	4630      	mov	r0, r6
 8006bbc:	f000 f834 	bl	8006c28 <_sbrk_r>
 8006bc0:	3001      	adds	r0, #1
 8006bc2:	d1eb      	bne.n	8006b9c <_malloc_r+0x7c>
 8006bc4:	230c      	movs	r3, #12
 8006bc6:	6033      	str	r3, [r6, #0]
 8006bc8:	4630      	mov	r0, r6
 8006bca:	f000 f83e 	bl	8006c4a <__malloc_unlock>
 8006bce:	2000      	movs	r0, #0
 8006bd0:	bd70      	pop	{r4, r5, r6, pc}
 8006bd2:	bf00      	nop
 8006bd4:	200013c0 	.word	0x200013c0
 8006bd8:	200013bc 	.word	0x200013bc

08006bdc <_realloc_r>:
 8006bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bde:	4607      	mov	r7, r0
 8006be0:	4615      	mov	r5, r2
 8006be2:	460e      	mov	r6, r1
 8006be4:	b921      	cbnz	r1, 8006bf0 <_realloc_r+0x14>
 8006be6:	4611      	mov	r1, r2
 8006be8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006bec:	f7ff bf98 	b.w	8006b20 <_malloc_r>
 8006bf0:	b91a      	cbnz	r2, 8006bfa <_realloc_r+0x1e>
 8006bf2:	f7ff ff47 	bl	8006a84 <_free_r>
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bfa:	f000 f827 	bl	8006c4c <_malloc_usable_size_r>
 8006bfe:	4285      	cmp	r5, r0
 8006c00:	d90e      	bls.n	8006c20 <_realloc_r+0x44>
 8006c02:	4629      	mov	r1, r5
 8006c04:	4638      	mov	r0, r7
 8006c06:	f7ff ff8b 	bl	8006b20 <_malloc_r>
 8006c0a:	4604      	mov	r4, r0
 8006c0c:	b150      	cbz	r0, 8006c24 <_realloc_r+0x48>
 8006c0e:	4631      	mov	r1, r6
 8006c10:	462a      	mov	r2, r5
 8006c12:	f7ff ff11 	bl	8006a38 <memcpy>
 8006c16:	4631      	mov	r1, r6
 8006c18:	4638      	mov	r0, r7
 8006c1a:	f7ff ff33 	bl	8006a84 <_free_r>
 8006c1e:	e001      	b.n	8006c24 <_realloc_r+0x48>
 8006c20:	4630      	mov	r0, r6
 8006c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c24:	4620      	mov	r0, r4
 8006c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006c28 <_sbrk_r>:
 8006c28:	b538      	push	{r3, r4, r5, lr}
 8006c2a:	4c06      	ldr	r4, [pc, #24]	; (8006c44 <_sbrk_r+0x1c>)
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	4605      	mov	r5, r0
 8006c30:	4608      	mov	r0, r1
 8006c32:	6023      	str	r3, [r4, #0]
 8006c34:	f000 f814 	bl	8006c60 <_sbrk>
 8006c38:	1c43      	adds	r3, r0, #1
 8006c3a:	d102      	bne.n	8006c42 <_sbrk_r+0x1a>
 8006c3c:	6823      	ldr	r3, [r4, #0]
 8006c3e:	b103      	cbz	r3, 8006c42 <_sbrk_r+0x1a>
 8006c40:	602b      	str	r3, [r5, #0]
 8006c42:	bd38      	pop	{r3, r4, r5, pc}
 8006c44:	20002a88 	.word	0x20002a88

08006c48 <__malloc_lock>:
 8006c48:	4770      	bx	lr

08006c4a <__malloc_unlock>:
 8006c4a:	4770      	bx	lr

08006c4c <_malloc_usable_size_r>:
 8006c4c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8006c50:	2800      	cmp	r0, #0
 8006c52:	bfbe      	ittt	lt
 8006c54:	1809      	addlt	r1, r1, r0
 8006c56:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 8006c5a:	18c0      	addlt	r0, r0, r3
 8006c5c:	3804      	subs	r0, #4
 8006c5e:	4770      	bx	lr

08006c60 <_sbrk>:
 8006c60:	4b04      	ldr	r3, [pc, #16]	; (8006c74 <_sbrk+0x14>)
 8006c62:	6819      	ldr	r1, [r3, #0]
 8006c64:	4602      	mov	r2, r0
 8006c66:	b909      	cbnz	r1, 8006c6c <_sbrk+0xc>
 8006c68:	4903      	ldr	r1, [pc, #12]	; (8006c78 <_sbrk+0x18>)
 8006c6a:	6019      	str	r1, [r3, #0]
 8006c6c:	6818      	ldr	r0, [r3, #0]
 8006c6e:	4402      	add	r2, r0
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	4770      	bx	lr
 8006c74:	200013c4 	.word	0x200013c4
 8006c78:	20002a8c 	.word	0x20002a8c

08006c7c <_init>:
 8006c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c7e:	bf00      	nop
 8006c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c82:	bc08      	pop	{r3}
 8006c84:	469e      	mov	lr, r3
 8006c86:	4770      	bx	lr

08006c88 <_fini>:
 8006c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8a:	bf00      	nop
 8006c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c8e:	bc08      	pop	{r3}
 8006c90:	469e      	mov	lr, r3
 8006c92:	4770      	bx	lr

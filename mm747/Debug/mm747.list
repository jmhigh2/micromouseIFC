
C:\Users\Jonathan\Desktop\micromouse\mm747\Debug\mm747.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000605c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000062c  0800622c  0800622c  0001622c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006858  08006858  00016858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800685c  0800685c  0001685c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  20000000  08006860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00005c18  2000007c  080068dc  0002007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20005c94  080068dc  00025c94  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  9 .debug_line   00008460  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001747a  00000000  00000000  0002850c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002e42  00000000  00000000  0003f986  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ef0  00000000  00000000  000427c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001b88  00000000  00000000  000436b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000b9ec  00000000  00000000  00045240  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005285  00000000  00000000  00050c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00055eb1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000315c  00000000  00000000  00055f30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006214 	.word	0x08006214

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08006214 	.word	0x08006214

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80002c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80002c6:	e003      	b.n	80002d0 <LoopCopyDataInit>

080002c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80002c8:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80002ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80002cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80002ce:	3104      	adds	r1, #4

080002d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80002d0:	480b      	ldr	r0, [pc, #44]	; (8000300 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80002d2:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80002d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80002d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80002d8:	d3f6      	bcc.n	80002c8 <CopyDataInit>
  ldr  r2, =_sbss
 80002da:	4a0b      	ldr	r2, [pc, #44]	; (8000308 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80002dc:	e002      	b.n	80002e4 <LoopFillZerobss>

080002de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80002de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80002e0:	f842 3b04 	str.w	r3, [r2], #4

080002e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80002e4:	4b09      	ldr	r3, [pc, #36]	; (800030c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80002e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80002e8:	d3f9      	bcc.n	80002de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80002ea:	f005 fb0f 	bl	800590c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002ee:	f005 fb33 	bl	8005958 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002f2:	f004 fed7 	bl	80050a4 <main>
  bx  lr    
 80002f6:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002f8:	20050000 	.word	0x20050000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80002fc:	08006860 	.word	0x08006860
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000300:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000304:	2000007c 	.word	0x2000007c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000308:	2000007c 	.word	0x2000007c
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800030c:	20005c94 	.word	0x20005c94

08000310 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000310:	e7fe      	b.n	8000310 <ADC_IRQHandler>
	...

08000314 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000314:	4b08      	ldr	r3, [pc, #32]	; (8000338 <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000316:	b510      	push	{r4, lr}
 8000318:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 800031a:	6818      	ldr	r0, [r3, #0]
 800031c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000320:	fbb0 f0f3 	udiv	r0, r0, r3
 8000324:	f000 fac2 	bl	80008ac <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000328:	2200      	movs	r2, #0
 800032a:	4621      	mov	r1, r4
 800032c:	f04f 30ff 	mov.w	r0, #4294967295
 8000330:	f000 fa78 	bl	8000824 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000334:	2000      	movs	r0, #0
 8000336:	bd10      	pop	{r4, pc}
 8000338:	20000014 	.word	0x20000014

0800033c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800033c:	b508      	push	{r3, lr}
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800033e:	2003      	movs	r0, #3
 8000340:	f000 fa5e 	bl	8000800 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000344:	2000      	movs	r0, #0
 8000346:	f7ff ffe5 	bl	8000314 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800034a:	f005 f909 	bl	8005560 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 800034e:	2000      	movs	r0, #0
 8000350:	bd08      	pop	{r3, pc}
	...

08000354 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000354:	4a02      	ldr	r2, [pc, #8]	; (8000360 <HAL_IncTick+0xc>)
 8000356:	6813      	ldr	r3, [r2, #0]
 8000358:	3301      	adds	r3, #1
 800035a:	6013      	str	r3, [r2, #0]
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	20004560 	.word	0x20004560

08000364 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000364:	4b01      	ldr	r3, [pc, #4]	; (800036c <HAL_GetTick+0x8>)
 8000366:	6818      	ldr	r0, [r3, #0]
}
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	20004560 	.word	0x20004560

08000370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000370:	b513      	push	{r0, r1, r4, lr}
 8000372:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8000374:	f7ff fff6 	bl	8000364 <HAL_GetTick>
 8000378:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800037a:	f7ff fff3 	bl	8000364 <HAL_GetTick>
 800037e:	9b01      	ldr	r3, [sp, #4]
 8000380:	1b00      	subs	r0, r0, r4
 8000382:	4298      	cmp	r0, r3
 8000384:	d3f9      	bcc.n	800037a <HAL_Delay+0xa>
  {
  }
}
 8000386:	b002      	add	sp, #8
 8000388:	bd10      	pop	{r4, pc}
	...

0800038c <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800038c:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800038e:	4604      	mov	r4, r0
 8000390:	2800      	cmp	r0, #0
 8000392:	f000 809e 	beq.w	80004d2 <HAL_ADC_Init+0x146>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000396:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000398:	b923      	cbnz	r3, 80003a4 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800039a:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800039c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80003a0:	f005 f90e 	bl	80055c0 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80003a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80003a6:	06db      	lsls	r3, r3, #27
 80003a8:	f100 808e 	bmi.w	80004c8 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80003ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80003ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80003b2:	f023 0302 	bic.w	r3, r3, #2
 80003b6:	f043 0302 	orr.w	r3, r3, #2
 80003ba:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80003bc:	4b46      	ldr	r3, [pc, #280]	; (80004d8 <HAL_ADC_Init+0x14c>)
 80003be:	685a      	ldr	r2, [r3, #4]
 80003c0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80003c4:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80003c6:	6859      	ldr	r1, [r3, #4]
 80003c8:	6862      	ldr	r2, [r4, #4]
 80003ca:	430a      	orrs	r2, r1
 80003cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80003ce:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80003d0:	6921      	ldr	r1, [r4, #16]
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80003d2:	685a      	ldr	r2, [r3, #4]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80003d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80003d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80003da:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80003dc:	685a      	ldr	r2, [r3, #4]
 80003de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80003e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80003e4:	685a      	ldr	r2, [r3, #4]
 80003e6:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80003ea:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80003ec:	68a2      	ldr	r2, [r4, #8]
 80003ee:	6859      	ldr	r1, [r3, #4]
 80003f0:	430a      	orrs	r2, r1
 80003f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80003f4:	689a      	ldr	r2, [r3, #8]
 80003f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80003fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80003fc:	68e2      	ldr	r2, [r4, #12]
 80003fe:	6899      	ldr	r1, [r3, #8]
 8000400:	430a      	orrs	r2, r1
 8000402:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000404:	4a35      	ldr	r2, [pc, #212]	; (80004dc <HAL_ADC_Init+0x150>)
 8000406:	4290      	cmp	r0, r2
 8000408:	d00e      	beq.n	8000428 <HAL_ADC_Init+0x9c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800040a:	6899      	ldr	r1, [r3, #8]
 800040c:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000410:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000412:	689a      	ldr	r2, [r3, #8]
 8000414:	4302      	orrs	r2, r0
 8000416:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000418:	689a      	ldr	r2, [r3, #8]
 800041a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800041e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000420:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000422:	6899      	ldr	r1, [r3, #8]
 8000424:	430a      	orrs	r2, r1
 8000426:	e006      	b.n	8000436 <HAL_ADC_Init+0xaa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000428:	689a      	ldr	r2, [r3, #8]
 800042a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800042e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000430:	689a      	ldr	r2, [r3, #8]
 8000432:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000436:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000438:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800043a:	69a1      	ldr	r1, [r4, #24]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800043c:	f022 0202 	bic.w	r2, r2, #2
 8000440:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000442:	689a      	ldr	r2, [r3, #8]
 8000444:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000448:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800044a:	6a22      	ldr	r2, [r4, #32]
 800044c:	b19a      	cbz	r2, 8000476 <HAL_ADC_Init+0xea>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800044e:	685a      	ldr	r2, [r3, #4]
 8000450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000454:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000456:	685a      	ldr	r2, [r3, #4]
 8000458:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800045c:	605a      	str	r2, [r3, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800045e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000462:	fa92 f2a2 	rbit	r2, r2
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000466:	fab2 f182 	clz	r1, r2
 800046a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800046c:	6858      	ldr	r0, [r3, #4]
 800046e:	3a01      	subs	r2, #1
 8000470:	408a      	lsls	r2, r1
 8000472:	4302      	orrs	r2, r0
 8000474:	e002      	b.n	800047c <HAL_ADC_Init+0xf0>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000476:	685a      	ldr	r2, [r3, #4]
 8000478:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800047c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC parameters */
    ADC_Init(hadc);
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800047e:	2000      	movs	r0, #0
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000482:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000486:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000488:	69e2      	ldr	r2, [r4, #28]
 800048a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800048c:	3a01      	subs	r2, #1
 800048e:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000492:	6b21      	ldr	r1, [r4, #48]	; 0x30
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000494:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000496:	689a      	ldr	r2, [r3, #8]
 8000498:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800049c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800049e:	689a      	ldr	r2, [r3, #8]
 80004a0:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80004a4:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80004a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80004a8:	689a      	ldr	r2, [r3, #8]
 80004aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80004ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80004b0:	689a      	ldr	r2, [r3, #8]
 80004b2:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80004b6:	609a      	str	r2, [r3, #8]
    
    /* Set ADC parameters */
    ADC_Init(hadc);
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80004b8:	6460      	str	r0, [r4, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80004ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80004bc:	f023 0303 	bic.w	r3, r3, #3
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	6423      	str	r3, [r4, #64]	; 0x40
 80004c6:	e000      	b.n	80004ca <HAL_ADC_Init+0x13e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80004c8:	2001      	movs	r0, #1
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80004ca:	2300      	movs	r3, #0
 80004cc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80004d0:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 80004d2:	2001      	movs	r0, #1
  /* Release Lock */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	bf00      	nop
 80004d8:	40012300 	.word	0x40012300
 80004dc:	0f000001 	.word	0x0f000001

080004e0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80004e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80004e2:	4613      	mov	r3, r2
  __IO uint32_t counter = 0;
 80004e4:	2200      	movs	r2, #0
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80004e6:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 80004e8:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80004ea:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80004ee:	2a01      	cmp	r2, #1
 80004f0:	d064      	beq.n	80005bc <HAL_ADC_Start_DMA+0xdc>
 80004f2:	2201      	movs	r2, #1
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80004f4:	6805      	ldr	r5, [r0, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80004f6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80004fa:	68aa      	ldr	r2, [r5, #8]
 80004fc:	07d2      	lsls	r2, r2, #31
 80004fe:	d503      	bpl.n	8000508 <HAL_ADC_Start_DMA+0x28>
      counter--;
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000500:	68aa      	ldr	r2, [r5, #8]
 8000502:	07d0      	lsls	r0, r2, #31
 8000504:	d413      	bmi.n	800052e <HAL_ADC_Start_DMA+0x4e>
 8000506:	e04e      	b.n	80005a6 <HAL_ADC_Start_DMA+0xc6>
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000508:	68aa      	ldr	r2, [r5, #8]
 800050a:	f042 0201 	orr.w	r2, r2, #1
 800050e:	60aa      	str	r2, [r5, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000510:	4a2c      	ldr	r2, [pc, #176]	; (80005c4 <HAL_ADC_Start_DMA+0xe4>)
 8000512:	6810      	ldr	r0, [r2, #0]
 8000514:	4a2c      	ldr	r2, [pc, #176]	; (80005c8 <HAL_ADC_Start_DMA+0xe8>)
 8000516:	fbb0 f0f2 	udiv	r0, r0, r2
 800051a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800051e:	9001      	str	r0, [sp, #4]
    while(counter != 0)
 8000520:	9a01      	ldr	r2, [sp, #4]
 8000522:	2a00      	cmp	r2, #0
 8000524:	d0ec      	beq.n	8000500 <HAL_ADC_Start_DMA+0x20>
    {
      counter--;
 8000526:	9a01      	ldr	r2, [sp, #4]
 8000528:	3a01      	subs	r2, #1
 800052a:	9201      	str	r2, [sp, #4]
 800052c:	e7f8      	b.n	8000520 <HAL_ADC_Start_DMA+0x40>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800052e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000530:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8000534:	f020 0001 	bic.w	r0, r0, #1
 8000538:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800053c:	6420      	str	r0, [r4, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800053e:	686a      	ldr	r2, [r5, #4]
 8000540:	0552      	lsls	r2, r2, #21
 8000542:	d505      	bpl.n	8000550 <HAL_ADC_Start_DMA+0x70>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000544:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000546:	f420 5040 	bic.w	r0, r0, #12288	; 0x3000
 800054a:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800054e:	6420      	str	r0, [r4, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000550:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000552:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000556:	d002      	beq.n	800055e <HAL_ADC_Start_DMA+0x7e>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000558:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800055a:	f022 0206 	bic.w	r2, r2, #6
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800055e:	6462      	str	r2, [r4, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000560:	2200      	movs	r2, #0

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000562:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000564:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000568:	4a18      	ldr	r2, [pc, #96]	; (80005cc <HAL_ADC_Start_DMA+0xec>)
 800056a:	63c2      	str	r2, [r0, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800056c:	4a18      	ldr	r2, [pc, #96]	; (80005d0 <HAL_ADC_Start_DMA+0xf0>)
 800056e:	6402      	str	r2, [r0, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000570:	4a18      	ldr	r2, [pc, #96]	; (80005d4 <HAL_ADC_Start_DMA+0xf4>)
 8000572:	64c2      	str	r2, [r0, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000574:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000578:	602a      	str	r2, [r5, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800057a:	686a      	ldr	r2, [r5, #4]
 800057c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000580:	606a      	str	r2, [r5, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000582:	68aa      	ldr	r2, [r5, #8]
 8000584:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000588:	60aa      	str	r2, [r5, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800058a:	460a      	mov	r2, r1
 800058c:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 8000590:	f000 fa40 	bl	8000a14 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8000594:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <HAL_ADC_Start_DMA+0xf8>)
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	f013 0f1f 	tst.w	r3, #31
 800059c:	6823      	ldr	r3, [r4, #0]
 800059e:	d004      	beq.n	80005aa <HAL_ADC_Start_DMA+0xca>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80005a0:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <HAL_ADC_Start_DMA+0xfc>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d001      	beq.n	80005aa <HAL_ADC_Start_DMA+0xca>
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80005a6:	2000      	movs	r0, #0
 80005a8:	e009      	b.n	80005be <HAL_ADC_Start_DMA+0xde>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80005aa:	6898      	ldr	r0, [r3, #8]
 80005ac:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80005b0:	d1f9      	bne.n	80005a6 <HAL_ADC_Start_DMA+0xc6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80005b2:	689a      	ldr	r2, [r3, #8]
 80005b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	e000      	b.n	80005be <HAL_ADC_Start_DMA+0xde>
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80005bc:	2002      	movs	r0, #2
    }
  }
  
  /* Return function status */
  return HAL_OK;
}
 80005be:	b003      	add	sp, #12
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop
 80005c4:	20000014 	.word	0x20000014
 80005c8:	000f4240 	.word	0x000f4240
 80005cc:	0800063b 	.word	0x0800063b
 80005d0:	0800069d 	.word	0x0800069d
 80005d4:	080006a9 	.word	0x080006a9
 80005d8:	40012300 	.word	0x40012300
 80005dc:	40012000 	.word	0x40012000

080005e0 <HAL_ADC_Stop_DMA>:
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80005e0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80005e4:	2b01      	cmp	r3, #1
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80005e6:	b510      	push	{r4, lr}
 80005e8:	4604      	mov	r4, r0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80005ea:	d024      	beq.n	8000636 <HAL_ADC_Stop_DMA+0x56>
 80005ec:	2301      	movs	r3, #1
 80005ee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80005f2:	6803      	ldr	r3, [r0, #0]
 80005f4:	689a      	ldr	r2, [r3, #8]
 80005f6:	f022 0201 	bic.w	r2, r2, #1
 80005fa:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80005fc:	689a      	ldr	r2, [r3, #8]
 80005fe:	07d2      	lsls	r2, r2, #31
 8000600:	d414      	bmi.n	800062c <HAL_ADC_Stop_DMA+0x4c>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8000602:	689a      	ldr	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8000604:	6b80      	ldr	r0, [r0, #56]	; 0x38
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8000606:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800060a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800060c:	f000 fa41 	bl	8000a92 <HAL_DMA_Abort>
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8000610:	6822      	ldr	r2, [r4, #0]
 8000612:	6853      	ldr	r3, [r2, #4]
 8000614:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000618:	6053      	str	r3, [r2, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800061a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800061c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000620:	f023 0301 	bic.w	r3, r3, #1
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6423      	str	r3, [r4, #64]	; 0x40
 800062a:	e000      	b.n	800062e <HAL_ADC_Stop_DMA+0x4e>
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800062c:	2000      	movs	r0, #0
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800062e:	2300      	movs	r3, #0
 8000630:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8000634:	bd10      	pop	{r4, pc}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000636:	2002      	movs	r0, #2
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
}
 8000638:	bd10      	pop	{r4, pc}

0800063a <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800063a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800063c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800063e:	f012 0f50 	tst.w	r2, #80	; 0x50
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000642:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000644:	d124      	bne.n	8000690 <ADC_DMAConvCplt+0x56>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000646:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800064c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	6891      	ldr	r1, [r2, #8]
 8000652:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8000656:	d117      	bne.n	8000688 <ADC_DMAConvCplt+0x4e>
 8000658:	6999      	ldr	r1, [r3, #24]
 800065a:	b9a9      	cbnz	r1, 8000688 <ADC_DMAConvCplt+0x4e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800065c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800065e:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 8000662:	d002      	beq.n	800066a <ADC_DMAConvCplt+0x30>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000664:	6891      	ldr	r1, [r2, #8]
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000666:	0549      	lsls	r1, r1, #21
 8000668:	d40e      	bmi.n	8000688 <ADC_DMAConvCplt+0x4e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800066a:	6851      	ldr	r1, [r2, #4]
 800066c:	f021 0120 	bic.w	r1, r1, #32
 8000670:	6051      	str	r1, [r2, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000672:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000674:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000678:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800067a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800067c:	04d2      	lsls	r2, r2, #19
 800067e:	d403      	bmi.n	8000688 <ADC_DMAConvCplt+0x4e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000680:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000682:	f042 0201 	orr.w	r2, r2, #1
 8000686:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 8000688:	4618      	mov	r0, r3
 800068a:	f003 feeb 	bl	8004464 <HAL_ADC_ConvCpltCallback>
 800068e:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  }
}
 8000692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_ADC_ConvCpltCallback(hadc);
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000698:	4718      	bx	r3

0800069a <HAL_ADC_ConvHalfCpltCallback>:
 800069a:	4770      	bx	lr

0800069c <ADC_DMAHalfConvCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800069c:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* Conversion complete callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800069e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80006a0:	f7ff fffb 	bl	800069a <HAL_ADC_ConvHalfCpltCallback>
 80006a4:	bd08      	pop	{r3, pc}

080006a6 <HAL_ADC_ErrorCallback>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80006a6:	4770      	bx	lr

080006a8 <ADC_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80006a8:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80006aa:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80006ac:	2340      	movs	r3, #64	; 0x40
 80006ae:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80006b0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80006b2:	f043 0304 	orr.w	r3, r3, #4
 80006b6:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_ADC_ErrorCallback(hadc); 
 80006b8:	f7ff fff5 	bl	80006a6 <HAL_ADC_ErrorCallback>
 80006bc:	bd08      	pop	{r3, pc}
	...

080006c0 <HAL_ADC_ConfigChannel>:
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  __IO uint32_t counter = 0;
 80006c0:	2300      	movs	r3, #0
  *         the configuration information for the specified ADC.
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80006c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 80006c4:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006c6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d070      	beq.n	80007b0 <HAL_ADC_ConfigChannel+0xf0>
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 80006ce:	680d      	ldr	r5, [r1, #0]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006d0:	2301      	movs	r3, #1
 80006d2:	6804      	ldr	r4, [r0, #0]
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 80006d4:	2d09      	cmp	r5, #9
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006d6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80006da:	b2ae      	uxth	r6, r5
 80006dc:	688f      	ldr	r7, [r1, #8]
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 80006de:	d917      	bls.n	8000710 <HAL_ADC_ConfigChannel+0x50>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80006e0:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 80006e4:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 80006e8:	f1a2 031e 	sub.w	r3, r2, #30
 80006ec:	2207      	movs	r2, #7
 80006ee:	409a      	lsls	r2, r3
 80006f0:	ea2e 0202 	bic.w	r2, lr, r2
 80006f4:	60e2      	str	r2, [r4, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80006f6:	4a3d      	ldr	r2, [pc, #244]	; (80007ec <HAL_ADC_ConfigChannel+0x12c>)
 80006f8:	4295      	cmp	r5, r2
 80006fa:	d103      	bne.n	8000704 <HAL_ADC_ConfigChannel+0x44>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80006fc:	68e3      	ldr	r3, [r4, #12]
 80006fe:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 8000702:	e003      	b.n	800070c <HAL_ADC_ConfigChannel+0x4c>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000704:	68e2      	ldr	r2, [r4, #12]
 8000706:	fa07 f303 	lsl.w	r3, r7, r3
 800070a:	4313      	orrs	r3, r2
 800070c:	60e3      	str	r3, [r4, #12]
 800070e:	e00e      	b.n	800072e <HAL_ADC_ConfigChannel+0x6e>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000710:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000714:	f04f 0e07 	mov.w	lr, #7
 8000718:	6922      	ldr	r2, [r4, #16]
 800071a:	fa0e fe03 	lsl.w	lr, lr, r3
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800071e:	fa07 f303 	lsl.w	r3, r7, r3
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000722:	ea22 020e 	bic.w	r2, r2, lr
 8000726:	6122      	str	r2, [r4, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000728:	6922      	ldr	r2, [r4, #16]
 800072a:	4313      	orrs	r3, r2
 800072c:	6123      	str	r3, [r4, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800072e:	684b      	ldr	r3, [r1, #4]
 8000730:	2b06      	cmp	r3, #6
 8000732:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8000736:	d80d      	bhi.n	8000754 <HAL_ADC_ConfigChannel+0x94>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000738:	4413      	add	r3, r2
 800073a:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800073c:	1f59      	subs	r1, r3, #5
 800073e:	231f      	movs	r3, #31
 8000740:	408b      	lsls	r3, r1
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000742:	fa06 f101 	lsl.w	r1, r6, r1
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000746:	ea27 0303 	bic.w	r3, r7, r3
 800074a:	6363      	str	r3, [r4, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800074c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800074e:	4311      	orrs	r1, r2
 8000750:	6361      	str	r1, [r4, #52]	; 0x34
 8000752:	e01d      	b.n	8000790 <HAL_ADC_ConfigChannel+0xd0>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000754:	2b0c      	cmp	r3, #12
 8000756:	d80e      	bhi.n	8000776 <HAL_ADC_ConfigChannel+0xb6>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000758:	4413      	add	r3, r2
 800075a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800075c:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000760:	231f      	movs	r3, #31
 8000762:	4093      	lsls	r3, r2
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000764:	fa06 f202 	lsl.w	r2, r6, r2
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000768:	ea21 0303 	bic.w	r3, r1, r3
 800076c:	6323      	str	r3, [r4, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800076e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000770:	431a      	orrs	r2, r3
 8000772:	6322      	str	r2, [r4, #48]	; 0x30
 8000774:	e00c      	b.n	8000790 <HAL_ADC_ConfigChannel+0xd0>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000776:	4413      	add	r3, r2
 8000778:	221f      	movs	r2, #31
 800077a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800077c:	3b41      	subs	r3, #65	; 0x41
 800077e:	409a      	lsls	r2, r3
 8000780:	ea27 0202 	bic.w	r2, r7, r2
 8000784:	62e2      	str	r2, [r4, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000786:	fa06 f203 	lsl.w	r2, r6, r3
 800078a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800078c:	430a      	orrs	r2, r1
 800078e:	62e2      	str	r2, [r4, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000790:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <HAL_ADC_ConfigChannel+0x130>)
 8000792:	429c      	cmp	r4, r3
 8000794:	d004      	beq.n	80007a0 <HAL_ADC_ConfigChannel+0xe0>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000796:	2300      	movs	r3, #0
 8000798:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800079c:	4618      	mov	r0, r3
 800079e:	e023      	b.n	80007e8 <HAL_ADC_ConfigChannel+0x128>
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80007a0:	2d12      	cmp	r5, #18
 80007a2:	d107      	bne.n	80007b4 <HAL_ADC_ConfigChannel+0xf4>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80007a4:	4a13      	ldr	r2, [pc, #76]	; (80007f4 <HAL_ADC_ConfigChannel+0x134>)
 80007a6:	6853      	ldr	r3, [r2, #4]
 80007a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007ac:	6053      	str	r3, [r2, #4]
 80007ae:	e7f2      	b.n	8000796 <HAL_ADC_ConfigChannel+0xd6>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80007b0:	2002      	movs	r0, #2
 80007b2:	e019      	b.n	80007e8 <HAL_ADC_ConfigChannel+0x128>
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80007b4:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <HAL_ADC_ConfigChannel+0x12c>)
 80007b6:	429d      	cmp	r5, r3
 80007b8:	d001      	beq.n	80007be <HAL_ADC_ConfigChannel+0xfe>
 80007ba:	2d11      	cmp	r5, #17
 80007bc:	d1eb      	bne.n	8000796 <HAL_ADC_ConfigChannel+0xd6>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80007be:	490d      	ldr	r1, [pc, #52]	; (80007f4 <HAL_ADC_ConfigChannel+0x134>)

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80007c0:	429d      	cmp	r5, r3
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80007c2:	684a      	ldr	r2, [r1, #4]
 80007c4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80007c8:	604a      	str	r2, [r1, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80007ca:	d1e4      	bne.n	8000796 <HAL_ADC_ConfigChannel+0xd6>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <HAL_ADC_ConfigChannel+0x138>)
 80007ce:	4a0b      	ldr	r2, [pc, #44]	; (80007fc <HAL_ADC_ConfigChannel+0x13c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80007d6:	230a      	movs	r3, #10
 80007d8:	4353      	muls	r3, r2
      while(counter != 0)
      {
        counter--;
 80007da:	9301      	str	r3, [sp, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
      while(counter != 0)
 80007dc:	9b01      	ldr	r3, [sp, #4]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d0d9      	beq.n	8000796 <HAL_ADC_ConfigChannel+0xd6>
      {
        counter--;
 80007e2:	9b01      	ldr	r3, [sp, #4]
 80007e4:	3b01      	subs	r3, #1
 80007e6:	e7f8      	b.n	80007da <HAL_ADC_ConfigChannel+0x11a>
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return HAL_OK;
}
 80007e8:	b003      	add	sp, #12
 80007ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ec:	10000012 	.word	0x10000012
 80007f0:	40012000 	.word	0x40012000
 80007f4:	40012300 	.word	0x40012300
 80007f8:	20000014 	.word	0x20000014
 80007fc:	000f4240 	.word	0x000f4240

08000800 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000800:	4a07      	ldr	r2, [pc, #28]	; (8000820 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000802:	0200      	lsls	r0, r0, #8
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000804:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000806:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800080a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800080e:	041b      	lsls	r3, r3, #16
 8000810:	0c1b      	lsrs	r3, r3, #16
 8000812:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800081a:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800081c:	60d3      	str	r3, [r2, #12]
 800081e:	4770      	bx	lr
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000824:	4b19      	ldr	r3, [pc, #100]	; (800088c <HAL_NVIC_SetPriority+0x68>)
 8000826:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000828:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800082c:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800082e:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000832:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000834:	2c04      	cmp	r4, #4
 8000836:	bf28      	it	cs
 8000838:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800083a:	2d06      	cmp	r5, #6

  return (
 800083c:	f04f 0501 	mov.w	r5, #1
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000840:	bf8c      	ite	hi
 8000842:	3b03      	subhi	r3, #3
 8000844:	2300      	movls	r3, #0

  return (
 8000846:	fa05 f404 	lsl.w	r4, r5, r4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800084a:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800084c:	f104 34ff 	add.w	r4, r4, #4294967295
 8000850:	ea04 0401 	and.w	r4, r4, r1
 8000854:	fa04 f403 	lsl.w	r4, r4, r3
 8000858:	fa05 f303 	lsl.w	r3, r5, r3
 800085c:	f103 33ff 	add.w	r3, r3, #4294967295
 8000860:	ea02 0203 	and.w	r2, r2, r3
 8000864:	ea42 0204 	orr.w	r2, r2, r4
 8000868:	ea4f 1202 	mov.w	r2, r2, lsl #4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800086c:	da05      	bge.n	800087a <HAL_NVIC_SetPriority+0x56>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800086e:	f000 000f 	and.w	r0, r0, #15
 8000872:	b2d2      	uxtb	r2, r2
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_NVIC_SetPriority+0x6c>)
 8000876:	541a      	strb	r2, [r3, r0]
 8000878:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800087a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800087e:	b2d2      	uxtb	r2, r2
 8000880:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000884:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000888:	bd30      	pop	{r4, r5, pc}
 800088a:	bf00      	nop
 800088c:	e000ed00 	.word	0xe000ed00
 8000890:	e000ed14 	.word	0xe000ed14

08000894 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000894:	0942      	lsrs	r2, r0, #5
 8000896:	2301      	movs	r3, #1
 8000898:	f000 001f 	and.w	r0, r0, #31
 800089c:	fa03 f000 	lsl.w	r0, r3, r0
 80008a0:	4b01      	ldr	r3, [pc, #4]	; (80008a8 <HAL_NVIC_EnableIRQ+0x14>)
 80008a2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80008a6:	4770      	bx	lr
 80008a8:	e000e100 	.word	0xe000e100

080008ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008ac:	3801      	subs	r0, #1
 80008ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80008b2:	d20a      	bcs.n	80008ca <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b6:	21f0      	movs	r1, #240	; 0xf0
 80008b8:	4a06      	ldr	r2, [pc, #24]	; (80008d4 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ba:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008bc:	2000      	movs	r0, #0
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008be:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008c2:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008c4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000e010 	.word	0xe000e010
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80008d8:	4b04      	ldr	r3, [pc, #16]	; (80008ec <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80008da:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	bf0c      	ite	eq
 80008e0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80008e4:	f022 0204 	bicne.w	r2, r2, #4
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	4770      	bx	lr
 80008ec:	e000e010 	.word	0xe000e010

080008f0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80008f0:	4770      	bx	lr

080008f2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80008f2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80008f4:	f7ff fffc 	bl	80008f0 <HAL_SYSTICK_Callback>
 80008f8:	bd08      	pop	{r3, pc}
	...

080008fc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80008fc:	6803      	ldr	r3, [r0, #0]
 80008fe:	2118      	movs	r1, #24
 8000900:	b2da      	uxtb	r2, r3
 8000902:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000906:	3a10      	subs	r2, #16
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000908:	f023 0303 	bic.w	r3, r3, #3
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800090c:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000910:	4904      	ldr	r1, [pc, #16]	; (8000924 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000912:	2a03      	cmp	r2, #3
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000914:	5c89      	ldrb	r1, [r1, r2]
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000916:	bf88      	it	hi
 8000918:	3304      	addhi	r3, #4
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800091a:	65c1      	str	r1, [r0, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800091c:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 800091e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	08006250 	.word	0x08006250

08000928 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000928:	b570      	push	{r4, r5, r6, lr}
 800092a:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 800092c:	f7ff fd1a 	bl	8000364 <HAL_GetTick>
 8000930:	4605      	mov	r5, r0
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000932:	2c00      	cmp	r4, #0
 8000934:	d064      	beq.n	8000a00 <HAL_DMA_Init+0xd8>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000936:	2300      	movs	r3, #0

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000938:	6822      	ldr	r2, [r4, #0]
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800093a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800093e:	2302      	movs	r3, #2
 8000940:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000944:	6813      	ldr	r3, [r2, #0]
 8000946:	f023 0301 	bic.w	r3, r3, #1
 800094a:	6013      	str	r3, [r2, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800094c:	6821      	ldr	r1, [r4, #0]
 800094e:	680b      	ldr	r3, [r1, #0]
 8000950:	07d8      	lsls	r0, r3, #31
 8000952:	d508      	bpl.n	8000966 <HAL_DMA_Init+0x3e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000954:	f7ff fd06 	bl	8000364 <HAL_GetTick>
 8000958:	1b40      	subs	r0, r0, r5
 800095a:	2805      	cmp	r0, #5
 800095c:	d9f6      	bls.n	800094c <HAL_DMA_Init+0x24>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800095e:	2320      	movs	r3, #32
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000960:	2003      	movs	r0, #3
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000962:	6563      	str	r3, [r4, #84]	; 0x54
 8000964:	e051      	b.n	8000a0a <HAL_DMA_Init+0xe2>
      return HAL_TIMEOUT;
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000966:	680b      	ldr	r3, [r1, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000968:	4a29      	ldr	r2, [pc, #164]	; (8000a10 <HAL_DMA_Init+0xe8>)
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800096a:	6865      	ldr	r5, [r4, #4]
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800096c:	401a      	ands	r2, r3
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800096e:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000970:	69a0      	ldr	r0, [r4, #24]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000972:	431d      	orrs	r5, r3
 8000974:	68e3      	ldr	r3, [r4, #12]
 8000976:	431d      	orrs	r5, r3
 8000978:	6923      	ldr	r3, [r4, #16]
 800097a:	431d      	orrs	r5, r3
 800097c:	6963      	ldr	r3, [r4, #20]
 800097e:	432b      	orrs	r3, r5
 8000980:	69e5      	ldr	r5, [r4, #28]
 8000982:	4303      	orrs	r3, r0
 8000984:	432b      	orrs	r3, r5
 8000986:	6a25      	ldr	r5, [r4, #32]
 8000988:	432b      	orrs	r3, r5
 800098a:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800098c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800098e:	2a04      	cmp	r2, #4
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000990:	bf01      	itttt	eq
 8000992:	6b25      	ldreq	r5, [r4, #48]	; 0x30
 8000994:	6ae6      	ldreq	r6, [r4, #44]	; 0x2c
 8000996:	4335      	orreq	r5, r6
 8000998:	432b      	orreq	r3, r5

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800099a:	2a04      	cmp	r2, #4
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800099c:	600b      	str	r3, [r1, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800099e:	694b      	ldr	r3, [r1, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80009a0:	f023 0307 	bic.w	r3, r3, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80009a4:	ea43 0302 	orr.w	r3, r3, r2

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80009a8:	d11c      	bne.n	80009e4 <HAL_DMA_Init+0xbc>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80009aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80009ac:	4313      	orrs	r3, r2
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80009ae:	b920      	cbnz	r0, 80009ba <HAL_DMA_Init+0x92>
  {
    switch (tmp)
 80009b0:	2a01      	cmp	r2, #1
 80009b2:	d00b      	beq.n	80009cc <HAL_DMA_Init+0xa4>
 80009b4:	d313      	bcc.n	80009de <HAL_DMA_Init+0xb6>
 80009b6:	2a02      	cmp	r2, #2
 80009b8:	e010      	b.n	80009dc <HAL_DMA_Init+0xb4>
        break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80009ba:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80009be:	d10a      	bne.n	80009d6 <HAL_DMA_Init+0xae>
  {
    switch (tmp)
 80009c0:	2a03      	cmp	r2, #3
 80009c2:	d80f      	bhi.n	80009e4 <HAL_DMA_Init+0xbc>
 80009c4:	e8df f002 	tbb	[pc, r2]
 80009c8:	021e0b1e 	.word	0x021e0b1e
        break;
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80009cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80009ce:	f1b2 7fc0 	cmp.w	r2, #25165824	; 0x1800000
 80009d2:	d107      	bne.n	80009e4 <HAL_DMA_Init+0xbc>
 80009d4:	e016      	b.n	8000a04 <HAL_DMA_Init+0xdc>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80009d6:	2a02      	cmp	r2, #2
 80009d8:	d914      	bls.n	8000a04 <HAL_DMA_Init+0xdc>
 80009da:	2a03      	cmp	r2, #3
 80009dc:	d102      	bne.n	80009e4 <HAL_DMA_Init+0xbc>
      case DMA_FIFO_THRESHOLD_HALFFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80009de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80009e0:	01d2      	lsls	r2, r2, #7
 80009e2:	d40f      	bmi.n	8000a04 <HAL_DMA_Init+0xdc>
      return HAL_ERROR; 
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80009e4:	614b      	str	r3, [r1, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80009e6:	4620      	mov	r0, r4
 80009e8:	f7ff ff88 	bl	80008fc <DMA_CalcBaseAndBitshift>
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009ec:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80009ee:	233f      	movs	r3, #63	; 0x3f
 80009f0:	4093      	lsls	r3, r2
 80009f2:	6083      	str	r3, [r0, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009f4:	2000      	movs	r0, #0
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009f6:	2301      	movs	r3, #1
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009f8:	6560      	str	r0, [r4, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009fa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8000a00:	2001      	movs	r0, #1
 8000a02:	bd70      	pop	{r4, r5, r6, pc}
    tmp |= hdma->Init.FIFOThreshold;
    
    if (DMA_CheckFifoParam(hdma) != HAL_OK)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000a04:	2340      	movs	r3, #64	; 0x40
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000a06:	2001      	movs	r0, #1
    tmp |= hdma->Init.FIFOThreshold;
    
    if (DMA_CheckFifoParam(hdma) != HAL_OK)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000a08:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000a0a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 8000a0e:	bd70      	pop	{r4, r5, r6, pc}
 8000a10:	f010803f 	.word	0xf010803f

08000a14 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a14:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a16:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000a1a:	2c01      	cmp	r4, #1
 8000a1c:	d037      	beq.n	8000a8e <HAL_DMA_Start_IT+0x7a>
 8000a1e:	2401      	movs	r4, #1
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a20:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8000a22:	2500      	movs	r5, #0
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a24:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a28:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8000a2c:	2c01      	cmp	r4, #1
 8000a2e:	f04f 0402 	mov.w	r4, #2
 8000a32:	d128      	bne.n	8000a86 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a34:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000a38:	6804      	ldr	r4, [r0, #0]
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a3a:	6545      	str	r5, [r0, #84]	; 0x54
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000a3c:	6825      	ldr	r5, [r4, #0]
 8000a3e:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000a42:	6025      	str	r5, [r4, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000a44:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000a46:	6883      	ldr	r3, [r0, #8]
 8000a48:	2b40      	cmp	r3, #64	; 0x40
 8000a4a:	d102      	bne.n	8000a52 <HAL_DMA_Start_IT+0x3e>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000a4c:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000a4e:	60e1      	str	r1, [r4, #12]
 8000a50:	e001      	b.n	8000a56 <HAL_DMA_Start_IT+0x42>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8000a52:	60a1      	str	r1, [r4, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000a54:	60e2      	str	r2, [r4, #12]
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a56:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000a58:	233f      	movs	r3, #63	; 0x3f
 8000a5a:	4093      	lsls	r3, r2
 8000a5c:	60b3      	str	r3, [r6, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000a5e:	6823      	ldr	r3, [r4, #0]
 8000a60:	f043 0316 	orr.w	r3, r3, #22
 8000a64:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000a66:	6963      	ldr	r3, [r4, #20]
 8000a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a6c:	6163      	str	r3, [r4, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000a6e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000a70:	b11b      	cbz	r3, 8000a7a <HAL_DMA_Start_IT+0x66>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000a72:	6823      	ldr	r3, [r4, #0]
 8000a74:	f043 0308 	orr.w	r3, r3, #8
 8000a78:	6023      	str	r3, [r4, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000a7a:	6823      	ldr	r3, [r4, #0]
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;
 8000a7c:	2000      	movs	r0, #0
    {
      hdma->Instance->CR  |= DMA_IT_HT;
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	6023      	str	r3, [r4, #0]
 8000a84:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000a86:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000a8a:	4620      	mov	r0, r4
 8000a8c:	bd70      	pop	{r4, r5, r6, pc}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a8e:	2002      	movs	r0, #2
    /* Return error status */
    status = HAL_BUSY;
  }
  
  return status;
}
 8000a90:	bd70      	pop	{r4, r5, r6, pc}

08000a92 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a92:	b570      	push	{r4, r5, r6, lr}
 8000a94:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a96:	6d85      	ldr	r5, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8000a98:	f7ff fc64 	bl	8000364 <HAL_GetTick>
 8000a9c:	4606      	mov	r6, r0
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a9e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8000aa2:	2b02      	cmp	r3, #2
 8000aa4:	d006      	beq.n	8000ab4 <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000aa6:	2380      	movs	r3, #128	; 0x80
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    return HAL_ERROR;
 8000aa8:	2001      	movs	r0, #1
  
  uint32_t tickstart = HAL_GetTick();
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000aaa:	6563      	str	r3, [r4, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aac:	2300      	movs	r3, #0
 8000aae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    return HAL_ERROR;
 8000ab2:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ab4:	6823      	ldr	r3, [r4, #0]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	f022 0216 	bic.w	r2, r2, #22
 8000abc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000abe:	695a      	ldr	r2, [r3, #20]
 8000ac0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ac4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ac6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000ac8:	b90a      	cbnz	r2, 8000ace <HAL_DMA_Abort+0x3c>
 8000aca:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000acc:	b11a      	cbz	r2, 8000ad6 <HAL_DMA_Abort+0x44>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	f022 0208 	bic.w	r2, r2, #8
 8000ad4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	f022 0201 	bic.w	r2, r2, #1
 8000adc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ade:	6823      	ldr	r3, [r4, #0]
 8000ae0:	6818      	ldr	r0, [r3, #0]
 8000ae2:	f010 0001 	ands.w	r0, r0, #1
 8000ae6:	d00d      	beq.n	8000b04 <HAL_DMA_Abort+0x72>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ae8:	f7ff fc3c 	bl	8000364 <HAL_GetTick>
 8000aec:	1b80      	subs	r0, r0, r6
 8000aee:	2805      	cmp	r0, #5
 8000af0:	d9f5      	bls.n	8000ade <HAL_DMA_Abort+0x4c>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000af2:	2320      	movs	r3, #32
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000af4:	2003      	movs	r0, #3
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000af6:	6563      	str	r3, [r4, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000af8:	2300      	movs	r3, #0
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000afa:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000afe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
        
        return HAL_TIMEOUT;
 8000b02:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b04:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000b06:	233f      	movs	r3, #63	; 0x3f
 8000b08:	4093      	lsls	r3, r2
 8000b0a:	60ab      	str	r3, [r5, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000b0c:	2301      	movs	r3, #1
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b0e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000b12:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  }
  return HAL_OK;
}
 8000b16:	bd70      	pop	{r4, r5, r6, pc}

08000b18 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b18:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	d003      	beq.n	8000b28 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b20:	2380      	movs	r3, #128	; 0x80
 8000b22:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000b24:	2001      	movs	r0, #1
 8000b26:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000b28:	6802      	ldr	r2, [r0, #0]
    return HAL_ERROR;
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000b2a:	2305      	movs	r3, #5
 8000b2c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
  }

  return HAL_OK;
 8000b30:	2000      	movs	r0, #0
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000b32:	6813      	ldr	r3, [r2, #0]
 8000b34:	f023 0301 	bic.w	r3, r3, #1
 8000b38:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
}
 8000b3a:	4770      	bx	lr

08000b3c <HAL_DMA_IRQHandler>:
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8000b3c:	2300      	movs	r3, #0
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8000b40:	9301      	str	r3, [sp, #4]
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b42:	4604      	mov	r4, r0
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8000b44:	4b59      	ldr	r3, [pc, #356]	; (8000cac <HAL_DMA_IRQHandler+0x170>)

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000b46:	6d85      	ldr	r5, [r0, #88]	; 0x58
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8000b48:	681f      	ldr	r7, [r3, #0]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  uint32_t timeout = SystemCoreClock / 9600;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;
 8000b4e:	682e      	ldr	r6, [r5, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b50:	4093      	lsls	r3, r2
 8000b52:	421e      	tst	r6, r3
 8000b54:	d00c      	beq.n	8000b70 <HAL_DMA_IRQHandler+0x34>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000b56:	6801      	ldr	r1, [r0, #0]
 8000b58:	6808      	ldr	r0, [r1, #0]
 8000b5a:	0740      	lsls	r0, r0, #29
 8000b5c:	d508      	bpl.n	8000b70 <HAL_DMA_IRQHandler+0x34>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000b5e:	6808      	ldr	r0, [r1, #0]
 8000b60:	f020 0004 	bic.w	r0, r0, #4
 8000b64:	6008      	str	r0, [r1, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000b66:	60ab      	str	r3, [r5, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000b68:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b70:	4b4f      	ldr	r3, [pc, #316]	; (8000cb0 <HAL_DMA_IRQHandler+0x174>)
 8000b72:	4093      	lsls	r3, r2
 8000b74:	421e      	tst	r6, r3
 8000b76:	d008      	beq.n	8000b8a <HAL_DMA_IRQHandler+0x4e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000b78:	6821      	ldr	r1, [r4, #0]
 8000b7a:	6949      	ldr	r1, [r1, #20]
 8000b7c:	0609      	lsls	r1, r1, #24
 8000b7e:	d504      	bpl.n	8000b8a <HAL_DMA_IRQHandler+0x4e>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000b80:	60ab      	str	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000b82:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b84:	f043 0302 	orr.w	r3, r3, #2
 8000b88:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b8a:	4b4a      	ldr	r3, [pc, #296]	; (8000cb4 <HAL_DMA_IRQHandler+0x178>)
 8000b8c:	4093      	lsls	r3, r2
 8000b8e:	421e      	tst	r6, r3
 8000b90:	d008      	beq.n	8000ba4 <HAL_DMA_IRQHandler+0x68>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000b92:	6821      	ldr	r1, [r4, #0]
 8000b94:	6809      	ldr	r1, [r1, #0]
 8000b96:	0788      	lsls	r0, r1, #30
 8000b98:	d504      	bpl.n	8000ba4 <HAL_DMA_IRQHandler+0x68>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000b9a:	60ab      	str	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000b9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b9e:	f043 0304 	orr.w	r3, r3, #4
 8000ba2:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000ba4:	2310      	movs	r3, #16
 8000ba6:	fa03 f202 	lsl.w	r2, r3, r2
 8000baa:	4216      	tst	r6, r2
 8000bac:	d017      	beq.n	8000bde <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000bae:	6823      	ldr	r3, [r4, #0]
 8000bb0:	6819      	ldr	r1, [r3, #0]
 8000bb2:	0709      	lsls	r1, r1, #28
 8000bb4:	d513      	bpl.n	8000bde <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000bb6:	60aa      	str	r2, [r5, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	0350      	lsls	r0, r2, #13
 8000bbc:	d504      	bpl.n	8000bc8 <HAL_DMA_IRQHandler+0x8c>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	0319      	lsls	r1, r3, #12
 8000bc2:	d508      	bpl.n	8000bd6 <HAL_DMA_IRQHandler+0x9a>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000bc4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000bc6:	e007      	b.n	8000bd8 <HAL_DMA_IRQHandler+0x9c>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	05d2      	lsls	r2, r2, #23
 8000bcc:	d403      	bmi.n	8000bd6 <HAL_DMA_IRQHandler+0x9a>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	f022 0208 	bic.w	r2, r2, #8
 8000bd4:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000bd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000bd8:	b10b      	cbz	r3, 8000bde <HAL_DMA_IRQHandler+0xa2>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000bda:	4620      	mov	r0, r4
 8000bdc:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000bde:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000be0:	2220      	movs	r2, #32
 8000be2:	408a      	lsls	r2, r1
 8000be4:	4216      	tst	r6, r2
 8000be6:	d03b      	beq.n	8000c60 <HAL_DMA_IRQHandler+0x124>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000be8:	6823      	ldr	r3, [r4, #0]
 8000bea:	6818      	ldr	r0, [r3, #0]
 8000bec:	06c6      	lsls	r6, r0, #27
 8000bee:	d537      	bpl.n	8000c60 <HAL_DMA_IRQHandler+0x124>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000bf0:	60aa      	str	r2, [r5, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000bf2:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000bf6:	2a05      	cmp	r2, #5
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000bf8:	681a      	ldr	r2, [r3, #0]
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000bfa:	d119      	bne.n	8000c30 <HAL_DMA_IRQHandler+0xf4>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000bfc:	f022 0216 	bic.w	r2, r2, #22
 8000c00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c02:	695a      	ldr	r2, [r3, #20]
 8000c04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c08:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c0a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000c0c:	b90a      	cbnz	r2, 8000c12 <HAL_DMA_IRQHandler+0xd6>
 8000c0e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000c10:	b11a      	cbz	r2, 8000c1a <HAL_DMA_IRQHandler+0xde>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	f022 0208 	bic.w	r2, r2, #8
 8000c18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c1a:	233f      	movs	r3, #63	; 0x3f
 8000c1c:	408b      	lsls	r3, r1
 8000c1e:	60ab      	str	r3, [r5, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c20:	2300      	movs	r3, #0
 8000c22:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
         
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000c26:	2301      	movs	r3, #1
 8000c28:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	
        if(hdma->XferAbortCallback != NULL)
 8000c2c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000c2e:	e037      	b.n	8000ca0 <HAL_DMA_IRQHandler+0x164>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }
      
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c30:	0350      	lsls	r0, r2, #13
 8000c32:	d504      	bpl.n	8000c3e <HAL_DMA_IRQHandler+0x102>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	0319      	lsls	r1, r3, #12
 8000c38:	d40e      	bmi.n	8000c58 <HAL_DMA_IRQHandler+0x11c>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000c3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c3c:	e00d      	b.n	8000c5a <HAL_DMA_IRQHandler+0x11e>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000c44:	d108      	bne.n	8000c58 <HAL_DMA_IRQHandler+0x11c>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000c46:	6819      	ldr	r1, [r3, #0]
 8000c48:	f021 0110 	bic.w	r1, r1, #16
 8000c4c:	6019      	str	r1, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
          
          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c4e:	2301      	movs	r3, #1
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000c50:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          
          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c54:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        }
        
        if(hdma->XferCpltCallback != NULL)
 8000c58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000c5a:	b10b      	cbz	r3, 8000c60 <HAL_DMA_IRQHandler+0x124>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000c5c:	4620      	mov	r0, r4
 8000c5e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000c60:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000c62:	b303      	cbz	r3, 8000ca6 <HAL_DMA_IRQHandler+0x16a>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000c64:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000c66:	07da      	lsls	r2, r3, #31
 8000c68:	d519      	bpl.n	8000c9e <HAL_DMA_IRQHandler+0x162>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000c6a:	2305      	movs	r3, #5
      
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000c6c:	6822      	ldr	r2, [r4, #0]
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000c6e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000c72:	6813      	ldr	r3, [r2, #0]
 8000c74:	f023 0301 	bic.w	r3, r3, #1
 8000c78:	6013      	str	r3, [r2, #0]
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8000c7a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000c7e:	fbb7 f7f3 	udiv	r7, r7, r3
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
      
      do
      {
        if (++count > timeout)
 8000c82:	9b01      	ldr	r3, [sp, #4]
 8000c84:	3301      	adds	r3, #1
 8000c86:	429f      	cmp	r7, r3
 8000c88:	9301      	str	r3, [sp, #4]
 8000c8a:	d302      	bcc.n	8000c92 <HAL_DMA_IRQHandler+0x156>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000c8c:	6813      	ldr	r3, [r2, #0]
 8000c8e:	07db      	lsls	r3, r3, #31
 8000c90:	d4f7      	bmi.n	8000c82 <HAL_DMA_IRQHandler+0x146>

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000c92:	2300      	movs	r3, #0
 8000c94:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    }
    
    if(hdma->XferErrorCallback != NULL)
 8000c9e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000ca0:	b10b      	cbz	r3, 8000ca6 <HAL_DMA_IRQHandler+0x16a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000ca2:	4620      	mov	r0, r4
 8000ca4:	4798      	blx	r3
    }
  }
}
 8000ca6:	b003      	add	sp, #12
 8000ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000014 	.word	0x20000014
 8000cb0:	00800001 	.word	0x00800001
 8000cb4:	00800004 	.word	0x00800004

08000cb8 <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000cb8:	4909      	ldr	r1, [pc, #36]	; (8000ce0 <FLASH_Program_DoubleWord+0x28>)
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000cba:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000cbc:	690c      	ldr	r4, [r1, #16]
 8000cbe:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8000cc2:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8000cc4:	690c      	ldr	r4, [r1, #16]
 8000cc6:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8000cca:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000ccc:	690c      	ldr	r4, [r1, #16]
 8000cce:	f044 0401 	orr.w	r4, r4, #1
 8000cd2:	610c      	str	r4, [r1, #16]
  
  *(__IO uint64_t*)Address = Data;
 8000cd4:	e9c0 2300 	strd	r2, r3, [r0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000cd8:	f3bf 8f4f 	dsb	sy
 8000cdc:	bd10      	pop	{r4, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023c00 	.word	0x40023c00

08000ce4 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <FLASH_Program_Word+0x24>)
 8000ce6:	691a      	ldr	r2, [r3, #16]
 8000ce8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000cec:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8000cee:	691a      	ldr	r2, [r3, #16]
 8000cf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cf4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000cf6:	691a      	ldr	r2, [r3, #16]
 8000cf8:	f042 0201 	orr.w	r2, r2, #1
 8000cfc:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 8000cfe:	6001      	str	r1, [r0, #0]
 8000d00:	f3bf 8f4f 	dsb	sy
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	40023c00 	.word	0x40023c00

08000d0c <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <FLASH_Program_HalfWord+0x24>)
 8000d0e:	691a      	ldr	r2, [r3, #16]
 8000d10:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000d14:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8000d16:	691a      	ldr	r2, [r3, #16]
 8000d18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d1c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000d1e:	691a      	ldr	r2, [r3, #16]
 8000d20:	f042 0201 	orr.w	r2, r2, #1
 8000d24:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 8000d26:	8001      	strh	r1, [r0, #0]
 8000d28:	f3bf 8f4f 	dsb	sy
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	40023c00 	.word	0x40023c00

08000d34 <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000d34:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <FLASH_Program_Byte+0x20>)
 8000d36:	691a      	ldr	r2, [r3, #16]
 8000d38:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000d3c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8000d3e:	691a      	ldr	r2, [r3, #16]
 8000d40:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000d42:	691a      	ldr	r2, [r3, #16]
 8000d44:	f042 0201 	orr.w	r2, r2, #1
 8000d48:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t*)Address = Data;
 8000d4a:	7001      	strb	r1, [r0, #0]
 8000d4c:	f3bf 8f4f 	dsb	sy
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	40023c00 	.word	0x40023c00

08000d58 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <FLASH_SetErrorCode+0x5c>)
 8000d5a:	68da      	ldr	r2, [r3, #12]
 8000d5c:	0792      	lsls	r2, r2, #30
 8000d5e:	d504      	bpl.n	8000d6a <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8000d60:	4915      	ldr	r1, [pc, #84]	; (8000db8 <FLASH_SetErrorCode+0x60>)
 8000d62:	698a      	ldr	r2, [r1, #24]
 8000d64:	f042 0220 	orr.w	r2, r2, #32
 8000d68:	618a      	str	r2, [r1, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	06db      	lsls	r3, r3, #27
 8000d6e:	d504      	bpl.n	8000d7a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000d70:	4a11      	ldr	r2, [pc, #68]	; (8000db8 <FLASH_SetErrorCode+0x60>)
 8000d72:	6993      	ldr	r3, [r2, #24]
 8000d74:	f043 0310 	orr.w	r3, r3, #16
 8000d78:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <FLASH_SetErrorCode+0x5c>)
 8000d7c:	68da      	ldr	r2, [r3, #12]
 8000d7e:	0690      	lsls	r0, r2, #26
 8000d80:	d504      	bpl.n	8000d8c <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000d82:	490d      	ldr	r1, [pc, #52]	; (8000db8 <FLASH_SetErrorCode+0x60>)
 8000d84:	698a      	ldr	r2, [r1, #24]
 8000d86:	f042 0208 	orr.w	r2, r2, #8
 8000d8a:	618a      	str	r2, [r1, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	0659      	lsls	r1, r3, #25
 8000d90:	d504      	bpl.n	8000d9c <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8000d92:	4a09      	ldr	r2, [pc, #36]	; (8000db8 <FLASH_SetErrorCode+0x60>)
 8000d94:	6993      	ldr	r3, [r2, #24]
 8000d96:	f043 0304 	orr.w	r3, r3, #4
 8000d9a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <FLASH_SetErrorCode+0x5c>)
 8000d9e:	68da      	ldr	r2, [r3, #12]
 8000da0:	0612      	lsls	r2, r2, #24
 8000da2:	d504      	bpl.n	8000dae <FLASH_SetErrorCode+0x56>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8000da4:	4904      	ldr	r1, [pc, #16]	; (8000db8 <FLASH_SetErrorCode+0x60>)
 8000da6:	698a      	ldr	r2, [r1, #24]
 8000da8:	f042 0202 	orr.w	r2, r2, #2
 8000dac:	618a      	str	r2, [r1, #24]
  }
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8000dae:	22f2      	movs	r2, #242	; 0xf2
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	4770      	bx	lr
 8000db4:	40023c00 	.word	0x40023c00
 8000db8:	20004564 	.word	0x20004564

08000dbc <HAL_FLASH_Unlock>:
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_FLASH_Unlock+0x1c>)
 8000dbe:	691a      	ldr	r2, [r3, #16]
 8000dc0:	2a00      	cmp	r2, #0
 8000dc2:	da06      	bge.n	8000dd2 <HAL_FLASH_Unlock+0x16>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8000dc4:	4a05      	ldr	r2, [pc, #20]	; (8000ddc <HAL_FLASH_Unlock+0x20>)
  else
  {
    return HAL_ERROR;
  }
  
  return HAL_OK; 
 8000dc6:	2000      	movs	r0, #0
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8000dc8:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8000dca:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8000dce:	605a      	str	r2, [r3, #4]
  else
  {
    return HAL_ERROR;
  }
  
  return HAL_OK; 
 8000dd0:	4770      	bx	lr
    FLASH->KEYR = FLASH_KEY1;
    FLASH->KEYR = FLASH_KEY2;
  }
  else
  {
    return HAL_ERROR;
 8000dd2:	2001      	movs	r0, #1
  }
  
  return HAL_OK; 
}
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	40023c00 	.word	0x40023c00
 8000ddc:	45670123 	.word	0x45670123

08000de0 <HAL_FLASH_Lock>:
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000de0:	4a03      	ldr	r2, [pc, #12]	; (8000df0 <HAL_FLASH_Lock+0x10>)
  
  return HAL_OK;  
}
 8000de2:	2000      	movs	r0, #0
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000de4:	6913      	ldr	r3, [r2, #16]
 8000de6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dea:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
}
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	40023c00 	.word	0x40023c00

08000df4 <FLASH_WaitForLastOperation>:
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
  uint32_t tickstart = 0;
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000df4:	2200      	movs	r2, #0
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <FLASH_WaitForLastOperation+0x54>)
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout: maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8000df8:	b570      	push	{r4, r5, r6, lr}
 8000dfa:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000dfc:	619a      	str	r2, [r3, #24]
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000dfe:	4d13      	ldr	r5, [pc, #76]	; (8000e4c <FLASH_WaitForLastOperation+0x58>)
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8000e00:	f7ff fab0 	bl	8000364 <HAL_GetTick>
 8000e04:	4606      	mov	r6, r0

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000e06:	68eb      	ldr	r3, [r5, #12]
 8000e08:	4a10      	ldr	r2, [pc, #64]	; (8000e4c <FLASH_WaitForLastOperation+0x58>)
 8000e0a:	03db      	lsls	r3, r3, #15
 8000e0c:	d50a      	bpl.n	8000e24 <FLASH_WaitForLastOperation+0x30>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8000e0e:	1c62      	adds	r2, r4, #1
 8000e10:	d0f9      	beq.n	8000e06 <FLASH_WaitForLastOperation+0x12>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8000e12:	b90c      	cbnz	r4, 8000e18 <FLASH_WaitForLastOperation+0x24>
      {
        return HAL_TIMEOUT;
 8000e14:	2003      	movs	r0, #3
 8000e16:	bd70      	pop	{r4, r5, r6, pc}

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
  { 
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8000e18:	f7ff faa4 	bl	8000364 <HAL_GetTick>
 8000e1c:	1b80      	subs	r0, r0, r6
 8000e1e:	4284      	cmp	r4, r0
 8000e20:	d2f1      	bcs.n	8000e06 <FLASH_WaitForLastOperation+0x12>
 8000e22:	e7f7      	b.n	8000e14 <FLASH_WaitForLastOperation+0x20>
        return HAL_TIMEOUT;
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8000e24:	68d0      	ldr	r0, [r2, #12]
 8000e26:	f010 00f2 	ands.w	r0, r0, #242	; 0xf2
 8000e2a:	d003      	beq.n	8000e34 <FLASH_WaitForLastOperation+0x40>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000e2c:	f7ff ff94 	bl	8000d58 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000e30:	2001      	movs	r0, #1
 8000e32:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000e34:	68d3      	ldr	r3, [r2, #12]
 8000e36:	f013 0301 	ands.w	r3, r3, #1
 8000e3a:	d002      	beq.n	8000e42 <FLASH_WaitForLastOperation+0x4e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	60d3      	str	r3, [r2, #12]
 8000e40:	bd70      	pop	{r4, r5, r6, pc}
  }

  /* If there is an error flag set */
  return HAL_OK;
 8000e42:	4618      	mov	r0, r3
  
}  
 8000e44:	bd70      	pop	{r4, r5, r6, pc}
 8000e46:	bf00      	nop
 8000e48:	20004564 	.word	0x20004564
 8000e4c:	40023c00 	.word	0x40023c00

08000e50 <HAL_FLASH_Program>:
  * @param  Data: specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000e54:	4c1c      	ldr	r4, [pc, #112]	; (8000ec8 <HAL_FLASH_Program+0x78>)
  * @param  Data: specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000e56:	4698      	mov	r8, r3
 8000e58:	4607      	mov	r7, r0
 8000e5a:	460d      	mov	r5, r1
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000e5c:	7d23      	ldrb	r3, [r4, #20]
  * @param  Data: specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000e5e:	4616      	mov	r6, r2
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d02d      	beq.n	8000ec0 <HAL_FLASH_Program+0x70>
 8000e64:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e66:	f24c 3050 	movw	r0, #50000	; 0xc350
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000e6a:	7523      	strb	r3, [r4, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e6c:	f7ff ffc2 	bl	8000df4 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 8000e70:	bb10      	cbnz	r0, 8000eb8 <HAL_FLASH_Program+0x68>
  {
    switch(TypeProgram)
 8000e72:	2f03      	cmp	r7, #3
 8000e74:	d817      	bhi.n	8000ea6 <HAL_FLASH_Program+0x56>
 8000e76:	e8df f007 	tbb	[pc, r7]
 8000e7a:	0702      	.short	0x0702
 8000e7c:	110c      	.short	0x110c
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8000e7e:	b2f1      	uxtb	r1, r6
 8000e80:	4628      	mov	r0, r5
 8000e82:	f7ff ff57 	bl	8000d34 <FLASH_Program_Byte>
        break;
 8000e86:	e00e      	b.n	8000ea6 <HAL_FLASH_Program+0x56>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000e88:	b2b1      	uxth	r1, r6
 8000e8a:	4628      	mov	r0, r5
 8000e8c:	f7ff ff3e 	bl	8000d0c <FLASH_Program_HalfWord>
        break;
 8000e90:	e009      	b.n	8000ea6 <HAL_FLASH_Program+0x56>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8000e92:	4631      	mov	r1, r6
 8000e94:	4628      	mov	r0, r5
 8000e96:	f7ff ff25 	bl	8000ce4 <FLASH_Program_Word>
        break;
 8000e9a:	e004      	b.n	8000ea6 <HAL_FLASH_Program+0x56>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 8000e9c:	4632      	mov	r2, r6
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	4628      	mov	r0, r5
 8000ea2:	f7ff ff09 	bl	8000cb8 <FLASH_Program_DoubleWord>
      }
      default :
        break;
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ea6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000eaa:	f7ff ffa3 	bl	8000df4 <FLASH_WaitForLastOperation>
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8000eae:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <HAL_FLASH_Program+0x7c>)
 8000eb0:	6913      	ldr	r3, [r2, #16]
 8000eb2:	f023 0301 	bic.w	r3, r3, #1
 8000eb6:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000eb8:	2300      	movs	r3, #0
 8000eba:	7523      	strb	r3, [r4, #20]

  return status;
 8000ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000ec0:	2002      	movs	r0, #2

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);

  return status;
}
 8000ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20004564 	.word	0x20004564
 8000ecc:	40023c00 	.word	0x40023c00

08000ed0 <FLASH_MassErase>:
{
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <FLASH_MassErase+0x24>)
 8000ed2:	691a      	ldr	r2, [r3, #16]
 8000ed4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000ed8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 8000eda:	691a      	ldr	r2, [r3, #16]
 8000edc:	f042 0204 	orr.w	r2, r2, #4
 8000ee0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 8000ee2:	691a      	ldr	r2, [r3, #16]
 8000ee4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000ee8:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8000eec:	6118      	str	r0, [r3, #16]
 8000eee:	f3bf 8f4f 	dsb	sy
 8000ef2:	4770      	bx	lr
 8000ef4:	40023c00 	.word	0x40023c00

08000ef8 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8000ef8:	b151      	cbz	r1, 8000f10 <FLASH_Erase_Sector+0x18>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8000efa:	2901      	cmp	r1, #1
 8000efc:	d006      	beq.n	8000f0c <FLASH_Erase_Sector+0x14>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8000efe:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8000f00:	bf0c      	ite	eq
 8000f02:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8000f06:	f44f 7140 	movne.w	r1, #768	; 0x300
 8000f0a:	e001      	b.n	8000f10 <FLASH_Erase_Sector+0x18>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8000f0c:	f44f 7180 	mov.w	r1, #256	; 0x100
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
  }

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <FLASH_Erase_Sector+0x54>)
 8000f12:	691a      	ldr	r2, [r3, #16]
 8000f14:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000f18:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8000f1a:	691a      	ldr	r2, [r3, #16]
 8000f1c:	4311      	orrs	r1, r2
 8000f1e:	6119      	str	r1, [r3, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f20:	2178      	movs	r1, #120	; 0x78
  FLASH->CR &= SECTOR_MASK;
 8000f22:	691a      	ldr	r2, [r3, #16]
 8000f24:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000f28:	611a      	str	r2, [r3, #16]
 8000f2a:	fa91 f1a1 	rbit	r1, r1
  FLASH->CR |= FLASH_CR_SER | (Sector << POSITION_VAL(FLASH_CR_SNB));
 8000f2e:	691a      	ldr	r2, [r3, #16]
 8000f30:	fab1 f181 	clz	r1, r1
 8000f34:	f042 0202 	orr.w	r2, r2, #2
 8000f38:	4088      	lsls	r0, r1
 8000f3a:	4310      	orrs	r0, r2
 8000f3c:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8000f3e:	691a      	ldr	r2, [r3, #16]
 8000f40:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f44:	611a      	str	r2, [r3, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f46:	f3bf 8f4f 	dsb	sy
 8000f4a:	4770      	bx	lr
 8000f4c:	40023c00 	.word	0x40023c00

08000f50 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8000f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t index = 0;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f54:	4e23      	ldr	r6, [pc, #140]	; (8000fe4 <HAL_FLASHEx_Erase+0x94>)
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8000f56:	4605      	mov	r5, r0
 8000f58:	4688      	mov	r8, r1
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t index = 0;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f5a:	7d33      	ldrb	r3, [r6, #20]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d03e      	beq.n	8000fde <HAL_FLASHEx_Erase+0x8e>
 8000f60:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f62:	f24c 3050 	movw	r0, #50000	; 0xc350
{
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t index = 0;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f66:	7533      	strb	r3, [r6, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f68:	f7ff ff44 	bl	8000df4 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 8000f6c:	4604      	mov	r4, r0
 8000f6e:	bb88      	cbnz	r0, 8000fd4 <HAL_FLASHEx_Erase+0x84>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8000f70:	f04f 33ff 	mov.w	r3, #4294967295
 8000f74:	f8c8 3000 	str.w	r3, [r8]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000f78:	682b      	ldr	r3, [r5, #0]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d10d      	bne.n	8000f9a <HAL_FLASHEx_Erase+0x4a>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
 8000f7e:	7b28      	ldrb	r0, [r5, #12]
 8000f80:	f7ff ffa6 	bl	8000ed0 <FLASH_MassErase>
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f84:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f88:	f7ff ff34 	bl	8000df4 <FLASH_WaitForLastOperation>
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8000f8c:	4a16      	ldr	r2, [pc, #88]	; (8000fe8 <HAL_FLASHEx_Erase+0x98>)
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f8e:	4604      	mov	r4, r0
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8000f90:	6913      	ldr	r3, [r2, #16]
 8000f92:	f023 0304 	bic.w	r3, r3, #4
 8000f96:	6113      	str	r3, [r2, #16]
 8000f98:	e01c      	b.n	8000fd4 <HAL_FLASHEx_Erase+0x84>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000f9a:	686f      	ldr	r7, [r5, #4]

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8000f9c:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8000fe8 <HAL_FLASHEx_Erase+0x98>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000fa0:	68aa      	ldr	r2, [r5, #8]
 8000fa2:	686b      	ldr	r3, [r5, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	429f      	cmp	r7, r3
 8000fa8:	d214      	bcs.n	8000fd4 <HAL_FLASHEx_Erase+0x84>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8000faa:	7b29      	ldrb	r1, [r5, #12]
 8000fac:	4638      	mov	r0, r7
 8000fae:	f7ff ffa3 	bl	8000ef8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fb2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fb6:	f7ff ff1d 	bl	8000df4 <FLASH_WaitForLastOperation>
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8000fba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8000fbe:	f023 037a 	bic.w	r3, r3, #122	; 0x7a
 8000fc2:	f8c9 3010 	str.w	r3, [r9, #16]

        if(status != HAL_OK) 
 8000fc6:	b118      	cbz	r0, 8000fd0 <HAL_FLASHEx_Erase+0x80>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8000fc8:	f8c8 7000 	str.w	r7, [r8]
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fcc:	4604      	mov	r4, r0

        if(status != HAL_OK) 
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
          break;
 8000fce:	e001      	b.n	8000fd4 <HAL_FLASHEx_Erase+0x84>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000fd0:	3701      	adds	r7, #1
 8000fd2:	e7e5      	b.n	8000fa0 <HAL_FLASHEx_Erase+0x50>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000fd4:	2300      	movs	r3, #0

  return status;
 8000fd6:	4620      	mov	r0, r4
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000fd8:	7533      	strb	r3, [r6, #20]

  return status;
 8000fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
{
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t index = 0;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000fde:	2002      	movs	r0, #2

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);

  return status;
}
 8000fe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000fe4:	20004564 	.word	0x20004564
 8000fe8:	40023c00 	.word	0x40023c00

08000fec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff0:	680b      	ldr	r3, [r1, #0]
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff2:	b085      	sub	sp, #20
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ff4:	4e6f      	ldr	r6, [pc, #444]	; (80011b4 <HAL_GPIO_Init+0x1c8>)
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff6:	9301      	str	r3, [sp, #4]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ff8:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffa:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 80011bc <HAL_GPIO_Init+0x1d0>
 8000ffe:	46b6      	mov	lr, r6

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001000:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80011c0 <HAL_GPIO_Init+0x1d4>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001004:	2201      	movs	r2, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8001006:	9c01      	ldr	r4, [sp, #4]

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001008:	409a      	lsls	r2, r3
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 800100a:	ea32 0404 	bics.w	r4, r2, r4
 800100e:	f040 80c9 	bne.w	80011a4 <HAL_GPIO_Init+0x1b8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001012:	684c      	ldr	r4, [r1, #4]
 8001014:	f024 0910 	bic.w	r9, r4, #16
 8001018:	f1b9 0f02 	cmp.w	r9, #2
 800101c:	d114      	bne.n	8001048 <HAL_GPIO_Init+0x5c>
 800101e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001022:	f003 0b07 	and.w	fp, r3, #7
 8001026:	250f      	movs	r5, #15
 8001028:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800102c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001030:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001034:	fa05 f50b 	lsl.w	r5, r5, fp
 8001038:	ea27 0505 	bic.w	r5, r7, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800103c:	690f      	ldr	r7, [r1, #16]
 800103e:	fa07 f70b 	lsl.w	r7, r7, fp
 8001042:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3] = temp;
 8001044:	f8ca 7020 	str.w	r7, [sl, #32]
 8001048:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800104c:	2503      	movs	r5, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800104e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001050:	f004 0b03 	and.w	fp, r4, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001054:	fa05 f50a 	lsl.w	r5, r5, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001058:	f109 39ff 	add.w	r9, r9, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800105c:	fa0b fb0a 	lsl.w	fp, fp, sl
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001060:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001062:	f1b9 0f01 	cmp.w	r9, #1
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001066:	ea07 0705 	and.w	r7, r7, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800106a:	ea4b 0707 	orr.w	r7, fp, r7
      GPIOx->MODER = temp;
 800106e:	6007      	str	r7, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001070:	d812      	bhi.n	8001098 <HAL_GPIO_Init+0xac>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001072:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001074:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8001078:	68cf      	ldr	r7, [r1, #12]
 800107a:	fa07 f70a 	lsl.w	r7, r7, sl
 800107e:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001082:	f3c4 1900 	ubfx	r9, r4, #4, #1
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
        GPIOx->OSPEEDR = temp;
 8001086:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001088:	fa09 f903 	lsl.w	r9, r9, r3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800108c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800108e:	ea27 0702 	bic.w	r7, r7, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001092:	ea49 0707 	orr.w	r7, r9, r7
        GPIOx->OTYPER = temp;
 8001096:	6047      	str	r7, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001098:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800109a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800109c:	688f      	ldr	r7, [r1, #8]
 800109e:	fa07 f70a 	lsl.w	r7, r7, sl
 80010a2:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80010a4:	60c5      	str	r5, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010a6:	00e5      	lsls	r5, r4, #3
 80010a8:	d57c      	bpl.n	80011a4 <HAL_GPIO_Init+0x1b8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010aa:	f8dc 5044 	ldr.w	r5, [ip, #68]	; 0x44
 80010ae:	f023 0703 	bic.w	r7, r3, #3

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010b2:	f003 0a03 	and.w	sl, r3, #3
 80010b6:	f04f 090f 	mov.w	r9, #15
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ba:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 80010be:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010c2:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c6:	f8cc 5044 	str.w	r5, [ip, #68]	; 0x44
 80010ca:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 80010ce:	f8dc 5044 	ldr.w	r5, [ip, #68]	; 0x44
 80010d2:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 80010d6:	9503      	str	r5, [sp, #12]
 80010d8:	9d03      	ldr	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010da:	fa09 f50a 	lsl.w	r5, r9, sl
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
 80010de:	f8d7 b008 	ldr.w	fp, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010e2:	ea2b 0905 	bic.w	r9, fp, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80010e6:	4d34      	ldr	r5, [pc, #208]	; (80011b8 <HAL_GPIO_Init+0x1cc>)
 80010e8:	42a8      	cmp	r0, r5
 80010ea:	d024      	beq.n	8001136 <HAL_GPIO_Init+0x14a>
 80010ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010f0:	42a8      	cmp	r0, r5
 80010f2:	d022      	beq.n	800113a <HAL_GPIO_Init+0x14e>
 80010f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010f8:	42a8      	cmp	r0, r5
 80010fa:	d020      	beq.n	800113e <HAL_GPIO_Init+0x152>
 80010fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001100:	42a8      	cmp	r0, r5
 8001102:	d01e      	beq.n	8001142 <HAL_GPIO_Init+0x156>
 8001104:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001108:	42a8      	cmp	r0, r5
 800110a:	d01c      	beq.n	8001146 <HAL_GPIO_Init+0x15a>
 800110c:	4540      	cmp	r0, r8
 800110e:	d01c      	beq.n	800114a <HAL_GPIO_Init+0x15e>
 8001110:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001114:	42a8      	cmp	r0, r5
 8001116:	d01a      	beq.n	800114e <HAL_GPIO_Init+0x162>
 8001118:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800111c:	42a8      	cmp	r0, r5
 800111e:	d018      	beq.n	8001152 <HAL_GPIO_Init+0x166>
 8001120:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001124:	42a8      	cmp	r0, r5
 8001126:	d016      	beq.n	8001156 <HAL_GPIO_Init+0x16a>
 8001128:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800112c:	42a8      	cmp	r0, r5
 800112e:	bf14      	ite	ne
 8001130:	250a      	movne	r5, #10
 8001132:	2509      	moveq	r5, #9
 8001134:	e010      	b.n	8001158 <HAL_GPIO_Init+0x16c>
 8001136:	2500      	movs	r5, #0
 8001138:	e00e      	b.n	8001158 <HAL_GPIO_Init+0x16c>
 800113a:	2501      	movs	r5, #1
 800113c:	e00c      	b.n	8001158 <HAL_GPIO_Init+0x16c>
 800113e:	2502      	movs	r5, #2
 8001140:	e00a      	b.n	8001158 <HAL_GPIO_Init+0x16c>
 8001142:	2503      	movs	r5, #3
 8001144:	e008      	b.n	8001158 <HAL_GPIO_Init+0x16c>
 8001146:	2504      	movs	r5, #4
 8001148:	e006      	b.n	8001158 <HAL_GPIO_Init+0x16c>
 800114a:	2505      	movs	r5, #5
 800114c:	e004      	b.n	8001158 <HAL_GPIO_Init+0x16c>
 800114e:	2506      	movs	r5, #6
 8001150:	e002      	b.n	8001158 <HAL_GPIO_Init+0x16c>
 8001152:	2507      	movs	r5, #7
 8001154:	e000      	b.n	8001158 <HAL_GPIO_Init+0x16c>
 8001156:	2508      	movs	r5, #8
 8001158:	fa05 f50a 	lsl.w	r5, r5, sl
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800115c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001160:	ea45 0509 	orr.w	r5, r5, r9
        SYSCFG->EXTICR[position >> 2] = temp;
 8001164:	60bd      	str	r5, [r7, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8001166:	ea6f 0702 	mvn.w	r7, r2
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800116a:	6835      	ldr	r5, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 800116c:	bf0c      	ite	eq
 800116e:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8001170:	4315      	orrne	r5, r2
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001172:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8001176:	f8ce 5000 	str.w	r5, [lr]

        temp = EXTI->EMR;
 800117a:	f8de 5004 	ldr.w	r5, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 800117e:	bf0c      	ite	eq
 8001180:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8001182:	4315      	orrne	r5, r2
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001184:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8001188:	6075      	str	r5, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800118a:	68b5      	ldr	r5, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 800118c:	bf0c      	ite	eq
 800118e:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8001190:	4315      	orrne	r5, r2
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001192:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8001194:	f8ce 5008 	str.w	r5, [lr, #8]

        temp = EXTI->FTSR;
 8001198:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 800119c:	bf54      	ite	pl
 800119e:	403d      	andpl	r5, r7
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 80011a0:	4315      	orrmi	r5, r2
        }
        EXTI->FTSR = temp;
 80011a2:	60f5      	str	r5, [r6, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80011a4:	3301      	adds	r3, #1
 80011a6:	2b10      	cmp	r3, #16
 80011a8:	f47f af2c 	bne.w	8001004 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 80011ac:	b005      	add	sp, #20
 80011ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011b2:	bf00      	nop
 80011b4:	40013c00 	.word	0x40013c00
 80011b8:	40020000 	.word	0x40020000
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40021400 	.word	0x40021400

080011c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011c4:	b902      	cbnz	r2, 80011c8 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80011c6:	0409      	lsls	r1, r1, #16
 80011c8:	6181      	str	r1, [r0, #24]
 80011ca:	4770      	bx	lr

080011cc <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80011cc:	6943      	ldr	r3, [r0, #20]
 80011ce:	4059      	eors	r1, r3
 80011d0:	6141      	str	r1, [r0, #20]
 80011d2:	4770      	bx	lr

080011d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011d4:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80011d6:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80011d8:	6959      	ldr	r1, [r3, #20]
 80011da:	4201      	tst	r1, r0
 80011dc:	d002      	beq.n	80011e4 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011de:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011e0:	f002 fdd6 	bl	8003d90 <HAL_GPIO_EXTI_Callback>
 80011e4:	bd08      	pop	{r3, pc}
 80011e6:	bf00      	nop
 80011e8:	40013c00 	.word	0x40013c00

080011ec <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80011ec:	4b19      	ldr	r3, [pc, #100]	; (8001254 <HAL_PWREx_EnableOverDrive+0x68>)
 80011ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80011f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80011f6:	641a      	str	r2, [r3, #64]	; 0x40
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80011fa:	4c17      	ldr	r4, [pc, #92]	; (8001258 <HAL_PWREx_EnableOverDrive+0x6c>)
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80011fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001200:	4625      	mov	r5, r4
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001202:	9301      	str	r3, [sp, #4]
 8001204:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001206:	6823      	ldr	r3, [r4, #0]
 8001208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800120c:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800120e:	f7ff f8a9 	bl	8000364 <HAL_GetTick>
 8001212:	4606      	mov	r6, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001214:	686b      	ldr	r3, [r5, #4]
 8001216:	4c10      	ldr	r4, [pc, #64]	; (8001258 <HAL_PWREx_EnableOverDrive+0x6c>)
 8001218:	03da      	lsls	r2, r3, #15
 800121a:	d407      	bmi.n	800122c <HAL_PWREx_EnableOverDrive+0x40>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800121c:	f7ff f8a2 	bl	8000364 <HAL_GetTick>
 8001220:	1b80      	subs	r0, r0, r6
 8001222:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001226:	d9f5      	bls.n	8001214 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8001228:	2003      	movs	r0, #3
 800122a:	e011      	b.n	8001250 <HAL_PWREx_EnableOverDrive+0x64>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800122c:	6823      	ldr	r3, [r4, #0]
 800122e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001232:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001234:	f7ff f896 	bl	8000364 <HAL_GetTick>
 8001238:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800123a:	6863      	ldr	r3, [r4, #4]
 800123c:	039b      	lsls	r3, r3, #14
 800123e:	d406      	bmi.n	800124e <HAL_PWREx_EnableOverDrive+0x62>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001240:	f7ff f890 	bl	8000364 <HAL_GetTick>
 8001244:	1b40      	subs	r0, r0, r5
 8001246:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800124a:	d9f6      	bls.n	800123a <HAL_PWREx_EnableOverDrive+0x4e>
 800124c:	e7ec      	b.n	8001228 <HAL_PWREx_EnableOverDrive+0x3c>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800124e:	2000      	movs	r0, #0
}
 8001250:	b002      	add	sp, #8
 8001252:	bd70      	pop	{r4, r5, r6, pc}
 8001254:	40023800 	.word	0x40023800
 8001258:	40007000 	.word	0x40007000

0800125c <HAL_RCC_OscConfig>:
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800125c:	6803      	ldr	r3, [r0, #0]
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800125e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001260:	4604      	mov	r4, r0
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001262:	07d8      	lsls	r0, r3, #31
 8001264:	d403      	bmi.n	800126e <HAL_RCC_OscConfig+0x12>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001266:	6823      	ldr	r3, [r4, #0]
 8001268:	0799      	lsls	r1, r3, #30
 800126a:	d452      	bmi.n	8001312 <HAL_RCC_OscConfig+0xb6>
 800126c:	e0a5      	b.n	80013ba <HAL_RCC_OscConfig+0x15e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800126e:	4b96      	ldr	r3, [pc, #600]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	f002 020c 	and.w	r2, r2, #12
 8001276:	2a04      	cmp	r2, #4
 8001278:	d007      	beq.n	800128a <HAL_RCC_OscConfig+0x2e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800127a:	689a      	ldr	r2, [r3, #8]
 800127c:	f002 020c 	and.w	r2, r2, #12
 8001280:	2a08      	cmp	r2, #8
 8001282:	d10b      	bne.n	800129c <HAL_RCC_OscConfig+0x40>
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	025a      	lsls	r2, r3, #9
 8001288:	d508      	bpl.n	800129c <HAL_RCC_OscConfig+0x40>
    {
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800128a:	4b8f      	ldr	r3, [pc, #572]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	039b      	lsls	r3, r3, #14
 8001290:	d5e9      	bpl.n	8001266 <HAL_RCC_OscConfig+0xa>
 8001292:	6863      	ldr	r3, [r4, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1e6      	bne.n	8001266 <HAL_RCC_OscConfig+0xa>
      {
        return HAL_ERROR;
 8001298:	2001      	movs	r0, #1
 800129a:	e176      	b.n	800158a <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800129c:	6863      	ldr	r3, [r4, #4]
 800129e:	4d8a      	ldr	r5, [pc, #552]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a4:	d013      	beq.n	80012ce <HAL_RCC_OscConfig+0x72>
 80012a6:	b95b      	cbnz	r3, 80012c0 <HAL_RCC_OscConfig+0x64>
 80012a8:	682b      	ldr	r3, [r5, #0]
 80012aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ae:	602b      	str	r3, [r5, #0]
 80012b0:	682b      	ldr	r3, [r5, #0]
 80012b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012b6:	602b      	str	r3, [r5, #0]
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b8:	f7ff f854 	bl	8000364 <HAL_GetTick>
 80012bc:	4606      	mov	r6, r0
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012be:	e024      	b.n	800130a <HAL_RCC_OscConfig+0xae>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012c4:	682b      	ldr	r3, [r5, #0]
 80012c6:	d106      	bne.n	80012d6 <HAL_RCC_OscConfig+0x7a>
 80012c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012cc:	602b      	str	r3, [r5, #0]
 80012ce:	682b      	ldr	r3, [r5, #0]
 80012d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d4:	e005      	b.n	80012e2 <HAL_RCC_OscConfig+0x86>
 80012d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012da:	602b      	str	r3, [r5, #0]
 80012dc:	682b      	ldr	r3, [r5, #0]
 80012de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e2:	602b      	str	r3, [r5, #0]
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e4:	f7ff f83e 	bl	8000364 <HAL_GetTick>
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e8:	4d77      	ldr	r5, [pc, #476]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ea:	4606      	mov	r6, r0
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ec:	682b      	ldr	r3, [r5, #0]
 80012ee:	039f      	lsls	r7, r3, #14
 80012f0:	d4b9      	bmi.n	8001266 <HAL_RCC_OscConfig+0xa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f2:	f7ff f837 	bl	8000364 <HAL_GetTick>
 80012f6:	1b80      	subs	r0, r0, r6
 80012f8:	2864      	cmp	r0, #100	; 0x64
 80012fa:	d9f7      	bls.n	80012ec <HAL_RCC_OscConfig+0x90>
          {
            return HAL_TIMEOUT;
 80012fc:	2003      	movs	r0, #3
 80012fe:	e144      	b.n	800158a <HAL_RCC_OscConfig+0x32e>
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001300:	f7ff f830 	bl	8000364 <HAL_GetTick>
 8001304:	1b80      	subs	r0, r0, r6
 8001306:	2864      	cmp	r0, #100	; 0x64
 8001308:	d8f8      	bhi.n	80012fc <HAL_RCC_OscConfig+0xa0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130a:	682b      	ldr	r3, [r5, #0]
 800130c:	0398      	lsls	r0, r3, #14
 800130e:	d4f7      	bmi.n	8001300 <HAL_RCC_OscConfig+0xa4>
 8001310:	e7a9      	b.n	8001266 <HAL_RCC_OscConfig+0xa>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001312:	4b6d      	ldr	r3, [pc, #436]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	f012 0f0c 	tst.w	r2, #12
 800131a:	d007      	beq.n	800132c <HAL_RCC_OscConfig+0xd0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	f002 020c 	and.w	r2, r2, #12
 8001322:	2a08      	cmp	r2, #8
 8001324:	d117      	bne.n	8001356 <HAL_RCC_OscConfig+0xfa>
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	0259      	lsls	r1, r3, #9
 800132a:	d414      	bmi.n	8001356 <HAL_RCC_OscConfig+0xfa>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800132c:	4b66      	ldr	r3, [pc, #408]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	0792      	lsls	r2, r2, #30
 8001332:	d502      	bpl.n	800133a <HAL_RCC_OscConfig+0xde>
 8001334:	68e2      	ldr	r2, [r4, #12]
 8001336:	2a01      	cmp	r2, #1
 8001338:	d1ae      	bne.n	8001298 <HAL_RCC_OscConfig+0x3c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133a:	681a      	ldr	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133c:	21f8      	movs	r1, #248	; 0xf8
 800133e:	fa91 f1a1 	rbit	r1, r1
 8001342:	6920      	ldr	r0, [r4, #16]
 8001344:	fab1 f181 	clz	r1, r1
 8001348:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800134c:	fa00 f101 	lsl.w	r1, r0, r1
 8001350:	430a      	orrs	r2, r1
 8001352:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001354:	e031      	b.n	80013ba <HAL_RCC_OscConfig+0x15e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001356:	68e3      	ldr	r3, [r4, #12]
 8001358:	4d5b      	ldr	r5, [pc, #364]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 800135a:	b1f3      	cbz	r3, 800139a <HAL_RCC_OscConfig+0x13e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800135c:	682b      	ldr	r3, [r5, #0]
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001364:	f7fe fffe 	bl	8000364 <HAL_GetTick>
 8001368:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136a:	682b      	ldr	r3, [r5, #0]
 800136c:	4856      	ldr	r0, [pc, #344]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 800136e:	079b      	lsls	r3, r3, #30
 8001370:	d405      	bmi.n	800137e <HAL_RCC_OscConfig+0x122>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001372:	f7fe fff7 	bl	8000364 <HAL_GetTick>
 8001376:	1b80      	subs	r0, r0, r6
 8001378:	2802      	cmp	r0, #2
 800137a:	d9f6      	bls.n	800136a <HAL_RCC_OscConfig+0x10e>
 800137c:	e7be      	b.n	80012fc <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137e:	6803      	ldr	r3, [r0, #0]
 8001380:	22f8      	movs	r2, #248	; 0xf8
 8001382:	fa92 f2a2 	rbit	r2, r2
 8001386:	6921      	ldr	r1, [r4, #16]
 8001388:	fab2 f282 	clz	r2, r2
 800138c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001390:	fa01 f202 	lsl.w	r2, r1, r2
 8001394:	4313      	orrs	r3, r2
 8001396:	6003      	str	r3, [r0, #0]
 8001398:	e00f      	b.n	80013ba <HAL_RCC_OscConfig+0x15e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800139a:	682b      	ldr	r3, [r5, #0]
 800139c:	f023 0301 	bic.w	r3, r3, #1
 80013a0:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a2:	f7fe ffdf 	bl	8000364 <HAL_GetTick>
 80013a6:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a8:	682b      	ldr	r3, [r5, #0]
 80013aa:	079f      	lsls	r7, r3, #30
 80013ac:	d505      	bpl.n	80013ba <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ae:	f7fe ffd9 	bl	8000364 <HAL_GetTick>
 80013b2:	1b80      	subs	r0, r0, r6
 80013b4:	2802      	cmp	r0, #2
 80013b6:	d9f7      	bls.n	80013a8 <HAL_RCC_OscConfig+0x14c>
 80013b8:	e7a0      	b.n	80012fc <HAL_RCC_OscConfig+0xa0>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ba:	6823      	ldr	r3, [r4, #0]
 80013bc:	071e      	lsls	r6, r3, #28
 80013be:	d403      	bmi.n	80013c8 <HAL_RCC_OscConfig+0x16c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013c0:	6823      	ldr	r3, [r4, #0]
 80013c2:	075d      	lsls	r5, r3, #29
 80013c4:	d549      	bpl.n	800145a <HAL_RCC_OscConfig+0x1fe>
 80013c6:	e022      	b.n	800140e <HAL_RCC_OscConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013c8:	6963      	ldr	r3, [r4, #20]
 80013ca:	4d3f      	ldr	r5, [pc, #252]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80013cc:	b17b      	cbz	r3, 80013ee <HAL_RCC_OscConfig+0x192>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ce:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	676b      	str	r3, [r5, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d6:	f7fe ffc5 	bl	8000364 <HAL_GetTick>
 80013da:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013dc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80013de:	0798      	lsls	r0, r3, #30
 80013e0:	d4ee      	bmi.n	80013c0 <HAL_RCC_OscConfig+0x164>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e2:	f7fe ffbf 	bl	8000364 <HAL_GetTick>
 80013e6:	1b80      	subs	r0, r0, r6
 80013e8:	2802      	cmp	r0, #2
 80013ea:	d9f7      	bls.n	80013dc <HAL_RCC_OscConfig+0x180>
 80013ec:	e786      	b.n	80012fc <HAL_RCC_OscConfig+0xa0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ee:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80013f0:	f023 0301 	bic.w	r3, r3, #1
 80013f4:	676b      	str	r3, [r5, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f6:	f7fe ffb5 	bl	8000364 <HAL_GetTick>
 80013fa:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013fc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80013fe:	0799      	lsls	r1, r3, #30
 8001400:	d5de      	bpl.n	80013c0 <HAL_RCC_OscConfig+0x164>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001402:	f7fe ffaf 	bl	8000364 <HAL_GetTick>
 8001406:	1b80      	subs	r0, r0, r6
 8001408:	2802      	cmp	r0, #2
 800140a:	d9f7      	bls.n	80013fc <HAL_RCC_OscConfig+0x1a0>
 800140c:	e776      	b.n	80012fc <HAL_RCC_OscConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	4b2e      	ldr	r3, [pc, #184]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001410:	4d2e      	ldr	r5, [pc, #184]	; (80014cc <HAL_RCC_OscConfig+0x270>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001412:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001414:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001418:	641a      	str	r2, [r3, #64]	; 0x40
 800141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001420:	9301      	str	r3, [sp, #4]
 8001422:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001424:	682b      	ldr	r3, [r5, #0]
 8001426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800142a:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800142c:	f7fe ff9a 	bl	8000364 <HAL_GetTick>
 8001430:	4606      	mov	r6, r0
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001432:	682b      	ldr	r3, [r5, #0]
 8001434:	05da      	lsls	r2, r3, #23
 8001436:	d514      	bpl.n	8001462 <HAL_RCC_OscConfig+0x206>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001438:	68a3      	ldr	r3, [r4, #8]
 800143a:	4d23      	ldr	r5, [pc, #140]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 800143c:	2b01      	cmp	r3, #1
 800143e:	d116      	bne.n	800146e <HAL_RCC_OscConfig+0x212>
 8001440:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001442:	f043 0301 	orr.w	r3, r3, #1
 8001446:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001448:	f241 3588 	movw	r5, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800144c:	f7fe ff8a 	bl	8000364 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001450:	4e1d      	ldr	r6, [pc, #116]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001452:	4607      	mov	r7, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001454:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001456:	079b      	lsls	r3, r3, #30
 8001458:	d526      	bpl.n	80014a8 <HAL_RCC_OscConfig+0x24c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800145a:	69a2      	ldr	r2, [r4, #24]
 800145c:	2a00      	cmp	r2, #0
 800145e:	d137      	bne.n	80014d0 <HAL_RCC_OscConfig+0x274>
 8001460:	e079      	b.n	8001556 <HAL_RCC_OscConfig+0x2fa>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001462:	f7fe ff7f 	bl	8000364 <HAL_GetTick>
 8001466:	1b80      	subs	r0, r0, r6
 8001468:	2864      	cmp	r0, #100	; 0x64
 800146a:	d9e2      	bls.n	8001432 <HAL_RCC_OscConfig+0x1d6>
 800146c:	e746      	b.n	80012fc <HAL_RCC_OscConfig+0xa0>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800146e:	b96b      	cbnz	r3, 800148c <HAL_RCC_OscConfig+0x230>
 8001470:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001472:	f241 3788 	movw	r7, #5000	; 0x1388
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001476:	f023 0301 	bic.w	r3, r3, #1
 800147a:	672b      	str	r3, [r5, #112]	; 0x70
 800147c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800147e:	f023 0304 	bic.w	r3, r3, #4
 8001482:	672b      	str	r3, [r5, #112]	; 0x70
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001484:	f7fe ff6e 	bl	8000364 <HAL_GetTick>
 8001488:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800148a:	e019      	b.n	80014c0 <HAL_RCC_OscConfig+0x264>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800148c:	2b05      	cmp	r3, #5
 800148e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001490:	d103      	bne.n	800149a <HAL_RCC_OscConfig+0x23e>
 8001492:	f043 0304 	orr.w	r3, r3, #4
 8001496:	672b      	str	r3, [r5, #112]	; 0x70
 8001498:	e7d2      	b.n	8001440 <HAL_RCC_OscConfig+0x1e4>
 800149a:	f023 0301 	bic.w	r3, r3, #1
 800149e:	672b      	str	r3, [r5, #112]	; 0x70
 80014a0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014a2:	f023 0304 	bic.w	r3, r3, #4
 80014a6:	e7ce      	b.n	8001446 <HAL_RCC_OscConfig+0x1ea>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a8:	f7fe ff5c 	bl	8000364 <HAL_GetTick>
 80014ac:	1bc0      	subs	r0, r0, r7
 80014ae:	42a8      	cmp	r0, r5
 80014b0:	d9d0      	bls.n	8001454 <HAL_RCC_OscConfig+0x1f8>
 80014b2:	e723      	b.n	80012fc <HAL_RCC_OscConfig+0xa0>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b4:	f7fe ff56 	bl	8000364 <HAL_GetTick>
 80014b8:	1b80      	subs	r0, r0, r6
 80014ba:	42b8      	cmp	r0, r7
 80014bc:	f63f af1e 	bhi.w	80012fc <HAL_RCC_OscConfig+0xa0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014c0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014c2:	0798      	lsls	r0, r3, #30
 80014c4:	d4f6      	bmi.n	80014b4 <HAL_RCC_OscConfig+0x258>
 80014c6:	e7c8      	b.n	800145a <HAL_RCC_OscConfig+0x1fe>
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40007000 	.word	0x40007000
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014d0:	4d2f      	ldr	r5, [pc, #188]	; (8001590 <HAL_RCC_OscConfig+0x334>)
 80014d2:	68ab      	ldr	r3, [r5, #8]
 80014d4:	f003 030c 	and.w	r3, r3, #12
 80014d8:	2b08      	cmp	r3, #8
 80014da:	f43f aedd 	beq.w	8001298 <HAL_RCC_OscConfig+0x3c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014de:	682b      	ldr	r3, [r5, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014e0:	2a02      	cmp	r2, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014e6:	602b      	str	r3, [r5, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014e8:	d143      	bne.n	8001572 <HAL_RCC_OscConfig+0x316>
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ea:	f7fe ff3b 	bl	8000364 <HAL_GetTick>
 80014ee:	4607      	mov	r7, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f0:	682b      	ldr	r3, [r5, #0]
 80014f2:	4e27      	ldr	r6, [pc, #156]	; (8001590 <HAL_RCC_OscConfig+0x334>)
 80014f4:	0199      	lsls	r1, r3, #6
 80014f6:	d430      	bmi.n	800155a <HAL_RCC_OscConfig+0x2fe>
 80014f8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80014fc:	fa92 f2a2 	rbit	r2, r2
 8001500:	f44f 3340 	mov.w	r3, #196608	; 0x30000
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001504:	fab2 f082 	clz	r0, r2
 8001508:	fa93 f3a3 	rbit	r3, r3
 800150c:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8001510:	fab3 f583 	clz	r5, r3
 8001514:	fa92 f2a2 	rbit	r2, r2
 8001518:	69e3      	ldr	r3, [r4, #28]
 800151a:	fab2 f182 	clz	r1, r2
 800151e:	6a27      	ldr	r7, [r4, #32]
 8001520:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001522:	431f      	orrs	r7, r3
 8001524:	4082      	lsls	r2, r0
 8001526:	f047 5300 	orr.w	r3, r7, #536870912	; 0x20000000
 800152a:	ea43 0002 	orr.w	r0, r3, r2
 800152e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001530:	085a      	lsrs	r2, r3, #1
 8001532:	3a01      	subs	r2, #1
 8001534:	fa02 f305 	lsl.w	r3, r2, r5
 8001538:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800153a:	4303      	orrs	r3, r0
 800153c:	408a      	lsls	r2, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	6073      	str	r3, [r6, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001542:	6833      	ldr	r3, [r6, #0]
 8001544:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001548:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154a:	f7fe ff0b 	bl	8000364 <HAL_GetTick>
 800154e:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001550:	6833      	ldr	r3, [r6, #0]
 8001552:	019a      	lsls	r2, r3, #6
 8001554:	d507      	bpl.n	8001566 <HAL_RCC_OscConfig+0x30a>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001556:	2000      	movs	r0, #0
 8001558:	e017      	b.n	800158a <HAL_RCC_OscConfig+0x32e>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800155a:	f7fe ff03 	bl	8000364 <HAL_GetTick>
 800155e:	1bc0      	subs	r0, r0, r7
 8001560:	2802      	cmp	r0, #2
 8001562:	d9c5      	bls.n	80014f0 <HAL_RCC_OscConfig+0x294>
 8001564:	e6ca      	b.n	80012fc <HAL_RCC_OscConfig+0xa0>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001566:	f7fe fefd 	bl	8000364 <HAL_GetTick>
 800156a:	1b00      	subs	r0, r0, r4
 800156c:	2802      	cmp	r0, #2
 800156e:	d9ef      	bls.n	8001550 <HAL_RCC_OscConfig+0x2f4>
 8001570:	e6c4      	b.n	80012fc <HAL_RCC_OscConfig+0xa0>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001572:	f7fe fef7 	bl	8000364 <HAL_GetTick>
 8001576:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001578:	682b      	ldr	r3, [r5, #0]
 800157a:	019b      	lsls	r3, r3, #6
 800157c:	d5eb      	bpl.n	8001556 <HAL_RCC_OscConfig+0x2fa>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800157e:	f7fe fef1 	bl	8000364 <HAL_GetTick>
 8001582:	1b00      	subs	r0, r0, r4
 8001584:	2802      	cmp	r0, #2
 8001586:	d9f7      	bls.n	8001578 <HAL_RCC_OscConfig+0x31c>
 8001588:	e6b8      	b.n	80012fc <HAL_RCC_OscConfig+0xa0>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800158a:	b003      	add	sp, #12
 800158c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800

08001594 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001594:	491b      	ldr	r1, [pc, #108]	; (8001604 <HAL_RCC_GetSysClockFreq+0x70>)
 8001596:	688b      	ldr	r3, [r1, #8]
 8001598:	f003 030c 	and.w	r3, r3, #12
 800159c:	2b04      	cmp	r3, #4
 800159e:	d02c      	beq.n	80015fa <HAL_RCC_GetSysClockFreq+0x66>
 80015a0:	2b08      	cmp	r3, #8
 80015a2:	d12c      	bne.n	80015fe <HAL_RCC_GetSysClockFreq+0x6a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015a4:	6848      	ldr	r0, [r1, #4]
 80015a6:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80015aa:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015ac:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80015b0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80015b4:	684b      	ldr	r3, [r1, #4]
 80015b6:	fa92 f2a2 	rbit	r2, r2
 80015ba:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80015be:	fab2 f282 	clz	r2, r2
 80015c2:	ea01 0103 	and.w	r1, r1, r3
 80015c6:	fa21 f102 	lsr.w	r1, r1, r2
 80015ca:	bf14      	ite	ne
 80015cc:	4a0e      	ldrne	r2, [pc, #56]	; (8001608 <HAL_RCC_GetSysClockFreq+0x74>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80015ce:	4a0f      	ldreq	r2, [pc, #60]	; (800160c <HAL_RCC_GetSysClockFreq+0x78>)
 80015d0:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 80015d4:	4a0b      	ldr	r2, [pc, #44]	; (8001604 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80015d6:	fb00 f301 	mul.w	r3, r0, r1
 80015da:	f44f 3040 	mov.w	r0, #196608	; 0x30000
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 80015de:	6852      	ldr	r2, [r2, #4]
 80015e0:	fa90 f0a0 	rbit	r0, r0
      
      sysclockfreq = pllvco/pllp;
 80015e4:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 80015e8:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 80015ec:	fa22 f000 	lsr.w	r0, r2, r0
 80015f0:	3001      	adds	r0, #1
 80015f2:	0040      	lsls	r0, r0, #1
 80015f4:	fbb3 f0f0 	udiv	r0, r3, r0
 80015f8:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015fa:	4803      	ldr	r0, [pc, #12]	; (8001608 <HAL_RCC_GetSysClockFreq+0x74>)
 80015fc:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015fe:	4803      	ldr	r0, [pc, #12]	; (800160c <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	40023800 	.word	0x40023800
 8001608:	017d7840 	.word	0x017d7840
 800160c:	00f42400 	.word	0x00f42400

08001610 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001610:	4a50      	ldr	r2, [pc, #320]	; (8001754 <HAL_RCC_ClockConfig+0x144>)
 8001612:	6813      	ldr	r3, [r2, #0]
 8001614:	f003 030f 	and.w	r3, r3, #15
 8001618:	428b      	cmp	r3, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800161a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800161e:	4604      	mov	r4, r0
 8001620:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001622:	d30a      	bcc.n	800163a <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
  
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001624:	6821      	ldr	r1, [r4, #0]
 8001626:	0788      	lsls	r0, r1, #30
 8001628:	d514      	bpl.n	8001654 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800162a:	484b      	ldr	r0, [pc, #300]	; (8001758 <HAL_RCC_ClockConfig+0x148>)
 800162c:	6883      	ldr	r3, [r0, #8]
 800162e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001632:	68a3      	ldr	r3, [r4, #8]
 8001634:	4313      	orrs	r3, r2
 8001636:	6083      	str	r3, [r0, #8]
 8001638:	e00c      	b.n	8001654 <HAL_RCC_ClockConfig+0x44>
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800163a:	6813      	ldr	r3, [r2, #0]
 800163c:	f023 030f 	bic.w	r3, r3, #15
 8001640:	430b      	orrs	r3, r1
 8001642:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001644:	6813      	ldr	r3, [r2, #0]
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	4299      	cmp	r1, r3
 800164c:	d0ea      	beq.n	8001624 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 800164e:	2001      	movs	r0, #1
 8001650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001654:	07c9      	lsls	r1, r1, #31
 8001656:	d406      	bmi.n	8001666 <HAL_RCC_ClockConfig+0x56>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001658:	4a3e      	ldr	r2, [pc, #248]	; (8001754 <HAL_RCC_ClockConfig+0x144>)
 800165a:	6813      	ldr	r3, [r2, #0]
 800165c:	f003 030f 	and.w	r3, r3, #15
 8001660:	429d      	cmp	r5, r3
 8001662:	d342      	bcc.n	80016ea <HAL_RCC_ClockConfig+0xda>
 8001664:	e04b      	b.n	80016fe <HAL_RCC_ClockConfig+0xee>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001666:	6862      	ldr	r2, [r4, #4]
 8001668:	4b3b      	ldr	r3, [pc, #236]	; (8001758 <HAL_RCC_ClockConfig+0x148>)
 800166a:	2a01      	cmp	r2, #1
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166c:	6819      	ldr	r1, [r3, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800166e:	d102      	bne.n	8001676 <HAL_RCC_ClockConfig+0x66>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001670:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 8001674:	e006      	b.n	8001684 <HAL_RCC_ClockConfig+0x74>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001676:	2a02      	cmp	r2, #2
 8001678:	d102      	bne.n	8001680 <HAL_RCC_ClockConfig+0x70>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167a:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 800167e:	e001      	b.n	8001684 <HAL_RCC_ClockConfig+0x74>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001680:	f011 0f02 	tst.w	r1, #2
 8001684:	d0e3      	beq.n	800164e <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001686:	6899      	ldr	r1, [r3, #8]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001688:	f241 3888 	movw	r8, #5000	; 0x1388
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800168c:	4f32      	ldr	r7, [pc, #200]	; (8001758 <HAL_RCC_ClockConfig+0x148>)
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800168e:	f021 0103 	bic.w	r1, r1, #3
 8001692:	430a      	orrs	r2, r1
 8001694:	609a      	str	r2, [r3, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001696:	f7fe fe65 	bl	8000364 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800169a:	6863      	ldr	r3, [r4, #4]
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800169c:	4606      	mov	r6, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d10c      	bne.n	80016bc <HAL_RCC_ClockConfig+0xac>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	f003 030c 	and.w	r3, r3, #12
 80016a8:	2b04      	cmp	r3, #4
 80016aa:	d0d5      	beq.n	8001658 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ac:	f7fe fe5a 	bl	8000364 <HAL_GetTick>
 80016b0:	1b80      	subs	r0, r0, r6
 80016b2:	4540      	cmp	r0, r8
 80016b4:	d9f5      	bls.n	80016a2 <HAL_RCC_ClockConfig+0x92>
        {
          return HAL_TIMEOUT;
 80016b6:	2003      	movs	r0, #3
 80016b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d10f      	bne.n	80016e0 <HAL_RCC_ClockConfig+0xd0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	f003 030c 	and.w	r3, r3, #12
 80016c6:	2b08      	cmp	r3, #8
 80016c8:	d0c6      	beq.n	8001658 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ca:	f7fe fe4b 	bl	8000364 <HAL_GetTick>
 80016ce:	1b80      	subs	r0, r0, r6
 80016d0:	4540      	cmp	r0, r8
 80016d2:	d9f5      	bls.n	80016c0 <HAL_RCC_ClockConfig+0xb0>
 80016d4:	e7ef      	b.n	80016b6 <HAL_RCC_ClockConfig+0xa6>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d6:	f7fe fe45 	bl	8000364 <HAL_GetTick>
 80016da:	1b80      	subs	r0, r0, r6
 80016dc:	4540      	cmp	r0, r8
 80016de:	d8ea      	bhi.n	80016b6 <HAL_RCC_ClockConfig+0xa6>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	f013 0f0c 	tst.w	r3, #12
 80016e6:	d1f6      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xc6>
 80016e8:	e7b6      	b.n	8001658 <HAL_RCC_ClockConfig+0x48>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ea:	6813      	ldr	r3, [r2, #0]
 80016ec:	f023 030f 	bic.w	r3, r3, #15
 80016f0:	432b      	orrs	r3, r5
 80016f2:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016f4:	6813      	ldr	r3, [r2, #0]
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	429d      	cmp	r5, r3
 80016fc:	d1a7      	bne.n	800164e <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016fe:	6821      	ldr	r1, [r4, #0]
 8001700:	074a      	lsls	r2, r1, #29
 8001702:	d506      	bpl.n	8001712 <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001704:	4814      	ldr	r0, [pc, #80]	; (8001758 <HAL_RCC_ClockConfig+0x148>)
 8001706:	6883      	ldr	r3, [r0, #8]
 8001708:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800170c:	68e3      	ldr	r3, [r4, #12]
 800170e:	4313      	orrs	r3, r2
 8001710:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001712:	070b      	lsls	r3, r1, #28
 8001714:	d507      	bpl.n	8001726 <HAL_RCC_ClockConfig+0x116>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001716:	4a10      	ldr	r2, [pc, #64]	; (8001758 <HAL_RCC_ClockConfig+0x148>)
 8001718:	6921      	ldr	r1, [r4, #16]
 800171a:	6893      	ldr	r3, [r2, #8]
 800171c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001720:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001724:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001726:	f7ff ff35 	bl	8001594 <HAL_RCC_GetSysClockFreq>
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <HAL_RCC_ClockConfig+0x148>)
 800172c:	22f0      	movs	r2, #240	; 0xf0
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	fa92 f2a2 	rbit	r2, r2
 8001734:	fab2 f282 	clz	r2, r2
 8001738:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800173c:	40d3      	lsrs	r3, r2
 800173e:	4a07      	ldr	r2, [pc, #28]	; (800175c <HAL_RCC_ClockConfig+0x14c>)
 8001740:	5cd3      	ldrb	r3, [r2, r3]
 8001742:	40d8      	lsrs	r0, r3
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_RCC_ClockConfig+0x150>)
 8001746:	6018      	str	r0, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001748:	2000      	movs	r0, #0
 800174a:	f7fe fde3 	bl	8000314 <HAL_InitTick>
  
  return HAL_OK;
 800174e:	2000      	movs	r0, #0
}
 8001750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001754:	40023c00 	.word	0x40023c00
 8001758:	40023800 	.word	0x40023800
 800175c:	08006808 	.word	0x08006808
 8001760:	20000014 	.word	0x20000014

08001764 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001764:	4b01      	ldr	r3, [pc, #4]	; (800176c <HAL_RCC_GetHCLKFreq+0x8>)
 8001766:	6818      	ldr	r0, [r3, #0]
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000014 	.word	0x20000014

08001770 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001772:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	fa92 f2a2 	rbit	r2, r2
 800177c:	fab2 f282 	clz	r2, r2
 8001780:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001784:	40d3      	lsrs	r3, r2
 8001786:	4a04      	ldr	r2, [pc, #16]	; (8001798 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001788:	5cd3      	ldrb	r3, [r2, r3]
 800178a:	4a04      	ldr	r2, [pc, #16]	; (800179c <HAL_RCC_GetPCLK1Freq+0x2c>)
 800178c:	6810      	ldr	r0, [r2, #0]
}
 800178e:	40d8      	lsrs	r0, r3
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800
 8001798:	08006818 	.word	0x08006818
 800179c:	20000014 	.word	0x20000014

080017a0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017a2:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	fa92 f2a2 	rbit	r2, r2
 80017ac:	fab2 f282 	clz	r2, r2
 80017b0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80017b4:	40d3      	lsrs	r3, r2
 80017b6:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80017b8:	5cd3      	ldrb	r3, [r2, r3]
 80017ba:	4a04      	ldr	r2, [pc, #16]	; (80017cc <HAL_RCC_GetPCLK2Freq+0x2c>)
 80017bc:	6810      	ldr	r0, [r2, #0]
} 
 80017be:	40d8      	lsrs	r0, r3
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800
 80017c8:	08006818 	.word	0x08006818
 80017cc:	20000014 	.word	0x20000014

080017d0 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80017d0:	6803      	ldr	r3, [r0, #0]
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80017d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80017d6:	f013 0601 	ands.w	r6, r3, #1
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80017da:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80017dc:	d00b      	beq.n	80017f6 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80017de:	4ab6      	ldr	r2, [pc, #728]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80017e0:	6891      	ldr	r1, [r2, #8]
 80017e2:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80017e6:	6091      	str	r1, [r2, #8]
 80017e8:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80017ea:	6891      	ldr	r1, [r2, #8]
 80017ec:	4331      	orrs	r1, r6
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tickstart = 0;
  uint32_t tmpreg0 = 0;
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
 80017ee:	fab6 f686 	clz	r6, r6
 80017f2:	0976      	lsrs	r6, r6, #5
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80017f4:	6091      	str	r1, [r2, #8]
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80017f6:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 80017fa:	d012      	beq.n	8001822 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80017fc:	49ae      	ldr	r1, [pc, #696]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80017fe:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001800:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001804:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001808:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
    {
      plli2sused = 1; 
 800180c:	bf08      	it	eq
 800180e:	2601      	moveq	r6, #1
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001810:	ea42 0205 	orr.w	r2, r2, r5
{
  uint32_t tickstart = 0;
  uint32_t tmpreg0 = 0;
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;
 8001814:	bf16      	itet	ne
 8001816:	fab5 f585 	clzne	r5, r5
 800181a:	2500      	moveq	r5, #0
 800181c:	096d      	lsrne	r5, r5, #5
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800181e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001822:	02d8      	lsls	r0, r3, #11
 8001824:	d511      	bpl.n	800184a <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001826:	48a4      	ldr	r0, [pc, #656]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001828:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800182a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800182e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001832:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001836:	ea42 0201 	orr.w	r2, r2, r1
 800183a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800183e:	d003      	beq.n	8001848 <HAL_RCCEx_PeriphCLKConfig+0x78>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 8001840:	2900      	cmp	r1, #0
 8001842:	bf08      	it	eq
 8001844:	2501      	moveq	r5, #1
 8001846:	e000      	b.n	800184a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1; 
 8001848:	2601      	movs	r6, #1
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {    
      plli2sused = 1; 
 800184a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800184e:	bf18      	it	ne
 8001850:	2601      	movne	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001852:	0699      	lsls	r1, r3, #26
 8001854:	d55d      	bpl.n	8001912 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001856:	4b98      	ldr	r3, [pc, #608]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001858:	4f98      	ldr	r7, [pc, #608]	; (8001abc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800185a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800185c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001860:	641a      	str	r2, [r3, #64]	; 0x40
 8001862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001872:	603b      	str	r3, [r7, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001874:	f7fe fd76 	bl	8000364 <HAL_GetTick>
 8001878:	4680      	mov	r8, r0
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	05da      	lsls	r2, r3, #23
 800187e:	d407      	bmi.n	8001890 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001880:	f7fe fd70 	bl	8000364 <HAL_GetTick>
 8001884:	ebc8 0000 	rsb	r0, r8, r0
 8001888:	2864      	cmp	r0, #100	; 0x64
 800188a:	d9f6      	bls.n	800187a <HAL_RCCEx_PeriphCLKConfig+0xaa>
      {
        return HAL_TIMEOUT;
 800188c:	2003      	movs	r0, #3
 800188e:	e340      	b.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x742>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001890:	4f89      	ldr	r7, [pc, #548]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001892:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001894:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001898:	d10f      	bne.n	80018ba <HAL_RCCEx_PeriphCLKConfig+0xea>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800189a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800189c:	f402 7340 	and.w	r3, r2, #768	; 0x300
 80018a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80018a4:	4b84      	ldr	r3, [pc, #528]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80018a6:	d12b      	bne.n	8001900 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80018a8:	6899      	ldr	r1, [r3, #8]
 80018aa:	f421 10f8 	bic.w	r0, r1, #2031616	; 0x1f0000
 80018ae:	f022 4170 	bic.w	r1, r2, #4026531840	; 0xf0000000
 80018b2:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80018b6:	4301      	orrs	r1, r0
 80018b8:	e025      	b.n	8001906 <HAL_RCCEx_PeriphCLKConfig+0x136>
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018ba:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80018bc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d0ea      	beq.n	800189a <HAL_RCCEx_PeriphCLKConfig+0xca>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80018c6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80018cc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80018d0:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80018d2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80018d4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80018d8:	673a      	str	r2, [r7, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80018da:	673b      	str	r3, [r7, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80018dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018de:	07db      	lsls	r3, r3, #31
 80018e0:	d5db      	bpl.n	800189a <HAL_RCCEx_PeriphCLKConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e2:	f7fe fd3f 	bl	8000364 <HAL_GetTick>
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e6:	f241 3988 	movw	r9, #5000	; 0x1388

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ea:	4680      	mov	r8, r0
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018ee:	0798      	lsls	r0, r3, #30
 80018f0:	d4d3      	bmi.n	800189a <HAL_RCCEx_PeriphCLKConfig+0xca>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f2:	f7fe fd37 	bl	8000364 <HAL_GetTick>
 80018f6:	ebc8 0000 	rsb	r0, r8, r0
 80018fa:	4548      	cmp	r0, r9
 80018fc:	d9f6      	bls.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80018fe:	e7c5      	b.n	800188c <HAL_RCCEx_PeriphCLKConfig+0xbc>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001900:	6899      	ldr	r1, [r3, #8]
 8001902:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001906:	6099      	str	r1, [r3, #8]
 8001908:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800190c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800190e:	430a      	orrs	r2, r1
 8001910:	671a      	str	r2, [r3, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001912:	6823      	ldr	r3, [r4, #0]
 8001914:	06d9      	lsls	r1, r3, #27
 8001916:	d50c      	bpl.n	8001932 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001918:	4a67      	ldr	r2, [pc, #412]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800191a:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800191e:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001922:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001926:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 800192a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800192c:	4301      	orrs	r1, r0
 800192e:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001932:	045a      	lsls	r2, r3, #17
 8001934:	d508      	bpl.n	8001948 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001936:	4860      	ldr	r0, [pc, #384]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001938:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800193c:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8001940:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001942:	430a      	orrs	r2, r1
 8001944:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001948:	041f      	lsls	r7, r3, #16
 800194a:	d508      	bpl.n	800195e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800194c:	485a      	ldr	r0, [pc, #360]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800194e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001952:	f422 2140 	bic.w	r1, r2, #786432	; 0xc0000
 8001956:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8001958:	430a      	orrs	r2, r1
 800195a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800195e:	03d8      	lsls	r0, r3, #15
 8001960:	d508      	bpl.n	8001974 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001962:	4855      	ldr	r0, [pc, #340]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001964:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001968:	f422 1140 	bic.w	r1, r2, #3145728	; 0x300000
 800196c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800196e:	430a      	orrs	r2, r1
 8001970:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001974:	0399      	lsls	r1, r3, #14
 8001976:	d508      	bpl.n	800198a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001978:	484f      	ldr	r0, [pc, #316]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800197a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800197e:	f422 0140 	bic.w	r1, r2, #12582912	; 0xc00000
 8001982:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8001984:	430a      	orrs	r2, r1
 8001986:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800198a:	065a      	lsls	r2, r3, #25
 800198c:	d508      	bpl.n	80019a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800198e:	484a      	ldr	r0, [pc, #296]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001990:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001994:	f022 0103 	bic.w	r1, r2, #3
 8001998:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800199a:	430a      	orrs	r2, r1
 800199c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80019a0:	061f      	lsls	r7, r3, #24
 80019a2:	d508      	bpl.n	80019b6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80019a4:	4844      	ldr	r0, [pc, #272]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80019a6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80019aa:	f022 010c 	bic.w	r1, r2, #12
 80019ae:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80019b0:	430a      	orrs	r2, r1
 80019b2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80019b6:	05d8      	lsls	r0, r3, #23
 80019b8:	d508      	bpl.n	80019cc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80019ba:	483f      	ldr	r0, [pc, #252]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80019bc:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80019c0:	f022 0130 	bic.w	r1, r2, #48	; 0x30
 80019c4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80019c6:	430a      	orrs	r2, r1
 80019c8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80019cc:	0599      	lsls	r1, r3, #22
 80019ce:	d508      	bpl.n	80019e2 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80019d0:	4839      	ldr	r0, [pc, #228]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80019d2:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80019d6:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 80019da:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80019dc:	430a      	orrs	r2, r1
 80019de:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80019e2:	055a      	lsls	r2, r3, #21
 80019e4:	d508      	bpl.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80019e6:	4834      	ldr	r0, [pc, #208]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80019e8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80019ec:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 80019f0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80019f2:	430a      	orrs	r2, r1
 80019f4:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80019f8:	051f      	lsls	r7, r3, #20
 80019fa:	d508      	bpl.n	8001a0e <HAL_RCCEx_PeriphCLKConfig+0x23e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80019fc:	482e      	ldr	r0, [pc, #184]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80019fe:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001a02:	f422 6140 	bic.w	r1, r2, #3072	; 0xc00
 8001a06:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001a0e:	04d8      	lsls	r0, r3, #19
 8001a10:	d508      	bpl.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001a12:	4829      	ldr	r0, [pc, #164]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001a14:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001a18:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8001a1c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001a24:	0499      	lsls	r1, r3, #18
 8001a26:	d508      	bpl.n	8001a3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001a28:	4823      	ldr	r0, [pc, #140]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001a2a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001a2e:	f422 4140 	bic.w	r1, r2, #49152	; 0xc000
 8001a32:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001a34:	430a      	orrs	r2, r1
 8001a36:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001a3a:	025a      	lsls	r2, r3, #9
 8001a3c:	d508      	bpl.n	8001a50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001a3e:	481e      	ldr	r0, [pc, #120]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001a40:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001a44:	f022 6180 	bic.w	r1, r2, #67108864	; 0x4000000
 8001a48:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001a50:	029f      	lsls	r7, r3, #10
 8001a52:	d50c      	bpl.n	8001a6e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001a54:	4818      	ldr	r0, [pc, #96]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001a56:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001a58:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 8001a5c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001a60:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 8001a64:	bf08      	it	eq
 8001a66:	2501      	moveq	r5, #1
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1; 
 8001a6e:	f013 0f08 	tst.w	r3, #8
 8001a72:	bf18      	it	ne
 8001a74:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001a76:	0358      	lsls	r0, r3, #13
 8001a78:	d508      	bpl.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001a7a:	480f      	ldr	r0, [pc, #60]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001a7c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001a80:	f022 7140 	bic.w	r1, r2, #50331648	; 0x3000000
 8001a84:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8001a86:	430a      	orrs	r2, r1
 8001a88:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001a8c:	0219      	lsls	r1, r3, #8
 8001a8e:	d509      	bpl.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001a90:	4809      	ldr	r0, [pc, #36]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001a92:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001a96:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8001a9a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001aa4:	2e01      	cmp	r6, #1
 8001aa6:	d00b      	beq.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8001aa8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001aac:	d008      	beq.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001aae:	2d01      	cmp	r5, #1
 8001ab0:	f040 818c 	bne.w	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8001ab4:	e123      	b.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x52e>
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40007000 	.word	0x40007000
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();  
 8001ac0:	4ec8      	ldr	r6, [pc, #800]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8001ac2:	6833      	ldr	r3, [r6, #0]
 8001ac4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001ac8:	6033      	str	r3, [r6, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001aca:	f7fe fc4b 	bl	8000364 <HAL_GetTick>
 8001ace:	4607      	mov	r7, r0
    
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ad0:	6833      	ldr	r3, [r6, #0]
 8001ad2:	f8df e310 	ldr.w	lr, [pc, #784]	; 8001de4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8001ad6:	011a      	lsls	r2, r3, #4
 8001ad8:	d505      	bpl.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001ada:	f7fe fc43 	bl	8000364 <HAL_GetTick>
 8001ade:	1bc0      	subs	r0, r0, r7
 8001ae0:	2864      	cmp	r0, #100	; 0x64
 8001ae2:	d9f5      	bls.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8001ae4:	e6d2      	b.n	800188c <HAL_RCCEx_PeriphCLKConfig+0xbc>
    
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001ae6:	6827      	ldr	r7, [r4, #0]
 8001ae8:	07fb      	lsls	r3, r7, #31
 8001aea:	d53c      	bpl.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x396>
 8001aec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001aee:	bbd3      	cbnz	r3, 8001b66 <HAL_RCCEx_PeriphCLKConfig+0x396>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8001af0:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 8001af4:	f44f 3840 	mov.w	r8, #196608	; 0x30000
 8001af8:	fa98 f9a8 	rbit	r9, r8
 8001afc:	f04f 6670 	mov.w	r6, #251658240	; 0xf000000
 8001b00:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8001b04:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 8001b08:	fa96 fca6 	rbit	ip, r6
 8001b0c:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 8001b10:	fabc fc8c 	clz	ip, ip
 8001b14:	fa9a faaa 	rbit	sl, sl
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001b18:	faba fa8a 	clz	sl, sl
 8001b1c:	fa98 f8a8 	rbit	r8, r8
 8001b20:	fab8 f888 	clz	r8, r8
 8001b24:	fa96 f6a6 	rbit	r6, r6
 8001b28:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8001b2c:	fab6 f686 	clz	r6, r6
 8001b30:	fa93 f3a3 	rbit	r3, r3
 8001b34:	fab3 fb83 	clz	fp, r3
 8001b38:	6861      	ldr	r1, [r4, #4]
 8001b3a:	68a3      	ldr	r3, [r4, #8]
 8001b3c:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8001b40:	fa01 f10a 	lsl.w	r1, r1, sl
 8001b44:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001b48:	fa03 f30b 	lsl.w	r3, r3, fp
 8001b4c:	fa20 f009 	lsr.w	r0, r0, r9
 8001b50:	fa22 f20c 	lsr.w	r2, r2, ip
 8001b54:	430b      	orrs	r3, r1
 8001b56:	fa00 f108 	lsl.w	r1, r0, r8
 8001b5a:	4319      	orrs	r1, r3
 8001b5c:	fa02 f306 	lsl.w	r3, r2, r6
 8001b60:	430b      	orrs	r3, r1
 8001b62:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
    }
        
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001b66:	033e      	lsls	r6, r7, #12
 8001b68:	d503      	bpl.n	8001b72 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8001b6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b70:	d005      	beq.n	8001b7e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8001b72:	02f8      	lsls	r0, r7, #11
 8001b74:	d549      	bpl.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8001b76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b7c:	d145      	bne.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8001b7e:	f8df e264 	ldr.w	lr, [pc, #612]	; 8001de4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8001b82:	f44f 3840 	mov.w	r8, #196608	; 0x30000
 8001b86:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 8001b8a:	fa98 f9a8 	rbit	r9, r8
 8001b8e:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8001b92:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8001b96:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 8001b9a:	fa96 fca6 	rbit	ip, r6
 8001b9e:	f647 7bc0 	movw	fp, #32704	; 0x7fc0
 8001ba2:	fabc fc8c 	clz	ip, ip
 8001ba6:	fa9b fbab 	rbit	fp, fp
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001baa:	fabb fb8b 	clz	fp, fp
 8001bae:	fa98 f8a8 	rbit	r8, r8
 8001bb2:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8001bb6:	fab8 f888 	clz	r8, r8
 8001bba:	fa93 f3a3 	rbit	r3, r3
 8001bbe:	fab3 fa83 	clz	sl, r3
 8001bc2:	fa96 f6a6 	rbit	r6, r6
 8001bc6:	6863      	ldr	r3, [r4, #4]
 8001bc8:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8001bcc:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8001bd0:	fab6 f686 	clz	r6, r6
 8001bd4:	fa03 f10b 	lsl.w	r1, r3, fp
 8001bd8:	68e3      	ldr	r3, [r4, #12]
 8001bda:	fa20 f009 	lsr.w	r0, r0, r9
 8001bde:	fa22 f20c 	lsr.w	r2, r2, ip
 8001be2:	fa03 f30a 	lsl.w	r3, r3, sl
 8001be6:	430b      	orrs	r3, r1
 8001be8:	fa00 f108 	lsl.w	r1, r0, r8
 8001bec:	4319      	orrs	r1, r3
 8001bee:	fa02 f306 	lsl.w	r3, r2, r6
 8001bf2:	430b      	orrs	r3, r1
 8001bf4:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8001bf8:	f8de 308c 	ldr.w	r3, [lr, #140]	; 0x8c
 8001bfc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001bfe:	f023 031f 	bic.w	r3, r3, #31
 8001c02:	3a01      	subs	r2, #1
 8001c04:	4313      	orrs	r3, r2
 8001c06:	f8ce 308c 	str.w	r3, [lr, #140]	; 0x8c
    }          

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c0a:	01f9      	lsls	r1, r7, #7
 8001c0c:	d53c      	bpl.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8001c0e:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8001de4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8001c12:	f04f 6870 	mov.w	r8, #251658240	; 0xf000000
 8001c16:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 8001c1a:	fa98 f9a8 	rbit	r9, r8
 8001c1e:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8001c22:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8001c26:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 8001c2a:	fa96 fca6 	rbit	ip, r6
 8001c2e:	f647 7bc0 	movw	fp, #32704	; 0x7fc0
 8001c32:	fabc fc8c 	clz	ip, ip
 8001c36:	fa9b fbab 	rbit	fp, fp
 8001c3a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001c3e:	fabb fb8b 	clz	fp, fp
 8001c42:	fa93 f3a3 	rbit	r3, r3
 8001c46:	fab3 fa83 	clz	sl, r3
 8001c4a:	fa98 f8a8 	rbit	r8, r8
 8001c4e:	fab8 f888 	clz	r8, r8
 8001c52:	fa96 f6a6 	rbit	r6, r6
 8001c56:	6863      	ldr	r3, [r4, #4]
 8001c58:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8001c5c:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8001c60:	fab6 f686 	clz	r6, r6
 8001c64:	fa03 f10b 	lsl.w	r1, r3, fp
 8001c68:	6923      	ldr	r3, [r4, #16]
 8001c6a:	fa20 f009 	lsr.w	r0, r0, r9
 8001c6e:	fa22 f20c 	lsr.w	r2, r2, ip
 8001c72:	fa03 f30a 	lsl.w	r3, r3, sl
 8001c76:	430b      	orrs	r3, r1
 8001c78:	fa00 f108 	lsl.w	r1, r0, r8
 8001c7c:	4319      	orrs	r1, r3
 8001c7e:	fa02 f306 	lsl.w	r3, r2, r6
 8001c82:	430b      	orrs	r3, r1
 8001c84:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
    }  
         
    /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001c88:	01ba      	lsls	r2, r7, #6
 8001c8a:	d526      	bpl.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8001c8c:	f647 7ec0 	movw	lr, #32704	; 0x7fc0
 8001c90:	fa9e feae 	rbit	lr, lr
 8001c94:	f44f 3040 	mov.w	r0, #196608	; 0x30000
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c98:	fabe fe8e 	clz	lr, lr
 8001c9c:	fa90 f0a0 	rbit	r0, r0
 8001ca0:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8001ca4:	fab0 f780 	clz	r7, r0
 8001ca8:	fa92 f2a2 	rbit	r2, r2
 8001cac:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8001cb0:	fab2 f682 	clz	r6, r2
 8001cb4:	fa93 f3a3 	rbit	r3, r3
 8001cb8:	fab3 f183 	clz	r1, r3
 8001cbc:	6920      	ldr	r0, [r4, #16]
 8001cbe:	6863      	ldr	r3, [r4, #4]
 8001cc0:	68e2      	ldr	r2, [r4, #12]
 8001cc2:	40b8      	lsls	r0, r7
 8001cc4:	fa03 f30e 	lsl.w	r3, r3, lr
 8001cc8:	40b2      	lsls	r2, r6
 8001cca:	4303      	orrs	r3, r0
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	68a3      	ldr	r3, [r4, #8]
 8001cd0:	408b      	lsls	r3, r1
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	4a43      	ldr	r2, [pc, #268]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8001cd6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    } 
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001cda:	4e42      	ldr	r6, [pc, #264]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8001cdc:	6833      	ldr	r3, [r6, #0]
 8001cde:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ce2:	6033      	str	r3, [r6, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ce4:	f7fe fb3e 	bl	8000364 <HAL_GetTick>
 8001ce8:	4607      	mov	r7, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001cea:	6833      	ldr	r3, [r6, #0]
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	f53f aede 	bmi.w	8001aae <HAL_RCCEx_PeriphCLKConfig+0x2de>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001cf2:	f7fe fb37 	bl	8000364 <HAL_GetTick>
 8001cf6:	1bc0      	subs	r0, r0, r7
 8001cf8:	2864      	cmp	r0, #100	; 0x64
 8001cfa:	d9f6      	bls.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8001cfc:	e5c6      	b.n	800188c <HAL_RCCEx_PeriphCLKConfig+0xbc>
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8001cfe:	4d39      	ldr	r5, [pc, #228]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8001d00:	682b      	ldr	r3, [r5, #0]
 8001d02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d06:	602b      	str	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d08:	f7fe fb2c 	bl	8000364 <HAL_GetTick>
 8001d0c:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001d0e:	682b      	ldr	r3, [r5, #0]
 8001d10:	009f      	lsls	r7, r3, #2
 8001d12:	d45d      	bmi.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x600>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001d14:	6825      	ldr	r5, [r4, #0]
 8001d16:	032e      	lsls	r6, r5, #12
 8001d18:	d460      	bmi.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8001d1a:	02e8      	lsls	r0, r5, #11
 8001d1c:	d464      	bmi.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x618>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001d1e:	02a9      	lsls	r1, r5, #10
 8001d20:	f100 80ad 	bmi.w	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001d24:	072a      	lsls	r2, r5, #28
 8001d26:	d545      	bpl.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8001d28:	4f2e      	ldr	r7, [pc, #184]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8001d2a:	f04f 6570 	mov.w	r5, #251658240	; 0xf000000
 8001d2e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001d32:	fa95 fca5 	rbit	ip, r5
 8001d36:	f44f 3640 	mov.w	r6, #196608	; 0x30000
 8001d3a:	fabc fc8c 	clz	ip, ip
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8001d3e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001d42:	fa96 f8a6 	rbit	r8, r6
 8001d46:	f647 79c0 	movw	r9, #32704	; 0x7fc0
 8001d4a:	fab8 f888 	clz	r8, r8
 8001d4e:	fa99 f9a9 	rbit	r9, r9
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001d52:	fab9 f989 	clz	r9, r9
 8001d56:	fa96 f6a6 	rbit	r6, r6
 8001d5a:	fab6 f686 	clz	r6, r6
 8001d5e:	fa95 f5a5 	rbit	r5, r5
 8001d62:	f04f 4ee0 	mov.w	lr, #1879048192	; 0x70000000
 8001d66:	fab5 f585 	clz	r5, r5
 8001d6a:	fa9e feae 	rbit	lr, lr
 8001d6e:	6963      	ldr	r3, [r4, #20]
 8001d70:	fabe fe8e 	clz	lr, lr
 8001d74:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8001d78:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001d7c:	fa03 f109 	lsl.w	r1, r3, r9
 8001d80:	69e3      	ldr	r3, [r4, #28]
 8001d82:	fa20 f008 	lsr.w	r0, r0, r8
 8001d86:	fa22 f20c 	lsr.w	r2, r2, ip
 8001d8a:	fa03 fe0e 	lsl.w	lr, r3, lr
 8001d8e:	fa02 f305 	lsl.w	r3, r2, r5
 8001d92:	ea41 0e0e 	orr.w	lr, r1, lr
 8001d96:	fa00 f106 	lsl.w	r1, r0, r6
 8001d9a:	ea4e 0101 	orr.w	r1, lr, r1
 8001d9e:	430b      	orrs	r3, r1
 8001da0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001da4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001da8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001dac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001dae:	4313      	orrs	r3, r2
 8001db0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001db4:	4c0b      	ldr	r4, [pc, #44]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8001db6:	6823      	ldr	r3, [r4, #0]
 8001db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dbe:	f7fe fad1 	bl	8000364 <HAL_GetTick>
 8001dc2:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001dc4:	6823      	ldr	r3, [r4, #0]
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	f140 809c 	bpl.w	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x734>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001dcc:	2000      	movs	r0, #0
 8001dce:	e0a0      	b.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x742>
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001dd0:	f7fe fac8 	bl	8000364 <HAL_GetTick>
 8001dd4:	1b80      	subs	r0, r0, r6
 8001dd6:	2864      	cmp	r0, #100	; 0x64
 8001dd8:	d999      	bls.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x53e>
 8001dda:	e557      	b.n	800188c <HAL_RCCEx_PeriphCLKConfig+0xbc>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001ddc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001dde:	b133      	cbz	r3, 8001dee <HAL_RCCEx_PeriphCLKConfig+0x61e>
 8001de0:	e79b      	b.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001de8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d197      	bne.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x54e>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8001dee:	4f4a      	ldr	r7, [pc, #296]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x748>)
 8001df0:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
 8001df4:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001df8:	fa9c f9ac 	rbit	r9, ip
 8001dfc:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8001e00:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8001e04:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001e08:	fa96 fea6 	rbit	lr, r6
 8001e0c:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 8001e10:	fabe fe8e 	clz	lr, lr
 8001e14:	fa9a faaa 	rbit	sl, sl
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001e18:	faba fa8a 	clz	sl, sl
 8001e1c:	fa9c fcac 	rbit	ip, ip
 8001e20:	f04f 6870 	mov.w	r8, #251658240	; 0xf000000
 8001e24:	fabc fc8c 	clz	ip, ip
 8001e28:	fa98 f8a8 	rbit	r8, r8
 8001e2c:	fab8 f888 	clz	r8, r8
 8001e30:	fa96 f6a6 	rbit	r6, r6
 8001e34:	69a1      	ldr	r1, [r4, #24]
 8001e36:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8001e3a:	6963      	ldr	r3, [r4, #20]
 8001e3c:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8001e40:	fa01 f808 	lsl.w	r8, r1, r8
 8001e44:	fa20 f009 	lsr.w	r0, r0, r9
 8001e48:	fa03 f30a 	lsl.w	r3, r3, sl
 8001e4c:	fa22 f20e 	lsr.w	r2, r2, lr
 8001e50:	fab6 f686 	clz	r6, r6
 8001e54:	fa00 f10c 	lsl.w	r1, r0, ip
 8001e58:	ea43 0308 	orr.w	r3, r3, r8
 8001e5c:	4319      	orrs	r1, r3
 8001e5e:	fa02 f306 	lsl.w	r3, r2, r6
 8001e62:	430b      	orrs	r3, r1
 8001e64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001e68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e6c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001e6e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001e72:	3a01      	subs	r2, #1
 8001e74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001e7c:	e74f      	b.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001e7e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001e80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e84:	f47f af4e 	bne.w	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8001e88:	4f23      	ldr	r7, [pc, #140]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x748>)
 8001e8a:	f04f 6c70 	mov.w	ip, #251658240	; 0xf000000
 8001e8e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001e92:	fa9c f9ac 	rbit	r9, ip
 8001e96:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8001e9a:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8001e9e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001ea2:	fa96 fea6 	rbit	lr, r6
 8001ea6:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 8001eaa:	fabe fe8e 	clz	lr, lr
 8001eae:	fa9a faaa 	rbit	sl, sl
 8001eb2:	f44f 3840 	mov.w	r8, #196608	; 0x30000
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001eb6:	faba fa8a 	clz	sl, sl
 8001eba:	fa98 f8a8 	rbit	r8, r8
 8001ebe:	fab8 f888 	clz	r8, r8
 8001ec2:	fa9c fcac 	rbit	ip, ip
 8001ec6:	fabc fc8c 	clz	ip, ip
 8001eca:	fa96 f6a6 	rbit	r6, r6
 8001ece:	6a21      	ldr	r1, [r4, #32]
 8001ed0:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8001ed4:	6963      	ldr	r3, [r4, #20]
 8001ed6:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8001eda:	fa01 f808 	lsl.w	r8, r1, r8
 8001ede:	fa20 f009 	lsr.w	r0, r0, r9
 8001ee2:	fa03 f30a 	lsl.w	r3, r3, sl
 8001ee6:	fab6 f686 	clz	r6, r6
 8001eea:	fa00 f10c 	lsl.w	r1, r0, ip
 8001eee:	fa22 f20e 	lsr.w	r2, r2, lr
 8001ef2:	ea43 0308 	orr.w	r3, r3, r8
 8001ef6:	4319      	orrs	r1, r3
 8001ef8:	fa02 f306 	lsl.w	r3, r2, r6
 8001efc:	430b      	orrs	r3, r1
 8001efe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001f02:	e70f      	b.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x554>
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001f04:	f7fe fa2e 	bl	8000364 <HAL_GetTick>
 8001f08:	1b40      	subs	r0, r0, r5
 8001f0a:	2864      	cmp	r0, #100	; 0x64
 8001f0c:	f67f af5a 	bls.w	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8001f10:	e4bc      	b.n	800188c <HAL_RCCEx_PeriphCLKConfig+0xbc>
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 8001f12:	b003      	add	sp, #12
 8001f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f18:	40023800 	.word	0x40023800

08001f1c <HAL_SPI_IRQHandler>:
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
  uint32_t itsource = hspi->Instance->CR2;
 8001f1c:	6803      	ldr	r3, [r0, #0]
 8001f1e:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8001f20:	689a      	ldr	r2, [r3, #8]
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001f22:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
  uint32_t itflag   = hspi->Instance->SR;

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8001f24:	f002 0541 	and.w	r5, r2, #65	; 0x41
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001f28:	b085      	sub	sp, #20
 8001f2a:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
  uint32_t itflag   = hspi->Instance->SR;

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8001f2c:	2d01      	cmp	r5, #1
 8001f2e:	d103      	bne.n	8001f38 <HAL_SPI_IRQHandler+0x1c>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8001f30:	064d      	lsls	r5, r1, #25
 8001f32:	d501      	bpl.n	8001f38 <HAL_SPI_IRQHandler+0x1c>
  {
    hspi->RxISR(hspi);
 8001f34:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001f36:	e005      	b.n	8001f44 <HAL_SPI_IRQHandler+0x28>
    return;
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8001f38:	0795      	lsls	r5, r2, #30
 8001f3a:	d505      	bpl.n	8001f48 <HAL_SPI_IRQHandler+0x2c>
 8001f3c:	0608      	lsls	r0, r1, #24
 8001f3e:	d503      	bpl.n	8001f48 <HAL_SPI_IRQHandler+0x2c>
  {
    hspi->TxISR(hspi);
 8001f40:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001f42:	4620      	mov	r0, r4
 8001f44:	4798      	blx	r3
    return;
 8001f46:	e056      	b.n	8001ff6 <HAL_SPI_IRQHandler+0xda>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8001f48:	f412 7fb0 	tst.w	r2, #352	; 0x160
 8001f4c:	d053      	beq.n	8001ff6 <HAL_SPI_IRQHandler+0xda>
 8001f4e:	068d      	lsls	r5, r1, #26
 8001f50:	d551      	bpl.n	8001ff6 <HAL_SPI_IRQHandler+0xda>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((itflag & SPI_FLAG_OVR) != RESET)
 8001f52:	0650      	lsls	r0, r2, #25
 8001f54:	d516      	bpl.n	8001f84 <HAL_SPI_IRQHandler+0x68>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001f56:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8001f5a:	2500      	movs	r5, #0
 8001f5c:	2803      	cmp	r0, #3
 8001f5e:	d00a      	beq.n	8001f76 <HAL_SPI_IRQHandler+0x5a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001f60:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001f62:	f040 0004 	orr.w	r0, r0, #4
 8001f66:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f68:	9500      	str	r5, [sp, #0]
 8001f6a:	68d8      	ldr	r0, [r3, #12]
 8001f6c:	9000      	str	r0, [sp, #0]
 8001f6e:	6898      	ldr	r0, [r3, #8]
 8001f70:	9000      	str	r0, [sp, #0]
 8001f72:	9800      	ldr	r0, [sp, #0]
 8001f74:	e006      	b.n	8001f84 <HAL_SPI_IRQHandler+0x68>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f76:	9501      	str	r5, [sp, #4]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	9201      	str	r2, [sp, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	9301      	str	r3, [sp, #4]
 8001f80:	9b01      	ldr	r3, [sp, #4]
        return;
 8001f82:	e038      	b.n	8001ff6 <HAL_SPI_IRQHandler+0xda>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((itflag & SPI_FLAG_MODF) != RESET)
 8001f84:	0695      	lsls	r5, r2, #26
 8001f86:	d50c      	bpl.n	8001fa2 <HAL_SPI_IRQHandler+0x86>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001f88:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001f8a:	f040 0001 	orr.w	r0, r0, #1
 8001f8e:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001f90:	2000      	movs	r0, #0
 8001f92:	9002      	str	r0, [sp, #8]
 8001f94:	6898      	ldr	r0, [r3, #8]
 8001f96:	9002      	str	r0, [sp, #8]
 8001f98:	6818      	ldr	r0, [r3, #0]
 8001f9a:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8001f9e:	6018      	str	r0, [r3, #0]
 8001fa0:	9802      	ldr	r0, [sp, #8]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((itflag & SPI_FLAG_FRE) != RESET)
 8001fa2:	05d0      	lsls	r0, r2, #23
 8001fa4:	d508      	bpl.n	8001fb8 <HAL_SPI_IRQHandler+0x9c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001fa6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001fa8:	f042 0208 	orr.w	r2, r2, #8
 8001fac:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	9203      	str	r2, [sp, #12]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	9203      	str	r2, [sp, #12]
 8001fb6:	9a03      	ldr	r2, [sp, #12]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fb8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001fba:	b1e2      	cbz	r2, 8001ff6 <HAL_SPI_IRQHandler+0xda>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001fc2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001fca:	078a      	lsls	r2, r1, #30
 8001fcc:	d010      	beq.n	8001ff0 <HAL_SPI_IRQHandler+0xd4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001fce:	685a      	ldr	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001fd0:	6da0      	ldr	r0, [r4, #88]	; 0x58

      hspi->State = HAL_SPI_STATE_READY;
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001fd2:	f022 0203 	bic.w	r2, r2, #3
 8001fd6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001fd8:	b118      	cbz	r0, 8001fe2 <HAL_SPI_IRQHandler+0xc6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001fda:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <HAL_SPI_IRQHandler+0xe0>)
 8001fdc:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8001fde:	f7fe fd9b 	bl	8000b18 <HAL_DMA_Abort_IT>
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001fe2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001fe4:	b138      	cbz	r0, 8001ff6 <HAL_SPI_IRQHandler+0xda>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001fe6:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <HAL_SPI_IRQHandler+0xe0>)
 8001fe8:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8001fea:	f7fe fd95 	bl	8000b18 <HAL_DMA_Abort_IT>
 8001fee:	e002      	b.n	8001ff6 <HAL_SPI_IRQHandler+0xda>
        }
      }
      else
      {
        /* Call user error callback */
        HAL_SPI_ErrorCallback(hspi);
 8001ff0:	4620      	mov	r0, r4
 8001ff2:	f001 ff0b 	bl	8003e0c <HAL_SPI_ErrorCallback>
      }
    }
    return;
  }
}
 8001ff6:	b005      	add	sp, #20
 8001ff8:	bd30      	pop	{r4, r5, pc}
 8001ffa:	bf00      	nop
 8001ffc:	08002001 	.word	0x08002001

08002000 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002000:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002002:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800200a:	87c3      	strh	r3, [r0, #62]	; 0x3e

  HAL_SPI_ErrorCallback(hspi);
 800200c:	f001 fefe 	bl	8003e0c <HAL_SPI_ErrorCallback>
 8002010:	bd08      	pop	{r3, pc}

08002012 <TIM_TI1_ConfigInputStage>:
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002012:	6a03      	ldr	r3, [r0, #32]
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002014:	b510      	push	{r4, lr}
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002016:	6a04      	ldr	r4, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002018:	f023 030a 	bic.w	r3, r3, #10
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800201c:	f024 0401 	bic.w	r4, r4, #1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8002020:	4319      	orrs	r1, r3
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002022:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002024:	6984      	ldr	r4, [r0, #24]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002026:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 800202a:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800202e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002030:	6201      	str	r1, [r0, #32]
 8002032:	bd10      	pop	{r4, pc}

08002034 <TIM_TI2_ConfigInputStage>:
{
uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002034:	6a03      	ldr	r3, [r0, #32]
 8002036:	f023 0310 	bic.w	r3, r3, #16
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800203a:	b510      	push	{r4, lr}
uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800203c:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800203e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002040:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002042:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002046:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12);
 800204a:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4);
 800204e:	ea43 1101 	orr.w	r1, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002052:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002054:	6201      	str	r1, [r0, #32]
 8002056:	bd10      	pop	{r4, pc}

08002058 <HAL_TIM_Base_Start>:
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002058:	6802      	ldr	r2, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800205a:	2302      	movs	r3, #2
 800205c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002060:	6813      	ldr	r3, [r2, #0]
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	6013      	str	r3, [r2, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002068:	2301      	movs	r3, #1
 800206a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
}
 800206e:	2000      	movs	r0, #0
 8002070:	4770      	bx	lr

08002072 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002072:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
  
  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8002074:	b151      	cbz	r1, 800208c <HAL_TIM_Encoder_Start_IT+0x1a>
 8002076:	2904      	cmp	r1, #4
 8002078:	d114      	bne.n	80020a4 <HAL_TIM_Encoder_Start_IT+0x32>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800207a:	6a1a      	ldr	r2, [r3, #32]
 800207c:	f022 0210 	bic.w	r2, r2, #16
 8002080:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002082:	6a1a      	ldr	r2, [r3, #32]
 8002084:	f042 0210 	orr.w	r2, r2, #16
 8002088:	621a      	str	r2, [r3, #32]
 800208a:	e01f      	b.n	80020cc <HAL_TIM_Encoder_Start_IT+0x5a>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800208c:	6a1a      	ldr	r2, [r3, #32]
 800208e:	f022 0201 	bic.w	r2, r2, #1
 8002092:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002094:	6a1a      	ldr	r2, [r3, #32]
 8002096:	f042 0201 	orr.w	r2, r2, #1
 800209a:	621a      	str	r2, [r3, #32]
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800209c:	68da      	ldr	r2, [r3, #12]
 800209e:	f042 0202 	orr.w	r2, r2, #2
 80020a2:	e016      	b.n	80020d2 <HAL_TIM_Encoder_Start_IT+0x60>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80020a4:	6a1a      	ldr	r2, [r3, #32]
 80020a6:	f022 0201 	bic.w	r2, r2, #1
 80020aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80020ac:	6a1a      	ldr	r2, [r3, #32]
 80020ae:	f042 0201 	orr.w	r2, r2, #1
 80020b2:	621a      	str	r2, [r3, #32]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80020b4:	6a1a      	ldr	r2, [r3, #32]
 80020b6:	f022 0210 	bic.w	r2, r2, #16
 80020ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80020bc:	6a1a      	ldr	r2, [r3, #32]
 80020be:	f042 0210 	orr.w	r2, r2, #16
 80020c2:	621a      	str	r2, [r3, #32]
    }  
    default :
    {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	f042 0202 	orr.w	r2, r2, #2
 80020ca:	60da      	str	r2, [r3, #12]
     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	f042 0204 	orr.w	r2, r2, #4
 80020d2:	60da      	str	r2, [r3, #12]
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
  
  /* Return function status */
  return HAL_OK;
}
 80020d4:	2000      	movs	r0, #0
     break; 
    }
  }
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	f042 0201 	orr.w	r2, r2, #1
 80020dc:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
}
 80020de:	4770      	bx	lr

080020e0 <HAL_TIM_PeriodElapsedCallback>:
 80020e0:	4770      	bx	lr

080020e2 <HAL_TIM_OC_DelayElapsedCallback>:
 80020e2:	4770      	bx	lr

080020e4 <HAL_TIM_IC_CaptureCallback>:
 80020e4:	4770      	bx	lr

080020e6 <HAL_TIM_PWM_PulseFinishedCallback>:
 80020e6:	4770      	bx	lr

080020e8 <HAL_TIM_TriggerCallback>:
 80020e8:	4770      	bx	lr

080020ea <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020ea:	6803      	ldr	r3, [r0, #0]
 80020ec:	691a      	ldr	r2, [r3, #16]
 80020ee:	0791      	lsls	r1, r2, #30
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020f0:	b510      	push	{r4, lr}
 80020f2:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020f4:	d514      	bpl.n	8002120 <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80020f6:	68da      	ldr	r2, [r3, #12]
 80020f8:	0792      	lsls	r2, r2, #30
 80020fa:	d511      	bpl.n	8002120 <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020fc:	f06f 0202 	mvn.w	r2, #2
 8002100:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002102:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002104:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002106:	7602      	strb	r2, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002108:	0799      	lsls	r1, r3, #30
 800210a:	d002      	beq.n	8002112 <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800210c:	f7ff ffea 	bl	80020e4 <HAL_TIM_IC_CaptureCallback>
 8002110:	e004      	b.n	800211c <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002112:	f7ff ffe6 	bl	80020e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002116:	4620      	mov	r0, r4
 8002118:	f7ff ffe5 	bl	80020e6 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800211c:	2300      	movs	r3, #0
 800211e:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002120:	6823      	ldr	r3, [r4, #0]
 8002122:	691a      	ldr	r2, [r3, #16]
 8002124:	0752      	lsls	r2, r2, #29
 8002126:	d516      	bpl.n	8002156 <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002128:	68da      	ldr	r2, [r3, #12]
 800212a:	0750      	lsls	r0, r2, #29
 800212c:	d513      	bpl.n	8002156 <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800212e:	f06f 0204 	mvn.w	r2, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002132:	4620      	mov	r0, r4
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002136:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002138:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800213a:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 800213c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002140:	d002      	beq.n	8002148 <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002142:	f7ff ffcf 	bl	80020e4 <HAL_TIM_IC_CaptureCallback>
 8002146:	e004      	b.n	8002152 <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002148:	f7ff ffcb 	bl	80020e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800214c:	4620      	mov	r0, r4
 800214e:	f7ff ffca 	bl	80020e6 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002152:	2300      	movs	r3, #0
 8002154:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002156:	6823      	ldr	r3, [r4, #0]
 8002158:	691a      	ldr	r2, [r3, #16]
 800215a:	0711      	lsls	r1, r2, #28
 800215c:	d515      	bpl.n	800218a <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	0712      	lsls	r2, r2, #28
 8002162:	d512      	bpl.n	800218a <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002164:	f06f 0208 	mvn.w	r2, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002168:	4620      	mov	r0, r4
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800216a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800216c:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 800216e:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002170:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002172:	079b      	lsls	r3, r3, #30
 8002174:	d002      	beq.n	800217c <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002176:	f7ff ffb5 	bl	80020e4 <HAL_TIM_IC_CaptureCallback>
 800217a:	e004      	b.n	8002186 <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800217c:	f7ff ffb1 	bl	80020e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002180:	4620      	mov	r0, r4
 8002182:	f7ff ffb0 	bl	80020e6 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002186:	2300      	movs	r3, #0
 8002188:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800218a:	6823      	ldr	r3, [r4, #0]
 800218c:	691a      	ldr	r2, [r3, #16]
 800218e:	06d0      	lsls	r0, r2, #27
 8002190:	d516      	bpl.n	80021c0 <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002192:	68da      	ldr	r2, [r3, #12]
 8002194:	06d1      	lsls	r1, r2, #27
 8002196:	d513      	bpl.n	80021c0 <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002198:	f06f 0210 	mvn.w	r2, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800219c:	4620      	mov	r0, r4
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800219e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021a0:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80021a2:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021a4:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80021a6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80021aa:	d002      	beq.n	80021b2 <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80021ac:	f7ff ff9a 	bl	80020e4 <HAL_TIM_IC_CaptureCallback>
 80021b0:	e004      	b.n	80021bc <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b2:	f7ff ff96 	bl	80020e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b6:	4620      	mov	r0, r4
 80021b8:	f7ff ff95 	bl	80020e6 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021bc:	2300      	movs	r3, #0
 80021be:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021c0:	6823      	ldr	r3, [r4, #0]
 80021c2:	691a      	ldr	r2, [r3, #16]
 80021c4:	07d2      	lsls	r2, r2, #31
 80021c6:	d508      	bpl.n	80021da <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	07d0      	lsls	r0, r2, #31
 80021cc:	d505      	bpl.n	80021da <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021ce:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80021d2:	4620      	mov	r0, r4
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021d4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80021d6:	f7ff ff83 	bl	80020e0 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021da:	6823      	ldr	r3, [r4, #0]
 80021dc:	691a      	ldr	r2, [r3, #16]
 80021de:	0611      	lsls	r1, r2, #24
 80021e0:	d508      	bpl.n	80021f4 <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	0612      	lsls	r2, r2, #24
 80021e6:	d505      	bpl.n	80021f4 <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80021ec:	4620      	mov	r0, r4
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021ee:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80021f0:	f000 fb85 	bl	80028fe <HAL_TIMEx_BreakCallback>
    }
  }
  
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80021f4:	6823      	ldr	r3, [r4, #0]
 80021f6:	691a      	ldr	r2, [r3, #16]
 80021f8:	05d0      	lsls	r0, r2, #23
 80021fa:	d508      	bpl.n	800220e <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	0611      	lsls	r1, r2, #24
 8002200:	d505      	bpl.n	800220e <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002202:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002206:	4620      	mov	r0, r4
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002208:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800220a:	f000 fb78 	bl	80028fe <HAL_TIMEx_BreakCallback>
    }
  }

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800220e:	6823      	ldr	r3, [r4, #0]
 8002210:	691a      	ldr	r2, [r3, #16]
 8002212:	0652      	lsls	r2, r2, #25
 8002214:	d508      	bpl.n	8002228 <HAL_TIM_IRQHandler+0x13e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	0650      	lsls	r0, r2, #25
 800221a:	d505      	bpl.n	8002228 <HAL_TIM_IRQHandler+0x13e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800221c:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002220:	4620      	mov	r0, r4
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002222:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002224:	f7ff ff60 	bl	80020e8 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002228:	6823      	ldr	r3, [r4, #0]
 800222a:	691a      	ldr	r2, [r3, #16]
 800222c:	0691      	lsls	r1, r2, #26
 800222e:	d50a      	bpl.n	8002246 <HAL_TIM_IRQHandler+0x15c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	0692      	lsls	r2, r2, #26
 8002234:	d507      	bpl.n	8002246 <HAL_TIM_IRQHandler+0x15c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002236:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800223a:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800223c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 800223e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 8002242:	f000 bb5b 	b.w	80028fc <HAL_TIMEx_CommutationCallback>
 8002246:	bd10      	pop	{r4, pc}

08002248 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002248:	4a2e      	ldr	r2, [pc, #184]	; (8002304 <TIM_Base_SetConfig+0xbc>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 800224a:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800224c:	4290      	cmp	r0, r2
 800224e:	d012      	beq.n	8002276 <TIM_Base_SetConfig+0x2e>
 8002250:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002254:	d00f      	beq.n	8002276 <TIM_Base_SetConfig+0x2e>
 8002256:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800225a:	4290      	cmp	r0, r2
 800225c:	d00b      	beq.n	8002276 <TIM_Base_SetConfig+0x2e>
 800225e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002262:	4290      	cmp	r0, r2
 8002264:	d007      	beq.n	8002276 <TIM_Base_SetConfig+0x2e>
 8002266:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800226a:	4290      	cmp	r0, r2
 800226c:	d003      	beq.n	8002276 <TIM_Base_SetConfig+0x2e>
 800226e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002272:	4290      	cmp	r0, r2
 8002274:	d118      	bne.n	80022a8 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002276:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800227c:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800227e:	4a21      	ldr	r2, [pc, #132]	; (8002304 <TIM_Base_SetConfig+0xbc>)
 8002280:	4290      	cmp	r0, r2
 8002282:	d037      	beq.n	80022f4 <TIM_Base_SetConfig+0xac>
 8002284:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002288:	d034      	beq.n	80022f4 <TIM_Base_SetConfig+0xac>
 800228a:	4a1f      	ldr	r2, [pc, #124]	; (8002308 <TIM_Base_SetConfig+0xc0>)
 800228c:	4290      	cmp	r0, r2
 800228e:	d031      	beq.n	80022f4 <TIM_Base_SetConfig+0xac>
 8002290:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002294:	4290      	cmp	r0, r2
 8002296:	d02d      	beq.n	80022f4 <TIM_Base_SetConfig+0xac>
 8002298:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800229c:	4290      	cmp	r0, r2
 800229e:	d029      	beq.n	80022f4 <TIM_Base_SetConfig+0xac>
 80022a0:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80022a4:	4290      	cmp	r0, r2
 80022a6:	d025      	beq.n	80022f4 <TIM_Base_SetConfig+0xac>
 80022a8:	4a18      	ldr	r2, [pc, #96]	; (800230c <TIM_Base_SetConfig+0xc4>)
 80022aa:	4290      	cmp	r0, r2
 80022ac:	d022      	beq.n	80022f4 <TIM_Base_SetConfig+0xac>
 80022ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022b2:	4290      	cmp	r0, r2
 80022b4:	d01e      	beq.n	80022f4 <TIM_Base_SetConfig+0xac>
 80022b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022ba:	4290      	cmp	r0, r2
 80022bc:	d01a      	beq.n	80022f4 <TIM_Base_SetConfig+0xac>
 80022be:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80022c2:	4290      	cmp	r0, r2
 80022c4:	d016      	beq.n	80022f4 <TIM_Base_SetConfig+0xac>
 80022c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022ca:	4290      	cmp	r0, r2
 80022cc:	d012      	beq.n	80022f4 <TIM_Base_SetConfig+0xac>
 80022ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022d2:	4290      	cmp	r0, r2
 80022d4:	d00e      	beq.n	80022f4 <TIM_Base_SetConfig+0xac>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 80022d6:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022d8:	688b      	ldr	r3, [r1, #8]
 80022da:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80022dc:	680b      	ldr	r3, [r1, #0]
 80022de:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80022e0:	4b08      	ldr	r3, [pc, #32]	; (8002304 <TIM_Base_SetConfig+0xbc>)
 80022e2:	4298      	cmp	r0, r3
 80022e4:	d00b      	beq.n	80022fe <TIM_Base_SetConfig+0xb6>
 80022e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022ea:	4298      	cmp	r0, r3
 80022ec:	d007      	beq.n	80022fe <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022ee:	2301      	movs	r3, #1
 80022f0:	6143      	str	r3, [r0, #20]
}
 80022f2:	4770      	bx	lr
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022f8:	68ca      	ldr	r2, [r1, #12]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	e7eb      	b.n	80022d6 <TIM_Base_SetConfig+0x8e>
  TIMx->PSC = (uint32_t)Structure->Prescaler;
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022fe:	690b      	ldr	r3, [r1, #16]
 8002300:	6303      	str	r3, [r0, #48]	; 0x30
 8002302:	e7f4      	b.n	80022ee <TIM_Base_SetConfig+0xa6>
 8002304:	40010000 	.word	0x40010000
 8002308:	40000400 	.word	0x40000400
 800230c:	40014000 	.word	0x40014000

08002310 <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8002310:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002312:	4604      	mov	r4, r0
 8002314:	b180      	cbz	r0, 8002338 <HAL_TIM_Base_Init+0x28>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8002316:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800231a:	b90b      	cbnz	r3, 8002320 <HAL_TIM_Base_Init+0x10>
  {  
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800231c:	f003 fa10 	bl	8005740 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002320:	2302      	movs	r3, #2
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002322:	6820      	ldr	r0, [r4, #0]
 8002324:	1d21      	adds	r1, r4, #4
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002326:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800232a:	f7ff ff8d 	bl	8002248 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800232e:	2301      	movs	r3, #1
  
  return HAL_OK;
 8002330:	2000      	movs	r0, #0
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002332:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8002336:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002338:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 800233a:	bd10      	pop	{r4, pc}

0800233c <HAL_TIM_PWM_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800233c:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800233e:	4604      	mov	r4, r0
 8002340:	b1a0      	cbz	r0, 800236c <HAL_TIM_PWM_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002342:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002346:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800234a:	b91b      	cbnz	r3, 8002354 <HAL_TIM_PWM_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;  
 800234c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002350:	f003 fa0a 	bl	8005768 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 8002354:	2302      	movs	r3, #2
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002356:	6820      	ldr	r0, [r4, #0]
 8002358:	1d21      	adds	r1, r4, #4
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 800235a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800235e:	f7ff ff73 	bl	8002248 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002362:	2301      	movs	r3, #1
  
  return HAL_OK;
 8002364:	2000      	movs	r0, #0
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002366:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 800236a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 800236c:	2001      	movs	r0, #1
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}  
 800236e:	bd10      	pop	{r4, pc}

08002370 <HAL_TIM_Encoder_Init>:
  *                the configuration information for TIM module.
  * @param  sConfig: TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 8002370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002372:	460c      	mov	r4, r1
  uint32_t tmpsmcr = 0;
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002374:	4605      	mov	r5, r0
 8002376:	2800      	cmp	r0, #0
 8002378:	d043      	beq.n	8002402 <HAL_TIM_Encoder_Init+0x92>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 800237a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800237e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002382:	b91b      	cbnz	r3, 800238c <HAL_TIM_Encoder_Init+0x1c>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;  
 8002384:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002388:	f003 f97a 	bl	8005680 <HAL_TIM_Encoder_MspInit>
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800238c:	4629      	mov	r1, r5
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 800238e:	2302      	movs	r3, #2
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002390:	f851 0b04 	ldr.w	r0, [r1], #4
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 8002394:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002398:	6883      	ldr	r3, [r0, #8]
 800239a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800239e:	f023 0307 	bic.w	r3, r3, #7
 80023a2:	6083      	str	r3, [r0, #8]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 80023a4:	f7ff ff50 	bl	8002248 <TIM_Base_SetConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023a8:	6828      	ldr	r0, [r5, #0]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80023aa:	6823      	ldr	r3, [r4, #0]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023ac:	6887      	ldr	r7, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80023ae:	6981      	ldr	r1, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80023b0:	431f      	orrs	r7, r3
 80023b2:	69a2      	ldr	r2, [r4, #24]
 80023b4:	f421 7340 	bic.w	r3, r1, #768	; 0x300
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 80023b8:	6921      	ldr	r1, [r4, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80023ba:	6a06      	ldr	r6, [r0, #32]
 80023bc:	f023 0303 	bic.w	r3, r3, #3
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 80023c0:	0109      	lsls	r1, r1, #4
 80023c2:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
 80023c6:	68a3      	ldr	r3, [r4, #8]
 80023c8:	4313      	orrs	r3, r2
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 80023ca:	69e2      	ldr	r2, [r4, #28]
 80023cc:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 80023d0:	68e2      	ldr	r2, [r4, #12]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80023d2:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 80023d6:	430a      	orrs	r2, r1
 80023d8:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80023da:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 80023de:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 80023e2:	6961      	ldr	r1, [r4, #20]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	f026 02aa 	bic.w	r2, r6, #170	; 0xaa
 80023ea:	ea42 1201 	orr.w	r2, r2, r1, lsl #4

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 80023ee:	6861      	ldr	r1, [r4, #4]
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80023f0:	6087      	str	r7, [r0, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 80023f2:	430a      	orrs	r2, r1
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80023f4:	6183      	str	r3, [r0, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80023f6:	2301      	movs	r3, #1

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80023f8:	6202      	str	r2, [r0, #32]
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
 80023fa:	2000      	movs	r0, #0

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80023fc:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  
  return HAL_OK;
 8002400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t tmpccer = 0;
  
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002402:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8002404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002408 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002408:	6a03      	ldr	r3, [r0, #32]
 800240a:	f023 0301 	bic.w	r3, r3, #1
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800240e:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002410:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002412:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002414:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002416:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002418:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800241a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800241e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002422:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002424:	f023 0502 	bic.w	r5, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002428:	688b      	ldr	r3, [r1, #8]
 800242a:	432b      	orrs	r3, r5

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800242c:	4d0c      	ldr	r5, [pc, #48]	; (8002460 <TIM_OC1_SetConfig+0x58>)
 800242e:	42a8      	cmp	r0, r5
 8002430:	d009      	beq.n	8002446 <TIM_OC1_SetConfig+0x3e>
 8002432:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002436:	42a8      	cmp	r0, r5
 8002438:	d005      	beq.n	8002446 <TIM_OC1_SetConfig+0x3e>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800243a:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800243c:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800243e:	6184      	str	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002440:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002442:	6203      	str	r3, [r0, #32]
} 
 8002444:	bd70      	pop	{r4, r5, r6, pc}
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002446:	68cd      	ldr	r5, [r1, #12]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002448:	f023 0308 	bic.w	r3, r3, #8
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800244c:	694e      	ldr	r6, [r1, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800244e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002452:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002454:	698d      	ldr	r5, [r1, #24]
 8002456:	4335      	orrs	r5, r6
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002458:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800245c:	432a      	orrs	r2, r5
 800245e:	e7ec      	b.n	800243a <TIM_OC1_SetConfig+0x32>
 8002460:	40010000 	.word	0x40010000

08002464 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002464:	6a03      	ldr	r3, [r0, #32]
 8002466:	f023 0310 	bic.w	r3, r3, #16
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800246a:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800246c:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800246e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002470:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002472:	6984      	ldr	r4, [r0, #24]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002474:	f023 0320 	bic.w	r3, r3, #32
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002478:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800247a:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 800247e:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002482:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8002486:	688d      	ldr	r5, [r1, #8]
 8002488:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800248c:	4d0e      	ldr	r5, [pc, #56]	; (80024c8 <TIM_OC2_SetConfig+0x64>)
 800248e:	42a8      	cmp	r0, r5
 8002490:	d009      	beq.n	80024a6 <TIM_OC2_SetConfig+0x42>
 8002492:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002496:	42a8      	cmp	r0, r5
 8002498:	d005      	beq.n	80024a6 <TIM_OC2_SetConfig+0x42>
    tmpcr2 |= (OC_Config->OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800249a:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800249c:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800249e:	6184      	str	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80024a0:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024a2:	6203      	str	r3, [r0, #32]
}
 80024a4:	bd30      	pop	{r4, r5, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 80024a6:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80024a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80024ac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 80024b0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80024b4:	694d      	ldr	r5, [r1, #20]
 80024b6:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80024ba:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80024bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80024c0:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 80024c4:	e7e9      	b.n	800249a <TIM_OC2_SetConfig+0x36>
 80024c6:	bf00      	nop
 80024c8:	40010000 	.word	0x40010000

080024cc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024cc:	6a03      	ldr	r3, [r0, #32]
 80024ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024d2:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024d4:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024d6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80024d8:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024da:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80024dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024e0:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80024e2:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80024e6:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024ea:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 80024ec:	688d      	ldr	r5, [r1, #8]
 80024ee:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80024f2:	4d0e      	ldr	r5, [pc, #56]	; (800252c <TIM_OC3_SetConfig+0x60>)
 80024f4:	42a8      	cmp	r0, r5
 80024f6:	d009      	beq.n	800250c <TIM_OC3_SetConfig+0x40>
 80024f8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80024fc:	42a8      	cmp	r0, r5
 80024fe:	d005      	beq.n	800250c <TIM_OC3_SetConfig+0x40>
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002500:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002502:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002504:	61c4      	str	r4, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002506:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002508:	6203      	str	r3, [r0, #32]
}
 800250a:	bd30      	pop	{r4, r5, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 800250c:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800250e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002512:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8002516:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 800251a:	694d      	ldr	r5, [r1, #20]
 800251c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8002520:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002522:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8002526:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 800252a:	e7e9      	b.n	8002500 <TIM_OC3_SetConfig+0x34>
 800252c:	40010000 	.word	0x40010000

08002530 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002530:	6a03      	ldr	r3, [r0, #32]
 8002532:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002536:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002538:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800253a:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800253c:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800253e:	69c3      	ldr	r3, [r0, #28]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002540:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002544:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002546:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800254a:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800254e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8002552:	688d      	ldr	r5, [r1, #8]
 8002554:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002558:	4d09      	ldr	r5, [pc, #36]	; (8002580 <TIM_OC4_SetConfig+0x50>)
 800255a:	42a8      	cmp	r0, r5
 800255c:	d009      	beq.n	8002572 <TIM_OC4_SetConfig+0x42>
 800255e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002562:	42a8      	cmp	r0, r5
 8002564:	d005      	beq.n	8002572 <TIM_OC4_SetConfig+0x42>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002566:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8002568:	61c3      	str	r3, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800256a:	684b      	ldr	r3, [r1, #4]
 800256c:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800256e:	6204      	str	r4, [r0, #32]
}
 8002570:	bd30      	pop	{r4, r5, pc}
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002572:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8002576:	694d      	ldr	r5, [r1, #20]
 8002578:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 800257c:	e7f3      	b.n	8002566 <TIM_OC4_SetConfig+0x36>
 800257e:	bf00      	nop
 8002580:	40010000 	.word	0x40010000

08002584 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002584:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 8002586:	6884      	ldr	r4, [r0, #8]
 8002588:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 800258c:	4321      	orrs	r1, r4
 800258e:	430a      	orrs	r2, r1

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002590:	ea42 2303 	orr.w	r3, r2, r3, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002594:	6083      	str	r3, [r0, #8]
 8002596:	bd10      	pop	{r4, pc}

08002598 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8002598:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800259c:	2b01      	cmp	r3, #1
  * @param  sClockSourceConfig: pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 800259e:	b510      	push	{r4, lr}
 80025a0:	4604      	mov	r4, r0
 80025a2:	f04f 0002 	mov.w	r0, #2
  uint32_t tmpsmcr = 0;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 80025a6:	f000 8082 	beq.w	80026ae <HAL_TIM_ConfigClockSource+0x116>
  
  htim->State = HAL_TIM_STATE_BUSY;
 80025aa:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 80025ae:	2301      	movs	r3, #1
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025b0:	6820      	ldr	r0, [r4, #0]
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 80025b2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025b6:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025b8:	4b3d      	ldr	r3, [pc, #244]	; (80026b0 <HAL_TIM_ConfigClockSource+0x118>)
 80025ba:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80025bc:	6083      	str	r3, [r0, #8]
  
  switch (sClockSourceConfig->ClockSource)
 80025be:	680b      	ldr	r3, [r1, #0]
 80025c0:	2b40      	cmp	r3, #64	; 0x40
 80025c2:	d057      	beq.n	8002674 <HAL_TIM_ConfigClockSource+0xdc>
 80025c4:	d814      	bhi.n	80025f0 <HAL_TIM_ConfigClockSource+0x58>
 80025c6:	2b10      	cmp	r3, #16
 80025c8:	d05f      	beq.n	800268a <HAL_TIM_ConfigClockSource+0xf2>
 80025ca:	d807      	bhi.n	80025dc <HAL_TIM_ConfigClockSource+0x44>
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d168      	bne.n	80026a2 <HAL_TIM_ConfigClockSource+0x10a>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80025d0:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80025d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80025d6:	f043 0307 	orr.w	r3, r3, #7
 80025da:	e061      	b.n	80026a0 <HAL_TIM_ConfigClockSource+0x108>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 80025dc:	2b20      	cmp	r3, #32
 80025de:	d05a      	beq.n	8002696 <HAL_TIM_ConfigClockSource+0xfe>
 80025e0:	2b30      	cmp	r3, #48	; 0x30
 80025e2:	d15e      	bne.n	80026a2 <HAL_TIM_ConfigClockSource+0x10a>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80025e4:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80025e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80025ea:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 80025ee:	e057      	b.n	80026a0 <HAL_TIM_ConfigClockSource+0x108>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 80025f0:	2b70      	cmp	r3, #112	; 0x70
 80025f2:	d025      	beq.n	8002640 <HAL_TIM_ConfigClockSource+0xa8>
 80025f4:	d80e      	bhi.n	8002614 <HAL_TIM_ConfigClockSource+0x7c>
 80025f6:	2b50      	cmp	r3, #80	; 0x50
 80025f8:	d030      	beq.n	800265c <HAL_TIM_ConfigClockSource+0xc4>
 80025fa:	2b60      	cmp	r3, #96	; 0x60
 80025fc:	d151      	bne.n	80026a2 <HAL_TIM_ConfigClockSource+0x10a>
      
      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance, 
 80025fe:	68ca      	ldr	r2, [r1, #12]
 8002600:	6849      	ldr	r1, [r1, #4]
 8002602:	f7ff fd17 	bl	8002034 <TIM_TI2_ConfigInputStage>
                        sClockSourceConfig->ClockPolarity, 
                        sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002606:	6822      	ldr	r2, [r4, #0]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002608:	6893      	ldr	r3, [r2, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800260a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800260e:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8002612:	e02d      	b.n	8002670 <HAL_TIM_ConfigClockSource+0xd8>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8002614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002618:	d00c      	beq.n	8002634 <HAL_TIM_ConfigClockSource+0x9c>
 800261a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800261e:	d140      	bne.n	80026a2 <HAL_TIM_ConfigClockSource+0x10a>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance, 
 8002620:	68cb      	ldr	r3, [r1, #12]
 8002622:	684a      	ldr	r2, [r1, #4]
 8002624:	6889      	ldr	r1, [r1, #8]
 8002626:	f7ff ffad 	bl	8002584 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800262a:	6822      	ldr	r2, [r4, #0]
 800262c:	6893      	ldr	r3, [r2, #8]
 800262e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002632:	e01d      	b.n	8002670 <HAL_TIM_ConfigClockSource+0xd8>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    { 
      assert_param(IS_TIM_INSTANCE(htim->Instance));      
      /* Disable slave mode to clock the prescaler directly with the internal clock */
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002634:	6883      	ldr	r3, [r0, #8]
 8002636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800263a:	f023 0307 	bic.w	r3, r3, #7
 800263e:	e02f      	b.n	80026a0 <HAL_TIM_ConfigClockSource+0x108>
      assert_param(IS_TIM_ETR_INSTANCE(htim->Instance));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance, 
 8002640:	68cb      	ldr	r3, [r1, #12]
 8002642:	684a      	ldr	r2, [r1, #4]
 8002644:	6889      	ldr	r1, [r1, #8]
 8002646:	f7ff ff9d 	bl	8002584 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity, 
                        sClockSourceConfig->ClockFilter);
      /* Get the TIMx SMCR register value */
      tmpsmcr = htim->Instance->SMCR;
 800264a:	6822      	ldr	r2, [r4, #0]
 800264c:	6893      	ldr	r3, [r2, #8]
      /* Reset the SMS and TS Bits */
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800264e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002652:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002656:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800265a:	e009      	b.n	8002670 <HAL_TIM_ConfigClockSource+0xd8>
  
      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance, 
 800265c:	68ca      	ldr	r2, [r1, #12]
 800265e:	6849      	ldr	r1, [r1, #4]
 8002660:	f7ff fcd7 	bl	8002012 <TIM_TI1_ConfigInputStage>
                        sClockSourceConfig->ClockPolarity, 
                        sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002664:	6822      	ldr	r2, [r4, #0]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002666:	6893      	ldr	r3, [r2, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800266c:	f043 0357 	orr.w	r3, r3, #87	; 0x57
      TIM_ETR_SetConfig(htim->Instance, 
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002670:	6093      	str	r3, [r2, #8]
    }
    break;
 8002672:	e016      	b.n	80026a2 <HAL_TIM_ConfigClockSource+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
  
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002674:	68ca      	ldr	r2, [r1, #12]
 8002676:	6849      	ldr	r1, [r1, #4]
 8002678:	f7ff fccb 	bl	8002012 <TIM_TI1_ConfigInputStage>
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800267c:	6822      	ldr	r2, [r4, #0]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800267e:	6893      	ldr	r3, [r2, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002684:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8002688:	e7f2      	b.n	8002670 <HAL_TIM_ConfigClockSource+0xd8>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800268a:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800268c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002690:	f043 0317 	orr.w	r3, r3, #23
 8002694:	e004      	b.n	80026a0 <HAL_TIM_ConfigClockSource+0x108>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002696:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800269c:	f043 0327 	orr.w	r3, r3, #39	; 0x27
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80026a0:	6083      	str	r3, [r0, #8]
    break;
    
    default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 80026a2:	2301      	movs	r3, #1
  
  __HAL_UNLOCK(htim);
 80026a4:	2000      	movs	r0, #0
    break;
    
    default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 80026a6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80026aa:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 80026ae:	bd10      	pop	{r4, pc}
 80026b0:	fffe0088 	.word	0xfffe0088

080026b4 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80026b4:	2301      	movs	r3, #1

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80026b6:	408a      	lsls	r2, r1
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80026b8:	408b      	lsls	r3, r1
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80026ba:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80026bc:	6a04      	ldr	r4, [r0, #32]
 80026be:	ea24 0303 	bic.w	r3, r4, r3
 80026c2:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80026c4:	6a03      	ldr	r3, [r0, #32]
 80026c6:	ea42 0103 	orr.w	r1, r2, r3
 80026ca:	6201      	str	r1, [r0, #32]
 80026cc:	bd10      	pop	{r4, pc}
	...

080026d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026d0:	b510      	push	{r4, lr}
 80026d2:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026d4:	2201      	movs	r2, #1
 80026d6:	6800      	ldr	r0, [r0, #0]
 80026d8:	f7ff ffec 	bl	80026b4 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80026dc:	6823      	ldr	r3, [r4, #0]
 80026de:	4a08      	ldr	r2, [pc, #32]	; (8002700 <HAL_TIM_PWM_Start+0x30>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d003      	beq.n	80026ec <HAL_TIM_PWM_Start+0x1c>
 80026e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d103      	bne.n	80026f4 <HAL_TIM_PWM_Start+0x24>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026f2:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80026f4:	681a      	ldr	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
} 
 80026f6:	2000      	movs	r0, #0
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80026f8:	f042 0201 	orr.w	r2, r2, #1
 80026fc:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
} 
 80026fe:	bd10      	pop	{r4, pc}
 8002700:	40010000 	.word	0x40010000

08002704 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002704:	6a03      	ldr	r3, [r0, #32]
 8002706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800270a:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800270c:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800270e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002710:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002712:	6d44      	ldr	r4, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002714:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002718:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2; 
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800271a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800271e:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002722:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8002724:	688d      	ldr	r5, [r1, #8]
 8002726:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800272a:	4d09      	ldr	r5, [pc, #36]	; (8002750 <TIM_OC5_SetConfig+0x4c>)
 800272c:	42a8      	cmp	r0, r5
 800272e:	d003      	beq.n	8002738 <TIM_OC5_SetConfig+0x34>
 8002730:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002734:	42a8      	cmp	r0, r5
 8002736:	d104      	bne.n	8002742 <TIM_OC5_SetConfig+0x3e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002738:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 800273c:	694d      	ldr	r5, [r1, #20]
 800273e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002742:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002744:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002746:	6544      	str	r4, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002748:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800274a:	6203      	str	r3, [r0, #32]
 800274c:	bd30      	pop	{r4, r5, pc}
 800274e:	bf00      	nop
 8002750:	40010000 	.word	0x40010000

08002754 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002754:	6a03      	ldr	r3, [r0, #32]
 8002756:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800275a:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800275c:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800275e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002760:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002762:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002764:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx = TIMx->CCMR3;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002768:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2; 
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800276a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800276e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002772:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8002776:	688d      	ldr	r5, [r1, #8]
 8002778:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800277c:	4d08      	ldr	r5, [pc, #32]	; (80027a0 <TIM_OC6_SetConfig+0x4c>)
 800277e:	42a8      	cmp	r0, r5
 8002780:	d003      	beq.n	800278a <TIM_OC6_SetConfig+0x36>
 8002782:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002786:	42a8      	cmp	r0, r5
 8002788:	d104      	bne.n	8002794 <TIM_OC6_SetConfig+0x40>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800278a:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 800278e:	694d      	ldr	r5, [r1, #20]
 8002790:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002794:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002796:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002798:	684b      	ldr	r3, [r1, #4]
 800279a:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800279c:	6202      	str	r2, [r0, #32]
 800279e:	bd30      	pop	{r4, r5, pc}
 80027a0:	40010000 	.word	0x40010000

080027a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 80027a4:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80027a6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 80027aa:	4604      	mov	r4, r0
 80027ac:	460d      	mov	r5, r1
 80027ae:	2002      	movs	r0, #2
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d07b      	beq.n	80028ac <HAL_TIM_PWM_ConfigChannel+0x108>
 80027b4:	2301      	movs	r3, #1
  
  htim->State = HAL_TIM_STATE_BUSY;
    
  switch (Channel)
 80027b6:	2a08      	cmp	r2, #8
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
  
  htim->State = HAL_TIM_STATE_BUSY;
 80027b8:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80027bc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
    
  switch (Channel)
 80027c0:	d03c      	beq.n	800283c <HAL_TIM_PWM_ConfigChannel+0x98>
 80027c2:	d813      	bhi.n	80027ec <HAL_TIM_PWM_ConfigChannel+0x48>
 80027c4:	b34a      	cbz	r2, 800281a <HAL_TIM_PWM_ConfigChannel+0x76>
 80027c6:	2a04      	cmp	r2, #4
 80027c8:	d16a      	bne.n	80028a0 <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027ca:	6820      	ldr	r0, [r4, #0]
 80027cc:	f7ff fe4a 	bl	8002464 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027d0:	6823      	ldr	r3, [r4, #0]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80027d2:	6929      	ldr	r1, [r5, #16]
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027d4:	699a      	ldr	r2, [r3, #24]
 80027d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027da:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027dc:	699a      	ldr	r2, [r3, #24]
 80027de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80027e4:	699a      	ldr	r2, [r3, #24]
 80027e6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80027ea:	e025      	b.n	8002838 <HAL_TIM_PWM_ConfigChannel+0x94>
  /* Check input state */
  __HAL_LOCK(htim);
  
  htim->State = HAL_TIM_STATE_BUSY;
    
  switch (Channel)
 80027ec:	2a10      	cmp	r2, #16
 80027ee:	d036      	beq.n	800285e <HAL_TIM_PWM_ConfigChannel+0xba>
 80027f0:	2a14      	cmp	r2, #20
 80027f2:	d044      	beq.n	800287e <HAL_TIM_PWM_ConfigChannel+0xda>
 80027f4:	2a0c      	cmp	r2, #12
 80027f6:	d153      	bne.n	80028a0 <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027f8:	6820      	ldr	r0, [r4, #0]
 80027fa:	f7ff fe99 	bl	8002530 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027fe:	6823      	ldr	r3, [r4, #0]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8002800:	6929      	ldr	r1, [r5, #16]
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002802:	69da      	ldr	r2, [r3, #28]
 8002804:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002808:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800280a:	69da      	ldr	r2, [r3, #28]
 800280c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002810:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8002812:	69da      	ldr	r2, [r3, #28]
 8002814:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002818:	e01f      	b.n	800285a <HAL_TIM_PWM_ConfigChannel+0xb6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800281a:	6820      	ldr	r0, [r4, #0]
 800281c:	f7ff fdf4 	bl	8002408 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002820:	6823      	ldr	r3, [r4, #0]
 8002822:	699a      	ldr	r2, [r3, #24]
 8002824:	f042 0208 	orr.w	r2, r2, #8
 8002828:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800282a:	699a      	ldr	r2, [r3, #24]
 800282c:	f022 0204 	bic.w	r2, r2, #4
 8002830:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002832:	692a      	ldr	r2, [r5, #16]
 8002834:	6999      	ldr	r1, [r3, #24]
 8002836:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002838:	619a      	str	r2, [r3, #24]
    }
    break;
 800283a:	e031      	b.n	80028a0 <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800283c:	6820      	ldr	r0, [r4, #0]
 800283e:	f7ff fe45 	bl	80024cc <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002842:	6823      	ldr	r3, [r4, #0]
 8002844:	69da      	ldr	r2, [r3, #28]
 8002846:	f042 0208 	orr.w	r2, r2, #8
 800284a:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800284c:	69da      	ldr	r2, [r3, #28]
 800284e:	f022 0204 	bic.w	r2, r2, #4
 8002852:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002854:	692a      	ldr	r2, [r5, #16]
 8002856:	69d9      	ldr	r1, [r3, #28]
 8002858:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 800285a:	61da      	str	r2, [r3, #28]
    }
    break;
 800285c:	e020      	b.n	80028a0 <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800285e:	6820      	ldr	r0, [r4, #0]
 8002860:	f7ff ff50 	bl	8002704 <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002864:	6823      	ldr	r3, [r4, #0]
 8002866:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002868:	f042 0208 	orr.w	r2, r2, #8
 800286c:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800286e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002870:	f022 0204 	bic.w	r2, r2, #4
 8002874:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8002876:	692a      	ldr	r2, [r5, #16]
 8002878:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800287a:	430a      	orrs	r2, r1
 800287c:	e00f      	b.n	800289e <HAL_TIM_PWM_ConfigChannel+0xfa>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800287e:	6820      	ldr	r0, [r4, #0]
 8002880:	f7ff ff68 	bl	8002754 <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002884:	6823      	ldr	r3, [r4, #0]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8002886:	6909      	ldr	r1, [r1, #16]
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002888:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800288a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800288e:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002890:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002892:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002896:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8002898:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800289a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800289e:	655a      	str	r2, [r3, #84]	; 0x54
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 80028a0:	2301      	movs	r3, #1
    
  __HAL_UNLOCK(htim);
 80028a2:	2000      	movs	r0, #0
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 80028a4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 80028a8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 80028ac:	bd38      	pop	{r3, r4, r5, pc}
	...

080028b0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80028b0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80028b4:	2b01      	cmp	r3, #1
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80028b6:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80028b8:	d01c      	beq.n	80028f4 <HAL_TIMEx_MasterConfigSynchronization+0x44>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028ba:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80028bc:	4c0e      	ldr	r4, [pc, #56]	; (80028f8 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  
  /* Check input state */
  __HAL_LOCK(htim);

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028be:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80028c0:	42a2      	cmp	r2, r4

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028c2:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80028c4:	d003      	beq.n	80028ce <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 80028c6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80028ca:	42a2      	cmp	r2, r4
 80028cc:	d103      	bne.n	80028d6 <HAL_TIMEx_MasterConfigSynchronization+0x26>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80028ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80028d2:	684c      	ldr	r4, [r1, #4]
 80028d4:	4323      	orrs	r3, r4
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028d6:	680c      	ldr	r4, [r1, #0]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028dc:	6889      	ldr	r1, [r1, #8]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028de:	4323      	orrs	r3, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80028e0:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028e4:	6053      	str	r3, [r2, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028e6:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 80028e8:	2300      	movs	r3, #0
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80028ea:	6091      	str	r1, [r2, #8]

  __HAL_UNLOCK(htim);
 80028ec:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 80028f0:	4618      	mov	r0, r3
 80028f2:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80028f4:	2002      	movs	r0, #2
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
  
  return HAL_OK;
} 
 80028f6:	bd30      	pop	{r4, r5, pc}
 80028f8:	40010000 	.word	0x40010000

080028fc <HAL_TIMEx_CommutationCallback>:
 80028fc:	4770      	bx	lr

080028fe <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028fe:	4770      	bx	lr

08002900 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002904:	9d06      	ldr	r5, [sp, #24]
 8002906:	4604      	mov	r4, r0
 8002908:	460f      	mov	r7, r1
 800290a:	4616      	mov	r6, r2
 800290c:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800290e:	6821      	ldr	r1, [r4, #0]
 8002910:	69ca      	ldr	r2, [r1, #28]
 8002912:	ea37 0302 	bics.w	r3, r7, r2
 8002916:	bf0c      	ite	eq
 8002918:	2201      	moveq	r2, #1
 800291a:	2200      	movne	r2, #0
 800291c:	42b2      	cmp	r2, r6
 800291e:	d11d      	bne.n	800295c <UART_WaitOnFlagUntilTimeout+0x5c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002920:	1c6b      	adds	r3, r5, #1
 8002922:	d0f5      	beq.n	8002910 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8002924:	b99d      	cbnz	r5, 800294e <UART_WaitOnFlagUntilTimeout+0x4e>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002926:	6823      	ldr	r3, [r4, #0]

        huart->gState = HAL_UART_STATE_READY;
        huart->RxState = HAL_UART_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002928:	2003      	movs	r0, #3
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002930:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	f022 0201 	bic.w	r2, r2, #1
 8002938:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800293a:	2320      	movs	r3, #32
 800293c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002940:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002944:	2300      	movs	r3, #0
 8002946:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800294a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800294e:	f7fd fd09 	bl	8000364 <HAL_GetTick>
 8002952:	ebc8 0000 	rsb	r0, r8, r0
 8002956:	4285      	cmp	r5, r0
 8002958:	d8d9      	bhi.n	800290e <UART_WaitOnFlagUntilTimeout+0xe>
 800295a:	e7e4      	b.n	8002926 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800295c:	2000      	movs	r0, #0
}
 800295e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002962 <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002962:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002966:	461f      	mov	r7, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002968:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800296c:	4604      	mov	r4, r0
 800296e:	460d      	mov	r5, r1
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002970:	2b20      	cmp	r3, #32
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002972:	4690      	mov	r8, r2
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002974:	d14b      	bne.n	8002a0e <HAL_UART_Transmit+0xac>
  {
    if((pData == NULL ) || (Size == 0U))
 8002976:	2900      	cmp	r1, #0
 8002978:	d047      	beq.n	8002a0a <HAL_UART_Transmit+0xa8>
 800297a:	2a00      	cmp	r2, #0
 800297c:	d045      	beq.n	8002a0a <HAL_UART_Transmit+0xa8>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800297e:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002982:	2b01      	cmp	r3, #1
 8002984:	d043      	beq.n	8002a0e <HAL_UART_Transmit+0xac>
 8002986:	2301      	movs	r3, #1
 8002988:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800298c:	2300      	movs	r3, #0
 800298e:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002990:	2321      	movs	r3, #33	; 0x21
 8002992:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002996:	f7fd fce5 	bl	8000364 <HAL_GetTick>
 800299a:	4606      	mov	r6, r0

    huart->TxXferSize = Size;
 800299c:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 80029a0:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80029a4:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80029a8:	b292      	uxth	r2, r2
 80029aa:	b302      	cbz	r2, 80029ee <HAL_UART_Transmit+0x8c>
    {
      huart->TxXferCount--;
 80029ac:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029b0:	2200      	movs	r2, #0
 80029b2:	9700      	str	r7, [sp, #0]
 80029b4:	2180      	movs	r1, #128	; 0x80

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0U)
    {
      huart->TxXferCount--;
 80029b6:	3b01      	subs	r3, #1
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029b8:	4620      	mov	r0, r4

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0U)
    {
      huart->TxXferCount--;
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029c0:	4633      	mov	r3, r6
 80029c2:	f7ff ff9d 	bl	8002900 <UART_WaitOnFlagUntilTimeout>
 80029c6:	b108      	cbz	r0, 80029cc <HAL_UART_Transmit+0x6a>
      {
        return HAL_TIMEOUT;
 80029c8:	2003      	movs	r0, #3
 80029ca:	e021      	b.n	8002a10 <HAL_UART_Transmit+0xae>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029cc:	68a3      	ldr	r3, [r4, #8]
 80029ce:	6822      	ldr	r2, [r4, #0]
 80029d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d4:	d107      	bne.n	80029e6 <HAL_UART_Transmit+0x84>
 80029d6:	6923      	ldr	r3, [r4, #16]
 80029d8:	b92b      	cbnz	r3, 80029e6 <HAL_UART_Transmit+0x84>
      {
        tmp = (uint16_t*) pData;
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80029da:	f835 3b02 	ldrh.w	r3, [r5], #2
 80029de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029e2:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2;
 80029e4:	e7de      	b.n	80029a4 <HAL_UART_Transmit+0x42>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80029e6:	782b      	ldrb	r3, [r5, #0]
 80029e8:	3501      	adds	r5, #1
 80029ea:	6293      	str	r3, [r2, #40]	; 0x28
 80029ec:	e7da      	b.n	80029a4 <HAL_UART_Transmit+0x42>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029ee:	9700      	str	r7, [sp, #0]
 80029f0:	4633      	mov	r3, r6
 80029f2:	2140      	movs	r1, #64	; 0x40
 80029f4:	4620      	mov	r0, r4
 80029f6:	f7ff ff83 	bl	8002900 <UART_WaitOnFlagUntilTimeout>
 80029fa:	2800      	cmp	r0, #0
 80029fc:	d1e4      	bne.n	80029c8 <HAL_UART_Transmit+0x66>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029fe:	2320      	movs	r3, #32

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a00:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a04:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    return HAL_OK;
 8002a08:	e002      	b.n	8002a10 <HAL_UART_Transmit+0xae>
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0U))
    {
      return  HAL_ERROR;
 8002a0a:	2001      	movs	r0, #1
 8002a0c:	e000      	b.n	8002a10 <HAL_UART_Transmit+0xae>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002a0e:	2002      	movs	r0, #2
  }
}
 8002a10:	b002      	add	sp, #8
 8002a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002a18 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart: uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a18:	b538      	push	{r3, r4, r5, lr}
 8002a1a:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002a1c:	6805      	ldr	r5, [r0, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a1e:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002a20:	6922      	ldr	r2, [r4, #16]
 8002a22:	68a1      	ldr	r1, [r4, #8]
 8002a24:	6828      	ldr	r0, [r5, #0]
 8002a26:	4311      	orrs	r1, r2
 8002a28:	6962      	ldr	r2, [r4, #20]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	ea42 0103 	orr.w	r1, r2, r3
 8002a30:	4a88      	ldr	r2, [pc, #544]	; (8002c54 <UART_SetConfig+0x23c>)
 8002a32:	4002      	ands	r2, r0
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002a34:	69a0      	ldr	r0, [r4, #24]
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002a36:	430a      	orrs	r2, r1
 8002a38:	602a      	str	r2, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a3a:	686a      	ldr	r2, [r5, #4]
 8002a3c:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8002a40:	68e2      	ldr	r2, [r4, #12]
 8002a42:	430a      	orrs	r2, r1
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002a44:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a46:	606a      	str	r2, [r5, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002a48:	4301      	orrs	r1, r0
 8002a4a:	68aa      	ldr	r2, [r5, #8]
 8002a4c:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002a50:	430a      	orrs	r2, r1
 8002a52:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a54:	4a80      	ldr	r2, [pc, #512]	; (8002c58 <UART_SetConfig+0x240>)
 8002a56:	4295      	cmp	r5, r2
 8002a58:	d107      	bne.n	8002a6a <UART_SetConfig+0x52>
 8002a5a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8002a5e:	497f      	ldr	r1, [pc, #508]	; (8002c5c <UART_SetConfig+0x244>)
 8002a60:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002a64:	f002 0203 	and.w	r2, r2, #3
 8002a68:	e009      	b.n	8002a7e <UART_SetConfig+0x66>
 8002a6a:	4a7d      	ldr	r2, [pc, #500]	; (8002c60 <UART_SetConfig+0x248>)
 8002a6c:	4295      	cmp	r5, r2
 8002a6e:	d10b      	bne.n	8002a88 <UART_SetConfig+0x70>
 8002a70:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8002a74:	497b      	ldr	r1, [pc, #492]	; (8002c64 <UART_SetConfig+0x24c>)
 8002a76:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002a7a:	f002 020c 	and.w	r2, r2, #12

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a82:	5c8a      	ldrb	r2, [r1, r2]
 8002a84:	d073      	beq.n	8002b6e <UART_SetConfig+0x156>
 8002a86:	e0b6      	b.n	8002bf6 <UART_SetConfig+0x1de>
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a88:	4a77      	ldr	r2, [pc, #476]	; (8002c68 <UART_SetConfig+0x250>)
 8002a8a:	4295      	cmp	r5, r2
 8002a8c:	d10d      	bne.n	8002aaa <UART_SetConfig+0x92>
 8002a8e:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8002a92:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002a96:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8002a9a:	2a10      	cmp	r2, #16
 8002a9c:	f000 8086 	beq.w	8002bac <UART_SetConfig+0x194>
 8002aa0:	d95d      	bls.n	8002b5e <UART_SetConfig+0x146>
 8002aa2:	2a20      	cmp	r2, #32
 8002aa4:	d078      	beq.n	8002b98 <UART_SetConfig+0x180>
 8002aa6:	2a30      	cmp	r2, #48	; 0x30
 8002aa8:	e00e      	b.n	8002ac8 <UART_SetConfig+0xb0>
 8002aaa:	4a70      	ldr	r2, [pc, #448]	; (8002c6c <UART_SetConfig+0x254>)
 8002aac:	4295      	cmp	r5, r2
 8002aae:	d10d      	bne.n	8002acc <UART_SetConfig+0xb4>
 8002ab0:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 8002ab4:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002ab8:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8002abc:	2a40      	cmp	r2, #64	; 0x40
 8002abe:	d075      	beq.n	8002bac <UART_SetConfig+0x194>
 8002ac0:	d94d      	bls.n	8002b5e <UART_SetConfig+0x146>
 8002ac2:	2a80      	cmp	r2, #128	; 0x80
 8002ac4:	d068      	beq.n	8002b98 <UART_SetConfig+0x180>
 8002ac6:	2ac0      	cmp	r2, #192	; 0xc0
 8002ac8:	d07c      	beq.n	8002bc4 <UART_SetConfig+0x1ac>
 8002aca:	e087      	b.n	8002bdc <UART_SetConfig+0x1c4>
 8002acc:	4a68      	ldr	r2, [pc, #416]	; (8002c70 <UART_SetConfig+0x258>)
 8002ace:	4295      	cmp	r5, r2
 8002ad0:	d10f      	bne.n	8002af2 <UART_SetConfig+0xda>
 8002ad2:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 8002ad6:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002ada:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002ade:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002ae2:	d063      	beq.n	8002bac <UART_SetConfig+0x194>
 8002ae4:	d93b      	bls.n	8002b5e <UART_SetConfig+0x146>
 8002ae6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002aea:	d055      	beq.n	8002b98 <UART_SetConfig+0x180>
 8002aec:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002af0:	e7ea      	b.n	8002ac8 <UART_SetConfig+0xb0>
 8002af2:	4a60      	ldr	r2, [pc, #384]	; (8002c74 <UART_SetConfig+0x25c>)
 8002af4:	4295      	cmp	r5, r2
 8002af6:	d112      	bne.n	8002b1e <UART_SetConfig+0x106>
 8002af8:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 8002afc:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002b00:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8002b04:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002b08:	d050      	beq.n	8002bac <UART_SetConfig+0x194>
 8002b0a:	d802      	bhi.n	8002b12 <UART_SetConfig+0xfa>
 8002b0c:	2a00      	cmp	r2, #0
 8002b0e:	d03d      	beq.n	8002b8c <UART_SetConfig+0x174>
 8002b10:	e064      	b.n	8002bdc <UART_SetConfig+0x1c4>
 8002b12:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002b16:	d03f      	beq.n	8002b98 <UART_SetConfig+0x180>
 8002b18:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8002b1c:	e7d4      	b.n	8002ac8 <UART_SetConfig+0xb0>
 8002b1e:	4a56      	ldr	r2, [pc, #344]	; (8002c78 <UART_SetConfig+0x260>)
 8002b20:	4295      	cmp	r5, r2
 8002b22:	d10f      	bne.n	8002b44 <UART_SetConfig+0x12c>
 8002b24:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8002b28:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002b2c:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8002b30:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002b34:	d03a      	beq.n	8002bac <UART_SetConfig+0x194>
 8002b36:	d912      	bls.n	8002b5e <UART_SetConfig+0x146>
 8002b38:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002b3c:	d02c      	beq.n	8002b98 <UART_SetConfig+0x180>
 8002b3e:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8002b42:	e7c1      	b.n	8002ac8 <UART_SetConfig+0xb0>
 8002b44:	4a4d      	ldr	r2, [pc, #308]	; (8002c7c <UART_SetConfig+0x264>)
 8002b46:	4295      	cmp	r5, r2
 8002b48:	d148      	bne.n	8002bdc <UART_SetConfig+0x1c4>
 8002b4a:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 8002b4e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002b52:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8002b56:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002b5a:	d027      	beq.n	8002bac <UART_SetConfig+0x194>
 8002b5c:	d801      	bhi.n	8002b62 <UART_SetConfig+0x14a>
 8002b5e:	b17a      	cbz	r2, 8002b80 <UART_SetConfig+0x168>
 8002b60:	e03c      	b.n	8002bdc <UART_SetConfig+0x1c4>
 8002b62:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002b66:	d017      	beq.n	8002b98 <UART_SetConfig+0x180>
 8002b68:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8002b6c:	e7ac      	b.n	8002ac8 <UART_SetConfig+0xb0>

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  {
    switch (clocksource)
 8002b6e:	2a08      	cmp	r2, #8
 8002b70:	d837      	bhi.n	8002be2 <UART_SetConfig+0x1ca>
 8002b72:	e8df f002 	tbb	[pc, r2]
 8002b76:	0e08      	.short	0x0e08
 8002b78:	361e3614 	.word	0x361e3614
 8002b7c:	3636      	.short	0x3636
 8002b7e:	2a          	.byte	0x2a
 8002b7f:	00          	.byte	0x00

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b84:	d140      	bne.n	8002c08 <UART_SetConfig+0x1f0>
  {
    switch (clocksource)
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002b86:	f7fe fdf3 	bl	8001770 <HAL_RCC_GetPCLK1Freq>
 8002b8a:	e014      	b.n	8002bb6 <UART_SetConfig+0x19e>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b90:	d13d      	bne.n	8002c0e <UART_SetConfig+0x1f6>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002b92:	f7fe fe05 	bl	80017a0 <HAL_RCC_GetPCLK2Freq>
 8002b96:	e00e      	b.n	8002bb6 <UART_SetConfig+0x19e>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b9c:	d13a      	bne.n	8002c14 <UART_SetConfig+0x1fc>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002b9e:	6860      	ldr	r0, [r4, #4]
 8002ba0:	0842      	lsrs	r2, r0, #1
 8002ba2:	f102 73f4 	add.w	r3, r2, #31981568	; 0x1e80000
 8002ba6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002baa:	e012      	b.n	8002bd2 <UART_SetConfig+0x1ba>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bb0:	d139      	bne.n	8002c26 <UART_SetConfig+0x20e>
      break;
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002bb2:	f7fe fcef 	bl	8001594 <HAL_RCC_GetSysClockFreq>
 8002bb6:	6863      	ldr	r3, [r4, #4]
 8002bb8:	085a      	lsrs	r2, r3, #1
 8002bba:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8002bbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bc2:	e008      	b.n	8002bd6 <UART_SetConfig+0x1be>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bc8:	d137      	bne.n	8002c3a <UART_SetConfig+0x222>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002bca:	6860      	ldr	r0, [r4, #4]
 8002bcc:	0843      	lsrs	r3, r0, #1
 8002bce:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002bd2:	fbb3 f3f0 	udiv	r3, r3, r0
 8002bd6:	b29b      	uxth	r3, r3
{
  uint32_t tmpreg                     = 0x00000000U;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000U;
  uint16_t usartdiv                   = 0x0000U;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bd8:	2000      	movs	r0, #0
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
 8002bda:	e004      	b.n	8002be6 <UART_SetConfig+0x1ce>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002be0:	d135      	bne.n	8002c4e <UART_SetConfig+0x236>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002be2:	2001      	movs	r0, #1
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg                     = 0x00000000U;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000U;
  uint16_t usartdiv                   = 0x0000U;
 8002be4:	2300      	movs	r3, #0
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002be6:	f3c3 0142 	ubfx	r1, r3, #1, #3
 8002bea:	f023 030f 	bic.w	r3, r3, #15
    huart->Instance->BRR = brrtemp;
 8002bee:	6822      	ldr	r2, [r4, #0]
 8002bf0:	430b      	orrs	r3, r1
 8002bf2:	60d3      	str	r3, [r2, #12]
 8002bf4:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    switch (clocksource)
 8002bf6:	2a08      	cmp	r2, #8
 8002bf8:	d829      	bhi.n	8002c4e <UART_SetConfig+0x236>
 8002bfa:	e8df f002 	tbb	[pc, r2]
 8002bfe:	0805      	.short	0x0805
 8002c00:	2814280b 	.word	0x2814280b
 8002c04:	2828      	.short	0x2828
 8002c06:	1e          	.byte	0x1e
 8002c07:	00          	.byte	0x00
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002c08:	f7fe fdb2 	bl	8001770 <HAL_RCC_GetPCLK1Freq>
 8002c0c:	e00d      	b.n	8002c2a <UART_SetConfig+0x212>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002c0e:	f7fe fdc7 	bl	80017a0 <HAL_RCC_GetPCLK2Freq>
 8002c12:	e00a      	b.n	8002c2a <UART_SetConfig+0x212>
      break;
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002c14:	6861      	ldr	r1, [r4, #4]
 8002c16:	084a      	lsrs	r2, r1, #1
 8002c18:	f502 0374 	add.w	r3, r2, #15990784	; 0xf40000
 8002c1c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002c20:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c24:	e00f      	b.n	8002c46 <UART_SetConfig+0x22e>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002c26:	f7fe fcb5 	bl	8001594 <HAL_RCC_GetSysClockFreq>
 8002c2a:	6863      	ldr	r3, [r4, #4]
 8002c2c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002c30:	fbb0 f0f3 	udiv	r0, r0, r3
 8002c34:	b280      	uxth	r0, r0
 8002c36:	60e8      	str	r0, [r5, #12]
 8002c38:	e007      	b.n	8002c4a <UART_SetConfig+0x232>
      break;
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002c3a:	6862      	ldr	r2, [r4, #4]
 8002c3c:	0853      	lsrs	r3, r2, #1
 8002c3e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002c42:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	60eb      	str	r3, [r5, #12]
{
  uint32_t tmpreg                     = 0x00000000U;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000U;
  uint16_t usartdiv                   = 0x0000U;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c4a:	2000      	movs	r0, #0
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
 8002c4c:	bd38      	pop	{r3, r4, r5, pc}
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002c4e:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 8002c50:	bd38      	pop	{r3, r4, r5, pc}
 8002c52:	bf00      	nop
 8002c54:	efff69f3 	.word	0xefff69f3
 8002c58:	40011000 	.word	0x40011000
 8002c5c:	08006258 	.word	0x08006258
 8002c60:	40004400 	.word	0x40004400
 8002c64:	0800625c 	.word	0x0800625c
 8002c68:	40004800 	.word	0x40004800
 8002c6c:	40004c00 	.word	0x40004c00
 8002c70:	40005000 	.word	0x40005000
 8002c74:	40011400 	.word	0x40011400
 8002c78:	40007800 	.word	0x40007800
 8002c7c:	40007c00 	.word	0x40007c00

08002c80 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c80:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002c82:	07da      	lsls	r2, r3, #31
  * @brief Configure the UART peripheral advanced features
  * @param huart: uart handle
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c84:	b510      	push	{r4, lr}
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c86:	d506      	bpl.n	8002c96 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c88:	6804      	ldr	r4, [r0, #0]
 8002c8a:	6862      	ldr	r2, [r4, #4]
 8002c8c:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8002c90:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002c92:	430a      	orrs	r2, r1
 8002c94:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c96:	079c      	lsls	r4, r3, #30
 8002c98:	d506      	bpl.n	8002ca8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c9a:	6804      	ldr	r4, [r0, #0]
 8002c9c:	6862      	ldr	r2, [r4, #4]
 8002c9e:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8002ca2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ca8:	0759      	lsls	r1, r3, #29
 8002caa:	d506      	bpl.n	8002cba <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002cac:	6804      	ldr	r4, [r0, #0]
 8002cae:	6862      	ldr	r2, [r4, #4]
 8002cb0:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8002cb4:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cba:	071a      	lsls	r2, r3, #28
 8002cbc:	d506      	bpl.n	8002ccc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002cbe:	6804      	ldr	r4, [r0, #0]
 8002cc0:	6862      	ldr	r2, [r4, #4]
 8002cc2:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8002cc6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ccc:	06dc      	lsls	r4, r3, #27
 8002cce:	d506      	bpl.n	8002cde <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cd0:	6804      	ldr	r4, [r0, #0]
 8002cd2:	68a2      	ldr	r2, [r4, #8]
 8002cd4:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8002cd8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cde:	0699      	lsls	r1, r3, #26
 8002ce0:	d506      	bpl.n	8002cf0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ce2:	6804      	ldr	r4, [r0, #0]
 8002ce4:	68a2      	ldr	r2, [r4, #8]
 8002ce6:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8002cea:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002cec:	430a      	orrs	r2, r1
 8002cee:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002cf0:	065a      	lsls	r2, r3, #25
 8002cf2:	d510      	bpl.n	8002d16 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002cf4:	6801      	ldr	r1, [r0, #0]
 8002cf6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002cf8:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002cfa:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002cfe:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002d02:	ea42 0204 	orr.w	r2, r2, r4
 8002d06:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d08:	d105      	bne.n	8002d16 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d0a:	684a      	ldr	r2, [r1, #4]
 8002d0c:	f422 04c0 	bic.w	r4, r2, #6291456	; 0x600000
 8002d10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002d12:	4322      	orrs	r2, r4
 8002d14:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d16:	061b      	lsls	r3, r3, #24
 8002d18:	d506      	bpl.n	8002d28 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d1a:	6801      	ldr	r1, [r0, #0]
 8002d1c:	684b      	ldr	r3, [r1, #4]
 8002d1e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002d22:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002d24:	4313      	orrs	r3, r2
 8002d26:	604b      	str	r3, [r1, #4]
 8002d28:	bd10      	pop	{r4, pc}

08002d2a <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d2c:	2600      	movs	r6, #0
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d2e:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d30:	66c6      	str	r6, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002d32:	f7fd fb17 	bl	8000364 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d36:	6823      	ldr	r3, [r4, #0]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002d38:	4605      	mov	r5, r0

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	071a      	lsls	r2, r3, #28
 8002d3e:	d404      	bmi.n	8002d4a <UART_CheckIdleState+0x20>
      /* Timeout Occurred */
      return HAL_TIMEOUT;
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d40:	6823      	ldr	r3, [r4, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	075b      	lsls	r3, r3, #29
 8002d46:	d51a      	bpl.n	8002d7e <UART_CheckIdleState+0x54>
 8002d48:	e00d      	b.n	8002d66 <UART_CheckIdleState+0x3c>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d4a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d4e:	4632      	mov	r2, r6
 8002d50:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	4603      	mov	r3, r0
 8002d58:	4620      	mov	r0, r4
 8002d5a:	f7ff fdd1 	bl	8002900 <UART_WaitOnFlagUntilTimeout>
 8002d5e:	2800      	cmp	r0, #0
 8002d60:	d0ee      	beq.n	8002d40 <UART_CheckIdleState+0x16>
    {
      /* Timeout Occurred */
      return HAL_TIMEOUT;
 8002d62:	2003      	movs	r0, #3
 8002d64:	e013      	b.n	8002d8e <UART_CheckIdleState+0x64>
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d66:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002d70:	4620      	mov	r0, r4
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	462b      	mov	r3, r5
 8002d76:	f7ff fdc3 	bl	8002900 <UART_WaitOnFlagUntilTimeout>
 8002d7a:	2800      	cmp	r0, #0
 8002d7c:	d1f1      	bne.n	8002d62 <UART_CheckIdleState+0x38>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8002d7e:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d80:	2000      	movs	r0, #0
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8002d82:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d86:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
 8002d8a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
}
 8002d8e:	b002      	add	sp, #8
 8002d90:	bd70      	pop	{r4, r5, r6, pc}

08002d92 <HAL_UART_Init>:
  *         parameters in the UART_InitTypeDef and creates the associated handle .
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d92:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002d94:	4604      	mov	r4, r0
 8002d96:	b360      	cbz	r0, 8002df2 <HAL_UART_Init+0x60>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002d98:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002d9c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002da0:	b91b      	cbnz	r3, 8002daa <HAL_UART_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002da2:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002da6:	f002 fd5d 	bl	8005864 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002daa:	6822      	ldr	r2, [r4, #0]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dac:	2324      	movs	r3, #36	; 0x24

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dae:	4620      	mov	r0, r4

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002db0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002db4:	6813      	ldr	r3, [r2, #0]
 8002db6:	f023 0301 	bic.w	r3, r3, #1
 8002dba:	6013      	str	r3, [r2, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dbc:	f7ff fe2c 	bl	8002a18 <UART_SetConfig>
 8002dc0:	2801      	cmp	r0, #1
 8002dc2:	d016      	beq.n	8002df2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002dc6:	b113      	cbz	r3, 8002dce <HAL_UART_Init+0x3c>
  {
    UART_AdvFeatureConfig(huart);
 8002dc8:	4620      	mov	r0, r4
 8002dca:	f7ff ff59 	bl	8002c80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dce:	6823      	ldr	r3, [r4, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dd0:	4620      	mov	r0, r4
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dd8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002de0:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	f042 0201 	orr.w	r2, r2, #1

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 8002de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002dec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dee:	f7ff bf9c 	b.w	8002d2a <UART_CheckIdleState>
}
 8002df2:	2001      	movs	r0, #1
 8002df4:	bd10      	pop	{r4, pc}
	...

08002df8 <Emergency_Stop>:
	{HAL_TIM_PWM_Stop(&htim9, TIM_CHANNEL_1);}
}

int Emergency_Stop() {

if (dif_l > STOP_CONDITION || dif_r > STOP_CONDITION || cur_move == PAUSE) //Emergency STOP conditions
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <Emergency_Stop+0x30>)
 8002dfa:	f640 62a6 	movw	r2, #3750	; 0xea6
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4293      	cmp	r3, r2
 8002e02:	4b0a      	ldr	r3, [pc, #40]	; (8002e2c <Emergency_Stop+0x34>)
 8002e04:	dc06      	bgt.n	8002e14 <Emergency_Stop+0x1c>
 8002e06:	490a      	ldr	r1, [pc, #40]	; (8002e30 <Emergency_Stop+0x38>)
 8002e08:	6809      	ldr	r1, [r1, #0]
 8002e0a:	4291      	cmp	r1, r2
 8002e0c:	dc02      	bgt.n	8002e14 <Emergency_Stop+0x1c>
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	2a04      	cmp	r2, #4
 8002e12:	d106      	bne.n	8002e22 <Emergency_Stop+0x2a>
	  {
		  if (cur_move == FWD || cur_move == PAUSE) //|| l_turnflag == TRUE || r_turnflag == TRUE)
		  {return TRUE;} //stops motors, and breaks out of searching loop
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f033 0304 	bics.w	r3, r3, #4
 8002e1a:	bf0c      	ite	eq
 8002e1c:	2001      	moveq	r0, #1
 8002e1e:	2000      	movne	r0, #0
 8002e20:	4770      	bx	lr
		  //{return TRUE;}
		  //else if (abs(dif_l - dif_r) > 3600) {
			//  return TRUE;
		  //}
	  }
return FALSE;
 8002e22:	2000      	movs	r0, #0
}
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	20002048 	.word	0x20002048
 8002e2c:	200000f4 	.word	0x200000f4
 8002e30:	200020a8 	.word	0x200020a8

08002e34 <Motor_Correction>:
//int errorD = 0;
//int oldErrorP = 0;

int correction = 0;

if (ir_disable == TRUE) {
 8002e34:	2801      	cmp	r0, #1
 8002e36:	d10f      	bne.n	8002e58 <Motor_Correction+0x24>
	errorP = ((r_count - prev_r_count) - (l_count - prev_l_count))*10;
 8002e38:	4b2a      	ldr	r3, [pc, #168]	; (8002ee4 <Motor_Correction+0xb0>)
 8002e3a:	4a2b      	ldr	r2, [pc, #172]	; (8002ee8 <Motor_Correction+0xb4>)
	return errorP/P_speed;
 8002e3c:	6818      	ldr	r0, [r3, #0]
 8002e3e:	4b2b      	ldr	r3, [pc, #172]	; (8002eec <Motor_Correction+0xb8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4403      	add	r3, r0
 8002e44:	6810      	ldr	r0, [r2, #0]
//int oldErrorP = 0;

int correction = 0;

if (ir_disable == TRUE) {
	errorP = ((r_count - prev_r_count) - (l_count - prev_l_count))*10;
 8002e46:	4a2a      	ldr	r2, [pc, #168]	; (8002ef0 <Motor_Correction+0xbc>)
	return errorP/P_speed;
 8002e48:	1a1b      	subs	r3, r3, r0
 8002e4a:	6810      	ldr	r0, [r2, #0]
 8002e4c:	220a      	movs	r2, #10
 8002e4e:	1a18      	subs	r0, r3, r0
 8002e50:	fb02 f300 	mul.w	r3, r2, r0
 8002e54:	2064      	movs	r0, #100	; 0x64
 8002e56:	e042      	b.n	8002ede <Motor_Correction+0xaa>
}

else {
	if (dif_lf > LEFT_THRESHOLD && dif_rf > RIGHT_THRESHOLD && r_transition_flag == FALSE && l_transition_flag == FALSE) { //both walls available
 8002e58:	4b26      	ldr	r3, [pc, #152]	; (8002ef4 <Motor_Correction+0xc0>)
 8002e5a:	4927      	ldr	r1, [pc, #156]	; (8002ef8 <Motor_Correction+0xc4>)
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 8002e62:	dd0d      	ble.n	8002e80 <Motor_Correction+0x4c>
 8002e64:	6808      	ldr	r0, [r1, #0]
 8002e66:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8002e6a:	dd0a      	ble.n	8002e82 <Motor_Correction+0x4e>
 8002e6c:	4b23      	ldr	r3, [pc, #140]	; (8002efc <Motor_Correction+0xc8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	b93b      	cbnz	r3, 8002e82 <Motor_Correction+0x4e>
 8002e72:	4b23      	ldr	r3, [pc, #140]	; (8002f00 <Motor_Correction+0xcc>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	b923      	cbnz	r3, 8002e82 <Motor_Correction+0x4e>
		errorP = (dif_lf - (dif_rf + offsets[2])); //dif_rf + 500 for primary
 8002e78:	4b22      	ldr	r3, [pc, #136]	; (8002f04 <Motor_Correction+0xd0>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	4403      	add	r3, r0
 8002e7e:	e00a      	b.n	8002e96 <Motor_Correction+0x62>
		//errorD = errorP - oldErrorP;
	}
	else if (dif_lf >= LEFT_THRESHOLD && (dif_rf <= RIGHT_THRESHOLD || r_transition_flag == TRUE)) { //only left wall to correct. Optimal reading should be 1600
 8002e80:	d10b      	bne.n	8002e9a <Motor_Correction+0x66>
 8002e82:	680b      	ldr	r3, [r1, #0]
 8002e84:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e88:	dd03      	ble.n	8002e92 <Motor_Correction+0x5e>
 8002e8a:	4b1c      	ldr	r3, [pc, #112]	; (8002efc <Motor_Correction+0xc8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d103      	bne.n	8002e9a <Motor_Correction+0x66>
		errorP = (dif_lf - offsets[0]); //75 is correction factor. Left side needs more corrections for some reason
 8002e92:	4b1c      	ldr	r3, [pc, #112]	; (8002f04 <Motor_Correction+0xd0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	e020      	b.n	8002edc <Motor_Correction+0xa8>
		//errorD = errorP - oldErrorP;
	}
	else if (dif_rf >= RIGHT_THRESHOLD && (l_transition_flag == TRUE  || dif_lf <= LEFT_THRESHOLD )) {//only right wall to correct. Optimal reading should be 1500. (200 is offset)
 8002e9a:	6808      	ldr	r0, [r1, #0]
 8002e9c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8002ea0:	db0a      	blt.n	8002eb8 <Motor_Correction+0x84>
 8002ea2:	4b17      	ldr	r3, [pc, #92]	; (8002f00 <Motor_Correction+0xcc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d002      	beq.n	8002eb0 <Motor_Correction+0x7c>
 8002eaa:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 8002eae:	dc14      	bgt.n	8002eda <Motor_Correction+0xa6>
		errorP = (offsets[1] - dif_rf); //100 is correction factor. Right side needs less correction
 8002eb0:	4b14      	ldr	r3, [pc, #80]	; (8002f04 <Motor_Correction+0xd0>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	1a1b      	subs	r3, r3, r0
 8002eb6:	e011      	b.n	8002edc <Motor_Correction+0xa8>
		//errorD = errorP - oldErrorP;
	}
	else if (dif_lf <= LEFT_THRESHOLD && dif_rf <= RIGHT_THRESHOLD) { //use encoders when there's no walls available
 8002eb8:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 8002ebc:	dc0d      	bgt.n	8002eda <Motor_Correction+0xa6>
		errorP = ((r_count - prev_r_count) - (l_count - prev_l_count))*3;
 8002ebe:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <Motor_Correction+0xb0>)
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	4b0a      	ldr	r3, [pc, #40]	; (8002eec <Motor_Correction+0xb8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	4a07      	ldr	r2, [pc, #28]	; (8002ee8 <Motor_Correction+0xb4>)
 8002eca:	6810      	ldr	r0, [r2, #0]
 8002ecc:	4a08      	ldr	r2, [pc, #32]	; (8002ef0 <Motor_Correction+0xbc>)
 8002ece:	1a1b      	subs	r3, r3, r0
 8002ed0:	6810      	ldr	r0, [r2, #0]
 8002ed2:	1a1b      	subs	r3, r3, r0
 8002ed4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002ed8:	e000      	b.n	8002edc <Motor_Correction+0xa8>

//int D = 100; //parameters
int P_norm = 55;
int P_speed = 100;

int errorP = 0;
 8002eda:	2300      	movs	r3, #0
	else if (dif_lf <= LEFT_THRESHOLD && dif_rf <= RIGHT_THRESHOLD) { //use encoders when there's no walls available
		errorP = ((r_count - prev_r_count) - (l_count - prev_l_count))*3;
	}	//when right side has moved more, add more to left side
}
//motor correction adds to left motor
correction = errorP/P_norm; //+ errorD/D; //P and D are tuning parameters
 8002edc:	2037      	movs	r0, #55	; 0x37
 8002ede:	fb93 f0f0 	sdiv	r0, r3, r0
return correction;
//}
//else
//{return 0;}

}
 8002ee2:	4770      	bx	lr
 8002ee4:	20003210 	.word	0x20003210
 8002ee8:	20004580 	.word	0x20004580
 8002eec:	200045ec 	.word	0x200045ec
 8002ef0:	200000ec 	.word	0x200000ec
 8002ef4:	200044e4 	.word	0x200044e4
 8002ef8:	2000320c 	.word	0x2000320c
 8002efc:	200020a0 	.word	0x200020a0
 8002f00:	200020b0 	.word	0x200020b0
 8002f04:	20000000 	.word	0x20000000

08002f08 <Reset_Counters>:
*/
}

void Reset_Counters() {

__HAL_TIM_SET_COUNTER(&htim1, 0); //reset counters
 8002f08:	4b12      	ldr	r3, [pc, #72]	; (8002f54 <Reset_Counters+0x4c>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	6253      	str	r3, [r2, #36]	; 0x24
__HAL_TIM_SET_COUNTER(&htim4, 0);
 8002f10:	4a11      	ldr	r2, [pc, #68]	; (8002f58 <Reset_Counters+0x50>)
 8002f12:	6812      	ldr	r2, [r2, #0]
 8002f14:	6253      	str	r3, [r2, #36]	; 0x24
__HAL_TIM_SET_COUNTER(&htim5, 0);
 8002f16:	4a11      	ldr	r2, [pc, #68]	; (8002f5c <Reset_Counters+0x54>)
 8002f18:	6812      	ldr	r2, [r2, #0]
 8002f1a:	6253      	str	r3, [r2, #36]	; 0x24

temp_l = 0;
 8002f1c:	4a10      	ldr	r2, [pc, #64]	; (8002f60 <Reset_Counters+0x58>)
 8002f1e:	6013      	str	r3, [r2, #0]
temp_r = 0;
 8002f20:	4a10      	ldr	r2, [pc, #64]	; (8002f64 <Reset_Counters+0x5c>)
 8002f22:	6013      	str	r3, [r2, #0]
prev_time_count = 0;
 8002f24:	4a10      	ldr	r2, [pc, #64]	; (8002f68 <Reset_Counters+0x60>)
 8002f26:	6013      	str	r3, [r2, #0]

prev_l_count = 0;
 8002f28:	4a10      	ldr	r2, [pc, #64]	; (8002f6c <Reset_Counters+0x64>)
 8002f2a:	6013      	str	r3, [r2, #0]
prev_r_count = 0;
 8002f2c:	4a10      	ldr	r2, [pc, #64]	; (8002f70 <Reset_Counters+0x68>)
 8002f2e:	6013      	str	r3, [r2, #0]
lenc_diff = 0;
 8002f30:	4a10      	ldr	r2, [pc, #64]	; (8002f74 <Reset_Counters+0x6c>)
 8002f32:	6013      	str	r3, [r2, #0]
renc_diff = 0;
 8002f34:	4a10      	ldr	r2, [pc, #64]	; (8002f78 <Reset_Counters+0x70>)
 8002f36:	6013      	str	r3, [r2, #0]

l_count = 0;
 8002f38:	4a10      	ldr	r2, [pc, #64]	; (8002f7c <Reset_Counters+0x74>)
 8002f3a:	6013      	str	r3, [r2, #0]
r_count = 0;
 8002f3c:	4a10      	ldr	r2, [pc, #64]	; (8002f80 <Reset_Counters+0x78>)
 8002f3e:	6013      	str	r3, [r2, #0]
l_count_corr = 0;
 8002f40:	4a10      	ldr	r2, [pc, #64]	; (8002f84 <Reset_Counters+0x7c>)
 8002f42:	6013      	str	r3, [r2, #0]
r_count_corr = 0;
 8002f44:	4a10      	ldr	r2, [pc, #64]	; (8002f88 <Reset_Counters+0x80>)
 8002f46:	6013      	str	r3, [r2, #0]

lenc_diff_corr = 0;
 8002f48:	4a10      	ldr	r2, [pc, #64]	; (8002f8c <Reset_Counters+0x84>)
 8002f4a:	6013      	str	r3, [r2, #0]
renc_diff_corr = 0;
 8002f4c:	4a10      	ldr	r2, [pc, #64]	; (8002f90 <Reset_Counters+0x88>)
 8002f4e:	6013      	str	r3, [r2, #0]
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	20005a9c 	.word	0x20005a9c
 8002f58:	200045f0 	.word	0x200045f0
 8002f5c:	20004638 	.word	0x20004638
 8002f60:	20003280 	.word	0x20003280
 8002f64:	20003324 	.word	0x20003324
 8002f68:	2000462c 	.word	0x2000462c
 8002f6c:	200045ec 	.word	0x200045ec
 8002f70:	20004580 	.word	0x20004580
 8002f74:	200020b8 	.word	0x200020b8
 8002f78:	20001098 	.word	0x20001098
 8002f7c:	200000ec 	.word	0x200000ec
 8002f80:	20003210 	.word	0x20003210
 8002f84:	200000f0 	.word	0x200000f0
 8002f88:	20003064 	.word	0x20003064
 8002f8c:	20003214 	.word	0x20003214
 8002f90:	20003384 	.word	0x20003384

08002f94 <Clear_Buffers>:
	}

}

void Clear_Buffers() {
	for (int i = 0; i < IR_BUFFER; i++) {
 8002f94:	2300      	movs	r3, #0
		lf_buffer[i] = 0;
		rf_buffer[i] = 0;
		r_buffer[i] = 0;
 8002f96:	4809      	ldr	r0, [pc, #36]	; (8002fbc <Clear_Buffers+0x28>)
		l_buffer[i] = 0;
 8002f98:	4909      	ldr	r1, [pc, #36]	; (8002fc0 <Clear_Buffers+0x2c>)

}

void Clear_Buffers() {
	for (int i = 0; i < IR_BUFFER; i++) {
		lf_buffer[i] = 0;
 8002f9a:	461a      	mov	r2, r3
		buff_count = (buff_count + 1) % IR_BUFFER;
	}

}

void Clear_Buffers() {
 8002f9c:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < IR_BUFFER; i++) {
		lf_buffer[i] = 0;
 8002f9e:	4d09      	ldr	r5, [pc, #36]	; (8002fc4 <Clear_Buffers+0x30>)
		rf_buffer[i] = 0;
 8002fa0:	4c09      	ldr	r4, [pc, #36]	; (8002fc8 <Clear_Buffers+0x34>)

}

void Clear_Buffers() {
	for (int i = 0; i < IR_BUFFER; i++) {
		lf_buffer[i] = 0;
 8002fa2:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
		rf_buffer[i] = 0;
 8002fa6:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		r_buffer[i] = 0;
 8002faa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		l_buffer[i] = 0;
 8002fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

}

void Clear_Buffers() {
	for (int i = 0; i < IR_BUFFER; i++) {
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fb8:	d1f3      	bne.n	8002fa2 <Clear_Buffers+0xe>
		lf_buffer[i] = 0;
		rf_buffer[i] = 0;
		r_buffer[i] = 0;
		l_buffer[i] = 0;
	}
}
 8002fba:	bd30      	pop	{r4, r5, pc}
 8002fbc:	200010a4 	.word	0x200010a4
 8002fc0:	200020bc 	.word	0x200020bc
 8002fc4:	20003398 	.word	0x20003398
 8002fc8:	200000f8 	.word	0x200000f8

08002fcc <Reset_Flags>:

void Reset_Flags() {
 8002fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	if (reverse_flag == FALSE) {
 8002fd0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800308c <Reset_Flags+0xc0>
 8002fd4:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8003090 <Reset_Flags+0xc4>
 8002fd8:	f8da 3000 	ldr.w	r3, [sl]
 8002fdc:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8003094 <Reset_Flags+0xc8>
 8002fe0:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8003098 <Reset_Flags+0xcc>
 8002fe4:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 800309c <Reset_Flags+0xd0>
 8002fe8:	4f1b      	ldr	r7, [pc, #108]	; (8003058 <Reset_Flags+0x8c>)
 8002fea:	4e1c      	ldr	r6, [pc, #112]	; (800305c <Reset_Flags+0x90>)
 8002fec:	4d1c      	ldr	r5, [pc, #112]	; (8003060 <Reset_Flags+0x94>)
 8002fee:	481d      	ldr	r0, [pc, #116]	; (8003064 <Reset_Flags+0x98>)
 8002ff0:	4c1d      	ldr	r4, [pc, #116]	; (8003068 <Reset_Flags+0x9c>)
 8002ff2:	491e      	ldr	r1, [pc, #120]	; (800306c <Reset_Flags+0xa0>)
 8002ff4:	4a1e      	ldr	r2, [pc, #120]	; (8003070 <Reset_Flags+0xa4>)
 8002ff6:	b9eb      	cbnz	r3, 8003034 <Reset_Flags+0x68>
		search_flag = FALSE;
		stop_flag = FALSE;

		cur_dir = START_DIR;
		cur_move = FWD; //reset to default direction
		next_move = FWD;
 8002ff8:	6013      	str	r3, [r2, #0]
		x_coord = X_START;
 8002ffa:	4a1e      	ldr	r2, [pc, #120]	; (8003074 <Reset_Flags+0xa8>)
		dead_flag = ARRIVE;
		fwd_flag = FALSE;
		l_transition_flag = FALSE;
		r_transition_flag = FALSE;
		transition_flag = FALSE;
		done_flag = FALSE;
 8002ffc:	6003      	str	r3, [r0, #0]
		reverse_flag = FALSE;
		search_flag = FALSE;
		stop_flag = FALSE;

		cur_dir = START_DIR;
		cur_move = FWD; //reset to default direction
 8002ffe:	600b      	str	r3, [r1, #0]
		l_transition_flag = FALSE;
		r_transition_flag = FALSE;
		transition_flag = FALSE;
		done_flag = FALSE;
		reverse_flag = FALSE;
		search_flag = FALSE;
 8003000:	481d      	ldr	r0, [pc, #116]	; (8003078 <Reset_Flags+0xac>)
		stop_flag = FALSE;

		cur_dir = START_DIR;
		cur_move = FWD; //reset to default direction
		next_move = FWD;
		x_coord = X_START;
 8003002:	6013      	str	r3, [r2, #0]
		y_coord = Y_START;
 8003004:	220f      	movs	r2, #15
 8003006:	491d      	ldr	r1, [pc, #116]	; (800307c <Reset_Flags+0xb0>)
		l_transition_flag = FALSE;
		r_transition_flag = FALSE;
		transition_flag = FALSE;
		done_flag = FALSE;
		reverse_flag = FALSE;
		search_flag = FALSE;
 8003008:	6003      	str	r3, [r0, #0]

		cur_dir = START_DIR;
		cur_move = FWD; //reset to default direction
		next_move = FWD;
		x_coord = X_START;
		y_coord = Y_START;
 800300a:	600a      	str	r2, [r1, #0]
		done_flag = FALSE;
		reverse_flag = FALSE;
		search_flag = FALSE;
		stop_flag = FALSE;

		cur_dir = START_DIR;
 800300c:	481c      	ldr	r0, [pc, #112]	; (8003080 <Reset_Flags+0xb4>)
		cur_move = FWD; //reset to default direction
		next_move = FWD;
		x_coord = X_START;
		y_coord = Y_START;
		prevx = X_START;
 800300e:	491d      	ldr	r1, [pc, #116]	; (8003084 <Reset_Flags+0xb8>)
}

void Reset_Flags() {

	if (reverse_flag == FALSE) {
		r_turnflag = FALSE; //reset turn flags
 8003010:	f8c9 3000 	str.w	r3, [r9]
		l_turnflag = FALSE;
 8003014:	f8c8 3000 	str.w	r3, [r8]
		dead_flag = ARRIVE;
 8003018:	f8cc 3000 	str.w	r3, [ip]
		fwd_flag = FALSE;
 800301c:	f8ce 3000 	str.w	r3, [lr]
		l_transition_flag = FALSE;
 8003020:	603b      	str	r3, [r7, #0]
		r_transition_flag = FALSE;
 8003022:	6033      	str	r3, [r6, #0]
		transition_flag = FALSE;
 8003024:	602b      	str	r3, [r5, #0]
		done_flag = FALSE;
		reverse_flag = FALSE;
		search_flag = FALSE;
		stop_flag = FALSE;
 8003026:	6023      	str	r3, [r4, #0]

		cur_dir = START_DIR;
 8003028:	6003      	str	r3, [r0, #0]
		cur_move = FWD; //reset to default direction
		next_move = FWD;
		x_coord = X_START;
		y_coord = Y_START;
		prevx = X_START;
 800302a:	600b      	str	r3, [r1, #0]
		prevy = Y_START;
 800302c:	4b16      	ldr	r3, [pc, #88]	; (8003088 <Reset_Flags+0xbc>)
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}
	else
	{
		r_turnflag = FALSE; //reset turn flags
 8003034:	2300      	movs	r3, #0
 8003036:	f8c9 3000 	str.w	r3, [r9]
		l_turnflag = FALSE;
 800303a:	f8c8 3000 	str.w	r3, [r8]
		dead_flag = ARRIVE;
 800303e:	f8cc 3000 	str.w	r3, [ip]
		fwd_flag = FALSE;
 8003042:	f8ce 3000 	str.w	r3, [lr]
		l_transition_flag = FALSE;
 8003046:	603b      	str	r3, [r7, #0]
		r_transition_flag = FALSE;
 8003048:	6033      	str	r3, [r6, #0]
		transition_flag = FALSE;
 800304a:	602b      	str	r3, [r5, #0]
		stop_flag = FALSE;
 800304c:	6023      	str	r3, [r4, #0]
		done_flag = FALSE;
 800304e:	6003      	str	r3, [r0, #0]
		cur_move = FWD; //reset to default direction
 8003050:	600b      	str	r3, [r1, #0]
		next_move = FWD;
 8003052:	6013      	str	r3, [r2, #0]
 8003054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003058:	200020b0 	.word	0x200020b0
 800305c:	200020a0 	.word	0x200020a0
 8003060:	200020a4 	.word	0x200020a4
 8003064:	200043a0 	.word	0x200043a0
 8003068:	2000000c 	.word	0x2000000c
 800306c:	200000f4 	.word	0x200000f4
 8003070:	2000337c 	.word	0x2000337c
 8003074:	200044e8 	.word	0x200044e8
 8003078:	200044ec 	.word	0x200044ec
 800307c:	20000010 	.word	0x20000010
 8003080:	20004394 	.word	0x20004394
 8003084:	20003390 	.word	0x20003390
 8003088:	20003394 	.word	0x20003394
 800308c:	2000438c 	.word	0x2000438c
 8003090:	20003060 	.word	0x20003060
 8003094:	2000109c 	.word	0x2000109c
 8003098:	20002044 	.word	0x20002044
 800309c:	20003388 	.word	0x20003388

080030a0 <Transmit>:

Transmit("\r\n");
}

//takes char array
void Transmit(char message[]) {
 80030a0:	b510      	push	{r4, lr}
 80030a2:	4604      	mov	r4, r0

	int len;
	len=strlen(message);
 80030a4:	f7fd f8b4 	bl	8000210 <strlen>
	HAL_UART_Transmit(&huart1, message, len, 1000);
 80030a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030ac:	b282      	uxth	r2, r0
 80030ae:	4621      	mov	r1, r4
 80030b0:	4802      	ldr	r0, [pc, #8]	; (80030bc <Transmit+0x1c>)
}
 80030b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//takes char array
void Transmit(char message[]) {

	int len;
	len=strlen(message);
	HAL_UART_Transmit(&huart1, message, len, 1000);
 80030b6:	f7ff bc54 	b.w	8002962 <HAL_UART_Transmit>
 80030ba:	bf00      	nop
 80030bc:	200050fc 	.word	0x200050fc

080030c0 <Read_Walls_Flash>:
}
Transmit("Done! \r\n");
HAL_FLASH_Lock();
}

void Read_Walls_Flash() {
 80030c0:	b570      	push	{r4, r5, r6, lr}


Transmit("Reading Walls from Flash...... \r\n");
 80030c2:	4814      	ldr	r0, [pc, #80]	; (8003114 <Read_Walls_Flash+0x54>)
 80030c4:	f7ff ffec 	bl	80030a0 <Transmit>
Address = WALLS_ADDR;
 80030c8:	4a13      	ldr	r2, [pc, #76]	; (8003118 <Read_Walls_Flash+0x58>)
 80030ca:	4b14      	ldr	r3, [pc, #80]	; (800311c <Read_Walls_Flash+0x5c>)

for (int i = 0; i < X_MAZE_SIZE; i++) {
	for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
		horiz_walls[i][j] = *(__IO uint32_t *)Address;
 80030cc:	4d14      	ldr	r5, [pc, #80]	; (8003120 <Read_Walls_Flash+0x60>)

void Read_Walls_Flash() {


Transmit("Reading Walls from Flash...... \r\n");
Address = WALLS_ADDR;
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	2200      	movs	r2, #0
}
Transmit("Done! \r\n");
HAL_FLASH_Lock();
}

void Read_Walls_Flash() {
 80030d2:	2100      	movs	r1, #0
Transmit("Reading Walls from Flash...... \r\n");
Address = WALLS_ADDR;

for (int i = 0; i < X_MAZE_SIZE; i++) {
	for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
		horiz_walls[i][j] = *(__IO uint32_t *)Address;
 80030d4:	18ac      	adds	r4, r5, r2
 80030d6:	6818      	ldr	r0, [r3, #0]
 80030d8:	f850 6b04 	ldr.w	r6, [r0], #4
 80030dc:	5466      	strb	r6, [r4, r1]

Transmit("Reading Walls from Flash...... \r\n");
Address = WALLS_ADDR;

for (int i = 0; i < X_MAZE_SIZE; i++) {
	for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
 80030de:	3101      	adds	r1, #1
		horiz_walls[i][j] = *(__IO uint32_t *)Address;
		Address = Address + 4;
 80030e0:	6018      	str	r0, [r3, #0]

Transmit("Reading Walls from Flash...... \r\n");
Address = WALLS_ADDR;

for (int i = 0; i < X_MAZE_SIZE; i++) {
	for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
 80030e2:	290f      	cmp	r1, #15
 80030e4:	d1f7      	bne.n	80030d6 <Read_Walls_Flash+0x16>
 80030e6:	320f      	adds	r2, #15


Transmit("Reading Walls from Flash...... \r\n");
Address = WALLS_ADDR;

for (int i = 0; i < X_MAZE_SIZE; i++) {
 80030e8:	2af0      	cmp	r2, #240	; 0xf0
 80030ea:	d1f2      	bne.n	80030d2 <Read_Walls_Flash+0x12>
 80030ec:	2200      	movs	r2, #0
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) {
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
		vert_walls[i][j] = *(__IO uint32_t *)Address; //type conversion
 80030ee:	4d0d      	ldr	r5, [pc, #52]	; (8003124 <Read_Walls_Flash+0x64>)

void Read_Walls_Flash() {


Transmit("Reading Walls from Flash...... \r\n");
Address = WALLS_ADDR;
 80030f0:	2100      	movs	r1, #0
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) {
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
		vert_walls[i][j] = *(__IO uint32_t *)Address; //type conversion
 80030f2:	18ac      	adds	r4, r5, r2
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	f850 6b04 	ldr.w	r6, [r0], #4
 80030fa:	5466      	strb	r6, [r4, r1]
		Address = Address + 4;
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) {
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
 80030fc:	3101      	adds	r1, #1
		vert_walls[i][j] = *(__IO uint32_t *)Address; //type conversion
		Address = Address + 4;
 80030fe:	6018      	str	r0, [r3, #0]
		Address = Address + 4;
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) {
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
 8003100:	2910      	cmp	r1, #16
 8003102:	d1f7      	bne.n	80030f4 <Read_Walls_Flash+0x34>
 8003104:	3210      	adds	r2, #16
		horiz_walls[i][j] = *(__IO uint32_t *)Address;
		Address = Address + 4;
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) {
 8003106:	2af0      	cmp	r2, #240	; 0xf0
 8003108:	d1f2      	bne.n	80030f0 <Read_Walls_Flash+0x30>
		vert_walls[i][j] = *(__IO uint32_t *)Address; //type conversion
		Address = Address + 4;
	}
}

Transmit("Done! \r\n");
 800310a:	4807      	ldr	r0, [pc, #28]	; (8003128 <Read_Walls_Flash+0x68>)
}
 800310c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		vert_walls[i][j] = *(__IO uint32_t *)Address; //type conversion
		Address = Address + 4;
	}
}

Transmit("Done! \r\n");
 8003110:	f7ff bfc6 	b.w	80030a0 <Transmit>
 8003114:	08006269 	.word	0x08006269
 8003118:	08040000 	.word	0x08040000
 800311c:	2000439c 	.word	0x2000439c
 8003120:	200043a4 	.word	0x200043a4
 8003124:	20003068 	.word	0x20003068
 8003128:	0800628b 	.word	0x0800628b

0800312c <Read_Settings>:
	Transmit("Done! \r\n");
	HAL_FLASH_Lock();

}

void Read_Settings() {
 800312c:	b508      	push	{r3, lr}
Transmit(tx_buffer);
sprintf(tx_buffer, "WALL OFFSETS BEFORE: %d \r\n", offsets[2]);
Transmit(tx_buffer);
*/

Transmit("Reading Settings from Flash...... \r\n");
 800312e:	4811      	ldr	r0, [pc, #68]	; (8003174 <Read_Settings+0x48>)
 8003130:	f7ff ffb6 	bl	80030a0 <Transmit>
Address = SETTINGS_ADDR;

for (int i = 0; i < 3; i++) {
	offsets[i] = *(__IO int *)Address;
 8003134:	4b10      	ldr	r3, [pc, #64]	; (8003178 <Read_Settings+0x4c>)
 8003136:	4911      	ldr	r1, [pc, #68]	; (800317c <Read_Settings+0x50>)
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	4b11      	ldr	r3, [pc, #68]	; (8003180 <Read_Settings+0x54>)
 800313c:	4811      	ldr	r0, [pc, #68]	; (8003184 <Read_Settings+0x58>)
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	6809      	ldr	r1, [r1, #0]
 8003142:	6059      	str	r1, [r3, #4]
 8003144:	4910      	ldr	r1, [pc, #64]	; (8003188 <Read_Settings+0x5c>)
 8003146:	6809      	ldr	r1, [r1, #0]
 8003148:	6099      	str	r1, [r3, #8]
 800314a:	4910      	ldr	r1, [pc, #64]	; (800318c <Read_Settings+0x60>)
 800314c:	6008      	str	r0, [r1, #0]
	Address = Address + 4;

}

if (abs(offsets[0]) > 2000 || abs(offsets[0]) < 100) { //resest
 800314e:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 8003152:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 8003156:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
 800315a:	dc02      	bgt.n	8003162 <Read_Settings+0x36>
 800315c:	3263      	adds	r2, #99	; 0x63
 800315e:	2ac6      	cmp	r2, #198	; 0xc6
 8003160:	d806      	bhi.n	8003170 <Read_Settings+0x44>

	offsets[0] = LEFT_CORRECTION;
 8003162:	f240 5246 	movw	r2, #1350	; 0x546
 8003166:	601a      	str	r2, [r3, #0]
	offsets[1] = RIGHT_CORRECTION;
 8003168:	605a      	str	r2, [r3, #4]
	offsets[2] = WALL_OFFSET;
 800316a:	f06f 0231 	mvn.w	r2, #49	; 0x31
 800316e:	609a      	str	r2, [r3, #8]
 8003170:	bd08      	pop	{r3, pc}
 8003172:	bf00      	nop
 8003174:	08006294 	.word	0x08006294
 8003178:	08080000 	.word	0x08080000
 800317c:	08080004 	.word	0x08080004
 8003180:	20000000 	.word	0x20000000
 8003184:	0808000c 	.word	0x0808000c
 8003188:	08080008 	.word	0x08080008
 800318c:	2000439c 	.word	0x2000439c

08003190 <Send_Debug>:

}

void Send_Debug(void) {

	sprintf(tx_buffer, "L Value: %d  LF Value: %d \r\nRF Value: %d R Value: %d \r\n--------------------- \r\n", dif_l, dif_lf, dif_rf, dif_r); //lf, rf, r);
 8003190:	4b25      	ldr	r3, [pc, #148]	; (8003228 <Send_Debug+0x98>)
 8003192:	4a26      	ldr	r2, [pc, #152]	; (800322c <Send_Debug+0x9c>)
 8003194:	681b      	ldr	r3, [r3, #0]
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
	HAL_GPIO_WritePin(GPIOA, RDIC_Pin, direction);

}

void Send_Debug(void) {
 8003196:	b513      	push	{r0, r1, r4, lr}

	sprintf(tx_buffer, "L Value: %d  LF Value: %d \r\nRF Value: %d R Value: %d \r\n--------------------- \r\n", dif_l, dif_lf, dif_rf, dif_r); //lf, rf, r);
 8003198:	9301      	str	r3, [sp, #4]
 800319a:	4b25      	ldr	r3, [pc, #148]	; (8003230 <Send_Debug+0xa0>)
 800319c:	4c25      	ldr	r4, [pc, #148]	; (8003234 <Send_Debug+0xa4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4925      	ldr	r1, [pc, #148]	; (8003238 <Send_Debug+0xa8>)
 80031a2:	4620      	mov	r0, r4
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	4b25      	ldr	r3, [pc, #148]	; (800323c <Send_Debug+0xac>)
 80031a8:	6812      	ldr	r2, [r2, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f002 fbfa 	bl	80059a4 <siprintf>
	Transmit(tx_buffer); //transmitm the message above
 80031b0:	4620      	mov	r0, r4
 80031b2:	f7ff ff75 	bl	80030a0 <Transmit>
	sprintf(tx_buffer, "Left Count Value: %d \r\nRight Count Value %d \r\n-----------------\r\n", l_count, r_count);
 80031b6:	4b22      	ldr	r3, [pc, #136]	; (8003240 <Send_Debug+0xb0>)
 80031b8:	4a22      	ldr	r2, [pc, #136]	; (8003244 <Send_Debug+0xb4>)
 80031ba:	4620      	mov	r0, r4
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6812      	ldr	r2, [r2, #0]
 80031c0:	4921      	ldr	r1, [pc, #132]	; (8003248 <Send_Debug+0xb8>)
 80031c2:	f002 fbef 	bl	80059a4 <siprintf>
	Transmit(tx_buffer); //transmit the message above
 80031c6:	4620      	mov	r0, r4
 80031c8:	f7ff ff6a 	bl	80030a0 <Transmit>
	sprintf(tx_buffer, "Prev_L: %d \r\nPrev R %d \r\n-----------------\r\n", prev_l_count, prev_r_count);
 80031cc:	4b1f      	ldr	r3, [pc, #124]	; (800324c <Send_Debug+0xbc>)
 80031ce:	4a20      	ldr	r2, [pc, #128]	; (8003250 <Send_Debug+0xc0>)
 80031d0:	4620      	mov	r0, r4
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6812      	ldr	r2, [r2, #0]
 80031d6:	491f      	ldr	r1, [pc, #124]	; (8003254 <Send_Debug+0xc4>)
 80031d8:	f002 fbe4 	bl	80059a4 <siprintf>
	Transmit(tx_buffer); //transmit the message above
 80031dc:	4620      	mov	r0, r4
 80031de:	f7ff ff5f 	bl	80030a0 <Transmit>
	sprintf(tx_buffer, "cur_move: %d \r\nnext_move: %d\r\n-----------------\r\n", cur_move, next_move);
 80031e2:	4b1d      	ldr	r3, [pc, #116]	; (8003258 <Send_Debug+0xc8>)
 80031e4:	4a1d      	ldr	r2, [pc, #116]	; (800325c <Send_Debug+0xcc>)
 80031e6:	4620      	mov	r0, r4
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6812      	ldr	r2, [r2, #0]
 80031ec:	491c      	ldr	r1, [pc, #112]	; (8003260 <Send_Debug+0xd0>)
 80031ee:	f002 fbd9 	bl	80059a4 <siprintf>
	Transmit(tx_buffer);
 80031f2:	4620      	mov	r0, r4
 80031f4:	f7ff ff54 	bl	80030a0 <Transmit>
	sprintf(tx_buffer, "Current Direction: %d \r\n--------------------- \r\n", cur_dir);
 80031f8:	4b1a      	ldr	r3, [pc, #104]	; (8003264 <Send_Debug+0xd4>)
 80031fa:	491b      	ldr	r1, [pc, #108]	; (8003268 <Send_Debug+0xd8>)
 80031fc:	4620      	mov	r0, r4
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	f002 fbd0 	bl	80059a4 <siprintf>
	Transmit(tx_buffer);
 8003204:	4620      	mov	r0, r4
 8003206:	f7ff ff4b 	bl	80030a0 <Transmit>
	sprintf(tx_buffer, "X COORD: %d    Y COORD: %d \r\n--------------------- \r\n", x_coord, y_coord);
 800320a:	4b18      	ldr	r3, [pc, #96]	; (800326c <Send_Debug+0xdc>)
 800320c:	4a18      	ldr	r2, [pc, #96]	; (8003270 <Send_Debug+0xe0>)
 800320e:	4620      	mov	r0, r4
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6812      	ldr	r2, [r2, #0]
 8003214:	4917      	ldr	r1, [pc, #92]	; (8003274 <Send_Debug+0xe4>)
 8003216:	f002 fbc5 	bl	80059a4 <siprintf>
	Transmit(tx_buffer);
 800321a:	4620      	mov	r0, r4
	//sprintf(tx_buffer, "RIGHT Turn Flag: %d \r\nLEFT Turn Flag: %d \r\n-----------------------", r_turnflag, l_turnflag);
}
 800321c:	b002      	add	sp, #8
 800321e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	sprintf(tx_buffer, "cur_move: %d \r\nnext_move: %d\r\n-----------------\r\n", cur_move, next_move);
	Transmit(tx_buffer);
	sprintf(tx_buffer, "Current Direction: %d \r\n--------------------- \r\n", cur_dir);
	Transmit(tx_buffer);
	sprintf(tx_buffer, "X COORD: %d    Y COORD: %d \r\n--------------------- \r\n", x_coord, y_coord);
	Transmit(tx_buffer);
 8003222:	f7ff bf3d 	b.w	80030a0 <Transmit>
 8003226:	bf00      	nop
 8003228:	200020a8 	.word	0x200020a8
 800322c:	20002048 	.word	0x20002048
 8003230:	2000320c 	.word	0x2000320c
 8003234:	20004fec 	.word	0x20004fec
 8003238:	080062b9 	.word	0x080062b9
 800323c:	200044e4 	.word	0x200044e4
 8003240:	20003210 	.word	0x20003210
 8003244:	200000ec 	.word	0x200000ec
 8003248:	08006309 	.word	0x08006309
 800324c:	20004580 	.word	0x20004580
 8003250:	200045ec 	.word	0x200045ec
 8003254:	0800634b 	.word	0x0800634b
 8003258:	2000337c 	.word	0x2000337c
 800325c:	200000f4 	.word	0x200000f4
 8003260:	08006378 	.word	0x08006378
 8003264:	20004394 	.word	0x20004394
 8003268:	080063aa 	.word	0x080063aa
 800326c:	20000010 	.word	0x20000010
 8003270:	200044e8 	.word	0x200044e8
 8003274:	080063db 	.word	0x080063db

08003278 <Save_State>:
	dbg_count = 0;
}

void Save_State(void) {

	l_debug[dbg_count] = front_l;
 8003278:	491d      	ldr	r1, [pc, #116]	; (80032f0 <Save_State+0x78>)
 800327a:	4a1e      	ldr	r2, [pc, #120]	; (80032f4 <Save_State+0x7c>)
 800327c:	680b      	ldr	r3, [r1, #0]
 800327e:	6810      	ldr	r0, [r2, #0]
 8003280:	4a1d      	ldr	r2, [pc, #116]	; (80032f8 <Save_State+0x80>)
 8003282:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	r_debug[dbg_count] = front_r;
 8003286:	4a1d      	ldr	r2, [pc, #116]	; (80032fc <Save_State+0x84>)
 8003288:	6810      	ldr	r0, [r2, #0]
 800328a:	4a1d      	ldr	r2, [pc, #116]	; (8003300 <Save_State+0x88>)
 800328c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	rf_debug[dbg_count] = rf_side;
 8003290:	4a1c      	ldr	r2, [pc, #112]	; (8003304 <Save_State+0x8c>)
 8003292:	6810      	ldr	r0, [r2, #0]
 8003294:	4a1c      	ldr	r2, [pc, #112]	; (8003308 <Save_State+0x90>)
 8003296:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	lf_debug[dbg_count] = lf_side;
 800329a:	4a1c      	ldr	r2, [pc, #112]	; (800330c <Save_State+0x94>)
 800329c:	6810      	ldr	r0, [r2, #0]
 800329e:	4a1c      	ldr	r2, [pc, #112]	; (8003310 <Save_State+0x98>)
 80032a0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	cur_debug[dbg_count] = cur_move;
 80032a4:	4a1b      	ldr	r2, [pc, #108]	; (8003314 <Save_State+0x9c>)
 80032a6:	6810      	ldr	r0, [r2, #0]
 80032a8:	4a1b      	ldr	r2, [pc, #108]	; (8003318 <Save_State+0xa0>)
 80032aa:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	turn_debug[dbg_count] = next_move;
 80032ae:	4a1b      	ldr	r2, [pc, #108]	; (800331c <Save_State+0xa4>)
 80032b0:	6810      	ldr	r0, [r2, #0]
 80032b2:	4a1b      	ldr	r2, [pc, #108]	; (8003320 <Save_State+0xa8>)
 80032b4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	l_count_debug[dbg_count] = l_count;
 80032b8:	4a1a      	ldr	r2, [pc, #104]	; (8003324 <Save_State+0xac>)
 80032ba:	6810      	ldr	r0, [r2, #0]
 80032bc:	4a1a      	ldr	r2, [pc, #104]	; (8003328 <Save_State+0xb0>)
 80032be:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	r_count_debug[dbg_count] = r_count;
 80032c2:	4a1a      	ldr	r2, [pc, #104]	; (800332c <Save_State+0xb4>)
 80032c4:	6810      	ldr	r0, [r2, #0]
 80032c6:	4a1a      	ldr	r2, [pc, #104]	; (8003330 <Save_State+0xb8>)
 80032c8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	prev_l_debug[dbg_count] = prev_l_count;
 80032cc:	4a19      	ldr	r2, [pc, #100]	; (8003334 <Save_State+0xbc>)
 80032ce:	6810      	ldr	r0, [r2, #0]
 80032d0:	4a19      	ldr	r2, [pc, #100]	; (8003338 <Save_State+0xc0>)
 80032d2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	prev_r_debug[dbg_count] = prev_r_count;
 80032d6:	4a19      	ldr	r2, [pc, #100]	; (800333c <Save_State+0xc4>)
 80032d8:	6810      	ldr	r0, [r2, #0]
 80032da:	4a19      	ldr	r2, [pc, #100]	; (8003340 <Save_State+0xc8>)
 80032dc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]

	dbg_count = (dbg_count+1) % DBG_BUFFER;
 80032e0:	3301      	adds	r3, #1
 80032e2:	2014      	movs	r0, #20
 80032e4:	fb93 f2f0 	sdiv	r2, r3, r0
 80032e8:	fb00 3312 	mls	r3, r0, r2, r3
 80032ec:	600b      	str	r3, [r1, #0]
 80032ee:	4770      	bx	lr
 80032f0:	2000321c 	.word	0x2000321c
 80032f4:	2000305c 	.word	0x2000305c
 80032f8:	20002050 	.word	0x20002050
 80032fc:	20003160 	.word	0x20003160
 8003300:	20004494 	.word	0x20004494
 8003304:	200000e8 	.word	0x200000e8
 8003308:	2000316c 	.word	0x2000316c
 800330c:	2000338c 	.word	0x2000338c
 8003310:	200032d4 	.word	0x200032d4
 8003314:	200000f4 	.word	0x200000f4
 8003318:	20004338 	.word	0x20004338
 800331c:	2000337c 	.word	0x2000337c
 8003320:	2000332c 	.word	0x2000332c
 8003324:	200000ec 	.word	0x200000ec
 8003328:	20003284 	.word	0x20003284
 800332c:	20003210 	.word	0x20003210
 8003330:	20003230 	.word	0x20003230
 8003334:	200045ec 	.word	0x200045ec
 8003338:	20000098 	.word	0x20000098
 800333c:	20004580 	.word	0x20004580
 8003340:	200031bc 	.word	0x200031bc

08003344 <Print_Maze>:

	HAL_GPIO_WritePin(GPIOA, GYRO_CS_Pin, GPIO_PIN_RESET);

}

void Print_Maze() {
 8003344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

sprintf(tx_buffer, "Floodfill Values: \r\n");
 8003346:	4931      	ldr	r1, [pc, #196]	; (800340c <Print_Maze+0xc8>)
Transmit(tx_buffer);
 8003348:	2500      	movs	r5, #0

}

void Print_Maze() {

sprintf(tx_buffer, "Floodfill Values: \r\n");
 800334a:	4831      	ldr	r0, [pc, #196]	; (8003410 <Print_Maze+0xcc>)
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //floodfill values
	for (int j = 0; j < X_MAZE_SIZE; j++) {  //go row by row, that's why y is looped first
		sprintf(tx_buffer, "%d ", maze[j][i]);
 800334c:	4e31      	ldr	r6, [pc, #196]	; (8003414 <Print_Maze+0xd0>)

}

void Print_Maze() {

sprintf(tx_buffer, "Floodfill Values: \r\n");
 800334e:	f002 fb4d 	bl	80059ec <strcpy>
Transmit(tx_buffer);
 8003352:	482f      	ldr	r0, [pc, #188]	; (8003410 <Print_Maze+0xcc>)
 8003354:	f7ff fea4 	bl	80030a0 <Transmit>

	HAL_GPIO_WritePin(GPIOA, GYRO_CS_Pin, GPIO_PIN_RESET);

}

void Print_Maze() {
 8003358:	2400      	movs	r4, #0

sprintf(tx_buffer, "Floodfill Values: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //floodfill values
	for (int j = 0; j < X_MAZE_SIZE; j++) {  //go row by row, that's why y is looped first
		sprintf(tx_buffer, "%d ", maze[j][i]);
 800335a:	19a3      	adds	r3, r4, r6
 800335c:	492e      	ldr	r1, [pc, #184]	; (8003418 <Print_Maze+0xd4>)
 800335e:	482c      	ldr	r0, [pc, #176]	; (8003410 <Print_Maze+0xcc>)
 8003360:	3440      	adds	r4, #64	; 0x40
 8003362:	595a      	ldr	r2, [r3, r5]
 8003364:	f002 fb1e 	bl	80059a4 <siprintf>
		Transmit(tx_buffer);
 8003368:	4829      	ldr	r0, [pc, #164]	; (8003410 <Print_Maze+0xcc>)
 800336a:	f7ff fe99 	bl	80030a0 <Transmit>
void Print_Maze() {

sprintf(tx_buffer, "Floodfill Values: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //floodfill values
	for (int j = 0; j < X_MAZE_SIZE; j++) {  //go row by row, that's why y is looped first
 800336e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8003372:	d1f2      	bne.n	800335a <Print_Maze+0x16>
		sprintf(tx_buffer, "%d ", maze[j][i]);
		Transmit(tx_buffer);
	}
	sprintf(tx_buffer, "\r\n \r\n");
 8003374:	4929      	ldr	r1, [pc, #164]	; (800341c <Print_Maze+0xd8>)
 8003376:	3504      	adds	r5, #4
 8003378:	4825      	ldr	r0, [pc, #148]	; (8003410 <Print_Maze+0xcc>)
 800337a:	f002 fb37 	bl	80059ec <strcpy>
	Transmit(tx_buffer);
 800337e:	4824      	ldr	r0, [pc, #144]	; (8003410 <Print_Maze+0xcc>)
 8003380:	f7ff fe8e 	bl	80030a0 <Transmit>

void Print_Maze() {

sprintf(tx_buffer, "Floodfill Values: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //floodfill values
 8003384:	2d40      	cmp	r5, #64	; 0x40
 8003386:	d1e7      	bne.n	8003358 <Print_Maze+0x14>
	}
	sprintf(tx_buffer, "\r\n \r\n");
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Horizontal Walls: \r\n");
 8003388:	4925      	ldr	r1, [pc, #148]	; (8003420 <Print_Maze+0xdc>)
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE - 1; i++) { //horizontal walls
 800338a:	2400      	movs	r4, #0
	}
	sprintf(tx_buffer, "\r\n \r\n");
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Horizontal Walls: \r\n");
 800338c:	4820      	ldr	r0, [pc, #128]	; (8003410 <Print_Maze+0xcc>)
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE - 1; i++) { //horizontal walls
	for (int j = 0; j < X_MAZE_SIZE; j++) {
		sprintf(tx_buffer, "%d ", horiz_walls[j][i]);
 800338e:	4f25      	ldr	r7, [pc, #148]	; (8003424 <Print_Maze+0xe0>)
	}
	sprintf(tx_buffer, "\r\n \r\n");
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Horizontal Walls: \r\n");
 8003390:	f002 fb2c 	bl	80059ec <strcpy>
Transmit(tx_buffer);
 8003394:	481e      	ldr	r0, [pc, #120]	; (8003410 <Print_Maze+0xcc>)
 8003396:	f7ff fe83 	bl	80030a0 <Transmit>
}

void Print_Maze() {

sprintf(tx_buffer, "Floodfill Values: \r\n");
Transmit(tx_buffer);
 800339a:	2500      	movs	r5, #0

sprintf(tx_buffer, "Horizontal Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE - 1; i++) { //horizontal walls
	for (int j = 0; j < X_MAZE_SIZE; j++) {
		sprintf(tx_buffer, "%d ", horiz_walls[j][i]);
 800339c:	193e      	adds	r6, r7, r4
 800339e:	5d72      	ldrb	r2, [r6, r5]
 80033a0:	350f      	adds	r5, #15
 80033a2:	491d      	ldr	r1, [pc, #116]	; (8003418 <Print_Maze+0xd4>)
 80033a4:	481a      	ldr	r0, [pc, #104]	; (8003410 <Print_Maze+0xcc>)
 80033a6:	f002 fafd 	bl	80059a4 <siprintf>
		Transmit(tx_buffer);
 80033aa:	4819      	ldr	r0, [pc, #100]	; (8003410 <Print_Maze+0xcc>)
 80033ac:	f7ff fe78 	bl	80030a0 <Transmit>
}

sprintf(tx_buffer, "Horizontal Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE - 1; i++) { //horizontal walls
	for (int j = 0; j < X_MAZE_SIZE; j++) {
 80033b0:	2df0      	cmp	r5, #240	; 0xf0
 80033b2:	d1f4      	bne.n	800339e <Print_Maze+0x5a>
		sprintf(tx_buffer, "%d ", horiz_walls[j][i]);
		Transmit(tx_buffer);
	}
	sprintf(tx_buffer, "\r\n \r\n");
 80033b4:	4919      	ldr	r1, [pc, #100]	; (800341c <Print_Maze+0xd8>)
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Horizontal Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE - 1; i++) { //horizontal walls
 80033b6:	3401      	adds	r4, #1
	for (int j = 0; j < X_MAZE_SIZE; j++) {
		sprintf(tx_buffer, "%d ", horiz_walls[j][i]);
		Transmit(tx_buffer);
	}
	sprintf(tx_buffer, "\r\n \r\n");
 80033b8:	4815      	ldr	r0, [pc, #84]	; (8003410 <Print_Maze+0xcc>)
 80033ba:	f002 fb17 	bl	80059ec <strcpy>
	Transmit(tx_buffer);
 80033be:	4814      	ldr	r0, [pc, #80]	; (8003410 <Print_Maze+0xcc>)
 80033c0:	f7ff fe6e 	bl	80030a0 <Transmit>
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Horizontal Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE - 1; i++) { //horizontal walls
 80033c4:	2c0f      	cmp	r4, #15
 80033c6:	d1e8      	bne.n	800339a <Print_Maze+0x56>
	}
	sprintf(tx_buffer, "\r\n \r\n");
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Vertical Walls: \r\n");
 80033c8:	4917      	ldr	r1, [pc, #92]	; (8003428 <Print_Maze+0xe4>)
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //vertical walls
 80033ca:	2400      	movs	r4, #0
	}
	sprintf(tx_buffer, "\r\n \r\n");
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Vertical Walls: \r\n");
 80033cc:	4810      	ldr	r0, [pc, #64]	; (8003410 <Print_Maze+0xcc>)
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //vertical walls
	for (int j = 0; j < X_MAZE_SIZE - 1; j++) {
		sprintf(tx_buffer, "%d ", vert_walls[j][i]);
 80033ce:	4f17      	ldr	r7, [pc, #92]	; (800342c <Print_Maze+0xe8>)
	}
	sprintf(tx_buffer, "\r\n \r\n");
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Vertical Walls: \r\n");
 80033d0:	f002 fb0c 	bl	80059ec <strcpy>
Transmit(tx_buffer);
 80033d4:	480e      	ldr	r0, [pc, #56]	; (8003410 <Print_Maze+0xcc>)
 80033d6:	f7ff fe63 	bl	80030a0 <Transmit>
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Horizontal Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE - 1; i++) { //horizontal walls
 80033da:	2500      	movs	r5, #0

sprintf(tx_buffer, "Vertical Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //vertical walls
	for (int j = 0; j < X_MAZE_SIZE - 1; j++) {
		sprintf(tx_buffer, "%d ", vert_walls[j][i]);
 80033dc:	193e      	adds	r6, r7, r4
 80033de:	5d72      	ldrb	r2, [r6, r5]
 80033e0:	3510      	adds	r5, #16
 80033e2:	490d      	ldr	r1, [pc, #52]	; (8003418 <Print_Maze+0xd4>)
 80033e4:	480a      	ldr	r0, [pc, #40]	; (8003410 <Print_Maze+0xcc>)
 80033e6:	f002 fadd 	bl	80059a4 <siprintf>
		Transmit(tx_buffer);
 80033ea:	4809      	ldr	r0, [pc, #36]	; (8003410 <Print_Maze+0xcc>)
 80033ec:	f7ff fe58 	bl	80030a0 <Transmit>
}

sprintf(tx_buffer, "Vertical Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //vertical walls
	for (int j = 0; j < X_MAZE_SIZE - 1; j++) {
 80033f0:	2df0      	cmp	r5, #240	; 0xf0
 80033f2:	d1f4      	bne.n	80033de <Print_Maze+0x9a>
		sprintf(tx_buffer, "%d ", vert_walls[j][i]);
		Transmit(tx_buffer);
	}
	sprintf(tx_buffer, "\r\n \r\n");
 80033f4:	4909      	ldr	r1, [pc, #36]	; (800341c <Print_Maze+0xd8>)
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Vertical Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //vertical walls
 80033f6:	3401      	adds	r4, #1
	for (int j = 0; j < X_MAZE_SIZE - 1; j++) {
		sprintf(tx_buffer, "%d ", vert_walls[j][i]);
		Transmit(tx_buffer);
	}
	sprintf(tx_buffer, "\r\n \r\n");
 80033f8:	4805      	ldr	r0, [pc, #20]	; (8003410 <Print_Maze+0xcc>)
 80033fa:	f002 faf7 	bl	80059ec <strcpy>
	Transmit(tx_buffer);
 80033fe:	4804      	ldr	r0, [pc, #16]	; (8003410 <Print_Maze+0xcc>)
 8003400:	f7ff fe4e 	bl	80030a0 <Transmit>
	Transmit(tx_buffer);
}

sprintf(tx_buffer, "Vertical Walls: \r\n");
Transmit(tx_buffer);
for (int i = 0; i < Y_MAZE_SIZE; i++) { //vertical walls
 8003404:	2c10      	cmp	r4, #16
 8003406:	d1e8      	bne.n	80033da <Print_Maze+0x96>
 8003408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800340a:	bf00      	nop
 800340c:	08006506 	.word	0x08006506
 8003410:	20004fec 	.word	0x20004fec
 8003414:	20004674 	.word	0x20004674
 8003418:	08006441 	.word	0x08006441
 800341c:	0800651b 	.word	0x0800651b
 8003420:	08006521 	.word	0x08006521
 8003424:	200043a4 	.word	0x200043a4
 8003428:	08006536 	.word	0x08006536
 800342c:	20003068 	.word	0x20003068

08003430 <Get_Lowest_Square>:
*/

return;
}

int Get_Lowest_Square(int x, int y) { //gets lowest square
 8003430:	b5f0      	push	{r4, r5, r6, r7, lr}

int values[5] = {127, 127, 127, 127, 127}; //first value is default 127. Then it goes: up, down, left, right
 8003432:	4f2d      	ldr	r7, [pc, #180]	; (80034e8 <Get_Lowest_Square+0xb8>)
*/

return;
}

int Get_Lowest_Square(int x, int y) { //gets lowest square
 8003434:	b087      	sub	sp, #28
 8003436:	4605      	mov	r5, r0
 8003438:	460c      	mov	r4, r1

int values[5] = {127, 127, 127, 127, 127}; //first value is default 127. Then it goes: up, down, left, right
 800343a:	ae01      	add	r6, sp, #4
int min = 0; //make sure there is default value

if (y > 0 && horiz_walls[x][y-1] != TRUE) { //if row is greater than zero
 800343c:	2c00      	cmp	r4, #0
return;
}

int Get_Lowest_Square(int x, int y) { //gets lowest square

int values[5] = {127, 127, 127, 127, 127}; //first value is default 127. Then it goes: up, down, left, right
 800343e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003440:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	a801      	add	r0, sp, #4
 8003446:	ea4f 1205 	mov.w	r2, r5, lsl #4
 800344a:	6033      	str	r3, [r6, #0]
 800344c:	4e27      	ldr	r6, [pc, #156]	; (80034ec <Get_Lowest_Square+0xbc>)
int min = 0; //make sure there is default value

if (y > 0 && horiz_walls[x][y-1] != TRUE) { //if row is greater than zero
 800344e:	dc0b      	bgt.n	8003468 <Get_Lowest_Square+0x38>
	values[1] = maze[x][y - 1]; //up square
}

if (y < Y_MAZE_SIZE - 1 && horiz_walls[x][y] != TRUE) {
 8003450:	1b53      	subs	r3, r2, r5
 8003452:	4433      	add	r3, r6
 8003454:	5d1b      	ldrb	r3, [r3, r4]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d013      	beq.n	8003482 <Get_Lowest_Square+0x52>
	values[2] = maze[x][y + 1]; //down square
 800345a:	1c63      	adds	r3, r4, #1
 800345c:	4924      	ldr	r1, [pc, #144]	; (80034f0 <Get_Lowest_Square+0xc0>)
 800345e:	4413      	add	r3, r2
 8003460:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003464:	9303      	str	r3, [sp, #12]
 8003466:	e00c      	b.n	8003482 <Get_Lowest_Square+0x52>
int Get_Lowest_Square(int x, int y) { //gets lowest square

int values[5] = {127, 127, 127, 127, 127}; //first value is default 127. Then it goes: up, down, left, right
int min = 0; //make sure there is default value

if (y > 0 && horiz_walls[x][y-1] != TRUE) { //if row is greater than zero
 8003468:	1b51      	subs	r1, r2, r5
 800346a:	1e63      	subs	r3, r4, #1
 800346c:	4431      	add	r1, r6
 800346e:	5cc9      	ldrb	r1, [r1, r3]
 8003470:	2901      	cmp	r1, #1
	values[1] = maze[x][y - 1]; //up square
 8003472:	bf1f      	itttt	ne
 8003474:	189b      	addne	r3, r3, r2
 8003476:	491e      	ldrne	r1, [pc, #120]	; (80034f0 <Get_Lowest_Square+0xc0>)
 8003478:	f851 3023 	ldrne.w	r3, [r1, r3, lsl #2]
 800347c:	9302      	strne	r3, [sp, #8]
}

if (y < Y_MAZE_SIZE - 1 && horiz_walls[x][y] != TRUE) {
 800347e:	2c0e      	cmp	r4, #14
 8003480:	dde6      	ble.n	8003450 <Get_Lowest_Square+0x20>
	values[2] = maze[x][y + 1]; //down square
}

if (x > 0 && vert_walls[x - 1][y] != TRUE) {
 8003482:	2d00      	cmp	r5, #0
 8003484:	491b      	ldr	r1, [pc, #108]	; (80034f4 <Get_Lowest_Square+0xc4>)
 8003486:	dc0b      	bgt.n	80034a0 <Get_Lowest_Square+0x70>
	values[3] = maze[x - 1][y]; //left square
}

if (x < X_MAZE_SIZE - 1 && vert_walls[x][y] != TRUE) {
 8003488:	440a      	add	r2, r1
 800348a:	5d13      	ldrb	r3, [r2, r4]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d014      	beq.n	80034ba <Get_Lowest_Square+0x8a>
	values[4] = maze[x + 1][y]; //right square
 8003490:	3501      	adds	r5, #1
 8003492:	4b17      	ldr	r3, [pc, #92]	; (80034f0 <Get_Lowest_Square+0xc0>)
 8003494:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 8003498:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800349c:	9305      	str	r3, [sp, #20]
 800349e:	e00c      	b.n	80034ba <Get_Lowest_Square+0x8a>

if (y < Y_MAZE_SIZE - 1 && horiz_walls[x][y] != TRUE) {
	values[2] = maze[x][y + 1]; //down square
}

if (x > 0 && vert_walls[x - 1][y] != TRUE) {
 80034a0:	1e6b      	subs	r3, r5, #1
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	18ce      	adds	r6, r1, r3
 80034a6:	5d36      	ldrb	r6, [r6, r4]
 80034a8:	2e01      	cmp	r6, #1
	values[3] = maze[x - 1][y]; //left square
 80034aa:	bf1f      	itttt	ne
 80034ac:	191b      	addne	r3, r3, r4
 80034ae:	4e10      	ldrne	r6, [pc, #64]	; (80034f0 <Get_Lowest_Square+0xc0>)
 80034b0:	f856 3023 	ldrne.w	r3, [r6, r3, lsl #2]
 80034b4:	9304      	strne	r3, [sp, #16]
}

if (x < X_MAZE_SIZE - 1 && vert_walls[x][y] != TRUE) {
 80034b6:	2d0e      	cmp	r5, #14
 80034b8:	dde6      	ble.n	8003488 <Get_Lowest_Square+0x58>
	values[4] = maze[x + 1][y]; //right square
}

for (int i = 1; i < 5; i++) { //get the index of the lowest square. Should be 127 by default
 80034ba:	2201      	movs	r2, #1
}

int Get_Lowest_Square(int x, int y) { //gets lowest square

int values[5] = {127, 127, 127, 127, 127}; //first value is default 127. Then it goes: up, down, left, right
int min = 0; //make sure there is default value
 80034bc:	2300      	movs	r3, #0
if (x < X_MAZE_SIZE - 1 && vert_walls[x][y] != TRUE) {
	values[4] = maze[x + 1][y]; //right square
}

for (int i = 1; i < 5; i++) { //get the index of the lowest square. Should be 127 by default
if(values[i] < values[min]) {
 80034be:	a906      	add	r1, sp, #24
 80034c0:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 80034c4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80034c8:	f851 1c14 	ldr.w	r1, [r1, #-20]
 80034cc:	428c      	cmp	r4, r1
 80034ce:	bfb8      	it	lt
 80034d0:	4613      	movlt	r3, r2

if (x < X_MAZE_SIZE - 1 && vert_walls[x][y] != TRUE) {
	values[4] = maze[x + 1][y]; //right square
}

for (int i = 1; i < 5; i++) { //get the index of the lowest square. Should be 127 by default
 80034d2:	3201      	adds	r2, #1
 80034d4:	2a05      	cmp	r2, #5
 80034d6:	d1f2      	bne.n	80034be <Get_Lowest_Square+0x8e>
if(values[i] < values[min]) {
	min = i;
}
}

return values[min];
 80034d8:	aa06      	add	r2, sp, #24
 80034da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
}
 80034de:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80034e2:	b007      	add	sp, #28
 80034e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034e6:	bf00      	nop
 80034e8:	0800622c 	.word	0x0800622c
 80034ec:	200043a4 	.word	0x200043a4
 80034f0:	20004674 	.word	0x20004674
 80034f4:	20003068 	.word	0x20003068

080034f8 <Floodfill>:

void Floodfill(int reverse, int path_search, int full) { //reverse chooses to set the start or the end as the target. path_search sets the next coordinate on the list as the target
 80034f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034fc:	2300      	movs	r3, #0
 80034fe:	f5ad 7d4b 	sub.w	sp, sp, #812	; 0x32c
	int buffer_counter = 0; //counter to loop through x_buffer and y_buffer
	int pathdist = 1; //floodfill values

	for (int i = 0; i < X_MAZE_SIZE; i++) { //initialize all values to 127
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
			maze[i][j] = 127;
 8003502:	4e3e      	ldr	r6, [pc, #248]	; (80035fc <Floodfill+0x104>)
 8003504:	277f      	movs	r7, #127	; 0x7f
}

return values[min];
}

void Floodfill(int reverse, int path_search, int full) { //reverse chooses to set the start or the end as the target. path_search sets the next coordinate on the list as the target
 8003506:	9201      	str	r2, [sp, #4]
 8003508:	2200      	movs	r2, #0
	int buffer_counter = 0; //counter to loop through x_buffer and y_buffer
	int pathdist = 1; //floodfill values

	for (int i = 0; i < X_MAZE_SIZE; i++) { //initialize all values to 127
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
			maze[i][j] = 127;
 800350a:	199d      	adds	r5, r3, r6
 800350c:	f845 7022 	str.w	r7, [r5, r2, lsl #2]

	int buffer_counter = 0; //counter to loop through x_buffer and y_buffer
	int pathdist = 1; //floodfill values

	for (int i = 0; i < X_MAZE_SIZE; i++) { //initialize all values to 127
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
 8003510:	3201      	adds	r2, #1
 8003512:	4c3a      	ldr	r4, [pc, #232]	; (80035fc <Floodfill+0x104>)
 8003514:	2a10      	cmp	r2, #16
 8003516:	d1f9      	bne.n	800350c <Floodfill+0x14>
 8003518:	3340      	adds	r3, #64	; 0x40
	int temp_y = 0;

	int buffer_counter = 0; //counter to loop through x_buffer and y_buffer
	int pathdist = 1; //floodfill values

	for (int i = 0; i < X_MAZE_SIZE; i++) { //initialize all values to 127
 800351a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800351e:	d1f3      	bne.n	8003508 <Floodfill+0x10>
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
			maze[i][j] = 127;
		}
	}

	if (path_search == TRUE) {
 8003520:	2901      	cmp	r1, #1
 8003522:	d109      	bne.n	8003538 <Floodfill+0x40>
		maze[search_x][search_y] = 0;
 8003524:	4b36      	ldr	r3, [pc, #216]	; (8003600 <Floodfill+0x108>)
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	4b36      	ldr	r3, [pc, #216]	; (8003604 <Floodfill+0x10c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8003530:	2200      	movs	r2, #0
 8003532:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 8003536:	e00d      	b.n	8003554 <Floodfill+0x5c>
	}

	else {
		if (reverse == TRUE) {
 8003538:	2801      	cmp	r0, #1
 800353a:	f04f 0300 	mov.w	r3, #0
			maze[X_START][Y_START] = 0;
 800353e:	bf0f      	iteee	eq
 8003540:	63e3      	streq	r3, [r4, #60]	; 0x3c
		}

		else
		{
			maze[X_FINAL][Y_FINAL] = 0;
 8003542:	f8c4 31dc 	strne.w	r3, [r4, #476]	; 0x1dc
#if X_MAZE_SIZE == 16
			maze[X_FINAL+1][Y_FINAL] = 0;
 8003546:	f8c4 321c 	strne.w	r3, [r4, #540]	; 0x21c
			maze[X_FINAL][Y_FINAL+1] = 0;
 800354a:	f8c4 31e0 	strne.w	r3, [r4, #480]	; 0x1e0
			maze[X_FINAL+1][Y_FINAL+1] = 0;
 800354e:	bf18      	it	ne
 8003550:	f8c4 3220 	strne.w	r3, [r4, #544]	; 0x220
			temp_y = y_buffer[i];
			maze[temp_x][temp_y] = pathdist;
		}

		if (full == FALSE) {
			if (maze[x_coord][y_coord] != 127) { //if the algorithm has reached the desired position
 8003554:	4b2c      	ldr	r3, [pc, #176]	; (8003608 <Floodfill+0x110>)
 8003556:	2701      	movs	r7, #1
				if (maze[i][j] != 127) {
					continue; //if cell has already been updated skip it
				}
				if (Get_Lowest_Square(i, j) != 127) { //if reached, add to buffer
					x_buffer[buffer_counter] = i; //x_ coordinate buffer
					y_buffer[buffer_counter] = j; //y coordinate buffer
 8003558:	f50d 7acc 	add.w	sl, sp, #408	; 0x198
			temp_y = y_buffer[i];
			maze[temp_x][temp_y] = pathdist;
		}

		if (full == FALSE) {
			if (maze[x_coord][y_coord] != 127) { //if the algorithm has reached the desired position
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	4b2b      	ldr	r3, [pc, #172]	; (800360c <Floodfill+0x114>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	eb03 1902 	add.w	r9, r3, r2, lsl #4

	while(1) {

		buffer_counter = 0;

		for (int i = 0; i < X_MAZE_SIZE; i++) { //loop through all values to see if square has been reached
 8003566:	2500      	movs	r5, #0
		}
	}

	while(1) {

		buffer_counter = 0;
 8003568:	46a8      	mov	r8, r5
 800356a:	eb04 1b85 	add.w	fp, r4, r5, lsl #6
			temp_y = y_buffer[i];
			maze[temp_x][temp_y] = pathdist;
		}

		if (full == FALSE) {
			if (maze[x_coord][y_coord] != 127) { //if the algorithm has reached the desired position
 800356e:	2600      	movs	r6, #0

		buffer_counter = 0;

		for (int i = 0; i < X_MAZE_SIZE; i++) { //loop through all values to see if square has been reached
			for (int j = 0; j < Y_MAZE_SIZE; j++) {
				if (maze[i][j] != 127) {
 8003570:	f85b 2026 	ldr.w	r2, [fp, r6, lsl #2]
 8003574:	2a7f      	cmp	r2, #127	; 0x7f
 8003576:	d10c      	bne.n	8003592 <Floodfill+0x9a>
					continue; //if cell has already been updated skip it
				}
				if (Get_Lowest_Square(i, j) != 127) { //if reached, add to buffer
 8003578:	4631      	mov	r1, r6
 800357a:	4628      	mov	r0, r5
 800357c:	f7ff ff58 	bl	8003430 <Get_Lowest_Square>
 8003580:	287f      	cmp	r0, #127	; 0x7f
					x_buffer[buffer_counter] = i; //x_ coordinate buffer
 8003582:	bf1f      	itttt	ne
 8003584:	ab02      	addne	r3, sp, #8
					y_buffer[buffer_counter] = j; //y coordinate buffer
 8003586:	f84a 6028 	strne.w	r6, [sl, r8, lsl #2]
			for (int j = 0; j < Y_MAZE_SIZE; j++) {
				if (maze[i][j] != 127) {
					continue; //if cell has already been updated skip it
				}
				if (Get_Lowest_Square(i, j) != 127) { //if reached, add to buffer
					x_buffer[buffer_counter] = i; //x_ coordinate buffer
 800358a:	f843 5028 	strne.w	r5, [r3, r8, lsl #2]
					y_buffer[buffer_counter] = j; //y coordinate buffer
					buffer_counter++;
 800358e:	f108 0801 	addne.w	r8, r8, #1
	while(1) {

		buffer_counter = 0;

		for (int i = 0; i < X_MAZE_SIZE; i++) { //loop through all values to see if square has been reached
			for (int j = 0; j < Y_MAZE_SIZE; j++) {
 8003592:	3601      	adds	r6, #1
 8003594:	2e10      	cmp	r6, #16
 8003596:	d1eb      	bne.n	8003570 <Floodfill+0x78>

	while(1) {

		buffer_counter = 0;

		for (int i = 0; i < X_MAZE_SIZE; i++) { //loop through all values to see if square has been reached
 8003598:	3501      	adds	r5, #1
 800359a:	2d10      	cmp	r5, #16
 800359c:	d1e5      	bne.n	800356a <Floodfill+0x72>
 800359e:	2100      	movs	r1, #0
					buffer_counter++;
				}
			}
		}

		for (int i = 0; i < buffer_counter; i++) { //write all buffer coordinates with the path distance
 80035a0:	4588      	cmp	r8, r1
 80035a2:	d00a      	beq.n	80035ba <Floodfill+0xc2>
			temp_x = x_buffer[i];
			temp_y = y_buffer[i];
			maze[temp_x][temp_y] = pathdist;
 80035a4:	ab02      	add	r3, sp, #8
 80035a6:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 80035aa:	f85a 3021 	ldr.w	r3, [sl, r1, lsl #2]
					buffer_counter++;
				}
			}
		}

		for (int i = 0; i < buffer_counter; i++) { //write all buffer coordinates with the path distance
 80035ae:	3101      	adds	r1, #1
			temp_x = x_buffer[i];
			temp_y = y_buffer[i];
			maze[temp_x][temp_y] = pathdist;
 80035b0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80035b4:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
 80035b8:	e7f2      	b.n	80035a0 <Floodfill+0xa8>
		}

		if (full == FALSE) {
 80035ba:	9b01      	ldr	r3, [sp, #4]
 80035bc:	b913      	cbnz	r3, 80035c4 <Floodfill+0xcc>
			if (maze[x_coord][y_coord] != 127) { //if the algorithm has reached the desired position
 80035be:	f854 3029 	ldr.w	r3, [r4, r9, lsl #2]
 80035c2:	e000      	b.n	80035c6 <Floodfill+0xce>
				break;
			}
		}
		else {

			if (maze[X_START][Y_START] != 127) {
 80035c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80035c6:	2b7f      	cmp	r3, #127	; 0x7f
 80035c8:	d113      	bne.n	80035f2 <Floodfill+0xfa>
				break;
			}
		}


		pathdist++;
 80035ca:	3701      	adds	r7, #1

		if (pathdist > 200) { //prevent infinite loops
 80035cc:	2fc9      	cmp	r7, #201	; 0xc9
 80035ce:	d1ca      	bne.n	8003566 <Floodfill+0x6e>
			stop_flag = TRUE;
 80035d0:	4b0f      	ldr	r3, [pc, #60]	; (8003610 <Floodfill+0x118>)
 80035d2:	2201      	movs	r2, #1
			sprintf(tx_buffer, "Floodfill Error pathdist: %d \r\n", pathdist);
 80035d4:	490f      	ldr	r1, [pc, #60]	; (8003614 <Floodfill+0x11c>)


		pathdist++;

		if (pathdist > 200) { //prevent infinite loops
			stop_flag = TRUE;
 80035d6:	601a      	str	r2, [r3, #0]
			sprintf(tx_buffer, "Floodfill Error pathdist: %d \r\n", pathdist);
 80035d8:	463a      	mov	r2, r7
 80035da:	480f      	ldr	r0, [pc, #60]	; (8003618 <Floodfill+0x120>)
 80035dc:	f002 f9e2 	bl	80059a4 <siprintf>
			Print_Maze();
 80035e0:	f7ff feb0 	bl	8003344 <Print_Maze>
			Transmit(tx_buffer);
 80035e4:	480c      	ldr	r0, [pc, #48]	; (8003618 <Floodfill+0x120>)
			break;
		}

	}
//end algorithm while
}
 80035e6:	f50d 7d4b 	add.w	sp, sp, #812	; 0x32c
 80035ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

		if (pathdist > 200) { //prevent infinite loops
			stop_flag = TRUE;
			sprintf(tx_buffer, "Floodfill Error pathdist: %d \r\n", pathdist);
			Print_Maze();
			Transmit(tx_buffer);
 80035ee:	f7ff bd57 	b.w	80030a0 <Transmit>
			break;
		}

	}
//end algorithm while
}
 80035f2:	f50d 7d4b 	add.w	sp, sp, #812	; 0x32c
 80035f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035fa:	bf00      	nop
 80035fc:	20004674 	.word	0x20004674
 8003600:	20004630 	.word	0x20004630
 8003604:	20004634 	.word	0x20004634
 8003608:	200044e8 	.word	0x200044e8
 800360c:	20000010 	.word	0x20000010
 8003610:	2000000c 	.word	0x2000000c
 8003614:	08006549 	.word	0x08006549
 8003618:	20004fec 	.word	0x20004fec

0800361c <Reset_Maze>:

void Reset_Maze() { ///resets the entire maze to blank, and floodfills the value
 800361c:	2300      	movs	r3, #0

	for (int i = 0; i < X_MAZE_SIZE; i++) { //horizontal walls
		for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
			horiz_walls[i][j] = 0;
 800361e:	4813      	ldr	r0, [pc, #76]	; (800366c <Reset_Maze+0x50>)

	}
//end algorithm while
}

void Reset_Maze() { ///resets the entire maze to blank, and floodfills the value
 8003620:	b510      	push	{r4, lr}

	for (int i = 0; i < X_MAZE_SIZE; i++) { //horizontal walls
		for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
			horiz_walls[i][j] = 0;
 8003622:	461c      	mov	r4, r3

	}
//end algorithm while
}

void Reset_Maze() { ///resets the entire maze to blank, and floodfills the value
 8003624:	2200      	movs	r2, #0

	for (int i = 0; i < X_MAZE_SIZE; i++) { //horizontal walls
		for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
			horiz_walls[i][j] = 0;
 8003626:	18c1      	adds	r1, r0, r3
 8003628:	548c      	strb	r4, [r1, r2]
}

void Reset_Maze() { ///resets the entire maze to blank, and floodfills the value

	for (int i = 0; i < X_MAZE_SIZE; i++) { //horizontal walls
		for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
 800362a:	3201      	adds	r2, #1
 800362c:	2a0f      	cmp	r2, #15
 800362e:	d1fb      	bne.n	8003628 <Reset_Maze+0xc>
 8003630:	330f      	adds	r3, #15
//end algorithm while
}

void Reset_Maze() { ///resets the entire maze to blank, and floodfills the value

	for (int i = 0; i < X_MAZE_SIZE; i++) { //horizontal walls
 8003632:	2bf0      	cmp	r3, #240	; 0xf0
 8003634:	d1f6      	bne.n	8003624 <Reset_Maze+0x8>
 8003636:	2300      	movs	r3, #0
		}
	}

	for (int i = 0; i < X_MAZE_SIZE - 1; i++) { //vertical walls
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
			vert_walls[i][j] = 0;
 8003638:	480d      	ldr	r0, [pc, #52]	; (8003670 <Reset_Maze+0x54>)
 800363a:	461c      	mov	r4, r3

	}
//end algorithm while
}

void Reset_Maze() { ///resets the entire maze to blank, and floodfills the value
 800363c:	2200      	movs	r2, #0
		}
	}

	for (int i = 0; i < X_MAZE_SIZE - 1; i++) { //vertical walls
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
			vert_walls[i][j] = 0;
 800363e:	18c1      	adds	r1, r0, r3
 8003640:	548c      	strb	r4, [r1, r2]
			horiz_walls[i][j] = 0;
		}
	}

	for (int i = 0; i < X_MAZE_SIZE - 1; i++) { //vertical walls
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
 8003642:	3201      	adds	r2, #1
 8003644:	2a10      	cmp	r2, #16
 8003646:	d1fb      	bne.n	8003640 <Reset_Maze+0x24>
 8003648:	3310      	adds	r3, #16
		for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
			horiz_walls[i][j] = 0;
		}
	}

	for (int i = 0; i < X_MAZE_SIZE - 1; i++) { //vertical walls
 800364a:	2bf0      	cmp	r3, #240	; 0xf0
 800364c:	d1f6      	bne.n	800363c <Reset_Maze+0x20>
 800364e:	2300      	movs	r3, #0
		}
	}

	for (int i = 0; i < X_MAZE_SIZE; i++) { //set all squares to be unvisited
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
			visited_squares[i][j] = FALSE;
 8003650:	4808      	ldr	r0, [pc, #32]	; (8003674 <Reset_Maze+0x58>)
 8003652:	461c      	mov	r4, r3
 8003654:	2200      	movs	r2, #0
 8003656:	1819      	adds	r1, r3, r0
 8003658:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
			vert_walls[i][j] = 0;
		}
	}

	for (int i = 0; i < X_MAZE_SIZE; i++) { //set all squares to be unvisited
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
 800365c:	3201      	adds	r2, #1
 800365e:	2a10      	cmp	r2, #16
 8003660:	d1fa      	bne.n	8003658 <Reset_Maze+0x3c>
 8003662:	3340      	adds	r3, #64	; 0x40
		for (int j = 0; j < Y_MAZE_SIZE; j++) {
			vert_walls[i][j] = 0;
		}
	}

	for (int i = 0; i < X_MAZE_SIZE; i++) { //set all squares to be unvisited
 8003664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003668:	d1f4      	bne.n	8003654 <Reset_Maze+0x38>
 800366a:	bd10      	pop	{r4, pc}
 800366c:	200043a4 	.word	0x200043a4
 8003670:	20003068 	.word	0x20003068
 8003674:	2000569c 	.word	0x2000569c

08003678 <Switch_Direction>:
}
}

void Switch_Direction() {

	switch (cur_dir) {
 8003678:	4b08      	ldr	r3, [pc, #32]	; (800369c <Switch_Direction+0x24>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	2a03      	cmp	r2, #3
 800367e:	d80b      	bhi.n	8003698 <Switch_Direction+0x20>
 8003680:	e8df f002 	tbb	[pc, r2]
 8003684:	08060402 	.word	0x08060402

	case NORTH: cur_dir = SOUTH; break; //update the direction that the mouse is pointing
 8003688:	2201      	movs	r2, #1
 800368a:	e004      	b.n	8003696 <Switch_Direction+0x1e>
	case SOUTH: cur_dir = NORTH; break;
 800368c:	2200      	movs	r2, #0
 800368e:	e002      	b.n	8003696 <Switch_Direction+0x1e>
	case WEST: cur_dir = EAST; break;
 8003690:	2203      	movs	r2, #3
 8003692:	e000      	b.n	8003696 <Switch_Direction+0x1e>
	case EAST: cur_dir = WEST; break;
 8003694:	2202      	movs	r2, #2
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	20004394 	.word	0x20004394

080036a0 <Calc_Optimal>:
int counter = 0; //counter for counting the number of squares

int x = X_START; //initialize cursor to start square
int y = Y_START;

Floodfill(FALSE, FALSE, TRUE);  //floodfill from final value to start value
 80036a0:	2100      	movs	r1, #0
 80036a2:	2201      	movs	r2, #1
	sprintf(tx_buffer, "|||DECISION  %d||| X VALUE: %d  Y VALUE: %d  DIRECTION: %d  NEXT: %d \r\n", dbg_count + 1, x_coord, y_coord, cur_dir, next_move);
	Transmit(tx_buffer);

}

void Calc_Optimal() {
 80036a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
int counter = 0; //counter for counting the number of squares

int x = X_START; //initialize cursor to start square
int y = Y_START;

Floodfill(FALSE, FALSE, TRUE);  //floodfill from final value to start value
 80036a8:	4608      	mov	r0, r1
	sprintf(tx_buffer, "|||DECISION  %d||| X VALUE: %d  Y VALUE: %d  DIRECTION: %d  NEXT: %d \r\n", dbg_count + 1, x_coord, y_coord, cur_dir, next_move);
	Transmit(tx_buffer);

}

void Calc_Optimal() {
 80036aa:	b087      	sub	sp, #28
int counter = 0; //counter for counting the number of squares

int x = X_START; //initialize cursor to start square
int y = Y_START;

Floodfill(FALSE, FALSE, TRUE);  //floodfill from final value to start value
 80036ac:	f7ff ff24 	bl	80034f8 <Floodfill>

int val = maze[x][y]; //get start maze value
int next_values[4] = {-1, -1, -1, -1}; //array to hold the next values
 80036b0:	4b7e      	ldr	r3, [pc, #504]	; (80038ac <Calc_Optimal+0x20c>)
 80036b2:	ac02      	add	r4, sp, #8
int index = 0;

optimal_x[counter] = x;
 80036b4:	4f7e      	ldr	r7, [pc, #504]	; (80038b0 <Calc_Optimal+0x210>)
optimal_y[counter] = y;

while(maze[x][y] != 0) {

	next_values[0] = 127;
 80036b6:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
		case(0):
				optimal_path[counter] = RIGH;
				cur_dir = NORTH;
		break;
		case(1):
				optimal_path[counter] = LEF;
 80036ba:	f04f 0c6c 	mov.w	ip, #108	; 0x6c
				cur_dir = SOUTH;
		break;
		case(2):
				optimal_path[counter] = FOR;
 80036be:	f04f 0866 	mov.w	r8, #102	; 0x66
 80036c2:	9700      	str	r7, [sp, #0]
int y = Y_START;

Floodfill(FALSE, FALSE, TRUE);  //floodfill from final value to start value

int val = maze[x][y]; //get start maze value
int next_values[4] = {-1, -1, -1, -1}; //array to hold the next values
 80036c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
int index = 0;

optimal_x[counter] = x;
 80036ca:	2300      	movs	r3, #0
optimal_y[counter] = y;
 80036cc:	4c79      	ldr	r4, [pc, #484]	; (80038b4 <Calc_Optimal+0x214>)
 80036ce:	220f      	movs	r2, #15
 80036d0:	4979      	ldr	r1, [pc, #484]	; (80038b8 <Calc_Optimal+0x218>)
const int E[2] = {1, 0};

int cur_dir = START_DIR; //start direction
int counter = 0; //counter for counting the number of squares

int x = X_START; //initialize cursor to start square
 80036d2:	4618      	mov	r0, r3
const int S[2] = {0, 1};
const int W[2] = {-1, 0};
const int E[2] = {1, 0};

int cur_dir = START_DIR; //start direction
int counter = 0; //counter for counting the number of squares
 80036d4:	461e      	mov	r6, r3
const int N[2] = {0, -1}; //directions in maze
const int S[2] = {0, 1};
const int W[2] = {-1, 0};
const int E[2] = {1, 0};

int cur_dir = START_DIR; //start direction
 80036d6:	461d      	mov	r5, r3

int val = maze[x][y]; //get start maze value
int next_values[4] = {-1, -1, -1, -1}; //array to hold the next values
int index = 0;

optimal_x[counter] = x;
 80036d8:	603b      	str	r3, [r7, #0]
optimal_y[counter] = y;
 80036da:	6022      	str	r2, [r4, #0]
 80036dc:	9401      	str	r4, [sp, #4]

while(maze[x][y] != 0) {
 80036de:	ea4f 1a00 	mov.w	sl, r0, lsl #4
 80036e2:	4f76      	ldr	r7, [pc, #472]	; (80038bc <Calc_Optimal+0x21c>)
 80036e4:	eb0a 0402 	add.w	r4, sl, r2
 80036e8:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 80036ec:	2c00      	cmp	r4, #0
 80036ee:	f000 80a5 	beq.w	800383c <Calc_Optimal+0x19c>
	next_values[2] = 127;
	next_values[3] = 127;

	val = maze[x][y];

	if (y > 0 && horiz_walls[x][y-1] != TRUE) { //if row is greater than zero
 80036f2:	2a00      	cmp	r2, #0
optimal_x[counter] = x;
optimal_y[counter] = y;

while(maze[x][y] != 0) {

	next_values[0] = 127;
 80036f4:	f8cd e008 	str.w	lr, [sp, #8]
	next_values[1] = 127;
 80036f8:	f8cd e00c 	str.w	lr, [sp, #12]
	next_values[2] = 127;
 80036fc:	f8cd e010 	str.w	lr, [sp, #16]
	next_values[3] = 127;
 8003700:	f8cd e014 	str.w	lr, [sp, #20]

	val = maze[x][y];

	if (y > 0 && horiz_walls[x][y-1] != TRUE) { //if row is greater than zero
 8003704:	dc12      	bgt.n	800372c <Calc_Optimal+0x8c>
		next_values[0] = maze[x][y-1]; //up square
	}

	if (y < Y_MAZE_SIZE - 1 && horiz_walls[x][y] != TRUE) {
 8003706:	ea4f 1a00 	mov.w	sl, r0, lsl #4
 800370a:	4f6d      	ldr	r7, [pc, #436]	; (80038c0 <Calc_Optimal+0x220>)
 800370c:	ebc0 090a 	rsb	r9, r0, sl
 8003710:	44b9      	add	r9, r7
 8003712:	f819 9002 	ldrb.w	r9, [r9, r2]
 8003716:	f1b9 0f01 	cmp.w	r9, #1
 800371a:	d019      	beq.n	8003750 <Calc_Optimal+0xb0>
		next_values[1] = maze[x][y+1]; //down square
 800371c:	f102 0901 	add.w	r9, r2, #1
 8003720:	4f66      	ldr	r7, [pc, #408]	; (80038bc <Calc_Optimal+0x21c>)
 8003722:	44d1      	add	r9, sl
 8003724:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
 8003728:	9703      	str	r7, [sp, #12]
 800372a:	e011      	b.n	8003750 <Calc_Optimal+0xb0>
	next_values[2] = 127;
	next_values[3] = 127;

	val = maze[x][y];

	if (y > 0 && horiz_walls[x][y-1] != TRUE) { //if row is greater than zero
 800372c:	4f64      	ldr	r7, [pc, #400]	; (80038c0 <Calc_Optimal+0x220>)
 800372e:	ebc0 0b0a 	rsb	fp, r0, sl
 8003732:	f102 39ff 	add.w	r9, r2, #4294967295
 8003736:	44bb      	add	fp, r7
 8003738:	f81b b009 	ldrb.w	fp, [fp, r9]
 800373c:	f1bb 0f01 	cmp.w	fp, #1
		next_values[0] = maze[x][y-1]; //up square
 8003740:	bf1f      	itttt	ne
 8003742:	4f5e      	ldrne	r7, [pc, #376]	; (80038bc <Calc_Optimal+0x21c>)
 8003744:	44d1      	addne	r9, sl
 8003746:	f857 7029 	ldrne.w	r7, [r7, r9, lsl #2]
 800374a:	9702      	strne	r7, [sp, #8]
	}

	if (y < Y_MAZE_SIZE - 1 && horiz_walls[x][y] != TRUE) {
 800374c:	2a0e      	cmp	r2, #14
 800374e:	ddda      	ble.n	8003706 <Calc_Optimal+0x66>
		next_values[1] = maze[x][y+1]; //down square
	}

	if (x > 0 && vert_walls[x - 1][y] != TRUE) {
 8003750:	2800      	cmp	r0, #0
 8003752:	dc10      	bgt.n	8003776 <Calc_Optimal+0xd6>
		next_values[2] = maze[x - 1][y]; //left square
	}

	if (x < X_MAZE_SIZE - 1 && vert_walls[x][y] != TRUE) {
 8003754:	4f5b      	ldr	r7, [pc, #364]	; (80038c4 <Calc_Optimal+0x224>)
 8003756:	eb07 1900 	add.w	r9, r7, r0, lsl #4
 800375a:	f819 9002 	ldrb.w	r9, [r9, r2]
 800375e:	f1b9 0f01 	cmp.w	r9, #1
 8003762:	d01b      	beq.n	800379c <Calc_Optimal+0xfc>
		next_values[3] = maze[x+1][y]; //right square
 8003764:	f100 0901 	add.w	r9, r0, #1
 8003768:	4f54      	ldr	r7, [pc, #336]	; (80038bc <Calc_Optimal+0x21c>)
 800376a:	eb02 1909 	add.w	r9, r2, r9, lsl #4
 800376e:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
 8003772:	9705      	str	r7, [sp, #20]
 8003774:	e012      	b.n	800379c <Calc_Optimal+0xfc>

	if (y < Y_MAZE_SIZE - 1 && horiz_walls[x][y] != TRUE) {
		next_values[1] = maze[x][y+1]; //down square
	}

	if (x > 0 && vert_walls[x - 1][y] != TRUE) {
 8003776:	f100 39ff 	add.w	r9, r0, #4294967295
 800377a:	4f52      	ldr	r7, [pc, #328]	; (80038c4 <Calc_Optimal+0x224>)
 800377c:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8003780:	eb07 0a09 	add.w	sl, r7, r9
 8003784:	f81a a002 	ldrb.w	sl, [sl, r2]
 8003788:	f1ba 0f01 	cmp.w	sl, #1
		next_values[2] = maze[x - 1][y]; //left square
 800378c:	bf1f      	itttt	ne
 800378e:	4f4b      	ldrne	r7, [pc, #300]	; (80038bc <Calc_Optimal+0x21c>)
 8003790:	4491      	addne	r9, r2
 8003792:	f857 7029 	ldrne.w	r7, [r7, r9, lsl #2]
 8003796:	9704      	strne	r7, [sp, #16]
	}

	if (x < X_MAZE_SIZE - 1 && vert_walls[x][y] != TRUE) {
 8003798:	280e      	cmp	r0, #14
 800379a:	dddb      	ble.n	8003754 <Calc_Optimal+0xb4>
		next_values[3] = maze[x+1][y]; //right square
	}

	for (int i = 0; i < 4; i++) {
 800379c:	f04f 0900 	mov.w	r9, #0
		if (next_values[i] == val - 1) {
 80037a0:	3c01      	subs	r4, #1
 80037a2:	af02      	add	r7, sp, #8
 80037a4:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
 80037a8:	42a7      	cmp	r7, r4
 80037aa:	bf08      	it	eq
 80037ac:	464b      	moveq	r3, r9

	if (x < X_MAZE_SIZE - 1 && vert_walls[x][y] != TRUE) {
		next_values[3] = maze[x+1][y]; //right square
	}

	for (int i = 0; i < 4; i++) {
 80037ae:	f109 0901 	add.w	r9, r9, #1
 80037b2:	f1b9 0f04 	cmp.w	r9, #4
 80037b6:	d1f4      	bne.n	80037a2 <Calc_Optimal+0x102>
		if (next_values[i] == val - 1) {
			index = i;
		}
	}

	switch (cur_dir) {
 80037b8:	2d02      	cmp	r5, #2
 80037ba:	d021      	beq.n	8003800 <Calc_Optimal+0x160>
 80037bc:	2d03      	cmp	r5, #3
 80037be:	d02e      	beq.n	800381e <Calc_Optimal+0x17e>
 80037c0:	2d01      	cmp	r5, #1
 80037c2:	d00e      	beq.n	80037e2 <Calc_Optimal+0x142>

	case NORTH:
		switch(index) {
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d006      	beq.n	80037d6 <Calc_Optimal+0x136>
 80037c8:	2b03      	cmp	r3, #3
 80037ca:	d007      	beq.n	80037dc <Calc_Optimal+0x13c>
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d158      	bne.n	8003882 <Calc_Optimal+0x1e2>
		case(0):
			optimal_path[counter] = FOR;
 80037d0:	f881 8000 	strb.w	r8, [r1]
		break;
 80037d4:	e055      	b.n	8003882 <Calc_Optimal+0x1e2>
		case(1):
		//NO
		break;
		case(2):
			optimal_path[counter] = LEF;
 80037d6:	f881 c000 	strb.w	ip, [r1]
			cur_dir = WEST;
		break;
 80037da:	e060      	b.n	800389e <Calc_Optimal+0x1fe>
		case(3):
				optimal_path[counter] = RIGH;
 80037dc:	2472      	movs	r4, #114	; 0x72
 80037de:	700c      	strb	r4, [r1, #0]
				cur_dir = EAST;
		break;
 80037e0:	e060      	b.n	80038a4 <Calc_Optimal+0x204>
		}
	break;

	case SOUTH:
		switch(index) {
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d006      	beq.n	80037f4 <Calc_Optimal+0x154>
 80037e6:	2b03      	cmp	r3, #3
 80037e8:	d007      	beq.n	80037fa <Calc_Optimal+0x15a>
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d154      	bne.n	8003898 <Calc_Optimal+0x1f8>
		case(0):
				//NO
		break;
		case(1):
				optimal_path[counter] = FOR;
 80037ee:	f881 8000 	strb.w	r8, [r1]
		break;
 80037f2:	e051      	b.n	8003898 <Calc_Optimal+0x1f8>
		case(2):
				optimal_path[counter] = RIGH;
 80037f4:	2472      	movs	r4, #114	; 0x72
 80037f6:	700c      	strb	r4, [r1, #0]
				cur_dir = WEST;
		break;
 80037f8:	e051      	b.n	800389e <Calc_Optimal+0x1fe>
		case(3):
				optimal_path[counter] = LEF;
 80037fa:	f881 c000 	strb.w	ip, [r1]
				cur_dir = EAST;
		break;
 80037fe:	e051      	b.n	80038a4 <Calc_Optimal+0x204>
		}
	break;

	case WEST:
		switch(index) {
 8003800:	2b01      	cmp	r3, #1
 8003802:	d006      	beq.n	8003812 <Calc_Optimal+0x172>
 8003804:	2b02      	cmp	r3, #2
 8003806:	d007      	beq.n	8003818 <Calc_Optimal+0x178>
 8003808:	2b00      	cmp	r3, #0
 800380a:	d148      	bne.n	800389e <Calc_Optimal+0x1fe>
		case(0):
				optimal_path[counter] = RIGH;
 800380c:	2472      	movs	r4, #114	; 0x72
 800380e:	700c      	strb	r4, [r1, #0]
				cur_dir = NORTH;
		break;
 8003810:	e037      	b.n	8003882 <Calc_Optimal+0x1e2>
		case(1):
				optimal_path[counter] = LEF;
 8003812:	f881 c000 	strb.w	ip, [r1]
				cur_dir = SOUTH;
		break;
 8003816:	e03f      	b.n	8003898 <Calc_Optimal+0x1f8>
		case(2):
				optimal_path[counter] = FOR;
 8003818:	f881 8000 	strb.w	r8, [r1]
		break;
 800381c:	e03f      	b.n	800389e <Calc_Optimal+0x1fe>
		break;
		}
	break;

	case EAST:
		switch(index) {
 800381e:	2b01      	cmp	r3, #1
 8003820:	d006      	beq.n	8003830 <Calc_Optimal+0x190>
 8003822:	2b03      	cmp	r3, #3
 8003824:	d007      	beq.n	8003836 <Calc_Optimal+0x196>
 8003826:	2b00      	cmp	r3, #0
 8003828:	d13c      	bne.n	80038a4 <Calc_Optimal+0x204>
		case(0):
				optimal_path[counter] = LEF;
 800382a:	f881 c000 	strb.w	ip, [r1]
				cur_dir = NORTH;
		break;
 800382e:	e028      	b.n	8003882 <Calc_Optimal+0x1e2>
		case(1):
				optimal_path[counter] = RIGH;
 8003830:	2472      	movs	r4, #114	; 0x72
 8003832:	700c      	strb	r4, [r1, #0]
				cur_dir = SOUTH;
		break;
 8003834:	e030      	b.n	8003898 <Calc_Optimal+0x1f8>
		case(2):
				//NO
		break;
		case(3):
				optimal_path[counter] = FOR;
 8003836:	f881 8000 	strb.w	r8, [r1]
		break;
 800383a:	e033      	b.n	80038a4 <Calc_Optimal+0x204>
optimal_y[counter] = y;

}

optimal_count = counter; //DEBUG
optimal_path[counter] = 's';
 800383c:	2373      	movs	r3, #115	; 0x73
 800383e:	4a1e      	ldr	r2, [pc, #120]	; (80038b8 <Calc_Optimal+0x218>)
optimal_x[counter] = x;
optimal_y[counter] = y;

}

optimal_count = counter; //DEBUG
 8003840:	4d21      	ldr	r5, [pc, #132]	; (80038c8 <Calc_Optimal+0x228>)
optimal_path[counter] = 's';
Transmit("Optimal Path: ");
 8003842:	4822      	ldr	r0, [pc, #136]	; (80038cc <Calc_Optimal+0x22c>)
optimal_x[counter] = x;
optimal_y[counter] = y;

}

optimal_count = counter; //DEBUG
 8003844:	602e      	str	r6, [r5, #0]
optimal_path[counter] = 's';
 8003846:	5593      	strb	r3, [r2, r6]
Transmit("Optimal Path: ");
 8003848:	f7ff fc2a 	bl	80030a0 <Transmit>
Transmit(optimal_path);
 800384c:	481a      	ldr	r0, [pc, #104]	; (80038b8 <Calc_Optimal+0x218>)
 800384e:	f7ff fc27 	bl	80030a0 <Transmit>
for (int i = 0; i <= optimal_count; i++) {
 8003852:	682b      	ldr	r3, [r5, #0]
 8003854:	429c      	cmp	r4, r3
 8003856:	d80e      	bhi.n	8003876 <Calc_Optimal+0x1d6>
	sprintf(tx_buffer, "(%d, %d) \r\n", optimal_x[i], optimal_y[i]);
 8003858:	9b01      	ldr	r3, [sp, #4]
 800385a:	9a00      	ldr	r2, [sp, #0]
 800385c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003860:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]

optimal_count = counter; //DEBUG
optimal_path[counter] = 's';
Transmit("Optimal Path: ");
Transmit(optimal_path);
for (int i = 0; i <= optimal_count; i++) {
 8003864:	3401      	adds	r4, #1
	sprintf(tx_buffer, "(%d, %d) \r\n", optimal_x[i], optimal_y[i]);
 8003866:	491a      	ldr	r1, [pc, #104]	; (80038d0 <Calc_Optimal+0x230>)
 8003868:	481a      	ldr	r0, [pc, #104]	; (80038d4 <Calc_Optimal+0x234>)
 800386a:	f002 f89b 	bl	80059a4 <siprintf>
	Transmit(tx_buffer);
 800386e:	4819      	ldr	r0, [pc, #100]	; (80038d4 <Calc_Optimal+0x234>)
 8003870:	f7ff fc16 	bl	80030a0 <Transmit>
 8003874:	e7ed      	b.n	8003852 <Calc_Optimal+0x1b2>
}
Transmit("\r\n");
 8003876:	4818      	ldr	r0, [pc, #96]	; (80038d8 <Calc_Optimal+0x238>)

}
 8003878:	b007      	add	sp, #28
 800387a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
Transmit(optimal_path);
for (int i = 0; i <= optimal_count; i++) {
	sprintf(tx_buffer, "(%d, %d) \r\n", optimal_x[i], optimal_y[i]);
	Transmit(tx_buffer);
}
Transmit("\r\n");
 800387e:	f7ff bc0f 	b.w	80030a0 <Transmit>
	}

	switch (cur_dir) { //update the cursor
	case NORTH:
		x = x + N[0];
		y = y + N[1];
 8003882:	3a01      	subs	r2, #1
	break;
 8003884:	2500      	movs	r5, #0
	case EAST:
		x = x + E[0];
		y = y + E[1];
	break;
	}
counter++;
 8003886:	3601      	adds	r6, #1
optimal_x[counter] = x;
 8003888:	9c00      	ldr	r4, [sp, #0]
 800388a:	3101      	adds	r1, #1
 800388c:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
optimal_y[counter] = y;
 8003890:	9c01      	ldr	r4, [sp, #4]
 8003892:	f844 2026 	str.w	r2, [r4, r6, lsl #2]
 8003896:	e722      	b.n	80036de <Calc_Optimal+0x3e>
		x = x + N[0];
		y = y + N[1];
	break;
	case SOUTH:
		x = x + S[0];
		y = y + S[1];
 8003898:	3201      	adds	r2, #1
	break;
 800389a:	2501      	movs	r5, #1
 800389c:	e7f3      	b.n	8003886 <Calc_Optimal+0x1e6>
	case WEST:
		x = x + W[0];
 800389e:	3801      	subs	r0, #1
		y = y + W[1];
	break;
 80038a0:	2502      	movs	r5, #2
 80038a2:	e7f0      	b.n	8003886 <Calc_Optimal+0x1e6>
	case EAST:
		x = x + E[0];
 80038a4:	3001      	adds	r0, #1
		y = y + E[1];
	break;
 80038a6:	2503      	movs	r5, #3
 80038a8:	e7ed      	b.n	8003886 <Calc_Optimal+0x1e6>
 80038aa:	bf00      	nop
 80038ac:	08006240 	.word	0x08006240
 80038b0:	2000516c 	.word	0x2000516c
 80038b4:	20004a74 	.word	0x20004a74
 80038b8:	20005b14 	.word	0x20005b14
 80038bc:	20004674 	.word	0x20004674
 80038c0:	200043a4 	.word	0x200043a4
 80038c4:	20003068 	.word	0x20003068
 80038c8:	200020b4 	.word	0x200020b4
 80038cc:	08006612 	.word	0x08006612
 80038d0:	0800662a 	.word	0x0800662a
 80038d4:	20004fec 	.word	0x20004fec
 80038d8:	0800651e 	.word	0x0800651e

080038dc <Fill_Center>:

}
#if X_MAZE_SIZE == 16
void Fill_Center() {

	switch(final_x) {
 80038dc:	4b3f      	ldr	r3, [pc, #252]	; (80039dc <Fill_Center+0x100>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2b07      	cmp	r3, #7
 80038e2:	d002      	beq.n	80038ea <Fill_Center+0xe>
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d031      	beq.n	800394c <Fill_Center+0x70>
 80038e8:	4770      	bx	lr

	case X_FINAL:
		switch(final_y) {
 80038ea:	4b3d      	ldr	r3, [pc, #244]	; (80039e0 <Fill_Center+0x104>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b07      	cmp	r3, #7
 80038f0:	d002      	beq.n	80038f8 <Fill_Center+0x1c>
 80038f2:	2b08      	cmp	r3, #8
 80038f4:	d013      	beq.n	800391e <Fill_Center+0x42>
 80038f6:	4770      	bx	lr
		case Y_FINAL: //top left
				if (horiz_walls[final_x][final_y - 1] == TRUE) {
 80038f8:	4b3a      	ldr	r3, [pc, #232]	; (80039e4 <Fill_Center+0x108>)
 80038fa:	493b      	ldr	r1, [pc, #236]	; (80039e8 <Fill_Center+0x10c>)
 80038fc:	f893 206f 	ldrb.w	r2, [r3, #111]	; 0x6f
 8003900:	2a01      	cmp	r2, #1
 8003902:	d108      	bne.n	8003916 <Fill_Center+0x3a>

					horiz_walls[X_FINAL][Y_FINAL - 1] = TRUE; //above left
 8003904:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
					horiz_walls[X_FINAL+1][Y_FINAL - 1] = TRUE; //above right
 8003908:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
					horiz_walls[X_FINAL][Y_FINAL + 1] = TRUE; //below left
 800390c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
					horiz_walls[X_FINAL+1][Y_FINAL + 1] = TRUE; //below right
 8003910:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8003914:	e05a      	b.n	80039cc <Fill_Center+0xf0>
					vert_walls[X_FINAL + 1][Y_FINAL+ 1] = TRUE; //bottom right

				}
				else {
					//horiz_walls[X_FINAL][Y_FINAL - 1] = TRUE;
					horiz_walls[X_FINAL+1][Y_FINAL - 1] = TRUE;
 8003916:	2201      	movs	r2, #1
 8003918:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 800391c:	e033      	b.n	8003986 <Fill_Center+0xaa>
					vert_walls[X_FINAL + 1][Y_FINAL+ 1] = TRUE;
				}
		break;

		case Y_FINAL + 1: //bottom left
		if (horiz_walls[final_x][final_y] == TRUE) {
 800391e:	4b31      	ldr	r3, [pc, #196]	; (80039e4 <Fill_Center+0x108>)
 8003920:	4931      	ldr	r1, [pc, #196]	; (80039e8 <Fill_Center+0x10c>)
 8003922:	f893 2071 	ldrb.w	r2, [r3, #113]	; 0x71
 8003926:	2a01      	cmp	r2, #1
 8003928:	d10a      	bne.n	8003940 <Fill_Center+0x64>

			horiz_walls[X_FINAL][Y_FINAL - 1] = TRUE;
 800392a:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
			horiz_walls[X_FINAL+1][Y_FINAL - 1] = TRUE;
 800392e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
			horiz_walls[X_FINAL][Y_FINAL + 1] = TRUE;
 8003932:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
			horiz_walls[X_FINAL+1][Y_FINAL + 1] = TRUE;
 8003936:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

			vert_walls[X_FINAL - 1][Y_FINAL] = TRUE;
 800393a:	f881 2067 	strb.w	r2, [r1, #103]	; 0x67
 800393e:	e047      	b.n	80039d0 <Fill_Center+0xf4>
			vert_walls[X_FINAL + 1][Y_FINAL] = TRUE;
			vert_walls[X_FINAL + 1][Y_FINAL+ 1] = TRUE;

		}
		else {
			horiz_walls[X_FINAL][Y_FINAL - 1] = TRUE;
 8003940:	2201      	movs	r2, #1
 8003942:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
			horiz_walls[X_FINAL+1][Y_FINAL - 1] = TRUE;
 8003946:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 800394a:	e01e      	b.n	800398a <Fill_Center+0xae>

	}
	break;

	case X_FINAL + 1:
		switch(final_y) { //top right
 800394c:	4b24      	ldr	r3, [pc, #144]	; (80039e0 <Fill_Center+0x104>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b07      	cmp	r3, #7
 8003952:	d002      	beq.n	800395a <Fill_Center+0x7e>
 8003954:	2b08      	cmp	r3, #8
 8003956:	d01b      	beq.n	8003990 <Fill_Center+0xb4>
 8003958:	4770      	bx	lr
		case Y_FINAL:
			if (horiz_walls[final_x][final_y - 1] == TRUE) {
 800395a:	4b22      	ldr	r3, [pc, #136]	; (80039e4 <Fill_Center+0x108>)
 800395c:	4922      	ldr	r1, [pc, #136]	; (80039e8 <Fill_Center+0x10c>)
 800395e:	f893 207e 	ldrb.w	r2, [r3, #126]	; 0x7e
 8003962:	2a01      	cmp	r2, #1
 8003964:	d10c      	bne.n	8003980 <Fill_Center+0xa4>

				horiz_walls[X_FINAL][Y_FINAL - 1] = TRUE;
 8003966:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
				horiz_walls[X_FINAL+1][Y_FINAL - 1] = TRUE;
 800396a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
				horiz_walls[X_FINAL][Y_FINAL + 1] = TRUE;
 800396e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
				horiz_walls[X_FINAL+1][Y_FINAL + 1] = TRUE;
 8003972:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

				vert_walls[X_FINAL - 1][Y_FINAL] = TRUE;
 8003976:	f881 2067 	strb.w	r2, [r1, #103]	; 0x67
				vert_walls[X_FINAL - 1][Y_FINAL + 1] = TRUE;
 800397a:	f881 2068 	strb.w	r2, [r1, #104]	; 0x68
 800397e:	e029      	b.n	80039d4 <Fill_Center+0xf8>
				//vert_walls[X_FINAL + 1][Y_FINAL] = TRUE;
				vert_walls[X_FINAL + 1][Y_FINAL+ 1] = TRUE;

			}
			else {
				horiz_walls[X_FINAL][Y_FINAL - 1] = TRUE;
 8003980:	2201      	movs	r2, #1
 8003982:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
				//horiz_walls[X_FINAL+1][Y_FINAL - 1] = TRUE;
				horiz_walls[X_FINAL][Y_FINAL + 1] = TRUE;
 8003986:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
				horiz_walls[X_FINAL+1][Y_FINAL + 1] = TRUE;
 800398a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800398e:	e01b      	b.n	80039c8 <Fill_Center+0xec>
				vert_walls[X_FINAL + 1][Y_FINAL+ 1] = TRUE;
			}
			break;

	case Y_FINAL + 1: //bottom right
		if (horiz_walls[final_x][final_y] == TRUE) {
 8003990:	4b14      	ldr	r3, [pc, #80]	; (80039e4 <Fill_Center+0x108>)
 8003992:	4915      	ldr	r1, [pc, #84]	; (80039e8 <Fill_Center+0x10c>)
 8003994:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8003998:	2a01      	cmp	r2, #1
 800399a:	d10e      	bne.n	80039ba <Fill_Center+0xde>

			horiz_walls[X_FINAL][Y_FINAL - 1] = TRUE;
 800399c:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
			horiz_walls[X_FINAL+1][Y_FINAL - 1] = TRUE;
 80039a0:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
			horiz_walls[X_FINAL][Y_FINAL + 1] = TRUE;
 80039a4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
			horiz_walls[X_FINAL+1][Y_FINAL + 1] = TRUE;
 80039a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

			vert_walls[X_FINAL - 1][Y_FINAL] = TRUE;
 80039ac:	f881 2067 	strb.w	r2, [r1, #103]	; 0x67
			vert_walls[X_FINAL - 1][Y_FINAL + 1] = TRUE;
 80039b0:	f881 2068 	strb.w	r2, [r1, #104]	; 0x68
			vert_walls[X_FINAL + 1][Y_FINAL] = TRUE;
 80039b4:	f881 2087 	strb.w	r2, [r1, #135]	; 0x87
 80039b8:	4770      	bx	lr
			//vert_walls[X_FINAL + 1][Y_FINAL+ 1] = TRUE;
		}
		else {
			horiz_walls[X_FINAL][Y_FINAL - 1] = TRUE;
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
			horiz_walls[X_FINAL + 1][Y_FINAL - 1] = TRUE;
 80039c0:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
			horiz_walls[X_FINAL][Y_FINAL + 1] = TRUE;
 80039c4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
			//horiz_walls[X_FINAL + 1][Y_FINAL + 1] = TRUE;

			vert_walls[X_FINAL - 1][Y_FINAL] = TRUE;
 80039c8:	f881 2067 	strb.w	r2, [r1, #103]	; 0x67
			vert_walls[X_FINAL - 1][Y_FINAL + 1] = TRUE;
 80039cc:	f881 2068 	strb.w	r2, [r1, #104]	; 0x68
			vert_walls[X_FINAL + 1][Y_FINAL] = TRUE;
 80039d0:	f881 2087 	strb.w	r2, [r1, #135]	; 0x87
			vert_walls[X_FINAL + 1][Y_FINAL+ 1] = TRUE;
 80039d4:	f881 2088 	strb.w	r2, [r1, #136]	; 0x88
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	2000315c 	.word	0x2000315c
 80039e0:	20003168 	.word	0x20003168
 80039e4:	200043a4 	.word	0x200043a4
 80039e8:	20003068 	.word	0x20003068

080039ec <Get_Coordinate>:
	}

}
#endif

void Get_Coordinate() { //gets next coordinate to visit
 80039ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	coordinate_count = 0;
 80039ee:	2200      	movs	r2, #0
 80039f0:	4b13      	ldr	r3, [pc, #76]	; (8003a40 <Get_Coordinate+0x54>)
	for (int i = optimal_count; i > 0; i--) {

		if (visited_squares[optimal_x[i]][optimal_y[i]] == FALSE) {
 80039f2:	4c14      	ldr	r4, [pc, #80]	; (8003a44 <Get_Coordinate+0x58>)

}
#endif

void Get_Coordinate() { //gets next coordinate to visit
	coordinate_count = 0;
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	4618      	mov	r0, r3
	for (int i = optimal_count; i > 0; i--) {
 80039f8:	4a13      	ldr	r2, [pc, #76]	; (8003a48 <Get_Coordinate+0x5c>)

		if (visited_squares[optimal_x[i]][optimal_y[i]] == FALSE) {
 80039fa:	4d14      	ldr	r5, [pc, #80]	; (8003a4c <Get_Coordinate+0x60>)
}
#endif

void Get_Coordinate() { //gets next coordinate to visit
	coordinate_count = 0;
	for (int i = optimal_count; i > 0; i--) {
 80039fc:	6811      	ldr	r1, [r2, #0]

		if (visited_squares[optimal_x[i]][optimal_y[i]] == FALSE) {
 80039fe:	4e14      	ldr	r6, [pc, #80]	; (8003a50 <Get_Coordinate+0x64>)
}
#endif

void Get_Coordinate() { //gets next coordinate to visit
	coordinate_count = 0;
	for (int i = optimal_count; i > 0; i--) {
 8003a00:	2900      	cmp	r1, #0
 8003a02:	dd18      	ble.n	8003a36 <Get_Coordinate+0x4a>

		if (visited_squares[optimal_x[i]][optimal_y[i]] == FALSE) {
 8003a04:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 8003a08:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
 8003a0c:	eb03 1702 	add.w	r7, r3, r2, lsl #4
 8003a10:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 8003a14:	b96f      	cbnz	r7, 8003a32 <Get_Coordinate+0x46>
			search_x = optimal_x[i];
 8003a16:	490f      	ldr	r1, [pc, #60]	; (8003a54 <Get_Coordinate+0x68>)
 8003a18:	600a      	str	r2, [r1, #0]
			search_y = optimal_y[i];
 8003a1a:	490f      	ldr	r1, [pc, #60]	; (8003a58 <Get_Coordinate+0x6c>)
 8003a1c:	600b      	str	r3, [r1, #0]
			coordinate_count++;
 8003a1e:	2101      	movs	r1, #1
 8003a20:	6001      	str	r1, [r0, #0]
			search_flag = TRUE;
 8003a22:	480e      	ldr	r0, [pc, #56]	; (8003a5c <Get_Coordinate+0x70>)
 8003a24:	6001      	str	r1, [r0, #0]
			sprintf(tx_buffer, "Going to (%d, %d) \r\n", search_x, search_y);
 8003a26:	490e      	ldr	r1, [pc, #56]	; (8003a60 <Get_Coordinate+0x74>)
 8003a28:	480e      	ldr	r0, [pc, #56]	; (8003a64 <Get_Coordinate+0x78>)
 8003a2a:	f001 ffbb 	bl	80059a4 <siprintf>
			Transmit(tx_buffer);
 8003a2e:	480d      	ldr	r0, [pc, #52]	; (8003a64 <Get_Coordinate+0x78>)
 8003a30:	e002      	b.n	8003a38 <Get_Coordinate+0x4c>
}
#endif

void Get_Coordinate() { //gets next coordinate to visit
	coordinate_count = 0;
	for (int i = optimal_count; i > 0; i--) {
 8003a32:	3901      	subs	r1, #1
 8003a34:	e7e4      	b.n	8003a00 <Get_Coordinate+0x14>
			sprintf(tx_buffer, "Going to (%d, %d) \r\n", search_x, search_y);
			Transmit(tx_buffer);
			return;
		}
	}
	Transmit("All coordinates on optimal path found! \r\n");
 8003a36:	480c      	ldr	r0, [pc, #48]	; (8003a68 <Get_Coordinate+0x7c>)
}
 8003a38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			sprintf(tx_buffer, "Going to (%d, %d) \r\n", search_x, search_y);
			Transmit(tx_buffer);
			return;
		}
	}
	Transmit("All coordinates on optimal path found! \r\n");
 8003a3c:	f7ff bb30 	b.w	80030a0 <Transmit>
 8003a40:	20004398 	.word	0x20004398
 8003a44:	2000516c 	.word	0x2000516c
 8003a48:	200020b4 	.word	0x200020b4
 8003a4c:	20004a74 	.word	0x20004a74
 8003a50:	2000569c 	.word	0x2000569c
 8003a54:	20004630 	.word	0x20004630
 8003a58:	20004634 	.word	0x20004634
 8003a5c:	200044ec 	.word	0x200044ec
 8003a60:	08006621 	.word	0x08006621
 8003a64:	20004fec 	.word	0x20004fec
 8003a68:	08006636 	.word	0x08006636

08003a6c <Update_Position>:
		sprintf(tx_buffer, "|||DECISION  %d||| X VALUE: %d  Y VALUE: %d  DIRECTION: %d  NEXT: %d \r\n", dbg_count + 1, x_coord, y_coord, cur_dir, next_move);
		Transmit(tx_buffer);

}

void Update_Position() { //updates position and direction so read walls is good
 8003a6c:	b5f0      	push	{r4, r5, r6, r7, lr}

	visited_squares[x_coord][y_coord] = TRUE;
 8003a6e:	4d5c      	ldr	r5, [pc, #368]	; (8003be0 <Update_Position+0x174>)
 8003a70:	2401      	movs	r4, #1
 8003a72:	4e5c      	ldr	r6, [pc, #368]	; (8003be4 <Update_Position+0x178>)
		sprintf(tx_buffer, "|||DECISION  %d||| X VALUE: %d  Y VALUE: %d  DIRECTION: %d  NEXT: %d \r\n", dbg_count + 1, x_coord, y_coord, cur_dir, next_move);
		Transmit(tx_buffer);

}

void Update_Position() { //updates position and direction so read walls is good
 8003a74:	b085      	sub	sp, #20

	visited_squares[x_coord][y_coord] = TRUE;
 8003a76:	682a      	ldr	r2, [r5, #0]
 8003a78:	6833      	ldr	r3, [r6, #0]
 8003a7a:	485b      	ldr	r0, [pc, #364]	; (8003be8 <Update_Position+0x17c>)
 8003a7c:	eb03 1102 	add.w	r1, r3, r2, lsl #4

	if (next_move != DEAD) {
 8003a80:	4f5a      	ldr	r7, [pc, #360]	; (8003bec <Update_Position+0x180>)
 8003a82:	4686      	mov	lr, r0

}

void Update_Position() { //updates position and direction so read walls is good

	visited_squares[x_coord][y_coord] = TRUE;
 8003a84:	f840 4021 	str.w	r4, [r0, r1, lsl #2]

	if (next_move != DEAD) {
 8003a88:	6839      	ldr	r1, [r7, #0]
		prevx = x_coord; //save previous values. Used for dead end
		prevy = y_coord;
	}

	switch (cur_dir) {
 8003a8a:	4c59      	ldr	r4, [pc, #356]	; (8003bf0 <Update_Position+0x184>)

void Update_Position() { //updates position and direction so read walls is good

	visited_squares[x_coord][y_coord] = TRUE;

	if (next_move != DEAD) {
 8003a8c:	2903      	cmp	r1, #3
		prevx = x_coord; //save previous values. Used for dead end
 8003a8e:	bf1f      	itttt	ne
 8003a90:	4858      	ldrne	r0, [pc, #352]	; (8003bf4 <Update_Position+0x188>)
 8003a92:	6002      	strne	r2, [r0, #0]
		prevy = y_coord;
 8003a94:	4858      	ldrne	r0, [pc, #352]	; (8003bf8 <Update_Position+0x18c>)
 8003a96:	6003      	strne	r3, [r0, #0]
	}

	switch (cur_dir) {
 8003a98:	6820      	ldr	r0, [r4, #0]
 8003a9a:	2803      	cmp	r0, #3
 8003a9c:	d83d      	bhi.n	8003b1a <Update_Position+0xae>
 8003a9e:	e8df f000 	tbb	[pc, r0]
 8003aa2:	0c02      	.short	0x0c02
 8003aa4:	261b      	.short	0x261b
	case NORTH:
		switch(next_move) {
 8003aa6:	2903      	cmp	r1, #3
 8003aa8:	d837      	bhi.n	8003b1a <Update_Position+0xae>
 8003aaa:	e8df f001 	tbb	[pc, r1]
 8003aae:	0f02      	.short	0x0f02
 8003ab0:	0426      	.short	0x0426
		case FWD:
			x_coord = x_coord + NORTH_X;
			y_coord = y_coord + NORTH_Y;
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	e008      	b.n	8003ac8 <Update_Position+0x5c>
			x_coord = x_coord + EAST_X;
			y_coord = y_coord + EAST_Y;
			cur_dir = EAST;
			break;
		case DEAD:
			cur_dir = SOUTH;
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	e02d      	b.n	8003b16 <Update_Position+0xaa>
			break;
		}
		break;

	case SOUTH:
		switch(next_move) {
 8003aba:	2903      	cmp	r1, #3
 8003abc:	d82d      	bhi.n	8003b1a <Update_Position+0xae>
 8003abe:	e8df f001 	tbb	[pc, r1]
 8003ac2:	1c02      	.short	0x1c02
 8003ac4:	0905      	.short	0x0905
		case FWD:
			x_coord = x_coord + SOUTH_X;
			y_coord = y_coord + SOUTH_Y;
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	6033      	str	r3, [r6, #0]
			break;
 8003aca:	e037      	b.n	8003b3c <Update_Position+0xd0>
			x_coord = x_coord + EAST_X;
			y_coord = y_coord + EAST_Y;
			cur_dir = EAST;
			break;
		case RIGHT:
			x_coord = x_coord + WEST_X;
 8003acc:	3a01      	subs	r2, #1
			y_coord = y_coord + WEST_Y;
			cur_dir = WEST;
 8003ace:	2302      	movs	r3, #2
			x_coord = x_coord + EAST_X;
			y_coord = y_coord + EAST_Y;
			cur_dir = EAST;
			break;
		case RIGHT:
			x_coord = x_coord + WEST_X;
 8003ad0:	602a      	str	r2, [r5, #0]
 8003ad2:	e019      	b.n	8003b08 <Update_Position+0x9c>
			y_coord = y_coord + WEST_Y;
			cur_dir = WEST;
			break;
		case DEAD:
			cur_dir = NORTH;
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	e01e      	b.n	8003b16 <Update_Position+0xaa>
			break;
		}
		break; //bitch retard enema asshole kockface

	case WEST:
		switch(next_move) {
 8003ad8:	2903      	cmp	r1, #3
 8003ada:	d81e      	bhi.n	8003b1a <Update_Position+0xae>
 8003adc:	e8df f001 	tbb	[pc, r1]
 8003ae0:	05111602 	.word	0x05111602
		case FWD:
			x_coord = x_coord + WEST_X;
 8003ae4:	3a01      	subs	r2, #1
 8003ae6:	602a      	str	r2, [r5, #0]
			y_coord = y_coord + WEST_Y;
			break;
 8003ae8:	e028      	b.n	8003b3c <Update_Position+0xd0>
			x_coord = x_coord + NORTH_X;
			y_coord = y_coord + NORTH_Y;
			cur_dir = NORTH;
			break;
		case DEAD:
			cur_dir = EAST;
 8003aea:	2103      	movs	r1, #3
 8003aec:	e013      	b.n	8003b16 <Update_Position+0xaa>
			break;
		}
		break;

	case EAST:
		switch(next_move) {
 8003aee:	2903      	cmp	r1, #3
 8003af0:	d813      	bhi.n	8003b1a <Update_Position+0xae>
 8003af2:	e8df f001 	tbb	[pc, r1]
 8003af6:	0602      	.short	0x0602
 8003af8:	0f0b      	.short	0x0f0b
		case FWD:
			x_coord = x_coord + EAST_X;
 8003afa:	3201      	adds	r2, #1
			y_coord = y_coord + EAST_Y;
			cur_dir = EAST;
 8003afc:	2303      	movs	r3, #3
		break;

	case EAST:
		switch(next_move) {
		case FWD:
			x_coord = x_coord + EAST_X;
 8003afe:	602a      	str	r2, [r5, #0]
 8003b00:	e002      	b.n	8003b08 <Update_Position+0x9c>
			y_coord = y_coord + EAST_Y;
			cur_dir = EAST;
			break;
		case LEFT:
			x_coord = x_coord + NORTH_X;
			y_coord = y_coord + NORTH_Y;
 8003b02:	3b01      	subs	r3, #1
 8003b04:	6033      	str	r3, [r6, #0]
			cur_dir = NORTH;
 8003b06:	2300      	movs	r3, #0
 8003b08:	6023      	str	r3, [r4, #0]
			break;
 8003b0a:	e017      	b.n	8003b3c <Update_Position+0xd0>
		case RIGHT:
			x_coord = x_coord + SOUTH_X;
			y_coord = y_coord + SOUTH_Y;
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	6033      	str	r3, [r6, #0]
			cur_dir = SOUTH;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e7f9      	b.n	8003b08 <Update_Position+0x9c>
			break;
		case DEAD:
			cur_dir = WEST;
 8003b14:	2102      	movs	r1, #2
 8003b16:	6021      	str	r1, [r4, #0]
			break;
 8003b18:	e001      	b.n	8003b1e <Update_Position+0xb2>
		}
		break;
	}

	if (next_move == DEAD) {
 8003b1a:	2903      	cmp	r1, #3
 8003b1c:	d10e      	bne.n	8003b3c <Update_Position+0xd0>
		sprintf(tx_buffer, "|||DEAD END||| X VALUE: %d  Y VALUE: %d \r\n", x_coord, y_coord);
 8003b1e:	4937      	ldr	r1, [pc, #220]	; (8003bfc <Update_Position+0x190>)
 8003b20:	4837      	ldr	r0, [pc, #220]	; (8003c00 <Update_Position+0x194>)
 8003b22:	f001 ff3f 	bl	80059a4 <siprintf>
		Transmit(tx_buffer);
 8003b26:	4836      	ldr	r0, [pc, #216]	; (8003c00 <Update_Position+0x194>)
 8003b28:	f7ff faba 	bl	80030a0 <Transmit>
		x_coord = prevx;
 8003b2c:	4b31      	ldr	r3, [pc, #196]	; (8003bf4 <Update_Position+0x188>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	602b      	str	r3, [r5, #0]
		y_coord = prevy;
 8003b32:	4b31      	ldr	r3, [pc, #196]	; (8003bf8 <Update_Position+0x18c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6033      	str	r3, [r6, #0]
	}

	sprintf(tx_buffer, "|||DECISION  %d||| X VALUE: %d  Y VALUE: %d  DIRECTION: %d  NEXT: %d \r\n", dbg_count + 1, x_coord, y_coord, cur_dir, next_move);
	Transmit(tx_buffer);

}
 8003b38:	b005      	add	sp, #20
 8003b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		x_coord = prevx;
		y_coord = prevy;
		return;
	}

	if (maze[x_coord][y_coord] == 0) { //reached target square
 8003b3c:	682a      	ldr	r2, [r5, #0]
 8003b3e:	6833      	ldr	r3, [r6, #0]
 8003b40:	4830      	ldr	r0, [pc, #192]	; (8003c04 <Update_Position+0x198>)
 8003b42:	eb03 1102 	add.w	r1, r3, r2, lsl #4
 8003b46:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8003b4a:	bb30      	cbnz	r0, 8003b9a <Update_Position+0x12e>
		if (search_flag == FALSE) { //reached center
 8003b4c:	4c2e      	ldr	r4, [pc, #184]	; (8003c08 <Update_Position+0x19c>)
 8003b4e:	2001      	movs	r0, #1
 8003b50:	6823      	ldr	r3, [r4, #0]
 8003b52:	b923      	cbnz	r3, 8003b5e <Update_Position+0xf2>
			Switch_Direction();
 8003b54:	f7ff fd90 	bl	8003678 <Switch_Direction>
			done_flag = TRUE; //tell loop to stop
 8003b58:	4b2c      	ldr	r3, [pc, #176]	; (8003c0c <Update_Position+0x1a0>)
 8003b5a:	6018      	str	r0, [r3, #0]
 8003b5c:	e016      	b.n	8003b8c <Update_Position+0x120>
		}

		else { //looking along for the optimal path still

			visited_squares[x_coord][y_coord] = TRUE;
 8003b5e:	f84e 0021 	str.w	r0, [lr, r1, lsl #2]
			Calc_Optimal(); //recalculate optimal path
 8003b62:	f7ff fd9d 	bl	80036a0 <Calc_Optimal>
			Get_Coordinate(); //get any coordinates that haven't been seen yet
 8003b66:	f7ff ff41 	bl	80039ec <Get_Coordinate>
			if (coordinate_count == 0) { //if none, go back to start
 8003b6a:	4b29      	ldr	r3, [pc, #164]	; (8003c10 <Update_Position+0x1a4>)
 8003b6c:	681f      	ldr	r7, [r3, #0]
 8003b6e:	b93f      	cbnz	r7, 8003b80 <Update_Position+0x114>
				sprintf(tx_buffer, "All Coordinates Found! \r\n");
 8003b70:	4928      	ldr	r1, [pc, #160]	; (8003c14 <Update_Position+0x1a8>)
 8003b72:	4823      	ldr	r0, [pc, #140]	; (8003c00 <Update_Position+0x194>)
 8003b74:	f001 ff3a 	bl	80059ec <strcpy>
				Transmit(tx_buffer);
 8003b78:	4821      	ldr	r0, [pc, #132]	; (8003c00 <Update_Position+0x194>)
 8003b7a:	f7ff fa91 	bl	80030a0 <Transmit>
				search_flag = FALSE;
 8003b7e:	6027      	str	r7, [r4, #0]
			}
			Floodfill(reverse_flag, search_flag, FALSE); // go back to center
 8003b80:	4b25      	ldr	r3, [pc, #148]	; (8003c18 <Update_Position+0x1ac>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	6821      	ldr	r1, [r4, #0]
 8003b86:	6818      	ldr	r0, [r3, #0]
 8003b88:	f7ff fcb6 	bl	80034f8 <Floodfill>
		}
		sprintf(tx_buffer, "|||FINAL||| X VALUE: %d  Y VALUE: %d \r\n", x_coord, y_coord);
 8003b8c:	6833      	ldr	r3, [r6, #0]
 8003b8e:	682a      	ldr	r2, [r5, #0]
 8003b90:	4922      	ldr	r1, [pc, #136]	; (8003c1c <Update_Position+0x1b0>)
 8003b92:	481b      	ldr	r0, [pc, #108]	; (8003c00 <Update_Position+0x194>)
 8003b94:	f001 ff06 	bl	80059a4 <siprintf>
 8003b98:	e01b      	b.n	8003bd2 <Update_Position+0x166>
		Transmit(tx_buffer);
		//visited_squares[x_coord][y_coord] = TRUE;
		return;
	}

	else if (x_coord < 0 || y_coord < 0 || x_coord >= X_MAZE_SIZE || y_coord >= Y_MAZE_SIZE) {
 8003b9a:	2a0f      	cmp	r2, #15
 8003b9c:	d801      	bhi.n	8003ba2 <Update_Position+0x136>
 8003b9e:	2b0f      	cmp	r3, #15
 8003ba0:	d909      	bls.n	8003bb6 <Update_Position+0x14a>
		stop_flag = TRUE;
 8003ba2:	2001      	movs	r0, #1
 8003ba4:	491e      	ldr	r1, [pc, #120]	; (8003c20 <Update_Position+0x1b4>)
 8003ba6:	6008      	str	r0, [r1, #0]
		sprintf(tx_buffer, "Position out of Boundary! X VALUE: %d  Y VALUE %d  \r\n", x_coord, y_coord);
 8003ba8:	491e      	ldr	r1, [pc, #120]	; (8003c24 <Update_Position+0x1b8>)
 8003baa:	4815      	ldr	r0, [pc, #84]	; (8003c00 <Update_Position+0x194>)
 8003bac:	f001 fefa 	bl	80059a4 <siprintf>
		Transmit(tx_buffer);
 8003bb0:	4813      	ldr	r0, [pc, #76]	; (8003c00 <Update_Position+0x194>)
 8003bb2:	f7ff fa75 	bl	80030a0 <Transmit>
	}

	sprintf(tx_buffer, "|||DECISION  %d||| X VALUE: %d  Y VALUE: %d  DIRECTION: %d  NEXT: %d \r\n", dbg_count + 1, x_coord, y_coord, cur_dir, next_move);
 8003bb6:	4b1c      	ldr	r3, [pc, #112]	; (8003c28 <Update_Position+0x1bc>)
 8003bb8:	491c      	ldr	r1, [pc, #112]	; (8003c2c <Update_Position+0x1c0>)
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	3201      	adds	r2, #1
 8003bc0:	480f      	ldr	r0, [pc, #60]	; (8003c00 <Update_Position+0x194>)
 8003bc2:	9302      	str	r3, [sp, #8]
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	9301      	str	r3, [sp, #4]
 8003bc8:	6833      	ldr	r3, [r6, #0]
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	682b      	ldr	r3, [r5, #0]
 8003bce:	f001 fee9 	bl	80059a4 <siprintf>
	Transmit(tx_buffer);
 8003bd2:	480b      	ldr	r0, [pc, #44]	; (8003c00 <Update_Position+0x194>)

}
 8003bd4:	b005      	add	sp, #20
 8003bd6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		sprintf(tx_buffer, "Position out of Boundary! X VALUE: %d  Y VALUE %d  \r\n", x_coord, y_coord);
		Transmit(tx_buffer);
	}

	sprintf(tx_buffer, "|||DECISION  %d||| X VALUE: %d  Y VALUE: %d  DIRECTION: %d  NEXT: %d \r\n", dbg_count + 1, x_coord, y_coord, cur_dir, next_move);
	Transmit(tx_buffer);
 8003bda:	f7ff ba61 	b.w	80030a0 <Transmit>
 8003bde:	bf00      	nop
 8003be0:	200044e8 	.word	0x200044e8
 8003be4:	20000010 	.word	0x20000010
 8003be8:	2000569c 	.word	0x2000569c
 8003bec:	2000337c 	.word	0x2000337c
 8003bf0:	20004394 	.word	0x20004394
 8003bf4:	20003390 	.word	0x20003390
 8003bf8:	20003394 	.word	0x20003394
 8003bfc:	080065e7 	.word	0x080065e7
 8003c00:	20004fec 	.word	0x20004fec
 8003c04:	20004674 	.word	0x20004674
 8003c08:	200044ec 	.word	0x200044ec
 8003c0c:	200043a0 	.word	0x200043a0
 8003c10:	20004398 	.word	0x20004398
 8003c14:	08006660 	.word	0x08006660
 8003c18:	2000438c 	.word	0x2000438c
 8003c1c:	0800667a 	.word	0x0800667a
 8003c20:	2000000c 	.word	0x2000000c
 8003c24:	08006569 	.word	0x08006569
 8003c28:	2000321c 	.word	0x2000321c
 8003c2c:	0800659f 	.word	0x0800659f

08003c30 <Get_Next_Move>:
}

return next;
}

int Get_Next_Move() {
 8003c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 //index of lowest move
int next = FWD;
int min = 0;
int values[5] = {127, 127, 127, 127, 127};

if (y_coord > 0 && horiz_walls[x_coord][y_coord-1] != TRUE) { //if row is greater than zero
 8003c34:	f8df 8154 	ldr.w	r8, [pc, #340]	; 8003d8c <Get_Next_Move+0x15c>
}

return next;
}

int Get_Next_Move() {
 8003c38:	b086      	sub	sp, #24
 8003c3a:	4f4c      	ldr	r7, [pc, #304]	; (8003d6c <Get_Next_Move+0x13c>)
int next = FWD;
int min = 0;
int values[5] = {127, 127, 127, 127, 127};

if (y_coord > 0 && horiz_walls[x_coord][y_coord-1] != TRUE) { //if row is greater than zero
	values[1] = maze[x_coord][y_coord-1]; //up square
 8003c3c:	4e4c      	ldr	r6, [pc, #304]	; (8003d70 <Get_Next_Move+0x140>)
int Get_Next_Move() {

 //index of lowest move
int next = FWD;
int min = 0;
int values[5] = {127, 127, 127, 127, 127};
 8003c3e:	4d4d      	ldr	r5, [pc, #308]	; (8003d74 <Get_Next_Move+0x144>)
 8003c40:	ac01      	add	r4, sp, #4
 8003c42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c46:	682b      	ldr	r3, [r5, #0]
 8003c48:	a801      	add	r0, sp, #4

if (y_coord > 0 && horiz_walls[x_coord][y_coord-1] != TRUE) { //if row is greater than zero
 8003c4a:	f8d8 2000 	ldr.w	r2, [r8]
int Get_Next_Move() {

 //index of lowest move
int next = FWD;
int min = 0;
int values[5] = {127, 127, 127, 127, 127};
 8003c4e:	6023      	str	r3, [r4, #0]
 8003c50:	4c49      	ldr	r4, [pc, #292]	; (8003d78 <Get_Next_Move+0x148>)

if (y_coord > 0 && horiz_walls[x_coord][y_coord-1] != TRUE) { //if row is greater than zero
 8003c52:	b962      	cbnz	r2, 8003c6e <Get_Next_Move+0x3e>
	values[1] = maze[x_coord][y_coord-1]; //up square
}

if (y_coord < Y_MAZE_SIZE - 1 && horiz_walls[x_coord][y_coord] != TRUE) {
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	0119      	lsls	r1, r3, #4
 8003c58:	1acb      	subs	r3, r1, r3
 8003c5a:	4423      	add	r3, r4
 8003c5c:	5c9b      	ldrb	r3, [r3, r2]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d013      	beq.n	8003c8a <Get_Next_Move+0x5a>
	values[2] = maze[x_coord][y_coord+1]; //down square
 8003c62:	1c53      	adds	r3, r2, #1
 8003c64:	440b      	add	r3, r1
 8003c66:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8003c6a:	9303      	str	r3, [sp, #12]
 8003c6c:	e00d      	b.n	8003c8a <Get_Next_Move+0x5a>
 //index of lowest move
int next = FWD;
int min = 0;
int values[5] = {127, 127, 127, 127, 127};

if (y_coord > 0 && horiz_walls[x_coord][y_coord-1] != TRUE) { //if row is greater than zero
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	1e51      	subs	r1, r2, #1
 8003c72:	011d      	lsls	r5, r3, #4
 8003c74:	1aeb      	subs	r3, r5, r3
 8003c76:	4423      	add	r3, r4
 8003c78:	5c5b      	ldrb	r3, [r3, r1]
 8003c7a:	2b01      	cmp	r3, #1
	values[1] = maze[x_coord][y_coord-1]; //up square
 8003c7c:	bf1e      	ittt	ne
 8003c7e:	1949      	addne	r1, r1, r5
 8003c80:	f856 3021 	ldrne.w	r3, [r6, r1, lsl #2]
 8003c84:	9302      	strne	r3, [sp, #8]
}

if (y_coord < Y_MAZE_SIZE - 1 && horiz_walls[x_coord][y_coord] != TRUE) {
 8003c86:	2a0e      	cmp	r2, #14
 8003c88:	d9e4      	bls.n	8003c54 <Get_Next_Move+0x24>
	values[2] = maze[x_coord][y_coord+1]; //down square
}

if (x_coord > 0 && vert_walls[x_coord - 1][y_coord] != TRUE) {
 8003c8a:	6839      	ldr	r1, [r7, #0]
 8003c8c:	4c3b      	ldr	r4, [pc, #236]	; (8003d7c <Get_Next_Move+0x14c>)
 8003c8e:	b959      	cbnz	r1, 8003ca8 <Get_Next_Move+0x78>
	values[3] = maze[x_coord - 1][y_coord]; //left square
}

if (x_coord < X_MAZE_SIZE - 1 && vert_walls[x_coord][y_coord] != TRUE) {
 8003c90:	eb04 1401 	add.w	r4, r4, r1, lsl #4
 8003c94:	5ca3      	ldrb	r3, [r4, r2]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d012      	beq.n	8003cc0 <Get_Next_Move+0x90>
	values[4] = maze[x_coord+1][y_coord]; //right square
 8003c9a:	1c4b      	adds	r3, r1, #1
 8003c9c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8003ca0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8003ca4:	9305      	str	r3, [sp, #20]
 8003ca6:	e00b      	b.n	8003cc0 <Get_Next_Move+0x90>

if (y_coord < Y_MAZE_SIZE - 1 && horiz_walls[x_coord][y_coord] != TRUE) {
	values[2] = maze[x_coord][y_coord+1]; //down square
}

if (x_coord > 0 && vert_walls[x_coord - 1][y_coord] != TRUE) {
 8003ca8:	1e4b      	subs	r3, r1, #1
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	18e5      	adds	r5, r4, r3
 8003cae:	5cad      	ldrb	r5, [r5, r2]
 8003cb0:	2d01      	cmp	r5, #1
	values[3] = maze[x_coord - 1][y_coord]; //left square
 8003cb2:	bf1e      	ittt	ne
 8003cb4:	189b      	addne	r3, r3, r2
 8003cb6:	f856 3023 	ldrne.w	r3, [r6, r3, lsl #2]
 8003cba:	9304      	strne	r3, [sp, #16]
}

if (x_coord < X_MAZE_SIZE - 1 && vert_walls[x_coord][y_coord] != TRUE) {
 8003cbc:	290e      	cmp	r1, #14
 8003cbe:	d9e7      	bls.n	8003c90 <Get_Next_Move+0x60>
	values[4] = maze[x_coord+1][y_coord]; //right square
}

for (int i = 1; i < 5; i++) {
 8003cc0:	2501      	movs	r5, #1

int Get_Next_Move() {

 //index of lowest move
int next = FWD;
int min = 0;
 8003cc2:	2300      	movs	r3, #0
if (x_coord < X_MAZE_SIZE - 1 && vert_walls[x_coord][y_coord] != TRUE) {
	values[4] = maze[x_coord+1][y_coord]; //right square
}

for (int i = 1; i < 5; i++) {
	if(values[i] < values[min]) {
 8003cc4:	ac06      	add	r4, sp, #24
 8003cc6:	eb04 0e83 	add.w	lr, r4, r3, lsl #2
 8003cca:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
 8003cce:	f85e ec14 	ldr.w	lr, [lr, #-20]
 8003cd2:	4574      	cmp	r4, lr
 8003cd4:	bfb8      	it	lt
 8003cd6:	462b      	movlt	r3, r5

if (x_coord < X_MAZE_SIZE - 1 && vert_walls[x_coord][y_coord] != TRUE) {
	values[4] = maze[x_coord+1][y_coord]; //right square
}

for (int i = 1; i < 5; i++) {
 8003cd8:	3501      	adds	r5, #1
 8003cda:	2d05      	cmp	r5, #5
 8003cdc:	d1f2      	bne.n	8003cc4 <Get_Next_Move+0x94>
	if(values[i] < values[min]) {
		min = i;
	}
}

if (values[min] >= maze[x_coord][y_coord]) { //if lowest available square is higher than current
 8003cde:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003ce2:	a906      	add	r1, sp, #24
 8003ce4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8003ce8:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8003cec:	f851 1c14 	ldr.w	r1, [r1, #-20]
 8003cf0:	4291      	cmp	r1, r2
 8003cf2:	d307      	bcc.n	8003d04 <Get_Next_Move+0xd4>
	//floodfill and recursive call
	Floodfill(reverse_flag, search_flag, FALSE);
 8003cf4:	4b22      	ldr	r3, [pc, #136]	; (8003d80 <Get_Next_Move+0x150>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	6819      	ldr	r1, [r3, #0]
 8003cfa:	4b22      	ldr	r3, [pc, #136]	; (8003d84 <Get_Next_Move+0x154>)
 8003cfc:	6818      	ldr	r0, [r3, #0]
 8003cfe:	f7ff fbfb 	bl	80034f8 <Floodfill>
	next = Get_Next_Move();
	//Print_Maze();
	return next;
 8003d02:	e79c      	b.n	8003c3e <Get_Next_Move+0xe>
}

switch(cur_dir) {
 8003d04:	4a20      	ldr	r2, [pc, #128]	; (8003d88 <Get_Next_Move+0x158>)
 8003d06:	6810      	ldr	r0, [r2, #0]
 8003d08:	2803      	cmp	r0, #3
 8003d0a:	d82b      	bhi.n	8003d64 <Get_Next_Move+0x134>
 8003d0c:	e8df f000 	tbb	[pc, r0]
 8003d10:	141e0a02 	.word	0x141e0a02

case NORTH:
	switch(min) {
 8003d14:	2b03      	cmp	r3, #3
 8003d16:	d021      	beq.n	8003d5c <Get_Next_Move+0x12c>
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d00b      	beq.n	8003d34 <Get_Next_Move+0x104>
	case 1:
		next = FWD;
		break;
	case 2:
		next = DEAD;
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	bf08      	it	eq
 8003d20:	2003      	moveq	r0, #3
 8003d22:	e020      	b.n	8003d66 <Get_Next_Move+0x136>
		break;
	}
break;

case SOUTH:
	switch(min) {
 8003d24:	2b03      	cmp	r3, #3
 8003d26:	d005      	beq.n	8003d34 <Get_Next_Move+0x104>
 8003d28:	2b04      	cmp	r3, #4
 8003d2a:	d01c      	beq.n	8003d66 <Get_Next_Move+0x136>
}

int Get_Next_Move() {

 //index of lowest move
int next = FWD;
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	bf08      	it	eq
 8003d30:	2003      	moveq	r0, #3
 8003d32:	e010      	b.n	8003d56 <Get_Next_Move+0x126>
		break;
	case 2:
		next = FWD;
		break;
	case 3:
		next = RIGHT;
 8003d34:	2002      	movs	r0, #2
		break;
 8003d36:	e016      	b.n	8003d66 <Get_Next_Move+0x136>
		break;
	}
break;

case EAST:
	switch(min) {
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d005      	beq.n	8003d48 <Get_Next_Move+0x118>
 8003d3c:	2b03      	cmp	r3, #3
 8003d3e:	d012      	beq.n	8003d66 <Get_Next_Move+0x136>
}

int Get_Next_Move() {

 //index of lowest move
int next = FWD;
 8003d40:	3b01      	subs	r3, #1
 8003d42:	4258      	negs	r0, r3
 8003d44:	4158      	adcs	r0, r3
 8003d46:	e00e      	b.n	8003d66 <Get_Next_Move+0x136>
	switch(min) {
	case 1:
		next = LEFT;
		break;
	case 2:
		next = RIGHT;
 8003d48:	4618      	mov	r0, r3
		break;
 8003d4a:	e00c      	b.n	8003d66 <Get_Next_Move+0x136>
	}
break;


case WEST:
	switch(min) {
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d005      	beq.n	8003d5c <Get_Next_Move+0x12c>
 8003d50:	2b04      	cmp	r3, #4
 8003d52:	d005      	beq.n	8003d60 <Get_Next_Move+0x130>
}

int Get_Next_Move() {

 //index of lowest move
int next = FWD;
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	bf18      	it	ne
 8003d58:	2000      	movne	r0, #0
 8003d5a:	e004      	b.n	8003d66 <Get_Next_Move+0x136>
	switch(min) {
	case 1:
		next = RIGHT;
		break;
	case 2:
		next = LEFT;
 8003d5c:	2001      	movs	r0, #1
		break;
 8003d5e:	e002      	b.n	8003d66 <Get_Next_Move+0x136>
	case 3:
		next = FWD;
		break;
	case 4:
		next = DEAD;
 8003d60:	2003      	movs	r0, #3
		break;
 8003d62:	e000      	b.n	8003d66 <Get_Next_Move+0x136>
}

int Get_Next_Move() {

 //index of lowest move
int next = FWD;
 8003d64:	2000      	movs	r0, #0
		}
break;
}

return next;
}
 8003d66:	b006      	add	sp, #24
 8003d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d6c:	200044e8 	.word	0x200044e8
 8003d70:	20004674 	.word	0x20004674
 8003d74:	0800622c 	.word	0x0800622c
 8003d78:	200043a4 	.word	0x200043a4
 8003d7c:	20003068 	.word	0x20003068
 8003d80:	200044ec 	.word	0x200044ec
 8003d84:	2000438c 	.word	0x2000438c
 8003d88:	20004394 	.word	0x20004394
 8003d8c:	20000010 	.word	0x20000010

08003d90 <HAL_GPIO_EXTI_Callback>:
}
#endif
//button interrupt routine (THIS IS RUN WHEN BUTTONS ARE PRESSED)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (GPIO_Pin == BUTTON2_Pin)
 8003d90:	2840      	cmp	r0, #64	; 0x40
		  }
}
#endif
//button interrupt routine (THIS IS RUN WHEN BUTTONS ARE PRESSED)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d92:	b508      	push	{r3, lr}
  if (GPIO_Pin == BUTTON2_Pin)
 8003d94:	d114      	bne.n	8003dc0 <HAL_GPIO_EXTI_Callback+0x30>
  {
	  if (debug_flag == FALSE) {
 8003d96:	4b17      	ldr	r3, [pc, #92]	; (8003df4 <HAL_GPIO_EXTI_Callback+0x64>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	b97b      	cbnz	r3, 8003dbc <HAL_GPIO_EXTI_Callback+0x2c>
	  stop_flag = !stop_flag;
 8003d9c:	4a16      	ldr	r2, [pc, #88]	; (8003df8 <HAL_GPIO_EXTI_Callback+0x68>)
	  //reverse_flag = FALSE;
	  //search_flag = FALSE;
	  HAL_GPIO_TogglePin(GPIOD, LED4_Pin);
 8003d9e:	2104      	movs	r1, #4
 8003da0:	4816      	ldr	r0, [pc, #88]	; (8003dfc <HAL_GPIO_EXTI_Callback+0x6c>)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (GPIO_Pin == BUTTON2_Pin)
  {
	  if (debug_flag == FALSE) {
	  stop_flag = !stop_flag;
 8003da2:	6813      	ldr	r3, [r2, #0]
 8003da4:	fab3 f383 	clz	r3, r3
 8003da8:	095b      	lsrs	r3, r3, #5
 8003daa:	6013      	str	r3, [r2, #0]
	  //reverse_flag = FALSE;
	  //search_flag = FALSE;
	  HAL_GPIO_TogglePin(GPIOD, LED4_Pin);
 8003dac:	f7fd fa0e 	bl	80011cc <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOD, LED1_Pin);
 8003db0:	2120      	movs	r1, #32
 8003db2:	4812      	ldr	r0, [pc, #72]	; (8003dfc <HAL_GPIO_EXTI_Callback+0x6c>)
	 __HAL_TIM_SET_COUNTER(&htim1, 0);
	 __HAL_TIM_SET_COUNTER(&htim4, 0);
	 debug_flag = !debug_flag;

  }
}
 8003db4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  if (debug_flag == FALSE) {
	  stop_flag = !stop_flag;
	  //reverse_flag = FALSE;
	  //search_flag = FALSE;
	  HAL_GPIO_TogglePin(GPIOD, LED4_Pin);
	  HAL_GPIO_TogglePin(GPIOD, LED1_Pin);
 8003db8:	f7fd ba08 	b.w	80011cc <HAL_GPIO_TogglePin>
	  }

	  else
	  {
		send_debug = !send_debug;
 8003dbc:	4a10      	ldr	r2, [pc, #64]	; (8003e00 <HAL_GPIO_EXTI_Callback+0x70>)
 8003dbe:	e012      	b.n	8003de6 <HAL_GPIO_EXTI_Callback+0x56>
	  }

  }

  if (GPIO_Pin == BUTTON1_Pin)
 8003dc0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003dc4:	d114      	bne.n	8003df0 <HAL_GPIO_EXTI_Callback+0x60>
  {
	 //Floodfill(FALSE, FALSE, TRUE);
	 //Print_Maze();
	 //Test_Floodfill();
	 HAL_GPIO_TogglePin(GPIOD, LED3_Pin);
 8003dc6:	2108      	movs	r1, #8
 8003dc8:	480c      	ldr	r0, [pc, #48]	; (8003dfc <HAL_GPIO_EXTI_Callback+0x6c>)
 8003dca:	f7fd f9ff 	bl	80011cc <HAL_GPIO_TogglePin>
	 HAL_GPIO_TogglePin(GPIOD, LED1_Pin);
 8003dce:	2120      	movs	r1, #32
 8003dd0:	480a      	ldr	r0, [pc, #40]	; (8003dfc <HAL_GPIO_EXTI_Callback+0x6c>)
 8003dd2:	f7fd f9fb 	bl	80011cc <HAL_GPIO_TogglePin>
	 __HAL_TIM_SET_COUNTER(&htim1, 0);
 8003dd6:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <HAL_GPIO_EXTI_Callback+0x74>)
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	2300      	movs	r3, #0
 8003ddc:	6253      	str	r3, [r2, #36]	; 0x24
	 __HAL_TIM_SET_COUNTER(&htim4, 0);
 8003dde:	4a0a      	ldr	r2, [pc, #40]	; (8003e08 <HAL_GPIO_EXTI_Callback+0x78>)
 8003de0:	6812      	ldr	r2, [r2, #0]
 8003de2:	6253      	str	r3, [r2, #36]	; 0x24
	 debug_flag = !debug_flag;
 8003de4:	4a03      	ldr	r2, [pc, #12]	; (8003df4 <HAL_GPIO_EXTI_Callback+0x64>)
 8003de6:	6813      	ldr	r3, [r2, #0]
 8003de8:	fab3 f383 	clz	r3, r3
 8003dec:	095b      	lsrs	r3, r3, #5
 8003dee:	6013      	str	r3, [r2, #0]
 8003df0:	bd08      	pop	{r3, pc}
 8003df2:	bf00      	nop
 8003df4:	20004390 	.word	0x20004390
 8003df8:	2000000c 	.word	0x2000000c
 8003dfc:	40020c00 	.word	0x40020c00
 8003e00:	20003218 	.word	0x20003218
 8003e04:	20005a9c 	.word	0x20005a9c
 8003e08:	200045f0 	.word	0x200045f0

08003e0c <HAL_SPI_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003e0c:	4770      	bx	lr
	...

08003e10 <Error_Handler>:

void Error_Handler(void)
{
  while(1) 
  {
	  sprintf(tx_buffer, "State: %d", HAL_state);
 8003e10:	4c05      	ldr	r4, [pc, #20]	; (8003e28 <Error_Handler+0x18>)
  //wTransferState = TRANSFER_ERROR;
  //HAL_GPIO_TogglePin(GPIOD, LED5_Pin);
}

void Error_Handler(void)
{
 8003e12:	b508      	push	{r3, lr}
  while(1) 
  {
	  sprintf(tx_buffer, "State: %d", HAL_state);
 8003e14:	6822      	ldr	r2, [r4, #0]
 8003e16:	4905      	ldr	r1, [pc, #20]	; (8003e2c <Error_Handler+0x1c>)
 8003e18:	4805      	ldr	r0, [pc, #20]	; (8003e30 <Error_Handler+0x20>)
 8003e1a:	f001 fdc3 	bl	80059a4 <siprintf>
	  Transmit(tx_buffer);
 8003e1e:	4804      	ldr	r0, [pc, #16]	; (8003e30 <Error_Handler+0x20>)
 8003e20:	f7ff f93e 	bl	80030a0 <Transmit>
 8003e24:	e7f6      	b.n	8003e14 <Error_Handler+0x4>
 8003e26:	bf00      	nop
 8003e28:	2000204c 	.word	0x2000204c
 8003e2c:	080066eb 	.word	0x080066eb
 8003e30:	20004fec 	.word	0x20004fec

08003e34 <Program_Walls_Flash>:

HAL_Delay(300);

}

void Program_Walls_Flash() {
 8003e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

Transmit("Programming Walls in Flash.....\r\n");
 8003e38:	482c      	ldr	r0, [pc, #176]	; (8003eec <Program_Walls_Flash+0xb8>)
HAL_FLASH_Unlock();

EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
EraseInitStruct.Sector        = FLASH_SECTOR_5;
EraseInitStruct.NbSectors     = 1;
 8003e3a:	2402      	movs	r4, #2

}

void Program_Walls_Flash() {

Transmit("Programming Walls in Flash.....\r\n");
 8003e3c:	f7ff f930 	bl	80030a0 <Transmit>
HAL_FLASH_Unlock();
 8003e40:	f7fc ffbc 	bl	8000dbc <HAL_FLASH_Unlock>

EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
EraseInitStruct.Sector        = FLASH_SECTOR_5;
EraseInitStruct.NbSectors     = 1;
 8003e44:	2100      	movs	r1, #0
void Program_Walls_Flash() {

Transmit("Programming Walls in Flash.....\r\n");
HAL_FLASH_Unlock();

EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8003e46:	482a      	ldr	r0, [pc, #168]	; (8003ef0 <Program_Walls_Flash+0xbc>)
EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
EraseInitStruct.Sector        = FLASH_SECTOR_5;
EraseInitStruct.NbSectors     = 1;
 8003e48:	2205      	movs	r2, #5
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}

if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8003e50:	4928      	ldr	r1, [pc, #160]	; (8003ef4 <Program_Walls_Flash+0xc0>)
 8003e52:	f7fd f87d 	bl	8000f50 <HAL_FLASHEx_Erase>
 8003e56:	b130      	cbz	r0, 8003e66 <Program_Walls_Flash+0x32>
  {
    while (1)
    {
      Transmit("Programming Error! \r\n");
 8003e58:	4827      	ldr	r0, [pc, #156]	; (8003ef8 <Program_Walls_Flash+0xc4>)
 8003e5a:	f7ff f921 	bl	80030a0 <Transmit>
      HAL_Delay(100);
 8003e5e:	2064      	movs	r0, #100	; 0x64
 8003e60:	f7fc fa86 	bl	8000370 <HAL_Delay>
 8003e64:	e7f8      	b.n	8003e58 <Program_Walls_Flash+0x24>
    }
  }

Address = WALLS_ADDR;
 8003e66:	4d25      	ldr	r5, [pc, #148]	; (8003efc <Program_Walls_Flash+0xc8>)
 8003e68:	4604      	mov	r4, r0
 8003e6a:	4b25      	ldr	r3, [pc, #148]	; (8003f00 <Program_Walls_Flash+0xcc>)

for (int i = 0; i < X_MAZE_SIZE; i++) {
	for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, horiz_walls[i][j]) == HAL_OK) {
 8003e6c:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8003f0c <Program_Walls_Flash+0xd8>
 8003e70:	462f      	mov	r7, r5
      Transmit("Programming Error! \r\n");
      HAL_Delay(100);
    }
  }

Address = WALLS_ADDR;
 8003e72:	602b      	str	r3, [r5, #0]

HAL_Delay(300);

}

void Program_Walls_Flash() {
 8003e74:	2600      	movs	r6, #0
Address = WALLS_ADDR;

for (int i = 0; i < X_MAZE_SIZE; i++) {
	for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, horiz_walls[i][j]) == HAL_OK) {
 8003e76:	eb09 0804 	add.w	r8, r9, r4
 8003e7a:	f818 2006 	ldrb.w	r2, [r8, r6]
 8003e7e:	2300      	movs	r3, #0
 8003e80:	6829      	ldr	r1, [r5, #0]
 8003e82:	2000      	movs	r0, #0
 8003e84:	f7fc ffe4 	bl	8000e50 <HAL_FLASH_Program>
 8003e88:	b9a8      	cbnz	r0, 8003eb6 <Program_Walls_Flash+0x82>
			Address = Address + 4;
 8003e8a:	683b      	ldr	r3, [r7, #0]
  }

Address = WALLS_ADDR;

for (int i = 0; i < X_MAZE_SIZE; i++) {
	for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
 8003e8c:	3601      	adds	r6, #1

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, horiz_walls[i][j]) == HAL_OK) {
			Address = Address + 4;
 8003e8e:	3304      	adds	r3, #4
  }

Address = WALLS_ADDR;

for (int i = 0; i < X_MAZE_SIZE; i++) {
	for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
 8003e90:	2e0f      	cmp	r6, #15

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, horiz_walls[i][j]) == HAL_OK) {
			Address = Address + 4;
 8003e92:	603b      	str	r3, [r7, #0]
  }

Address = WALLS_ADDR;

for (int i = 0; i < X_MAZE_SIZE; i++) {
	for (int j = 0; j < Y_MAZE_SIZE - 1; j++) {
 8003e94:	d1f1      	bne.n	8003e7a <Program_Walls_Flash+0x46>
 8003e96:	e013      	b.n	8003ec0 <Program_Walls_Flash+0x8c>
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) {
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, vert_walls[i][j]) == HAL_OK) {
			Address = Address + 4;
 8003e98:	683b      	ldr	r3, [r7, #0]
		}
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) {
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
 8003e9a:	3601      	adds	r6, #1
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, vert_walls[i][j]) == HAL_OK) {
			Address = Address + 4;
 8003e9c:	3304      	adds	r3, #4
		}
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) {
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
 8003e9e:	2e10      	cmp	r6, #16
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, vert_walls[i][j]) == HAL_OK) {
			Address = Address + 4;
 8003ea0:	603b      	str	r3, [r7, #0]
		}
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) {
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
 8003ea2:	d018      	beq.n	8003ed6 <Program_Walls_Flash+0xa2>
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, vert_walls[i][j]) == HAL_OK) {
 8003ea4:	f818 2006 	ldrb.w	r2, [r8, r6]
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	6829      	ldr	r1, [r5, #0]
 8003eac:	2000      	movs	r0, #0
 8003eae:	f7fc ffcf 	bl	8000e50 <HAL_FLASH_Program>
 8003eb2:	2800      	cmp	r0, #0
 8003eb4:	d0f0      	beq.n	8003e98 <Program_Walls_Flash+0x64>

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, horiz_walls[i][j]) == HAL_OK) {
			Address = Address + 4;
		}
		else {
			HAL_state = FUCKEDUP;
 8003eb6:	2245      	movs	r2, #69	; 0x45
 8003eb8:	4b12      	ldr	r3, [pc, #72]	; (8003f04 <Program_Walls_Flash+0xd0>)
 8003eba:	601a      	str	r2, [r3, #0]
			Error_Handler();
 8003ebc:	f7ff ffa8 	bl	8003e10 <Error_Handler>
 8003ec0:	340f      	adds	r4, #15
    }
  }

Address = WALLS_ADDR;

for (int i = 0; i < X_MAZE_SIZE; i++) {
 8003ec2:	2cf0      	cmp	r4, #240	; 0xf0
 8003ec4:	d1d6      	bne.n	8003e74 <Program_Walls_Flash+0x40>
 8003ec6:	4604      	mov	r4, r0
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) {
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, vert_walls[i][j]) == HAL_OK) {
 8003ec8:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8003f10 <Program_Walls_Flash+0xdc>
 8003ecc:	4f0b      	ldr	r7, [pc, #44]	; (8003efc <Program_Walls_Flash+0xc8>)
      Transmit("Programming Error! \r\n");
      HAL_Delay(100);
    }
  }

Address = WALLS_ADDR;
 8003ece:	2600      	movs	r6, #0
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) {
	for (int j = 0; j < Y_MAZE_SIZE; j++) {
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, vert_walls[i][j]) == HAL_OK) {
 8003ed0:	eb09 0804 	add.w	r8, r9, r4
 8003ed4:	e7e6      	b.n	8003ea4 <Program_Walls_Flash+0x70>
 8003ed6:	3410      	adds	r4, #16
			Error_Handler();
		}
	}
}

for (int i = 0; i < X_MAZE_SIZE - 1; i++) {
 8003ed8:	2cf0      	cmp	r4, #240	; 0xf0
 8003eda:	d1f8      	bne.n	8003ece <Program_Walls_Flash+0x9a>
			HAL_state = FUCKEDUP;
			Error_Handler();
		}
	}
}
Transmit("Done! \r\n");
 8003edc:	480a      	ldr	r0, [pc, #40]	; (8003f08 <Program_Walls_Flash+0xd4>)
 8003ede:	f7ff f8df 	bl	80030a0 <Transmit>
HAL_FLASH_Lock();
}
 8003ee2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			Error_Handler();
		}
	}
}
Transmit("Done! \r\n");
HAL_FLASH_Lock();
 8003ee6:	f7fc bf7b 	b.w	8000de0 <HAL_FLASH_Lock>
 8003eea:	bf00      	nop
 8003eec:	080066f5 	.word	0x080066f5
 8003ef0:	20003220 	.word	0x20003220
 8003ef4:	20004388 	.word	0x20004388
 8003ef8:	08006717 	.word	0x08006717
 8003efc:	2000439c 	.word	0x2000439c
 8003f00:	08040000 	.word	0x08040000
 8003f04:	2000204c 	.word	0x2000204c
 8003f08:	0800628b 	.word	0x0800628b
 8003f0c:	200043a4 	.word	0x200043a4
 8003f10:	20003068 	.word	0x20003068

08003f14 <Start_IR>:
lenc_diff_corr = 0;
renc_diff_corr = 0;

}

void Start_IR() {
 8003f14:	b508      	push	{r3, lr}

adc_conv = FALSE;
 8003f16:	2200      	movs	r2, #0
 8003f18:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <Start_IR+0x1c>)
if(HAL_ADC_Start_DMA(&hadc1, ADC_valbuffer, ADC_VAL_BUFFER_LENGTH) != HAL_OK)
 8003f1a:	4906      	ldr	r1, [pc, #24]	; (8003f34 <Start_IR+0x20>)

}

void Start_IR() {

adc_conv = FALSE;
 8003f1c:	601a      	str	r2, [r3, #0]
if(HAL_ADC_Start_DMA(&hadc1, ADC_valbuffer, ADC_VAL_BUFFER_LENGTH) != HAL_OK)
 8003f1e:	2220      	movs	r2, #32
 8003f20:	4805      	ldr	r0, [pc, #20]	; (8003f38 <Start_IR+0x24>)
 8003f22:	f7fc fadd 	bl	80004e0 <HAL_ADC_Start_DMA>
 8003f26:	b108      	cbz	r0, 8003f2c <Start_IR+0x18>
  {
     Error_Handler();
 8003f28:	f7ff ff72 	bl	8003e10 <Error_Handler>
 8003f2c:	bd08      	pop	{r3, pc}
 8003f2e:	bf00      	nop
 8003f30:	200044f0 	.word	0x200044f0
 8003f34:	2000561c 	.word	0x2000561c
 8003f38:	200050b4 	.word	0x200050b4

08003f3c <Get_IR>:
     Error_Handler();
  }

}

void Get_IR(int front_save, int side_save, int front_disable, int side_disable) { //front and side variables used to save values in a buffer
 8003f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f40:	b085      	sub	sp, #20
 8003f42:	461d      	mov	r5, r3
	int off_lf = 0;

	int comp_lf = 0;
	int comp_rf = 0;

	if (front_disable == FALSE) {
 8003f44:	4617      	mov	r7, r2
     Error_Handler();
  }

}

void Get_IR(int front_save, int side_save, int front_disable, int side_disable) { //front and side variables used to save values in a buffer
 8003f46:	9002      	str	r0, [sp, #8]
 8003f48:	9101      	str	r1, [sp, #4]
	int off_lf = 0;

	int comp_lf = 0;
	int comp_rf = 0;

	if (front_disable == FALSE) {
 8003f4a:	b9e2      	cbnz	r2, 8003f86 <Get_IR+0x4a>
		//left sensor
		Start_IR();
 8003f4c:	f7ff ffe2 	bl	8003f14 <Start_IR>
		while (adc_conv == FALSE);
 8003f50:	4a77      	ldr	r2, [pc, #476]	; (8004130 <Get_IR+0x1f4>)
 8003f52:	6813      	ldr	r3, [r2, #0]
 8003f54:	4e76      	ldr	r6, [pc, #472]	; (8004130 <Get_IR+0x1f4>)
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0fb      	beq.n	8003f52 <Get_IR+0x16>
		off_l = l;
 8003f5a:	4c76      	ldr	r4, [pc, #472]	; (8004134 <Get_IR+0x1f8>)
		HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, ON);
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	2120      	movs	r1, #32
 8003f60:	4875      	ldr	r0, [pc, #468]	; (8004138 <Get_IR+0x1fc>)

	if (front_disable == FALSE) {
		//left sensor
		Start_IR();
		while (adc_conv == FALSE);
		off_l = l;
 8003f62:	f8d4 8000 	ldr.w	r8, [r4]
		HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, ON);
 8003f66:	f7fd f92d 	bl	80011c4 <HAL_GPIO_WritePin>
		Start_IR();
 8003f6a:	f7ff ffd3 	bl	8003f14 <Start_IR>
		while (adc_conv == FALSE);
 8003f6e:	6833      	ldr	r3, [r6, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0fc      	beq.n	8003f6e <Get_IR+0x32>
		on_l = l;
		HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, OFF);
 8003f74:	2200      	movs	r2, #0
 8003f76:	2120      	movs	r1, #32
 8003f78:	486f      	ldr	r0, [pc, #444]	; (8004138 <Get_IR+0x1fc>)
		while (adc_conv == FALSE);
		off_l = l;
		HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, ON);
		Start_IR();
		while (adc_conv == FALSE);
		on_l = l;
 8003f7a:	6826      	ldr	r6, [r4, #0]
		HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, OFF);
 8003f7c:	f7fd f922 	bl	80011c4 <HAL_GPIO_WritePin>
	}

	//right front
	if (side_disable == FALSE) {
 8003f80:	2d00      	cmp	r5, #0
 8003f82:	d13f      	bne.n	8004004 <Get_IR+0xc8>
 8003f84:	e004      	b.n	8003f90 <Get_IR+0x54>
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f040 80c6 	bne.w	8004118 <Get_IR+0x1dc>
	int on_l = 0; //with emitter on
	int on_r = 0;
	int on_rf = 0;
	int on_lf = 0;

	int off_l = 0; //with emitter off. detect ambient light
 8003f8c:	46a8      	mov	r8, r5
}

void Get_IR(int front_save, int side_save, int front_disable, int side_disable) { //front and side variables used to save values in a buffer

	//sensor readings
	int on_l = 0; //with emitter on
 8003f8e:	462e      	mov	r6, r5
		HAL_GPIO_WritePin(L_EMIT_PORT, L_EMIT_PIN, OFF);
	}

	//right front
	if (side_disable == FALSE) {
		Start_IR();
 8003f90:	f7ff ffc0 	bl	8003f14 <Start_IR>
		while (adc_conv == FALSE);
 8003f94:	4a66      	ldr	r2, [pc, #408]	; (8004130 <Get_IR+0x1f4>)
 8003f96:	6813      	ldr	r3, [r2, #0]
 8003f98:	4d65      	ldr	r5, [pc, #404]	; (8004130 <Get_IR+0x1f4>)
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0fb      	beq.n	8003f96 <Get_IR+0x5a>
		off_rf = rf;
 8003f9e:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8004164 <Get_IR+0x228>
		HAL_GPIO_WritePin(RF_EMIT_PORT, RF_EMIT_PIN, ON);
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003fa8:	4864      	ldr	r0, [pc, #400]	; (800413c <Get_IR+0x200>)

	//right front
	if (side_disable == FALSE) {
		Start_IR();
		while (adc_conv == FALSE);
		off_rf = rf;
 8003faa:	f8d9 4000 	ldr.w	r4, [r9]
		HAL_GPIO_WritePin(RF_EMIT_PORT, RF_EMIT_PIN, ON);
 8003fae:	f7fd f909 	bl	80011c4 <HAL_GPIO_WritePin>
		Start_IR();
 8003fb2:	f7ff ffaf 	bl	8003f14 <Start_IR>
		while (adc_conv == FALSE);
 8003fb6:	682b      	ldr	r3, [r5, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d0fc      	beq.n	8003fb6 <Get_IR+0x7a>
		on_rf = rf;
		HAL_GPIO_WritePin(RF_EMIT_PORT, RF_EMIT_PIN, OFF);
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003fc2:	485e      	ldr	r0, [pc, #376]	; (800413c <Get_IR+0x200>)
		while (adc_conv == FALSE);
		off_rf = rf;
		HAL_GPIO_WritePin(RF_EMIT_PORT, RF_EMIT_PIN, ON);
		Start_IR();
		while (adc_conv == FALSE);
		on_rf = rf;
 8003fc4:	f8d9 b000 	ldr.w	fp, [r9]
		HAL_GPIO_WritePin(RF_EMIT_PORT, RF_EMIT_PIN, OFF);
 8003fc8:	f7fd f8fc 	bl	80011c4 <HAL_GPIO_WritePin>
	}

	//left front
	if (side_disable == FALSE) {
		Start_IR();
 8003fcc:	f7ff ffa2 	bl	8003f14 <Start_IR>
		while (adc_conv == FALSE);
 8003fd0:	682b      	ldr	r3, [r5, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0fc      	beq.n	8003fd0 <Get_IR+0x94>
		off_lf = lf;
 8003fd6:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8004168 <Get_IR+0x22c>
		HAL_GPIO_WritePin(LF_EMIT_PORT, LF_EMIT_PIN, ON);
 8003fda:	2201      	movs	r2, #1
 8003fdc:	2110      	movs	r1, #16
 8003fde:	4856      	ldr	r0, [pc, #344]	; (8004138 <Get_IR+0x1fc>)

	//left front
	if (side_disable == FALSE) {
		Start_IR();
		while (adc_conv == FALSE);
		off_lf = lf;
 8003fe0:	f8d9 a000 	ldr.w	sl, [r9]
		HAL_GPIO_WritePin(LF_EMIT_PORT, LF_EMIT_PIN, ON);
 8003fe4:	f7fd f8ee 	bl	80011c4 <HAL_GPIO_WritePin>
		Start_IR();
 8003fe8:	f7ff ff94 	bl	8003f14 <Start_IR>
		while (adc_conv == FALSE);
 8003fec:	682b      	ldr	r3, [r5, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0fc      	beq.n	8003fec <Get_IR+0xb0>
		on_lf = lf;
		HAL_GPIO_WritePin(LF_EMIT_PORT, LF_EMIT_PIN, OFF);
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	2110      	movs	r1, #16
 8003ff6:	4850      	ldr	r0, [pc, #320]	; (8004138 <Get_IR+0x1fc>)
		while (adc_conv == FALSE);
		off_lf = lf;
		HAL_GPIO_WritePin(LF_EMIT_PORT, LF_EMIT_PIN, ON);
		Start_IR();
		while (adc_conv == FALSE);
		on_lf = lf;
 8003ff8:	f8d9 5000 	ldr.w	r5, [r9]
		HAL_GPIO_WritePin(LF_EMIT_PORT, LF_EMIT_PIN, OFF);
 8003ffc:	f7fd f8e2 	bl	80011c4 <HAL_GPIO_WritePin>
	}

	//right sensor
	if (front_disable == FALSE) {
 8004000:	bb2f      	cbnz	r7, 800404e <Get_IR+0x112>
 8004002:	e003      	b.n	800400c <Get_IR+0xd0>
	int on_rf = 0;
	int on_lf = 0;

	int off_l = 0; //with emitter off. detect ambient light
	int off_r = 0;
	int off_rf = 0;
 8004004:	2400      	movs	r4, #0
void Get_IR(int front_save, int side_save, int front_disable, int side_disable) { //front and side variables used to save values in a buffer

	//sensor readings
	int on_l = 0; //with emitter on
	int on_r = 0;
	int on_rf = 0;
 8004006:	46a3      	mov	fp, r4
	int on_lf = 0;

	int off_l = 0; //with emitter off. detect ambient light
	int off_r = 0;
	int off_rf = 0;
	int off_lf = 0;
 8004008:	46a2      	mov	sl, r4

	//sensor readings
	int on_l = 0; //with emitter on
	int on_r = 0;
	int on_rf = 0;
	int on_lf = 0;
 800400a:	4625      	mov	r5, r4
		HAL_GPIO_WritePin(LF_EMIT_PORT, LF_EMIT_PIN, OFF);
	}

	//right sensor
	if (front_disable == FALSE) {
		Start_IR();
 800400c:	f7ff ff82 	bl	8003f14 <Start_IR>
		while (adc_conv == FALSE);
 8004010:	4947      	ldr	r1, [pc, #284]	; (8004130 <Get_IR+0x1f4>)
 8004012:	680a      	ldr	r2, [r1, #0]
 8004014:	4b46      	ldr	r3, [pc, #280]	; (8004130 <Get_IR+0x1f4>)
 8004016:	2a00      	cmp	r2, #0
 8004018:	d0fb      	beq.n	8004012 <Get_IR+0xd6>
		off_r = r;
 800401a:	f8df 9150 	ldr.w	r9, [pc, #336]	; 800416c <Get_IR+0x230>
		HAL_GPIO_WritePin(R_EMIT_PORT, R_EMIT_PIN, ON);
 800401e:	2201      	movs	r2, #1
 8004020:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004024:	4845      	ldr	r0, [pc, #276]	; (800413c <Get_IR+0x200>)
 8004026:	9303      	str	r3, [sp, #12]

	//right sensor
	if (front_disable == FALSE) {
		Start_IR();
		while (adc_conv == FALSE);
		off_r = r;
 8004028:	f8d9 7000 	ldr.w	r7, [r9]
		HAL_GPIO_WritePin(R_EMIT_PORT, R_EMIT_PIN, ON);
 800402c:	f7fd f8ca 	bl	80011c4 <HAL_GPIO_WritePin>
		Start_IR();
 8004030:	f7ff ff70 	bl	8003f14 <Start_IR>
 8004034:	9b03      	ldr	r3, [sp, #12]
		while (adc_conv == FALSE);
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	2a00      	cmp	r2, #0
 800403a:	d0fc      	beq.n	8004036 <Get_IR+0xfa>
		on_r = r;
		HAL_GPIO_WritePin(R_EMIT_PORT, R_EMIT_PIN, OFF);
 800403c:	2200      	movs	r2, #0
 800403e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004042:	483e      	ldr	r0, [pc, #248]	; (800413c <Get_IR+0x200>)
		while (adc_conv == FALSE);
		off_r = r;
		HAL_GPIO_WritePin(R_EMIT_PORT, R_EMIT_PIN, ON);
		Start_IR();
		while (adc_conv == FALSE);
		on_r = r;
 8004044:	f8d9 9000 	ldr.w	r9, [r9]
		HAL_GPIO_WritePin(R_EMIT_PORT, R_EMIT_PIN, OFF);
 8004048:	f7fd f8bc 	bl	80011c4 <HAL_GPIO_WritePin>
 800404c:	e001      	b.n	8004052 <Get_IR+0x116>
	int on_r = 0;
	int on_rf = 0;
	int on_lf = 0;

	int off_l = 0; //with emitter off. detect ambient light
	int off_r = 0;
 800404e:	2700      	movs	r7, #0

void Get_IR(int front_save, int side_save, int front_disable, int side_disable) { //front and side variables used to save values in a buffer

	//sensor readings
	int on_l = 0; //with emitter on
	int on_r = 0;
 8004050:	46b9      	mov	r9, r7
		while (adc_conv == FALSE);
		on_r = r;
		HAL_GPIO_WritePin(R_EMIT_PORT, R_EMIT_PIN, OFF);
	}

	dif_l = on_l - off_l; //val_array[0]
 8004052:	4b3b      	ldr	r3, [pc, #236]	; (8004140 <Get_IR+0x204>)
 8004054:	ebc8 0606 	rsb	r6, r8, r6
	dif_r = on_r - off_r; //val_array[1]
 8004058:	ebc7 0709 	rsb	r7, r7, r9
	dif_rf = on_rf - off_rf; //val_array[2]
 800405c:	ebc4 040b 	rsb	r4, r4, fp
		while (adc_conv == FALSE);
		on_r = r;
		HAL_GPIO_WritePin(R_EMIT_PORT, R_EMIT_PIN, OFF);
	}

	dif_l = on_l - off_l; //val_array[0]
 8004060:	601e      	str	r6, [r3, #0]
	dif_r = on_r - off_r; //val_array[1]
	dif_rf = on_rf - off_rf; //val_array[2]
	dif_lf = on_lf - off_lf; //val_array[3]
 8004062:	ebca 0505 	rsb	r5, sl, r5
		on_r = r;
		HAL_GPIO_WritePin(R_EMIT_PORT, R_EMIT_PIN, OFF);
	}

	dif_l = on_l - off_l; //val_array[0]
	dif_r = on_r - off_r; //val_array[1]
 8004066:	4b37      	ldr	r3, [pc, #220]	; (8004144 <Get_IR+0x208>)
 8004068:	601f      	str	r7, [r3, #0]
	dif_rf = on_rf - off_rf; //val_array[2]
 800406a:	4b37      	ldr	r3, [pc, #220]	; (8004148 <Get_IR+0x20c>)
 800406c:	601c      	str	r4, [r3, #0]
	dif_lf = on_lf - off_lf; //val_array[3]
 800406e:	4b37      	ldr	r3, [pc, #220]	; (800414c <Get_IR+0x210>)
 8004070:	601d      	str	r5, [r3, #0]

	//lf and rf transitions
	if (side_save == TRUE) {
 8004072:	9b01      	ldr	r3, [sp, #4]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d13b      	bne.n	80040f0 <Get_IR+0x1b4>
		lf_buffer[buff_count] = dif_lf;
 8004078:	4a35      	ldr	r2, [pc, #212]	; (8004150 <Get_IR+0x214>)
		rf_buffer[buff_count] = dif_rf;

		comp_lf = lf_buffer[((buff_count - IR_DIFF) + IR_BUFFER) % IR_BUFFER];
 800407a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	dif_rf = on_rf - off_rf; //val_array[2]
	dif_lf = on_lf - off_lf; //val_array[3]

	//lf and rf transitions
	if (side_save == TRUE) {
		lf_buffer[buff_count] = dif_lf;
 800407e:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 8004170 <Get_IR+0x234>
 8004082:	6813      	ldr	r3, [r2, #0]
		rf_buffer[buff_count] = dif_rf;
 8004084:	f8df e0ec 	ldr.w	lr, [pc, #236]	; 8004174 <Get_IR+0x238>

		comp_lf = lf_buffer[((buff_count - IR_DIFF) + IR_BUFFER) % IR_BUFFER];
 8004088:	f503 7848 	add.w	r8, r3, #800	; 0x320
	dif_rf = on_rf - off_rf; //val_array[2]
	dif_lf = on_lf - off_lf; //val_array[3]

	//lf and rf transitions
	if (side_save == TRUE) {
		lf_buffer[buff_count] = dif_lf;
 800408c:	f84c 5023 	str.w	r5, [ip, r3, lsl #2]
		rf_buffer[buff_count] = dif_rf;
 8004090:	f84e 4023 	str.w	r4, [lr, r3, lsl #2]

		comp_lf = lf_buffer[((buff_count - IR_DIFF) + IR_BUFFER) % IR_BUFFER];
 8004094:	fb98 f0f1 	sdiv	r0, r8, r1
 8004098:	fb01 8110 	mls	r1, r1, r0, r8
 800409c:	f85c a021 	ldr.w	sl, [ip, r1, lsl #2]
		comp_rf = rf_buffer[((buff_count - IR_DIFF) + IR_BUFFER) % IR_BUFFER];
 80040a0:	f85e 0021 	ldr.w	r0, [lr, r1, lsl #2]

		if (comp_lf > 10 && abs(dif_lf  - comp_lf) > L_IR_CHANGE) {
 80040a4:	f1ba 0f0a 	cmp.w	sl, #10
 80040a8:	492a      	ldr	r1, [pc, #168]	; (8004154 <Get_IR+0x218>)
 80040aa:	dd09      	ble.n	80040c0 <Get_IR+0x184>
 80040ac:	ebca 0505 	rsb	r5, sl, r5
 80040b0:	2d00      	cmp	r5, #0
 80040b2:	bfb8      	it	lt
 80040b4:	426d      	neglt	r5, r5
 80040b6:	f5b5 7fe1 	cmp.w	r5, #450	; 0x1c2
 80040ba:	dd01      	ble.n	80040c0 <Get_IR+0x184>
			l_transition_flag = TRUE;
 80040bc:	9d01      	ldr	r5, [sp, #4]
 80040be:	e000      	b.n	80040c2 <Get_IR+0x186>
		}
		else {
			l_transition_flag = FALSE;
 80040c0:	2500      	movs	r5, #0
		}
		if (comp_rf > 10 && abs(dif_rf - comp_rf) > R_IR_CHANGE) {
 80040c2:	280a      	cmp	r0, #10

		if (comp_lf > 10 && abs(dif_lf  - comp_lf) > L_IR_CHANGE) {
			l_transition_flag = TRUE;
		}
		else {
			l_transition_flag = FALSE;
 80040c4:	600d      	str	r5, [r1, #0]
 80040c6:	4924      	ldr	r1, [pc, #144]	; (8004158 <Get_IR+0x21c>)
		}
		if (comp_rf > 10 && abs(dif_rf - comp_rf) > R_IR_CHANGE) {
 80040c8:	dd08      	ble.n	80040dc <Get_IR+0x1a0>
 80040ca:	1a24      	subs	r4, r4, r0
 80040cc:	2c00      	cmp	r4, #0
 80040ce:	bfb8      	it	lt
 80040d0:	4264      	neglt	r4, r4
 80040d2:	f5b4 7fc8 	cmp.w	r4, #400	; 0x190
 80040d6:	dd01      	ble.n	80040dc <Get_IR+0x1a0>
			r_transition_flag = TRUE;
 80040d8:	2001      	movs	r0, #1
 80040da:	e000      	b.n	80040de <Get_IR+0x1a2>
		}
		else {
			r_transition_flag = FALSE;
 80040dc:	2000      	movs	r0, #0
 80040de:	6008      	str	r0, [r1, #0]
		}

		buff_count = (buff_count+1) % IR_BUFFER;
 80040e0:	3301      	adds	r3, #1
 80040e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040e6:	fb93 f1f0 	sdiv	r1, r3, r0
 80040ea:	fb00 3311 	mls	r3, r0, r1, r3
 80040ee:	6013      	str	r3, [r2, #0]
	}

	if (front_save == TRUE) { //used only for calibration
 80040f0:	9b02      	ldr	r3, [sp, #8]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d119      	bne.n	800412a <Get_IR+0x1ee>

		l_buffer[buff_count] = dif_l;
 80040f6:	4916      	ldr	r1, [pc, #88]	; (8004150 <Get_IR+0x214>)
		r_buffer[buff_count] = dif_r;
		buff_count = (buff_count + 1) % IR_BUFFER;
 80040f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		buff_count = (buff_count+1) % IR_BUFFER;
	}

	if (front_save == TRUE) { //used only for calibration

		l_buffer[buff_count] = dif_l;
 80040fc:	4a17      	ldr	r2, [pc, #92]	; (800415c <Get_IR+0x220>)
 80040fe:	680b      	ldr	r3, [r1, #0]
 8004100:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
		r_buffer[buff_count] = dif_r;
 8004104:	4a16      	ldr	r2, [pc, #88]	; (8004160 <Get_IR+0x224>)
 8004106:	f842 7023 	str.w	r7, [r2, r3, lsl #2]
		buff_count = (buff_count + 1) % IR_BUFFER;
 800410a:	3301      	adds	r3, #1
 800410c:	fb93 f2f0 	sdiv	r2, r3, r0
 8004110:	fb00 3312 	mls	r3, r0, r2, r3
 8004114:	600b      	str	r3, [r1, #0]
	}

}
 8004116:	e008      	b.n	800412a <Get_IR+0x1ee>
	int on_rf = 0;
	int on_lf = 0;

	int off_l = 0; //with emitter off. detect ambient light
	int off_r = 0;
	int off_rf = 0;
 8004118:	2400      	movs	r4, #0
void Get_IR(int front_save, int side_save, int front_disable, int side_disable) { //front and side variables used to save values in a buffer

	//sensor readings
	int on_l = 0; //with emitter on
	int on_r = 0;
	int on_rf = 0;
 800411a:	46a3      	mov	fp, r4
	int on_lf = 0;

	int off_l = 0; //with emitter off. detect ambient light
	int off_r = 0;
	int off_rf = 0;
	int off_lf = 0;
 800411c:	46a2      	mov	sl, r4
	int on_l = 0; //with emitter on
	int on_r = 0;
	int on_rf = 0;
	int on_lf = 0;

	int off_l = 0; //with emitter off. detect ambient light
 800411e:	46a0      	mov	r8, r4

	//sensor readings
	int on_l = 0; //with emitter on
	int on_r = 0;
	int on_rf = 0;
	int on_lf = 0;
 8004120:	4625      	mov	r5, r4
}

void Get_IR(int front_save, int side_save, int front_disable, int side_disable) { //front and side variables used to save values in a buffer

	//sensor readings
	int on_l = 0; //with emitter on
 8004122:	4626      	mov	r6, r4
	int on_r = 0;
	int on_rf = 0;
	int on_lf = 0;

	int off_l = 0; //with emitter off. detect ambient light
	int off_r = 0;
 8004124:	4627      	mov	r7, r4

void Get_IR(int front_save, int side_save, int front_disable, int side_disable) { //front and side variables used to save values in a buffer

	//sensor readings
	int on_l = 0; //with emitter on
	int on_r = 0;
 8004126:	46a1      	mov	r9, r4
 8004128:	e793      	b.n	8004052 <Get_IR+0x116>
		l_buffer[buff_count] = dif_l;
		r_buffer[buff_count] = dif_r;
		buff_count = (buff_count + 1) % IR_BUFFER;
	}

}
 800412a:	b005      	add	sp, #20
 800412c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004130:	200044f0 	.word	0x200044f0
 8004134:	200010a0 	.word	0x200010a0
 8004138:	40020400 	.word	0x40020400
 800413c:	40020800 	.word	0x40020800
 8004140:	20002048 	.word	0x20002048
 8004144:	200020a8 	.word	0x200020a8
 8004148:	2000320c 	.word	0x2000320c
 800414c:	200044e4 	.word	0x200044e4
 8004150:	20003380 	.word	0x20003380
 8004154:	200020b0 	.word	0x200020b0
 8004158:	200020a0 	.word	0x200020a0
 800415c:	200020bc 	.word	0x200020bc
 8004160:	200010a4 	.word	0x200010a4
 8004164:	20003328 	.word	0x20003328
 8004168:	20003164 	.word	0x20003164
 800416c:	200020ac 	.word	0x200020ac
 8004170:	20003398 	.word	0x20003398
 8004174:	200000f8 	.word	0x200000f8

08004178 <Update_Sensors>:
		  //}
	  }
return FALSE;
}

void Update_Sensors(int state) {
 8004178:	b508      	push	{r3, lr}

	switch(state) {
 800417a:	2803      	cmp	r0, #3
 800417c:	d816      	bhi.n	80041ac <Update_Sensors+0x34>
 800417e:	e8df f000 	tbb	[pc, r0]
 8004182:	0502      	.short	0x0502
 8004184:	100c      	.short	0x100c
	case 0: //disable nothing, save nothing, only correction
		Get_IR(FALSE, FALSE, FALSE, FALSE); //
 8004186:	2300      	movs	r3, #0
 8004188:	461a      	mov	r2, r3
 800418a:	e001      	b.n	8004190 <Update_Sensors+0x18>
	break;
	case 1: //disable front, only detect sides
		Get_IR(FALSE, FALSE, TRUE, FALSE);
 800418c:	2300      	movs	r3, #0
 800418e:	2201      	movs	r2, #1
 8004190:	4619      	mov	r1, r3
 8004192:	4618      	mov	r0, r3
 8004194:	f7ff fed2 	bl	8003f3c <Get_IR>
	break;
 8004198:	e008      	b.n	80041ac <Update_Sensors+0x34>
	case 2: //forward searching, detect transitions
		Get_IR(FALSE, TRUE, FALSE, FALSE);
 800419a:	2300      	movs	r3, #0
 800419c:	2101      	movs	r1, #1
 800419e:	461a      	mov	r2, r3
 80041a0:	e7f7      	b.n	8004192 <Update_Sensors+0x1a>
	break;
	case 3:
		time_count = __HAL_TIM_GET_COUNTER(&htim5);
 80041a2:	4b0d      	ldr	r3, [pc, #52]	; (80041d8 <Update_Sensors+0x60>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041a8:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <Update_Sensors+0x64>)
 80041aa:	601a      	str	r2, [r3, #0]
	break;
	}

	l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
 80041ac:	4b0c      	ldr	r3, [pc, #48]	; (80041e0 <Update_Sensors+0x68>)
	r_count = __HAL_TIM_GET_COUNTER(&htim4);
 80041ae:	490d      	ldr	r1, [pc, #52]	; (80041e4 <Update_Sensors+0x6c>)
	case 3:
		time_count = __HAL_TIM_GET_COUNTER(&htim5);
	break;
	}

	l_count = __HAL_TIM_GET_COUNTER(&htim1); //get encoder counts. Encoders working in background and are automatically updated
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041b4:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <Update_Sensors+0x70>)
 80041b6:	601a      	str	r2, [r3, #0]
	r_count = __HAL_TIM_GET_COUNTER(&htim4);
 80041b8:	4b0c      	ldr	r3, [pc, #48]	; (80041ec <Update_Sensors+0x74>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	600b      	str	r3, [r1, #0]
	lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
 80041c0:	490b      	ldr	r1, [pc, #44]	; (80041f0 <Update_Sensors+0x78>)
 80041c2:	6809      	ldr	r1, [r1, #0]
 80041c4:	1a52      	subs	r2, r2, r1
 80041c6:	490b      	ldr	r1, [pc, #44]	; (80041f4 <Update_Sensors+0x7c>)
 80041c8:	600a      	str	r2, [r1, #0]
	renc_diff = r_count - prev_r_count;
 80041ca:	4a0b      	ldr	r2, [pc, #44]	; (80041f8 <Update_Sensors+0x80>)
 80041cc:	6812      	ldr	r2, [r2, #0]
 80041ce:	1a9b      	subs	r3, r3, r2
 80041d0:	4a0a      	ldr	r2, [pc, #40]	; (80041fc <Update_Sensors+0x84>)
 80041d2:	6013      	str	r3, [r2, #0]
 80041d4:	bd08      	pop	{r3, pc}
 80041d6:	bf00      	nop
 80041d8:	20004638 	.word	0x20004638
 80041dc:	200045e8 	.word	0x200045e8
 80041e0:	20005a9c 	.word	0x20005a9c
 80041e4:	20003210 	.word	0x20003210
 80041e8:	200000ec 	.word	0x200000ec
 80041ec:	200045f0 	.word	0x200045f0
 80041f0:	200045ec 	.word	0x200045ec
 80041f4:	200020b8 	.word	0x200020b8
 80041f8:	20004580 	.word	0x20004580
 80041fc:	20001098 	.word	0x20001098

08004200 <Read_Walls>:
			visited_squares[i][j] = FALSE;
		}
	}
}

void Read_Walls() {
 8004200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

if (visited_squares[x_coord][y_coord] == TRUE) {
 8004204:	4e81      	ldr	r6, [pc, #516]	; (800440c <Read_Walls+0x20c>)
 8004206:	4d82      	ldr	r5, [pc, #520]	; (8004410 <Read_Walls+0x210>)
 8004208:	6832      	ldr	r2, [r6, #0]
 800420a:	682b      	ldr	r3, [r5, #0]
 800420c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8004210:	4a80      	ldr	r2, [pc, #512]	; (8004414 <Read_Walls+0x214>)
 8004212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004216:	2b01      	cmp	r3, #1
 8004218:	f000 80f5 	beq.w	8004406 <Read_Walls+0x206>
	return;
}

front_l = 0;
 800421c:	2300      	movs	r3, #0
 800421e:	4a7e      	ldr	r2, [pc, #504]	; (8004418 <Read_Walls+0x218>)
front_r = 0;
lf_side = 0;
 8004220:	497e      	ldr	r1, [pc, #504]	; (800441c <Read_Walls+0x21c>)
rf_side = 0;
 8004222:	f04f 0932 	mov.w	r9, #50	; 0x32
if (visited_squares[x_coord][y_coord] == TRUE) {
	return;
}

front_l = 0;
front_r = 0;
 8004226:	4f7e      	ldr	r7, [pc, #504]	; (8004420 <Read_Walls+0x220>)
 8004228:	4690      	mov	r8, r2
lf_side = 0;
 800422a:	600b      	str	r3, [r1, #0]
rf_side = 0;

for (int i = 0; i < WALL_SAMPLES; i++) {
	Get_IR(FALSE, FALSE, FALSE, FALSE);
	front_l = front_l + dif_l;
 800422c:	4c7d      	ldr	r4, [pc, #500]	; (8004424 <Read_Walls+0x224>)
}

front_l = 0;
front_r = 0;
lf_side = 0;
rf_side = 0;
 800422e:	497e      	ldr	r1, [pc, #504]	; (8004428 <Read_Walls+0x228>)

if (visited_squares[x_coord][y_coord] == TRUE) {
	return;
}

front_l = 0;
 8004230:	6013      	str	r3, [r2, #0]
front_r = 0;
 8004232:	603b      	str	r3, [r7, #0]
lf_side = 0;
rf_side = 0;
 8004234:	600b      	str	r3, [r1, #0]

for (int i = 0; i < WALL_SAMPLES; i++) {
	Get_IR(FALSE, FALSE, FALSE, FALSE);
 8004236:	2300      	movs	r3, #0
 8004238:	461a      	mov	r2, r3
 800423a:	4619      	mov	r1, r3
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff fe7d 	bl	8003f3c <Get_IR>
	front_l = front_l + dif_l;
 8004242:	f8d8 2000 	ldr.w	r2, [r8]
 8004246:	6823      	ldr	r3, [r4, #0]
front_l = 0;
front_r = 0;
lf_side = 0;
rf_side = 0;

for (int i = 0; i < WALL_SAMPLES; i++) {
 8004248:	f1b9 0901 	subs.w	r9, r9, #1
	Get_IR(FALSE, FALSE, FALSE, FALSE);
	front_l = front_l + dif_l;
	front_r = front_r + dif_r;
 800424c:	6838      	ldr	r0, [r7, #0]
lf_side = 0;
rf_side = 0;

for (int i = 0; i < WALL_SAMPLES; i++) {
	Get_IR(FALSE, FALSE, FALSE, FALSE);
	front_l = front_l + dif_l;
 800424e:	eb02 0a03 	add.w	sl, r2, r3
	front_r = front_r + dif_r;
 8004252:	4b76      	ldr	r3, [pc, #472]	; (800442c <Read_Walls+0x22c>)
	lf_side = lf_side + dif_lf;
 8004254:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 800441c <Read_Walls+0x21c>
rf_side = 0;

for (int i = 0; i < WALL_SAMPLES; i++) {
	Get_IR(FALSE, FALSE, FALSE, FALSE);
	front_l = front_l + dif_l;
	front_r = front_r + dif_r;
 8004258:	681b      	ldr	r3, [r3, #0]
	lf_side = lf_side + dif_lf;
 800425a:	4a75      	ldr	r2, [pc, #468]	; (8004430 <Read_Walls+0x230>)
rf_side = 0;

for (int i = 0; i < WALL_SAMPLES; i++) {
	Get_IR(FALSE, FALSE, FALSE, FALSE);
	front_l = front_l + dif_l;
	front_r = front_r + dif_r;
 800425c:	4418      	add	r0, r3
	lf_side = lf_side + dif_lf;
	rf_side = rf_side + dif_rf;
 800425e:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 8004428 <Read_Walls+0x228>

for (int i = 0; i < WALL_SAMPLES; i++) {
	Get_IR(FALSE, FALSE, FALSE, FALSE);
	front_l = front_l + dif_l;
	front_r = front_r + dif_r;
	lf_side = lf_side + dif_lf;
 8004262:	f8dc 3000 	ldr.w	r3, [ip]
 8004266:	6812      	ldr	r2, [r2, #0]
	rf_side = rf_side + dif_rf;
 8004268:	4972      	ldr	r1, [pc, #456]	; (8004434 <Read_Walls+0x234>)

for (int i = 0; i < WALL_SAMPLES; i++) {
	Get_IR(FALSE, FALSE, FALSE, FALSE);
	front_l = front_l + dif_l;
	front_r = front_r + dif_r;
	lf_side = lf_side + dif_lf;
 800426a:	441a      	add	r2, r3
	rf_side = rf_side + dif_rf;
 800426c:	f8de 3000 	ldr.w	r3, [lr]
 8004270:	6809      	ldr	r1, [r1, #0]
lf_side = 0;
rf_side = 0;

for (int i = 0; i < WALL_SAMPLES; i++) {
	Get_IR(FALSE, FALSE, FALSE, FALSE);
	front_l = front_l + dif_l;
 8004272:	f8c8 a000 	str.w	sl, [r8]
	front_r = front_r + dif_r;
	lf_side = lf_side + dif_lf;
	rf_side = rf_side + dif_rf;
 8004276:	4419      	add	r1, r3
rf_side = 0;

for (int i = 0; i < WALL_SAMPLES; i++) {
	Get_IR(FALSE, FALSE, FALSE, FALSE);
	front_l = front_l + dif_l;
	front_r = front_r + dif_r;
 8004278:	6038      	str	r0, [r7, #0]
	lf_side = lf_side + dif_lf;
 800427a:	f8cc 2000 	str.w	r2, [ip]
	rf_side = rf_side + dif_rf;
 800427e:	f8ce 1000 	str.w	r1, [lr]
front_l = 0;
front_r = 0;
lf_side = 0;
rf_side = 0;

for (int i = 0; i < WALL_SAMPLES; i++) {
 8004282:	d1d8      	bne.n	8004236 <Read_Walls+0x36>
	front_r = front_r + dif_r;
	lf_side = lf_side + dif_lf;
	rf_side = rf_side + dif_rf;
}

front_l = front_l/WALL_SAMPLES;
 8004284:	2332      	movs	r3, #50	; 0x32
 8004286:	4f64      	ldr	r7, [pc, #400]	; (8004418 <Read_Walls+0x218>)
 8004288:	fb9a f4f3 	sdiv	r4, sl, r3
front_r = front_r/WALL_SAMPLES;
 800428c:	fb90 f0f3 	sdiv	r0, r0, r3
lf_side = lf_side/WALL_SAMPLES;
 8004290:	fb92 f2f3 	sdiv	r2, r2, r3
rf_side = rf_side/WALL_SAMPLES;
 8004294:	fb91 f1f3 	sdiv	r1, r1, r3

switch(cur_dir) {
 8004298:	4b67      	ldr	r3, [pc, #412]	; (8004438 <Read_Walls+0x238>)
	front_r = front_r + dif_r;
	lf_side = lf_side + dif_lf;
	rf_side = rf_side + dif_rf;
}

front_l = front_l/WALL_SAMPLES;
 800429a:	603c      	str	r4, [r7, #0]
front_r = front_r/WALL_SAMPLES;
lf_side = lf_side/WALL_SAMPLES;
rf_side = rf_side/WALL_SAMPLES;

switch(cur_dir) {
 800429c:	681b      	ldr	r3, [r3, #0]
	lf_side = lf_side + dif_lf;
	rf_side = rf_side + dif_rf;
}

front_l = front_l/WALL_SAMPLES;
front_r = front_r/WALL_SAMPLES;
 800429e:	4f60      	ldr	r7, [pc, #384]	; (8004420 <Read_Walls+0x220>)
lf_side = lf_side/WALL_SAMPLES;
 80042a0:	f8cc 2000 	str.w	r2, [ip]
	lf_side = lf_side + dif_lf;
	rf_side = rf_side + dif_rf;
}

front_l = front_l/WALL_SAMPLES;
front_r = front_r/WALL_SAMPLES;
 80042a4:	6038      	str	r0, [r7, #0]
lf_side = lf_side/WALL_SAMPLES;
rf_side = rf_side/WALL_SAMPLES;
 80042a6:	f8ce 1000 	str.w	r1, [lr]

switch(cur_dir) {
 80042aa:	2b03      	cmp	r3, #3
 80042ac:	f200 80ab 	bhi.w	8004406 <Read_Walls+0x206>
 80042b0:	e8df f003 	tbb	[pc, r3]
 80042b4:	7f532902 	.word	0x7f532902

case NORTH: //facing up
	if (y_coord > 0 && (front_l >= FRONT_THRESHOLD || front_r >= FRONT_THRESHOLD)) { //front sensor
 80042b8:	682d      	ldr	r5, [r5, #0]
 80042ba:	b175      	cbz	r5, 80042da <Read_Walls+0xda>
 80042bc:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
 80042c0:	da02      	bge.n	80042c8 <Read_Walls+0xc8>
 80042c2:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 80042c6:	db08      	blt.n	80042da <Read_Walls+0xda>
		horiz_walls[x_coord][y_coord - 1] = 1; //up wall
 80042c8:	6833      	ldr	r3, [r6, #0]
 80042ca:	485c      	ldr	r0, [pc, #368]	; (800443c <Read_Walls+0x23c>)
 80042cc:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80042d0:	4403      	add	r3, r0
 80042d2:	2001      	movs	r0, #1
 80042d4:	442b      	add	r3, r5
 80042d6:	f803 0c01 	strb.w	r0, [r3, #-1]
	}
	if (x_coord < X_MAZE_SIZE - 1 && rf_side >= RIGHT_THRESHOLD) { //right sensor
 80042da:	6833      	ldr	r3, [r6, #0]
 80042dc:	2b0e      	cmp	r3, #14
 80042de:	d904      	bls.n	80042ea <Read_Walls+0xea>
		vert_walls[x_coord][y_coord] = 1; //right wall
	}
	if (x_coord > 0 && lf_side >= LEFT_THRESHOLD) {  //left sensor
 80042e0:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 80042e4:	da0d      	bge.n	8004302 <Read_Walls+0x102>
 80042e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

case NORTH: //facing up
	if (y_coord > 0 && (front_l >= FRONT_THRESHOLD || front_r >= FRONT_THRESHOLD)) { //front sensor
		horiz_walls[x_coord][y_coord - 1] = 1; //up wall
	}
	if (x_coord < X_MAZE_SIZE - 1 && rf_side >= RIGHT_THRESHOLD) { //right sensor
 80042ea:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
		vert_walls[x_coord][y_coord] = 1; //right wall
 80042ee:	bfa1      	itttt	ge
 80042f0:	4953      	ldrge	r1, [pc, #332]	; (8004440 <Read_Walls+0x240>)
 80042f2:	2001      	movge	r0, #1
 80042f4:	eb01 1103 	addge.w	r1, r1, r3, lsl #4
 80042f8:	5548      	strbge	r0, [r1, r5]
	}
	if (x_coord > 0 && lf_side >= LEFT_THRESHOLD) {  //left sensor
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 8083 	beq.w	8004406 <Read_Walls+0x206>
 8004300:	e7ee      	b.n	80042e0 <Read_Walls+0xe0>
		vert_walls[x_coord - 1][y_coord] = 1; //left wall
 8004302:	3b01      	subs	r3, #1
 8004304:	e022      	b.n	800434c <Read_Walls+0x14c>
	}
	break;

case SOUTH: //facing down
	if (y_coord < Y_MAZE_SIZE - 1 && (front_l >= FRONT_THRESHOLD || front_r >= FRONT_THRESHOLD)) {  //front sensor
 8004306:	682d      	ldr	r5, [r5, #0]
 8004308:	2d0e      	cmp	r5, #14
 800430a:	d80c      	bhi.n	8004326 <Read_Walls+0x126>
 800430c:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
 8004310:	da02      	bge.n	8004318 <Read_Walls+0x118>
 8004312:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 8004316:	db06      	blt.n	8004326 <Read_Walls+0x126>
		horiz_walls[x_coord][y_coord] = 1; //down_wall
 8004318:	6833      	ldr	r3, [r6, #0]
 800431a:	4848      	ldr	r0, [pc, #288]	; (800443c <Read_Walls+0x23c>)
 800431c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8004320:	4403      	add	r3, r0
 8004322:	2001      	movs	r0, #1
 8004324:	5558      	strb	r0, [r3, r5]
		}
	if (x_coord > 0 && rf_side >= RIGHT_THRESHOLD) {  //right sensor
 8004326:	6833      	ldr	r3, [r6, #0]
 8004328:	b923      	cbnz	r3, 8004334 <Read_Walls+0x134>
		vert_walls[x_coord - 1][y_coord] = 1; //left wall
	}
	if (x_coord < X_MAZE_SIZE - 1 && lf_side >= LEFT_THRESHOLD) { //left sensor
 800432a:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 800432e:	da0d      	bge.n	800434c <Read_Walls+0x14c>
 8004330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

case SOUTH: //facing down
	if (y_coord < Y_MAZE_SIZE - 1 && (front_l >= FRONT_THRESHOLD || front_r >= FRONT_THRESHOLD)) {  //front sensor
		horiz_walls[x_coord][y_coord] = 1; //down_wall
		}
	if (x_coord > 0 && rf_side >= RIGHT_THRESHOLD) {  //right sensor
 8004334:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
 8004338:	db05      	blt.n	8004346 <Read_Walls+0x146>
		vert_walls[x_coord - 1][y_coord] = 1; //left wall
 800433a:	4841      	ldr	r0, [pc, #260]	; (8004440 <Read_Walls+0x240>)
 800433c:	1e59      	subs	r1, r3, #1
 800433e:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8004342:	2001      	movs	r0, #1
 8004344:	5548      	strb	r0, [r1, r5]
	}
	if (x_coord < X_MAZE_SIZE - 1 && lf_side >= LEFT_THRESHOLD) { //left sensor
 8004346:	2b0e      	cmp	r3, #14
 8004348:	d85d      	bhi.n	8004406 <Read_Walls+0x206>
 800434a:	e7ee      	b.n	800432a <Read_Walls+0x12a>
		vert_walls[x_coord][y_coord] = 1; //right wall
 800434c:	4a3c      	ldr	r2, [pc, #240]	; (8004440 <Read_Walls+0x240>)
 800434e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8004352:	2201      	movs	r2, #1
 8004354:	555a      	strb	r2, [r3, r5]
 8004356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}
	break;

case WEST: //facing left
	if (x_coord > 0 && (front_l >= FRONT_THRESHOLD || front_r >= FRONT_THRESHOLD)) { //front sensor
 800435a:	6833      	ldr	r3, [r6, #0]
 800435c:	b163      	cbz	r3, 8004378 <Read_Walls+0x178>
 800435e:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
 8004362:	da02      	bge.n	800436a <Read_Walls+0x16a>
 8004364:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 8004368:	db06      	blt.n	8004378 <Read_Walls+0x178>
		vert_walls[x_coord - 1][y_coord] = 1; //left wall
 800436a:	4c35      	ldr	r4, [pc, #212]	; (8004440 <Read_Walls+0x240>)
 800436c:	1e58      	subs	r0, r3, #1
 800436e:	682e      	ldr	r6, [r5, #0]
 8004370:	eb04 1000 	add.w	r0, r4, r0, lsl #4
 8004374:	2401      	movs	r4, #1
 8004376:	5584      	strb	r4, [r0, r6]
	}
	if (y_coord > 0 && rf_side >= RIGHT_THRESHOLD) {  //right sensor
 8004378:	6828      	ldr	r0, [r5, #0]
 800437a:	b920      	cbnz	r0, 8004386 <Read_Walls+0x186>
		horiz_walls[x_coord][y_coord - 1] = 1; //up wall
	}
	if (y_coord < Y_MAZE_SIZE - 1 && lf_side >= LEFT_THRESHOLD) {//left sensor
 800437c:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 8004380:	da0f      	bge.n	80043a2 <Read_Walls+0x1a2>
 8004382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

case WEST: //facing left
	if (x_coord > 0 && (front_l >= FRONT_THRESHOLD || front_r >= FRONT_THRESHOLD)) { //front sensor
		vert_walls[x_coord - 1][y_coord] = 1; //left wall
	}
	if (y_coord > 0 && rf_side >= RIGHT_THRESHOLD) {  //right sensor
 8004386:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
 800438a:	db07      	blt.n	800439c <Read_Walls+0x19c>
		horiz_walls[x_coord][y_coord - 1] = 1; //up wall
 800438c:	4c2b      	ldr	r4, [pc, #172]	; (800443c <Read_Walls+0x23c>)
 800438e:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
 8004392:	4421      	add	r1, r4
 8004394:	2401      	movs	r4, #1
 8004396:	4401      	add	r1, r0
 8004398:	f801 4c01 	strb.w	r4, [r1, #-1]
	}
	if (y_coord < Y_MAZE_SIZE - 1 && lf_side >= LEFT_THRESHOLD) {//left sensor
 800439c:	280e      	cmp	r0, #14
 800439e:	d832      	bhi.n	8004406 <Read_Walls+0x206>
 80043a0:	e7ec      	b.n	800437c <Read_Walls+0x17c>
		horiz_walls[x_coord][y_coord] = 1; //down wall
 80043a2:	4a26      	ldr	r2, [pc, #152]	; (800443c <Read_Walls+0x23c>)
 80043a4:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80043a8:	4413      	add	r3, r2
 80043aa:	2201      	movs	r2, #1
 80043ac:	541a      	strb	r2, [r3, r0]
 80043ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}
	break;

case EAST: //facing right
	if (x_coord < X_MAZE_SIZE - 1 && (front_l >= FRONT_THRESHOLD || front_r >= FRONT_THRESHOLD)) { //front sensor
 80043b2:	6833      	ldr	r3, [r6, #0]
 80043b4:	2b0e      	cmp	r3, #14
 80043b6:	d80b      	bhi.n	80043d0 <Read_Walls+0x1d0>
 80043b8:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
 80043bc:	da02      	bge.n	80043c4 <Read_Walls+0x1c4>
 80043be:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 80043c2:	db05      	blt.n	80043d0 <Read_Walls+0x1d0>
		vert_walls[x_coord][y_coord] = 1; //right wall
 80043c4:	481e      	ldr	r0, [pc, #120]	; (8004440 <Read_Walls+0x240>)
 80043c6:	2601      	movs	r6, #1
 80043c8:	682c      	ldr	r4, [r5, #0]
 80043ca:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 80043ce:	5506      	strb	r6, [r0, r4]
		}
	if (y_coord < Y_MAZE_SIZE - 1 && rf_side >= RIGHT_THRESHOLD) { //right sensor
 80043d0:	6828      	ldr	r0, [r5, #0]
 80043d2:	280e      	cmp	r0, #14
 80043d4:	d904      	bls.n	80043e0 <Read_Walls+0x1e0>
		horiz_walls[x_coord][y_coord] = 1; //down wall
	}
	if (y_coord > 0 && lf_side >= LEFT_THRESHOLD) {  //left sensor
 80043d6:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 80043da:	da0c      	bge.n	80043f6 <Read_Walls+0x1f6>
 80043dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

case EAST: //facing right
	if (x_coord < X_MAZE_SIZE - 1 && (front_l >= FRONT_THRESHOLD || front_r >= FRONT_THRESHOLD)) { //front sensor
		vert_walls[x_coord][y_coord] = 1; //right wall
		}
	if (y_coord < Y_MAZE_SIZE - 1 && rf_side >= RIGHT_THRESHOLD) { //right sensor
 80043e0:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
 80043e4:	db05      	blt.n	80043f2 <Read_Walls+0x1f2>
		horiz_walls[x_coord][y_coord] = 1; //down wall
 80043e6:	4c15      	ldr	r4, [pc, #84]	; (800443c <Read_Walls+0x23c>)
 80043e8:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
 80043ec:	4421      	add	r1, r4
 80043ee:	2401      	movs	r4, #1
 80043f0:	540c      	strb	r4, [r1, r0]
	}
	if (y_coord > 0 && lf_side >= LEFT_THRESHOLD) {  //left sensor
 80043f2:	b140      	cbz	r0, 8004406 <Read_Walls+0x206>
 80043f4:	e7ef      	b.n	80043d6 <Read_Walls+0x1d6>
		horiz_walls[x_coord][y_coord - 1] = 1; //up wall
 80043f6:	4a11      	ldr	r2, [pc, #68]	; (800443c <Read_Walls+0x23c>)
 80043f8:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80043fc:	4413      	add	r3, r2
 80043fe:	2201      	movs	r2, #1
 8004400:	4403      	add	r3, r0
 8004402:	f803 2c01 	strb.w	r2, [r3, #-1]
 8004406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800440a:	bf00      	nop
 800440c:	200044e8 	.word	0x200044e8
 8004410:	20000010 	.word	0x20000010
 8004414:	2000569c 	.word	0x2000569c
 8004418:	2000305c 	.word	0x2000305c
 800441c:	2000338c 	.word	0x2000338c
 8004420:	20003160 	.word	0x20003160
 8004424:	20002048 	.word	0x20002048
 8004428:	200000e8 	.word	0x200000e8
 800442c:	200020a8 	.word	0x200020a8
 8004430:	200044e4 	.word	0x200044e4
 8004434:	2000320c 	.word	0x2000320c
 8004438:	20004394 	.word	0x20004394
 800443c:	200043a4 	.word	0x200043a4
 8004440:	20003068 	.word	0x20003068

08004444 <Stop_IR>:
     Error_Handler();
  }

}

void Stop_IR() {
 8004444:	b508      	push	{r3, lr}

adc_conv = TRUE;
 8004446:	2201      	movs	r2, #1
 8004448:	4b04      	ldr	r3, [pc, #16]	; (800445c <Stop_IR+0x18>)
if(HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 800444a:	4805      	ldr	r0, [pc, #20]	; (8004460 <Stop_IR+0x1c>)

}

void Stop_IR() {

adc_conv = TRUE;
 800444c:	601a      	str	r2, [r3, #0]
if(HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 800444e:	f7fc f8c7 	bl	80005e0 <HAL_ADC_Stop_DMA>
 8004452:	b108      	cbz	r0, 8004458 <Stop_IR+0x14>
  {
     Error_Handler();
 8004454:	f7ff fcdc 	bl	8003e10 <Error_Handler>
 8004458:	bd08      	pop	{r3, pc}
 800445a:	bf00      	nop
 800445c:	200044f0 	.word	0x200044f0
 8004460:	200050b4 	.word	0x200050b4

08004464 <HAL_ADC_ConvCpltCallback>:

}

//ADC interrupt handler. Runs when all four channels have been converted
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* handle)
{
 8004464:	b508      	push	{r3, lr}
	Stop_IR();
 8004466:	f7ff ffed 	bl	8004444 <Stop_IR>
	l = ADC_valbuffer[ADC_VAL_BUFFER_LENGTH - 4];
 800446a:	4b07      	ldr	r3, [pc, #28]	; (8004488 <HAL_ADC_ConvCpltCallback+0x24>)
 800446c:	4a07      	ldr	r2, [pc, #28]	; (800448c <HAL_ADC_ConvCpltCallback+0x28>)
 800446e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004470:	6011      	str	r1, [r2, #0]
	r = ADC_valbuffer[ADC_VAL_BUFFER_LENGTH - 1];
 8004472:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8004474:	4a06      	ldr	r2, [pc, #24]	; (8004490 <HAL_ADC_ConvCpltCallback+0x2c>)
 8004476:	6011      	str	r1, [r2, #0]
	rf = ADC_valbuffer[ADC_VAL_BUFFER_LENGTH - 2];
 8004478:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800447a:	4a06      	ldr	r2, [pc, #24]	; (8004494 <HAL_ADC_ConvCpltCallback+0x30>)
 800447c:	6011      	str	r1, [r2, #0]
	lf = ADC_valbuffer[ADC_VAL_BUFFER_LENGTH - 3];
 800447e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004480:	4b05      	ldr	r3, [pc, #20]	; (8004498 <HAL_ADC_ConvCpltCallback+0x34>)
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	bd08      	pop	{r3, pc}
 8004486:	bf00      	nop
 8004488:	2000561c 	.word	0x2000561c
 800448c:	200010a0 	.word	0x200010a0
 8004490:	200020ac 	.word	0x200020ac
 8004494:	20003328 	.word	0x20003328
 8004498:	20003164 	.word	0x20003164

0800449c <Set_Left>:
}

void Set_Left(int speed, int direction) {

	//when switching directions, PWM polarity switches
	if (direction == FORWARD) {
 800449c:	2901      	cmp	r1, #1
	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	TIM_OC_InitTypeDef tim2config;

	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800449e:	f04f 0200 	mov.w	r2, #0

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	TIM_OC_InitTypeDef tim2config;

	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
 80044a2:	f04f 0360 	mov.w	r3, #96	; 0x60

void Set_Left(int speed, int direction) {

	//when switching directions, PWM polarity switches
	if (direction == FORWARD) {
		speed = 665 - speed;
 80044a6:	bf08      	it	eq
 80044a8:	f5c0 7026 	rsbeq	r0, r0, #664	; 0x298
		cur_move = FWD; //reset to default direction
		next_move = FWD;
	}
}

void Set_Left(int speed, int direction) {
 80044ac:	b510      	push	{r4, lr}

	//when switching directions, PWM polarity switches
	if (direction == FORWARD) {
		speed = 665 - speed;
 80044ae:	bf08      	it	eq
 80044b0:	3001      	addeq	r0, #1
		cur_move = FWD; //reset to default direction
		next_move = FWD;
	}
}

void Set_Left(int speed, int direction) {
 80044b2:	b088      	sub	sp, #32
 80044b4:	460c      	mov	r4, r1
	}

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	TIM_OC_InitTypeDef tim2config;

	tim2config.Pulse = speed;
 80044b6:	9002      	str	r0, [sp, #8]
	tim2config.OCMode = TIM_OCMODE_PWM1;
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
	tim2config.OCFastMode = TIM_OCFAST_DISABLE;
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &tim2config, TIM_CHANNEL_1) != HAL_OK)
 80044b8:	a901      	add	r1, sp, #4
 80044ba:	480a      	ldr	r0, [pc, #40]	; (80044e4 <Set_Left+0x48>)

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	TIM_OC_InitTypeDef tim2config;

	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
 80044bc:	9301      	str	r3, [sp, #4]
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044be:	9203      	str	r2, [sp, #12]
	tim2config.OCFastMode = TIM_OCFAST_DISABLE;
 80044c0:	9205      	str	r2, [sp, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &tim2config, TIM_CHANNEL_1) != HAL_OK)
 80044c2:	f7fe f96f 	bl	80027a4 <HAL_TIM_PWM_ConfigChannel>
 80044c6:	4601      	mov	r1, r0
 80044c8:	b108      	cbz	r0, 80044ce <Set_Left+0x32>
	  {
	     Error_Handler();
 80044ca:	f7ff fca1 	bl	8003e10 <Error_Handler>
	  }

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80044ce:	4805      	ldr	r0, [pc, #20]	; (80044e4 <Set_Left+0x48>)
 80044d0:	f7fe f8fe 	bl	80026d0 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, LDIC_Pin, direction);
 80044d4:	2102      	movs	r1, #2
 80044d6:	b2e2      	uxtb	r2, r4
 80044d8:	4803      	ldr	r0, [pc, #12]	; (80044e8 <Set_Left+0x4c>)
 80044da:	f7fc fe73 	bl	80011c4 <HAL_GPIO_WritePin>

}
 80044de:	b008      	add	sp, #32
 80044e0:	bd10      	pop	{r4, pc}
 80044e2:	bf00      	nop
 80044e4:	20005c54 	.word	0x20005c54
 80044e8:	40020000 	.word	0x40020000

080044ec <Set_Right>:

//when switching directions, PWM polarity switches
void Set_Right(int speed, int direction) {

	if (direction == FORWARD) {
 80044ec:	2901      	cmp	r1, #1
	}

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
	TIM_OC_InitTypeDef tim2config;
	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
 80044ee:	f04f 0360 	mov.w	r3, #96	; 0x60
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
	tim2config.OCFastMode = TIM_OCFAST_DISABLE;

	if (HAL_TIM_PWM_ConfigChannel(&htim2, &tim2config, TIM_CHANNEL_3) != HAL_OK)
 80044f2:	f04f 0208 	mov.w	r2, #8

//when switching directions, PWM polarity switches
void Set_Right(int speed, int direction) {

	if (direction == FORWARD) {
			speed = 665 - speed;
 80044f6:	bf08      	it	eq
 80044f8:	f5c0 7026 	rsbeq	r0, r0, #664	; 0x298
	HAL_GPIO_WritePin(GPIOA, LDIC_Pin, direction);

}

//when switching directions, PWM polarity switches
void Set_Right(int speed, int direction) {
 80044fc:	b510      	push	{r4, lr}
 80044fe:	b088      	sub	sp, #32

	if (direction == FORWARD) {
			speed = 665 - speed;
 8004500:	bf08      	it	eq
 8004502:	3001      	addeq	r0, #1
	HAL_GPIO_WritePin(GPIOA, LDIC_Pin, direction);

}

//when switching directions, PWM polarity switches
void Set_Right(int speed, int direction) {
 8004504:	460c      	mov	r4, r1
	}

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
	TIM_OC_InitTypeDef tim2config;
	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
 8004506:	9301      	str	r3, [sp, #4]
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004508:	2300      	movs	r3, #0
			speed = 665 - speed;
	}

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
	TIM_OC_InitTypeDef tim2config;
	tim2config.Pulse = speed;
 800450a:	9002      	str	r0, [sp, #8]
	tim2config.OCMode = TIM_OCMODE_PWM1;
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
	tim2config.OCFastMode = TIM_OCFAST_DISABLE;

	if (HAL_TIM_PWM_ConfigChannel(&htim2, &tim2config, TIM_CHANNEL_3) != HAL_OK)
 800450c:	a901      	add	r1, sp, #4
 800450e:	4809      	ldr	r0, [pc, #36]	; (8004534 <Set_Right+0x48>)

	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
	TIM_OC_InitTypeDef tim2config;
	tim2config.Pulse = speed;
	tim2config.OCMode = TIM_OCMODE_PWM1;
	tim2config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004510:	9303      	str	r3, [sp, #12]
	tim2config.OCFastMode = TIM_OCFAST_DISABLE;
 8004512:	9305      	str	r3, [sp, #20]

	if (HAL_TIM_PWM_ConfigChannel(&htim2, &tim2config, TIM_CHANNEL_3) != HAL_OK)
 8004514:	f7fe f946 	bl	80027a4 <HAL_TIM_PWM_ConfigChannel>
 8004518:	b108      	cbz	r0, 800451e <Set_Right+0x32>
	{
	   Error_Handler();
 800451a:	f7ff fc79 	bl	8003e10 <Error_Handler>
	}

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800451e:	2108      	movs	r1, #8
 8004520:	4804      	ldr	r0, [pc, #16]	; (8004534 <Set_Right+0x48>)
 8004522:	f7fe f8d5 	bl	80026d0 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, RDIC_Pin, direction);
 8004526:	2108      	movs	r1, #8
 8004528:	b2e2      	uxtb	r2, r4
 800452a:	4803      	ldr	r0, [pc, #12]	; (8004538 <Set_Right+0x4c>)
 800452c:	f7fc fe4a 	bl	80011c4 <HAL_GPIO_WritePin>

}
 8004530:	b008      	add	sp, #32
 8004532:	bd10      	pop	{r4, pc}
 8004534:	20005c54 	.word	0x20005c54
 8004538:	40020000 	.word	0x40020000

0800453c <Forward_Search>:
	HAL_GPIO_WritePin(GPIOD, LED3_Pin, OFF);


}

void Forward_Search() {
 800453c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	if (transition_flag == TRUE) { //if theres a transition sense use this position instead
 800453e:	4e55      	ldr	r6, [pc, #340]	; (8004694 <Forward_Search+0x158>)
 8004540:	4c55      	ldr	r4, [pc, #340]	; (8004698 <Forward_Search+0x15c>)
 8004542:	6833      	ldr	r3, [r6, #0]
 8004544:	2b01      	cmp	r3, #1
		if (fwd_flag == FALSE && (lenc_diff_corr >=  FT_LENC1 || renc_diff_corr >= FT_RENC1)) { //330
 8004546:	6823      	ldr	r3, [r4, #0]

}

void Forward_Search() {

	if (transition_flag == TRUE) { //if theres a transition sense use this position instead
 8004548:	d154      	bne.n	80045f4 <Forward_Search+0xb8>
		if (fwd_flag == FALSE && (lenc_diff_corr >=  FT_LENC1 || renc_diff_corr >= FT_RENC1)) { //330
 800454a:	b9e3      	cbnz	r3, 8004586 <Forward_Search+0x4a>
 800454c:	4b53      	ldr	r3, [pc, #332]	; (800469c <Forward_Search+0x160>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8004554:	d204      	bcs.n	8004560 <Forward_Search+0x24>
 8004556:	4b52      	ldr	r3, [pc, #328]	; (80046a0 <Forward_Search+0x164>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800455e:	d312      	bcc.n	8004586 <Forward_Search+0x4a>

			fwd_flag = TRUE;
 8004560:	2301      	movs	r3, #1
 8004562:	4d50      	ldr	r5, [pc, #320]	; (80046a4 <Forward_Search+0x168>)
 8004564:	6023      	str	r3, [r4, #0]

			if (done_flag == TRUE) {
 8004566:	4b50      	ldr	r3, [pc, #320]	; (80046a8 <Forward_Search+0x16c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d102      	bne.n	8004574 <Forward_Search+0x38>
				//Read_Walls();
				next_move = DEAD;
 800456e:	2303      	movs	r3, #3
 8004570:	602b      	str	r3, [r5, #0]
 8004572:	e006      	b.n	8004582 <Forward_Search+0x46>
			}

			else {
			Read_Walls();
 8004574:	f7ff fe44 	bl	8004200 <Read_Walls>
			next_move = Get_Next_Move();
 8004578:	f7ff fb5a 	bl	8003c30 <Get_Next_Move>
 800457c:	6028      	str	r0, [r5, #0]
			Update_Position();
 800457e:	f7ff fa75 	bl	8003a6c <Update_Position>
			}

			Save_State();
 8004582:	f7fe fe79 	bl	8003278 <Save_State>
		}

		if (fwd_flag == TRUE && (lenc_diff_corr >= FT_LENC2 || renc_diff_corr >= FT_RENC2)) { //620
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	2b01      	cmp	r3, #1
 800458a:	f040 8082 	bne.w	8004692 <Forward_Search+0x156>
 800458e:	4b43      	ldr	r3, [pc, #268]	; (800469c <Forward_Search+0x160>)
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	f240 2339 	movw	r3, #569	; 0x239
 8004596:	429a      	cmp	r2, r3
 8004598:	d803      	bhi.n	80045a2 <Forward_Search+0x66>
 800459a:	4a41      	ldr	r2, [pc, #260]	; (80046a0 <Forward_Search+0x164>)
 800459c:	6812      	ldr	r2, [r2, #0]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d977      	bls.n	8004692 <Forward_Search+0x156>

			fwd_flag = FALSE;
 80045a2:	2500      	movs	r5, #0
			transition_flag = FALSE;

			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, OFF);
 80045a4:	2110      	movs	r1, #16
 80045a6:	4841      	ldr	r0, [pc, #260]	; (80046ac <Forward_Search+0x170>)
 80045a8:	462a      	mov	r2, r5
			Save_State();
		}

		if (fwd_flag == TRUE && (lenc_diff_corr >= FT_LENC2 || renc_diff_corr >= FT_RENC2)) { //620

			fwd_flag = FALSE;
 80045aa:	6025      	str	r5, [r4, #0]
			transition_flag = FALSE;
 80045ac:	6035      	str	r5, [r6, #0]

			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, OFF);
 80045ae:	f7fc fe09 	bl	80011c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, LED3_Pin, OFF);
 80045b2:	462a      	mov	r2, r5
 80045b4:	2108      	movs	r1, #8
 80045b6:	483d      	ldr	r0, [pc, #244]	; (80046ac <Forward_Search+0x170>)
 80045b8:	f7fc fe04 	bl	80011c4 <HAL_GPIO_WritePin>
			//HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);

			prev_l_count = l_count; // Save encoder values
 80045bc:	4b3c      	ldr	r3, [pc, #240]	; (80046b0 <Forward_Search+0x174>)
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	4b3c      	ldr	r3, [pc, #240]	; (80046b4 <Forward_Search+0x178>)
 80045c2:	601a      	str	r2, [r3, #0]
			prev_r_count = r_count;
 80045c4:	4b3c      	ldr	r3, [pc, #240]	; (80046b8 <Forward_Search+0x17c>)
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	4b3c      	ldr	r3, [pc, #240]	; (80046bc <Forward_Search+0x180>)
 80045ca:	601a      	str	r2, [r3, #0]

			switch (next_move) { //check if motor speeds have to change with next move
 80045cc:	4b35      	ldr	r3, [pc, #212]	; (80046a4 <Forward_Search+0x168>)
 80045ce:	681e      	ldr	r6, [r3, #0]
 80045d0:	461c      	mov	r4, r3
 80045d2:	2e01      	cmp	r6, #1
 80045d4:	d008      	beq.n	80045e8 <Forward_Search+0xac>
 80045d6:	2e02      	cmp	r6, #2
 80045d8:	d158      	bne.n	800468c <Forward_Search+0x150>

			case RIGHT:
				Set_Left(RIGHT_L, FORWARD); //need to make right pivot
 80045da:	2101      	movs	r1, #1
 80045dc:	2078      	movs	r0, #120	; 0x78
 80045de:	f7ff ff5d 	bl	800449c <Set_Left>
				Set_Right(RIGHT_R, FORWARD);
 80045e2:	2101      	movs	r1, #1
 80045e4:	4628      	mov	r0, r5
 80045e6:	e04f      	b.n	8004688 <Forward_Search+0x14c>
				break;

			case LEFT:
				Set_Left(LEFT_L, FORWARD); //need to make left pivot
 80045e8:	4631      	mov	r1, r6
 80045ea:	4628      	mov	r0, r5
 80045ec:	f7ff ff56 	bl	800449c <Set_Left>
				Set_Right(LEFT_R, FORWARD);
 80045f0:	4631      	mov	r1, r6
 80045f2:	e048      	b.n	8004686 <Forward_Search+0x14a>
		}
	}

	else { //if theres no transition sensed, then just use absolute position

	if (fwd_flag == FALSE && (lenc_diff >= F_LENC1 || renc_diff >= F_RENC1))
 80045f4:	b9e3      	cbnz	r3, 8004630 <Forward_Search+0xf4>
 80045f6:	4b32      	ldr	r3, [pc, #200]	; (80046c0 <Forward_Search+0x184>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80045fe:	d204      	bcs.n	800460a <Forward_Search+0xce>
 8004600:	4b30      	ldr	r3, [pc, #192]	; (80046c4 <Forward_Search+0x188>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004608:	d312      	bcc.n	8004630 <Forward_Search+0xf4>
	{
		fwd_flag = TRUE;
 800460a:	2301      	movs	r3, #1
 800460c:	4d25      	ldr	r5, [pc, #148]	; (80046a4 <Forward_Search+0x168>)
 800460e:	6023      	str	r3, [r4, #0]

		if (done_flag == TRUE) {
 8004610:	4b25      	ldr	r3, [pc, #148]	; (80046a8 <Forward_Search+0x16c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d102      	bne.n	800461e <Forward_Search+0xe2>
		next_move = DEAD;
 8004618:	2303      	movs	r3, #3
 800461a:	602b      	str	r3, [r5, #0]
 800461c:	e006      	b.n	800462c <Forward_Search+0xf0>
		}

		else {
		Read_Walls();
 800461e:	f7ff fdef 	bl	8004200 <Read_Walls>
		next_move = Get_Next_Move();
 8004622:	f7ff fb05 	bl	8003c30 <Get_Next_Move>
 8004626:	6028      	str	r0, [r5, #0]
		Update_Position();
 8004628:	f7ff fa20 	bl	8003a6c <Update_Position>
		}

		Save_State();
 800462c:	f7fe fe24 	bl	8003278 <Save_State>
	}

	if (fwd_flag == TRUE && (lenc_diff >= F_LENC2 || renc_diff >= F_RENC2))
 8004630:	6823      	ldr	r3, [r4, #0]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d12d      	bne.n	8004692 <Forward_Search+0x156>
 8004636:	4b22      	ldr	r3, [pc, #136]	; (80046c0 <Forward_Search+0x184>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f5b3 7f2e 	cmp.w	r3, #696	; 0x2b8
 800463e:	d204      	bcs.n	800464a <Forward_Search+0x10e>
 8004640:	4b20      	ldr	r3, [pc, #128]	; (80046c4 <Forward_Search+0x188>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f5b3 7f2e 	cmp.w	r3, #696	; 0x2b8
 8004648:	d323      	bcc.n	8004692 <Forward_Search+0x156>
	{ //left and right wheel moving at same speed. If statement checks if distance has been covered

		//HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);

		prev_l_count = l_count; //no change. keep going straight. Save encoder values
 800464a:	4b19      	ldr	r3, [pc, #100]	; (80046b0 <Forward_Search+0x174>)
		prev_r_count = r_count;
		fwd_flag = FALSE;
 800464c:	2700      	movs	r7, #0
	if (fwd_flag == TRUE && (lenc_diff >= F_LENC2 || renc_diff >= F_RENC2))
	{ //left and right wheel moving at same speed. If statement checks if distance has been covered

		//HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);

		prev_l_count = l_count; //no change. keep going straight. Save encoder values
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	4b18      	ldr	r3, [pc, #96]	; (80046b4 <Forward_Search+0x178>)
		prev_r_count = r_count;
		fwd_flag = FALSE;
 8004652:	6027      	str	r7, [r4, #0]
	if (fwd_flag == TRUE && (lenc_diff >= F_LENC2 || renc_diff >= F_RENC2))
	{ //left and right wheel moving at same speed. If statement checks if distance has been covered

		//HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);

		prev_l_count = l_count; //no change. keep going straight. Save encoder values
 8004654:	601a      	str	r2, [r3, #0]
		prev_r_count = r_count;
 8004656:	4b18      	ldr	r3, [pc, #96]	; (80046b8 <Forward_Search+0x17c>)
		fwd_flag = FALSE;
		transition_flag = FALSE;
 8004658:	6037      	str	r7, [r6, #0]
	{ //left and right wheel moving at same speed. If statement checks if distance has been covered

		//HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);

		prev_l_count = l_count; //no change. keep going straight. Save encoder values
		prev_r_count = r_count;
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	4b17      	ldr	r3, [pc, #92]	; (80046bc <Forward_Search+0x180>)
 800465e:	601a      	str	r2, [r3, #0]
		fwd_flag = FALSE;
		transition_flag = FALSE;

		switch (next_move) { //check if motor speeds have to change with next move
 8004660:	4b10      	ldr	r3, [pc, #64]	; (80046a4 <Forward_Search+0x168>)
 8004662:	681d      	ldr	r5, [r3, #0]
 8004664:	461c      	mov	r4, r3
 8004666:	2d01      	cmp	r5, #1
 8004668:	d008      	beq.n	800467c <Forward_Search+0x140>
 800466a:	2d02      	cmp	r5, #2
 800466c:	d10e      	bne.n	800468c <Forward_Search+0x150>
		case FWD:
			break;

		case RIGHT:
			Set_Left(RIGHT_L, FORWARD); //need to make right pivot
 800466e:	2101      	movs	r1, #1
 8004670:	2078      	movs	r0, #120	; 0x78
 8004672:	f7ff ff13 	bl	800449c <Set_Left>
			Set_Right(RIGHT_R, FORWARD);
 8004676:	2101      	movs	r1, #1
 8004678:	4638      	mov	r0, r7
 800467a:	e005      	b.n	8004688 <Forward_Search+0x14c>
			break;

		case LEFT:
		    Set_Left(LEFT_L, FORWARD); //need to make left pivot
 800467c:	4629      	mov	r1, r5
 800467e:	4638      	mov	r0, r7
 8004680:	f7ff ff0c 	bl	800449c <Set_Left>
		    Set_Right(LEFT_R, FORWARD);
 8004684:	4629      	mov	r1, r5
 8004686:	2087      	movs	r0, #135	; 0x87
 8004688:	f7ff ff30 	bl	80044ec <Set_Right>
		    break;

		case DEAD:
		    break;
		}
		cur_move = next_move; //execute next move
 800468c:	6822      	ldr	r2, [r4, #0]
 800468e:	4b0e      	ldr	r3, [pc, #56]	; (80046c8 <Forward_Search+0x18c>)
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004694:	200020a4 	.word	0x200020a4
 8004698:	20003388 	.word	0x20003388
 800469c:	20003214 	.word	0x20003214
 80046a0:	20003384 	.word	0x20003384
 80046a4:	2000337c 	.word	0x2000337c
 80046a8:	200043a0 	.word	0x200043a0
 80046ac:	40020c00 	.word	0x40020c00
 80046b0:	200000ec 	.word	0x200000ec
 80046b4:	200045ec 	.word	0x200045ec
 80046b8:	20003210 	.word	0x20003210
 80046bc:	20004580 	.word	0x20004580
 80046c0:	200020b8 	.word	0x200020b8
 80046c4:	20001098 	.word	0x20001098
 80046c8:	200000f4 	.word	0x200000f4

080046cc <Left_Search>:

	Set_Left(0, FORWARD);
	Set_Right(0, FORWARD);
}

void Left_Search() {
 80046cc:	b570      	push	{r4, r5, r6, lr}

	if (l_turnflag == ARRIVE && renc_diff >= LT_RENC_1) { //finished making turn. left and right wheel don't travel at same speeds
 80046ce:	4c38      	ldr	r4, [pc, #224]	; (80047b0 <Left_Search+0xe4>)
 80046d0:	6825      	ldr	r5, [r4, #0]
 80046d2:	b9dd      	cbnz	r5, 800470c <Left_Search+0x40>
 80046d4:	4e37      	ldr	r6, [pc, #220]	; (80047b4 <Left_Search+0xe8>)
 80046d6:	6833      	ldr	r3, [r6, #0]
 80046d8:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80046dc:	d316      	bcc.n	800470c <Left_Search+0x40>

		Set_Left(FWD_L, FORWARD); //finish turn by accelerating forward
 80046de:	2101      	movs	r1, #1
 80046e0:	2078      	movs	r0, #120	; 0x78
 80046e2:	f7ff fedb 	bl	800449c <Set_Left>
		Set_Right(FWD_R, FORWARD);
 80046e6:	2101      	movs	r1, #1
 80046e8:	2089      	movs	r0, #137	; 0x89
 80046ea:	f7ff feff 	bl	80044ec <Set_Right>


		l_turnflag = PEEK;
 80046ee:	2301      	movs	r3, #1
		prev_l_count = l_count; //save current counters
		prev_r_count = r_count;
		lenc_diff = 0;
		renc_diff = 0;
 80046f0:	6035      	str	r5, [r6, #0]

		Set_Left(FWD_L, FORWARD); //finish turn by accelerating forward
		Set_Right(FWD_R, FORWARD);


		l_turnflag = PEEK;
 80046f2:	6023      	str	r3, [r4, #0]
		prev_l_count = l_count; //save current counters
 80046f4:	4b30      	ldr	r3, [pc, #192]	; (80047b8 <Left_Search+0xec>)
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	4b30      	ldr	r3, [pc, #192]	; (80047bc <Left_Search+0xf0>)
 80046fa:	601a      	str	r2, [r3, #0]
		prev_r_count = r_count;
 80046fc:	4b30      	ldr	r3, [pc, #192]	; (80047c0 <Left_Search+0xf4>)
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	4b30      	ldr	r3, [pc, #192]	; (80047c4 <Left_Search+0xf8>)
 8004702:	601a      	str	r2, [r3, #0]
		lenc_diff = 0;
 8004704:	4b30      	ldr	r3, [pc, #192]	; (80047c8 <Left_Search+0xfc>)
 8004706:	601d      	str	r5, [r3, #0]
		renc_diff = 0;

		Save_State();
 8004708:	f7fe fdb6 	bl	8003278 <Save_State>
	}

	if ((l_turnflag == PEEK) && (lenc_diff >= LT_LENC_2*2/3 || renc_diff >= LT_RENC_2*2/3)) {
 800470c:	6823      	ldr	r3, [r4, #0]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d11a      	bne.n	8004748 <Left_Search+0x7c>
 8004712:	4b2d      	ldr	r3, [pc, #180]	; (80047c8 <Left_Search+0xfc>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800471a:	d204      	bcs.n	8004726 <Left_Search+0x5a>
 800471c:	4b25      	ldr	r3, [pc, #148]	; (80047b4 <Left_Search+0xe8>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004724:	d310      	bcc.n	8004748 <Left_Search+0x7c>

		if (done_flag == TRUE) {
 8004726:	4b29      	ldr	r3, [pc, #164]	; (80047cc <Left_Search+0x100>)
 8004728:	4d29      	ldr	r5, [pc, #164]	; (80047d0 <Left_Search+0x104>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d102      	bne.n	8004736 <Left_Search+0x6a>
			//Read_Walls();
			next_move = DEAD;
 8004730:	2303      	movs	r3, #3
 8004732:	602b      	str	r3, [r5, #0]
 8004734:	e006      	b.n	8004744 <Left_Search+0x78>
		}

		else {
			Read_Walls();
 8004736:	f7ff fd63 	bl	8004200 <Read_Walls>
			next_move = Get_Next_Move();
 800473a:	f7ff fa79 	bl	8003c30 <Get_Next_Move>
 800473e:	6028      	str	r0, [r5, #0]
			Update_Position();
 8004740:	f7ff f994 	bl	8003a6c <Update_Position>
		}
		l_turnflag = EXECUTE;
 8004744:	2302      	movs	r3, #2
 8004746:	6023      	str	r3, [r4, #0]
	}

	if ((l_turnflag == EXECUTE) && (lenc_diff >= LT_LENC_2 || renc_diff >= LT_RENC_2)) { //made it to same point
 8004748:	6823      	ldr	r3, [r4, #0]
 800474a:	2b02      	cmp	r3, #2
 800474c:	d12e      	bne.n	80047ac <Left_Search+0xe0>
 800474e:	4b1e      	ldr	r3, [pc, #120]	; (80047c8 <Left_Search+0xfc>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 8004756:	d204      	bcs.n	8004762 <Left_Search+0x96>
 8004758:	4b16      	ldr	r3, [pc, #88]	; (80047b4 <Left_Search+0xe8>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 8004760:	d324      	bcc.n	80047ac <Left_Search+0xe0>

		l_turnflag = ARRIVE;
 8004762:	2600      	movs	r6, #0
 8004764:	6026      	str	r6, [r4, #0]
		//HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
		Save_State();
 8004766:	f7fe fd87 	bl	8003278 <Save_State>
		prev_l_count = l_count; //save current counters
 800476a:	4b13      	ldr	r3, [pc, #76]	; (80047b8 <Left_Search+0xec>)
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	4b13      	ldr	r3, [pc, #76]	; (80047bc <Left_Search+0xf0>)
 8004770:	601a      	str	r2, [r3, #0]
		prev_r_count = r_count;
 8004772:	4b13      	ldr	r3, [pc, #76]	; (80047c0 <Left_Search+0xf4>)
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	4b13      	ldr	r3, [pc, #76]	; (80047c4 <Left_Search+0xf8>)
 8004778:	601a      	str	r2, [r3, #0]

		switch (next_move) { //need to change direction or nah
 800477a:	4b15      	ldr	r3, [pc, #84]	; (80047d0 <Left_Search+0x104>)
 800477c:	681d      	ldr	r5, [r3, #0]
 800477e:	461c      	mov	r4, r3
 8004780:	2d01      	cmp	r5, #1
 8004782:	d008      	beq.n	8004796 <Left_Search+0xca>
 8004784:	2d02      	cmp	r5, #2
 8004786:	d10e      	bne.n	80047a6 <Left_Search+0xda>
			Set_Left(LEFT_L, FORWARD); //need to make right turn again
			Set_Right(LEFT_R, FORWARD);
			break;

		case RIGHT:
			Set_Left(RIGHT_L, FORWARD); //need to make right turn again
 8004788:	2101      	movs	r1, #1
 800478a:	2078      	movs	r0, #120	; 0x78
 800478c:	f7ff fe86 	bl	800449c <Set_Left>
			Set_Right(RIGHT_R, FORWARD);
 8004790:	2101      	movs	r1, #1
 8004792:	4630      	mov	r0, r6
 8004794:	e005      	b.n	80047a2 <Left_Search+0xd6>
		prev_r_count = r_count;

		switch (next_move) { //need to change direction or nah

		case LEFT:
			Set_Left(LEFT_L, FORWARD); //need to make right turn again
 8004796:	4629      	mov	r1, r5
 8004798:	4630      	mov	r0, r6
 800479a:	f7ff fe7f 	bl	800449c <Set_Left>
			Set_Right(LEFT_R, FORWARD);
 800479e:	4629      	mov	r1, r5
 80047a0:	2087      	movs	r0, #135	; 0x87
			break;

		case RIGHT:
			Set_Left(RIGHT_L, FORWARD); //need to make right turn again
			Set_Right(RIGHT_R, FORWARD);
 80047a2:	f7ff fea3 	bl	80044ec <Set_Right>
			break;

		}
		cur_move = next_move;
 80047a6:	6822      	ldr	r2, [r4, #0]
 80047a8:	4b0a      	ldr	r3, [pc, #40]	; (80047d4 <Left_Search+0x108>)
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	bd70      	pop	{r4, r5, r6, pc}
 80047ae:	bf00      	nop
 80047b0:	2000109c 	.word	0x2000109c
 80047b4:	20001098 	.word	0x20001098
 80047b8:	200000ec 	.word	0x200000ec
 80047bc:	200045ec 	.word	0x200045ec
 80047c0:	20003210 	.word	0x20003210
 80047c4:	20004580 	.word	0x20004580
 80047c8:	200020b8 	.word	0x200020b8
 80047cc:	200043a0 	.word	0x200043a0
 80047d0:	2000337c 	.word	0x2000337c
 80047d4:	200000f4 	.word	0x200000f4

080047d8 <Right_Search>:

}



void Right_Search() {
 80047d8:	b570      	push	{r4, r5, r6, lr}

	if (r_turnflag == ARRIVE && lenc_diff >= RT_LENC_1) { //finished making turn. left and right wheel don't travel at same speeds
 80047da:	4c37      	ldr	r4, [pc, #220]	; (80048b8 <Right_Search+0xe0>)
 80047dc:	6825      	ldr	r5, [r4, #0]
 80047de:	b9dd      	cbnz	r5, 8004818 <Right_Search+0x40>
 80047e0:	4e36      	ldr	r6, [pc, #216]	; (80048bc <Right_Search+0xe4>)
 80047e2:	6833      	ldr	r3, [r6, #0]
 80047e4:	f5b3 7fe3 	cmp.w	r3, #454	; 0x1c6
 80047e8:	d916      	bls.n	8004818 <Right_Search+0x40>


		Set_Left(FWD_L, FORWARD); //finish turn by accelerating forward
 80047ea:	2101      	movs	r1, #1
 80047ec:	2078      	movs	r0, #120	; 0x78
 80047ee:	f7ff fe55 	bl	800449c <Set_Left>
		Set_Right(FWD_R, FORWARD);
 80047f2:	2101      	movs	r1, #1
 80047f4:	2089      	movs	r0, #137	; 0x89
 80047f6:	f7ff fe79 	bl	80044ec <Set_Right>

		r_turnflag = PEEK;
 80047fa:	2301      	movs	r3, #1
		prev_l_count = l_count; //save current counters
		prev_r_count = r_count;
		lenc_diff = 0;
 80047fc:	6035      	str	r5, [r6, #0]


		Set_Left(FWD_L, FORWARD); //finish turn by accelerating forward
		Set_Right(FWD_R, FORWARD);

		r_turnflag = PEEK;
 80047fe:	6023      	str	r3, [r4, #0]
		prev_l_count = l_count; //save current counters
 8004800:	4b2f      	ldr	r3, [pc, #188]	; (80048c0 <Right_Search+0xe8>)
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	4b2f      	ldr	r3, [pc, #188]	; (80048c4 <Right_Search+0xec>)
 8004806:	601a      	str	r2, [r3, #0]
		prev_r_count = r_count;
 8004808:	4b2f      	ldr	r3, [pc, #188]	; (80048c8 <Right_Search+0xf0>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	4b2f      	ldr	r3, [pc, #188]	; (80048cc <Right_Search+0xf4>)
 800480e:	601a      	str	r2, [r3, #0]
		lenc_diff = 0;
		renc_diff = 0;
 8004810:	4b2f      	ldr	r3, [pc, #188]	; (80048d0 <Right_Search+0xf8>)
 8004812:	601d      	str	r5, [r3, #0]

		Save_State();
 8004814:	f7fe fd30 	bl	8003278 <Save_State>
	}

	if ((r_turnflag == PEEK) && (lenc_diff >= RT_LENC_2*2/3 || renc_diff >= RT_RENC_2*2/3)) {
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d11a      	bne.n	8004854 <Right_Search+0x7c>
 800481e:	4b27      	ldr	r3, [pc, #156]	; (80048bc <Right_Search+0xe4>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004826:	d204      	bcs.n	8004832 <Right_Search+0x5a>
 8004828:	4b29      	ldr	r3, [pc, #164]	; (80048d0 <Right_Search+0xf8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004830:	d310      	bcc.n	8004854 <Right_Search+0x7c>
		if (done_flag == TRUE) {
 8004832:	4b28      	ldr	r3, [pc, #160]	; (80048d4 <Right_Search+0xfc>)
 8004834:	4d28      	ldr	r5, [pc, #160]	; (80048d8 <Right_Search+0x100>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d102      	bne.n	8004842 <Right_Search+0x6a>
			next_move = DEAD;
 800483c:	2303      	movs	r3, #3
 800483e:	602b      	str	r3, [r5, #0]
 8004840:	e006      	b.n	8004850 <Right_Search+0x78>
			//Read_Walls();
		}
		else {
			Read_Walls();
 8004842:	f7ff fcdd 	bl	8004200 <Read_Walls>
			next_move = Get_Next_Move();
 8004846:	f7ff f9f3 	bl	8003c30 <Get_Next_Move>
 800484a:	6028      	str	r0, [r5, #0]
			Update_Position();
 800484c:	f7ff f90e 	bl	8003a6c <Update_Position>
		}
		r_turnflag = EXECUTE;
 8004850:	2302      	movs	r3, #2
 8004852:	6023      	str	r3, [r4, #0]

	}

	if ((r_turnflag == EXECUTE) && (lenc_diff >= RT_LENC_2 || renc_diff >= RT_RENC_2)) { //made it to same point. execute next direction
 8004854:	6823      	ldr	r3, [r4, #0]
 8004856:	2b02      	cmp	r3, #2
 8004858:	d12c      	bne.n	80048b4 <Right_Search+0xdc>
 800485a:	4b18      	ldr	r3, [pc, #96]	; (80048bc <Right_Search+0xe4>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 8004862:	d204      	bcs.n	800486e <Right_Search+0x96>
 8004864:	4b1a      	ldr	r3, [pc, #104]	; (80048d0 <Right_Search+0xf8>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 800486c:	d322      	bcc.n	80048b4 <Right_Search+0xdc>

		r_turnflag = ARRIVE;
		//HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
		prev_l_count = l_count; //save current counters
 800486e:	4b14      	ldr	r3, [pc, #80]	; (80048c0 <Right_Search+0xe8>)

	}

	if ((r_turnflag == EXECUTE) && (lenc_diff >= RT_LENC_2 || renc_diff >= RT_RENC_2)) { //made it to same point. execute next direction

		r_turnflag = ARRIVE;
 8004870:	2600      	movs	r6, #0
		//HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
		prev_l_count = l_count; //save current counters
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	4b13      	ldr	r3, [pc, #76]	; (80048c4 <Right_Search+0xec>)

	}

	if ((r_turnflag == EXECUTE) && (lenc_diff >= RT_LENC_2 || renc_diff >= RT_RENC_2)) { //made it to same point. execute next direction

		r_turnflag = ARRIVE;
 8004876:	6026      	str	r6, [r4, #0]
		//HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
		prev_l_count = l_count; //save current counters
 8004878:	601a      	str	r2, [r3, #0]
		prev_r_count = r_count;
 800487a:	4b13      	ldr	r3, [pc, #76]	; (80048c8 <Right_Search+0xf0>)
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	4b13      	ldr	r3, [pc, #76]	; (80048cc <Right_Search+0xf4>)
 8004880:	601a      	str	r2, [r3, #0]

		switch (next_move) { //need to change direction or nah
 8004882:	4b15      	ldr	r3, [pc, #84]	; (80048d8 <Right_Search+0x100>)
 8004884:	681d      	ldr	r5, [r3, #0]
 8004886:	461c      	mov	r4, r3
 8004888:	2d01      	cmp	r5, #1
 800488a:	d008      	beq.n	800489e <Right_Search+0xc6>
 800488c:	2d02      	cmp	r5, #2
 800488e:	d10e      	bne.n	80048ae <Right_Search+0xd6>

		case RIGHT:
			Set_Left(RIGHT_L, FORWARD); //need to make right turn again
 8004890:	2101      	movs	r1, #1
 8004892:	2078      	movs	r0, #120	; 0x78
 8004894:	f7ff fe02 	bl	800449c <Set_Left>
			Set_Right(RIGHT_R, FORWARD);
 8004898:	2101      	movs	r1, #1
 800489a:	4630      	mov	r0, r6
 800489c:	e005      	b.n	80048aa <Right_Search+0xd2>
			break;

		case LEFT:
			Set_Left(LEFT_L, FORWARD); //need to make right turn again
 800489e:	4629      	mov	r1, r5
 80048a0:	4630      	mov	r0, r6
 80048a2:	f7ff fdfb 	bl	800449c <Set_Left>
			Set_Right(LEFT_R, FORWARD);
 80048a6:	4629      	mov	r1, r5
 80048a8:	2087      	movs	r0, #135	; 0x87
 80048aa:	f7ff fe1f 	bl	80044ec <Set_Right>
			break;

		}
		cur_move = next_move;
 80048ae:	6822      	ldr	r2, [r4, #0]
 80048b0:	4b0a      	ldr	r3, [pc, #40]	; (80048dc <Right_Search+0x104>)
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	bd70      	pop	{r4, r5, r6, pc}
 80048b6:	bf00      	nop
 80048b8:	20003060 	.word	0x20003060
 80048bc:	200020b8 	.word	0x200020b8
 80048c0:	200000ec 	.word	0x200000ec
 80048c4:	200045ec 	.word	0x200045ec
 80048c8:	20003210 	.word	0x20003210
 80048cc:	20004580 	.word	0x20004580
 80048d0:	20001098 	.word	0x20001098
 80048d4:	200043a0 	.word	0x200043a0
 80048d8:	2000337c 	.word	0x2000337c
 80048dc:	200000f4 	.word	0x200000f4

080048e0 <Search_Correction>:
	lenc_diff = l_count - prev_l_count; //get difference between last encoder counts. prev_l and prev_r are updated when traveling 1 unit
	renc_diff = r_count - prev_r_count;

}

void Search_Correction() {
 80048e0:	b510      	push	{r4, lr}

	m_correction = Motor_Correction(FALSE);
 80048e2:	4c08      	ldr	r4, [pc, #32]	; (8004904 <Search_Correction+0x24>)
 80048e4:	2000      	movs	r0, #0
 80048e6:	f7fe faa5 	bl	8002e34 <Motor_Correction>
	Set_Left(FWD_L + m_correction, FORWARD);
 80048ea:	2101      	movs	r1, #1

}

void Search_Correction() {

	m_correction = Motor_Correction(FALSE);
 80048ec:	6020      	str	r0, [r4, #0]
	Set_Left(FWD_L + m_correction, FORWARD);
 80048ee:	3078      	adds	r0, #120	; 0x78
 80048f0:	f7ff fdd4 	bl	800449c <Set_Left>
	Set_Right(FWD_R - m_correction, FORWARD);
 80048f4:	6820      	ldr	r0, [r4, #0]
 80048f6:	2101      	movs	r1, #1
 80048f8:	f1c0 0089 	rsb	r0, r0, #137	; 0x89

}
 80048fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void Search_Correction() {

	m_correction = Motor_Correction(FALSE);
	Set_Left(FWD_L + m_correction, FORWARD);
	Set_Right(FWD_R - m_correction, FORWARD);
 8004900:	f7ff bdf4 	b.w	80044ec <Set_Right>
 8004904:	20003158 	.word	0x20003158

08004908 <Dead_End_Correct>:

}

#define EQUAL_VAL 300

void Dead_End_Correct(void) {
 8004908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

 //align while going into square
Get_IR(FALSE, FALSE, FALSE, FALSE);
 800490c:	2300      	movs	r3, #0
Reset_Counters();

if (dif_l > 500 || dif_r > 500) { //if there's a front wall
 800490e:	4ccd      	ldr	r4, [pc, #820]	; (8004c44 <Dead_End_Correct+0x33c>)
 8004910:	4fcd      	ldr	r7, [pc, #820]	; (8004c48 <Dead_End_Correct+0x340>)
#define EQUAL_VAL 300

void Dead_End_Correct(void) {

 //align while going into square
Get_IR(FALSE, FALSE, FALSE, FALSE);
 8004912:	461a      	mov	r2, r3
 8004914:	4619      	mov	r1, r3
 8004916:	4618      	mov	r0, r3
 8004918:	4ecc      	ldr	r6, [pc, #816]	; (8004c4c <Dead_End_Correct+0x344>)
 800491a:	f7ff fb0f 	bl	8003f3c <Get_IR>
 800491e:	4dcc      	ldr	r5, [pc, #816]	; (8004c50 <Dead_End_Correct+0x348>)
Reset_Counters();
 8004920:	f7fe faf2 	bl	8002f08 <Reset_Counters>

if (dif_l > 500 || dif_r > 500) { //if there's a front wall
 8004924:	6823      	ldr	r3, [r4, #0]
 8004926:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800492a:	dc04      	bgt.n	8004936 <Dead_End_Correct+0x2e>
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004932:	f340 80ae 	ble.w	8004a92 <Dead_End_Correct+0x18a>

	if (dif_lf >= LEFT_THRESHOLD && dif_rf >= RIGHT_THRESHOLD) { //both left and right wall
 8004936:	6833      	ldr	r3, [r6, #0]
 8004938:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800493c:	db66      	blt.n	8004a0c <Dead_End_Correct+0x104>
 800493e:	682a      	ldr	r2, [r5, #0]
 8004940:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 8004944:	db3b      	blt.n	80049be <Dead_End_Correct+0xb6>
		do { //both left and right wall
			Get_IR(FALSE, FALSE, FALSE, FALSE);
			m_correction = (dif_lf - (dif_rf + offsets[2]))/30;
 8004946:	f8df 9324 	ldr.w	r9, [pc, #804]	; 8004c6c <Dead_End_Correct+0x364>
 800494a:	f8df 8308 	ldr.w	r8, [pc, #776]	; 8004c54 <Dead_End_Correct+0x34c>

if (dif_l > 500 || dif_r > 500) { //if there's a front wall

	if (dif_lf >= LEFT_THRESHOLD && dif_rf >= RIGHT_THRESHOLD) { //both left and right wall
		do { //both left and right wall
			Get_IR(FALSE, FALSE, FALSE, FALSE);
 800494e:	2300      	movs	r3, #0
 8004950:	461a      	mov	r2, r3
 8004952:	4619      	mov	r1, r3
 8004954:	4618      	mov	r0, r3
 8004956:	f7ff faf1 	bl	8003f3c <Get_IR>
			m_correction = (dif_lf - (dif_rf + offsets[2]))/30;
 800495a:	682b      	ldr	r3, [r5, #0]
 800495c:	f8d9 0008 	ldr.w	r0, [r9, #8]
			Set_Left(FWD_L + m_correction, FORWARD);
 8004960:	2101      	movs	r1, #1
if (dif_l > 500 || dif_r > 500) { //if there's a front wall

	if (dif_lf >= LEFT_THRESHOLD && dif_rf >= RIGHT_THRESHOLD) { //both left and right wall
		do { //both left and right wall
			Get_IR(FALSE, FALSE, FALSE, FALSE);
			m_correction = (dif_lf - (dif_rf + offsets[2]))/30;
 8004962:	4418      	add	r0, r3
 8004964:	6833      	ldr	r3, [r6, #0]
 8004966:	1a1b      	subs	r3, r3, r0
 8004968:	201e      	movs	r0, #30
 800496a:	fb93 f0f0 	sdiv	r0, r3, r0
 800496e:	f8c8 0000 	str.w	r0, [r8]
			Set_Left(FWD_L + m_correction, FORWARD);
 8004972:	3078      	adds	r0, #120	; 0x78
 8004974:	f7ff fd92 	bl	800449c <Set_Left>
			Set_Right(FWD_R - m_correction, FORWARD);
 8004978:	f8d8 0000 	ldr.w	r0, [r8]
 800497c:	2101      	movs	r1, #1
 800497e:	f1c0 0089 	rsb	r0, r0, #137	; 0x89
 8004982:	f7ff fdb3 	bl	80044ec <Set_Right>
		} while (dif_r < STOP_CONDITION && dif_l < STOP_CONDITION);
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	f640 63a5 	movw	r3, #3749	; 0xea5
 800498c:	429a      	cmp	r2, r3
 800498e:	dd12      	ble.n	80049b6 <Dead_End_Correct+0xae>
			Set_Left(FWD_L + m_correction, FORWARD);
			Set_Right(FWD_R - m_correction, FORWARD);
		} while (dif_r < STOP_CONDITION && dif_l < STOP_CONDITION);
	}

	if (abs(dif_l - dif_r) > EQUAL_VAL) {
 8004990:	6823      	ldr	r3, [r4, #0]
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	1a9b      	subs	r3, r3, r2
 8004996:	2b00      	cmp	r3, #0
 8004998:	bfb8      	it	lt
 800499a:	425b      	neglt	r3, r3
 800499c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80049a0:	f340 80d6 	ble.w	8004b50 <Dead_End_Correct+0x248>
		if (dif_r > dif_l) {
			Set_Left(FWD_L, FORWARD); //100
 80049a4:	2101      	movs	r1, #1
 80049a6:	2078      	movs	r0, #120	; 0x78
 80049a8:	f7ff fd78 	bl	800449c <Set_Left>
			Set_Right(FWD_R, BACKWARD); //140
 80049ac:	2100      	movs	r1, #0
 80049ae:	2089      	movs	r0, #137	; 0x89
 80049b0:	f7ff fd9c 	bl	80044ec <Set_Right>
 80049b4:	e052      	b.n	8004a5c <Dead_End_Correct+0x154>
		do { //both left and right wall
			Get_IR(FALSE, FALSE, FALSE, FALSE);
			m_correction = (dif_lf - (dif_rf + offsets[2]))/30;
			Set_Left(FWD_L + m_correction, FORWARD);
			Set_Right(FWD_R - m_correction, FORWARD);
		} while (dif_r < STOP_CONDITION && dif_l < STOP_CONDITION);
 80049b6:	6822      	ldr	r2, [r4, #0]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	ddc8      	ble.n	800494e <Dead_End_Correct+0x46>
 80049bc:	e7e8      	b.n	8004990 <Dead_End_Correct+0x88>
	}

	else if (dif_lf > LEFT_THRESHOLD && dif_rf <= RIGHT_THRESHOLD) { //just left wall
 80049be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80049c2:	d023      	beq.n	8004a0c <Dead_End_Correct+0x104>
		do { //both left and right wall
			Get_IR(FALSE, FALSE, FALSE, FALSE);
			m_correction = (dif_lf - offsets[0])/30;
 80049c4:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 8004c6c <Dead_End_Correct+0x364>
 80049c8:	4da2      	ldr	r5, [pc, #648]	; (8004c54 <Dead_End_Correct+0x34c>)
		} while (dif_r < STOP_CONDITION && dif_l < STOP_CONDITION);
	}

	else if (dif_lf > LEFT_THRESHOLD && dif_rf <= RIGHT_THRESHOLD) { //just left wall
		do { //both left and right wall
			Get_IR(FALSE, FALSE, FALSE, FALSE);
 80049ca:	2300      	movs	r3, #0
 80049cc:	461a      	mov	r2, r3
 80049ce:	4619      	mov	r1, r3
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff fab3 	bl	8003f3c <Get_IR>
			m_correction = (dif_lf - offsets[0])/30;
 80049d6:	f8d8 0000 	ldr.w	r0, [r8]
 80049da:	6833      	ldr	r3, [r6, #0]
			Set_Left(FWD_L + m_correction, FORWARD);
 80049dc:	2101      	movs	r1, #1
	}

	else if (dif_lf > LEFT_THRESHOLD && dif_rf <= RIGHT_THRESHOLD) { //just left wall
		do { //both left and right wall
			Get_IR(FALSE, FALSE, FALSE, FALSE);
			m_correction = (dif_lf - offsets[0])/30;
 80049de:	1a1b      	subs	r3, r3, r0
 80049e0:	201e      	movs	r0, #30
 80049e2:	fb93 f0f0 	sdiv	r0, r3, r0
 80049e6:	6028      	str	r0, [r5, #0]
			Set_Left(FWD_L + m_correction, FORWARD);
 80049e8:	3078      	adds	r0, #120	; 0x78
 80049ea:	f7ff fd57 	bl	800449c <Set_Left>
			Set_Right(FWD_R - m_correction, FORWARD);
 80049ee:	6828      	ldr	r0, [r5, #0]
 80049f0:	2101      	movs	r1, #1
 80049f2:	f1c0 0089 	rsb	r0, r0, #137	; 0x89
 80049f6:	f7ff fd79 	bl	80044ec <Set_Right>
		} while (dif_r < STOP_CONDITION && dif_l < STOP_CONDITION);
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	f640 63a5 	movw	r3, #3749	; 0xea5
 8004a00:	429a      	cmp	r2, r3
 8004a02:	dcc5      	bgt.n	8004990 <Dead_End_Correct+0x88>
 8004a04:	6822      	ldr	r2, [r4, #0]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	dddf      	ble.n	80049ca <Dead_End_Correct+0xc2>
 8004a0a:	e7c1      	b.n	8004990 <Dead_End_Correct+0x88>
	}

	else if (dif_lf <= LEFT_THRESHOLD && dif_rf > RIGHT_THRESHOLD) { //just right wall
 8004a0c:	682b      	ldr	r3, [r5, #0]
 8004a0e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004a12:	ddbd      	ble.n	8004990 <Dead_End_Correct+0x88>
		do { //both left and right wall
			Get_IR(FALSE, FALSE, FALSE, FALSE);
			m_correction = (offsets[1] - dif_rf)/30;
 8004a14:	f8df 8254 	ldr.w	r8, [pc, #596]	; 8004c6c <Dead_End_Correct+0x364>
 8004a18:	4e8e      	ldr	r6, [pc, #568]	; (8004c54 <Dead_End_Correct+0x34c>)
		} while (dif_r < STOP_CONDITION && dif_l < STOP_CONDITION);
	}

	else if (dif_lf <= LEFT_THRESHOLD && dif_rf > RIGHT_THRESHOLD) { //just right wall
		do { //both left and right wall
			Get_IR(FALSE, FALSE, FALSE, FALSE);
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	4619      	mov	r1, r3
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7ff fa8b 	bl	8003f3c <Get_IR>
			m_correction = (offsets[1] - dif_rf)/30;
 8004a26:	6828      	ldr	r0, [r5, #0]
 8004a28:	f8d8 3004 	ldr.w	r3, [r8, #4]
			Set_Left(FWD_L + m_correction, FORWARD);
 8004a2c:	2101      	movs	r1, #1
	}

	else if (dif_lf <= LEFT_THRESHOLD && dif_rf > RIGHT_THRESHOLD) { //just right wall
		do { //both left and right wall
			Get_IR(FALSE, FALSE, FALSE, FALSE);
			m_correction = (offsets[1] - dif_rf)/30;
 8004a2e:	1a1b      	subs	r3, r3, r0
 8004a30:	201e      	movs	r0, #30
 8004a32:	fb93 f0f0 	sdiv	r0, r3, r0
 8004a36:	6030      	str	r0, [r6, #0]
			Set_Left(FWD_L + m_correction, FORWARD);
 8004a38:	3078      	adds	r0, #120	; 0x78
 8004a3a:	f7ff fd2f 	bl	800449c <Set_Left>
			Set_Right(FWD_R - m_correction, FORWARD);
 8004a3e:	6830      	ldr	r0, [r6, #0]
 8004a40:	2101      	movs	r1, #1
 8004a42:	f1c0 0089 	rsb	r0, r0, #137	; 0x89
 8004a46:	f7ff fd51 	bl	80044ec <Set_Right>
		} while (dif_r < STOP_CONDITION && dif_l < STOP_CONDITION);
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	f640 63a5 	movw	r3, #3749	; 0xea5
 8004a50:	429a      	cmp	r2, r3
 8004a52:	dc9d      	bgt.n	8004990 <Dead_End_Correct+0x88>
 8004a54:	6822      	ldr	r2, [r4, #0]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	dddf      	ble.n	8004a1a <Dead_End_Correct+0x112>
 8004a5a:	e799      	b.n	8004990 <Dead_End_Correct+0x88>
			Set_Left(FWD_L, FORWARD);
			Set_Right(FWD_R, BACKWARD);
		}

		do { //should be perfectly facing the back wall
			Get_IR(FALSE, FALSE, FALSE, TRUE);
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	2301      	movs	r3, #1
 8004a60:	4611      	mov	r1, r2
 8004a62:	4610      	mov	r0, r2
 8004a64:	f7ff fa6a 	bl	8003f3c <Get_IR>
		} while (abs(dif_l  - dif_r ) > EQUAL_VAL);
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	1a9b      	subs	r3, r3, r2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	bfb8      	it	lt
 8004a72:	425b      	neglt	r3, r3
 8004a74:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004a78:	dcf0      	bgt.n	8004a5c <Dead_End_Correct+0x154>

		Set_Left(0, FORWARD);
 8004a7a:	2101      	movs	r1, #1
 8004a7c:	2000      	movs	r0, #0
 8004a7e:	f7ff fd0d 	bl	800449c <Set_Left>
		Set_Right(0, FORWARD);
 8004a82:	2101      	movs	r1, #1
 8004a84:	2000      	movs	r0, #0
 8004a86:	f7ff fd31 	bl	80044ec <Set_Right>

		HAL_Delay(250);
 8004a8a:	20fa      	movs	r0, #250	; 0xfa
 8004a8c:	f7fb fc70 	bl	8000370 <HAL_Delay>
 8004a90:	e05e      	b.n	8004b50 <Dead_End_Correct+0x248>

else if (dif_l < FRONT_THRESHOLD + 400 || dif_r < FRONT_THRESHOLD + 400) { //no front wall

	do {
		Update_Sensors(BARE);
		m_correction = (dif_lf - (dif_rf + WALL_OFFSET))/30;
 8004a92:	4c70      	ldr	r4, [pc, #448]	; (8004c54 <Dead_End_Correct+0x34c>)
		Set_Left(FWD_L + m_correction, FORWARD);
		Set_Right(FWD_R - m_correction, FORWARD);

	} while (l_count < 125 && r_count < 125);
 8004a94:	4f70      	ldr	r7, [pc, #448]	; (8004c58 <Dead_End_Correct+0x350>)
}

else if (dif_l < FRONT_THRESHOLD + 400 || dif_r < FRONT_THRESHOLD + 400) { //no front wall

	do {
		Update_Sensors(BARE);
 8004a96:	2000      	movs	r0, #0
 8004a98:	f7ff fb6e 	bl	8004178 <Update_Sensors>
		m_correction = (dif_lf - (dif_rf + WALL_OFFSET))/30;
 8004a9c:	682b      	ldr	r3, [r5, #0]
		Set_Left(FWD_L + m_correction, FORWARD);
 8004a9e:	2101      	movs	r1, #1

else if (dif_l < FRONT_THRESHOLD + 400 || dif_r < FRONT_THRESHOLD + 400) { //no front wall

	do {
		Update_Sensors(BARE);
		m_correction = (dif_lf - (dif_rf + WALL_OFFSET))/30;
 8004aa0:	f1a3 0032 	sub.w	r0, r3, #50	; 0x32
 8004aa4:	6833      	ldr	r3, [r6, #0]
 8004aa6:	1a1b      	subs	r3, r3, r0
 8004aa8:	201e      	movs	r0, #30
 8004aaa:	fb93 f0f0 	sdiv	r0, r3, r0
 8004aae:	6020      	str	r0, [r4, #0]
		Set_Left(FWD_L + m_correction, FORWARD);
 8004ab0:	3078      	adds	r0, #120	; 0x78
 8004ab2:	f7ff fcf3 	bl	800449c <Set_Left>
		Set_Right(FWD_R - m_correction, FORWARD);
 8004ab6:	6820      	ldr	r0, [r4, #0]
 8004ab8:	2101      	movs	r1, #1
 8004aba:	f1c0 0089 	rsb	r0, r0, #137	; 0x89
 8004abe:	f7ff fd15 	bl	80044ec <Set_Right>

	} while (l_count < 125 && r_count < 125);
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	2b7c      	cmp	r3, #124	; 0x7c
 8004ac6:	d803      	bhi.n	8004ad0 <Dead_End_Correct+0x1c8>
 8004ac8:	4b64      	ldr	r3, [pc, #400]	; (8004c5c <Dead_End_Correct+0x354>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b7c      	cmp	r3, #124	; 0x7c
 8004ace:	d9e2      	bls.n	8004a96 <Dead_End_Correct+0x18e>

	Get_IR(FALSE, FALSE, FALSE, FALSE);
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7ff fa30 	bl	8003f3c <Get_IR>

	if (dif_lf > LEFT_CORRECTION) {
 8004adc:	6833      	ldr	r3, [r6, #0]
 8004ade:	f240 5246 	movw	r2, #1350	; 0x546
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	dd05      	ble.n	8004af2 <Dead_End_Correct+0x1ea>
		Set_Left(FWD_L, FORWARD);
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	2078      	movs	r0, #120	; 0x78
 8004aea:	f7ff fcd7 	bl	800449c <Set_Left>
		Set_Right(FWD_R, BACKWARD);
 8004aee:	2100      	movs	r1, #0
 8004af0:	e00a      	b.n	8004b08 <Dead_End_Correct+0x200>

	}

	else if (dif_lf < LEFT_CORRECTION && dif_lf > LEFT_THRESHOLD) {
 8004af2:	f46f 71fa 	mvn.w	r1, #500	; 0x1f4
 8004af6:	440b      	add	r3, r1
 8004af8:	f5b3 7f54 	cmp.w	r3, #848	; 0x350
 8004afc:	d808      	bhi.n	8004b10 <Dead_End_Correct+0x208>
		Set_Left(FWD_L, BACKWARD);
 8004afe:	2100      	movs	r1, #0
 8004b00:	2078      	movs	r0, #120	; 0x78
 8004b02:	f7ff fccb 	bl	800449c <Set_Left>
		Set_Right(FWD_R, FORWARD);
 8004b06:	2101      	movs	r1, #1
 8004b08:	2089      	movs	r0, #137	; 0x89
 8004b0a:	f7ff fcef 	bl	80044ec <Set_Right>
 8004b0e:	e017      	b.n	8004b40 <Dead_End_Correct+0x238>

	}

	else if (dif_rf > RIGHT_CORRECTION) {
 8004b10:	682b      	ldr	r3, [r5, #0]
 8004b12:	4293      	cmp	r3, r2
 8004b14:	dcf3      	bgt.n	8004afe <Dead_End_Correct+0x1f6>
		Set_Left(FWD_L, BACKWARD);
		Set_Right(FWD_R, FORWARD);

	}
	else if (dif_rf < RIGHT_CORRECTION && dif_rf > RIGHT_THRESHOLD) {
 8004b16:	f46f 72fa 	mvn.w	r2, #500	; 0x1f4
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f5b3 7f54 	cmp.w	r3, #848	; 0x350
 8004b20:	d80e      	bhi.n	8004b40 <Dead_End_Correct+0x238>
 8004b22:	e7e0      	b.n	8004ae6 <Dead_End_Correct+0x1de>
		Set_Left(FWD_L, FORWARD);
		Set_Right(FWD_R, BACKWARD);

	}

	while (abs(dif_rf - 1000) > 100 && abs(dif_lf - 1000) > 100) {
 8004b24:	6833      	ldr	r3, [r6, #0]
 8004b26:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	bfb8      	it	lt
 8004b2e:	425b      	neglt	r3, r3
 8004b30:	2b64      	cmp	r3, #100	; 0x64
 8004b32:	dd0d      	ble.n	8004b50 <Dead_End_Correct+0x248>
	Get_IR(FALSE, FALSE, FALSE, FALSE);
 8004b34:	2300      	movs	r3, #0
 8004b36:	461a      	mov	r2, r3
 8004b38:	4619      	mov	r1, r3
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7ff f9fe 	bl	8003f3c <Get_IR>
		Set_Left(FWD_L, FORWARD);
		Set_Right(FWD_R, BACKWARD);

	}

	while (abs(dif_rf - 1000) > 100 && abs(dif_lf - 1000) > 100) {
 8004b40:	682b      	ldr	r3, [r5, #0]
 8004b42:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	bfb8      	it	lt
 8004b4a:	425b      	neglt	r3, r3
 8004b4c:	2b64      	cmp	r3, #100	; 0x64
 8004b4e:	dce9      	bgt.n	8004b24 <Dead_End_Correct+0x21c>
	}


}

Set_Left(0, FORWARD); //pause to settle weight
 8004b50:	2101      	movs	r1, #1
 8004b52:	2000      	movs	r0, #0
 8004b54:	f7ff fca2 	bl	800449c <Set_Left>
Set_Right(0, FORWARD);
 8004b58:	2101      	movs	r1, #1
 8004b5a:	2000      	movs	r0, #0
Set_Right(FWD_R, FORWARD); //140

int p_correction = 0;

do {
	r_count = __HAL_TIM_GET_COUNTER(&htim4);
 8004b5c:	4f3f      	ldr	r7, [pc, #252]	; (8004c5c <Dead_End_Correct+0x354>)


}

Set_Left(0, FORWARD); //pause to settle weight
Set_Right(0, FORWARD);
 8004b5e:	f7ff fcc5 	bl	80044ec <Set_Right>

HAL_Delay(400);
 8004b62:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004b66:	f7fb fc03 	bl	8000370 <HAL_Delay>

//Turn to the right if right side is greater
Get_IR(FALSE, FALSE, FALSE, TRUE);
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	2301      	movs	r3, #1
Set_Right(FWD_R, FORWARD); //140

int p_correction = 0;

do {
	r_count = __HAL_TIM_GET_COUNTER(&htim4);
 8004b6e:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8004c64 <Dead_End_Correct+0x35c>
Set_Right(0, FORWARD);

HAL_Delay(400);

//Turn to the right if right side is greater
Get_IR(FALSE, FALSE, FALSE, TRUE);
 8004b72:	4611      	mov	r1, r2
 8004b74:	4610      	mov	r0, r2
 8004b76:	f7ff f9e1 	bl	8003f3c <Get_IR>
 8004b7a:	46b8      	mov	r8, r7

Reset_Counters();
 8004b7c:	f7fe f9c4 	bl	8002f08 <Reset_Counters>

//rotate left do 180 degree turn
Set_Left(FWD_L, BACKWARD); //100
 8004b80:	2100      	movs	r1, #0
 8004b82:	2078      	movs	r0, #120	; 0x78
 8004b84:	f7ff fc8a 	bl	800449c <Set_Left>
Set_Right(FWD_R, FORWARD); //140
 8004b88:	2101      	movs	r1, #1
 8004b8a:	2089      	movs	r0, #137	; 0x89
 8004b8c:	f7ff fcae 	bl	80044ec <Set_Right>

int p_correction = 0;

do {
	r_count = __HAL_TIM_GET_COUNTER(&htim4);
 8004b90:	f8d9 3000 	ldr.w	r3, [r9]
	l_count = __HAL_TIM_GET_COUNTER(&htim1);
 8004b94:	4a30      	ldr	r2, [pc, #192]	; (8004c58 <Dead_End_Correct+0x350>)
Set_Right(FWD_R, FORWARD); //140

int p_correction = 0;

do {
	r_count = __HAL_TIM_GET_COUNTER(&htim4);
 8004b96:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	l_count = __HAL_TIM_GET_COUNTER(&htim1);
 8004b98:	4b31      	ldr	r3, [pc, #196]	; (8004c60 <Dead_End_Correct+0x358>)
Set_Right(FWD_R, FORWARD); //140

int p_correction = 0;

do {
	r_count = __HAL_TIM_GET_COUNTER(&htim4);
 8004b9a:	603c      	str	r4, [r7, #0]
	l_count = __HAL_TIM_GET_COUNTER(&htim1);
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4d2f      	ldr	r5, [pc, #188]	; (8004c5c <Dead_End_Correct+0x354>)
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	4e30      	ldr	r6, [pc, #192]	; (8004c64 <Dead_End_Correct+0x35c>)
 8004ba4:	6013      	str	r3, [r2, #0]
	p_correction = (r_count + (int) (l_count - 65536))/5;
 8004ba6:	4423      	add	r3, r4
 8004ba8:	2405      	movs	r4, #5
 8004baa:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8004bae:	fbb3 f4f4 	udiv	r4, r3, r4
	if (abs(p_correction) < 135) {
 8004bb2:	f104 0386 	add.w	r3, r4, #134	; 0x86
 8004bb6:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8004bba:	d809      	bhi.n	8004bd0 <Dead_End_Correct+0x2c8>
	Set_Left(100 + p_correction, BACKWARD);
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8004bc2:	f7ff fc6b 	bl	800449c <Set_Left>
	Set_Right(110 - p_correction, FORWARD);
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	f1c4 006e 	rsb	r0, r4, #110	; 0x6e
 8004bcc:	f7ff fc8e 	bl	80044ec <Set_Right>
	}
} while (r_count < PIVOT_ENC);
 8004bd0:	f8d8 3000 	ldr.w	r3, [r8]
 8004bd4:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 8004bd8:	d9da      	bls.n	8004b90 <Dead_End_Correct+0x288>

//floodfill
Set_Left(0, FORWARD);
 8004bda:	2101      	movs	r1, #1
 8004bdc:	2000      	movs	r0, #0
 8004bde:	f7ff fc5d 	bl	800449c <Set_Left>
Set_Right(0, FORWARD);
 8004be2:	2101      	movs	r1, #1
 8004be4:	2000      	movs	r0, #0
 8004be6:	f7ff fc81 	bl	80044ec <Set_Right>


Reset_Counters();
 8004bea:	f7fe f98d 	bl	8002f08 <Reset_Counters>
HAL_Delay(500);
 8004bee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004bf2:	f7fb fbbd 	bl	8000370 <HAL_Delay>

Set_Left(FWD_L, BACKWARD);
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	2078      	movs	r0, #120	; 0x78
 8004bfa:	f7ff fc4f 	bl	800449c <Set_Left>
Set_Right(FWD_R + 10, BACKWARD);
 8004bfe:	2100      	movs	r1, #0
 8004c00:	2093      	movs	r0, #147	; 0x93
 8004c02:	f7ff fc73 	bl	80044ec <Set_Right>

//go backward a tad
if (done_flag == TRUE) {
 8004c06:	4b18      	ldr	r3, [pc, #96]	; (8004c68 <Dead_End_Correct+0x360>)
	do {
		r_count = __HAL_TIM_GET_COUNTER(&htim4);
 8004c08:	6831      	ldr	r1, [r6, #0]

Set_Left(FWD_L, BACKWARD);
Set_Right(FWD_R + 10, BACKWARD);

//go backward a tad
if (done_flag == TRUE) {
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d113      	bne.n	8004c38 <Dead_End_Correct+0x330>
	do {
		r_count = __HAL_TIM_GET_COUNTER(&htim4);
	} while (abs(r_count - 65386) > 0); //65536
 8004c10:	f64f 736a 	movw	r3, #65386	; 0xff6a
Set_Right(FWD_R + 10, BACKWARD);

//go backward a tad
if (done_flag == TRUE) {
	do {
		r_count = __HAL_TIM_GET_COUNTER(&htim4);
 8004c14:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	} while (abs(r_count - 65386) > 0); //65536
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d1fc      	bne.n	8004c14 <Dead_End_Correct+0x30c>
do {
	r_count = __HAL_TIM_GET_COUNTER(&htim4);
} while (abs(r_count - 65476) > 0); //65536
}

Set_Left(0, FORWARD);
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	602b      	str	r3, [r5, #0]
 8004c20:	f7ff fc3c 	bl	800449c <Set_Left>
Set_Right(0, FORWARD);
 8004c24:	2000      	movs	r0, #0
 8004c26:	2101      	movs	r1, #1
 8004c28:	f7ff fc60 	bl	80044ec <Set_Right>

HAL_Delay(300);
 8004c2c:	f44f 7096 	mov.w	r0, #300	; 0x12c

}
 8004c30:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
}

Set_Left(0, FORWARD);
Set_Right(0, FORWARD);

HAL_Delay(300);
 8004c34:	f7fb bb9c 	b.w	8000370 <HAL_Delay>
}

else {
do {
	r_count = __HAL_TIM_GET_COUNTER(&htim4);
} while (abs(r_count - 65476) > 0); //65536
 8004c38:	f64f 73c4 	movw	r3, #65476	; 0xffc4
	} while (abs(r_count - 65386) > 0); //65536
}

else {
do {
	r_count = __HAL_TIM_GET_COUNTER(&htim4);
 8004c3c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
} while (abs(r_count - 65476) > 0); //65536
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d1fc      	bne.n	8004c3c <Dead_End_Correct+0x334>
 8004c42:	e7ea      	b.n	8004c1a <Dead_End_Correct+0x312>
 8004c44:	20002048 	.word	0x20002048
 8004c48:	200020a8 	.word	0x200020a8
 8004c4c:	200044e4 	.word	0x200044e4
 8004c50:	2000320c 	.word	0x2000320c
 8004c54:	20003158 	.word	0x20003158
 8004c58:	200000ec 	.word	0x200000ec
 8004c5c:	20003210 	.word	0x20003210
 8004c60:	20005a9c 	.word	0x20005a9c
 8004c64:	200045f0 	.word	0x200045f0
 8004c68:	200043a0 	.word	0x200043a0
 8004c6c:	20000000 	.word	0x20000000

08004c70 <Dead_End>:
		Search_Correction();
	} while (lenc_diff >= 650 || renc_diff >= 650);

}

void Dead_End() {
 8004c70:	b570      	push	{r4, r5, r6, lr}

	if (dead_flag == ARRIVE) {
 8004c72:	4c3c      	ldr	r4, [pc, #240]	; (8004d64 <Dead_End+0xf4>)
 8004c74:	6823      	ldr	r3, [r4, #0]
 8004c76:	bb23      	cbnz	r3, 8004cc2 <Dead_End+0x52>

		if (done_flag == TRUE) {
 8004c78:	4b3b      	ldr	r3, [pc, #236]	; (8004d68 <Dead_End+0xf8>)
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	461d      	mov	r5, r3
 8004c7e:	2a01      	cmp	r2, #1
 8004c80:	d101      	bne.n	8004c86 <Dead_End+0x16>

			Read_Walls();
 8004c82:	f7ff fabd 	bl	8004200 <Read_Walls>
		}

		Dead_End_Correct(); //should be aligned in middle of square
 8004c86:	f7ff fe3f 	bl	8004908 <Dead_End_Correct>
		//Read_Walls();
		Floodfill(reverse_flag, search_flag, FALSE);
 8004c8a:	4b38      	ldr	r3, [pc, #224]	; (8004d6c <Dead_End+0xfc>)
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	6819      	ldr	r1, [r3, #0]
 8004c90:	4b37      	ldr	r3, [pc, #220]	; (8004d70 <Dead_End+0x100>)
 8004c92:	6818      	ldr	r0, [r3, #0]
 8004c94:	f7fe fc30 	bl	80034f8 <Floodfill>
		//Print_Maze();
		Reset_Counters();
 8004c98:	f7fe f936 	bl	8002f08 <Reset_Counters>
		Clear_Buffers();
 8004c9c:	f7fe f97a 	bl	8002f94 <Clear_Buffers>
		if (done_flag == TRUE) {
 8004ca0:	682b      	ldr	r3, [r5, #0]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d103      	bne.n	8004cae <Dead_End+0x3e>
			cur_move = PAUSE;
 8004ca6:	2204      	movs	r2, #4
 8004ca8:	4b32      	ldr	r3, [pc, #200]	; (8004d74 <Dead_End+0x104>)
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	e009      	b.n	8004cc2 <Dead_End+0x52>
		}

		else {
		Set_Left(FWD_L, FORWARD);
 8004cae:	2101      	movs	r1, #1
 8004cb0:	2078      	movs	r0, #120	; 0x78
 8004cb2:	f7ff fbf3 	bl	800449c <Set_Left>
		Set_Right(FWD_R, FORWARD); //move forward to next square
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	2089      	movs	r0, #137	; 0x89
 8004cba:	f7ff fc17 	bl	80044ec <Set_Right>
		dead_flag = PEEK;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	6023      	str	r3, [r4, #0]
		}
	}

	if (dead_flag == PEEK && (lenc_diff >= DEAD_LENC1 || renc_diff >= DEAD_RENC1)) { //get next state
 8004cc2:	6823      	ldr	r3, [r4, #0]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d11b      	bne.n	8004d00 <Dead_End+0x90>
 8004cc8:	4b2b      	ldr	r3, [pc, #172]	; (8004d78 <Dead_End+0x108>)
 8004cca:	4d2c      	ldr	r5, [pc, #176]	; (8004d7c <Dead_End+0x10c>)
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	461e      	mov	r6, r3
 8004cd0:	2a8b      	cmp	r2, #139	; 0x8b
 8004cd2:	d802      	bhi.n	8004cda <Dead_End+0x6a>
 8004cd4:	682b      	ldr	r3, [r5, #0]
 8004cd6:	2b8b      	cmp	r3, #139	; 0x8b
 8004cd8:	d912      	bls.n	8004d00 <Dead_End+0x90>

		dead_flag = EXECUTE;
 8004cda:	2302      	movs	r3, #2
 8004cdc:	6023      	str	r3, [r4, #0]
		next_move = Get_Next_Move();
 8004cde:	f7fe ffa7 	bl	8003c30 <Get_Next_Move>
 8004ce2:	4b27      	ldr	r3, [pc, #156]	; (8004d80 <Dead_End+0x110>)
 8004ce4:	6018      	str	r0, [r3, #0]
		Update_Position();
 8004ce6:	f7fe fec1 	bl	8003a6c <Update_Position>

		prev_l_count = l_count; //save current counters
 8004cea:	4b26      	ldr	r3, [pc, #152]	; (8004d84 <Dead_End+0x114>)
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	4b26      	ldr	r3, [pc, #152]	; (8004d88 <Dead_End+0x118>)
 8004cf0:	601a      	str	r2, [r3, #0]
		prev_r_count = r_count;
 8004cf2:	4b26      	ldr	r3, [pc, #152]	; (8004d8c <Dead_End+0x11c>)
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	4b26      	ldr	r3, [pc, #152]	; (8004d90 <Dead_End+0x120>)
 8004cf8:	601a      	str	r2, [r3, #0]
		lenc_diff = 0;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	6033      	str	r3, [r6, #0]
		renc_diff = 0;
 8004cfe:	602b      	str	r3, [r5, #0]
	}
	//after correction
	if (dead_flag == EXECUTE && (lenc_diff > DEAD_LENC2 || renc_diff >= DEAD_RENC2)) {
 8004d00:	6823      	ldr	r3, [r4, #0]
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d12c      	bne.n	8004d60 <Dead_End+0xf0>
 8004d06:	4b1c      	ldr	r3, [pc, #112]	; (8004d78 <Dead_End+0x108>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8004d0e:	d804      	bhi.n	8004d1a <Dead_End+0xaa>
 8004d10:	4b1a      	ldr	r3, [pc, #104]	; (8004d7c <Dead_End+0x10c>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8004d18:	d322      	bcc.n	8004d60 <Dead_End+0xf0>
		dead_flag = ARRIVE;
		prev_l_count = l_count;
 8004d1a:	4b1a      	ldr	r3, [pc, #104]	; (8004d84 <Dead_End+0x114>)
		lenc_diff = 0;
		renc_diff = 0;
	}
	//after correction
	if (dead_flag == EXECUTE && (lenc_diff > DEAD_LENC2 || renc_diff >= DEAD_RENC2)) {
		dead_flag = ARRIVE;
 8004d1c:	2600      	movs	r6, #0
		prev_l_count = l_count;
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	4b19      	ldr	r3, [pc, #100]	; (8004d88 <Dead_End+0x118>)
		lenc_diff = 0;
		renc_diff = 0;
	}
	//after correction
	if (dead_flag == EXECUTE && (lenc_diff > DEAD_LENC2 || renc_diff >= DEAD_RENC2)) {
		dead_flag = ARRIVE;
 8004d22:	6026      	str	r6, [r4, #0]
		prev_l_count = l_count;
 8004d24:	601a      	str	r2, [r3, #0]
		prev_r_count = r_count;
 8004d26:	4b19      	ldr	r3, [pc, #100]	; (8004d8c <Dead_End+0x11c>)
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	4b19      	ldr	r3, [pc, #100]	; (8004d90 <Dead_End+0x120>)
 8004d2c:	601a      	str	r2, [r3, #0]

		switch (next_move) { //need to change direction or nah
 8004d2e:	4b14      	ldr	r3, [pc, #80]	; (8004d80 <Dead_End+0x110>)
 8004d30:	681d      	ldr	r5, [r3, #0]
 8004d32:	461c      	mov	r4, r3
 8004d34:	2d01      	cmp	r5, #1
 8004d36:	d008      	beq.n	8004d4a <Dead_End+0xda>
 8004d38:	2d02      	cmp	r5, #2
 8004d3a:	d10e      	bne.n	8004d5a <Dead_End+0xea>
		case LEFT:
			Set_Left(LEFT_L, FORWARD); //need to make right turn again
			Set_Right(LEFT_R, FORWARD);
			break;
		case RIGHT:
			Set_Left(RIGHT_L, FORWARD); //need to make right turn again
 8004d3c:	2101      	movs	r1, #1
 8004d3e:	2078      	movs	r0, #120	; 0x78
 8004d40:	f7ff fbac 	bl	800449c <Set_Left>
			Set_Right(RIGHT_R, FORWARD);
 8004d44:	2101      	movs	r1, #1
 8004d46:	4630      	mov	r0, r6
 8004d48:	e005      	b.n	8004d56 <Dead_End+0xe6>
		prev_r_count = r_count;

		switch (next_move) { //need to change direction or nah

		case LEFT:
			Set_Left(LEFT_L, FORWARD); //need to make right turn again
 8004d4a:	4629      	mov	r1, r5
 8004d4c:	4630      	mov	r0, r6
 8004d4e:	f7ff fba5 	bl	800449c <Set_Left>
			Set_Right(LEFT_R, FORWARD);
 8004d52:	4629      	mov	r1, r5
 8004d54:	2087      	movs	r0, #135	; 0x87
			break;
		case RIGHT:
			Set_Left(RIGHT_L, FORWARD); //need to make right turn again
			Set_Right(RIGHT_R, FORWARD);
 8004d56:	f7ff fbc9 	bl	80044ec <Set_Right>
			break;
		}
		cur_move = next_move;
 8004d5a:	6822      	ldr	r2, [r4, #0]
 8004d5c:	4b05      	ldr	r3, [pc, #20]	; (8004d74 <Dead_End+0x104>)
 8004d5e:	601a      	str	r2, [r3, #0]
 8004d60:	bd70      	pop	{r4, r5, r6, pc}
 8004d62:	bf00      	nop
 8004d64:	20002044 	.word	0x20002044
 8004d68:	200043a0 	.word	0x200043a0
 8004d6c:	200044ec 	.word	0x200044ec
 8004d70:	2000438c 	.word	0x2000438c
 8004d74:	200000f4 	.word	0x200000f4
 8004d78:	200020b8 	.word	0x200020b8
 8004d7c:	20001098 	.word	0x20001098
 8004d80:	2000337c 	.word	0x2000337c
 8004d84:	200000ec 	.word	0x200000ec
 8004d88:	200045ec 	.word	0x200045ec
 8004d8c:	20003210 	.word	0x20003210
 8004d90:	20004580 	.word	0x20004580

08004d94 <Stop>:
	HAL_UART_Receive(&huart1, rx_buffer, len, 5000);
	Transmit("HAHA");
}
*/

void Stop(void) {
 8004d94:	b538      	push	{r3, r4, r5, lr}

	Set_Left(0, FORWARD);
 8004d96:	2101      	movs	r1, #1
 8004d98:	2000      	movs	r0, #0
 8004d9a:	f7ff fb7f 	bl	800449c <Set_Left>
	Set_Right(0, FORWARD); //STOP
	Reset_Counters();
	debug_flag = FALSE;
 8004d9e:	2500      	movs	r5, #0
	HAL_GPIO_WritePin(GPIOD, LED5_Pin, OFF);
 8004da0:	4c13      	ldr	r4, [pc, #76]	; (8004df0 <Stop+0x5c>)
*/

void Stop(void) {

	Set_Left(0, FORWARD);
	Set_Right(0, FORWARD); //STOP
 8004da2:	2101      	movs	r1, #1
 8004da4:	2000      	movs	r0, #0
 8004da6:	f7ff fba1 	bl	80044ec <Set_Right>
	Reset_Counters();
 8004daa:	f7fe f8ad 	bl	8002f08 <Reset_Counters>
	debug_flag = FALSE;
 8004dae:	4b11      	ldr	r3, [pc, #68]	; (8004df4 <Stop+0x60>)
	HAL_GPIO_WritePin(GPIOD, LED5_Pin, OFF);
 8004db0:	462a      	mov	r2, r5
 8004db2:	2102      	movs	r1, #2
 8004db4:	4620      	mov	r0, r4
void Stop(void) {

	Set_Left(0, FORWARD);
	Set_Right(0, FORWARD); //STOP
	Reset_Counters();
	debug_flag = FALSE;
 8004db6:	601d      	str	r5, [r3, #0]
	HAL_GPIO_WritePin(GPIOD, LED5_Pin, OFF);
 8004db8:	f7fc fa04 	bl	80011c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4_Pin, OFF);
 8004dbc:	462a      	mov	r2, r5
 8004dbe:	2104      	movs	r1, #4
 8004dc0:	4620      	mov	r0, r4
 8004dc2:	f7fc f9ff 	bl	80011c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED3_Pin, OFF);
 8004dc6:	462a      	mov	r2, r5
 8004dc8:	2108      	movs	r1, #8
 8004dca:	4620      	mov	r0, r4
 8004dcc:	f7fc f9fa 	bl	80011c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED2_Pin, OFF);
 8004dd0:	462a      	mov	r2, r5
 8004dd2:	2110      	movs	r1, #16
 8004dd4:	4620      	mov	r0, r4
 8004dd6:	f7fc f9f5 	bl	80011c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED1_Pin, ON);
 8004dda:	2201      	movs	r2, #1
 8004ddc:	2120      	movs	r1, #32
 8004dde:	4620      	mov	r0, r4
 8004de0:	f7fc f9f0 	bl	80011c4 <HAL_GPIO_WritePin>
	Print_Maze();
 8004de4:	f7fe faae 	bl	8003344 <Print_Maze>
	stop_flag = TRUE;
 8004de8:	2201      	movs	r2, #1
 8004dea:	4b03      	ldr	r3, [pc, #12]	; (8004df8 <Stop+0x64>)
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	bd38      	pop	{r3, r4, r5, pc}
 8004df0:	40020c00 	.word	0x40020c00
 8004df4:	20004390 	.word	0x20004390
 8004df8:	2000000c 	.word	0x2000000c

08004dfc <Search>:
		}
	}

}

void Search() {
 8004dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	HAL_GPIO_WritePin(GPIOD, LED5_Pin, ON); //Turn on LEDs to indicate it is searching
 8004dfe:	2201      	movs	r2, #1
 8004e00:	2102      	movs	r1, #2
 8004e02:	4864      	ldr	r0, [pc, #400]	; (8004f94 <Search+0x198>)
 8004e04:	f7fc f9de 	bl	80011c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED2_Pin, OFF);
 8004e08:	2200      	movs	r2, #0
 8004e0a:	2110      	movs	r1, #16
 8004e0c:	4861      	ldr	r0, [pc, #388]	; (8004f94 <Search+0x198>)
 8004e0e:	f7fc f9d9 	bl	80011c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4_Pin, OFF);
 8004e12:	2200      	movs	r2, #0
 8004e14:	2104      	movs	r1, #4
 8004e16:	485f      	ldr	r0, [pc, #380]	; (8004f94 <Search+0x198>)
 8004e18:	f7fc f9d4 	bl	80011c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED3_Pin, OFF);
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	2108      	movs	r1, #8
 8004e20:	485c      	ldr	r0, [pc, #368]	; (8004f94 <Search+0x198>)
 8004e22:	f7fc f9cf 	bl	80011c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED1_Pin, OFF);
 8004e26:	2200      	movs	r2, #0
 8004e28:	2120      	movs	r1, #32
 8004e2a:	485a      	ldr	r0, [pc, #360]	; (8004f94 <Search+0x198>)
 8004e2c:	f7fc f9ca 	bl	80011c4 <HAL_GPIO_WritePin>

	HAL_Delay(1000); //delay before start to get finger out of the way
 8004e30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e34:	f7fb fa9c 	bl	8000370 <HAL_Delay>

	if (reverse_flag == FALSE) {
 8004e38:	4b57      	ldr	r3, [pc, #348]	; (8004f98 <Search+0x19c>)
 8004e3a:	681d      	ldr	r5, [r3, #0]
 8004e3c:	461c      	mov	r4, r3
 8004e3e:	b98d      	cbnz	r5, 8004e64 <Search+0x68>
		HAL_GPIO_WritePin(GPIOD, LED1_Pin, ON);
 8004e40:	2201      	movs	r2, #1
 8004e42:	2120      	movs	r1, #32
 8004e44:	4853      	ldr	r0, [pc, #332]	; (8004f94 <Search+0x198>)
 8004e46:	f7fc f9bd 	bl	80011c4 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8004e4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004e4e:	f7fb fa8f 	bl	8000370 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, LED1_Pin, OFF);
 8004e52:	462a      	mov	r2, r5
 8004e54:	2120      	movs	r1, #32
 8004e56:	484f      	ldr	r0, [pc, #316]	; (8004f94 <Search+0x198>)
 8004e58:	f7fc f9b4 	bl	80011c4 <HAL_GPIO_WritePin>
		Reset_Maze(); //reset walls
 8004e5c:	f7fe fbde 	bl	800361c <Reset_Maze>
		Print_Maze();
 8004e60:	f7fe fa70 	bl	8003344 <Print_Maze>
	}
	Read_Walls();
 8004e64:	f7ff f9cc 	bl	8004200 <Read_Walls>

	Clear_Buffers();
 8004e68:	f7fe f894 	bl	8002f94 <Clear_Buffers>
	Reset_Counters();
 8004e6c:	f7fe f84c 	bl	8002f08 <Reset_Counters>

	Reset_Flags(); //reset flags
 8004e70:	f7fe f8ac 	bl	8002fcc <Reset_Flags>
	Floodfill(reverse_flag, search_flag, FALSE);
 8004e74:	4b49      	ldr	r3, [pc, #292]	; (8004f9c <Search+0x1a0>)
 8004e76:	6820      	ldr	r0, [r4, #0]
 8004e78:	2200      	movs	r2, #0

    while(1) { //searching loop //while(maze[x_coord][y_coord] != 0)

    	Update_Sensors(FWD_SEARCH);

    	if  (cur_move == FWD || r_turnflag == PEEK || r_turnflag == EXECUTE || l_turnflag == PEEK || l_turnflag == EXECUTE || dead_flag == EXECUTE || dead_flag == PEEK) {
 8004e7a:	4c49      	ldr	r4, [pc, #292]	; (8004fa0 <Search+0x1a4>)

	Clear_Buffers();
	Reset_Counters();

	Reset_Flags(); //reset flags
	Floodfill(reverse_flag, search_flag, FALSE);
 8004e7c:	6819      	ldr	r1, [r3, #0]
 8004e7e:	f7fe fb3b 	bl	80034f8 <Floodfill>
 8004e82:	4625      	mov	r5, r4

	//if (search_flag == TRUE) { //get next move if still searching
		//next_move = Get_Next_Move();
	//}

	Update_Position(); //move to next square
 8004e84:	f7fe fdf2 	bl	8003a6c <Update_Position>

	Set_Left(FWD_L, FORWARD); //start going straight. get moving
 8004e88:	2101      	movs	r1, #1
 8004e8a:	2078      	movs	r0, #120	; 0x78
 8004e8c:	f7ff fb06 	bl	800449c <Set_Left>
	Set_Right(FWD_R, FORWARD);
 8004e90:	2101      	movs	r1, #1
 8004e92:	2089      	movs	r0, #137	; 0x89
 8004e94:	f7ff fb2a 	bl	80044ec <Set_Right>

    while(1) { //searching loop //while(maze[x_coord][y_coord] != 0)

    	Update_Sensors(FWD_SEARCH);

    	if  (cur_move == FWD || r_turnflag == PEEK || r_turnflag == EXECUTE || l_turnflag == PEEK || l_turnflag == EXECUTE || dead_flag == EXECUTE || dead_flag == PEEK) {
 8004e98:	4e42      	ldr	r6, [pc, #264]	; (8004fa4 <Search+0x1a8>)
	Set_Left(FWD_L, FORWARD); //start going straight. get moving
	Set_Right(FWD_R, FORWARD);

    while(1) { //searching loop //while(maze[x_coord][y_coord] != 0)

    	Update_Sensors(FWD_SEARCH);
 8004e9a:	2002      	movs	r0, #2
 8004e9c:	f7ff f96c 	bl	8004178 <Update_Sensors>

    	if  (cur_move == FWD || r_turnflag == PEEK || r_turnflag == EXECUTE || l_turnflag == PEEK || l_turnflag == EXECUTE || dead_flag == EXECUTE || dead_flag == PEEK) {
 8004ea0:	6823      	ldr	r3, [r4, #0]
 8004ea2:	b16b      	cbz	r3, 8004ec0 <Search+0xc4>
 8004ea4:	6833      	ldr	r3, [r6, #0]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d909      	bls.n	8004ec0 <Search+0xc4>
 8004eac:	4b3e      	ldr	r3, [pc, #248]	; (8004fa8 <Search+0x1ac>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d904      	bls.n	8004ec0 <Search+0xc4>
 8004eb6:	4b3d      	ldr	r3, [pc, #244]	; (8004fac <Search+0x1b0>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d801      	bhi.n	8004ec4 <Search+0xc8>
    		Search_Correction();
 8004ec0:	f7ff fd0e 	bl	80048e0 <Search_Correction>
    	}

    	if (Emergency_Stop() || stop_flag == TRUE) {
 8004ec4:	f7fd ff98 	bl	8002df8 <Emergency_Stop>
 8004ec8:	4b39      	ldr	r3, [pc, #228]	; (8004fb0 <Search+0x1b4>)
 8004eca:	b910      	cbnz	r0, 8004ed2 <Search+0xd6>
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	2a01      	cmp	r2, #1
 8004ed0:	d10d      	bne.n	8004eee <Search+0xf2>
    		sprintf(tx_buffer, "Stopping...... Stop Flag:  %d\r\n", stop_flag);
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	4937      	ldr	r1, [pc, #220]	; (8004fb4 <Search+0x1b8>)
 8004ed6:	4838      	ldr	r0, [pc, #224]	; (8004fb8 <Search+0x1bc>)
 8004ed8:	f000 fd64 	bl	80059a4 <siprintf>
    		Transmit(tx_buffer);
 8004edc:	4836      	ldr	r0, [pc, #216]	; (8004fb8 <Search+0x1bc>)
 8004ede:	f7fe f8df 	bl	80030a0 <Transmit>
    		Send_Debug();
 8004ee2:	f7fe f955 	bl	8003190 <Send_Debug>
    	case DEAD:
    		Dead_End();
    		break;
    	} //switch
    } //searching loop
}
 8004ee6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

    	if (Emergency_Stop() || stop_flag == TRUE) {
    		sprintf(tx_buffer, "Stopping...... Stop Flag:  %d\r\n", stop_flag);
    		Transmit(tx_buffer);
    		Send_Debug();
    		Stop();
 8004eea:	f7ff bf53 	b.w	8004d94 <Stop>
    		break;
    	}

     	//wall to no wall transition, or no wall to wall transition
    	if (transition_flag == TRUE) {
 8004eee:	4933      	ldr	r1, [pc, #204]	; (8004fbc <Search+0x1c0>)
 8004ef0:	680b      	ldr	r3, [r1, #0]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d10e      	bne.n	8004f14 <Search+0x118>
    		lenc_diff_corr = l_count - l_count_corr;
 8004ef6:	4b32      	ldr	r3, [pc, #200]	; (8004fc0 <Search+0x1c4>)
 8004ef8:	4a32      	ldr	r2, [pc, #200]	; (8004fc4 <Search+0x1c8>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6812      	ldr	r2, [r2, #0]
 8004efe:	1a9b      	subs	r3, r3, r2
 8004f00:	4a31      	ldr	r2, [pc, #196]	; (8004fc8 <Search+0x1cc>)
 8004f02:	6013      	str	r3, [r2, #0]
    		renc_diff_corr = r_count - r_count_corr;
 8004f04:	4b31      	ldr	r3, [pc, #196]	; (8004fcc <Search+0x1d0>)
 8004f06:	4a32      	ldr	r2, [pc, #200]	; (8004fd0 <Search+0x1d4>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6812      	ldr	r2, [r2, #0]
 8004f0c:	1a9b      	subs	r3, r3, r2
 8004f0e:	4a31      	ldr	r2, [pc, #196]	; (8004fd4 <Search+0x1d8>)
 8004f10:	6013      	str	r3, [r2, #0]
 8004f12:	e02c      	b.n	8004f6e <Search+0x172>
    	}

    	if (transition_flag == FALSE && cur_move == FWD && fwd_flag == FALSE && (r_transition_flag == TRUE || l_transition_flag == TRUE)) { //detect transition and start counting from there
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d12a      	bne.n	8004f6e <Search+0x172>
 8004f18:	682b      	ldr	r3, [r5, #0]
 8004f1a:	bb43      	cbnz	r3, 8004f6e <Search+0x172>
 8004f1c:	4b2e      	ldr	r3, [pc, #184]	; (8004fd8 <Search+0x1dc>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d12b      	bne.n	8004f7c <Search+0x180>
 8004f24:	4b2d      	ldr	r3, [pc, #180]	; (8004fdc <Search+0x1e0>)
 8004f26:	4a2e      	ldr	r2, [pc, #184]	; (8004fe0 <Search+0x1e4>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d002      	beq.n	8004f34 <Search+0x138>
 8004f2e:	6810      	ldr	r0, [r2, #0]
 8004f30:	2801      	cmp	r0, #1
 8004f32:	d123      	bne.n	8004f7c <Search+0x180>
    		l_count_corr = l_count;
 8004f34:	4822      	ldr	r0, [pc, #136]	; (8004fc0 <Search+0x1c4>)
    		r_count_corr = r_count;
    		transition_flag = TRUE;
    		lenc_diff_corr = 0;
    		renc_diff_corr = 0;
    		if (l_transition_flag == TRUE) {
 8004f36:	6812      	ldr	r2, [r2, #0]
    		lenc_diff_corr = l_count - l_count_corr;
    		renc_diff_corr = r_count - r_count_corr;
    	}

    	if (transition_flag == FALSE && cur_move == FWD && fwd_flag == FALSE && (r_transition_flag == TRUE || l_transition_flag == TRUE)) { //detect transition and start counting from there
    		l_count_corr = l_count;
 8004f38:	6807      	ldr	r7, [r0, #0]
 8004f3a:	4822      	ldr	r0, [pc, #136]	; (8004fc4 <Search+0x1c8>)
    		r_count_corr = r_count;
    		transition_flag = TRUE;
    		lenc_diff_corr = 0;
    		renc_diff_corr = 0;
    		if (l_transition_flag == TRUE) {
 8004f3c:	2a01      	cmp	r2, #1
    		lenc_diff_corr = l_count - l_count_corr;
    		renc_diff_corr = r_count - r_count_corr;
    	}

    	if (transition_flag == FALSE && cur_move == FWD && fwd_flag == FALSE && (r_transition_flag == TRUE || l_transition_flag == TRUE)) { //detect transition and start counting from there
    		l_count_corr = l_count;
 8004f3e:	6007      	str	r7, [r0, #0]
    		r_count_corr = r_count;
 8004f40:	4822      	ldr	r0, [pc, #136]	; (8004fcc <Search+0x1d0>)
 8004f42:	6807      	ldr	r7, [r0, #0]
 8004f44:	4822      	ldr	r0, [pc, #136]	; (8004fd0 <Search+0x1d4>)
 8004f46:	6007      	str	r7, [r0, #0]
    		transition_flag = TRUE;
 8004f48:	f04f 0001 	mov.w	r0, #1
 8004f4c:	6008      	str	r0, [r1, #0]
    		lenc_diff_corr = 0;
 8004f4e:	f04f 0100 	mov.w	r1, #0
 8004f52:	481d      	ldr	r0, [pc, #116]	; (8004fc8 <Search+0x1cc>)
 8004f54:	6001      	str	r1, [r0, #0]
    		renc_diff_corr = 0;
 8004f56:	481f      	ldr	r0, [pc, #124]	; (8004fd4 <Search+0x1d8>)
 8004f58:	6001      	str	r1, [r0, #0]
    		if (l_transition_flag == TRUE) {
 8004f5a:	d101      	bne.n	8004f60 <Search+0x164>
    			HAL_GPIO_WritePin(GPIOD, LED2_Pin, ON);
 8004f5c:	2110      	movs	r1, #16
 8004f5e:	e003      	b.n	8004f68 <Search+0x16c>
    		}
    		else if (r_transition_flag == TRUE) {
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d10b      	bne.n	8004f7c <Search+0x180>
    			HAL_GPIO_WritePin(GPIOD, LED3_Pin, ON);
 8004f64:	461a      	mov	r2, r3
 8004f66:	2108      	movs	r1, #8
 8004f68:	480a      	ldr	r0, [pc, #40]	; (8004f94 <Search+0x198>)
 8004f6a:	f7fc f92b 	bl	80011c4 <HAL_GPIO_WritePin>
    		}
    		//Stop();
    		//break;
    	}

    	switch (cur_move) { //main case statement. While moving, check distance traveled. If 1 unit has been covered, execute next move
 8004f6e:	682b      	ldr	r3, [r5, #0]
 8004f70:	2b03      	cmp	r3, #3
 8004f72:	d892      	bhi.n	8004e9a <Search+0x9e>
 8004f74:	e8df f003 	tbb	[pc, r3]
 8004f78:	0b050802 	.word	0x0b050802
    	//will eventually combine with above statement
    	case FWD:
    		Forward_Search();
 8004f7c:	f7ff fade 	bl	800453c <Forward_Search>
    		break;
 8004f80:	e78a      	b.n	8004e98 <Search+0x9c>

    	case RIGHT: //break up turn into turn and accelerate
    		Right_Search();
 8004f82:	f7ff fc29 	bl	80047d8 <Right_Search>
    		break;
 8004f86:	e787      	b.n	8004e98 <Search+0x9c>

    	case LEFT:
    		Left_Search();
 8004f88:	f7ff fba0 	bl	80046cc <Left_Search>
    		break;
 8004f8c:	e784      	b.n	8004e98 <Search+0x9c>

    	case DEAD:
    		Dead_End();
 8004f8e:	f7ff fe6f 	bl	8004c70 <Dead_End>
    		break;
 8004f92:	e781      	b.n	8004e98 <Search+0x9c>
 8004f94:	40020c00 	.word	0x40020c00
 8004f98:	2000438c 	.word	0x2000438c
 8004f9c:	200044ec 	.word	0x200044ec
 8004fa0:	200000f4 	.word	0x200000f4
 8004fa4:	20003060 	.word	0x20003060
 8004fa8:	2000109c 	.word	0x2000109c
 8004fac:	20002044 	.word	0x20002044
 8004fb0:	2000000c 	.word	0x2000000c
 8004fb4:	080067e8 	.word	0x080067e8
 8004fb8:	20004fec 	.word	0x20004fec
 8004fbc:	200020a4 	.word	0x200020a4
 8004fc0:	200000ec 	.word	0x200000ec
 8004fc4:	200000f0 	.word	0x200000f0
 8004fc8:	20003214 	.word	0x20003214
 8004fcc:	20003210 	.word	0x20003210
 8004fd0:	20003064 	.word	0x20003064
 8004fd4:	20003384 	.word	0x20003384
 8004fd8:	20003388 	.word	0x20003388
 8004fdc:	200020a0 	.word	0x200020a0
 8004fe0:	200020b0 	.word	0x200020b0

08004fe4 <SystemClock_Config_old>:
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8004fe4:	4b2d      	ldr	r3, [pc, #180]	; (800509c <SystemClock_Config_old+0xb8>)
 8004fe6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fe8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

void SystemClock_Config_old(void)
{
 8004fec:	b510      	push	{r4, lr}
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8004fee:	641a      	str	r2, [r3, #64]	; 0x40
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

void SystemClock_Config_old(void)
{
 8004ff0:	b0b4      	sub	sp, #208	; 0xd0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004ff4:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 8;
	RCC_OscInitStruct.PLL.PLLN = 216;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ff6:	a807      	add	r0, sp, #28
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8004ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ffc:	9300      	str	r3, [sp, #0]
 8004ffe:	9b00      	ldr	r3, [sp, #0]

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005000:	4b27      	ldr	r3, [pc, #156]	; (80050a0 <SystemClock_Config_old+0xbc>)
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005008:	601a      	str	r2, [r3, #0]
 800500a:	681b      	ldr	r3, [r3, #0]

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800500c:	9407      	str	r4, [sp, #28]

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800500e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = 16;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005012:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 8;
	RCC_OscInitStruct.PLL.PLLN = 216;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005014:	9411      	str	r4, [sp, #68]	; 0x44

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005016:	9301      	str	r3, [sp, #4]
 8005018:	9b01      	ldr	r3, [sp, #4]

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800501a:	2301      	movs	r3, #1
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 8;
	RCC_OscInitStruct.PLL.PLLN = 216;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800501c:	9412      	str	r4, [sp, #72]	; 0x48
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800501e:	930a      	str	r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8005020:	2310      	movs	r3, #16
 8005022:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005024:	2300      	movs	r3, #0
 8005026:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8005028:	2308      	movs	r3, #8
 800502a:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 216;
 800502c:	23d8      	movs	r3, #216	; 0xd8
 800502e:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005030:	f7fc f914 	bl	800125c <HAL_RCC_OscConfig>
 8005034:	b108      	cbz	r0, 800503a <SystemClock_Config_old+0x56>
	{
		Error_Handler();
 8005036:	f7fe feeb 	bl	8003e10 <Error_Handler>
	  }

	/**Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800503a:	f7fc f8d7 	bl	80011ec <HAL_PWREx_EnableOverDrive>
 800503e:	2800      	cmp	r0, #0
 8005040:	d1f9      	bne.n	8005036 <SystemClock_Config_old+0x52>
		Error_Handler();
	  }

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8005042:	230f      	movs	r3, #15
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005044:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8005046:	2107      	movs	r1, #7
 8005048:	a802      	add	r0, sp, #8
		Error_Handler();
	  }

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 800504a:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800504c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
	  }

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005050:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005052:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005054:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005058:	9306      	str	r3, [sp, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800505a:	f7fc fad9 	bl	8001610 <HAL_RCC_ClockConfig>
 800505e:	2800      	cmp	r0, #0
 8005060:	d1e9      	bne.n	8005036 <SystemClock_Config_old+0x52>
	{
		Error_Handler();
	}

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005062:	2340      	movs	r3, #64	; 0x40
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005064:	9024      	str	r0, [sp, #144]	; 0x90
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005066:	a813      	add	r0, sp, #76	; 0x4c
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
	{
		Error_Handler();
	}

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005068:	9313      	str	r3, [sp, #76]	; 0x4c
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800506a:	f7fc fbb1 	bl	80017d0 <HAL_RCCEx_PeriphCLKConfig>
 800506e:	4604      	mov	r4, r0
 8005070:	2800      	cmp	r0, #0
 8005072:	d1e0      	bne.n	8005036 <SystemClock_Config_old+0x52>
		Error_Handler();
	}

	    /**Configure the Systick interrupt time
	    */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8005074:	f7fc fb76 	bl	8001764 <HAL_RCC_GetHCLKFreq>
 8005078:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800507c:	fbb0 f0f3 	udiv	r0, r0, r3
 8005080:	f7fb fc14 	bl	80008ac <HAL_SYSTICK_Config>

	    /**Configure the Systick
	    */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8005084:	2004      	movs	r0, #4
 8005086:	f7fb fc27 	bl	80008d8 <HAL_SYSTICK_CLKSourceConfig>

	  /* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800508a:	4622      	mov	r2, r4
 800508c:	4621      	mov	r1, r4
 800508e:	f04f 30ff 	mov.w	r0, #4294967295
 8005092:	f7fb fbc7 	bl	8000824 <HAL_NVIC_SetPriority>
}
 8005096:	b034      	add	sp, #208	; 0xd0
 8005098:	bd10      	pop	{r4, pc}
 800509a:	bf00      	nop
 800509c:	40023800 	.word	0x40023800
 80050a0:	40007000 	.word	0x40007000

080050a4 <main>:

enum {ADC_VAL_BUFFER_LENGTH = 32}; //DMA Buffer size
uint32_t ADC_valbuffer[ADC_VAL_BUFFER_LENGTH];

int main(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b0b4      	sub	sp, #208	; 0xd0


  /*Configure GPIO pins : RDIC_Pin LDIC_Pin GYRO_CS_Pin */
  GPIO_InitStruct.Pin = RDIC_Pin|LDIC_Pin|GYRO_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a8:	2400      	movs	r4, #0
{
   //STARTUP

  /* MCU Configuration----------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80050aa:	f7fb f947 	bl	800033c <HAL_Init>
  HAL_GPIO_WritePin(GPIOD, LED1_Pin, GPIO_PIN_SET);


  /*Configure GPIO pins : RDIC_Pin LDIC_Pin GYRO_CS_Pin */
  GPIO_InitStruct.Pin = RDIC_Pin|LDIC_Pin|GYRO_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050ae:	2601      	movs	r6, #1

  /* MCU Configuration----------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
  /* Configure the system clock */
  SystemClock_Config_old();
 80050b0:	f7ff ff98 	bl	8004fe4 <SystemClock_Config_old>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80050b4:	4b51      	ldr	r3, [pc, #324]	; (80051fc <main+0x158>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RDIC_Pin|LDIC_Pin, GPIO_PIN_RESET);
 80050b6:	210a      	movs	r1, #10
 80050b8:	4851      	ldr	r0, [pc, #324]	; (8005200 <main+0x15c>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80050ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.NbrOfDiscConversion = 0;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
 80050bc:	f04f 0904 	mov.w	r9, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80050c0:	4d50      	ldr	r5, [pc, #320]	; (8005204 <main+0x160>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80050c2:	f042 0201 	orr.w	r2, r2, #1
 80050c6:	631a      	str	r2, [r3, #48]	; 0x30
 80050c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050ca:	f002 0201 	and.w	r2, r2, #1
 80050ce:	9201      	str	r2, [sp, #4]
 80050d0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80050d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050d4:	f042 0204 	orr.w	r2, r2, #4
 80050d8:	631a      	str	r2, [r3, #48]	; 0x30
 80050da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050dc:	f002 0204 	and.w	r2, r2, #4
 80050e0:	9202      	str	r2, [sp, #8]
 80050e2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80050e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050e6:	f042 0202 	orr.w	r2, r2, #2
 80050ea:	631a      	str	r2, [r3, #48]	; 0x30
 80050ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050ee:	f002 0202 	and.w	r2, r2, #2
 80050f2:	9203      	str	r2, [sp, #12]
 80050f4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80050f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050f8:	f042 0210 	orr.w	r2, r2, #16
 80050fc:	631a      	str	r2, [r3, #48]	; 0x30
 80050fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005100:	f002 0210 	and.w	r2, r2, #16
 8005104:	9204      	str	r2, [sp, #16]
 8005106:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800510a:	f042 0208 	orr.w	r2, r2, #8
 800510e:	631a      	str	r2, [r3, #48]	; 0x30

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RDIC_Pin|LDIC_Pin, GPIO_PIN_RESET);
 8005110:	2200      	movs	r2, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005114:	f003 0308 	and.w	r3, r3, #8
 8005118:	9305      	str	r3, [sp, #20]
 800511a:	9b05      	ldr	r3, [sp, #20]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RDIC_Pin|LDIC_Pin, GPIO_PIN_RESET);
 800511c:	f7fc f852 	bl	80011c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GYRO_CS_Pin, GPIO_PIN_SET);
 8005120:	2201      	movs	r2, #1
 8005122:	2110      	movs	r1, #16
 8005124:	4836      	ldr	r0, [pc, #216]	; (8005200 <main+0x15c>)
 8005126:	f7fc f84d 	bl	80011c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LED5_Pin|LED4_Pin|LED3_Pin|LED2_Pin , GPIO_PIN_RESET);
 800512a:	2200      	movs	r2, #0
 800512c:	211e      	movs	r1, #30
 800512e:	4836      	ldr	r0, [pc, #216]	; (8005208 <main+0x164>)
 8005130:	f7fc f848 	bl	80011c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LED1_Pin, GPIO_PIN_SET);
 8005134:	2201      	movs	r2, #1
 8005136:	2120      	movs	r1, #32
 8005138:	4833      	ldr	r0, [pc, #204]	; (8005208 <main+0x164>)
 800513a:	f7fc f843 	bl	80011c4 <HAL_GPIO_WritePin>


  /*Configure GPIO pins : RDIC_Pin LDIC_Pin GYRO_CS_Pin */
  GPIO_InitStruct.Pin = RDIC_Pin|LDIC_Pin|GYRO_CS_Pin;
 800513e:	231a      	movs	r3, #26
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005140:	a92b      	add	r1, sp, #172	; 0xac
 8005142:	482f      	ldr	r0, [pc, #188]	; (8005200 <main+0x15c>)
  HAL_GPIO_WritePin(GPIOD, LED5_Pin|LED4_Pin|LED3_Pin|LED2_Pin , GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOD, LED1_Pin, GPIO_PIN_SET);


  /*Configure GPIO pins : RDIC_Pin LDIC_Pin GYRO_CS_Pin */
  GPIO_InitStruct.Pin = RDIC_Pin|LDIC_Pin|GYRO_CS_Pin;
 8005144:	932b      	str	r3, [sp, #172]	; 0xac
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005146:	962c      	str	r6, [sp, #176]	; 0xb0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005148:	942d      	str	r4, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800514a:	942e      	str	r4, [sp, #184]	; 0xb8
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800514c:	f7fb ff4e 	bl	8000fec <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
 8005150:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 8005154:	a92b      	add	r1, sp, #172	; 0xac
 8005156:	482c      	ldr	r0, [pc, #176]	; (8005208 <main+0x164>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
 8005158:	932b      	str	r3, [sp, #172]	; 0xac
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800515a:	952c      	str	r5, [sp, #176]	; 0xb0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800515c:	942d      	str	r4, [sp, #180]	; 0xb4
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 800515e:	f7fb ff45 	bl	8000fec <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin;
 8005162:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);
 8005164:	a92b      	add	r1, sp, #172	; 0xac
 8005166:	4829      	ldr	r0, [pc, #164]	; (800520c <main+0x168>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin;
 8005168:	932b      	str	r3, [sp, #172]	; 0xac
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800516a:	952c      	str	r5, [sp, #176]	; 0xb0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800516c:	942d      	str	r4, [sp, #180]	; 0xb4
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);
 800516e:	f7fb ff3d 	bl	8000fec <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8005172:	4622      	mov	r2, r4
 8005174:	2102      	movs	r1, #2
 8005176:	2028      	movs	r0, #40	; 0x28

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 8005178:	4d25      	ldr	r5, [pc, #148]	; (8005210 <main+0x16c>)
  GPIO_InitStruct.Pin = BUTTON2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 800517a:	f7fb fb53 	bl	8000824 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800517e:	2028      	movs	r0, #40	; 0x28
 8005180:	f7fb fb88 	bl	8000894 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8005184:	4622      	mov	r2, r4
 8005186:	4631      	mov	r1, r6
 8005188:	2017      	movs	r0, #23
 800518a:	f7fb fb4b 	bl	8000824 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800518e:	2017      	movs	r0, #23
 8005190:	f7fb fb80 	bl	8000894 <HAL_NVIC_EnableIRQ>

  /*Configure GPIO pins : LED5_Pin LED4_Pin LED3_Pin LED2_Pin 
                           LED1_Pin */
  GPIO_InitStruct.Pin = LED5_Pin|LED4_Pin|LED3_Pin|LED2_Pin 
 8005194:	233e      	movs	r3, #62	; 0x3e
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005196:	a92b      	add	r1, sp, #172	; 0xac
 8005198:	481b      	ldr	r0, [pc, #108]	; (8005208 <main+0x164>)
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

  /*Configure GPIO pins : LED5_Pin LED4_Pin LED3_Pin LED2_Pin 
                           LED1_Pin */
  GPIO_InitStruct.Pin = LED5_Pin|LED4_Pin|LED3_Pin|LED2_Pin 
 800519a:	932b      	str	r3, [sp, #172]	; 0xac
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800519c:	962c      	str	r6, [sp, #176]	; 0xb0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800519e:	942d      	str	r4, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051a0:	942e      	str	r4, [sp, #184]	; 0xb8
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051a2:	f7fb ff23 	bl	8000fec <HAL_GPIO_Init>

  //Configure GPIO pins : PC8 PC9
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80051a6:	f44f 7340 	mov.w	r3, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051aa:	a92b      	add	r1, sp, #172	; 0xac
 80051ac:	4817      	ldr	r0, [pc, #92]	; (800520c <main+0x168>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  //Configure GPIO pins : PC8 PC9
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80051ae:	932b      	str	r3, [sp, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051b0:	962c      	str	r6, [sp, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b2:	942d      	str	r4, [sp, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051b4:	942e      	str	r4, [sp, #184]	; 0xb8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051b6:	f7fb ff19 	bl	8000fec <HAL_GPIO_Init>

   //Configure GPIO pins : PB4 PB5
      GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80051ba:	2330      	movs	r3, #48	; 0x30
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051bc:	4815      	ldr	r0, [pc, #84]	; (8005214 <main+0x170>)
 80051be:	a92b      	add	r1, sp, #172	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

   //Configure GPIO pins : PB4 PB5
      GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051c0:	962c      	str	r6, [sp, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

   //Configure GPIO pins : PB4 PB5
      GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80051c2:	932b      	str	r3, [sp, #172]	; 0xac
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051c4:	942d      	str	r4, [sp, #180]	; 0xb4
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051c6:	942e      	str	r4, [sp, #184]	; 0xb8
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051c8:	f7fb ff10 	bl	8000fec <HAL_GPIO_Init>
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80051cc:	4812      	ldr	r0, [pc, #72]	; (8005218 <main+0x174>)
 80051ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80051d2:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80051d4:	612e      	str	r6, [r5, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80051d6:	61ae      	str	r6, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80051d8:	622c      	str	r4, [r5, #32]
  hadc1.Init.NbrOfDiscConversion = 0;
 80051da:	626c      	str	r4, [r5, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80051dc:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 80051de:	62ac      	str	r4, [r5, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80051e0:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 4;
 80051e2:	f8c5 901c 	str.w	r9, [r5, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80051e6:	632e      	str	r6, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = DISABLE;
 80051e8:	616c      	str	r4, [r5, #20]
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80051ea:	e885 0009 	stmia.w	r5, {r0, r3}
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.EOCSelection = DISABLE;

  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80051ee:	4628      	mov	r0, r5
 80051f0:	f7fb f8cc 	bl	800038c <HAL_ADC_Init>
 80051f4:	b190      	cbz	r0, 800521c <main+0x178>
  {
    Error_Handler();
 80051f6:	f7fe fe0b 	bl	8003e10 <Error_Handler>
 80051fa:	bf00      	nop
 80051fc:	40023800 	.word	0x40023800
 8005200:	40020000 	.word	0x40020000
 8005204:	10210000 	.word	0x10210000
 8005208:	40020c00 	.word	0x40020c00
 800520c:	40020800 	.word	0x40020800
 8005210:	200050b4 	.word	0x200050b4
 8005214:	40020400 	.word	0x40020400
 8005218:	40012000 	.word	0x40012000
  }


  sConfig.Channel = ADC_CHANNEL_14; //l receiver
 800521c:	230e      	movs	r3, #14
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
  sConfig.Offset = 0;
 800521e:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005220:	a910      	add	r1, sp, #64	; 0x40
 8005222:	4628      	mov	r0, r5
  {
    Error_Handler();
  }


  sConfig.Channel = ADC_CHANNEL_14; //l receiver
 8005224:	9310      	str	r3, [sp, #64]	; 0x40
  sConfig.Rank = 1;
 8005226:	9611      	str	r6, [sp, #68]	; 0x44
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8005228:	9612      	str	r6, [sp, #72]	; 0x48
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800522a:	f7fb fa49 	bl	80006c0 <HAL_ADC_ConfigChannel>
 800522e:	2800      	cmp	r0, #0
 8005230:	d1e1      	bne.n	80051f6 <main+0x152>
  {

    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_15; //lf receiver
 8005232:	230f      	movs	r3, #15
  sConfig.Rank = 2;
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
  sConfig.Offset = 0;
 8005234:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005236:	a910      	add	r1, sp, #64	; 0x40
 8005238:	4628      	mov	r0, r5
  {

    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_15; //lf receiver
 800523a:	9310      	str	r3, [sp, #64]	; 0x40
  sConfig.Rank = 2;
 800523c:	2302      	movs	r3, #2
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800523e:	9612      	str	r6, [sp, #72]	; 0x48

    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_15; //lf receiver
  sConfig.Rank = 2;
 8005240:	9311      	str	r3, [sp, #68]	; 0x44
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005242:	f7fb fa3d 	bl	80006c0 <HAL_ADC_ConfigChannel>
 8005246:	2800      	cmp	r0, #0
 8005248:	d1d5      	bne.n	80051f6 <main+0x152>
  {

    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_8; //rf receiver
 800524a:	f04f 0808 	mov.w	r8, #8
  sConfig.Rank = 3;
 800524e:	2703      	movs	r7, #3
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
  sConfig.Offset = 0;
 8005250:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005252:	a910      	add	r1, sp, #64	; 0x40
 8005254:	4628      	mov	r0, r5
  {

    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_8; //rf receiver
 8005256:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  sConfig.Rank = 3;
 800525a:	9711      	str	r7, [sp, #68]	; 0x44
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800525c:	9612      	str	r6, [sp, #72]	; 0x48
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800525e:	f7fb fa2f 	bl	80006c0 <HAL_ADC_ConfigChannel>
 8005262:	2800      	cmp	r0, #0
 8005264:	d1c7      	bne.n	80051f6 <main+0x152>
  {

    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_9; //r receiver
 8005266:	2309      	movs	r3, #9
  sConfig.Rank = 4;
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
  sConfig.Offset = 0;
 8005268:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800526a:	a910      	add	r1, sp, #64	; 0x40
 800526c:	4628      	mov	r0, r5
  {

    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_9; //r receiver
 800526e:	9310      	str	r3, [sp, #64]	; 0x40
  sConfig.Rank = 4;
 8005270:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8005274:	9612      	str	r6, [sp, #72]	; 0x48
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005276:	f7fb fa23 	bl	80006c0 <HAL_ADC_ConfigChannel>
 800527a:	2800      	cmp	r0, #0
 800527c:	d1bb      	bne.n	80051f6 <main+0x152>
//LEFT ENCODER CHANNELS
static void MX_TIM1_Init(void)
{
  TIM_Encoder_InitTypeDef sConfig;

  htim1.Instance = TIM1;
 800527e:	4ca1      	ldr	r4, [pc, #644]	; (8005504 <main+0x460>)
  sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
  sConfig.IC2Filter = 0;

  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8005280:	a92b      	add	r1, sp, #172	; 0xac
//LEFT ENCODER CHANNELS
static void MX_TIM1_Init(void)
{
  TIM_Encoder_InitTypeDef sConfig;

  htim1.Instance = TIM1;
 8005282:	4ba1      	ldr	r3, [pc, #644]	; (8005508 <main+0x464>)
  htim1.Init.Prescaler = 0;
 8005284:	6060      	str	r0, [r4, #4]
//LEFT ENCODER CHANNELS
static void MX_TIM1_Init(void)
{
  TIM_Encoder_InitTypeDef sConfig;

  htim1.Instance = TIM1;
 8005286:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 0xffff;
 8005288:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
  TIM_Encoder_InitTypeDef sConfig;

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800528c:	60a0      	str	r0, [r4, #8]
  htim1.Init.Period = 0xffff;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800528e:	6120      	str	r0, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8005290:	6160      	str	r0, [r4, #20]

  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
  sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005292:	902c      	str	r0, [sp, #176]	; 0xb0
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
  sConfig.IC1Filter = 0;
 8005294:	902f      	str	r0, [sp, #188]	; 0xbc

  sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005296:	9030      	str	r0, [sp, #192]	; 0xc0
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
  sConfig.IC2Filter = 0;
 8005298:	9033      	str	r0, [sp, #204]	; 0xcc

  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800529a:	4620      	mov	r0, r4
  TIM_Encoder_InitTypeDef sConfig;

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 0xffff;
 800529c:	60e3      	str	r3, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;

  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800529e:	972b      	str	r7, [sp, #172]	; 0xac
  sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80052a0:	962d      	str	r6, [sp, #180]	; 0xb4
  sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 80052a2:	f8cd 80b8 	str.w	r8, [sp, #184]	; 0xb8
  sConfig.IC1Filter = 0;

  sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80052a6:	9631      	str	r6, [sp, #196]	; 0xc4
  sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 80052a8:	f8cd 80c8 	str.w	r8, [sp, #200]	; 0xc8
  sConfig.IC2Filter = 0;

  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80052ac:	f7fd f860 	bl	8002370 <HAL_TIM_Encoder_Init>
 80052b0:	2800      	cmp	r0, #0
 80052b2:	d1a0      	bne.n	80051f6 <main+0x152>
  {
    Error_Handler();
  }

  if(HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL) != HAL_OK)
 80052b4:	213c      	movs	r1, #60	; 0x3c
 80052b6:	4620      	mov	r0, r4
 80052b8:	f7fc fedb 	bl	8002072 <HAL_TIM_Encoder_Start_IT>
 80052bc:	2800      	cmp	r0, #0
 80052be:	d19a      	bne.n	80051f6 <main+0x152>
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  //uhPrescalerValue = (uint32_t)((SystemCoreClock /2) / 18000000) - 1;

  htim2.Instance = TIM2;
 80052c0:	4c92      	ldr	r4, [pc, #584]	; (800550c <main+0x468>)
 80052c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 3;
 80052c6:	e884 0088 	stmia.w	r4, {r3, r7}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 665;
 80052ca:	f240 2399 	movw	r3, #665	; 0x299

  //uhPrescalerValue = (uint32_t)((SystemCoreClock /2) / 18000000) - 1;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 3;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052ce:	60a0      	str	r0, [r4, #8]
  htim2.Init.Period = 665;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052d0:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80052d2:	4620      	mov	r0, r4
  //uhPrescalerValue = (uint32_t)((SystemCoreClock /2) / 18000000) - 1;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 3;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 665;
 80052d4:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80052d6:	f7fd f831 	bl	800233c <HAL_TIM_PWM_Init>
 80052da:	2800      	cmp	r0, #0
 80052dc:	d18b      	bne.n	80051f6 <main+0x152>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052de:	9009      	str	r0, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80052e0:	a909      	add	r1, sp, #36	; 0x24
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052e2:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80052e4:	4620      	mov	r0, r4
 80052e6:	f7fd fae3 	bl	80028b0 <HAL_TIMEx_MasterConfigSynchronization>
 80052ea:	4602      	mov	r2, r0
 80052ec:	2800      	cmp	r0, #0
 80052ee:	d182      	bne.n	80051f6 <main+0x152>
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80052f0:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 80052f2:	901c      	str	r0, [sp, #112]	; 0x70
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80052f4:	901d      	str	r0, [sp, #116]	; 0x74
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80052f6:	a91b      	add	r1, sp, #108	; 0x6c
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80052f8:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80052fa:	4620      	mov	r0, r4
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80052fc:	931b      	str	r3, [sp, #108]	; 0x6c
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80052fe:	f7fd fa51 	bl	80027a4 <HAL_TIM_PWM_ConfigChannel>
 8005302:	2800      	cmp	r0, #0
 8005304:	f47f af77 	bne.w	80051f6 <main+0x152>
  {
    Error_Handler();
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005308:	4620      	mov	r0, r4
 800530a:	4642      	mov	r2, r8
 800530c:	a91b      	add	r1, sp, #108	; 0x6c
 800530e:	f7fd fa49 	bl	80027a4 <HAL_TIM_PWM_ConfigChannel>
 8005312:	4604      	mov	r4, r0
 8005314:	2800      	cmp	r0, #0
 8005316:	f47f af6e 	bne.w	80051f6 <main+0x152>
  {
    Error_Handler();
  }
  HAL_TIM_MspPostInit(&htim2);
 800531a:	487c      	ldr	r0, [pc, #496]	; (800550c <main+0x468>)
 800531c:	f000 fa58 	bl	80057d0 <HAL_TIM_MspPostInit>
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim5.Instance = TIM5;
 8005320:	4d7b      	ldr	r5, [pc, #492]	; (8005510 <main+0x46c>)
  htim5.Init.Prescaler = 10800;
 8005322:	f642 2330 	movw	r3, #10800	; 0x2a30
 8005326:	497b      	ldr	r1, [pc, #492]	; (8005514 <main+0x470>)
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 0xffffffff;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005328:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim5.Instance = TIM5;
  htim5.Init.Prescaler = 10800;
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800532a:	60ac      	str	r4, [r5, #8]
  htim5.Init.Period = 0xffffffff;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800532c:	612c      	str	r4, [r5, #16]

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim5.Instance = TIM5;
  htim5.Init.Prescaler = 10800;
 800532e:	e885 000a 	stmia.w	r5, {r1, r3}
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 0xffffffff;
 8005332:	f04f 33ff 	mov.w	r3, #4294967295
 8005336:	60eb      	str	r3, [r5, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005338:	f7fc ffea 	bl	8002310 <HAL_TIM_Base_Init>
 800533c:	2800      	cmp	r0, #0
 800533e:	f47f af5a 	bne.w	80051f6 <main+0x152>
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005342:	a934      	add	r1, sp, #208	; 0xd0
 8005344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005348:	4628      	mov	r0, r5
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800534a:	f841 3da0 	str.w	r3, [r1, #-160]!
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800534e:	f7fd f923 	bl	8002598 <HAL_TIM_ConfigClockSource>
 8005352:	2800      	cmp	r0, #0
 8005354:	f47f af4f 	bne.w	80051f6 <main+0x152>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005358:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800535a:	a906      	add	r1, sp, #24
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800535c:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800535e:	4628      	mov	r0, r5
 8005360:	f7fd faa6 	bl	80028b0 <HAL_TIMEx_MasterConfigSynchronization>
 8005364:	4604      	mov	r4, r0
 8005366:	2800      	cmp	r0, #0
 8005368:	f47f af45 	bne.w	80051f6 <main+0x152>
  {
    Error_Handler();
  }

  HAL_TIM_Base_Start(&htim5);
 800536c:	4628      	mov	r0, r5
//RIGHT ENCODER CHANNELS
static void MX_TIM4_Init(void)
{
	TIM_Encoder_InitTypeDef sConfig;

	htim4.Instance = TIM4;
 800536e:	4d6a      	ldr	r5, [pc, #424]	; (8005518 <main+0x474>)
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }

  HAL_TIM_Base_Start(&htim5);
 8005370:	f7fc fe72 	bl	8002058 <HAL_TIM_Base_Start>
//RIGHT ENCODER CHANNELS
static void MX_TIM4_Init(void)
{
	TIM_Encoder_InitTypeDef sConfig;

	htim4.Instance = TIM4;
 8005374:	4b69      	ldr	r3, [pc, #420]	; (800551c <main+0x478>)
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim4.Init.RepetitionCounter = 0;

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005376:	2601      	movs	r6, #1
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
	sConfig.IC2Filter = 0;

	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005378:	a922      	add	r1, sp, #136	; 0x88
 800537a:	4628      	mov	r0, r5
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim4.Init.Period = 0xffff;
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim4.Init.RepetitionCounter = 0;

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800537c:	9722      	str	r7, [sp, #136]	; 0x88
{
	TIM_Encoder_InitTypeDef sConfig;

	htim4.Instance = TIM4;
	htim4.Init.Prescaler = 0;
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800537e:	60ac      	str	r4, [r5, #8]
	htim4.Init.RepetitionCounter = 0;

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8005380:	4647      	mov	r7, r8

	htim4.Instance = TIM4;
	htim4.Init.Prescaler = 0;
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim4.Init.Period = 0xffff;
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005382:	612c      	str	r4, [r5, #16]
	htim4.Init.RepetitionCounter = 0;
 8005384:	616c      	str	r4, [r5, #20]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005386:	9423      	str	r4, [sp, #140]	; 0x8c
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005388:	9624      	str	r6, [sp, #144]	; 0x90
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 800538a:	f8cd 8094 	str.w	r8, [sp, #148]	; 0x94
	sConfig.IC1Filter = 0;
 800538e:	9426      	str	r4, [sp, #152]	; 0x98

	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005390:	9427      	str	r4, [sp, #156]	; 0x9c
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005392:	9628      	str	r6, [sp, #160]	; 0xa0
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8005394:	f8cd 80a4 	str.w	r8, [sp, #164]	; 0xa4
	sConfig.IC2Filter = 0;
 8005398:	942a      	str	r4, [sp, #168]	; 0xa8
static void MX_TIM4_Init(void)
{
	TIM_Encoder_InitTypeDef sConfig;

	htim4.Instance = TIM4;
	htim4.Init.Prescaler = 0;
 800539a:	e885 0018 	stmia.w	r5, {r3, r4}
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim4.Init.Period = 0xffff;
 800539e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80053a2:	60eb      	str	r3, [r5, #12]
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
	sConfig.IC2Filter = 0;

	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80053a4:	f7fc ffe4 	bl	8002370 <HAL_TIM_Encoder_Init>
 80053a8:	2800      	cmp	r0, #0
 80053aa:	f47f af24 	bne.w	80051f6 <main+0x152>
	{
	  Error_Handler();
	}

	if(HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL) != HAL_OK)
 80053ae:	213c      	movs	r1, #60	; 0x3c
 80053b0:	4628      	mov	r0, r5
 80053b2:	f7fc fe5e 	bl	8002072 <HAL_TIM_Encoder_Start_IT>
 80053b6:	2800      	cmp	r0, #0
 80053b8:	f47f af1d 	bne.w	80051f6 <main+0x152>
static void MX_TIM9_Init(void)
{

  TIM_OC_InitTypeDef sConfigOC;

  htim9.Instance = TIM9;
 80053bc:	4d58      	ldr	r5, [pc, #352]	; (8005520 <main+0x47c>)
 80053be:	4b59      	ldr	r3, [pc, #356]	; (8005524 <main+0x480>)
  htim9.Init.Prescaler = 8;
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053c0:	60a8      	str	r0, [r5, #8]
  htim9.Init.Period = 3375;
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053c2:	6128      	str	r0, [r5, #16]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80053c4:	4628      	mov	r0, r5
{

  TIM_OC_InitTypeDef sConfigOC;

  htim9.Instance = TIM9;
  htim9.Init.Prescaler = 8;
 80053c6:	e885 0088 	stmia.w	r5, {r3, r7}
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim9.Init.Period = 3375;
 80053ca:	f640 532f 	movw	r3, #3375	; 0xd2f
 80053ce:	60eb      	str	r3, [r5, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80053d0:	f7fc ffb4 	bl	800233c <HAL_TIM_PWM_Init>
 80053d4:	4602      	mov	r2, r0
 80053d6:	2800      	cmp	r0, #0
 80053d8:	f47f af0d 	bne.w	80051f6 <main+0x152>
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80053dc:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 1790;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80053de:	9016      	str	r0, [sp, #88]	; 0x58
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80053e0:	9018      	str	r0, [sp, #96]	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80053e2:	a914      	add	r1, sp, #80	; 0x50
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80053e4:	9314      	str	r3, [sp, #80]	; 0x50
  sConfigOC.Pulse = 1790;
 80053e6:	f240 63fe 	movw	r3, #1790	; 0x6fe
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80053ea:	4628      	mov	r0, r5
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 1790;
 80053ec:	9315      	str	r3, [sp, #84]	; 0x54
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80053ee:	f7fd f9d9 	bl	80027a4 <HAL_TIM_PWM_ConfigChannel>
 80053f2:	4604      	mov	r4, r0
 80053f4:	2800      	cmp	r0, #0
 80053f6:	f47f aefe 	bne.w	80051f6 <main+0x152>
  {
    Error_Handler();
  }
  HAL_TIM_MspPostInit(&htim9);
 80053fa:	4628      	mov	r0, r5
 80053fc:	f000 f9e8 	bl	80057d0 <HAL_TIM_MspPostInit>
}

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
  huart1.Instance = USART1;
 8005400:	4849      	ldr	r0, [pc, #292]	; (8005528 <main+0x484>)
  huart1.Init.BaudRate = 115200;
 8005402:	4a4a      	ldr	r2, [pc, #296]	; (800552c <main+0x488>)
 8005404:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005408:	6084      	str	r4, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800540a:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800540c:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800540e:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005410:	61c4      	str	r4, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005412:	6204      	str	r4, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005414:	6244      	str	r4, [r0, #36]	; 0x24

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 8005416:	e880 000c 	stmia.w	r0, {r2, r3}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800541a:	230c      	movs	r3, #12
 800541c:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800541e:	f7fd fcb8 	bl	8002d92 <HAL_UART_Init>
 8005422:	4604      	mov	r4, r0
 8005424:	2800      	cmp	r0, #0
 8005426:	f47f aee6 	bne.w	80051f6 <main+0x152>

  //buzzer
  //HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);

  //start PWM for motors
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800542a:	4641      	mov	r1, r8
 800542c:	4837      	ldr	r0, [pc, #220]	; (800550c <main+0x468>)
  Read_Settings();

  //MAIN INFINITE PROGRAM LOOP aka ready loop
  while (1)
  {
	  if (stop_flag == FALSE || debug_flag == TRUE) { //press top button to activate IR sensors
 800542e:	4d40      	ldr	r5, [pc, #256]	; (8005530 <main+0x48c>)

  //buzzer
  //HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);

  //start PWM for motors
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8005430:	f7fd f94e 	bl	80026d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8005434:	4621      	mov	r1, r4
 8005436:	4835      	ldr	r0, [pc, #212]	; (800550c <main+0x468>)
 8005438:	f7fd f94a 	bl	80026d0 <HAL_TIM_PWM_Start>
 800543c:	462f      	mov	r7, r5

  Set_Left(0, FORWARD); //set mouse to sit
 800543e:	4631      	mov	r1, r6
 8005440:	4620      	mov	r0, r4
  //MAIN INFINITE PROGRAM LOOP aka ready loop
  while (1)
  {
	  if (stop_flag == FALSE || debug_flag == TRUE) { //press top button to activate IR sensors
		  Update_Sensors(BARE);
	  	  if (send_debug == TRUE) {
 8005442:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8005558 <main+0x4b4>

  //start PWM for motors
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);

  Set_Left(0, FORWARD); //set mouse to sit
 8005446:	f7ff f829 	bl	800449c <Set_Left>
  Set_Right(0, FORWARD);
 800544a:	4631      	mov	r1, r6
 800544c:	4620      	mov	r0, r4
 800544e:	f7ff f84d 	bl	80044ec <Set_Right>
  //END STARTUP

  Read_Settings();
 8005452:	f7fd fe6b 	bl	800312c <Read_Settings>

  //MAIN INFINITE PROGRAM LOOP aka ready loop
  while (1)
  {
	  if (stop_flag == FALSE || debug_flag == TRUE) { //press top button to activate IR sensors
 8005456:	682b      	ldr	r3, [r5, #0]
 8005458:	b11b      	cbz	r3, 8005462 <main+0x3be>
 800545a:	4b36      	ldr	r3, [pc, #216]	; (8005534 <main+0x490>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d108      	bne.n	8005474 <main+0x3d0>
		  Update_Sensors(BARE);
 8005462:	2000      	movs	r0, #0
 8005464:	f7fe fe88 	bl	8004178 <Update_Sensors>
	  	  if (send_debug == TRUE) {
 8005468:	f8d9 3000 	ldr.w	r3, [r9]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d101      	bne.n	8005474 <main+0x3d0>
	  		  Send_Debug();
 8005470:	f7fd fe8e 	bl	8003190 <Send_Debug>
	  	  }
	  }



	  if (stop_flag == FALSE && dif_r > 2000) { //debug speed run
 8005474:	683c      	ldr	r4, [r7, #0]
 8005476:	b9a4      	cbnz	r4, 80054a2 <main+0x3fe>
 8005478:	4b2f      	ldr	r3, [pc, #188]	; (8005538 <main+0x494>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005480:	dd0f      	ble.n	80054a2 <main+0x3fe>
		  //Reset_Flags();
		  //Search_New();
		  //Speed_Run("cs");
		  //Dead_End_Correct();
		  Read_Walls_Flash();
 8005482:	f7fd fe1d 	bl	80030c0 <Read_Walls_Flash>
		  HAL_GPIO_WritePin(GPIOD, LED1_Pin, ON);
 8005486:	2201      	movs	r2, #1
 8005488:	2120      	movs	r1, #32
 800548a:	482c      	ldr	r0, [pc, #176]	; (800553c <main+0x498>)
 800548c:	f7fb fe9a 	bl	80011c4 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8005490:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005494:	f7fa ff6c 	bl	8000370 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOD, LED1_Pin, OFF);
 8005498:	4622      	mov	r2, r4
 800549a:	2120      	movs	r1, #32
 800549c:	4827      	ldr	r0, [pc, #156]	; (800553c <main+0x498>)
 800549e:	f7fb fe91 	bl	80011c4 <HAL_GPIO_WritePin>
		  //Speed_Run(fast_path);
		  //Speed_Run("vrvs");
		  //Correction_Calibrate();
	  }

	  if (stop_flag == FALSE && dif_l > 2000) { //start searching (place finger in front)
 80054a2:	683e      	ldr	r6, [r7, #0]
 80054a4:	bb4e      	cbnz	r6, 80054fa <main+0x456>
 80054a6:	4b26      	ldr	r3, [pc, #152]	; (8005540 <main+0x49c>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80054ae:	dd24      	ble.n	80054fa <main+0x456>
		  Reset_Flags();
 80054b0:	f7fd fd8c 	bl	8002fcc <Reset_Flags>
		  final_x = x_coord;
		  final_y = y_coord;
		  //Read_Walls();

		  //Set all visited squares to true, and all relevant walls to true
		  visited_squares[X_FINAL][Y_FINAL] = TRUE;
 80054b4:	2401      	movs	r4, #1
		  //Correction_Calibrate();
	  }

	  if (stop_flag == FALSE && dif_l > 2000) { //start searching (place finger in front)
		  Reset_Flags();
		  Search(); //go to center
 80054b6:	f7ff fca1 	bl	8004dfc <Search>
		  final_x = x_coord;
 80054ba:	4b22      	ldr	r3, [pc, #136]	; (8005544 <main+0x4a0>)
		  Fill_Center();
#endif
		  Print_Maze();
		  Program_Walls_Flash(); //end reached. save walls
		  stop_flag = FALSE;
		  reverse_flag = TRUE;
 80054bc:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800555c <main+0x4b8>
	  }

	  if (stop_flag == FALSE && dif_l > 2000) { //start searching (place finger in front)
		  Reset_Flags();
		  Search(); //go to center
		  final_x = x_coord;
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	4b21      	ldr	r3, [pc, #132]	; (8005548 <main+0x4a4>)
 80054c4:	601a      	str	r2, [r3, #0]
		  final_y = y_coord;
 80054c6:	4b21      	ldr	r3, [pc, #132]	; (800554c <main+0x4a8>)
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	4b21      	ldr	r3, [pc, #132]	; (8005550 <main+0x4ac>)
 80054cc:	601a      	str	r2, [r3, #0]
		  //Read_Walls();

		  //Set all visited squares to true, and all relevant walls to true
		  visited_squares[X_FINAL][Y_FINAL] = TRUE;
 80054ce:	4b21      	ldr	r3, [pc, #132]	; (8005554 <main+0x4b0>)
 80054d0:	f8c3 41dc 	str.w	r4, [r3, #476]	; 0x1dc
#if X_MAZE_SIZE == 16
		  visited_squares[X_FINAL+1][Y_FINAL] = TRUE;
 80054d4:	f8c3 421c 	str.w	r4, [r3, #540]	; 0x21c
		  visited_squares[X_FINAL][Y_FINAL] = TRUE;
		  visited_squares[X_FINAL + 1][Y_FINAL + 1] = TRUE;
 80054d8:	f8c3 4220 	str.w	r4, [r3, #544]	; 0x220
		  Fill_Center();
 80054dc:	f7fe f9fe 	bl	80038dc <Fill_Center>
#endif
		  Print_Maze();
 80054e0:	f7fd ff30 	bl	8003344 <Print_Maze>
		  Program_Walls_Flash(); //end reached. save walls
 80054e4:	f7fe fca6 	bl	8003e34 <Program_Walls_Flash>
		  stop_flag = FALSE;
 80054e8:	602e      	str	r6, [r5, #0]
		  reverse_flag = TRUE;
 80054ea:	f8c8 4000 	str.w	r4, [r8]
		  //Calc_Optimal();
		  //Get_Coordinate();
		  //if (coordinate_count > 1) {
		  //search_flag = TRUE;
		  //}
		  Search(); //this will look for squares in the current optimal path. Will go back once done
 80054ee:	f7ff fc85 	bl	8004dfc <Search>
		  Program_Walls_Flash();
 80054f2:	f7fe fc9f 	bl	8003e34 <Program_Walls_Flash>
		  reverse_flag = FALSE;
 80054f6:	f8c8 6000 	str.w	r6, [r8]

		  //HAL_Delay(1000);
		  //Speed_Run(fast_path);

	  } //if front wall > 1500
  HAL_Delay(500); //ONLY CHECK FOR FINGER every half second. If you check to quickly it'll never start
 80054fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80054fe:	f7fa ff37 	bl	8000370 <HAL_Delay>
  } //ready loop
 8005502:	e7a8      	b.n	8005456 <main+0x3b2>
 8005504:	20005a9c 	.word	0x20005a9c
 8005508:	40010000 	.word	0x40010000
 800550c:	20005c54 	.word	0x20005c54
 8005510:	20004638 	.word	0x20004638
 8005514:	40000c00 	.word	0x40000c00
 8005518:	200045f0 	.word	0x200045f0
 800551c:	40000800 	.word	0x40000800
 8005520:	20005ad8 	.word	0x20005ad8
 8005524:	40014000 	.word	0x40014000
 8005528:	200050fc 	.word	0x200050fc
 800552c:	40011000 	.word	0x40011000
 8005530:	2000000c 	.word	0x2000000c
 8005534:	20004390 	.word	0x20004390
 8005538:	200020a8 	.word	0x200020a8
 800553c:	40020c00 	.word	0x40020c00
 8005540:	20002048 	.word	0x20002048
 8005544:	200044e8 	.word	0x200044e8
 8005548:	2000315c 	.word	0x2000315c
 800554c:	20000010 	.word	0x20000010
 8005550:	20003168 	.word	0x20003168
 8005554:	2000569c 	.word	0x2000569c
 8005558:	20003218 	.word	0x20003218
 800555c:	2000438c 	.word	0x2000438c

08005560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005560:	b508      	push	{r3, lr}

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005562:	2003      	movs	r0, #3
 8005564:	f7fb f94c 	bl	8000800 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8005568:	2200      	movs	r2, #0
 800556a:	f06f 000b 	mvn.w	r0, #11
 800556e:	4611      	mov	r1, r2
 8005570:	f7fb f958 	bl	8000824 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8005574:	2200      	movs	r2, #0
 8005576:	f06f 000a 	mvn.w	r0, #10
 800557a:	4611      	mov	r1, r2
 800557c:	f7fb f952 	bl	8000824 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8005580:	2200      	movs	r2, #0
 8005582:	f06f 0009 	mvn.w	r0, #9
 8005586:	4611      	mov	r1, r2
 8005588:	f7fb f94c 	bl	8000824 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800558c:	2200      	movs	r2, #0
 800558e:	f06f 0004 	mvn.w	r0, #4
 8005592:	4611      	mov	r1, r2
 8005594:	f7fb f946 	bl	8000824 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8005598:	2200      	movs	r2, #0
 800559a:	f06f 0003 	mvn.w	r0, #3
 800559e:	4611      	mov	r1, r2
 80055a0:	f7fb f940 	bl	8000824 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80055a4:	2200      	movs	r2, #0
 80055a6:	f06f 0001 	mvn.w	r0, #1
 80055aa:	4611      	mov	r1, r2
 80055ac:	f7fb f93a 	bl	8000824 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80055b0:	2200      	movs	r2, #0
 80055b2:	f04f 30ff 	mov.w	r0, #4294967295
 80055b6:	4611      	mov	r1, r2

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80055b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80055bc:	f7fb b932 	b.w	8000824 <HAL_NVIC_SetPriority>

080055c0 <HAL_ADC_MspInit>:
{

  GPIO_InitTypeDef GPIO_InitStruct;
  static DMA_HandleTypeDef  hdma_adc;

  if(hadc->Instance==ADC1)
 80055c0:	6802      	ldr	r2, [r0, #0]
 80055c2:	4b2a      	ldr	r3, [pc, #168]	; (800566c <HAL_ADC_MspInit+0xac>)
 80055c4:	429a      	cmp	r2, r3

  /* USER CODE END MspInit 1 */
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80055c6:	b570      	push	{r4, r5, r6, lr}
 80055c8:	4606      	mov	r6, r0
 80055ca:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;
  static DMA_HandleTypeDef  hdma_adc;

  if(hadc->Instance==ADC1)
 80055cc:	d14b      	bne.n	8005666 <HAL_ADC_MspInit+0xa6>
  {

    __HAL_RCC_ADC1_CLK_ENABLE();
 80055ce:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055d2:	2500      	movs	r5, #0
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80055d4:	2403      	movs	r4, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055d6:	a903      	add	r1, sp, #12
  static DMA_HandleTypeDef  hdma_adc;

  if(hadc->Instance==ADC1)
  {

    __HAL_RCC_ADC1_CLK_ENABLE();
 80055d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055da:	4825      	ldr	r0, [pc, #148]	; (8005670 <HAL_ADC_MspInit+0xb0>)
  static DMA_HandleTypeDef  hdma_adc;

  if(hadc->Instance==ADC1)
  {

    __HAL_RCC_ADC1_CLK_ENABLE();
 80055dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055e0:	645a      	str	r2, [r3, #68]	; 0x44
 80055e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055e4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80055e8:	9201      	str	r2, [sp, #4]
 80055ea:	9a01      	ldr	r2, [sp, #4]

    /* Enable DMA2 clock */
    __HAL_RCC_DMA2_CLK_ENABLE();
 80055ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055ee:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80055f2:	631a      	str	r2, [r3, #48]	; 0x30
 80055f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80055f6:	9404      	str	r4, [sp, #16]
  {

    __HAL_RCC_ADC1_CLK_ENABLE();

    /* Enable DMA2 clock */
    __HAL_RCC_DMA2_CLK_ENABLE();
 80055f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055fc:	9505      	str	r5, [sp, #20]
  {

    __HAL_RCC_ADC1_CLK_ENABLE();

    /* Enable DMA2 clock */
    __HAL_RCC_DMA2_CLK_ENABLE();
 80055fe:	9302      	str	r3, [sp, #8]
 8005600:	9b02      	ldr	r3, [sp, #8]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
 8005602:	2330      	movs	r3, #48	; 0x30
 8005604:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005606:	f7fb fcf1 	bl	8000fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RF_REC_Pin|R_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800560a:	a903      	add	r1, sp, #12
 800560c:	4819      	ldr	r0, [pc, #100]	; (8005674 <HAL_ADC_MspInit+0xb4>)
    GPIO_InitStruct.Pin = L_REC_Pin|LF_REC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = RF_REC_Pin|R_REC_Pin;
 800560e:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005610:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005612:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005614:	f7fb fcea 	bl	8000fec <HAL_GPIO_Init>

    hdma_adc.Instance = DMA2_Stream0;
 8005618:	4c17      	ldr	r4, [pc, #92]	; (8005678 <HAL_ADC_MspInit+0xb8>)
 800561a:	4b18      	ldr	r3, [pc, #96]	; (800567c <HAL_ADC_MspInit+0xbc>)
    hdma_adc.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    hdma_adc.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
    hdma_adc.Init.MemBurst = DMA_MBURST_SINGLE;
    hdma_adc.Init.PeriphBurst = DMA_PBURST_SINGLE;

    HAL_DMA_Init(&hdma_adc);
 800561c:	4620      	mov	r0, r4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    hdma_adc.Instance = DMA2_Stream0;
    hdma_adc.Init.Channel  = DMA_CHANNEL_0;
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800561e:	60a5      	str	r5, [r4, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8005620:	60e5      	str	r5, [r4, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc.Init.Mode = DMA_CIRCULAR;
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_adc.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005622:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_adc.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
    hdma_adc.Init.MemBurst = DMA_MBURST_SINGLE;
 8005624:	62e5      	str	r5, [r4, #44]	; 0x2c
    hdma_adc.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005626:	6325      	str	r5, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    hdma_adc.Instance = DMA2_Stream0;
    hdma_adc.Init.Channel  = DMA_CHANNEL_0;
 8005628:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800562c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005630:	6123      	str	r3, [r4, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005632:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005636:	6163      	str	r3, [r4, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005638:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800563c:	61a3      	str	r3, [r4, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800563e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005642:	61e3      	str	r3, [r4, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8005644:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005648:	6223      	str	r3, [r4, #32]
    hdma_adc.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    hdma_adc.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800564a:	2301      	movs	r3, #1
 800564c:	62a3      	str	r3, [r4, #40]	; 0x28
    hdma_adc.Init.MemBurst = DMA_MBURST_SINGLE;
    hdma_adc.Init.PeriphBurst = DMA_PBURST_SINGLE;

    HAL_DMA_Init(&hdma_adc);
 800564e:	f7fb f96b 	bl	8000928 <HAL_DMA_Init>

      /* Associate the initialized DMA handle to the ADC handle */
    __HAL_LINKDMA(hadc, DMA_Handle, hdma_adc);
 8005652:	63b4      	str	r4, [r6, #56]	; 0x38

      /*##-4- Configure the NVIC for DMA #########################################*/
      /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8005654:	2038      	movs	r0, #56	; 0x38
 8005656:	462a      	mov	r2, r5
 8005658:	4629      	mov	r1, r5
    hdma_adc.Init.PeriphBurst = DMA_PBURST_SINGLE;

    HAL_DMA_Init(&hdma_adc);

      /* Associate the initialized DMA handle to the ADC handle */
    __HAL_LINKDMA(hadc, DMA_Handle, hdma_adc);
 800565a:	63a6      	str	r6, [r4, #56]	; 0x38

      /*##-4- Configure the NVIC for DMA #########################################*/
      /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800565c:	f7fb f8e2 	bl	8000824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8005660:	2038      	movs	r0, #56	; 0x38
 8005662:	f7fb f917 	bl	8000894 <HAL_NVIC_EnableIRQ>

  }

}
 8005666:	b008      	add	sp, #32
 8005668:	bd70      	pop	{r4, r5, r6, pc}
 800566a:	bf00      	nop
 800566c:	40012000 	.word	0x40012000
 8005670:	40020800 	.word	0x40020800
 8005674:	40020400 	.word	0x40020400
 8005678:	200044f4 	.word	0x200044f4
 800567c:	40026410 	.word	0x40026410

08005680 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8005680:	6803      	ldr	r3, [r0, #0]
 8005682:	4a29      	ldr	r2, [pc, #164]	; (8005728 <HAL_TIM_Encoder_MspInit+0xa8>)
 8005684:	4293      	cmp	r3, r2
  }

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim)
{
 8005686:	b570      	push	{r4, r5, r6, lr}
 8005688:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 800568a:	d11e      	bne.n	80056ca <HAL_TIM_Encoder_MspInit+0x4a>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800568c:	4b27      	ldr	r3, [pc, #156]	; (800572c <HAL_TIM_Encoder_MspInit+0xac>)
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = LENC_CHB_Pin|LENC_CHA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800568e:	2401      	movs	r4, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005690:	a903      	add	r1, sp, #12
 8005692:	4827      	ldr	r0, [pc, #156]	; (8005730 <HAL_TIM_Encoder_MspInit+0xb0>)
  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005694:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005696:	f042 0201 	orr.w	r2, r2, #1
 800569a:	645a      	str	r2, [r3, #68]	; 0x44
 800569c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = LENC_CHB_Pin|LENC_CHA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800569e:	9405      	str	r4, [sp, #20]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80056a0:	f003 0301 	and.w	r3, r3, #1
    */
    GPIO_InitStruct.Pin = LENC_CHB_Pin|LENC_CHA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80056a4:	9407      	str	r4, [sp, #28]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80056a6:	9301      	str	r3, [sp, #4]
 80056a8:	9b01      	ldr	r3, [sp, #4]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = LENC_CHB_Pin|LENC_CHA_Pin;
 80056aa:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80056ae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056b0:	2302      	movs	r3, #2
 80056b2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80056b4:	2303      	movs	r3, #3
 80056b6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80056b8:	f7fb fc98 	bl	8000fec <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 1);
 80056bc:	201b      	movs	r0, #27
 80056be:	4622      	mov	r2, r4
 80056c0:	2100      	movs	r1, #0
 80056c2:	f7fb f8af 	bl	8000824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80056c6:	201b      	movs	r0, #27
 80056c8:	e02a      	b.n	8005720 <HAL_TIM_Encoder_MspInit+0xa0>


  }
  else if(htim->Instance==TIM4)
 80056ca:	4a1a      	ldr	r2, [pc, #104]	; (8005734 <HAL_TIM_Encoder_MspInit+0xb4>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d129      	bne.n	8005724 <HAL_TIM_Encoder_MspInit+0xa4>
  {
      __HAL_RCC_TIM4_CLK_ENABLE();
 80056d0:	4b16      	ldr	r3, [pc, #88]	; (800572c <HAL_TIM_Encoder_MspInit+0xac>)
      /**TIM4 GPIO Configuration
      PB6     ------> TIM4_CH1
      PB7     ------> TIM4_CH2
      */
      GPIO_InitStruct.Pin = RENCA_Pin;
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056d2:	2402      	movs	r4, #2
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 80056d4:	2601      	movs	r6, #1
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80056d6:	2503      	movs	r5, #3


  }
  else if(htim->Instance==TIM4)
  {
      __HAL_RCC_TIM4_CLK_ENABLE();
 80056d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      GPIO_InitStruct.Pin = RENCA_Pin;
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
      HAL_GPIO_Init(RENCA_GPIO_Port, &GPIO_InitStruct);
 80056da:	a903      	add	r1, sp, #12
 80056dc:	4816      	ldr	r0, [pc, #88]	; (8005738 <HAL_TIM_Encoder_MspInit+0xb8>)


  }
  else if(htim->Instance==TIM4)
  {
      __HAL_RCC_TIM4_CLK_ENABLE();
 80056de:	f042 0204 	orr.w	r2, r2, #4
 80056e2:	641a      	str	r2, [r3, #64]	; 0x40
 80056e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      /**TIM4 GPIO Configuration
      PB6     ------> TIM4_CH1
      PB7     ------> TIM4_CH2
      */
      GPIO_InitStruct.Pin = RENCA_Pin;
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056e6:	9404      	str	r4, [sp, #16]


  }
  else if(htim->Instance==TIM4)
  {
      __HAL_RCC_TIM4_CLK_ENABLE();
 80056e8:	f003 0304 	and.w	r3, r3, #4
      PB6     ------> TIM4_CH1
      PB7     ------> TIM4_CH2
      */
      GPIO_InitStruct.Pin = RENCA_Pin;
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 80056ec:	9605      	str	r6, [sp, #20]
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80056ee:	9506      	str	r5, [sp, #24]


  }
  else if(htim->Instance==TIM4)
  {
      __HAL_RCC_TIM4_CLK_ENABLE();
 80056f0:	9302      	str	r3, [sp, #8]
 80056f2:	9b02      	ldr	r3, [sp, #8]

      /**TIM4 GPIO Configuration
      PB6     ------> TIM4_CH1
      PB7     ------> TIM4_CH2
      */
      GPIO_InitStruct.Pin = RENCA_Pin;
 80056f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80056f8:	9407      	str	r4, [sp, #28]

      /**TIM4 GPIO Configuration
      PB6     ------> TIM4_CH1
      PB7     ------> TIM4_CH2
      */
      GPIO_InitStruct.Pin = RENCA_Pin;
 80056fa:	9303      	str	r3, [sp, #12]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
      HAL_GPIO_Init(RENCA_GPIO_Port, &GPIO_InitStruct);
 80056fc:	f7fb fc76 	bl	8000fec <HAL_GPIO_Init>


      GPIO_InitStruct.Pin = RENCB_Pin;
 8005700:	2340      	movs	r3, #64	; 0x40
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
      HAL_GPIO_Init(RENCB_GPIO_Port, &GPIO_InitStruct);
 8005702:	a903      	add	r1, sp, #12
 8005704:	480d      	ldr	r0, [pc, #52]	; (800573c <HAL_TIM_Encoder_MspInit+0xbc>)
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
      HAL_GPIO_Init(RENCA_GPIO_Port, &GPIO_InitStruct);


      GPIO_InitStruct.Pin = RENCB_Pin;
 8005706:	9303      	str	r3, [sp, #12]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005708:	9404      	str	r4, [sp, #16]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 800570a:	9605      	str	r6, [sp, #20]
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800570c:	9506      	str	r5, [sp, #24]
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800570e:	9407      	str	r4, [sp, #28]
      HAL_GPIO_Init(RENCB_GPIO_Port, &GPIO_InitStruct);
 8005710:	f7fb fc6c 	bl	8000fec <HAL_GPIO_Init>


      HAL_NVIC_SetPriority(TIM4_IRQn, 0, 2);
 8005714:	201e      	movs	r0, #30
 8005716:	4622      	mov	r2, r4
 8005718:	2100      	movs	r1, #0
 800571a:	f7fb f883 	bl	8000824 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800571e:	201e      	movs	r0, #30
 8005720:	f7fb f8b8 	bl	8000894 <HAL_NVIC_EnableIRQ>
}
}
 8005724:	b008      	add	sp, #32
 8005726:	bd70      	pop	{r4, r5, r6, pc}
 8005728:	40010000 	.word	0x40010000
 800572c:	40023800 	.word	0x40023800
 8005730:	40021000 	.word	0x40021000
 8005734:	40000800 	.word	0x40000800
 8005738:	40020c00 	.word	0x40020c00
 800573c:	40020400 	.word	0x40020400

08005740 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM5)
 8005740:	6802      	ldr	r2, [r0, #0]
      HAL_NVIC_EnableIRQ(TIM4_IRQn);
}
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005742:	b082      	sub	sp, #8

  if(htim_base->Instance==TIM5)
 8005744:	4b07      	ldr	r3, [pc, #28]	; (8005764 <HAL_TIM_Base_MspInit+0x24>)
 8005746:	429a      	cmp	r2, r3
 8005748:	d10a      	bne.n	8005760 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800574a:	f503 330b 	add.w	r3, r3, #142336	; 0x22c00
 800574e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005750:	f042 0208 	orr.w	r2, r2, #8
 8005754:	641a      	str	r2, [r3, #64]	; 0x40
 8005756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005758:	f003 0308 	and.w	r3, r3, #8
 800575c:	9301      	str	r3, [sp, #4]
 800575e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8005760:	b002      	add	sp, #8
 8005762:	4770      	bx	lr
 8005764:	40000c00 	.word	0x40000c00

08005768 <HAL_TIM_PWM_MspInit>:
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM2)
 8005768:	6803      	ldr	r3, [r0, #0]
  /* USER CODE END TIM5_MspInit 1 */
  }

}
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800576a:	b084      	sub	sp, #16

  if(htim_pwm->Instance==TIM2)
 800576c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005770:	d10b      	bne.n	800578a <HAL_TIM_PWM_MspInit+0x22>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005772:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8005776:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005778:	f042 0201 	orr.w	r2, r2, #1
 800577c:	641a      	str	r2, [r3, #64]	; 0x40
 800577e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	9301      	str	r3, [sp, #4]
 8005786:	9b01      	ldr	r3, [sp, #4]
 8005788:	e01a      	b.n	80057c0 <HAL_TIM_PWM_MspInit+0x58>

  }
  else if(htim_pwm->Instance==TIM3)
 800578a:	4a0e      	ldr	r2, [pc, #56]	; (80057c4 <HAL_TIM_PWM_MspInit+0x5c>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d10a      	bne.n	80057a6 <HAL_TIM_PWM_MspInit+0x3e>
    {

      /* Peripheral clock enable */
      __HAL_RCC_TIM3_CLK_ENABLE();
 8005790:	4b0d      	ldr	r3, [pc, #52]	; (80057c8 <HAL_TIM_PWM_MspInit+0x60>)
 8005792:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005794:	f042 0202 	orr.w	r2, r2, #2
 8005798:	641a      	str	r2, [r3, #64]	; 0x40
 800579a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	9302      	str	r3, [sp, #8]
 80057a2:	9b02      	ldr	r3, [sp, #8]
 80057a4:	e00c      	b.n	80057c0 <HAL_TIM_PWM_MspInit+0x58>

    }

  else if(htim_pwm->Instance==TIM9)
 80057a6:	4a09      	ldr	r2, [pc, #36]	; (80057cc <HAL_TIM_PWM_MspInit+0x64>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d109      	bne.n	80057c0 <HAL_TIM_PWM_MspInit+0x58>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80057ac:	4b06      	ldr	r3, [pc, #24]	; (80057c8 <HAL_TIM_PWM_MspInit+0x60>)
 80057ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057b0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80057b4:	645a      	str	r2, [r3, #68]	; 0x44
 80057b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057bc:	9303      	str	r3, [sp, #12]
 80057be:	9b03      	ldr	r3, [sp, #12]

  }

}
 80057c0:	b004      	add	sp, #16
 80057c2:	4770      	bx	lr
 80057c4:	40000400 	.word	0x40000400
 80057c8:	40023800 	.word	0x40023800
 80057cc:	40014000 	.word	0x40014000

080057d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM2)
 80057d0:	6803      	ldr	r3, [r0, #0]
 80057d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  }

}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80057d6:	b530      	push	{r4, r5, lr}
 80057d8:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM2)
 80057da:	d10b      	bne.n	80057f4 <HAL_TIM_MspPostInit+0x24>

    /**TIM2 GPIO Configuration    
    PA0/WKUP     ------> TIM2_CH1
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = RPWM_Pin|LPWM_Pin;
 80057dc:	2305      	movs	r3, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057de:	a901      	add	r1, sp, #4
 80057e0:	481a      	ldr	r0, [pc, #104]	; (800584c <HAL_TIM_MspPostInit+0x7c>)

    /**TIM2 GPIO Configuration    
    PA0/WKUP     ------> TIM2_CH1
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = RPWM_Pin|LPWM_Pin;
 80057e2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057e4:	2302      	movs	r3, #2
 80057e6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057e8:	2300      	movs	r3, #0
 80057ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80057ec:	2301      	movs	r3, #1
 80057ee:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80057f0:	9305      	str	r3, [sp, #20]
 80057f2:	e026      	b.n	8005842 <HAL_TIM_MspPostInit+0x72>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  }

  else if(htim->Instance==TIM3)
 80057f4:	4a16      	ldr	r2, [pc, #88]	; (8005850 <HAL_TIM_MspPostInit+0x80>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d115      	bne.n	8005826 <HAL_TIM_MspPostInit+0x56>
      PC9     ------> TIM3_CH4
      PB4     ------> TIM3_CH1
      PB5     ------> TIM3_CH2
      */
      GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057fa:	2402      	movs	r4, #2
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057fc:	2500      	movs	r5, #0
      PC8     ------> TIM3_CH3
      PC9     ------> TIM3_CH4
      PB4     ------> TIM3_CH1
      PB5     ------> TIM3_CH2
      */
      GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80057fe:	f44f 7340 	mov.w	r3, #768	; 0x300
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005802:	a901      	add	r1, sp, #4
 8005804:	4813      	ldr	r0, [pc, #76]	; (8005854 <HAL_TIM_MspPostInit+0x84>)
      PC8     ------> TIM3_CH3
      PC9     ------> TIM3_CH4
      PB4     ------> TIM3_CH1
      PB5     ------> TIM3_CH2
      */
      GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005806:	9301      	str	r3, [sp, #4]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005808:	9402      	str	r4, [sp, #8]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800580a:	9503      	str	r5, [sp, #12]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800580c:	9504      	str	r5, [sp, #16]
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800580e:	9405      	str	r4, [sp, #20]
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005810:	f7fb fbec 	bl	8000fec <HAL_GPIO_Init>

      GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005814:	2330      	movs	r3, #48	; 0x30
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005816:	9402      	str	r4, [sp, #8]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005818:	9503      	str	r5, [sp, #12]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800581a:	a901      	add	r1, sp, #4
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

      GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800581c:	9301      	str	r3, [sp, #4]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800581e:	9504      	str	r5, [sp, #16]
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005820:	9405      	str	r4, [sp, #20]
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005822:	480d      	ldr	r0, [pc, #52]	; (8005858 <HAL_TIM_MspPostInit+0x88>)
 8005824:	e00d      	b.n	8005842 <HAL_TIM_MspPostInit+0x72>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
    }

  else if(htim->Instance==TIM9)
 8005826:	4a0d      	ldr	r2, [pc, #52]	; (800585c <HAL_TIM_MspPostInit+0x8c>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d10c      	bne.n	8005846 <HAL_TIM_MspPostInit+0x76>
  {
      /**TIM9 GPIO Configuration
      PE5     ------> TIM9_CH1
      */
      GPIO_InitStruct.Pin = BUZZER_Pin;
 800582c:	2320      	movs	r3, #32
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
      HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800582e:	a901      	add	r1, sp, #4
 8005830:	480b      	ldr	r0, [pc, #44]	; (8005860 <HAL_TIM_MspPostInit+0x90>)
  else if(htim->Instance==TIM9)
  {
      /**TIM9 GPIO Configuration
      PE5     ------> TIM9_CH1
      */
      GPIO_InitStruct.Pin = BUZZER_Pin;
 8005832:	9301      	str	r3, [sp, #4]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005834:	2302      	movs	r3, #2
 8005836:	9302      	str	r3, [sp, #8]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005838:	2300      	movs	r3, #0
 800583a:	9303      	str	r3, [sp, #12]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800583c:	9304      	str	r3, [sp, #16]
      GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800583e:	2303      	movs	r3, #3
 8005840:	9305      	str	r3, [sp, #20]
      HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8005842:	f7fb fbd3 	bl	8000fec <HAL_GPIO_Init>

  }

}
 8005846:	b007      	add	sp, #28
 8005848:	bd30      	pop	{r4, r5, pc}
 800584a:	bf00      	nop
 800584c:	40020000 	.word	0x40020000
 8005850:	40000400 	.word	0x40000400
 8005854:	40020800 	.word	0x40020800
 8005858:	40020400 	.word	0x40020400
 800585c:	40014000 	.word	0x40014000
 8005860:	40021000 	.word	0x40021000

08005864 <HAL_UART_MspInit>:
  /* USER CODE END TIM5_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005864:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8005866:	6802      	ldr	r2, [r0, #0]
 8005868:	4b0f      	ldr	r3, [pc, #60]	; (80058a8 <HAL_UART_MspInit+0x44>)
 800586a:	429a      	cmp	r2, r3
 800586c:	d119      	bne.n	80058a2 <HAL_UART_MspInit+0x3e>
  {

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800586e:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005872:	a901      	add	r1, sp, #4
 8005874:	480d      	ldr	r0, [pc, #52]	; (80058ac <HAL_UART_MspInit+0x48>)
  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
  {

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005876:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005878:	f042 0210 	orr.w	r2, r2, #16
 800587c:	645a      	str	r2, [r3, #68]	; 0x44
 800587e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005880:	f003 0310 	and.w	r3, r3, #16
 8005884:	9300      	str	r3, [sp, #0]
 8005886:	9b00      	ldr	r3, [sp, #0]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005888:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800588c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800588e:	2302      	movs	r3, #2
 8005890:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005892:	2301      	movs	r3, #1
 8005894:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005896:	2303      	movs	r3, #3
 8005898:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800589a:	2307      	movs	r3, #7
 800589c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800589e:	f7fb fba5 	bl	8000fec <HAL_GPIO_Init>


  }

}
 80058a2:	b007      	add	sp, #28
 80058a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80058a8:	40011000 	.word	0x40011000
 80058ac:	40020000 	.word	0x40020000

080058b0 <NMI_Handler>:
 80058b0:	4770      	bx	lr

080058b2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80058b2:	e7fe      	b.n	80058b2 <HardFault_Handler>

080058b4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80058b4:	e7fe      	b.n	80058b4 <MemManage_Handler>

080058b6 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80058b6:	e7fe      	b.n	80058b6 <BusFault_Handler>

080058b8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80058b8:	e7fe      	b.n	80058b8 <UsageFault_Handler>

080058ba <SVC_Handler>:
 80058ba:	4770      	bx	lr

080058bc <DebugMon_Handler>:
 80058bc:	4770      	bx	lr

080058be <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80058be:	4770      	bx	lr

080058c0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80058c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80058c2:	f7fa fd47 	bl	8000354 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80058c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 80058ca:	f7fb b812 	b.w	80008f2 <HAL_SYSTICK_IRQHandler>

080058ce <EXTI15_10_IRQHandler>:
  /* USER CODE END SysTick_IRQn 1 */
}

void EXTI15_10_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80058ce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80058d2:	f7fb bc7f 	b.w	80011d4 <HAL_GPIO_EXTI_IRQHandler>

080058d6 <EXTI9_5_IRQHandler>:
}

void EXTI9_5_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80058d6:	2040      	movs	r0, #64	; 0x40
 80058d8:	f7fb bc7c 	b.w	80011d4 <HAL_GPIO_EXTI_IRQHandler>

080058dc <DMA2_Stream0_IRQHandler>:
}

void DMA2_Stream0_IRQHandler(void)
{
  HAL_DMA_IRQHandler(hadc1.DMA_Handle);
 80058dc:	4b01      	ldr	r3, [pc, #4]	; (80058e4 <DMA2_Stream0_IRQHandler+0x8>)
 80058de:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80058e0:	f7fb b92c 	b.w	8000b3c <HAL_DMA_IRQHandler>
 80058e4:	200050b4 	.word	0x200050b4

080058e8 <SPI1_IRQHandler>:
}

void SPI1_IRQHandler(void)
{
  HAL_SPI_IRQHandler(&hspi1);
 80058e8:	4801      	ldr	r0, [pc, #4]	; (80058f0 <SPI1_IRQHandler+0x8>)
 80058ea:	f7fc bb17 	b.w	8001f1c <HAL_SPI_IRQHandler>
 80058ee:	bf00      	nop
 80058f0:	20005bf0 	.word	0x20005bf0

080058f4 <TIM1_CC_IRQHandler>:
}


void TIM1_CC_IRQHandler(void) {

 HAL_TIM_IRQHandler(&htim1);
 80058f4:	4801      	ldr	r0, [pc, #4]	; (80058fc <TIM1_CC_IRQHandler+0x8>)
 80058f6:	f7fc bbf8 	b.w	80020ea <HAL_TIM_IRQHandler>
 80058fa:	bf00      	nop
 80058fc:	20005a9c 	.word	0x20005a9c

08005900 <TIM4_IRQHandler>:

}

void TIM4_IRQHandler(void) {

 HAL_TIM_IRQHandler(&htim4);
 8005900:	4801      	ldr	r0, [pc, #4]	; (8005908 <TIM4_IRQHandler+0x8>)
 8005902:	f7fc bbf2 	b.w	80020ea <HAL_TIM_IRQHandler>
 8005906:	bf00      	nop
 8005908:	200045f0 	.word	0x200045f0

0800590c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800590c:	490f      	ldr	r1, [pc, #60]	; (800594c <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800590e:	2000      	movs	r0, #0
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005910:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800591c:	4b0c      	ldr	r3, [pc, #48]	; (8005950 <SystemInit+0x44>)
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	f042 0201 	orr.w	r2, r2, #1
 8005924:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005926:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800592e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005932:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005934:	4a07      	ldr	r2, [pc, #28]	; (8005954 <SystemInit+0x48>)
 8005936:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800593e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005940:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005942:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005946:	608b      	str	r3, [r1, #8]
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	e000ed00 	.word	0xe000ed00
 8005950:	40023800 	.word	0x40023800
 8005954:	24003010 	.word	0x24003010

08005958 <__libc_init_array>:
 8005958:	b570      	push	{r4, r5, r6, lr}
 800595a:	4b0e      	ldr	r3, [pc, #56]	; (8005994 <__libc_init_array+0x3c>)
 800595c:	4c0e      	ldr	r4, [pc, #56]	; (8005998 <__libc_init_array+0x40>)
 800595e:	1ae4      	subs	r4, r4, r3
 8005960:	10a4      	asrs	r4, r4, #2
 8005962:	2500      	movs	r5, #0
 8005964:	461e      	mov	r6, r3
 8005966:	42a5      	cmp	r5, r4
 8005968:	d004      	beq.n	8005974 <__libc_init_array+0x1c>
 800596a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800596e:	4798      	blx	r3
 8005970:	3501      	adds	r5, #1
 8005972:	e7f8      	b.n	8005966 <__libc_init_array+0xe>
 8005974:	f000 fc4e 	bl	8006214 <_init>
 8005978:	4c08      	ldr	r4, [pc, #32]	; (800599c <__libc_init_array+0x44>)
 800597a:	4b09      	ldr	r3, [pc, #36]	; (80059a0 <__libc_init_array+0x48>)
 800597c:	1ae4      	subs	r4, r4, r3
 800597e:	10a4      	asrs	r4, r4, #2
 8005980:	2500      	movs	r5, #0
 8005982:	461e      	mov	r6, r3
 8005984:	42a5      	cmp	r5, r4
 8005986:	d004      	beq.n	8005992 <__libc_init_array+0x3a>
 8005988:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800598c:	4798      	blx	r3
 800598e:	3501      	adds	r5, #1
 8005990:	e7f8      	b.n	8005984 <__libc_init_array+0x2c>
 8005992:	bd70      	pop	{r4, r5, r6, pc}
 8005994:	08006858 	.word	0x08006858
 8005998:	08006858 	.word	0x08006858
 800599c:	0800685c 	.word	0x0800685c
 80059a0:	08006858 	.word	0x08006858

080059a4 <siprintf>:
 80059a4:	b40e      	push	{r1, r2, r3}
 80059a6:	b500      	push	{lr}
 80059a8:	b09c      	sub	sp, #112	; 0x70
 80059aa:	f44f 7102 	mov.w	r1, #520	; 0x208
 80059ae:	ab1d      	add	r3, sp, #116	; 0x74
 80059b0:	f8ad 1014 	strh.w	r1, [sp, #20]
 80059b4:	9002      	str	r0, [sp, #8]
 80059b6:	9006      	str	r0, [sp, #24]
 80059b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80059bc:	480a      	ldr	r0, [pc, #40]	; (80059e8 <siprintf+0x44>)
 80059be:	9104      	str	r1, [sp, #16]
 80059c0:	9107      	str	r1, [sp, #28]
 80059c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80059c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80059ca:	f8ad 1016 	strh.w	r1, [sp, #22]
 80059ce:	6800      	ldr	r0, [r0, #0]
 80059d0:	9301      	str	r3, [sp, #4]
 80059d2:	a902      	add	r1, sp, #8
 80059d4:	f000 f86c 	bl	8005ab0 <_svfiprintf_r>
 80059d8:	9b02      	ldr	r3, [sp, #8]
 80059da:	2200      	movs	r2, #0
 80059dc:	701a      	strb	r2, [r3, #0]
 80059de:	b01c      	add	sp, #112	; 0x70
 80059e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80059e4:	b003      	add	sp, #12
 80059e6:	4770      	bx	lr
 80059e8:	20000078 	.word	0x20000078

080059ec <strcpy>:
 80059ec:	4603      	mov	r3, r0
 80059ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059f2:	f803 2b01 	strb.w	r2, [r3], #1
 80059f6:	2a00      	cmp	r2, #0
 80059f8:	d1f9      	bne.n	80059ee <strcpy+0x2>
 80059fa:	4770      	bx	lr

080059fc <__ssputs_r>:
 80059fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a00:	688e      	ldr	r6, [r1, #8]
 8005a02:	429e      	cmp	r6, r3
 8005a04:	4682      	mov	sl, r0
 8005a06:	460c      	mov	r4, r1
 8005a08:	4691      	mov	r9, r2
 8005a0a:	4698      	mov	r8, r3
 8005a0c:	d83e      	bhi.n	8005a8c <__ssputs_r+0x90>
 8005a0e:	898a      	ldrh	r2, [r1, #12]
 8005a10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a14:	d03a      	beq.n	8005a8c <__ssputs_r+0x90>
 8005a16:	6825      	ldr	r5, [r4, #0]
 8005a18:	6909      	ldr	r1, [r1, #16]
 8005a1a:	1a6f      	subs	r7, r5, r1
 8005a1c:	6965      	ldr	r5, [r4, #20]
 8005a1e:	2302      	movs	r3, #2
 8005a20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a24:	fb95 f5f3 	sdiv	r5, r5, r3
 8005a28:	1c7b      	adds	r3, r7, #1
 8005a2a:	4443      	add	r3, r8
 8005a2c:	429d      	cmp	r5, r3
 8005a2e:	bf38      	it	cc
 8005a30:	461d      	movcc	r5, r3
 8005a32:	0553      	lsls	r3, r2, #21
 8005a34:	d50f      	bpl.n	8005a56 <__ssputs_r+0x5a>
 8005a36:	4629      	mov	r1, r5
 8005a38:	f000 fb3e 	bl	80060b8 <_malloc_r>
 8005a3c:	4606      	mov	r6, r0
 8005a3e:	b198      	cbz	r0, 8005a68 <__ssputs_r+0x6c>
 8005a40:	463a      	mov	r2, r7
 8005a42:	6921      	ldr	r1, [r4, #16]
 8005a44:	f000 fac4 	bl	8005fd0 <memcpy>
 8005a48:	89a3      	ldrh	r3, [r4, #12]
 8005a4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a52:	81a3      	strh	r3, [r4, #12]
 8005a54:	e013      	b.n	8005a7e <__ssputs_r+0x82>
 8005a56:	462a      	mov	r2, r5
 8005a58:	f000 fb8c 	bl	8006174 <_realloc_r>
 8005a5c:	4606      	mov	r6, r0
 8005a5e:	b970      	cbnz	r0, 8005a7e <__ssputs_r+0x82>
 8005a60:	6921      	ldr	r1, [r4, #16]
 8005a62:	4650      	mov	r0, sl
 8005a64:	f000 fada 	bl	800601c <_free_r>
 8005a68:	230c      	movs	r3, #12
 8005a6a:	f8ca 3000 	str.w	r3, [sl]
 8005a6e:	89a3      	ldrh	r3, [r4, #12]
 8005a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a74:	81a3      	strh	r3, [r4, #12]
 8005a76:	f04f 30ff 	mov.w	r0, #4294967295
 8005a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a7e:	6126      	str	r6, [r4, #16]
 8005a80:	6165      	str	r5, [r4, #20]
 8005a82:	443e      	add	r6, r7
 8005a84:	1bed      	subs	r5, r5, r7
 8005a86:	6026      	str	r6, [r4, #0]
 8005a88:	60a5      	str	r5, [r4, #8]
 8005a8a:	4646      	mov	r6, r8
 8005a8c:	4546      	cmp	r6, r8
 8005a8e:	bf28      	it	cs
 8005a90:	4646      	movcs	r6, r8
 8005a92:	4632      	mov	r2, r6
 8005a94:	4649      	mov	r1, r9
 8005a96:	6820      	ldr	r0, [r4, #0]
 8005a98:	f000 faa5 	bl	8005fe6 <memmove>
 8005a9c:	68a3      	ldr	r3, [r4, #8]
 8005a9e:	1b9b      	subs	r3, r3, r6
 8005aa0:	60a3      	str	r3, [r4, #8]
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	441e      	add	r6, r3
 8005aa6:	6026      	str	r6, [r4, #0]
 8005aa8:	2000      	movs	r0, #0
 8005aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08005ab0 <_svfiprintf_r>:
 8005ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ab4:	b09d      	sub	sp, #116	; 0x74
 8005ab6:	4680      	mov	r8, r0
 8005ab8:	9303      	str	r3, [sp, #12]
 8005aba:	898b      	ldrh	r3, [r1, #12]
 8005abc:	061c      	lsls	r4, r3, #24
 8005abe:	460d      	mov	r5, r1
 8005ac0:	4616      	mov	r6, r2
 8005ac2:	d50d      	bpl.n	8005ae0 <_svfiprintf_r+0x30>
 8005ac4:	690b      	ldr	r3, [r1, #16]
 8005ac6:	b95b      	cbnz	r3, 8005ae0 <_svfiprintf_r+0x30>
 8005ac8:	2140      	movs	r1, #64	; 0x40
 8005aca:	f000 faf5 	bl	80060b8 <_malloc_r>
 8005ace:	6028      	str	r0, [r5, #0]
 8005ad0:	6128      	str	r0, [r5, #16]
 8005ad2:	b918      	cbnz	r0, 8005adc <_svfiprintf_r+0x2c>
 8005ad4:	230c      	movs	r3, #12
 8005ad6:	f8c8 3000 	str.w	r3, [r8]
 8005ada:	e0cd      	b.n	8005c78 <_svfiprintf_r+0x1c8>
 8005adc:	2340      	movs	r3, #64	; 0x40
 8005ade:	616b      	str	r3, [r5, #20]
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ae4:	2320      	movs	r3, #32
 8005ae6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005aea:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8005c88 <_svfiprintf_r+0x1d8>
 8005aee:	2330      	movs	r3, #48	; 0x30
 8005af0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005af4:	4637      	mov	r7, r6
 8005af6:	463c      	mov	r4, r7
 8005af8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005afc:	b91b      	cbnz	r3, 8005b06 <_svfiprintf_r+0x56>
 8005afe:	ebb7 0906 	subs.w	r9, r7, r6
 8005b02:	d010      	beq.n	8005b26 <_svfiprintf_r+0x76>
 8005b04:	e003      	b.n	8005b0e <_svfiprintf_r+0x5e>
 8005b06:	2b25      	cmp	r3, #37	; 0x25
 8005b08:	d0f9      	beq.n	8005afe <_svfiprintf_r+0x4e>
 8005b0a:	4627      	mov	r7, r4
 8005b0c:	e7f3      	b.n	8005af6 <_svfiprintf_r+0x46>
 8005b0e:	464b      	mov	r3, r9
 8005b10:	4632      	mov	r2, r6
 8005b12:	4629      	mov	r1, r5
 8005b14:	4640      	mov	r0, r8
 8005b16:	f7ff ff71 	bl	80059fc <__ssputs_r>
 8005b1a:	3001      	adds	r0, #1
 8005b1c:	f000 80a7 	beq.w	8005c6e <_svfiprintf_r+0x1be>
 8005b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b22:	444b      	add	r3, r9
 8005b24:	9309      	str	r3, [sp, #36]	; 0x24
 8005b26:	783b      	ldrb	r3, [r7, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f000 80a0 	beq.w	8005c6e <_svfiprintf_r+0x1be>
 8005b2e:	2300      	movs	r3, #0
 8005b30:	f04f 32ff 	mov.w	r2, #4294967295
 8005b34:	9304      	str	r3, [sp, #16]
 8005b36:	9307      	str	r3, [sp, #28]
 8005b38:	9205      	str	r2, [sp, #20]
 8005b3a:	9306      	str	r3, [sp, #24]
 8005b3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b40:	931a      	str	r3, [sp, #104]	; 0x68
 8005b42:	2601      	movs	r6, #1
 8005b44:	2205      	movs	r2, #5
 8005b46:	7821      	ldrb	r1, [r4, #0]
 8005b48:	484e      	ldr	r0, [pc, #312]	; (8005c84 <_svfiprintf_r+0x1d4>)
 8005b4a:	f7fa fb69 	bl	8000220 <memchr>
 8005b4e:	1c67      	adds	r7, r4, #1
 8005b50:	9b04      	ldr	r3, [sp, #16]
 8005b52:	b138      	cbz	r0, 8005b64 <_svfiprintf_r+0xb4>
 8005b54:	4a4b      	ldr	r2, [pc, #300]	; (8005c84 <_svfiprintf_r+0x1d4>)
 8005b56:	1a80      	subs	r0, r0, r2
 8005b58:	fa06 f000 	lsl.w	r0, r6, r0
 8005b5c:	4318      	orrs	r0, r3
 8005b5e:	9004      	str	r0, [sp, #16]
 8005b60:	463c      	mov	r4, r7
 8005b62:	e7ef      	b.n	8005b44 <_svfiprintf_r+0x94>
 8005b64:	06d9      	lsls	r1, r3, #27
 8005b66:	bf44      	itt	mi
 8005b68:	2220      	movmi	r2, #32
 8005b6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005b6e:	071a      	lsls	r2, r3, #28
 8005b70:	bf44      	itt	mi
 8005b72:	222b      	movmi	r2, #43	; 0x2b
 8005b74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005b78:	7822      	ldrb	r2, [r4, #0]
 8005b7a:	2a2a      	cmp	r2, #42	; 0x2a
 8005b7c:	d003      	beq.n	8005b86 <_svfiprintf_r+0xd6>
 8005b7e:	9a07      	ldr	r2, [sp, #28]
 8005b80:	2100      	movs	r1, #0
 8005b82:	200a      	movs	r0, #10
 8005b84:	e00b      	b.n	8005b9e <_svfiprintf_r+0xee>
 8005b86:	9a03      	ldr	r2, [sp, #12]
 8005b88:	1d11      	adds	r1, r2, #4
 8005b8a:	6812      	ldr	r2, [r2, #0]
 8005b8c:	9103      	str	r1, [sp, #12]
 8005b8e:	2a00      	cmp	r2, #0
 8005b90:	da10      	bge.n	8005bb4 <_svfiprintf_r+0x104>
 8005b92:	4252      	negs	r2, r2
 8005b94:	f043 0002 	orr.w	r0, r3, #2
 8005b98:	9207      	str	r2, [sp, #28]
 8005b9a:	9004      	str	r0, [sp, #16]
 8005b9c:	e00b      	b.n	8005bb6 <_svfiprintf_r+0x106>
 8005b9e:	4627      	mov	r7, r4
 8005ba0:	3401      	adds	r4, #1
 8005ba2:	783b      	ldrb	r3, [r7, #0]
 8005ba4:	3b30      	subs	r3, #48	; 0x30
 8005ba6:	2b09      	cmp	r3, #9
 8005ba8:	d803      	bhi.n	8005bb2 <_svfiprintf_r+0x102>
 8005baa:	fb00 3202 	mla	r2, r0, r2, r3
 8005bae:	2101      	movs	r1, #1
 8005bb0:	e7f5      	b.n	8005b9e <_svfiprintf_r+0xee>
 8005bb2:	b101      	cbz	r1, 8005bb6 <_svfiprintf_r+0x106>
 8005bb4:	9207      	str	r2, [sp, #28]
 8005bb6:	783b      	ldrb	r3, [r7, #0]
 8005bb8:	2b2e      	cmp	r3, #46	; 0x2e
 8005bba:	d11e      	bne.n	8005bfa <_svfiprintf_r+0x14a>
 8005bbc:	787b      	ldrb	r3, [r7, #1]
 8005bbe:	2b2a      	cmp	r3, #42	; 0x2a
 8005bc0:	d10a      	bne.n	8005bd8 <_svfiprintf_r+0x128>
 8005bc2:	9b03      	ldr	r3, [sp, #12]
 8005bc4:	1d1a      	adds	r2, r3, #4
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	9203      	str	r2, [sp, #12]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	bfb8      	it	lt
 8005bce:	f04f 33ff 	movlt.w	r3, #4294967295
 8005bd2:	3702      	adds	r7, #2
 8005bd4:	9305      	str	r3, [sp, #20]
 8005bd6:	e010      	b.n	8005bfa <_svfiprintf_r+0x14a>
 8005bd8:	2300      	movs	r3, #0
 8005bda:	9305      	str	r3, [sp, #20]
 8005bdc:	1c78      	adds	r0, r7, #1
 8005bde:	4619      	mov	r1, r3
 8005be0:	240a      	movs	r4, #10
 8005be2:	4607      	mov	r7, r0
 8005be4:	3001      	adds	r0, #1
 8005be6:	783a      	ldrb	r2, [r7, #0]
 8005be8:	3a30      	subs	r2, #48	; 0x30
 8005bea:	2a09      	cmp	r2, #9
 8005bec:	d803      	bhi.n	8005bf6 <_svfiprintf_r+0x146>
 8005bee:	fb04 2101 	mla	r1, r4, r1, r2
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e7f5      	b.n	8005be2 <_svfiprintf_r+0x132>
 8005bf6:	b103      	cbz	r3, 8005bfa <_svfiprintf_r+0x14a>
 8005bf8:	9105      	str	r1, [sp, #20]
 8005bfa:	2203      	movs	r2, #3
 8005bfc:	7839      	ldrb	r1, [r7, #0]
 8005bfe:	4822      	ldr	r0, [pc, #136]	; (8005c88 <_svfiprintf_r+0x1d8>)
 8005c00:	f7fa fb0e 	bl	8000220 <memchr>
 8005c04:	b140      	cbz	r0, 8005c18 <_svfiprintf_r+0x168>
 8005c06:	2340      	movs	r3, #64	; 0x40
 8005c08:	ebcb 0000 	rsb	r0, fp, r0
 8005c0c:	fa03 f000 	lsl.w	r0, r3, r0
 8005c10:	9b04      	ldr	r3, [sp, #16]
 8005c12:	4318      	orrs	r0, r3
 8005c14:	9004      	str	r0, [sp, #16]
 8005c16:	3701      	adds	r7, #1
 8005c18:	7839      	ldrb	r1, [r7, #0]
 8005c1a:	481c      	ldr	r0, [pc, #112]	; (8005c8c <_svfiprintf_r+0x1dc>)
 8005c1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c20:	2206      	movs	r2, #6
 8005c22:	1c7e      	adds	r6, r7, #1
 8005c24:	f7fa fafc 	bl	8000220 <memchr>
 8005c28:	b188      	cbz	r0, 8005c4e <_svfiprintf_r+0x19e>
 8005c2a:	4b19      	ldr	r3, [pc, #100]	; (8005c90 <_svfiprintf_r+0x1e0>)
 8005c2c:	b933      	cbnz	r3, 8005c3c <_svfiprintf_r+0x18c>
 8005c2e:	9b03      	ldr	r3, [sp, #12]
 8005c30:	3307      	adds	r3, #7
 8005c32:	f023 0307 	bic.w	r3, r3, #7
 8005c36:	3308      	adds	r3, #8
 8005c38:	9303      	str	r3, [sp, #12]
 8005c3a:	e014      	b.n	8005c66 <_svfiprintf_r+0x1b6>
 8005c3c:	ab03      	add	r3, sp, #12
 8005c3e:	9300      	str	r3, [sp, #0]
 8005c40:	462a      	mov	r2, r5
 8005c42:	4b14      	ldr	r3, [pc, #80]	; (8005c94 <_svfiprintf_r+0x1e4>)
 8005c44:	a904      	add	r1, sp, #16
 8005c46:	4640      	mov	r0, r8
 8005c48:	f3af 8000 	nop.w
 8005c4c:	e007      	b.n	8005c5e <_svfiprintf_r+0x1ae>
 8005c4e:	ab03      	add	r3, sp, #12
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	462a      	mov	r2, r5
 8005c54:	4b0f      	ldr	r3, [pc, #60]	; (8005c94 <_svfiprintf_r+0x1e4>)
 8005c56:	a904      	add	r1, sp, #16
 8005c58:	4640      	mov	r0, r8
 8005c5a:	f000 f893 	bl	8005d84 <_printf_i>
 8005c5e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005c62:	4682      	mov	sl, r0
 8005c64:	d003      	beq.n	8005c6e <_svfiprintf_r+0x1be>
 8005c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c68:	4453      	add	r3, sl
 8005c6a:	9309      	str	r3, [sp, #36]	; 0x24
 8005c6c:	e742      	b.n	8005af4 <_svfiprintf_r+0x44>
 8005c6e:	89ab      	ldrh	r3, [r5, #12]
 8005c70:	065b      	lsls	r3, r3, #25
 8005c72:	d401      	bmi.n	8005c78 <_svfiprintf_r+0x1c8>
 8005c74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c76:	e001      	b.n	8005c7c <_svfiprintf_r+0x1cc>
 8005c78:	f04f 30ff 	mov.w	r0, #4294967295
 8005c7c:	b01d      	add	sp, #116	; 0x74
 8005c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c82:	bf00      	nop
 8005c84:	08006822 	.word	0x08006822
 8005c88:	08006828 	.word	0x08006828
 8005c8c:	0800682c 	.word	0x0800682c
 8005c90:	00000000 	.word	0x00000000
 8005c94:	080059fd 	.word	0x080059fd

08005c98 <_printf_common>:
 8005c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c9c:	4691      	mov	r9, r2
 8005c9e:	461f      	mov	r7, r3
 8005ca0:	690a      	ldr	r2, [r1, #16]
 8005ca2:	688b      	ldr	r3, [r1, #8]
 8005ca4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	bfb8      	it	lt
 8005cac:	4613      	movlt	r3, r2
 8005cae:	f8c9 3000 	str.w	r3, [r9]
 8005cb2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005cb6:	4606      	mov	r6, r0
 8005cb8:	460c      	mov	r4, r1
 8005cba:	b112      	cbz	r2, 8005cc2 <_printf_common+0x2a>
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	f8c9 3000 	str.w	r3, [r9]
 8005cc2:	6823      	ldr	r3, [r4, #0]
 8005cc4:	0699      	lsls	r1, r3, #26
 8005cc6:	bf42      	ittt	mi
 8005cc8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005ccc:	3302      	addmi	r3, #2
 8005cce:	f8c9 3000 	strmi.w	r3, [r9]
 8005cd2:	6825      	ldr	r5, [r4, #0]
 8005cd4:	f015 0506 	ands.w	r5, r5, #6
 8005cd8:	d110      	bne.n	8005cfc <_printf_common+0x64>
 8005cda:	f104 0a19 	add.w	sl, r4, #25
 8005cde:	e007      	b.n	8005cf0 <_printf_common+0x58>
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	4652      	mov	r2, sl
 8005ce4:	4639      	mov	r1, r7
 8005ce6:	4630      	mov	r0, r6
 8005ce8:	47c0      	blx	r8
 8005cea:	3001      	adds	r0, #1
 8005cec:	d01a      	beq.n	8005d24 <_printf_common+0x8c>
 8005cee:	3501      	adds	r5, #1
 8005cf0:	68e3      	ldr	r3, [r4, #12]
 8005cf2:	f8d9 2000 	ldr.w	r2, [r9]
 8005cf6:	1a9b      	subs	r3, r3, r2
 8005cf8:	429d      	cmp	r5, r3
 8005cfa:	dbf1      	blt.n	8005ce0 <_printf_common+0x48>
 8005cfc:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005d00:	6822      	ldr	r2, [r4, #0]
 8005d02:	3300      	adds	r3, #0
 8005d04:	bf18      	it	ne
 8005d06:	2301      	movne	r3, #1
 8005d08:	0692      	lsls	r2, r2, #26
 8005d0a:	d50f      	bpl.n	8005d2c <_printf_common+0x94>
 8005d0c:	18e1      	adds	r1, r4, r3
 8005d0e:	1c5a      	adds	r2, r3, #1
 8005d10:	2030      	movs	r0, #48	; 0x30
 8005d12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d16:	4422      	add	r2, r4
 8005d18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d20:	3302      	adds	r3, #2
 8005d22:	e003      	b.n	8005d2c <_printf_common+0x94>
 8005d24:	f04f 30ff 	mov.w	r0, #4294967295
 8005d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d30:	4639      	mov	r1, r7
 8005d32:	4630      	mov	r0, r6
 8005d34:	47c0      	blx	r8
 8005d36:	3001      	adds	r0, #1
 8005d38:	d0f4      	beq.n	8005d24 <_printf_common+0x8c>
 8005d3a:	6822      	ldr	r2, [r4, #0]
 8005d3c:	f8d9 5000 	ldr.w	r5, [r9]
 8005d40:	68e3      	ldr	r3, [r4, #12]
 8005d42:	f002 0206 	and.w	r2, r2, #6
 8005d46:	2a04      	cmp	r2, #4
 8005d48:	bf08      	it	eq
 8005d4a:	1b5d      	subeq	r5, r3, r5
 8005d4c:	6922      	ldr	r2, [r4, #16]
 8005d4e:	68a3      	ldr	r3, [r4, #8]
 8005d50:	bf0c      	ite	eq
 8005d52:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d56:	2500      	movne	r5, #0
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	bfc4      	itt	gt
 8005d5c:	1a9b      	subgt	r3, r3, r2
 8005d5e:	18ed      	addgt	r5, r5, r3
 8005d60:	f04f 0900 	mov.w	r9, #0
 8005d64:	341a      	adds	r4, #26
 8005d66:	454d      	cmp	r5, r9
 8005d68:	d009      	beq.n	8005d7e <_printf_common+0xe6>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	4622      	mov	r2, r4
 8005d6e:	4639      	mov	r1, r7
 8005d70:	4630      	mov	r0, r6
 8005d72:	47c0      	blx	r8
 8005d74:	3001      	adds	r0, #1
 8005d76:	d0d5      	beq.n	8005d24 <_printf_common+0x8c>
 8005d78:	f109 0901 	add.w	r9, r9, #1
 8005d7c:	e7f3      	b.n	8005d66 <_printf_common+0xce>
 8005d7e:	2000      	movs	r0, #0
 8005d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005d84 <_printf_i>:
 8005d84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d88:	4617      	mov	r7, r2
 8005d8a:	7e0a      	ldrb	r2, [r1, #24]
 8005d8c:	b085      	sub	sp, #20
 8005d8e:	2a6e      	cmp	r2, #110	; 0x6e
 8005d90:	4698      	mov	r8, r3
 8005d92:	4606      	mov	r6, r0
 8005d94:	460c      	mov	r4, r1
 8005d96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d98:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005d9c:	f000 80ae 	beq.w	8005efc <_printf_i+0x178>
 8005da0:	d811      	bhi.n	8005dc6 <_printf_i+0x42>
 8005da2:	2a63      	cmp	r2, #99	; 0x63
 8005da4:	d022      	beq.n	8005dec <_printf_i+0x68>
 8005da6:	d809      	bhi.n	8005dbc <_printf_i+0x38>
 8005da8:	2a00      	cmp	r2, #0
 8005daa:	f000 80bb 	beq.w	8005f24 <_printf_i+0x1a0>
 8005dae:	2a58      	cmp	r2, #88	; 0x58
 8005db0:	f040 80ca 	bne.w	8005f48 <_printf_i+0x1c4>
 8005db4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005db8:	4983      	ldr	r1, [pc, #524]	; (8005fc8 <_printf_i+0x244>)
 8005dba:	e055      	b.n	8005e68 <_printf_i+0xe4>
 8005dbc:	2a64      	cmp	r2, #100	; 0x64
 8005dbe:	d01e      	beq.n	8005dfe <_printf_i+0x7a>
 8005dc0:	2a69      	cmp	r2, #105	; 0x69
 8005dc2:	d01c      	beq.n	8005dfe <_printf_i+0x7a>
 8005dc4:	e0c0      	b.n	8005f48 <_printf_i+0x1c4>
 8005dc6:	2a73      	cmp	r2, #115	; 0x73
 8005dc8:	f000 80b0 	beq.w	8005f2c <_printf_i+0x1a8>
 8005dcc:	d809      	bhi.n	8005de2 <_printf_i+0x5e>
 8005dce:	2a6f      	cmp	r2, #111	; 0x6f
 8005dd0:	d02e      	beq.n	8005e30 <_printf_i+0xac>
 8005dd2:	2a70      	cmp	r2, #112	; 0x70
 8005dd4:	f040 80b8 	bne.w	8005f48 <_printf_i+0x1c4>
 8005dd8:	680a      	ldr	r2, [r1, #0]
 8005dda:	f042 0220 	orr.w	r2, r2, #32
 8005dde:	600a      	str	r2, [r1, #0]
 8005de0:	e03e      	b.n	8005e60 <_printf_i+0xdc>
 8005de2:	2a75      	cmp	r2, #117	; 0x75
 8005de4:	d024      	beq.n	8005e30 <_printf_i+0xac>
 8005de6:	2a78      	cmp	r2, #120	; 0x78
 8005de8:	d03a      	beq.n	8005e60 <_printf_i+0xdc>
 8005dea:	e0ad      	b.n	8005f48 <_printf_i+0x1c4>
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8005df2:	1d11      	adds	r1, r2, #4
 8005df4:	6019      	str	r1, [r3, #0]
 8005df6:	6813      	ldr	r3, [r2, #0]
 8005df8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005dfc:	e0a8      	b.n	8005f50 <_printf_i+0x1cc>
 8005dfe:	6821      	ldr	r1, [r4, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005e06:	d002      	beq.n	8005e0e <_printf_i+0x8a>
 8005e08:	1d11      	adds	r1, r2, #4
 8005e0a:	6019      	str	r1, [r3, #0]
 8005e0c:	e008      	b.n	8005e20 <_printf_i+0x9c>
 8005e0e:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005e12:	f102 0104 	add.w	r1, r2, #4
 8005e16:	6019      	str	r1, [r3, #0]
 8005e18:	d002      	beq.n	8005e20 <_printf_i+0x9c>
 8005e1a:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005e1e:	e000      	b.n	8005e22 <_printf_i+0x9e>
 8005e20:	6813      	ldr	r3, [r2, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	da3c      	bge.n	8005ea0 <_printf_i+0x11c>
 8005e26:	222d      	movs	r2, #45	; 0x2d
 8005e28:	425b      	negs	r3, r3
 8005e2a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005e2e:	e037      	b.n	8005ea0 <_printf_i+0x11c>
 8005e30:	6821      	ldr	r1, [r4, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005e38:	d002      	beq.n	8005e40 <_printf_i+0xbc>
 8005e3a:	1d11      	adds	r1, r2, #4
 8005e3c:	6019      	str	r1, [r3, #0]
 8005e3e:	e007      	b.n	8005e50 <_printf_i+0xcc>
 8005e40:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005e44:	f102 0104 	add.w	r1, r2, #4
 8005e48:	6019      	str	r1, [r3, #0]
 8005e4a:	d001      	beq.n	8005e50 <_printf_i+0xcc>
 8005e4c:	8813      	ldrh	r3, [r2, #0]
 8005e4e:	e000      	b.n	8005e52 <_printf_i+0xce>
 8005e50:	6813      	ldr	r3, [r2, #0]
 8005e52:	7e22      	ldrb	r2, [r4, #24]
 8005e54:	495c      	ldr	r1, [pc, #368]	; (8005fc8 <_printf_i+0x244>)
 8005e56:	2a6f      	cmp	r2, #111	; 0x6f
 8005e58:	bf14      	ite	ne
 8005e5a:	220a      	movne	r2, #10
 8005e5c:	2208      	moveq	r2, #8
 8005e5e:	e01b      	b.n	8005e98 <_printf_i+0x114>
 8005e60:	2278      	movs	r2, #120	; 0x78
 8005e62:	495a      	ldr	r1, [pc, #360]	; (8005fcc <_printf_i+0x248>)
 8005e64:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005e68:	6822      	ldr	r2, [r4, #0]
 8005e6a:	6818      	ldr	r0, [r3, #0]
 8005e6c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005e70:	f100 0504 	add.w	r5, r0, #4
 8005e74:	601d      	str	r5, [r3, #0]
 8005e76:	d103      	bne.n	8005e80 <_printf_i+0xfc>
 8005e78:	0655      	lsls	r5, r2, #25
 8005e7a:	d501      	bpl.n	8005e80 <_printf_i+0xfc>
 8005e7c:	8803      	ldrh	r3, [r0, #0]
 8005e7e:	e000      	b.n	8005e82 <_printf_i+0xfe>
 8005e80:	6803      	ldr	r3, [r0, #0]
 8005e82:	07d0      	lsls	r0, r2, #31
 8005e84:	bf44      	itt	mi
 8005e86:	f042 0220 	orrmi.w	r2, r2, #32
 8005e8a:	6022      	strmi	r2, [r4, #0]
 8005e8c:	b91b      	cbnz	r3, 8005e96 <_printf_i+0x112>
 8005e8e:	6822      	ldr	r2, [r4, #0]
 8005e90:	f022 0220 	bic.w	r2, r2, #32
 8005e94:	6022      	str	r2, [r4, #0]
 8005e96:	2210      	movs	r2, #16
 8005e98:	2000      	movs	r0, #0
 8005e9a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005e9e:	e001      	b.n	8005ea4 <_printf_i+0x120>
 8005ea0:	4949      	ldr	r1, [pc, #292]	; (8005fc8 <_printf_i+0x244>)
 8005ea2:	220a      	movs	r2, #10
 8005ea4:	6865      	ldr	r5, [r4, #4]
 8005ea6:	60a5      	str	r5, [r4, #8]
 8005ea8:	2d00      	cmp	r5, #0
 8005eaa:	db08      	blt.n	8005ebe <_printf_i+0x13a>
 8005eac:	6820      	ldr	r0, [r4, #0]
 8005eae:	f020 0004 	bic.w	r0, r0, #4
 8005eb2:	6020      	str	r0, [r4, #0]
 8005eb4:	b92b      	cbnz	r3, 8005ec2 <_printf_i+0x13e>
 8005eb6:	2d00      	cmp	r5, #0
 8005eb8:	d17d      	bne.n	8005fb6 <_printf_i+0x232>
 8005eba:	4675      	mov	r5, lr
 8005ebc:	e00c      	b.n	8005ed8 <_printf_i+0x154>
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d079      	beq.n	8005fb6 <_printf_i+0x232>
 8005ec2:	4675      	mov	r5, lr
 8005ec4:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ec8:	fb02 3310 	mls	r3, r2, r0, r3
 8005ecc:	5ccb      	ldrb	r3, [r1, r3]
 8005ece:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	d1f5      	bne.n	8005ec4 <_printf_i+0x140>
 8005ed8:	2a08      	cmp	r2, #8
 8005eda:	d10b      	bne.n	8005ef4 <_printf_i+0x170>
 8005edc:	6823      	ldr	r3, [r4, #0]
 8005ede:	07da      	lsls	r2, r3, #31
 8005ee0:	d508      	bpl.n	8005ef4 <_printf_i+0x170>
 8005ee2:	6923      	ldr	r3, [r4, #16]
 8005ee4:	6862      	ldr	r2, [r4, #4]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	bfde      	ittt	le
 8005eea:	2330      	movle	r3, #48	; 0x30
 8005eec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ef0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ef4:	ebc5 030e 	rsb	r3, r5, lr
 8005ef8:	6123      	str	r3, [r4, #16]
 8005efa:	e02e      	b.n	8005f5a <_printf_i+0x1d6>
 8005efc:	6808      	ldr	r0, [r1, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	6949      	ldr	r1, [r1, #20]
 8005f02:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005f06:	d003      	beq.n	8005f10 <_printf_i+0x18c>
 8005f08:	1d10      	adds	r0, r2, #4
 8005f0a:	6018      	str	r0, [r3, #0]
 8005f0c:	6813      	ldr	r3, [r2, #0]
 8005f0e:	e008      	b.n	8005f22 <_printf_i+0x19e>
 8005f10:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f14:	f102 0004 	add.w	r0, r2, #4
 8005f18:	6018      	str	r0, [r3, #0]
 8005f1a:	6813      	ldr	r3, [r2, #0]
 8005f1c:	d001      	beq.n	8005f22 <_printf_i+0x19e>
 8005f1e:	8019      	strh	r1, [r3, #0]
 8005f20:	e000      	b.n	8005f24 <_printf_i+0x1a0>
 8005f22:	6019      	str	r1, [r3, #0]
 8005f24:	2300      	movs	r3, #0
 8005f26:	6123      	str	r3, [r4, #16]
 8005f28:	4675      	mov	r5, lr
 8005f2a:	e016      	b.n	8005f5a <_printf_i+0x1d6>
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	1d11      	adds	r1, r2, #4
 8005f30:	6019      	str	r1, [r3, #0]
 8005f32:	6815      	ldr	r5, [r2, #0]
 8005f34:	6862      	ldr	r2, [r4, #4]
 8005f36:	2100      	movs	r1, #0
 8005f38:	4628      	mov	r0, r5
 8005f3a:	f7fa f971 	bl	8000220 <memchr>
 8005f3e:	b108      	cbz	r0, 8005f44 <_printf_i+0x1c0>
 8005f40:	1b40      	subs	r0, r0, r5
 8005f42:	6060      	str	r0, [r4, #4]
 8005f44:	6863      	ldr	r3, [r4, #4]
 8005f46:	e004      	b.n	8005f52 <_printf_i+0x1ce>
 8005f48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f4c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005f50:	2301      	movs	r3, #1
 8005f52:	6123      	str	r3, [r4, #16]
 8005f54:	2300      	movs	r3, #0
 8005f56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f5a:	f8cd 8000 	str.w	r8, [sp]
 8005f5e:	463b      	mov	r3, r7
 8005f60:	aa03      	add	r2, sp, #12
 8005f62:	4621      	mov	r1, r4
 8005f64:	4630      	mov	r0, r6
 8005f66:	f7ff fe97 	bl	8005c98 <_printf_common>
 8005f6a:	3001      	adds	r0, #1
 8005f6c:	d102      	bne.n	8005f74 <_printf_i+0x1f0>
 8005f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f72:	e026      	b.n	8005fc2 <_printf_i+0x23e>
 8005f74:	6923      	ldr	r3, [r4, #16]
 8005f76:	462a      	mov	r2, r5
 8005f78:	4639      	mov	r1, r7
 8005f7a:	4630      	mov	r0, r6
 8005f7c:	47c0      	blx	r8
 8005f7e:	3001      	adds	r0, #1
 8005f80:	d0f5      	beq.n	8005f6e <_printf_i+0x1ea>
 8005f82:	6823      	ldr	r3, [r4, #0]
 8005f84:	079b      	lsls	r3, r3, #30
 8005f86:	d510      	bpl.n	8005faa <_printf_i+0x226>
 8005f88:	2500      	movs	r5, #0
 8005f8a:	f104 0919 	add.w	r9, r4, #25
 8005f8e:	e007      	b.n	8005fa0 <_printf_i+0x21c>
 8005f90:	2301      	movs	r3, #1
 8005f92:	464a      	mov	r2, r9
 8005f94:	4639      	mov	r1, r7
 8005f96:	4630      	mov	r0, r6
 8005f98:	47c0      	blx	r8
 8005f9a:	3001      	adds	r0, #1
 8005f9c:	d0e7      	beq.n	8005f6e <_printf_i+0x1ea>
 8005f9e:	3501      	adds	r5, #1
 8005fa0:	68e3      	ldr	r3, [r4, #12]
 8005fa2:	9a03      	ldr	r2, [sp, #12]
 8005fa4:	1a9b      	subs	r3, r3, r2
 8005fa6:	429d      	cmp	r5, r3
 8005fa8:	dbf2      	blt.n	8005f90 <_printf_i+0x20c>
 8005faa:	68e0      	ldr	r0, [r4, #12]
 8005fac:	9b03      	ldr	r3, [sp, #12]
 8005fae:	4298      	cmp	r0, r3
 8005fb0:	bfb8      	it	lt
 8005fb2:	4618      	movlt	r0, r3
 8005fb4:	e005      	b.n	8005fc2 <_printf_i+0x23e>
 8005fb6:	780b      	ldrb	r3, [r1, #0]
 8005fb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fc0:	e78a      	b.n	8005ed8 <_printf_i+0x154>
 8005fc2:	b005      	add	sp, #20
 8005fc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005fc8:	08006833 	.word	0x08006833
 8005fcc:	08006844 	.word	0x08006844

08005fd0 <memcpy>:
 8005fd0:	b510      	push	{r4, lr}
 8005fd2:	1e43      	subs	r3, r0, #1
 8005fd4:	440a      	add	r2, r1
 8005fd6:	4291      	cmp	r1, r2
 8005fd8:	d004      	beq.n	8005fe4 <memcpy+0x14>
 8005fda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fe2:	e7f8      	b.n	8005fd6 <memcpy+0x6>
 8005fe4:	bd10      	pop	{r4, pc}

08005fe6 <memmove>:
 8005fe6:	4288      	cmp	r0, r1
 8005fe8:	b510      	push	{r4, lr}
 8005fea:	eb01 0302 	add.w	r3, r1, r2
 8005fee:	d801      	bhi.n	8005ff4 <memmove+0xe>
 8005ff0:	1e42      	subs	r2, r0, #1
 8005ff2:	e00b      	b.n	800600c <memmove+0x26>
 8005ff4:	4298      	cmp	r0, r3
 8005ff6:	d2fb      	bcs.n	8005ff0 <memmove+0xa>
 8005ff8:	1881      	adds	r1, r0, r2
 8005ffa:	1ad2      	subs	r2, r2, r3
 8005ffc:	42d3      	cmn	r3, r2
 8005ffe:	d004      	beq.n	800600a <memmove+0x24>
 8006000:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006004:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006008:	e7f8      	b.n	8005ffc <memmove+0x16>
 800600a:	bd10      	pop	{r4, pc}
 800600c:	4299      	cmp	r1, r3
 800600e:	d004      	beq.n	800601a <memmove+0x34>
 8006010:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006014:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006018:	e7f8      	b.n	800600c <memmove+0x26>
 800601a:	bd10      	pop	{r4, pc}

0800601c <_free_r>:
 800601c:	b538      	push	{r3, r4, r5, lr}
 800601e:	4605      	mov	r5, r0
 8006020:	2900      	cmp	r1, #0
 8006022:	d046      	beq.n	80060b2 <_free_r+0x96>
 8006024:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006028:	1f0c      	subs	r4, r1, #4
 800602a:	2b00      	cmp	r3, #0
 800602c:	bfb8      	it	lt
 800602e:	18e4      	addlt	r4, r4, r3
 8006030:	f000 f8d6 	bl	80061e0 <__malloc_lock>
 8006034:	4a1f      	ldr	r2, [pc, #124]	; (80060b4 <_free_r+0x98>)
 8006036:	6813      	ldr	r3, [r2, #0]
 8006038:	4611      	mov	r1, r2
 800603a:	b913      	cbnz	r3, 8006042 <_free_r+0x26>
 800603c:	6063      	str	r3, [r4, #4]
 800603e:	6014      	str	r4, [r2, #0]
 8006040:	e032      	b.n	80060a8 <_free_r+0x8c>
 8006042:	42a3      	cmp	r3, r4
 8006044:	d90e      	bls.n	8006064 <_free_r+0x48>
 8006046:	6822      	ldr	r2, [r4, #0]
 8006048:	18a0      	adds	r0, r4, r2
 800604a:	4283      	cmp	r3, r0
 800604c:	bf04      	itt	eq
 800604e:	6818      	ldreq	r0, [r3, #0]
 8006050:	685b      	ldreq	r3, [r3, #4]
 8006052:	6063      	str	r3, [r4, #4]
 8006054:	bf04      	itt	eq
 8006056:	1812      	addeq	r2, r2, r0
 8006058:	6022      	streq	r2, [r4, #0]
 800605a:	600c      	str	r4, [r1, #0]
 800605c:	e024      	b.n	80060a8 <_free_r+0x8c>
 800605e:	42a2      	cmp	r2, r4
 8006060:	d803      	bhi.n	800606a <_free_r+0x4e>
 8006062:	4613      	mov	r3, r2
 8006064:	685a      	ldr	r2, [r3, #4]
 8006066:	2a00      	cmp	r2, #0
 8006068:	d1f9      	bne.n	800605e <_free_r+0x42>
 800606a:	6818      	ldr	r0, [r3, #0]
 800606c:	1819      	adds	r1, r3, r0
 800606e:	42a1      	cmp	r1, r4
 8006070:	d10b      	bne.n	800608a <_free_r+0x6e>
 8006072:	6821      	ldr	r1, [r4, #0]
 8006074:	4401      	add	r1, r0
 8006076:	1858      	adds	r0, r3, r1
 8006078:	4282      	cmp	r2, r0
 800607a:	6019      	str	r1, [r3, #0]
 800607c:	d114      	bne.n	80060a8 <_free_r+0x8c>
 800607e:	6810      	ldr	r0, [r2, #0]
 8006080:	6852      	ldr	r2, [r2, #4]
 8006082:	605a      	str	r2, [r3, #4]
 8006084:	4401      	add	r1, r0
 8006086:	6019      	str	r1, [r3, #0]
 8006088:	e00e      	b.n	80060a8 <_free_r+0x8c>
 800608a:	d902      	bls.n	8006092 <_free_r+0x76>
 800608c:	230c      	movs	r3, #12
 800608e:	602b      	str	r3, [r5, #0]
 8006090:	e00a      	b.n	80060a8 <_free_r+0x8c>
 8006092:	6821      	ldr	r1, [r4, #0]
 8006094:	1860      	adds	r0, r4, r1
 8006096:	4282      	cmp	r2, r0
 8006098:	bf04      	itt	eq
 800609a:	6810      	ldreq	r0, [r2, #0]
 800609c:	6852      	ldreq	r2, [r2, #4]
 800609e:	6062      	str	r2, [r4, #4]
 80060a0:	bf04      	itt	eq
 80060a2:	1809      	addeq	r1, r1, r0
 80060a4:	6021      	streq	r1, [r4, #0]
 80060a6:	605c      	str	r4, [r3, #4]
 80060a8:	4628      	mov	r0, r5
 80060aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060ae:	f000 b898 	b.w	80061e2 <__malloc_unlock>
 80060b2:	bd38      	pop	{r3, r4, r5, pc}
 80060b4:	20004558 	.word	0x20004558

080060b8 <_malloc_r>:
 80060b8:	b570      	push	{r4, r5, r6, lr}
 80060ba:	1ccd      	adds	r5, r1, #3
 80060bc:	f025 0503 	bic.w	r5, r5, #3
 80060c0:	3508      	adds	r5, #8
 80060c2:	2d0c      	cmp	r5, #12
 80060c4:	bf38      	it	cc
 80060c6:	250c      	movcc	r5, #12
 80060c8:	2d00      	cmp	r5, #0
 80060ca:	4606      	mov	r6, r0
 80060cc:	db01      	blt.n	80060d2 <_malloc_r+0x1a>
 80060ce:	42a9      	cmp	r1, r5
 80060d0:	d902      	bls.n	80060d8 <_malloc_r+0x20>
 80060d2:	230c      	movs	r3, #12
 80060d4:	6033      	str	r3, [r6, #0]
 80060d6:	e046      	b.n	8006166 <_malloc_r+0xae>
 80060d8:	f000 f882 	bl	80061e0 <__malloc_lock>
 80060dc:	4b23      	ldr	r3, [pc, #140]	; (800616c <_malloc_r+0xb4>)
 80060de:	681c      	ldr	r4, [r3, #0]
 80060e0:	461a      	mov	r2, r3
 80060e2:	4621      	mov	r1, r4
 80060e4:	b1a1      	cbz	r1, 8006110 <_malloc_r+0x58>
 80060e6:	680b      	ldr	r3, [r1, #0]
 80060e8:	1b5b      	subs	r3, r3, r5
 80060ea:	d40e      	bmi.n	800610a <_malloc_r+0x52>
 80060ec:	2b0b      	cmp	r3, #11
 80060ee:	d903      	bls.n	80060f8 <_malloc_r+0x40>
 80060f0:	600b      	str	r3, [r1, #0]
 80060f2:	18cc      	adds	r4, r1, r3
 80060f4:	50cd      	str	r5, [r1, r3]
 80060f6:	e01e      	b.n	8006136 <_malloc_r+0x7e>
 80060f8:	428c      	cmp	r4, r1
 80060fa:	bf0d      	iteet	eq
 80060fc:	6863      	ldreq	r3, [r4, #4]
 80060fe:	684b      	ldrne	r3, [r1, #4]
 8006100:	6063      	strne	r3, [r4, #4]
 8006102:	6013      	streq	r3, [r2, #0]
 8006104:	bf18      	it	ne
 8006106:	460c      	movne	r4, r1
 8006108:	e015      	b.n	8006136 <_malloc_r+0x7e>
 800610a:	460c      	mov	r4, r1
 800610c:	6849      	ldr	r1, [r1, #4]
 800610e:	e7e9      	b.n	80060e4 <_malloc_r+0x2c>
 8006110:	4c17      	ldr	r4, [pc, #92]	; (8006170 <_malloc_r+0xb8>)
 8006112:	6823      	ldr	r3, [r4, #0]
 8006114:	b91b      	cbnz	r3, 800611e <_malloc_r+0x66>
 8006116:	4630      	mov	r0, r6
 8006118:	f000 f852 	bl	80061c0 <_sbrk_r>
 800611c:	6020      	str	r0, [r4, #0]
 800611e:	4629      	mov	r1, r5
 8006120:	4630      	mov	r0, r6
 8006122:	f000 f84d 	bl	80061c0 <_sbrk_r>
 8006126:	1c43      	adds	r3, r0, #1
 8006128:	d018      	beq.n	800615c <_malloc_r+0xa4>
 800612a:	1cc4      	adds	r4, r0, #3
 800612c:	f024 0403 	bic.w	r4, r4, #3
 8006130:	42a0      	cmp	r0, r4
 8006132:	d10d      	bne.n	8006150 <_malloc_r+0x98>
 8006134:	6025      	str	r5, [r4, #0]
 8006136:	4630      	mov	r0, r6
 8006138:	f000 f853 	bl	80061e2 <__malloc_unlock>
 800613c:	f104 000b 	add.w	r0, r4, #11
 8006140:	1d23      	adds	r3, r4, #4
 8006142:	f020 0007 	bic.w	r0, r0, #7
 8006146:	1ac3      	subs	r3, r0, r3
 8006148:	d00e      	beq.n	8006168 <_malloc_r+0xb0>
 800614a:	425a      	negs	r2, r3
 800614c:	50e2      	str	r2, [r4, r3]
 800614e:	bd70      	pop	{r4, r5, r6, pc}
 8006150:	1a21      	subs	r1, r4, r0
 8006152:	4630      	mov	r0, r6
 8006154:	f000 f834 	bl	80061c0 <_sbrk_r>
 8006158:	3001      	adds	r0, #1
 800615a:	d1eb      	bne.n	8006134 <_malloc_r+0x7c>
 800615c:	230c      	movs	r3, #12
 800615e:	6033      	str	r3, [r6, #0]
 8006160:	4630      	mov	r0, r6
 8006162:	f000 f83e 	bl	80061e2 <__malloc_unlock>
 8006166:	2000      	movs	r0, #0
 8006168:	bd70      	pop	{r4, r5, r6, pc}
 800616a:	bf00      	nop
 800616c:	20004558 	.word	0x20004558
 8006170:	20004554 	.word	0x20004554

08006174 <_realloc_r>:
 8006174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006176:	4607      	mov	r7, r0
 8006178:	4615      	mov	r5, r2
 800617a:	460e      	mov	r6, r1
 800617c:	b921      	cbnz	r1, 8006188 <_realloc_r+0x14>
 800617e:	4611      	mov	r1, r2
 8006180:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006184:	f7ff bf98 	b.w	80060b8 <_malloc_r>
 8006188:	b91a      	cbnz	r2, 8006192 <_realloc_r+0x1e>
 800618a:	f7ff ff47 	bl	800601c <_free_r>
 800618e:	4628      	mov	r0, r5
 8006190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006192:	f000 f827 	bl	80061e4 <_malloc_usable_size_r>
 8006196:	4285      	cmp	r5, r0
 8006198:	d90e      	bls.n	80061b8 <_realloc_r+0x44>
 800619a:	4629      	mov	r1, r5
 800619c:	4638      	mov	r0, r7
 800619e:	f7ff ff8b 	bl	80060b8 <_malloc_r>
 80061a2:	4604      	mov	r4, r0
 80061a4:	b150      	cbz	r0, 80061bc <_realloc_r+0x48>
 80061a6:	4631      	mov	r1, r6
 80061a8:	462a      	mov	r2, r5
 80061aa:	f7ff ff11 	bl	8005fd0 <memcpy>
 80061ae:	4631      	mov	r1, r6
 80061b0:	4638      	mov	r0, r7
 80061b2:	f7ff ff33 	bl	800601c <_free_r>
 80061b6:	e001      	b.n	80061bc <_realloc_r+0x48>
 80061b8:	4630      	mov	r0, r6
 80061ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061bc:	4620      	mov	r0, r4
 80061be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080061c0 <_sbrk_r>:
 80061c0:	b538      	push	{r3, r4, r5, lr}
 80061c2:	4c06      	ldr	r4, [pc, #24]	; (80061dc <_sbrk_r+0x1c>)
 80061c4:	2300      	movs	r3, #0
 80061c6:	4605      	mov	r5, r0
 80061c8:	4608      	mov	r0, r1
 80061ca:	6023      	str	r3, [r4, #0]
 80061cc:	f000 f814 	bl	80061f8 <_sbrk>
 80061d0:	1c43      	adds	r3, r0, #1
 80061d2:	d102      	bne.n	80061da <_sbrk_r+0x1a>
 80061d4:	6823      	ldr	r3, [r4, #0]
 80061d6:	b103      	cbz	r3, 80061da <_sbrk_r+0x1a>
 80061d8:	602b      	str	r3, [r5, #0]
 80061da:	bd38      	pop	{r3, r4, r5, pc}
 80061dc:	20005c90 	.word	0x20005c90

080061e0 <__malloc_lock>:
 80061e0:	4770      	bx	lr

080061e2 <__malloc_unlock>:
 80061e2:	4770      	bx	lr

080061e4 <_malloc_usable_size_r>:
 80061e4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80061e8:	2800      	cmp	r0, #0
 80061ea:	bfbe      	ittt	lt
 80061ec:	1809      	addlt	r1, r1, r0
 80061ee:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 80061f2:	18c0      	addlt	r0, r0, r3
 80061f4:	3804      	subs	r0, #4
 80061f6:	4770      	bx	lr

080061f8 <_sbrk>:
 80061f8:	4b04      	ldr	r3, [pc, #16]	; (800620c <_sbrk+0x14>)
 80061fa:	6819      	ldr	r1, [r3, #0]
 80061fc:	4602      	mov	r2, r0
 80061fe:	b909      	cbnz	r1, 8006204 <_sbrk+0xc>
 8006200:	4903      	ldr	r1, [pc, #12]	; (8006210 <_sbrk+0x18>)
 8006202:	6019      	str	r1, [r3, #0]
 8006204:	6818      	ldr	r0, [r3, #0]
 8006206:	4402      	add	r2, r0
 8006208:	601a      	str	r2, [r3, #0]
 800620a:	4770      	bx	lr
 800620c:	2000455c 	.word	0x2000455c
 8006210:	20005c94 	.word	0x20005c94

08006214 <_init>:
 8006214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006216:	bf00      	nop
 8006218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800621a:	bc08      	pop	{r3}
 800621c:	469e      	mov	lr, r3
 800621e:	4770      	bx	lr

08006220 <_fini>:
 8006220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006222:	bf00      	nop
 8006224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006226:	bc08      	pop	{r3}
 8006228:	469e      	mov	lr, r3
 800622a:	4770      	bx	lr
